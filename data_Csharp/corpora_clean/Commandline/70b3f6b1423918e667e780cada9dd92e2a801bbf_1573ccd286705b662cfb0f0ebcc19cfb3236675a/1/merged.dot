digraph  {
n8 [label="CommandLine.Tests.Mocks.OptionsWithMultipleSet", span=""];
n0 [label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", span="35-35", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()"];
n1 [label="Red = 0", span="37-37", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()"];
n2 [label="Green = 0", span="38-38", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()"];
n3 [label="Blue = 0", span="39-39", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()"];
n4 [label="Hue = 0", span="40-40", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()"];
n5 [label="Saturation = 0", span="41-41", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()"];
n6 [label="Value = 0", span="42-42", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()"];
n7 [label="Exit CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", span="35-35", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()"];
m0_3 [label="Entry System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, bool)", span="0-0", cluster="System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, bool)", file="Options_With_SetName_That_Ends_With_Previous_SetName.cs"];
m0_0 [label="Entry Ninject.Infrastructure.Language.ExtensionsForICustomAttributeProvider.HasAttribute(System.Reflection.ICustomAttributeProvider, System.Type)", span="19-19", cluster="Ninject.Infrastructure.Language.ExtensionsForICustomAttributeProvider.HasAttribute(System.Reflection.ICustomAttributeProvider, System.Type)", file="Options_With_SetName_That_Ends_With_Previous_SetName.cs"];
m0_1 [label="return member.IsDefined(type, true);", span="21-21", cluster="Ninject.Infrastructure.Language.ExtensionsForICustomAttributeProvider.HasAttribute(System.Reflection.ICustomAttributeProvider, System.Type)", file="Options_With_SetName_That_Ends_With_Previous_SetName.cs"];
m0_2 [label="Exit Ninject.Infrastructure.Language.ExtensionsForICustomAttributeProvider.HasAttribute(System.Reflection.ICustomAttributeProvider, System.Type)", span="19-19", cluster="Ninject.Infrastructure.Language.ExtensionsForICustomAttributeProvider.HasAttribute(System.Reflection.ICustomAttributeProvider, System.Type)", file="Options_With_SetName_That_Ends_With_Previous_SetName.cs"];
m1_11 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_verbs()", span="22-22", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_12 [label="var expected = string.Empty", span="24-24", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_13 [label="Parser.Default.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''clone'', ''https://value.org/user/file.git'' })\r\n                .WithParsed<Add_Verb>(opts => expected = ''wrong1'')\r\n                .WithParsed<Commit_Verb>(opts => expected = ''wrong2'')\r\n                .WithParsed<Clone_Verb>(opts => expected = opts.Urls.First())", span="25-29", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_14 [label="''https://value.org/user/file.git''.ShouldBeEquivalentTo(expected)", span="31-31", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_15 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_verbs()", span="22-22", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_152 [label="Entry CommandLine.ParserResult<object>.MapResult<T1, TResult>(System.Func<T1, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", span="98-98", cluster="CommandLine.ParserResult<object>.MapResult<T1, TResult>(System.Func<T1, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", file="ParserResultExtensionsTests.cs"];
m1_163 [label="Entry CommandLine.ParserResult<object>.MapResult<T1, T2, T3, T4, T5, TResult>(System.Func<T1, TResult>, System.Func<T2, TResult>, System.Func<T3, TResult>, System.Func<T4, TResult>, System.Func<T5, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", span="248-248", cluster="CommandLine.ParserResult<object>.MapResult<T1, T2, T3, T4, T5, TResult>(System.Func<T1, TResult>, System.Func<T2, TResult>, System.Func<T3, TResult>, System.Func<T4, TResult>, System.Func<T5, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", file="ParserResultExtensionsTests.cs"];
m1_6 [label="Entry CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", span="20-20", cluster="CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", file="ParserResultExtensionsTests.cs"];
m1_135 [label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3, T4>(System.Collections.Generic.IEnumerable<string>)", span="68-68", cluster="CommandLine.Parser.ParseArguments<T1, T2, T3, T4>(System.Collections.Generic.IEnumerable<string>)", file="ParserResultExtensionsTests.cs"];
m1_16 [label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", span="46-46", cluster="CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", file="ParserResultExtensionsTests.cs"];
m1_65 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_not_parsed()", span="69-69", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_66 [label="var expected = ''a default''", span="71-71", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_67 [label="Parser.Default.ParseArguments<Simple_Options>(new[] { ''-i'', ''aaa'' })\r\n                .WithParsed(opts => expected = opts.StringValue)\r\n                .WithNotParsed(_ => expected = ''changed'')", span="72-74", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_68 [label="''changed''.ShouldBeEquivalentTo(expected)", span="76-76", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_69 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_not_parsed()", span="69-69", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_104 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", span="103-103", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs"];
m1_105 [label="var expected = Parser.Default.ParseArguments<Simple_Options>(new[] { ''-i'', ''aaa'' })\r\n                .MapResult(_ => 0, _ => -1)", span="105-106", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs"];
m1_106 [label="(-1).ShouldBeEquivalentTo(expected)", span="108-108", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs"];
m1_107 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", span="103-103", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs"];
m1_54 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_parsed()", span="58-58", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_55 [label="var expected = string.Empty", span="60-60", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_56 [label="Parser.Default.ParseArguments<Simple_Options>(new[] { ''--stringvalue'', ''value'' })\r\n                .WithParsed(opts => expected = opts.StringValue)\r\n                .WithNotParsed(_ => expected = ''changed'')", span="61-63", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_57 [label="''value''.ShouldBeEquivalentTo(expected)", span="65-65", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_58 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_parsed()", span="58-58", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_17 [label="Entry CommandLine.ParserResult<object>.WithParsed<T>(System.Action<T>)", span="37-37", cluster="CommandLine.ParserResult<object>.WithParsed<T>(System.Action<T>)", file="ParserResultExtensionsTests.cs"];
m1_28 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_not_parsed()", span="35-35", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_29 [label="var expected = ''a default''", span="37-37", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_30 [label="Parser.Default.ParseArguments<Simple_Options>(new[] { ''-i'', ''aaa'' })\r\n                .WithNotParsed(_ => expected = ''changed'')", span="38-39", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_31 [label="''changed''.ShouldBeEquivalentTo(expected)", span="41-41", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_32 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_not_parsed()", span="35-35", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs"];
m1_179 [label="Entry lambda expression", span="162-162", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_8 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_9 [label="expected = opts.StringValue", span="16-16", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_10 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_18 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_21 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_24 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_19 [label="expected = ''wrong1''", span="27-27", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_20 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_22 [label="expected = ''wrong2''", span="28-28", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_23 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_25 [label="expected = opts.Urls.First()", span="29-29", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_26 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_34 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_35 [label="expected = ''changed''", span="39-39", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_36 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_42 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_45 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_48 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_51 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_43 [label="expected = ''wrong1''", span="49-49", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_44 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_46 [label="expected = ''wrong2''", span="50-50", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_47 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_49 [label="expected = ''wrong3''", span="51-51", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_50 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_52 [label="expected = ''changed''", span="52-52", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_53 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_59 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_62 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_60 [label="expected = opts.StringValue", span="62-62", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_61 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_63 [label="expected = ''changed''", span="63-63", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_64 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_70 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_73 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_71 [label="expected = opts.StringValue", span="73-73", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_72 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_74 [label="expected = ''changed''", span="74-74", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_75 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_81 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_84 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_82 [label=0, span="83-83", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_83 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_85 [label="-1", span="83-83", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_86 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_92 [label="Entry lambda expression", span="94-94", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_95 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_98 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_101 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_93 [label=0, span="94-94", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_94 [label="Exit lambda expression", span="94-94", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_96 [label=1, span="95-95", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_97 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_99 [label=2, span="96-96", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_100 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_102 [label=3, span="97-97", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_103 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_108 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_111 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_109 [label=0, span="106-106", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_110 [label="Exit lambda expression", span="106-106", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_112 [label="-1", span="106-106", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_113 [label="Exit lambda expression", span="106-106", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_118 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_121 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_124 [label="Entry lambda expression", span="119-119", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_127 [label="Entry lambda expression", span="120-120", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_119 [label=0, span="117-117", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_120 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_122 [label=1, span="118-118", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_123 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_125 [label=2, span="119-119", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_126 [label="Exit lambda expression", span="119-119", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_128 [label=3, span="120-120", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_129 [label="Exit lambda expression", span="120-120", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_136 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_139 [label="Entry lambda expression", span="132-132", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_142 [label="Entry lambda expression", span="133-133", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_145 [label="Entry lambda expression", span="134-134", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_137 [label="expected = ''wrong1''", span="131-131", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_138 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_140 [label="expected = ''wrong2''", span="132-132", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_141 [label="Exit lambda expression", span="132-132", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_143 [label="expected = ''wrong3''", span="133-133", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_144 [label="Exit lambda expression", span="133-133", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_146 [label="expected = opts.FileName", span="134-134", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_147 [label="Exit lambda expression", span="134-134", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_153 [label="Entry lambda expression", span="145-145", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_156 [label="Entry lambda expression", span="146-146", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_154 [label=1, span="145-145", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_155 [label="Exit lambda expression", span="145-145", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_157 [label=2, span="146-146", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_158 [label="Exit lambda expression", span="146-146", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_164 [label="Entry lambda expression", span="157-157", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_167 [label="Entry lambda expression", span="158-158", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_170 [label="Entry lambda expression", span="159-159", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_173 [label="Entry lambda expression", span="160-160", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_176 [label="Entry lambda expression", span="161-161", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_165 [label=0, span="157-157", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_166 [label="Exit lambda expression", span="157-157", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_168 [label=1, span="158-158", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_169 [label="Exit lambda expression", span="158-158", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_171 [label=2, span="159-159", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_172 [label="Exit lambda expression", span="159-159", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_174 [label=4, span="160-160", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_175 [label="Exit lambda expression", span="160-160", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_177 [label=3, span="161-161", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_178 [label="Exit lambda expression", span="161-161", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_180 [label=5, span="162-162", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_181 [label="Exit lambda expression", span="162-162", cluster="lambda expression", file="ParserResultExtensionsTests.cs"];
m1_27 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ParserResultExtensionsTests.cs"];
m1_80 [label="Entry CommandLine.ParserResult<TSource>.MapResult<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", span="77-77", cluster="CommandLine.ParserResult<TSource>.MapResult<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", file="ParserResultExtensionsTests.cs"];
m1_148 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_single_base_verbs()", span="140-140", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_single_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_149 [label="var expected = Parser.Default.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb, Derived_Verb>(\r\n                new[] { ''derivedadd'', ''dummy.bin'' })\r\n                .MapResult(\r\n                    (Base_Class_For_Verb opts) => 1,\r\n                    errs => 2)", span="142-146", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_single_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_150 [label="1.ShouldBeEquivalentTo(expected)", span="148-148", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_single_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_151 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_single_base_verbs()", span="140-140", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_single_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_130 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_base_verbs()", span="126-126", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_131 [label="var expected = string.Empty", span="128-128", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_132 [label="Parser.Default.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb, Derived_Verb>(\r\n                new[] { ''derivedadd'', ''dummy.bin'' })\r\n                .WithParsed<Add_Verb>(opts => expected = ''wrong1'')\r\n                .WithParsed<Commit_Verb>(opts => expected = ''wrong2'')\r\n                .WithParsed<Clone_Verb>(opts => expected = ''wrong3'')\r\n                .WithParsed<Base_Class_For_Verb>(opts => expected = opts.FileName)", span="129-134", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_133 [label="''dummy.bin''.ShouldBeEquivalentTo(expected)", span="136-136", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_134 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_base_verbs()", span="126-126", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed_for_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_76 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", span="80-80", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs"];
m1_77 [label="var expected = Parser.Default.ParseArguments<Simple_Options>(new[] { ''--stringvalue'', ''value'' })\r\n                .MapResult(_ => 0, _ => -1)", span="82-83", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs"];
m1_78 [label="0.ShouldBeEquivalentTo(expected)", span="85-85", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs"];
m1_79 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", span="80-80", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs"];
m1_91 [label="Entry CommandLine.ParserResult<object>.MapResult<T1, T2, T3, TResult>(System.Func<T1, TResult>, System.Func<T2, TResult>, System.Func<T3, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", span="159-159", cluster="CommandLine.ParserResult<object>.MapResult<T1, T2, T3, TResult>(System.Func<T1, TResult>, System.Func<T2, TResult>, System.Func<T3, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", file="ParserResultExtensionsTests.cs"];
m1_114 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code_for_verbs()", span="112-112", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_115 [label="var expected = Parser.Default.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''undefined'', ''-xyz'' })\r\n                .MapResult(\r\n                    (Add_Verb opts) => 0,\r\n                    (Commit_Verb opts) => 1,\r\n                    (Clone_Verb opts) => 2,\r\n                    errs => 3)", span="114-120", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_116 [label="3.ShouldBeEquivalentTo(expected)", span="122-122", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_117 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code_for_verbs()", span="112-112", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_33 [label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="58-58", cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserResultExtensionsTests.cs"];
m1_37 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_parsed_for_verbs()", span="45-45", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_38 [label="var expected = ''a default''", span="47-47", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_39 [label="Parser.Default.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''undefined'', ''-xyz'' })\r\n                .WithParsed<Add_Verb>(opts => expected = ''wrong1'')\r\n                .WithParsed<Commit_Verb>(opts => expected = ''wrong2'')\r\n                .WithParsed<Clone_Verb>(opts => expected = ''wrong3'')\r\n                .WithNotParsed(_ => expected = ''changed'')", span="48-52", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_40 [label="''changed''.ShouldBeEquivalentTo(expected)", span="54-54", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_41 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_parsed_for_verbs()", span="45-45", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_not_parsed_lambda_when_parsed_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_159 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_multiple_base_verbs()", span="152-152", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_multiple_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_160 [label="var expected = Parser.Default.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb, Derived_Verb>(\r\n                new[] { ''derivedadd'', ''dummy.bin'' })\r\n                .MapResult(\r\n                    (Add_Verb opts) => 0,\r\n                    (Commit_Verb opts) => 1,\r\n                    (Clone_Verb opts) => 2,\r\n                    (Base_Class_For_Verb opts) => 4,\r\n                    (Derived_Verb opts) => 3,\r\n                    errs => 5)", span="154-162", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_multiple_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_161 [label="4.ShouldBeEquivalentTo(expected)", span="164-164", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_multiple_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_162 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_multiple_base_verbs()", span="152-152", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_multiple_base_verbs()", file="ParserResultExtensionsTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed()", span="12-12", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_1 [label="var expected = string.Empty", span="14-14", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_2 [label="Parser.Default.ParseArguments<Simple_Options>(new[] { ''--stringvalue'', ''value'' })\r\n                .WithParsed(opts => expected = opts.StringValue)", span="15-16", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_3 [label="''value''.ShouldBeEquivalentTo(expected)", span="18-18", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_4 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed()", span="12-12", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoke_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs"];
m1_5 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="ParserResultExtensionsTests.cs"];
m1_87 [label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_verbs()", span="89-89", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_88 [label="var expected = Parser.Default.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''clone'', ''https://value.org/user/file.git'' })\r\n                .MapResult(\r\n                    (Add_Verb opts) => 0,\r\n                    (Commit_Verb opts) => 1,\r\n                    (Clone_Verb opts) => 2,\r\n                    errs => 3)", span="91-97", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_89 [label="2.ShouldBeEquivalentTo(expected)", span="99-99", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_90 [label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_verbs()", span="89-89", cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code_for_verbs()", file="ParserResultExtensionsTests.cs"];
m1_7 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="ParserResultExtensionsTests.cs"];
m2_41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ParserTests.cs"];
m2_42 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ParserTests.cs"];
m2_43 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ParserTests.cs"];
m2_44 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ParserTests.cs"];
m2_358 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_359 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_360 [label="Assert.Throws<ApplicationException>(test)", span="844-844", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_361 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_339 [label="Entry Unk.>", span="", cluster="Unk.>", file="ParserTests.cs"];
m2_63 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="ParserTests.cs"];
m2_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ParserTests.cs"];
m2_153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ParserTests.cs"];
m2_154 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ParserTests.cs"];
m2_155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ParserTests.cs"];
m2_55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="ParserTests.cs"];
m2_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ParserTests.cs"];
m2_268 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ParserTests.cs"];
m2_269 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ParserTests.cs"];
m2_270 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ParserTests.cs"];
m2_335 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_336 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_337 [label="Assert.Throws<ApplicationException>(test)", span="816-816", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_338 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_308 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="ParserTests.cs"];
m2_309 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="ParserTests.cs"];
m2_310 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="ParserTests.cs"];
m2_311 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="ParserTests.cs"];
m2_79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ParserTests.cs"];
m2_167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserTests.cs"];
m2_168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserTests.cs"];
m2_169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserTests.cs"];
m2_171 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserTests.cs"];
m2_170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserTests.cs"];
m2_172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ParserTests.cs"];
m2_259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_260 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_261 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_262 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_263 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="ParserTests.cs"];
m2_9 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ParserTests.cs"];
m2_204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="ParserTests.cs"];
m2_74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_77 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_247 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="ParserTests.cs"];
m2_92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_95 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="ParserTests.cs"];
m2_315 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserTests.cs"];
m2_316 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserTests.cs"];
m2_318 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserTests.cs"];
m2_319 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserTests.cs"];
m2_317 [label="result.Value.FileName != null", span="771-771", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserTests.cs"];
m2_320 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="ParserTests.cs"];
m2_299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="ParserTests.cs"];
m2_307 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="ParserTests.cs"];
m2_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="ParserTests.cs"];
m2_251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_254 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_113 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_369 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="ParserTests.cs"];
m2_370 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="ParserTests.cs"];
m2_371 [label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="ParserTests.cs"];
m2_372 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="ParserTests.cs"];
m2_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ParserTests.cs"];
m2_378 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="ParserTests.cs"];
m2_105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="ParserTests.cs"];
m2_399 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="902-902", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ParserTests.cs"];
m2_400 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="907-911", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ParserTests.cs"];
m2_401 [label="expected.ShouldBeEquivalentTo(result.Value)", span="914-914", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ParserTests.cs"];
m2_402 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="902-902", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ParserTests.cs"];
m2_83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="ParserTests.cs"];
m2_144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ParserTests.cs"];
m2_145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ParserTests.cs"];
m2_146 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ParserTests.cs"];
m2_147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ParserTests.cs"];
m2_56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ParserTests.cs"];
m2_57 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ParserTests.cs"];
m2_58 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ParserTests.cs"];
m2_59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ParserTests.cs"];
m2_32 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ParserTests.cs"];
m2_33 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ParserTests.cs"];
m2_34 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ParserTests.cs"];
m2_35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ParserTests.cs"];
m2_412 [label="Entry lambda expression", span="927-927", cluster="lambda expression", file="ParserTests.cs"];
m2_14 [label=fakeOptions, span="28-28", cluster="lambda expression", file="ParserTests.cs"];
m2_13 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="ParserTests.cs"];
m2_15 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="ParserTests.cs"];
m2_21 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="ParserTests.cs"];
m2_22 [label="new FakeOptions()", span="49-49", cluster="lambda expression", file="ParserTests.cs"];
m2_23 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="ParserTests.cs"];
m2_28 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="ParserTests.cs"];
m2_29 [label="new FakeOptionsWithDouble()", span="72-72", cluster="lambda expression", file="ParserTests.cs"];
m2_30 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="ParserTests.cs"];
m2_37 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="ParserTests.cs"];
m2_38 [label="new FakeOptionsWithSequence()", span="96-96", cluster="lambda expression", file="ParserTests.cs"];
m2_39 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="ParserTests.cs"];
m2_45 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="ParserTests.cs"];
m2_46 [label="new FakeOptions()", span="118-118", cluster="lambda expression", file="ParserTests.cs"];
m2_47 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="ParserTests.cs"];
m2_52 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="ParserTests.cs"];
m2_53 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141", cluster="lambda expression", file="ParserTests.cs"];
m2_54 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="ParserTests.cs"];
m2_60 [label="Entry lambda expression", span="163-163", cluster="lambda expression", file="ParserTests.cs"];
m2_61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163", cluster="lambda expression", file="ParserTests.cs"];
m2_62 [label="Exit lambda expression", span="163-163", cluster="lambda expression", file="ParserTests.cs"];
m2_71 [label="Entry lambda expression", span="182-182", cluster="lambda expression", file="ParserTests.cs"];
m2_72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182", cluster="lambda expression", file="ParserTests.cs"];
m2_73 [label="Exit lambda expression", span="182-182", cluster="lambda expression", file="ParserTests.cs"];
m2_80 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="ParserTests.cs"];
m2_81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201", cluster="lambda expression", file="ParserTests.cs"];
m2_82 [label="Exit lambda expression", span="201-201", cluster="lambda expression", file="ParserTests.cs"];
m2_89 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="ParserTests.cs"];
m2_90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220", cluster="lambda expression", file="ParserTests.cs"];
m2_91 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="ParserTests.cs"];
m2_97 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="ParserTests.cs"];
m2_98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239", cluster="lambda expression", file="ParserTests.cs"];
m2_99 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="ParserTests.cs"];
m2_106 [label="Entry lambda expression", span="263-263", cluster="lambda expression", file="ParserTests.cs"];
m2_107 [label="new FakeOptionsWithEnum()", span="263-263", cluster="lambda expression", file="ParserTests.cs"];
m2_108 [label="Exit lambda expression", span="263-263", cluster="lambda expression", file="ParserTests.cs"];
m2_116 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="ParserTests.cs"];
m2_117 [label="new FakeOptionsWithEnum()", span="282-282", cluster="lambda expression", file="ParserTests.cs"];
m2_118 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="ParserTests.cs"];
m2_124 [label="Entry lambda expression", span="301-301", cluster="lambda expression", file="ParserTests.cs"];
m2_125 [label="new FakeOptionsWithEnum()", span="301-301", cluster="lambda expression", file="ParserTests.cs"];
m2_126 [label="Exit lambda expression", span="301-301", cluster="lambda expression", file="ParserTests.cs"];
m2_132 [label="Entry lambda expression", span="320-320", cluster="lambda expression", file="ParserTests.cs"];
m2_133 [label="new FakeOptionsWithEnum()", span="320-320", cluster="lambda expression", file="ParserTests.cs"];
m2_134 [label="Exit lambda expression", span="320-320", cluster="lambda expression", file="ParserTests.cs"];
m2_141 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="ParserTests.cs"];
m2_142 [label="new FakeOptionsWithValues()", span="345-345", cluster="lambda expression", file="ParserTests.cs"];
m2_143 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="ParserTests.cs"];
m2_148 [label="Entry lambda expression", span="368-368", cluster="lambda expression", file="ParserTests.cs"];
m2_149 [label="new FakeOptionsWithSequenceWithoutRange()", span="368-368", cluster="lambda expression", file="ParserTests.cs"];
m2_150 [label="Exit lambda expression", span="368-368", cluster="lambda expression", file="ParserTests.cs"];
m2_156 [label="Entry lambda expression", span="390-390", cluster="lambda expression", file="ParserTests.cs"];
m2_157 [label="new FakeOptionsWithSequenceAndSeparator()", span="390-390", cluster="lambda expression", file="ParserTests.cs"];
m2_158 [label="Exit lambda expression", span="390-390", cluster="lambda expression", file="ParserTests.cs"];
m2_164 [label="Entry lambda expression", span="412-412", cluster="lambda expression", file="ParserTests.cs"];
m2_165 [label="new FakeOptionsWithSequenceAndSeparator()", span="412-412", cluster="lambda expression", file="ParserTests.cs"];
m2_166 [label="Exit lambda expression", span="412-412", cluster="lambda expression", file="ParserTests.cs"];
m2_174 [label="Entry lambda expression", span="441-441", cluster="lambda expression", file="ParserTests.cs"];
m2_177 [label="Entry lambda expression", span="442-444", cluster="lambda expression", file="ParserTests.cs"];
m2_175 [label="new FakeOptionsWithValues()", span="441-441", cluster="lambda expression", file="ParserTests.cs"];
m2_176 [label="Exit lambda expression", span="441-441", cluster="lambda expression", file="ParserTests.cs"];
m2_178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444", cluster="lambda expression", file="ParserTests.cs"];
m2_182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444", cluster="lambda expression", file="ParserTests.cs"];
m2_186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444", cluster="lambda expression", file="ParserTests.cs"];
m2_179 [label="Exit lambda expression", span="442-444", cluster="lambda expression", file="ParserTests.cs"];
m2_181 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="ParserTests.cs"];
m2_183 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="ParserTests.cs"];
m2_185 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="ParserTests.cs"];
m2_187 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="ParserTests.cs"];
m2_195 [label="Entry lambda expression", span="467-467", cluster="lambda expression", file="ParserTests.cs"];
m2_196 [label="new FakeOptionsWithSets()", span="467-467", cluster="lambda expression", file="ParserTests.cs"];
m2_197 [label="Exit lambda expression", span="467-467", cluster="lambda expression", file="ParserTests.cs"];
m2_205 [label="Entry lambda expression", span="487-487", cluster="lambda expression", file="ParserTests.cs"];
m2_206 [label="new FakeOptionWithRequiredAndSet()", span="487-487", cluster="lambda expression", file="ParserTests.cs"];
m2_207 [label="Exit lambda expression", span="487-487", cluster="lambda expression", file="ParserTests.cs"];
m2_213 [label="Entry lambda expression", span="507-507", cluster="lambda expression", file="ParserTests.cs"];
m2_214 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression", file="ParserTests.cs"];
m2_215 [label="Exit lambda expression", span="507-507", cluster="lambda expression", file="ParserTests.cs"];
m2_222 [label="Entry lambda expression", span="527-527", cluster="lambda expression", file="ParserTests.cs"];
m2_223 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression", file="ParserTests.cs"];
m2_224 [label="Exit lambda expression", span="527-527", cluster="lambda expression", file="ParserTests.cs"];
m2_230 [label="Entry lambda expression", span="545-545", cluster="lambda expression", file="ParserTests.cs"];
m2_231 [label="new FakeOptionWithRequired()", span="545-545", cluster="lambda expression", file="ParserTests.cs"];
m2_232 [label="Exit lambda expression", span="545-545", cluster="lambda expression", file="ParserTests.cs"];
m2_239 [label="Entry lambda expression", span="564-564", cluster="lambda expression", file="ParserTests.cs"];
m2_240 [label="new FakeOptions()", span="564-564", cluster="lambda expression", file="ParserTests.cs"];
m2_241 [label="Exit lambda expression", span="564-564", cluster="lambda expression", file="ParserTests.cs"];
m2_248 [label="Entry lambda expression", span="583-583", cluster="lambda expression", file="ParserTests.cs"];
m2_249 [label="new FakeOptions()", span="583-583", cluster="lambda expression", file="ParserTests.cs"];
m2_250 [label="Exit lambda expression", span="583-583", cluster="lambda expression", file="ParserTests.cs"];
m2_256 [label="Entry lambda expression", span="602-602", cluster="lambda expression", file="ParserTests.cs"];
m2_257 [label="new FakeOptions()", span="602-602", cluster="lambda expression", file="ParserTests.cs"];
m2_258 [label="Exit lambda expression", span="602-602", cluster="lambda expression", file="ParserTests.cs"];
m2_264 [label="Entry lambda expression", span="621-621", cluster="lambda expression", file="ParserTests.cs"];
m2_265 [label="new FakeOptions()", span="621-621", cluster="lambda expression", file="ParserTests.cs"];
m2_266 [label="Exit lambda expression", span="621-621", cluster="lambda expression", file="ParserTests.cs"];
m2_272 [label="Entry lambda expression", span="641-641", cluster="lambda expression", file="ParserTests.cs"];
m2_273 [label="new FakeOptions()", span="641-641", cluster="lambda expression", file="ParserTests.cs"];
m2_274 [label="Exit lambda expression", span="641-641", cluster="lambda expression", file="ParserTests.cs"];
m2_280 [label="Entry lambda expression", span="660-660", cluster="lambda expression", file="ParserTests.cs"];
m2_281 [label="new FakeOptionsWithRequiredValue()", span="660-660", cluster="lambda expression", file="ParserTests.cs"];
m2_282 [label="Exit lambda expression", span="660-660", cluster="lambda expression", file="ParserTests.cs"];
m2_288 [label="Entry lambda expression", span="682-682", cluster="lambda expression", file="ParserTests.cs"];
m2_289 [label="new FakeOptions()", span="682-682", cluster="lambda expression", file="ParserTests.cs"];
m2_290 [label="Exit lambda expression", span="682-682", cluster="lambda expression", file="ParserTests.cs"];
m2_296 [label="Entry lambda expression", span="701-701", cluster="lambda expression", file="ParserTests.cs"];
m2_297 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701", cluster="lambda expression", file="ParserTests.cs"];
m2_298 [label="Exit lambda expression", span="701-701", cluster="lambda expression", file="ParserTests.cs"];
m2_304 [label="Entry lambda expression", span="723-723", cluster="lambda expression", file="ParserTests.cs"];
m2_305 [label="new FakeOptionsWithNullables()", span="723-723", cluster="lambda expression", file="ParserTests.cs"];
m2_306 [label="Exit lambda expression", span="723-723", cluster="lambda expression", file="ParserTests.cs"];
m2_312 [label="Entry lambda expression", span="745-745", cluster="lambda expression", file="ParserTests.cs"];
m2_313 [label="new FakeOptionsWithNullables()", span="745-745", cluster="lambda expression", file="ParserTests.cs"];
m2_314 [label="Exit lambda expression", span="745-745", cluster="lambda expression", file="ParserTests.cs"];
m2_322 [label="Entry lambda expression", span="765-765", cluster="lambda expression", file="ParserTests.cs"];
m2_323 [label="new FakeOptionsWithFSharpOption()", span="765-765", cluster="lambda expression", file="ParserTests.cs"];
m2_324 [label="Exit lambda expression", span="765-765", cluster="lambda expression", file="ParserTests.cs"];
m2_332 [label="Entry lambda expression", span="789-789", cluster="lambda expression", file="ParserTests.cs"];
m2_333 [label="new FakeOptionsWithFSharpOption()", span="789-789", cluster="lambda expression", file="ParserTests.cs"];
m2_334 [label="Exit lambda expression", span="789-789", cluster="lambda expression", file="ParserTests.cs"];
m2_340 [label="Entry lambda expression", span="809-813", cluster="lambda expression", file="ParserTests.cs"];
m2_341 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="lambda expression", file="ParserTests.cs"];
m2_342 [label="Exit lambda expression", span="809-813", cluster="lambda expression", file="ParserTests.cs"];
m2_343 [label="Entry lambda expression", span="810-810", cluster="lambda expression", file="ParserTests.cs"];
m2_344 [label="new FakeOptionsWithMinZero()", span="810-810", cluster="lambda expression", file="ParserTests.cs"];
m2_345 [label="Exit lambda expression", span="810-810", cluster="lambda expression", file="ParserTests.cs"];
m2_351 [label="Entry lambda expression", span="823-827", cluster="lambda expression", file="ParserTests.cs"];
m2_352 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="lambda expression", file="ParserTests.cs"];
m2_353 [label="Exit lambda expression", span="823-827", cluster="lambda expression", file="ParserTests.cs"];
m2_354 [label="Entry lambda expression", span="824-824", cluster="lambda expression", file="ParserTests.cs"];
m2_355 [label="new FakeOptionsWithMaxZero()", span="824-824", cluster="lambda expression", file="ParserTests.cs"];
m2_356 [label="Exit lambda expression", span="824-824", cluster="lambda expression", file="ParserTests.cs"];
m2_362 [label="Entry lambda expression", span="837-841", cluster="lambda expression", file="ParserTests.cs"];
m2_363 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="lambda expression", file="ParserTests.cs"];
m2_364 [label="Exit lambda expression", span="837-841", cluster="lambda expression", file="ParserTests.cs"];
m2_365 [label="Entry lambda expression", span="838-838", cluster="lambda expression", file="ParserTests.cs"];
m2_366 [label="new FakeOptionsWithMinMaxZero()", span="838-838", cluster="lambda expression", file="ParserTests.cs"];
m2_367 [label="Exit lambda expression", span="838-838", cluster="lambda expression", file="ParserTests.cs"];
m2_380 [label="x == expected", span="863-863", cluster="lambda expression", file="ParserTests.cs"];
m2_375 [label="Entry lambda expression", span="857-857", cluster="lambda expression", file="ParserTests.cs"];
m2_379 [label="Entry lambda expression", span="863-863", cluster="lambda expression", file="ParserTests.cs"];
m2_376 [label="new FakeOptionsWithNamedAndEmptySets()", span="857-857", cluster="lambda expression", file="ParserTests.cs"];
m2_377 [label="Exit lambda expression", span="857-857", cluster="lambda expression", file="ParserTests.cs"];
m2_381 [label="Exit lambda expression", span="863-863", cluster="lambda expression", file="ParserTests.cs"];
m2_390 [label="x == expected", span="878-878", cluster="lambda expression", file="ParserTests.cs"];
m2_386 [label="Entry lambda expression", span="872-872", cluster="lambda expression", file="ParserTests.cs"];
m2_389 [label="Entry lambda expression", span="878-878", cluster="lambda expression", file="ParserTests.cs"];
m2_387 [label="new FakeOptions()", span="872-872", cluster="lambda expression", file="ParserTests.cs"];
m2_388 [label="Exit lambda expression", span="872-872", cluster="lambda expression", file="ParserTests.cs"];
m2_391 [label="Exit lambda expression", span="878-878", cluster="lambda expression", file="ParserTests.cs"];
m2_396 [label="Entry lambda expression", span="889-889", cluster="lambda expression", file="ParserTests.cs"];
m2_397 [label="new FakeOptionsWithRequiredValue()", span="889-889", cluster="lambda expression", file="ParserTests.cs"];
m2_398 [label="Exit lambda expression", span="889-889", cluster="lambda expression", file="ParserTests.cs"];
m2_403 [label="Entry lambda expression", span="908-908", cluster="lambda expression", file="ParserTests.cs"];
m2_404 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="908-908", cluster="lambda expression", file="ParserTests.cs"];
m2_405 [label="Exit lambda expression", span="908-908", cluster="lambda expression", file="ParserTests.cs"];
m2_413 [label="new FakeOptions()", span="927-927", cluster="lambda expression", file="ParserTests.cs"];
m2_414 [label="Exit lambda expression", span="927-927", cluster="lambda expression", file="ParserTests.cs"];
m2_11 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="ParserTests.cs"];
m2_31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="ParserTests.cs"];
m2_159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="ParserTests.cs"];
m2_180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="ParserTests.cs"];
m2_382 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="ParserTests.cs"];
m2_383 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="ParserTests.cs"];
m2_384 [label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="ParserTests.cs"];
m2_385 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="ParserTests.cs"];
m2_194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="ParserTests.cs"];
m2_233 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="ParserTests.cs"];
m2_419 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserTests.cs"];
m2_48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ParserTests.cs"];
m2_49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ParserTests.cs"];
m2_50 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ParserTests.cs"];
m2_51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ParserTests.cs"];
m2_10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs"];
m2_119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_122 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="ParserTests.cs"];
m2_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ParserTests.cs"];
m2_25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ParserTests.cs"];
m2_26 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ParserTests.cs"];
m2_27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ParserTests.cs"];
m2_283 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="ParserTests.cs"];
m2_368 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="ParserTests.cs"];
m2_12 [label="Entry Unk.True", span="", cluster="Unk.True", file="ParserTests.cs"];
m2_275 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_276 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_278 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_235 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_237 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_325 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="ParserTests.cs"];
m2_321 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="ParserTests.cs"];
m2_188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserTests.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ParserTests.cs"];
m2_1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ParserTests.cs"];
m2_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ParserTests.cs"];
m2_3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ParserTests.cs"];
m2_4 [label="Assert.True(expectedResult.Equals(result))", span="34-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ParserTests.cs"];
m2_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ParserTests.cs"];
m2_225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_226 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_227 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ParserTests.cs"];
m2_216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserTests.cs"];
m2_217 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserTests.cs"];
m2_218 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserTests.cs"];
m2_219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserTests.cs"];
m2_220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ParserTests.cs"];
m2_36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="ParserTests.cs"];
m2_127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_130 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ParserTests.cs"];
m2_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="ParserTests.cs"];
m2_392 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="883-883", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ParserTests.cs"];
m2_393 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="888-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ParserTests.cs"];
m2_394 [label="expected.ShouldBeEquivalentTo(result.Value)", span="895-895", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ParserTests.cs"];
m2_395 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="883-883", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ParserTests.cs"];
m2_84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_87 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m2_65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m2_66 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m2_67 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m2_68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m2_135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserTests.cs"];
m2_136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserTests.cs"];
m2_137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserTests.cs"];
m2_138 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserTests.cs"];
m2_139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ParserTests.cs"];
m2_406 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="ParserTests.cs"];
m2_357 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="ParserTests.cs"];
m2_374 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="ParserTests.cs"];
m2_198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="ParserTests.cs"];
m2_271 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="ParserTests.cs"];
m2_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="ParserTests.cs"];
m2_16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ParserTests.cs"];
m2_17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ParserTests.cs"];
m2_18 [label="Assert.Equal(expected, result.Value.LongValue)", span="55-55", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ParserTests.cs"];
m2_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ParserTests.cs"];
m2_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ParserTests.cs"];
m2_326 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserTests.cs"];
m2_327 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserTests.cs"];
m2_329 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserTests.cs"];
m2_330 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserTests.cs"];
m2_328 [label="result.Value.Offset != null", span="795-795", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserTests.cs"];
m2_331 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="ParserTests.cs"];
m2_407 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="920-920", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserTests.cs"];
m2_408 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="923-923", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserTests.cs"];
m2_409 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="926-930", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserTests.cs"];
m2_410 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="933-933", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserTests.cs"];
m2_411 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="920-920", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="ParserTests.cs"];
m2_151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="ParserTests.cs"];
m2_160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ParserTests.cs"];
m2_161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ParserTests.cs"];
m2_162 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ParserTests.cs"];
m2_163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ParserTests.cs"];
m2_221 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="ParserTests.cs"];
m2_300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ParserTests.cs"];
m2_301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ParserTests.cs"];
m2_302 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ParserTests.cs"];
m2_303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="ParserTests.cs"];
m2_242 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_243 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_244 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_245 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_246 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ParserTests.cs"];
m2_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserTests.cs"];
m2_209 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserTests.cs"];
m2_210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserTests.cs"];
m2_211 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserTests.cs"];
m2_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ParserTests.cs"];
m2_291 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_292 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_294 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ParserTests.cs"];
m2_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ParserTests.cs"];
m2_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ParserTests.cs"];
m2_102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ParserTests.cs"];
m2_103 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ParserTests.cs"];
m2_104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ParserTests.cs"];
m2_415 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="940-940", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="ParserTests.cs"];
m2_416 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="945-949", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="ParserTests.cs"];
m2_417 [label="expected.ShouldBeEquivalentTo(result.Value)", span="952-952", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="ParserTests.cs"];
m2_418 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="940-940", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="ParserTests.cs"];
m2_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="ParserTests.cs"];
m2_373 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="ParserTests.cs"];
m2_284 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ParserTests.cs"];
m2_285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ParserTests.cs"];
m2_286 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ParserTests.cs"];
m2_287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ParserTests.cs"];
m2_115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ParserTests.cs"];
m2_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ParserTests.cs"];
m2_200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ParserTests.cs"];
m2_201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ParserTests.cs"];
m2_202 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ParserTests.cs"];
m2_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ParserTests.cs"];
m2_40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="ParserTests.cs"];
m2_346 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="ParserTests.cs"];
m2_173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserTests.cs"];
m2_347 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_348 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_349 [label="Assert.Throws<ApplicationException>(test)", span="830-830", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_350 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="ParserTests.cs"];
m2_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserTests.cs"];
m2_190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserTests.cs"];
m2_191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserTests.cs"];
m2_192 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserTests.cs"];
m2_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ParserTests.cs"];
m2_420 [label=fakeOptions, span="", file="ParserTests.cs"];
m2_421 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="ParserTests.cs"];
m2_422 [label=int, span="", file="ParserTests.cs"];
m2_423 [label=int, span="", file="ParserTests.cs"];
m3_41 [label="return ''Option '''.JoinTo(((RepeatedOptionError)error).NameInfo.NameText,\r\n                                        ''' is defined multiple times.'');", span="133-134", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_42 [label="Exit lambda expression", span="101-137", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_43 [label="throw new InvalidOperationException();", span="136-136", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_44 [label="Entry string.JoinTo(params string[])", span="55-55", cluster="string.JoinTo(params string[])", file="SentenceBuilder.cs"];
m3_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="SentenceBuilder.cs"];
m3_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="385-385", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SentenceBuilder.cs"];
m3_153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="390-394", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SentenceBuilder.cs"];
m3_154 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="397-397", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SentenceBuilder.cs"];
m3_155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="385-385", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SentenceBuilder.cs"];
m3_63 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="SentenceBuilder.cs"];
m3_3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SentenceBuilder.cs"];
m3_71 [label="Entry lambda expression", span="182-182", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SentenceBuilder.cs"];
m3_268 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="641-645", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SentenceBuilder.cs"];
m3_269 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="648-648", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SentenceBuilder.cs"];
m3_270 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="636-636", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SentenceBuilder.cs"];
m3_55 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="SentenceBuilder.cs"];
m3_308 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="SentenceBuilder.cs"];
m3_309 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="745-749", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="SentenceBuilder.cs"];
m3_310 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="752-752", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="SentenceBuilder.cs"];
m3_311 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="740-740", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="SentenceBuilder.cs"];
m3_79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SentenceBuilder.cs"];
m3_67 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SentenceBuilder.cs"];
m3_167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="428-428", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SentenceBuilder.cs"];
m3_170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="441-448", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SentenceBuilder.cs"];
m3_169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="438-438", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SentenceBuilder.cs"];
m3_171 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="451-451", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SentenceBuilder.cs"];
m3_168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="431-437", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SentenceBuilder.cs"];
m3_172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="428-428", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SentenceBuilder.cs"];
m3_259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_261 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="621-625", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_262 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="628-628", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_260 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="618-618", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_263 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="615-615", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="SentenceBuilder.cs"];
m3_45 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_9 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="SentenceBuilder.cs"];
m3_74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_77 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_247 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="SentenceBuilder.cs"];
m3_92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="239-243", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_95 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="246-246", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="236-236", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="233-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="SentenceBuilder.cs"];
m3_315 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SentenceBuilder.cs"];
m3_316 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="765-769", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SentenceBuilder.cs"];
m3_317 [label="result.Value.FileName != null", span="772-772", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SentenceBuilder.cs"];
m3_318 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="774-774", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SentenceBuilder.cs"];
m3_319 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="776-776", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SentenceBuilder.cs"];
m3_320 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="760-760", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SentenceBuilder.cs"];
m3_299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="SentenceBuilder.cs"];
m3_307 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="SentenceBuilder.cs"];
m3_6 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="602-606", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_254 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="609-609", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="599-599", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="596-596", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="276-276", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="282-286", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_113 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="289-289", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="279-279", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="276-276", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_369 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="854-854", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="SentenceBuilder.cs"];
m3_370 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="857-861", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="SentenceBuilder.cs"];
m3_371 [label="result.Errors.Should().HaveCount(x => x == expected)", span="864-864", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="SentenceBuilder.cs"];
m3_372 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="854-854", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="SentenceBuilder.cs"];
m3_7 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_378 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="SentenceBuilder.cs"];
m3_105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="SentenceBuilder.cs"];
m3_399 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="903-903", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="SentenceBuilder.cs"];
m3_400 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="908-912", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="SentenceBuilder.cs"];
m3_401 [label="expected.ShouldBeEquivalentTo(result.Value)", span="915-915", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="SentenceBuilder.cs"];
m3_402 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="903-903", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="SentenceBuilder.cs"];
m3_83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="SentenceBuilder.cs"];
m3_144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="363-363", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SentenceBuilder.cs"];
m3_145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="368-372", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SentenceBuilder.cs"];
m3_146 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="375-375", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SentenceBuilder.cs"];
m3_147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="363-363", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SentenceBuilder.cs"];
m3_56 [label="Entry lambda expression", span="152-177", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_57 [label="var names = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors select '''''.JoinTo(e.NameInfo.NameText, ''', '')).ToArray())", span="154-156", cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs"];
m3_58 [label="var namesCount = set.Errors.Count()", span="157-157", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_59 [label="var incompat = string.Join(\r\n                                    string.Empty,\r\n                                    (from x in\r\n                                    (from s in bySet where !s.SetName.EndsWith(set.SetName) from e in s.Errors select e)\r\n                                        .Distinct()\r\n                                    select '''''.JoinTo(x.NameInfo.NameText, ''', '')).ToArray())", span="159-164", cluster="lambda expression", file="SentenceBuilder.cs", color=red, community=0];
m3_32 [label="return badFormat.NameInfo.Equals(NameInfo.EmptyName)\r\n                                               ? ''A value not bound to option name is defined with a bad format.''\r\n                                               : ''Option '''.JoinTo(badFormat.NameInfo.NameText, ''' is defined with a bad format.'');", span="119-121", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_33 [label="ErrorType.SequenceOutOfRangeError", span="122-122", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_34 [label="var seqOutRange = ((SequenceOutOfRangeError)error)", span="123-123", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_35 [label="return seqOutRange.NameInfo.Equals(NameInfo.EmptyName)\r\n                                               ? ''A sequence value not bound to option name is defined with few items than required.''\r\n                                               : ''A sequence option '''.JoinTo(seqOutRange.NameInfo.NameText,\r\n                                                    ''' is defined with fewer or more items than required.'');", span="124-127", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_185 [label="Entry lambda expression", span="445-445", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_4 [label="Assert.True(expectedResult.Equals(result))", span="34-34", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SentenceBuilder.cs"];
m3_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SentenceBuilder.cs"];
m3_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="SentenceBuilder.cs"];
m3_10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="SentenceBuilder.cs"];
m3_11 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="SentenceBuilder.cs"];
m3_12 [label="Entry Unk.True", span="", cluster="Unk.True", file="SentenceBuilder.cs"];
m3_13 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_14 [label=fakeOptions, span="28-28", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_15 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SentenceBuilder.cs"];
m3_17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SentenceBuilder.cs"];
m3_18 [label="Assert.Equal(expected, result.Value.LongValue)", span="55-55", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SentenceBuilder.cs"];
m3_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SentenceBuilder.cs"];
m3_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SentenceBuilder.cs"];
m3_22 [label="new FakeOptions()", span="49-49", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SentenceBuilder.cs"];
m3_26 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SentenceBuilder.cs"];
m3_28 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="SentenceBuilder.cs"];
m3_37 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_21 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_23 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SentenceBuilder.cs"];
m3_27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SentenceBuilder.cs"];
m3_30 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="SentenceBuilder.cs"];
m3_38 [label="new FakeOptionsWithSequence()", span="96-96", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="SentenceBuilder.cs"];
m3_29 [label="new FakeOptionsWithDouble()", span="72-72", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_39 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_47 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SentenceBuilder.cs"];
m3_49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", color=red, community=0, file="SentenceBuilder.cs"];
m3_50 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SentenceBuilder.cs"];
m3_51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SentenceBuilder.cs"];
m3_60 [label="Entry lambda expression", span="163-163", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_341 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="810-814", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_352 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="824-828", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_363 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="838-842", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_62 [label="Entry Unk.JoinTo", span="", cluster="Unk.JoinTo", file="SentenceBuilder.cs"];
m3_52 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="SentenceBuilder.cs"];
m3_80 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_89 [label="Entry lambda expression", span="221-221", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_97 [label="Entry lambda expression", span="240-240", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_106 [label="Entry lambda expression", span="264-264", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_116 [label="Entry lambda expression", span="283-283", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_124 [label="Entry lambda expression", span="302-302", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_132 [label="Entry lambda expression", span="321-321", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_141 [label="Entry lambda expression", span="346-346", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_148 [label="Entry lambda expression", span="369-369", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_156 [label="Entry lambda expression", span="391-391", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_164 [label="Entry lambda expression", span="413-413", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_174 [label="Entry lambda expression", span="442-442", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_177 [label="Entry lambda expression", span="443-445", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_195 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_205 [label="Entry lambda expression", span="488-488", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_213 [label="Entry lambda expression", span="508-508", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_222 [label="Entry lambda expression", span="528-528", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_230 [label="Entry lambda expression", span="546-546", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_239 [label="Entry lambda expression", span="565-565", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_248 [label="Entry lambda expression", span="584-584", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_256 [label="Entry lambda expression", span="603-603", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_264 [label="Entry lambda expression", span="622-622", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_272 [label="Entry lambda expression", span="642-642", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_280 [label="Entry lambda expression", span="661-661", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_288 [label="Entry lambda expression", span="683-683", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_296 [label="Entry lambda expression", span="702-702", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_304 [label="Entry lambda expression", span="724-724", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_312 [label="Entry lambda expression", span="746-746", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_322 [label="Entry lambda expression", span="766-766", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_332 [label="Entry lambda expression", span="790-790", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_340 [label="Entry lambda expression", span="810-814", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_342 [label="Exit lambda expression", span="810-814", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_343 [label="Entry lambda expression", span="811-811", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_351 [label="Entry lambda expression", span="824-828", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_353 [label="Exit lambda expression", span="824-828", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_354 [label="Entry lambda expression", span="825-825", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_362 [label="Entry lambda expression", span="838-842", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_364 [label="Exit lambda expression", span="838-842", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_365 [label="Entry lambda expression", span="839-839", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_375 [label="Entry lambda expression", span="858-858", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_386 [label="Entry lambda expression", span="873-873", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_396 [label="Entry lambda expression", span="890-890", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_403 [label="Entry lambda expression", span="909-909", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_412 [label="Entry lambda expression", span="928-928", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_46 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="SentenceBuilder.cs"];
m3_54 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="SentenceBuilder.cs"];
m3_53 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SentenceBuilder.cs"];
m3_73 [label=bySet, span="", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_72 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="SentenceBuilder.cs"];
m3_82 [label="Exit lambda expression", span="201-201", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_91 [label="Exit lambda expression", span="221-221", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="221-221", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_99 [label="Exit lambda expression", span="240-240", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="240-240", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_108 [label="Exit lambda expression", span="264-264", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_107 [label="new FakeOptionsWithEnum()", span="264-264", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_118 [label="Exit lambda expression", span="283-283", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_117 [label="new FakeOptionsWithEnum()", span="283-283", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_126 [label="Exit lambda expression", span="302-302", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_125 [label="new FakeOptionsWithEnum()", span="302-302", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_134 [label="Exit lambda expression", span="321-321", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_133 [label="new FakeOptionsWithEnum()", span="321-321", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_143 [label="Exit lambda expression", span="346-346", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_142 [label="new FakeOptionsWithValues()", span="346-346", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_150 [label="Exit lambda expression", span="369-369", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_149 [label="new FakeOptionsWithSequenceWithoutRange()", span="369-369", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_158 [label="Exit lambda expression", span="391-391", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_157 [label="new FakeOptionsWithSequenceAndSeparator()", span="391-391", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_166 [label="Exit lambda expression", span="413-413", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_165 [label="new FakeOptionsWithSequenceAndSeparator()", span="413-413", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_176 [label="Exit lambda expression", span="442-442", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_175 [label="new FakeOptionsWithValues()", span="442-442", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_179 [label="Exit lambda expression", span="443-445", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="444-445", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="445-445", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="445-445", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_197 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_196 [label="new FakeOptionsWithSets()", span="468-468", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_207 [label="Exit lambda expression", span="488-488", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_206 [label="new FakeOptionWithRequiredAndSet()", span="488-488", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_215 [label="Exit lambda expression", span="508-508", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_214 [label="new FakeOptionWithRequiredAndSet()", span="508-508", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_224 [label="Exit lambda expression", span="528-528", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_223 [label="new FakeOptionWithRequiredAndSet()", span="528-528", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_232 [label="Exit lambda expression", span="546-546", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_231 [label="new FakeOptionWithRequired()", span="546-546", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_241 [label="Exit lambda expression", span="565-565", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_240 [label="new FakeOptions()", span="565-565", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_250 [label="Exit lambda expression", span="584-584", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_249 [label="new FakeOptions()", span="584-584", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_258 [label="Exit lambda expression", span="603-603", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_257 [label="new FakeOptions()", span="603-603", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_266 [label="Exit lambda expression", span="622-622", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_265 [label="new FakeOptions()", span="622-622", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_274 [label="Exit lambda expression", span="642-642", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_273 [label="new FakeOptions()", span="642-642", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_282 [label="Exit lambda expression", span="661-661", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_281 [label="new FakeOptionsWithRequiredValue()", span="661-661", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_290 [label="Exit lambda expression", span="683-683", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_289 [label="new FakeOptions()", span="683-683", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_298 [label="Exit lambda expression", span="702-702", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_297 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="702-702", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_306 [label="Exit lambda expression", span="724-724", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_305 [label="new FakeOptionsWithNullables()", span="724-724", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_314 [label="Exit lambda expression", span="746-746", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_313 [label="new FakeOptionsWithNullables()", span="746-746", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_324 [label="Exit lambda expression", span="766-766", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_323 [label="new FakeOptionsWithFSharpOption()", span="766-766", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_334 [label="Exit lambda expression", span="790-790", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_333 [label="new FakeOptionsWithFSharpOption()", span="790-790", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_345 [label="Exit lambda expression", span="811-811", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_344 [label="new FakeOptionsWithMinZero()", span="811-811", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_356 [label="Exit lambda expression", span="825-825", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_355 [label="new FakeOptionsWithMaxZero()", span="825-825", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_367 [label="Exit lambda expression", span="839-839", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_366 [label="new FakeOptionsWithMinMaxZero()", span="839-839", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_380 [label="x == expected", span="864-864", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_379 [label="Entry lambda expression", span="864-864", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_377 [label="Exit lambda expression", span="858-858", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_376 [label="new FakeOptionsWithNamedAndEmptySets()", span="858-858", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_390 [label="x == expected", span="879-879", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_389 [label="Entry lambda expression", span="879-879", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_388 [label="Exit lambda expression", span="873-873", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_387 [label="new FakeOptions()", span="873-873", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_398 [label="Exit lambda expression", span="890-890", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_397 [label="new FakeOptionsWithRequiredValue()", span="890-890", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_405 [label="Exit lambda expression", span="909-909", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_404 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="909-909", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_414 [label="Exit lambda expression", span="928-928", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_413 [label="new FakeOptions()", span="928-928", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_181 [label="Entry lambda expression", span="445-445", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_183 [label="Exit lambda expression", span="445-445", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_187 [label="Exit lambda expression", span="445-445", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_381 [label="Exit lambda expression", span="864-864", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_391 [label="Exit lambda expression", span="879-879", cluster="lambda expression", file="SentenceBuilder.cs"];
m3_159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="SentenceBuilder.cs"];
m3_180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="SentenceBuilder.cs"];
m3_382 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="869-869", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="SentenceBuilder.cs"];
m3_383 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="872-876", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="SentenceBuilder.cs"];
m3_384 [label="result.Errors.Should().HaveCount(x => x == expected)", span="879-879", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="SentenceBuilder.cs"];
m3_385 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="869-869", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="SentenceBuilder.cs"];
m3_194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SentenceBuilder.cs"];
m3_419 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="SentenceBuilder.cs"];
m3_233 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="SentenceBuilder.cs"];
m3_119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="295-295", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="301-305", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_122 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="308-308", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="298-298", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="295-295", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="SentenceBuilder.cs"];
m3_283 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="SentenceBuilder.cs"];
m3_368 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="SentenceBuilder.cs"];
m3_275 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="660-664", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_278 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="667-667", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_276 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="657-657", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="654-654", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="564-568", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_237 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="571-571", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_235 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="561-561", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="558-558", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_325 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="SentenceBuilder.cs"];
m3_321 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="SentenceBuilder.cs"];
m3_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SentenceBuilder.cs"];
m3_1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SentenceBuilder.cs"];
m3_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SentenceBuilder.cs"];
m3_188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="SentenceBuilder.cs"];
m3_225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_227 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="545-549", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="552-552", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_226 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="542-542", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SentenceBuilder.cs"];
m3_216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SentenceBuilder.cs"];
m3_218 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="527-531", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SentenceBuilder.cs"];
m3_219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="534-534", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SentenceBuilder.cs"];
m3_217 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="521-525", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SentenceBuilder.cs"];
m3_220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SentenceBuilder.cs"];
m3_127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="314-314", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="320-324", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_130 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="327-327", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="317-317", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="314-314", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SentenceBuilder.cs"];
m3_69 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="SentenceBuilder.cs"];
m3_392 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="SentenceBuilder.cs"];
m3_393 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="889-893", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="SentenceBuilder.cs"];
m3_394 [label="expected.ShouldBeEquivalentTo(result.Value)", span="896-896", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="SentenceBuilder.cs"];
m3_395 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="884-884", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="SentenceBuilder.cs"];
m3_84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="220-224", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_87 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="227-227", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="217-217", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_64 [label="Entry Unk.EndsWith", span="", cluster="Unk.EndsWith", file="SentenceBuilder.cs"];
m3_66 [label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(string)", file="SentenceBuilder.cs"];
m3_65 [label="Entry Unk.Distinct", span="", cluster="Unk.Distinct", file="SentenceBuilder.cs"];
m3_68 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="SentenceBuilder.cs"];
m3_135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="333-333", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SentenceBuilder.cs"];
m3_137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="345-349", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SentenceBuilder.cs"];
m3_136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="336-342", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SentenceBuilder.cs"];
m3_138 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="352-352", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SentenceBuilder.cs"];
m3_139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="333-333", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SentenceBuilder.cs"];
m3_406 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="SentenceBuilder.cs"];
m3_357 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="SentenceBuilder.cs"];
m3_374 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="SentenceBuilder.cs"];
m3_271 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="SentenceBuilder.cs"];
m3_198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="SentenceBuilder.cs"];
m3_326 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SentenceBuilder.cs"];
m3_327 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SentenceBuilder.cs"];
m3_328 [label="result.Value.Offset != null", span="796-796", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SentenceBuilder.cs"];
m3_329 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="798-798", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SentenceBuilder.cs"];
m3_330 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="800-800", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SentenceBuilder.cs"];
m3_331 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="784-784", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SentenceBuilder.cs"];
m3_407 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="921-921", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SentenceBuilder.cs"];
m3_409 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="927-931", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SentenceBuilder.cs"];
m3_408 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="924-924", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SentenceBuilder.cs"];
m3_410 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="934-934", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SentenceBuilder.cs"];
m3_411 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="921-921", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SentenceBuilder.cs"];
m3_151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="SentenceBuilder.cs"];
m3_160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="407-407", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SentenceBuilder.cs"];
m3_161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="412-416", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SentenceBuilder.cs"];
m3_162 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="419-419", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SentenceBuilder.cs"];
m3_163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="407-407", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SentenceBuilder.cs"];
m3_221 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SentenceBuilder.cs"];
m3_300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="SentenceBuilder.cs"];
m3_301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="723-727", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="SentenceBuilder.cs"];
m3_302 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="730-730", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="SentenceBuilder.cs"];
m3_303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="718-718", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="SentenceBuilder.cs"];
m3_242 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_244 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="583-587", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_245 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="590-590", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_243 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="580-580", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_246 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="577-577", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SentenceBuilder.cs"];
m3_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="500-500", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SentenceBuilder.cs"];
m3_210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="507-511", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SentenceBuilder.cs"];
m3_209 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="502-505", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SentenceBuilder.cs"];
m3_211 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="514-514", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SentenceBuilder.cs"];
m3_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="500-500", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SentenceBuilder.cs"];
m3_291 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="701-705", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_294 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="708-708", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_292 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="698-698", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="695-695", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SentenceBuilder.cs"];
m3_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="258-258", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SentenceBuilder.cs"];
m3_102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="263-267", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SentenceBuilder.cs"];
m3_103 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="270-270", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SentenceBuilder.cs"];
m3_104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="258-258", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SentenceBuilder.cs"];
m3_415 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="941-941", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="SentenceBuilder.cs"];
m3_416 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="946-950", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="SentenceBuilder.cs"];
m3_417 [label="expected.ShouldBeEquivalentTo(result.Value)", span="953-953", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="SentenceBuilder.cs"];
m3_418 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="941-941", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="SentenceBuilder.cs"];
m3_373 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="SentenceBuilder.cs"];
m3_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="SentenceBuilder.cs"];
m3_284 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SentenceBuilder.cs"];
m3_285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="682-686", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SentenceBuilder.cs"];
m3_286 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="689-689", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SentenceBuilder.cs"];
m3_287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="677-677", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SentenceBuilder.cs"];
m3_115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="SentenceBuilder.cs"];
m3_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="480-480", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SentenceBuilder.cs"];
m3_201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="487-491", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SentenceBuilder.cs"];
m3_200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="482-485", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SentenceBuilder.cs"];
m3_202 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="494-494", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SentenceBuilder.cs"];
m3_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="480-480", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="SentenceBuilder.cs"];
m3_346 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="SentenceBuilder.cs"];
m3_173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="SentenceBuilder.cs"];
m3_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="457-457", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SentenceBuilder.cs"];
m3_191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="467-471", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SentenceBuilder.cs"];
m3_192 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="474-474", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SentenceBuilder.cs"];
m3_190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="460-464", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SentenceBuilder.cs"];
m3_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="457-457", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SentenceBuilder.cs"];
m3_420 [label=fakeOptions, span="", file="SentenceBuilder.cs"];
m3_421 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="SentenceBuilder.cs"];
m3_422 [label=int, span="", file="SentenceBuilder.cs"];
m3_423 [label=int, span="", file="SentenceBuilder.cs"];
m4_11 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="TypeDescriptor.cs"];
m4_0 [label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_1 [label="this.targetType = targetType", span="15-15", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_2 [label="this.maxItems = maxItems", span="16-16", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_3 [label="this.nextValue = nextValue", span="17-17", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_4 [label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_16 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="TypeDescriptor.cs"];
m4_17 [label=n, span="47-47", cluster="lambda expression", color=green, community=0, file="TypeDescriptor.cs"];
m4_18 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="TypeDescriptor.cs"];
m4_12 [label="Entry CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_13 [label="return TypeDescriptor.Create(descriptor.TargetType, descriptor.MaxItems, nextValue.MapValueOrDefault(n => n, default(TypeDescriptor)));", span="47-47", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", color=green, community=0, file="TypeDescriptor.cs"];
m4_14 [label="Exit CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45", cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", file="TypeDescriptor.cs"];
m4_5 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_6 [label="maximumItems == null", span="37-37", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_8 [label="return new TypeDescriptor(tag, maximumItems, next.ToMaybe());", span="39-39", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_7 [label="throw new ArgumentNullException(''maximumItems'');", span="37-37", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_9 [label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="TypeDescriptor.cs"];
m4_10 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs"];
m4_15 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="TypeDescriptor.cs"];
m4_19 [label="out CommandLine.Core.TypeDescriptor", span="", file="TypeDescriptor.cs"];
m5_32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs"];
m5_0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_2 [label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="ValueMapper.cs"];
m5_4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_17 [label="specProps.Empty()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_18 [label="yield break;", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_22 [label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_23 [label="yield break;", span="44-44", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_26 [label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_27 [label="yield break;", span="55-55", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_28 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_30 [label="yield return value;", span="67-67", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_19 [label="var pt = specProps.First()", span="38-38", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_20 [label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", span="39-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, file="ValueMapper.cs"];
m5_24 [label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_25 [label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_29 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_21 [label="taken.Empty()", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_31 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m5_34 [label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71", cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs"];
m5_56 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs"];
m5_44 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing", file="ValueMapper.cs"];
m5_42 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="ValueMapper.cs"];
m5_45 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs"];
m5_46 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs"];
m5_39 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs"];
m5_57 [label="Entry lambda expression", span="61-61", cluster="lambda expression", file="ValueMapper.cs"];
m5_8 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m5_11 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m5_14 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="ValueMapper.cs"];
m5_9 [label="pe.Item1", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m5_10 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m5_12 [label="pe.Item2", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m5_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m5_15 [label="e.Value", span="25-25", cluster="lambda expression", file="ValueMapper.cs"];
m5_16 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="ValueMapper.cs"];
m5_58 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61", cluster="lambda expression", file="ValueMapper.cs"];
m5_50 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="ValueMapper.cs"];
m5_53 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="ValueMapper.cs"];
m5_51 [label=n, span="39-39", cluster="lambda expression", color=red, community=0, file="ValueMapper.cs"];
m5_52 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="ValueMapper.cs"];
m5_54 [label="s.Specification.IsValue()", span="47-47", cluster="lambda expression", file="ValueMapper.cs"];
m5_55 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="ValueMapper.cs"];
m5_59 [label="Exit lambda expression", span="61-61", cluster="lambda expression", file="ValueMapper.cs"];
m5_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs"];
m5_47 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="ValueMapper.cs"];
m5_60 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="ValueMapper.cs"];
m5_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs"];
m5_37 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="ValueMapper.cs"];
m5_48 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="ValueMapper.cs"];
m5_72 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_73 [label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_74 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_5 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ValueMapper.cs"];
m5_49 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs"];
m5_38 [label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87", cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="ValueMapper.cs"];
m5_61 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="ValueMapper.cs"];
m5_36 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="ValueMapper.cs"];
m5_71 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="ValueMapper.cs"];
m5_35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs"];
m5_62 [label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_63 [label="specification.TargetType", span="73-73", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_67 [label="specification.Max.IsJust()", span="78-78", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_68 [label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_64 [label="TargetType.Scalar", span="75-75", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_66 [label="TargetType.Sequence", span="77-77", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_65 [label="return Maybe.Just(1);", span="76-76", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_69 [label="return Maybe.Nothing<int>();", span="84-84", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_70 [label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m5_41 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="ValueMapper.cs"];
m5_43 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="ValueMapper.cs"];
m5_7 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="ValueMapper.cs"];
m5_75 [label=pt, span="", file="ValueMapper.cs"];
n8 -> n1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Mocks.OptionsWithMultipleSet"];
n8 -> n2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Mocks.OptionsWithMultipleSet"];
n8 -> n3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Mocks.OptionsWithMultipleSet"];
n8 -> n4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Mocks.OptionsWithMultipleSet"];
n8 -> n5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Mocks.OptionsWithMultipleSet"];
n8 -> n6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Mocks.OptionsWithMultipleSet"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n6 -> n7  [key=0, style=solid];
n7 -> n0  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m1_11 -> m1_12  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_16  [key=2, style=dotted];
m1_13 -> m1_17  [key=2, style=dotted];
m1_13 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_13 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_13 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_7  [key=2, style=dotted];
m1_15 -> m1_11  [key=0, style=bold, color=blue];
m1_65 -> m1_66  [key=0, style=solid];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_17  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m1_67 -> m1_68  [key=0, style=solid];
m1_67 -> m1_5  [key=2, style=dotted];
m1_67 -> m1_6  [key=2, style=dotted];
m1_67 -> m1_33  [key=2, style=dotted];
m1_67 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_67 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_68 -> m1_69  [key=0, style=solid];
m1_68 -> m1_7  [key=2, style=dotted];
m1_69 -> m1_65  [key=0, style=bold, color=blue];
m1_104 -> m1_105  [key=0, style=solid];
m1_105 -> m1_106  [key=0, style=solid];
m1_105 -> m1_5  [key=2, style=dotted];
m1_105 -> m1_80  [key=2, style=dotted];
m1_105 -> m1_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_105 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_7  [key=2, style=dotted];
m1_107 -> m1_104  [key=0, style=bold, color=blue];
m1_54 -> m1_55  [key=0, style=solid];
m1_55 -> m1_56  [key=0, style=solid];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_5  [key=2, style=dotted];
m1_56 -> m1_6  [key=2, style=dotted];
m1_56 -> m1_33  [key=2, style=dotted];
m1_56 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_56 -> m1_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_7  [key=2, style=dotted];
m1_58 -> m1_54  [key=0, style=bold, color=blue];
m1_17 -> m1_17  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m1_28 -> m1_29  [key=0, style=solid];
m1_29 -> m1_30  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_5  [key=2, style=dotted];
m1_30 -> m1_33  [key=2, style=dotted];
m1_30 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_7  [key=2, style=dotted];
m1_32 -> m1_28  [key=0, style=bold, color=blue];
m1_179 -> m1_180  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_10 -> m1_8  [key=0, style=bold, color=blue];
m1_18 -> m1_19  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_20 -> m1_18  [key=0, style=bold, color=blue];
m1_22 -> m1_23  [key=0, style=solid];
m1_23 -> m1_21  [key=0, style=bold, color=blue];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=2, style=dotted];
m1_26 -> m1_24  [key=0, style=bold, color=blue];
m1_34 -> m1_35  [key=0, style=solid];
m1_35 -> m1_36  [key=0, style=solid];
m1_36 -> m1_34  [key=0, style=bold, color=blue];
m1_42 -> m1_43  [key=0, style=solid];
m1_45 -> m1_46  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_51 -> m1_52  [key=0, style=solid];
m1_43 -> m1_44  [key=0, style=solid];
m1_44 -> m1_42  [key=0, style=bold, color=blue];
m1_46 -> m1_47  [key=0, style=solid];
m1_47 -> m1_45  [key=0, style=bold, color=blue];
m1_49 -> m1_50  [key=0, style=solid];
m1_50 -> m1_48  [key=0, style=bold, color=blue];
m1_52 -> m1_53  [key=0, style=solid];
m1_53 -> m1_51  [key=0, style=bold, color=blue];
m1_59 -> m1_60  [key=0, style=solid];
m1_62 -> m1_63  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_61 -> m1_59  [key=0, style=bold, color=blue];
m1_63 -> m1_64  [key=0, style=solid];
m1_64 -> m1_62  [key=0, style=bold, color=blue];
m1_70 -> m1_71  [key=0, style=solid];
m1_73 -> m1_74  [key=0, style=solid];
m1_71 -> m1_72  [key=0, style=solid];
m1_72 -> m1_70  [key=0, style=bold, color=blue];
m1_74 -> m1_75  [key=0, style=solid];
m1_75 -> m1_73  [key=0, style=bold, color=blue];
m1_81 -> m1_82  [key=0, style=solid];
m1_84 -> m1_85  [key=0, style=solid];
m1_82 -> m1_83  [key=0, style=solid];
m1_83 -> m1_81  [key=0, style=bold, color=blue];
m1_85 -> m1_86  [key=0, style=solid];
m1_86 -> m1_84  [key=0, style=bold, color=blue];
m1_92 -> m1_93  [key=0, style=solid];
m1_95 -> m1_96  [key=0, style=solid];
m1_98 -> m1_99  [key=0, style=solid];
m1_101 -> m1_102  [key=0, style=solid];
m1_93 -> m1_94  [key=0, style=solid];
m1_94 -> m1_92  [key=0, style=bold, color=blue];
m1_96 -> m1_97  [key=0, style=solid];
m1_97 -> m1_95  [key=0, style=bold, color=blue];
m1_99 -> m1_100  [key=0, style=solid];
m1_100 -> m1_98  [key=0, style=bold, color=blue];
m1_102 -> m1_103  [key=0, style=solid];
m1_103 -> m1_101  [key=0, style=bold, color=blue];
m1_108 -> m1_109  [key=0, style=solid];
m1_111 -> m1_112  [key=0, style=solid];
m1_109 -> m1_110  [key=0, style=solid];
m1_110 -> m1_108  [key=0, style=bold, color=blue];
m1_112 -> m1_113  [key=0, style=solid];
m1_113 -> m1_111  [key=0, style=bold, color=blue];
m1_118 -> m1_119  [key=0, style=solid];
m1_121 -> m1_122  [key=0, style=solid];
m1_124 -> m1_125  [key=0, style=solid];
m1_127 -> m1_128  [key=0, style=solid];
m1_119 -> m1_120  [key=0, style=solid];
m1_120 -> m1_118  [key=0, style=bold, color=blue];
m1_122 -> m1_123  [key=0, style=solid];
m1_123 -> m1_121  [key=0, style=bold, color=blue];
m1_125 -> m1_126  [key=0, style=solid];
m1_126 -> m1_124  [key=0, style=bold, color=blue];
m1_128 -> m1_129  [key=0, style=solid];
m1_129 -> m1_127  [key=0, style=bold, color=blue];
m1_136 -> m1_137  [key=0, style=solid];
m1_139 -> m1_140  [key=0, style=solid];
m1_142 -> m1_143  [key=0, style=solid];
m1_145 -> m1_146  [key=0, style=solid];
m1_137 -> m1_138  [key=0, style=solid];
m1_138 -> m1_136  [key=0, style=bold, color=blue];
m1_140 -> m1_141  [key=0, style=solid];
m1_141 -> m1_139  [key=0, style=bold, color=blue];
m1_143 -> m1_144  [key=0, style=solid];
m1_144 -> m1_142  [key=0, style=bold, color=blue];
m1_146 -> m1_147  [key=0, style=solid];
m1_147 -> m1_145  [key=0, style=bold, color=blue];
m1_153 -> m1_154  [key=0, style=solid];
m1_156 -> m1_157  [key=0, style=solid];
m1_154 -> m1_155  [key=0, style=solid];
m1_155 -> m1_153  [key=0, style=bold, color=blue];
m1_157 -> m1_158  [key=0, style=solid];
m1_158 -> m1_156  [key=0, style=bold, color=blue];
m1_164 -> m1_165  [key=0, style=solid];
m1_167 -> m1_168  [key=0, style=solid];
m1_170 -> m1_171  [key=0, style=solid];
m1_173 -> m1_174  [key=0, style=solid];
m1_176 -> m1_177  [key=0, style=solid];
m1_165 -> m1_166  [key=0, style=solid];
m1_166 -> m1_164  [key=0, style=bold, color=blue];
m1_168 -> m1_169  [key=0, style=solid];
m1_169 -> m1_167  [key=0, style=bold, color=blue];
m1_171 -> m1_172  [key=0, style=solid];
m1_172 -> m1_170  [key=0, style=bold, color=blue];
m1_174 -> m1_175  [key=0, style=solid];
m1_175 -> m1_173  [key=0, style=bold, color=blue];
m1_177 -> m1_178  [key=0, style=solid];
m1_178 -> m1_176  [key=0, style=bold, color=blue];
m1_180 -> m1_181  [key=0, style=solid];
m1_181 -> m1_179  [key=0, style=bold, color=blue];
m1_148 -> m1_149  [key=0, style=solid];
m1_149 -> m1_150  [key=0, style=solid];
m1_149 -> m1_135  [key=2, style=dotted];
m1_149 -> m1_152  [key=2, style=dotted];
m1_149 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_149 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_150 -> m1_151  [key=0, style=solid];
m1_150 -> m1_7  [key=2, style=dotted];
m1_151 -> m1_148  [key=0, style=bold, color=blue];
m1_130 -> m1_131  [key=0, style=solid];
m1_131 -> m1_132  [key=0, style=solid];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_135  [key=2, style=dotted];
m1_132 -> m1_17  [key=2, style=dotted];
m1_132 -> m1_136  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_132 -> m1_139  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_132 -> m1_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_132 -> m1_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_7  [key=2, style=dotted];
m1_134 -> m1_130  [key=0, style=bold, color=blue];
m1_76 -> m1_77  [key=0, style=solid];
m1_77 -> m1_78  [key=0, style=solid];
m1_77 -> m1_5  [key=2, style=dotted];
m1_77 -> m1_80  [key=2, style=dotted];
m1_77 -> m1_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_77 -> m1_84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_7  [key=2, style=dotted];
m1_79 -> m1_76  [key=0, style=bold, color=blue];
m1_114 -> m1_115  [key=0, style=solid];
m1_115 -> m1_116  [key=0, style=solid];
m1_115 -> m1_16  [key=2, style=dotted];
m1_115 -> m1_91  [key=2, style=dotted];
m1_115 -> m1_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_115 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_115 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_115 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_7  [key=2, style=dotted];
m1_117 -> m1_114  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_17  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_16  [key=2, style=dotted];
m1_39 -> m1_17  [key=2, style=dotted];
m1_39 -> m1_33  [key=2, style=dotted];
m1_39 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_39 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_39 -> m1_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_39 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_7  [key=2, style=dotted];
m1_41 -> m1_37  [key=0, style=bold, color=blue];
m1_159 -> m1_160  [key=0, style=solid];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_135  [key=2, style=dotted];
m1_160 -> m1_163  [key=2, style=dotted];
m1_160 -> m1_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_160 -> m1_167  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_160 -> m1_170  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_160 -> m1_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_160 -> m1_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_160 -> m1_179  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_161 -> m1_162  [key=0, style=solid];
m1_161 -> m1_7  [key=2, style=dotted];
m1_162 -> m1_159  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_7  [key=2, style=dotted];
m1_4 -> m1_0  [key=0, style=bold, color=blue];
m1_87 -> m1_88  [key=0, style=solid];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_16  [key=2, style=dotted];
m1_88 -> m1_91  [key=2, style=dotted];
m1_88 -> m1_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_88 -> m1_95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_88 -> m1_98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_88 -> m1_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_7  [key=2, style=dotted];
m1_90 -> m1_87  [key=0, style=bold, color=blue];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_9  [key=2, style=dotted];
m2_42 -> m2_10  [key=2, style=dotted];
m2_42 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_36  [key=2, style=dotted];
m2_43 -> m2_12  [key=2, style=dotted];
m2_44 -> m2_41  [key=0, style=bold, color=blue];
m2_358 -> m2_359  [key=0, style=solid];
m2_359 -> m2_360  [key=0, style=solid];
m2_359 -> m2_359  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
m2_360 -> m2_361  [key=0, style=solid];
m2_360 -> m2_339  [key=2, style=dotted];
m2_361 -> m2_358  [key=0, style=bold, color=blue];
m2_152 -> m2_153  [key=0, style=solid];
m2_152 -> m2_154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m2_153 -> m2_154  [key=0, style=solid];
m2_153 -> m2_9  [key=2, style=dotted];
m2_153 -> m2_10  [key=2, style=dotted];
m2_153 -> m2_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_154 -> m2_155  [key=0, style=solid];
m2_154 -> m2_105  [key=2, style=dotted];
m2_155 -> m2_152  [key=0, style=bold, color=blue];
m2_267 -> m2_268  [key=0, style=solid];
m2_267 -> m2_269  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_268 -> m2_269  [key=0, style=solid];
m2_268 -> m2_9  [key=2, style=dotted];
m2_268 -> m2_10  [key=2, style=dotted];
m2_268 -> m2_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_269 -> m2_270  [key=0, style=solid];
m2_269 -> m2_271  [key=2, style=dotted];
m2_269 -> m2_12  [key=2, style=dotted];
m2_270 -> m2_267  [key=0, style=bold, color=blue];
m2_335 -> m2_336  [key=0, style=solid];
m2_336 -> m2_337  [key=0, style=solid];
m2_336 -> m2_336  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
m2_337 -> m2_338  [key=0, style=solid];
m2_337 -> m2_339  [key=2, style=dotted];
m2_338 -> m2_335  [key=0, style=bold, color=blue];
m2_308 -> m2_309  [key=0, style=solid];
m2_308 -> m2_310  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m2_309 -> m2_310  [key=0, style=solid];
m2_309 -> m2_9  [key=2, style=dotted];
m2_309 -> m2_10  [key=2, style=dotted];
m2_309 -> m2_312  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_310 -> m2_311  [key=0, style=solid];
m2_310 -> m2_105  [key=2, style=dotted];
m2_311 -> m2_308  [key=0, style=bold, color=blue];
m2_167 -> m2_168  [key=0, style=solid];
m2_168 -> m2_169  [key=0, style=solid];
m2_168 -> m2_140  [key=2, style=dotted];
m2_168 -> m2_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_169 -> m2_170  [key=0, style=solid];
m2_171 -> m2_172  [key=0, style=solid];
m2_171 -> m2_105  [key=2, style=dotted];
m2_170 -> m2_171  [key=0, style=solid];
m2_170 -> m2_9  [key=2, style=dotted];
m2_170 -> m2_173  [key=2, style=dotted];
m2_170 -> m2_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_170 -> m2_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_172 -> m2_167  [key=0, style=bold, color=blue];
m2_259 -> m2_260  [key=0, style=solid];
m2_260 -> m2_261  [key=0, style=solid];
m2_260 -> m2_247  [key=2, style=dotted];
m2_260 -> m2_262  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_261 -> m2_262  [key=0, style=solid];
m2_261 -> m2_9  [key=2, style=dotted];
m2_261 -> m2_10  [key=2, style=dotted];
m2_261 -> m2_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_262 -> m2_263  [key=0, style=solid];
m2_262 -> m2_36  [key=2, style=dotted];
m2_262 -> m2_12  [key=2, style=dotted];
m2_263 -> m2_259  [key=0, style=bold, color=blue];
m2_74 -> m2_75  [key=0, style=solid];
m2_75 -> m2_76  [key=0, style=solid];
m2_75 -> m2_79  [key=2, style=dotted];
m2_75 -> m2_77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_76 -> m2_77  [key=0, style=solid];
m2_76 -> m2_9  [key=2, style=dotted];
m2_76 -> m2_10  [key=2, style=dotted];
m2_76 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_77 -> m2_78  [key=0, style=solid];
m2_77 -> m2_36  [key=2, style=dotted];
m2_77 -> m2_12  [key=2, style=dotted];
m2_78 -> m2_74  [key=0, style=bold, color=blue];
m2_92 -> m2_93  [key=0, style=solid];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_79  [key=2, style=dotted];
m2_93 -> m2_95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_94 -> m2_95  [key=0, style=solid];
m2_94 -> m2_9  [key=2, style=dotted];
m2_94 -> m2_10  [key=2, style=dotted];
m2_94 -> m2_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_95 -> m2_96  [key=0, style=solid];
m2_95 -> m2_36  [key=2, style=dotted];
m2_95 -> m2_12  [key=2, style=dotted];
m2_96 -> m2_92  [key=0, style=bold, color=blue];
m2_315 -> m2_316  [key=0, style=solid];
m2_315 -> m2_318  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_315 -> m2_319  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_316 -> m2_317  [key=0, style=solid];
m2_316 -> m2_9  [key=2, style=dotted];
m2_316 -> m2_10  [key=2, style=dotted];
m2_316 -> m2_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_316 -> m2_318  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_316 -> m2_319  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_318 -> m2_319  [key=0, style=solid];
m2_318 -> m2_105  [key=2, style=dotted];
m2_319 -> m2_320  [key=0, style=solid];
m2_319 -> m2_321  [key=2, style=dotted];
m2_319 -> m2_105  [key=2, style=dotted];
m2_317 -> m2_318  [key=0, style=solid];
m2_317 -> m2_319  [key=0, style=solid];
m2_320 -> m2_315  [key=0, style=bold, color=blue];
m2_251 -> m2_252  [key=0, style=solid];
m2_252 -> m2_253  [key=0, style=solid];
m2_252 -> m2_247  [key=2, style=dotted];
m2_252 -> m2_254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_253 -> m2_254  [key=0, style=solid];
m2_253 -> m2_9  [key=2, style=dotted];
m2_253 -> m2_10  [key=2, style=dotted];
m2_253 -> m2_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_254 -> m2_255  [key=0, style=solid];
m2_254 -> m2_36  [key=2, style=dotted];
m2_254 -> m2_12  [key=2, style=dotted];
m2_255 -> m2_251  [key=0, style=bold, color=blue];
m2_110 -> m2_111  [key=0, style=solid];
m2_111 -> m2_112  [key=0, style=solid];
m2_111 -> m2_115  [key=2, style=dotted];
m2_111 -> m2_70  [key=2, style=dotted];
m2_111 -> m2_113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_112 -> m2_113  [key=0, style=solid];
m2_112 -> m2_9  [key=2, style=dotted];
m2_112 -> m2_10  [key=2, style=dotted];
m2_112 -> m2_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_113 -> m2_114  [key=0, style=solid];
m2_113 -> m2_36  [key=2, style=dotted];
m2_113 -> m2_12  [key=2, style=dotted];
m2_114 -> m2_110  [key=0, style=bold, color=blue];
m2_369 -> m2_370  [key=0, style=solid];
m2_369 -> m2_371  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_369 -> m2_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_370 -> m2_371  [key=0, style=solid];
m2_370 -> m2_9  [key=2, style=dotted];
m2_370 -> m2_10  [key=2, style=dotted];
m2_370 -> m2_375  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_371 -> m2_372  [key=0, style=solid];
m2_371 -> m2_373  [key=2, style=dotted];
m2_371 -> m2_374  [key=2, style=dotted];
m2_371 -> m2_379  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_372 -> m2_369  [key=0, style=bold, color=blue];
m2_399 -> m2_400  [key=0, style=solid];
m2_399 -> m2_401  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m2_400 -> m2_401  [key=0, style=solid];
m2_400 -> m2_9  [key=2, style=dotted];
m2_400 -> m2_10  [key=2, style=dotted];
m2_400 -> m2_403  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_401 -> m2_402  [key=0, style=solid];
m2_401 -> m2_105  [key=2, style=dotted];
m2_402 -> m2_399  [key=0, style=bold, color=blue];
m2_144 -> m2_145  [key=0, style=solid];
m2_144 -> m2_146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m2_145 -> m2_146  [key=0, style=solid];
m2_145 -> m2_9  [key=2, style=dotted];
m2_145 -> m2_10  [key=2, style=dotted];
m2_145 -> m2_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_146 -> m2_147  [key=0, style=solid];
m2_146 -> m2_105  [key=2, style=dotted];
m2_147 -> m2_144  [key=0, style=bold, color=blue];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_9  [key=2, style=dotted];
m2_57 -> m2_10  [key=2, style=dotted];
m2_57 -> m2_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_36  [key=2, style=dotted];
m2_58 -> m2_12  [key=2, style=dotted];
m2_59 -> m2_56  [key=0, style=bold, color=blue];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_9  [key=2, style=dotted];
m2_33 -> m2_10  [key=2, style=dotted];
m2_33 -> m2_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_36  [key=2, style=dotted];
m2_34 -> m2_12  [key=2, style=dotted];
m2_35 -> m2_32  [key=0, style=bold, color=blue];
m2_412 -> m2_413  [key=0, style=solid];
m2_14 -> m2_15  [key=0, style=solid];
m2_13 -> m2_14  [key=0, style=solid];
m2_15 -> m2_13  [key=0, style=bold, color=blue];
m2_21 -> m2_22  [key=0, style=solid];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_6  [key=2, style=dotted];
m2_23 -> m2_21  [key=0, style=bold, color=blue];
m2_28 -> m2_29  [key=0, style=solid];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_31  [key=2, style=dotted];
m2_30 -> m2_28  [key=0, style=bold, color=blue];
m2_37 -> m2_38  [key=0, style=solid];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_40  [key=2, style=dotted];
m2_39 -> m2_37  [key=0, style=bold, color=blue];
m2_45 -> m2_46  [key=0, style=solid];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_6  [key=2, style=dotted];
m2_47 -> m2_45  [key=0, style=bold, color=blue];
m2_52 -> m2_53  [key=0, style=solid];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_55  [key=2, style=dotted];
m2_54 -> m2_52  [key=0, style=bold, color=blue];
m2_60 -> m2_61  [key=0, style=solid];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_63  [key=2, style=dotted];
m2_62 -> m2_60  [key=0, style=bold, color=blue];
m2_71 -> m2_72  [key=0, style=solid];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_55  [key=2, style=dotted];
m2_73 -> m2_71  [key=0, style=bold, color=blue];
m2_80 -> m2_81  [key=0, style=solid];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_83  [key=2, style=dotted];
m2_82 -> m2_80  [key=0, style=bold, color=blue];
m2_89 -> m2_90  [key=0, style=solid];
m2_90 -> m2_91  [key=0, style=solid];
m2_90 -> m2_63  [key=2, style=dotted];
m2_91 -> m2_89  [key=0, style=bold, color=blue];
m2_97 -> m2_98  [key=0, style=solid];
m2_98 -> m2_99  [key=0, style=solid];
m2_98 -> m2_100  [key=2, style=dotted];
m2_99 -> m2_97  [key=0, style=bold, color=blue];
m2_106 -> m2_107  [key=0, style=solid];
m2_107 -> m2_108  [key=0, style=solid];
m2_107 -> m2_109  [key=2, style=dotted];
m2_108 -> m2_106  [key=0, style=bold, color=blue];
m2_116 -> m2_117  [key=0, style=solid];
m2_117 -> m2_118  [key=0, style=solid];
m2_117 -> m2_109  [key=2, style=dotted];
m2_118 -> m2_116  [key=0, style=bold, color=blue];
m2_124 -> m2_125  [key=0, style=solid];
m2_125 -> m2_126  [key=0, style=solid];
m2_125 -> m2_109  [key=2, style=dotted];
m2_126 -> m2_124  [key=0, style=bold, color=blue];
m2_132 -> m2_133  [key=0, style=solid];
m2_133 -> m2_134  [key=0, style=solid];
m2_133 -> m2_109  [key=2, style=dotted];
m2_134 -> m2_132  [key=0, style=bold, color=blue];
m2_141 -> m2_142  [key=0, style=solid];
m2_142 -> m2_143  [key=0, style=solid];
m2_142 -> m2_140  [key=2, style=dotted];
m2_143 -> m2_141  [key=0, style=bold, color=blue];
m2_148 -> m2_149  [key=0, style=solid];
m2_149 -> m2_150  [key=0, style=solid];
m2_149 -> m2_151  [key=2, style=dotted];
m2_150 -> m2_148  [key=0, style=bold, color=blue];
m2_156 -> m2_157  [key=0, style=solid];
m2_157 -> m2_158  [key=0, style=solid];
m2_157 -> m2_159  [key=2, style=dotted];
m2_158 -> m2_156  [key=0, style=bold, color=blue];
m2_164 -> m2_165  [key=0, style=solid];
m2_165 -> m2_166  [key=0, style=solid];
m2_165 -> m2_159  [key=2, style=dotted];
m2_166 -> m2_164  [key=0, style=bold, color=blue];
m2_174 -> m2_175  [key=0, style=solid];
m2_177 -> m2_178  [key=0, style=solid];
m2_177 -> m2_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_177 -> m2_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_175 -> m2_176  [key=0, style=solid];
m2_175 -> m2_140  [key=2, style=dotted];
m2_176 -> m2_174  [key=0, style=bold, color=blue];
m2_178 -> m2_179  [key=0, style=solid];
m2_178 -> m2_180  [key=2, style=dotted];
m2_178 -> m2_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_182 -> m2_183  [key=0, style=solid];
m2_182 -> m2_184  [key=2, style=dotted];
m2_182 -> m2_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_186 -> m2_187  [key=0, style=solid];
m2_186 -> m2_188  [key=2, style=dotted];
m2_179 -> m2_177  [key=0, style=bold, color=blue];
m2_181 -> m2_182  [key=0, style=solid];
m2_183 -> m2_181  [key=0, style=bold, color=blue];
m2_185 -> m2_186  [key=0, style=solid];
m2_187 -> m2_185  [key=0, style=bold, color=blue];
m2_195 -> m2_196  [key=0, style=solid];
m2_196 -> m2_197  [key=0, style=solid];
m2_196 -> m2_198  [key=2, style=dotted];
m2_197 -> m2_195  [key=0, style=bold, color=blue];
m2_205 -> m2_206  [key=0, style=solid];
m2_206 -> m2_207  [key=0, style=solid];
m2_206 -> m2_204  [key=2, style=dotted];
m2_207 -> m2_205  [key=0, style=bold, color=blue];
m2_213 -> m2_214  [key=0, style=solid];
m2_214 -> m2_215  [key=0, style=solid];
m2_214 -> m2_204  [key=2, style=dotted];
m2_215 -> m2_213  [key=0, style=bold, color=blue];
m2_222 -> m2_223  [key=0, style=solid];
m2_223 -> m2_224  [key=0, style=solid];
m2_223 -> m2_204  [key=2, style=dotted];
m2_224 -> m2_222  [key=0, style=bold, color=blue];
m2_230 -> m2_231  [key=0, style=solid];
m2_231 -> m2_232  [key=0, style=solid];
m2_231 -> m2_233  [key=2, style=dotted];
m2_232 -> m2_230  [key=0, style=bold, color=blue];
m2_239 -> m2_240  [key=0, style=solid];
m2_240 -> m2_241  [key=0, style=solid];
m2_240 -> m2_6  [key=2, style=dotted];
m2_241 -> m2_239  [key=0, style=bold, color=blue];
m2_248 -> m2_249  [key=0, style=solid];
m2_249 -> m2_250  [key=0, style=solid];
m2_249 -> m2_6  [key=2, style=dotted];
m2_250 -> m2_248  [key=0, style=bold, color=blue];
m2_256 -> m2_257  [key=0, style=solid];
m2_257 -> m2_258  [key=0, style=solid];
m2_257 -> m2_6  [key=2, style=dotted];
m2_258 -> m2_256  [key=0, style=bold, color=blue];
m2_264 -> m2_265  [key=0, style=solid];
m2_265 -> m2_266  [key=0, style=solid];
m2_265 -> m2_6  [key=2, style=dotted];
m2_266 -> m2_264  [key=0, style=bold, color=blue];
m2_272 -> m2_273  [key=0, style=solid];
m2_273 -> m2_274  [key=0, style=solid];
m2_273 -> m2_6  [key=2, style=dotted];
m2_274 -> m2_272  [key=0, style=bold, color=blue];
m2_280 -> m2_281  [key=0, style=solid];
m2_281 -> m2_282  [key=0, style=solid];
m2_281 -> m2_283  [key=2, style=dotted];
m2_282 -> m2_280  [key=0, style=bold, color=blue];
m2_288 -> m2_289  [key=0, style=solid];
m2_289 -> m2_290  [key=0, style=solid];
m2_289 -> m2_6  [key=2, style=dotted];
m2_290 -> m2_288  [key=0, style=bold, color=blue];
m2_296 -> m2_297  [key=0, style=solid];
m2_297 -> m2_298  [key=0, style=solid];
m2_297 -> m2_299  [key=2, style=dotted];
m2_298 -> m2_296  [key=0, style=bold, color=blue];
m2_304 -> m2_305  [key=0, style=solid];
m2_305 -> m2_306  [key=0, style=solid];
m2_305 -> m2_307  [key=2, style=dotted];
m2_306 -> m2_304  [key=0, style=bold, color=blue];
m2_312 -> m2_313  [key=0, style=solid];
m2_313 -> m2_314  [key=0, style=solid];
m2_313 -> m2_307  [key=2, style=dotted];
m2_314 -> m2_312  [key=0, style=bold, color=blue];
m2_322 -> m2_323  [key=0, style=solid];
m2_323 -> m2_324  [key=0, style=solid];
m2_323 -> m2_325  [key=2, style=dotted];
m2_324 -> m2_322  [key=0, style=bold, color=blue];
m2_332 -> m2_333  [key=0, style=solid];
m2_333 -> m2_334  [key=0, style=solid];
m2_333 -> m2_325  [key=2, style=dotted];
m2_334 -> m2_332  [key=0, style=bold, color=blue];
m2_340 -> m2_341  [key=0, style=solid];
m2_341 -> m2_342  [key=0, style=solid];
m2_341 -> m2_9  [key=2, style=dotted];
m2_341 -> m2_10  [key=2, style=dotted];
m2_341 -> m2_343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_342 -> m2_340  [key=0, style=bold, color=blue];
m2_343 -> m2_344  [key=0, style=solid];
m2_344 -> m2_345  [key=0, style=solid];
m2_344 -> m2_346  [key=2, style=dotted];
m2_345 -> m2_343  [key=0, style=bold, color=blue];
m2_351 -> m2_352  [key=0, style=solid];
m2_352 -> m2_353  [key=0, style=solid];
m2_352 -> m2_9  [key=2, style=dotted];
m2_352 -> m2_10  [key=2, style=dotted];
m2_352 -> m2_354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_353 -> m2_351  [key=0, style=bold, color=blue];
m2_354 -> m2_355  [key=0, style=solid];
m2_355 -> m2_356  [key=0, style=solid];
m2_355 -> m2_357  [key=2, style=dotted];
m2_356 -> m2_354  [key=0, style=bold, color=blue];
m2_362 -> m2_363  [key=0, style=solid];
m2_363 -> m2_364  [key=0, style=solid];
m2_363 -> m2_9  [key=2, style=dotted];
m2_363 -> m2_10  [key=2, style=dotted];
m2_363 -> m2_365  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_364 -> m2_362  [key=0, style=bold, color=blue];
m2_365 -> m2_366  [key=0, style=solid];
m2_366 -> m2_367  [key=0, style=solid];
m2_366 -> m2_368  [key=2, style=dotted];
m2_367 -> m2_365  [key=0, style=bold, color=blue];
m2_380 -> m2_381  [key=0, style=solid];
m2_375 -> m2_376  [key=0, style=solid];
m2_379 -> m2_380  [key=0, style=solid];
m2_376 -> m2_377  [key=0, style=solid];
m2_376 -> m2_378  [key=2, style=dotted];
m2_377 -> m2_375  [key=0, style=bold, color=blue];
m2_381 -> m2_379  [key=0, style=bold, color=blue];
m2_390 -> m2_391  [key=0, style=solid];
m2_386 -> m2_387  [key=0, style=solid];
m2_389 -> m2_390  [key=0, style=solid];
m2_387 -> m2_388  [key=0, style=solid];
m2_387 -> m2_6  [key=2, style=dotted];
m2_388 -> m2_386  [key=0, style=bold, color=blue];
m2_391 -> m2_389  [key=0, style=bold, color=blue];
m2_396 -> m2_397  [key=0, style=solid];
m2_397 -> m2_398  [key=0, style=solid];
m2_397 -> m2_283  [key=2, style=dotted];
m2_398 -> m2_396  [key=0, style=bold, color=blue];
m2_403 -> m2_404  [key=0, style=solid];
m2_404 -> m2_405  [key=0, style=solid];
m2_404 -> m2_406  [key=2, style=dotted];
m2_405 -> m2_403  [key=0, style=bold, color=blue];
m2_413 -> m2_414  [key=0, style=solid];
m2_413 -> m2_6  [key=2, style=dotted];
m2_414 -> m2_412  [key=0, style=bold, color=blue];
m2_382 -> m2_383  [key=0, style=solid];
m2_382 -> m2_384  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_382 -> m2_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_383 -> m2_384  [key=0, style=solid];
m2_383 -> m2_9  [key=2, style=dotted];
m2_383 -> m2_10  [key=2, style=dotted];
m2_383 -> m2_386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_384 -> m2_385  [key=0, style=solid];
m2_384 -> m2_373  [key=2, style=dotted];
m2_384 -> m2_374  [key=2, style=dotted];
m2_384 -> m2_389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_385 -> m2_382  [key=0, style=bold, color=blue];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_9  [key=2, style=dotted];
m2_49 -> m2_10  [key=2, style=dotted];
m2_49 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_36  [key=2, style=dotted];
m2_50 -> m2_12  [key=2, style=dotted];
m2_51 -> m2_48  [key=0, style=bold, color=blue];
m2_119 -> m2_120  [key=0, style=solid];
m2_120 -> m2_121  [key=0, style=solid];
m2_120 -> m2_115  [key=2, style=dotted];
m2_120 -> m2_70  [key=2, style=dotted];
m2_120 -> m2_122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_121 -> m2_122  [key=0, style=solid];
m2_121 -> m2_9  [key=2, style=dotted];
m2_121 -> m2_10  [key=2, style=dotted];
m2_121 -> m2_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_122 -> m2_123  [key=0, style=solid];
m2_122 -> m2_36  [key=2, style=dotted];
m2_122 -> m2_12  [key=2, style=dotted];
m2_123 -> m2_119  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label=double];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_9  [key=2, style=dotted];
m2_25 -> m2_10  [key=2, style=dotted];
m2_25 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_26 -> m2_27  [key=0, style=solid];
m2_26 -> m2_20  [key=2, style=dotted];
m2_27 -> m2_24  [key=0, style=bold, color=blue];
m2_275 -> m2_276  [key=0, style=solid];
m2_276 -> m2_277  [key=0, style=solid];
m2_276 -> m2_221  [key=2, style=dotted];
m2_276 -> m2_278  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_277 -> m2_278  [key=0, style=solid];
m2_277 -> m2_9  [key=2, style=dotted];
m2_277 -> m2_10  [key=2, style=dotted];
m2_277 -> m2_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_278 -> m2_279  [key=0, style=solid];
m2_278 -> m2_36  [key=2, style=dotted];
m2_278 -> m2_12  [key=2, style=dotted];
m2_279 -> m2_275  [key=0, style=bold, color=blue];
m2_234 -> m2_235  [key=0, style=solid];
m2_235 -> m2_236  [key=0, style=solid];
m2_235 -> m2_79  [key=2, style=dotted];
m2_235 -> m2_70  [key=2, style=dotted];
m2_235 -> m2_237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_236 -> m2_237  [key=0, style=solid];
m2_236 -> m2_9  [key=2, style=dotted];
m2_236 -> m2_10  [key=2, style=dotted];
m2_236 -> m2_239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_237 -> m2_238  [key=0, style=solid];
m2_237 -> m2_36  [key=2, style=dotted];
m2_237 -> m2_12  [key=2, style=dotted];
m2_238 -> m2_234  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m2_1 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_7  [key=2, style=dotted];
m2_2 -> m2_8  [key=2, style=dotted];
m2_2 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_9  [key=2, style=dotted];
m2_3 -> m2_10  [key=2, style=dotted];
m2_3 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_11  [key=2, style=dotted];
m2_4 -> m2_12  [key=2, style=dotted];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_225 -> m2_226  [key=0, style=solid];
m2_226 -> m2_227  [key=0, style=solid];
m2_226 -> m2_221  [key=2, style=dotted];
m2_226 -> m2_70  [key=2, style=dotted];
m2_226 -> m2_228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_227 -> m2_228  [key=0, style=solid];
m2_227 -> m2_9  [key=2, style=dotted];
m2_227 -> m2_10  [key=2, style=dotted];
m2_227 -> m2_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_228 -> m2_229  [key=0, style=solid];
m2_228 -> m2_36  [key=2, style=dotted];
m2_228 -> m2_12  [key=2, style=dotted];
m2_229 -> m2_225  [key=0, style=bold, color=blue];
m2_216 -> m2_217  [key=0, style=solid];
m2_217 -> m2_218  [key=0, style=solid];
m2_217 -> m2_221  [key=2, style=dotted];
m2_217 -> m2_70  [key=2, style=dotted];
m2_217 -> m2_219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_218 -> m2_219  [key=0, style=solid];
m2_218 -> m2_9  [key=2, style=dotted];
m2_218 -> m2_10  [key=2, style=dotted];
m2_218 -> m2_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_219 -> m2_220  [key=0, style=solid];
m2_219 -> m2_36  [key=2, style=dotted];
m2_219 -> m2_12  [key=2, style=dotted];
m2_220 -> m2_216  [key=0, style=bold, color=blue];
m2_127 -> m2_128  [key=0, style=solid];
m2_128 -> m2_129  [key=0, style=solid];
m2_128 -> m2_115  [key=2, style=dotted];
m2_128 -> m2_70  [key=2, style=dotted];
m2_128 -> m2_130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_129 -> m2_130  [key=0, style=solid];
m2_129 -> m2_9  [key=2, style=dotted];
m2_129 -> m2_10  [key=2, style=dotted];
m2_129 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_130 -> m2_131  [key=0, style=solid];
m2_130 -> m2_36  [key=2, style=dotted];
m2_130 -> m2_12  [key=2, style=dotted];
m2_131 -> m2_127  [key=0, style=bold, color=blue];
m2_392 -> m2_393  [key=0, style=solid];
m2_392 -> m2_394  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m2_393 -> m2_394  [key=0, style=solid];
m2_393 -> m2_9  [key=2, style=dotted];
m2_393 -> m2_10  [key=2, style=dotted];
m2_393 -> m2_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_394 -> m2_395  [key=0, style=solid];
m2_394 -> m2_105  [key=2, style=dotted];
m2_395 -> m2_392  [key=0, style=bold, color=blue];
m2_84 -> m2_85  [key=0, style=solid];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_79  [key=2, style=dotted];
m2_85 -> m2_70  [key=2, style=dotted];
m2_85 -> m2_87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_9  [key=2, style=dotted];
m2_86 -> m2_10  [key=2, style=dotted];
m2_86 -> m2_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_87 -> m2_88  [key=0, style=solid];
m2_87 -> m2_36  [key=2, style=dotted];
m2_87 -> m2_12  [key=2, style=dotted];
m2_88 -> m2_84  [key=0, style=bold, color=blue];
m2_64 -> m2_65  [key=0, style=solid];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> m2_69  [key=2, style=dotted];
m2_65 -> m2_70  [key=2, style=dotted];
m2_65 -> m2_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_9  [key=2, style=dotted];
m2_66 -> m2_10  [key=2, style=dotted];
m2_66 -> m2_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_36  [key=2, style=dotted];
m2_67 -> m2_12  [key=2, style=dotted];
m2_68 -> m2_64  [key=0, style=bold, color=blue];
m2_135 -> m2_136  [key=0, style=solid];
m2_136 -> m2_137  [key=0, style=solid];
m2_136 -> m2_140  [key=2, style=dotted];
m2_136 -> m2_138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_137 -> m2_138  [key=0, style=solid];
m2_137 -> m2_9  [key=2, style=dotted];
m2_137 -> m2_10  [key=2, style=dotted];
m2_137 -> m2_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_138 -> m2_139  [key=0, style=solid];
m2_138 -> m2_105  [key=2, style=dotted];
m2_139 -> m2_135  [key=0, style=bold, color=blue];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=long];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_9  [key=2, style=dotted];
m2_17 -> m2_10  [key=2, style=dotted];
m2_17 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_20  [key=2, style=dotted];
m2_19 -> m2_16  [key=0, style=bold, color=blue];
m2_326 -> m2_327  [key=0, style=solid];
m2_326 -> m2_329  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_326 -> m2_330  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_327 -> m2_328  [key=0, style=solid];
m2_327 -> m2_9  [key=2, style=dotted];
m2_327 -> m2_10  [key=2, style=dotted];
m2_327 -> m2_332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_327 -> m2_329  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_327 -> m2_330  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_329 -> m2_330  [key=0, style=solid];
m2_329 -> m2_105  [key=2, style=dotted];
m2_330 -> m2_331  [key=0, style=solid];
m2_330 -> m2_321  [key=2, style=dotted];
m2_330 -> m2_105  [key=2, style=dotted];
m2_328 -> m2_329  [key=0, style=solid];
m2_328 -> m2_330  [key=0, style=solid];
m2_331 -> m2_326  [key=0, style=bold, color=blue];
m2_407 -> m2_408  [key=0, style=solid];
m2_408 -> m2_409  [key=0, style=solid];
m2_408 -> m2_6  [key=2, style=dotted];
m2_408 -> m2_410  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_409 -> m2_410  [key=0, style=solid];
m2_409 -> m2_9  [key=2, style=dotted];
m2_409 -> m2_10  [key=2, style=dotted];
m2_409 -> m2_412  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_410 -> m2_411  [key=0, style=solid];
m2_410 -> m2_105  [key=2, style=dotted];
m2_411 -> m2_407  [key=0, style=bold, color=blue];
m2_160 -> m2_161  [key=0, style=solid];
m2_160 -> m2_162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m2_161 -> m2_162  [key=0, style=solid];
m2_161 -> m2_9  [key=2, style=dotted];
m2_161 -> m2_10  [key=2, style=dotted];
m2_161 -> m2_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_162 -> m2_163  [key=0, style=solid];
m2_162 -> m2_105  [key=2, style=dotted];
m2_163 -> m2_160  [key=0, style=bold, color=blue];
m2_300 -> m2_301  [key=0, style=solid];
m2_300 -> m2_302  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m2_301 -> m2_302  [key=0, style=solid];
m2_301 -> m2_9  [key=2, style=dotted];
m2_301 -> m2_10  [key=2, style=dotted];
m2_301 -> m2_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_302 -> m2_303  [key=0, style=solid];
m2_302 -> m2_105  [key=2, style=dotted];
m2_303 -> m2_300  [key=0, style=bold, color=blue];
m2_242 -> m2_243  [key=0, style=solid];
m2_243 -> m2_244  [key=0, style=solid];
m2_243 -> m2_247  [key=2, style=dotted];
m2_243 -> m2_245  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_244 -> m2_245  [key=0, style=solid];
m2_244 -> m2_9  [key=2, style=dotted];
m2_244 -> m2_10  [key=2, style=dotted];
m2_244 -> m2_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_245 -> m2_246  [key=0, style=solid];
m2_245 -> m2_36  [key=2, style=dotted];
m2_245 -> m2_12  [key=2, style=dotted];
m2_246 -> m2_242  [key=0, style=bold, color=blue];
m2_208 -> m2_209  [key=0, style=solid];
m2_209 -> m2_210  [key=0, style=solid];
m2_209 -> m2_204  [key=2, style=dotted];
m2_209 -> m2_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_210 -> m2_211  [key=0, style=solid];
m2_210 -> m2_9  [key=2, style=dotted];
m2_210 -> m2_10  [key=2, style=dotted];
m2_210 -> m2_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_211 -> m2_212  [key=0, style=solid];
m2_211 -> m2_105  [key=2, style=dotted];
m2_212 -> m2_208  [key=0, style=bold, color=blue];
m2_291 -> m2_292  [key=0, style=solid];
m2_292 -> m2_293  [key=0, style=solid];
m2_292 -> m2_79  [key=2, style=dotted];
m2_292 -> m2_294  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_293 -> m2_294  [key=0, style=solid];
m2_293 -> m2_9  [key=2, style=dotted];
m2_293 -> m2_10  [key=2, style=dotted];
m2_293 -> m2_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_294 -> m2_295  [key=0, style=solid];
m2_294 -> m2_36  [key=2, style=dotted];
m2_294 -> m2_12  [key=2, style=dotted];
m2_295 -> m2_291  [key=0, style=bold, color=blue];
m2_101 -> m2_102  [key=0, style=solid];
m2_101 -> m2_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m2_102 -> m2_103  [key=0, style=solid];
m2_102 -> m2_9  [key=2, style=dotted];
m2_102 -> m2_10  [key=2, style=dotted];
m2_102 -> m2_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_103 -> m2_104  [key=0, style=solid];
m2_103 -> m2_105  [key=2, style=dotted];
m2_103 -> m2_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m2_104 -> m2_101  [key=0, style=bold, color=blue];
m2_415 -> m2_416  [key=0, style=solid];
m2_415 -> m2_417  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
m2_416 -> m2_417  [key=0, style=solid];
m2_416 -> m2_419  [key=2, style=dotted];
m2_416 -> m2_10  [key=2, style=dotted];
m2_417 -> m2_418  [key=0, style=solid];
m2_417 -> m2_105  [key=2, style=dotted];
m2_418 -> m2_415  [key=0, style=bold, color=blue];
m2_284 -> m2_285  [key=0, style=solid];
m2_284 -> m2_286  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_285 -> m2_286  [key=0, style=solid];
m2_285 -> m2_9  [key=2, style=dotted];
m2_285 -> m2_10  [key=2, style=dotted];
m2_285 -> m2_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_286 -> m2_287  [key=0, style=solid];
m2_286 -> m2_105  [key=2, style=dotted];
m2_287 -> m2_284  [key=0, style=bold, color=blue];
m2_199 -> m2_200  [key=0, style=solid];
m2_200 -> m2_201  [key=0, style=solid];
m2_200 -> m2_204  [key=2, style=dotted];
m2_200 -> m2_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_201 -> m2_202  [key=0, style=solid];
m2_201 -> m2_9  [key=2, style=dotted];
m2_201 -> m2_10  [key=2, style=dotted];
m2_201 -> m2_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_202 -> m2_203  [key=0, style=solid];
m2_202 -> m2_105  [key=2, style=dotted];
m2_203 -> m2_199  [key=0, style=bold, color=blue];
m2_347 -> m2_348  [key=0, style=solid];
m2_348 -> m2_349  [key=0, style=solid];
m2_348 -> m2_348  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
m2_349 -> m2_350  [key=0, style=solid];
m2_349 -> m2_339  [key=2, style=dotted];
m2_350 -> m2_347  [key=0, style=bold, color=blue];
m2_189 -> m2_190  [key=0, style=solid];
m2_190 -> m2_191  [key=0, style=solid];
m2_190 -> m2_194  [key=2, style=dotted];
m2_190 -> m2_70  [key=2, style=dotted];
m2_190 -> m2_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m2_191 -> m2_192  [key=0, style=solid];
m2_191 -> m2_9  [key=2, style=dotted];
m2_191 -> m2_10  [key=2, style=dotted];
m2_191 -> m2_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_192 -> m2_193  [key=0, style=solid];
m2_192 -> m2_36  [key=2, style=dotted];
m2_192 -> m2_12  [key=2, style=dotted];
m2_193 -> m2_189  [key=0, style=bold, color=blue];
m2_420 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m2_421 -> m2_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_421 -> m2_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_422 -> m2_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_423 -> m2_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m3_41 -> m3_44  [key=2, style=dotted];
m3_42 -> m3_9  [key=2, style=dotted];
m3_42 -> m3_10  [key=2, style=dotted];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_42 -> m3_19  [key=0, style=bold, color=blue];
m3_43 -> m3_36  [key=2, style=dotted];
m3_43 -> m3_12  [key=2, style=dotted];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_42  [key=0, style=solid];
m3_43 -> m3_46  [key=2, style=dotted];
m3_44 -> m3_41  [key=0, style=bold, color=blue];
m3_152 -> m3_153  [key=0, style=solid];
m3_152 -> m3_154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m3_153 -> m3_9  [key=2, style=dotted];
m3_153 -> m3_10  [key=2, style=dotted];
m3_153 -> m3_154  [key=0, style=solid];
m3_153 -> m3_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_154 -> m3_155  [key=0, style=solid];
m3_154 -> m3_105  [key=2, style=dotted];
m3_155 -> m3_152  [key=0, style=bold, color=blue];
m3_3 -> m3_9  [key=2, style=dotted];
m3_3 -> m3_10  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_71 -> m3_72  [key=0, style=solid];
m3_267 -> m3_268  [key=0, style=solid];
m3_267 -> m3_269  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_268 -> m3_9  [key=2, style=dotted];
m3_268 -> m3_10  [key=2, style=dotted];
m3_268 -> m3_269  [key=0, style=solid];
m3_268 -> m3_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_269 -> m3_12  [key=2, style=dotted];
m3_269 -> m3_270  [key=0, style=solid];
m3_269 -> m3_271  [key=2, style=dotted];
m3_270 -> m3_267  [key=0, style=bold, color=blue];
m3_308 -> m3_309  [key=0, style=solid];
m3_308 -> m3_310  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m3_309 -> m3_9  [key=2, style=dotted];
m3_309 -> m3_10  [key=2, style=dotted];
m3_309 -> m3_310  [key=0, style=solid];
m3_309 -> m3_312  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_310 -> m3_311  [key=0, style=solid];
m3_310 -> m3_105  [key=2, style=dotted];
m3_311 -> m3_308  [key=0, style=bold, color=blue];
m3_67 -> m3_36  [key=2, style=dotted];
m3_67 -> m3_12  [key=2, style=dotted];
m3_67 -> m3_68  [key=0, style=solid];
m3_167 -> m3_168  [key=0, style=solid];
m3_170 -> m3_9  [key=2, style=dotted];
m3_170 -> m3_171  [key=0, style=solid];
m3_170 -> m3_173  [key=2, style=dotted];
m3_170 -> m3_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_170 -> m3_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_169 -> m3_170  [key=0, style=solid];
m3_171 -> m3_172  [key=0, style=solid];
m3_171 -> m3_105  [key=2, style=dotted];
m3_168 -> m3_169  [key=0, style=solid];
m3_168 -> m3_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_168 -> m3_140  [key=2, style=dotted];
m3_172 -> m3_167  [key=0, style=bold, color=blue];
m3_259 -> m3_260  [key=0, style=solid];
m3_261 -> m3_9  [key=2, style=dotted];
m3_261 -> m3_10  [key=2, style=dotted];
m3_261 -> m3_262  [key=0, style=solid];
m3_261 -> m3_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_262 -> m3_36  [key=2, style=dotted];
m3_262 -> m3_12  [key=2, style=dotted];
m3_262 -> m3_263  [key=0, style=solid];
m3_260 -> m3_261  [key=0, style=solid];
m3_260 -> m3_262  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_260 -> m3_247  [key=2, style=dotted];
m3_263 -> m3_259  [key=0, style=bold, color=blue];
m3_45 -> m3_46  [key=0, style=solid];
m3_9 -> m3_7  [key=0, style=bold, color=blue];
m3_74 -> m3_75  [key=0, style=solid];
m3_76 -> m3_9  [key=2, style=dotted];
m3_76 -> m3_10  [key=2, style=dotted];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_77 -> m3_36  [key=2, style=dotted];
m3_77 -> m3_12  [key=2, style=dotted];
m3_77 -> m3_78  [key=0, style=solid];
m3_75 -> m3_76  [key=0, style=solid];
m3_75 -> m3_77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_75 -> m3_79  [key=2, style=dotted];
m3_78 -> m3_74  [key=0, style=bold, color=blue];
m3_92 -> m3_93  [key=0, style=solid];
m3_94 -> m3_9  [key=2, style=dotted];
m3_94 -> m3_10  [key=2, style=dotted];
m3_94 -> m3_95  [key=0, style=solid];
m3_94 -> m3_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_95 -> m3_36  [key=2, style=dotted];
m3_95 -> m3_12  [key=2, style=dotted];
m3_95 -> m3_96  [key=0, style=solid];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_93 -> m3_79  [key=2, style=dotted];
m3_96 -> m3_92  [key=0, style=bold, color=blue];
m3_315 -> m3_316  [key=0, style=solid];
m3_315 -> m3_318  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_315 -> m3_319  [key=1, style=dashed, color=darkseagreen4, label=bool];
m3_316 -> m3_9  [key=2, style=dotted];
m3_316 -> m3_10  [key=2, style=dotted];
m3_316 -> m3_317  [key=0, style=solid];
m3_316 -> m3_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_316 -> m3_318  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_316 -> m3_319  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_317 -> m3_318  [key=0, style=solid];
m3_317 -> m3_319  [key=0, style=solid];
m3_318 -> m3_319  [key=0, style=solid];
m3_318 -> m3_105  [key=2, style=dotted];
m3_319 -> m3_320  [key=0, style=solid];
m3_319 -> m3_321  [key=2, style=dotted];
m3_319 -> m3_105  [key=2, style=dotted];
m3_320 -> m3_315  [key=0, style=bold, color=blue];
m3_6 -> m3_4  [key=0, style=bold, color=blue];
m3_251 -> m3_252  [key=0, style=solid];
m3_253 -> m3_9  [key=2, style=dotted];
m3_253 -> m3_10  [key=2, style=dotted];
m3_253 -> m3_254  [key=0, style=solid];
m3_253 -> m3_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_254 -> m3_36  [key=2, style=dotted];
m3_254 -> m3_12  [key=2, style=dotted];
m3_254 -> m3_255  [key=0, style=solid];
m3_252 -> m3_253  [key=0, style=solid];
m3_252 -> m3_254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_252 -> m3_247  [key=2, style=dotted];
m3_255 -> m3_251  [key=0, style=bold, color=blue];
m3_110 -> m3_111  [key=0, style=solid];
m3_112 -> m3_9  [key=2, style=dotted];
m3_112 -> m3_10  [key=2, style=dotted];
m3_112 -> m3_113  [key=0, style=solid];
m3_112 -> m3_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_113 -> m3_36  [key=2, style=dotted];
m3_113 -> m3_12  [key=2, style=dotted];
m3_113 -> m3_114  [key=0, style=solid];
m3_111 -> m3_112  [key=0, style=solid];
m3_111 -> m3_113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_111 -> m3_115  [key=2, style=dotted];
m3_111 -> m3_70  [key=2, style=dotted];
m3_114 -> m3_110  [key=0, style=bold, color=blue];
m3_369 -> m3_370  [key=0, style=solid];
m3_369 -> m3_371  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_369 -> m3_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_370 -> m3_9  [key=2, style=dotted];
m3_370 -> m3_10  [key=2, style=dotted];
m3_370 -> m3_371  [key=0, style=solid];
m3_370 -> m3_375  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_371 -> m3_372  [key=0, style=solid];
m3_371 -> m3_373  [key=2, style=dotted];
m3_371 -> m3_374  [key=2, style=dotted];
m3_371 -> m3_379  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_372 -> m3_369  [key=0, style=bold, color=blue];
m3_7 -> m3_8  [key=0, style=solid];
m3_399 -> m3_400  [key=0, style=solid];
m3_399 -> m3_401  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m3_400 -> m3_9  [key=2, style=dotted];
m3_400 -> m3_10  [key=2, style=dotted];
m3_400 -> m3_401  [key=0, style=solid];
m3_400 -> m3_403  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_401 -> m3_402  [key=0, style=solid];
m3_401 -> m3_105  [key=2, style=dotted];
m3_402 -> m3_399  [key=0, style=bold, color=blue];
m3_144 -> m3_145  [key=0, style=solid];
m3_144 -> m3_146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m3_145 -> m3_9  [key=2, style=dotted];
m3_145 -> m3_10  [key=2, style=dotted];
m3_145 -> m3_146  [key=0, style=solid];
m3_145 -> m3_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_146 -> m3_147  [key=0, style=solid];
m3_146 -> m3_105  [key=2, style=dotted];
m3_147 -> m3_144  [key=0, style=bold, color=blue];
m3_56 -> m3_57  [key=0, style=solid, color=green];
m3_56 -> m3_58  [key=1, style=dashed, color=darkseagreen4, label="?"];
m3_56 -> m3_59  [key=1, style=dashed, color=red, label="?"];
m3_57 -> m3_58  [key=0, style=solid, color=green];
m3_57 -> m3_9  [key=2, style=dotted, color=green];
m3_57 -> m3_10  [key=2, style=dotted, color=green];
m3_57 -> m3_60  [key=1, style=dashed, color=darkseagreen4, label=names];
m3_57 -> m3_62  [key=2, style=dotted];
m3_57 -> m3_54  [key=2, style=dotted];
m3_57 -> m3_55  [key=2, style=dotted];
m3_57 -> m3_57  [key=1, style=dashed, color=darkseagreen4, label=e];
m3_58 -> m3_59  [key=0, style=solid, color=red];
m3_58 -> m3_36  [key=2, style=dotted];
m3_58 -> m3_12  [key=2, style=dotted];
m3_58 -> m3_63  [key=2, style=dotted];
m3_58 -> m3_60  [key=1, style=dashed, color=darkseagreen4, label=namesCount];
m3_59 -> m3_56  [key=0, style=bold, color=blue];
m3_59 -> m3_60  [key=0, style=solid, color=red];
m3_59 -> m3_64  [key=2, style=dotted, color=red];
m3_59 -> m3_65  [key=2, style=dotted, color=red];
m3_59 -> m3_62  [key=2, style=dotted, color=red];
m3_59 -> m3_54  [key=2, style=dotted, color=red];
m3_59 -> m3_55  [key=2, style=dotted, color=red];
m3_59 -> m3_59  [key=1, style=dashed, color=red, label=s];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m3_32 -> m3_42  [key=0, style=solid];
m3_32 -> m3_45  [key=2, style=dotted];
m3_32 -> m3_44  [key=2, style=dotted];
m3_33 -> m3_9  [key=2, style=dotted];
m3_33 -> m3_10  [key=2, style=dotted];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_34 -> m3_36  [key=2, style=dotted];
m3_34 -> m3_12  [key=2, style=dotted];
m3_34 -> m3_35  [key=0, style=solid];
m3_35 -> m3_32  [key=0, style=bold, color=blue];
m3_35 -> m3_42  [key=0, style=solid];
m3_35 -> m3_45  [key=2, style=dotted];
m3_35 -> m3_44  [key=2, style=dotted];
m3_185 -> m3_186  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_12  [key=2, style=dotted];
m3_4 -> m3_11  [key=2, style=dotted];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_0  [key=0, style=bold, color=blue];
m3_8 -> m3_9  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_12 -> m3_10  [key=0, style=bold, color=blue];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_15 -> m3_13  [key=0, style=bold, color=blue];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_18  [key=1, style=dashed, color=darkseagreen4, label=long];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_9  [key=2, style=dotted];
m3_17 -> m3_10  [key=2, style=dotted];
m3_17 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_18 -> m3_16  [key=0, style=bold, color=blue];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_20  [key=2, style=dotted];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_22  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m3_19 -> m3_24  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m3_19 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m3_19 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m3_19 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m3_19 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m3_19 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m3_19 -> m3_41  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m3_19 -> m3_19  [key=3, color=darkorchid, style=bold, label="method methodReturn string "];
m3_19 -> m3_16  [key=0, style=bold, color=blue];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_23  [key=0, style=solid];
m3_20 -> m3_25  [key=0, style=solid];
m3_20 -> m3_27  [key=0, style=solid];
m3_20 -> m3_30  [key=0, style=solid];
m3_20 -> m3_33  [key=0, style=solid];
m3_20 -> m3_36  [key=0, style=solid];
m3_20 -> m3_38  [key=0, style=solid];
m3_20 -> m3_40  [key=0, style=solid];
m3_22 -> m3_42  [key=0, style=solid];
m3_22 -> m3_44  [key=2, style=dotted];
m3_22 -> m3_6  [key=2, style=dotted];
m3_22 -> m3_23  [key=0, style=solid];
m3_24 -> m3_42  [key=0, style=solid];
m3_24 -> m3_44  [key=2, style=dotted];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label=double];
m3_26 -> m3_42  [key=0, style=solid];
m3_26 -> m3_44  [key=2, style=dotted];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_20  [key=2, style=dotted];
m3_28 -> m3_29  [key=0, style=solid];
m3_31 -> m3_32  [key=0, style=solid];
m3_37 -> m3_42  [key=0, style=solid];
m3_37 -> m3_44  [key=2, style=dotted];
m3_37 -> m3_38  [key=0, style=solid];
m3_21 -> m3_22  [key=0, style=solid];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_21  [key=0, style=bold, color=blue];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_9  [key=2, style=dotted];
m3_25 -> m3_10  [key=2, style=dotted];
m3_25 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_24  [key=0, style=bold, color=blue];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_28  [key=0, style=bold, color=blue];
m3_36 -> m3_37  [key=0, style=solid];
m3_38 -> m3_39  [key=0, style=solid];
m3_38 -> m3_40  [key=2, style=dotted];
m3_40 -> m3_41  [key=0, style=solid];
m3_29 -> m3_42  [key=0, style=solid];
m3_29 -> m3_45  [key=2, style=dotted];
m3_29 -> m3_44  [key=2, style=dotted];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_31  [key=2, style=dotted];
m3_39 -> m3_42  [key=0, style=solid];
m3_39 -> m3_37  [key=0, style=bold, color=blue];
m3_47 -> m3_48  [key=0, style=solid];
m3_47 -> m3_45  [key=0, style=bold, color=blue];
m3_48 -> m3_49  [key=0, style=solid, color=red];
m3_48 -> m3_52  [key=2, style=dotted];
m3_48 -> m3_48  [key=1, style=dashed, color=darkseagreen4, label=e];
m3_48 -> m3_59  [key=1, style=dashed, color=red, label=bySet];
m3_48 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_49 -> m3_50  [key=0, style=solid, color=red];
m3_49 -> m3_53  [key=2, style=dotted, color=red];
m3_49 -> m3_54  [key=2, style=dotted, color=red];
m3_49 -> m3_56  [key=1, style=dashed, color=red, label="lambda expression"];
m3_49 -> m3_9  [key=2, style=dotted];
m3_49 -> m3_10  [key=2, style=dotted];
m3_49 -> m3_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_55  [key=2, style=dotted];
m3_50 -> m3_36  [key=2, style=dotted];
m3_50 -> m3_12  [key=2, style=dotted];
m3_51 -> m3_47  [key=0, style=bold, color=blue];
m3_51 -> m3_48  [key=0, style=bold, color=blue];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_66  [key=2, style=dotted];
m3_60 -> m3_67  [key=2, style=dotted];
m3_60 -> m3_68  [key=2, style=dotted];
m3_60 -> m3_69  [key=2, style=dotted];
m3_60 -> m3_70  [key=2, style=dotted];
m3_60 -> m3_71  [key=2, style=dotted];
m3_60 -> m3_72  [key=2, style=dotted];
m3_61 -> m3_56  [key=0, style=bold, color=blue];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_63  [key=2, style=dotted];
m3_341 -> m3_9  [key=2, style=dotted];
m3_341 -> m3_10  [key=2, style=dotted];
m3_341 -> m3_342  [key=0, style=solid];
m3_341 -> m3_343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_352 -> m3_9  [key=2, style=dotted];
m3_352 -> m3_10  [key=2, style=dotted];
m3_352 -> m3_353  [key=0, style=solid];
m3_352 -> m3_354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_363 -> m3_9  [key=2, style=dotted];
m3_363 -> m3_10  [key=2, style=dotted];
m3_363 -> m3_364  [key=0, style=solid];
m3_363 -> m3_365  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_62 -> m3_60  [key=0, style=bold, color=blue];
m3_52 -> m3_53  [key=0, style=solid];
m3_80 -> m3_81  [key=0, style=solid];
m3_89 -> m3_90  [key=0, style=solid];
m3_97 -> m3_98  [key=0, style=solid];
m3_106 -> m3_107  [key=0, style=solid];
m3_116 -> m3_117  [key=0, style=solid];
m3_124 -> m3_125  [key=0, style=solid];
m3_132 -> m3_133  [key=0, style=solid];
m3_141 -> m3_142  [key=0, style=solid];
m3_148 -> m3_149  [key=0, style=solid];
m3_156 -> m3_157  [key=0, style=solid];
m3_164 -> m3_165  [key=0, style=solid];
m3_174 -> m3_175  [key=0, style=solid];
m3_177 -> m3_178  [key=0, style=solid];
m3_177 -> m3_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_177 -> m3_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_195 -> m3_196  [key=0, style=solid];
m3_205 -> m3_206  [key=0, style=solid];
m3_213 -> m3_214  [key=0, style=solid];
m3_222 -> m3_223  [key=0, style=solid];
m3_230 -> m3_231  [key=0, style=solid];
m3_239 -> m3_240  [key=0, style=solid];
m3_248 -> m3_249  [key=0, style=solid];
m3_256 -> m3_257  [key=0, style=solid];
m3_264 -> m3_265  [key=0, style=solid];
m3_272 -> m3_273  [key=0, style=solid];
m3_280 -> m3_281  [key=0, style=solid];
m3_288 -> m3_289  [key=0, style=solid];
m3_296 -> m3_297  [key=0, style=solid];
m3_304 -> m3_305  [key=0, style=solid];
m3_312 -> m3_313  [key=0, style=solid];
m3_322 -> m3_323  [key=0, style=solid];
m3_332 -> m3_333  [key=0, style=solid];
m3_340 -> m3_341  [key=0, style=solid];
m3_342 -> m3_340  [key=0, style=bold, color=blue];
m3_343 -> m3_344  [key=0, style=solid];
m3_351 -> m3_352  [key=0, style=solid];
m3_353 -> m3_351  [key=0, style=bold, color=blue];
m3_354 -> m3_355  [key=0, style=solid];
m3_362 -> m3_363  [key=0, style=solid];
m3_364 -> m3_362  [key=0, style=bold, color=blue];
m3_365 -> m3_366  [key=0, style=solid];
m3_375 -> m3_376  [key=0, style=solid];
m3_386 -> m3_387  [key=0, style=solid];
m3_396 -> m3_397  [key=0, style=solid];
m3_403 -> m3_404  [key=0, style=solid];
m3_412 -> m3_413  [key=0, style=solid];
m3_46 -> m3_6  [key=2, style=dotted];
m3_46 -> m3_47  [key=0, style=solid];
m3_54 -> m3_52  [key=0, style=bold, color=blue];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_55  [key=2, style=dotted];
m3_73 -> m3_71  [key=0, style=bold, color=blue];
m3_73 -> m3_59  [key=1, style=dashed, color=red, label=bySet];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_55  [key=2, style=dotted];
m3_82 -> m3_80  [key=0, style=bold, color=blue];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_83  [key=2, style=dotted];
m3_91 -> m3_89  [key=0, style=bold, color=blue];
m3_90 -> m3_63  [key=2, style=dotted];
m3_90 -> m3_91  [key=0, style=solid];
m3_99 -> m3_97  [key=0, style=bold, color=blue];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_100  [key=2, style=dotted];
m3_108 -> m3_106  [key=0, style=bold, color=blue];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_109  [key=2, style=dotted];
m3_118 -> m3_116  [key=0, style=bold, color=blue];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_109  [key=2, style=dotted];
m3_126 -> m3_124  [key=0, style=bold, color=blue];
m3_125 -> m3_126  [key=0, style=solid];
m3_125 -> m3_109  [key=2, style=dotted];
m3_134 -> m3_132  [key=0, style=bold, color=blue];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_109  [key=2, style=dotted];
m3_143 -> m3_141  [key=0, style=bold, color=blue];
m3_142 -> m3_140  [key=2, style=dotted];
m3_142 -> m3_143  [key=0, style=solid];
m3_150 -> m3_148  [key=0, style=bold, color=blue];
m3_149 -> m3_150  [key=0, style=solid];
m3_149 -> m3_151  [key=2, style=dotted];
m3_158 -> m3_156  [key=0, style=bold, color=blue];
m3_157 -> m3_158  [key=0, style=solid];
m3_157 -> m3_159  [key=2, style=dotted];
m3_166 -> m3_164  [key=0, style=bold, color=blue];
m3_165 -> m3_166  [key=0, style=solid];
m3_165 -> m3_159  [key=2, style=dotted];
m3_176 -> m3_174  [key=0, style=bold, color=blue];
m3_175 -> m3_140  [key=2, style=dotted];
m3_175 -> m3_176  [key=0, style=solid];
m3_179 -> m3_177  [key=0, style=bold, color=blue];
m3_178 -> m3_179  [key=0, style=solid];
m3_178 -> m3_180  [key=2, style=dotted];
m3_178 -> m3_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_182 -> m3_183  [key=0, style=solid];
m3_182 -> m3_184  [key=2, style=dotted];
m3_182 -> m3_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_186 -> m3_187  [key=0, style=solid];
m3_186 -> m3_188  [key=2, style=dotted];
m3_197 -> m3_195  [key=0, style=bold, color=blue];
m3_196 -> m3_197  [key=0, style=solid];
m3_196 -> m3_198  [key=2, style=dotted];
m3_207 -> m3_205  [key=0, style=bold, color=blue];
m3_206 -> m3_204  [key=2, style=dotted];
m3_206 -> m3_207  [key=0, style=solid];
m3_215 -> m3_213  [key=0, style=bold, color=blue];
m3_214 -> m3_204  [key=2, style=dotted];
m3_214 -> m3_215  [key=0, style=solid];
m3_224 -> m3_222  [key=0, style=bold, color=blue];
m3_223 -> m3_204  [key=2, style=dotted];
m3_223 -> m3_224  [key=0, style=solid];
m3_232 -> m3_230  [key=0, style=bold, color=blue];
m3_231 -> m3_232  [key=0, style=solid];
m3_231 -> m3_233  [key=2, style=dotted];
m3_241 -> m3_239  [key=0, style=bold, color=blue];
m3_240 -> m3_6  [key=2, style=dotted];
m3_240 -> m3_241  [key=0, style=solid];
m3_250 -> m3_248  [key=0, style=bold, color=blue];
m3_249 -> m3_6  [key=2, style=dotted];
m3_249 -> m3_250  [key=0, style=solid];
m3_258 -> m3_256  [key=0, style=bold, color=blue];
m3_257 -> m3_6  [key=2, style=dotted];
m3_257 -> m3_258  [key=0, style=solid];
m3_266 -> m3_264  [key=0, style=bold, color=blue];
m3_265 -> m3_6  [key=2, style=dotted];
m3_265 -> m3_266  [key=0, style=solid];
m3_274 -> m3_272  [key=0, style=bold, color=blue];
m3_273 -> m3_6  [key=2, style=dotted];
m3_273 -> m3_274  [key=0, style=solid];
m3_282 -> m3_280  [key=0, style=bold, color=blue];
m3_281 -> m3_282  [key=0, style=solid];
m3_281 -> m3_283  [key=2, style=dotted];
m3_290 -> m3_288  [key=0, style=bold, color=blue];
m3_289 -> m3_6  [key=2, style=dotted];
m3_289 -> m3_290  [key=0, style=solid];
m3_298 -> m3_296  [key=0, style=bold, color=blue];
m3_297 -> m3_298  [key=0, style=solid];
m3_297 -> m3_299  [key=2, style=dotted];
m3_306 -> m3_304  [key=0, style=bold, color=blue];
m3_305 -> m3_306  [key=0, style=solid];
m3_305 -> m3_307  [key=2, style=dotted];
m3_314 -> m3_312  [key=0, style=bold, color=blue];
m3_313 -> m3_314  [key=0, style=solid];
m3_313 -> m3_307  [key=2, style=dotted];
m3_324 -> m3_322  [key=0, style=bold, color=blue];
m3_323 -> m3_324  [key=0, style=solid];
m3_323 -> m3_325  [key=2, style=dotted];
m3_334 -> m3_332  [key=0, style=bold, color=blue];
m3_333 -> m3_334  [key=0, style=solid];
m3_333 -> m3_325  [key=2, style=dotted];
m3_345 -> m3_343  [key=0, style=bold, color=blue];
m3_344 -> m3_345  [key=0, style=solid];
m3_344 -> m3_346  [key=2, style=dotted];
m3_356 -> m3_354  [key=0, style=bold, color=blue];
m3_355 -> m3_356  [key=0, style=solid];
m3_355 -> m3_357  [key=2, style=dotted];
m3_367 -> m3_365  [key=0, style=bold, color=blue];
m3_366 -> m3_367  [key=0, style=solid];
m3_366 -> m3_368  [key=2, style=dotted];
m3_380 -> m3_381  [key=0, style=solid];
m3_379 -> m3_380  [key=0, style=solid];
m3_377 -> m3_375  [key=0, style=bold, color=blue];
m3_376 -> m3_377  [key=0, style=solid];
m3_376 -> m3_378  [key=2, style=dotted];
m3_390 -> m3_391  [key=0, style=solid];
m3_389 -> m3_390  [key=0, style=solid];
m3_388 -> m3_386  [key=0, style=bold, color=blue];
m3_387 -> m3_6  [key=2, style=dotted];
m3_387 -> m3_388  [key=0, style=solid];
m3_398 -> m3_396  [key=0, style=bold, color=blue];
m3_397 -> m3_398  [key=0, style=solid];
m3_397 -> m3_283  [key=2, style=dotted];
m3_405 -> m3_403  [key=0, style=bold, color=blue];
m3_404 -> m3_405  [key=0, style=solid];
m3_404 -> m3_406  [key=2, style=dotted];
m3_414 -> m3_412  [key=0, style=bold, color=blue];
m3_413 -> m3_6  [key=2, style=dotted];
m3_413 -> m3_414  [key=0, style=solid];
m3_181 -> m3_182  [key=0, style=solid];
m3_183 -> m3_181  [key=0, style=bold, color=blue];
m3_187 -> m3_185  [key=0, style=bold, color=blue];
m3_381 -> m3_379  [key=0, style=bold, color=blue];
m3_391 -> m3_389  [key=0, style=bold, color=blue];
m3_382 -> m3_383  [key=0, style=solid];
m3_382 -> m3_384  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_382 -> m3_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_383 -> m3_9  [key=2, style=dotted];
m3_383 -> m3_10  [key=2, style=dotted];
m3_383 -> m3_384  [key=0, style=solid];
m3_383 -> m3_386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_384 -> m3_385  [key=0, style=solid];
m3_384 -> m3_373  [key=2, style=dotted];
m3_384 -> m3_374  [key=2, style=dotted];
m3_384 -> m3_389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_385 -> m3_382  [key=0, style=bold, color=blue];
m3_119 -> m3_120  [key=0, style=solid];
m3_121 -> m3_9  [key=2, style=dotted];
m3_121 -> m3_10  [key=2, style=dotted];
m3_121 -> m3_122  [key=0, style=solid];
m3_121 -> m3_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_122 -> m3_36  [key=2, style=dotted];
m3_122 -> m3_12  [key=2, style=dotted];
m3_122 -> m3_123  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_120 -> m3_115  [key=2, style=dotted];
m3_120 -> m3_70  [key=2, style=dotted];
m3_123 -> m3_119  [key=0, style=bold, color=blue];
m3_275 -> m3_276  [key=0, style=solid];
m3_277 -> m3_9  [key=2, style=dotted];
m3_277 -> m3_10  [key=2, style=dotted];
m3_277 -> m3_278  [key=0, style=solid];
m3_277 -> m3_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_278 -> m3_36  [key=2, style=dotted];
m3_278 -> m3_12  [key=2, style=dotted];
m3_278 -> m3_279  [key=0, style=solid];
m3_276 -> m3_277  [key=0, style=solid];
m3_276 -> m3_278  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_276 -> m3_221  [key=2, style=dotted];
m3_279 -> m3_275  [key=0, style=bold, color=blue];
m3_234 -> m3_235  [key=0, style=solid];
m3_236 -> m3_9  [key=2, style=dotted];
m3_236 -> m3_10  [key=2, style=dotted];
m3_236 -> m3_237  [key=0, style=solid];
m3_236 -> m3_239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_237 -> m3_36  [key=2, style=dotted];
m3_237 -> m3_12  [key=2, style=dotted];
m3_237 -> m3_238  [key=0, style=solid];
m3_235 -> m3_236  [key=0, style=solid];
m3_235 -> m3_237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_235 -> m3_79  [key=2, style=dotted];
m3_235 -> m3_70  [key=2, style=dotted];
m3_238 -> m3_234  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_6  [key=2, style=dotted];
m3_1 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_2 -> m3_7  [key=2, style=dotted];
m3_2 -> m3_8  [key=2, style=dotted];
m3_225 -> m3_226  [key=0, style=solid];
m3_227 -> m3_9  [key=2, style=dotted];
m3_227 -> m3_10  [key=2, style=dotted];
m3_227 -> m3_228  [key=0, style=solid];
m3_227 -> m3_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_228 -> m3_36  [key=2, style=dotted];
m3_228 -> m3_12  [key=2, style=dotted];
m3_228 -> m3_229  [key=0, style=solid];
m3_226 -> m3_227  [key=0, style=solid];
m3_226 -> m3_228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_226 -> m3_221  [key=2, style=dotted];
m3_226 -> m3_70  [key=2, style=dotted];
m3_229 -> m3_225  [key=0, style=bold, color=blue];
m3_216 -> m3_217  [key=0, style=solid];
m3_218 -> m3_9  [key=2, style=dotted];
m3_218 -> m3_10  [key=2, style=dotted];
m3_218 -> m3_219  [key=0, style=solid];
m3_218 -> m3_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_219 -> m3_36  [key=2, style=dotted];
m3_219 -> m3_12  [key=2, style=dotted];
m3_219 -> m3_220  [key=0, style=solid];
m3_217 -> m3_218  [key=0, style=solid];
m3_217 -> m3_219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_217 -> m3_221  [key=2, style=dotted];
m3_217 -> m3_70  [key=2, style=dotted];
m3_220 -> m3_216  [key=0, style=bold, color=blue];
m3_127 -> m3_128  [key=0, style=solid];
m3_129 -> m3_9  [key=2, style=dotted];
m3_129 -> m3_10  [key=2, style=dotted];
m3_129 -> m3_130  [key=0, style=solid];
m3_129 -> m3_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_130 -> m3_36  [key=2, style=dotted];
m3_130 -> m3_12  [key=2, style=dotted];
m3_130 -> m3_131  [key=0, style=solid];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_128 -> m3_115  [key=2, style=dotted];
m3_128 -> m3_70  [key=2, style=dotted];
m3_131 -> m3_127  [key=0, style=bold, color=blue];
m3_392 -> m3_393  [key=0, style=solid];
m3_392 -> m3_394  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m3_393 -> m3_9  [key=2, style=dotted];
m3_393 -> m3_10  [key=2, style=dotted];
m3_393 -> m3_394  [key=0, style=solid];
m3_393 -> m3_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_394 -> m3_395  [key=0, style=solid];
m3_394 -> m3_105  [key=2, style=dotted];
m3_395 -> m3_392  [key=0, style=bold, color=blue];
m3_84 -> m3_85  [key=0, style=solid];
m3_86 -> m3_9  [key=2, style=dotted];
m3_86 -> m3_10  [key=2, style=dotted];
m3_86 -> m3_87  [key=0, style=solid];
m3_86 -> m3_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_87 -> m3_36  [key=2, style=dotted];
m3_87 -> m3_12  [key=2, style=dotted];
m3_87 -> m3_88  [key=0, style=solid];
m3_85 -> m3_86  [key=0, style=solid];
m3_85 -> m3_87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_85 -> m3_79  [key=2, style=dotted];
m3_85 -> m3_70  [key=2, style=dotted];
m3_88 -> m3_84  [key=0, style=bold, color=blue];
m3_64 -> m3_65  [key=0, style=solid];
m3_66 -> m3_9  [key=2, style=dotted];
m3_66 -> m3_10  [key=2, style=dotted];
m3_66 -> m3_67  [key=0, style=solid];
m3_66 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_65 -> m3_69  [key=2, style=dotted];
m3_65 -> m3_70  [key=2, style=dotted];
m3_68 -> m3_64  [key=0, style=bold, color=blue];
m3_135 -> m3_136  [key=0, style=solid];
m3_137 -> m3_9  [key=2, style=dotted];
m3_137 -> m3_10  [key=2, style=dotted];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_136 -> m3_137  [key=0, style=solid];
m3_136 -> m3_140  [key=2, style=dotted];
m3_136 -> m3_138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_138 -> m3_139  [key=0, style=solid];
m3_138 -> m3_105  [key=2, style=dotted];
m3_139 -> m3_135  [key=0, style=bold, color=blue];
m3_326 -> m3_327  [key=0, style=solid];
m3_326 -> m3_329  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_326 -> m3_330  [key=1, style=dashed, color=darkseagreen4, label=bool];
m3_327 -> m3_9  [key=2, style=dotted];
m3_327 -> m3_10  [key=2, style=dotted];
m3_327 -> m3_328  [key=0, style=solid];
m3_327 -> m3_332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_327 -> m3_329  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_327 -> m3_330  [key=1, style=dashed, color=darkseagreen4, label=result];
m3_328 -> m3_329  [key=0, style=solid];
m3_328 -> m3_330  [key=0, style=solid];
m3_329 -> m3_330  [key=0, style=solid];
m3_329 -> m3_105  [key=2, style=dotted];
m3_330 -> m3_331  [key=0, style=solid];
m3_330 -> m3_321  [key=2, style=dotted];
m3_330 -> m3_105  [key=2, style=dotted];
m3_331 -> m3_326  [key=0, style=bold, color=blue];
m3_407 -> m3_408  [key=0, style=solid];
m3_409 -> m3_9  [key=2, style=dotted];
m3_409 -> m3_10  [key=2, style=dotted];
m3_409 -> m3_410  [key=0, style=solid];
m3_409 -> m3_412  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_408 -> m3_409  [key=0, style=solid];
m3_408 -> m3_6  [key=2, style=dotted];
m3_408 -> m3_410  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_410 -> m3_411  [key=0, style=solid];
m3_410 -> m3_105  [key=2, style=dotted];
m3_411 -> m3_407  [key=0, style=bold, color=blue];
m3_160 -> m3_161  [key=0, style=solid];
m3_160 -> m3_162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_161 -> m3_9  [key=2, style=dotted];
m3_161 -> m3_10  [key=2, style=dotted];
m3_161 -> m3_162  [key=0, style=solid];
m3_161 -> m3_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_162 -> m3_163  [key=0, style=solid];
m3_162 -> m3_105  [key=2, style=dotted];
m3_163 -> m3_160  [key=0, style=bold, color=blue];
m3_300 -> m3_301  [key=0, style=solid];
m3_300 -> m3_302  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m3_301 -> m3_9  [key=2, style=dotted];
m3_301 -> m3_10  [key=2, style=dotted];
m3_301 -> m3_302  [key=0, style=solid];
m3_301 -> m3_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_302 -> m3_303  [key=0, style=solid];
m3_302 -> m3_105  [key=2, style=dotted];
m3_303 -> m3_300  [key=0, style=bold, color=blue];
m3_242 -> m3_243  [key=0, style=solid];
m3_244 -> m3_9  [key=2, style=dotted];
m3_244 -> m3_10  [key=2, style=dotted];
m3_244 -> m3_245  [key=0, style=solid];
m3_244 -> m3_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_245 -> m3_36  [key=2, style=dotted];
m3_245 -> m3_12  [key=2, style=dotted];
m3_245 -> m3_246  [key=0, style=solid];
m3_243 -> m3_244  [key=0, style=solid];
m3_243 -> m3_245  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_243 -> m3_247  [key=2, style=dotted];
m3_246 -> m3_242  [key=0, style=bold, color=blue];
m3_208 -> m3_209  [key=0, style=solid];
m3_210 -> m3_9  [key=2, style=dotted];
m3_210 -> m3_10  [key=2, style=dotted];
m3_210 -> m3_211  [key=0, style=solid];
m3_210 -> m3_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_209 -> m3_210  [key=0, style=solid];
m3_209 -> m3_204  [key=2, style=dotted];
m3_209 -> m3_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_211 -> m3_212  [key=0, style=solid];
m3_211 -> m3_105  [key=2, style=dotted];
m3_212 -> m3_208  [key=0, style=bold, color=blue];
m3_291 -> m3_292  [key=0, style=solid];
m3_293 -> m3_9  [key=2, style=dotted];
m3_293 -> m3_10  [key=2, style=dotted];
m3_293 -> m3_294  [key=0, style=solid];
m3_293 -> m3_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_294 -> m3_36  [key=2, style=dotted];
m3_294 -> m3_12  [key=2, style=dotted];
m3_294 -> m3_295  [key=0, style=solid];
m3_292 -> m3_293  [key=0, style=solid];
m3_292 -> m3_294  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_292 -> m3_79  [key=2, style=dotted];
m3_295 -> m3_291  [key=0, style=bold, color=blue];
m3_101 -> m3_102  [key=0, style=solid];
m3_101 -> m3_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m3_102 -> m3_9  [key=2, style=dotted];
m3_102 -> m3_10  [key=2, style=dotted];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_103 -> m3_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_105  [key=2, style=dotted];
m3_104 -> m3_101  [key=0, style=bold, color=blue];
m3_415 -> m3_416  [key=0, style=solid];
m3_415 -> m3_417  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
m3_416 -> m3_10  [key=2, style=dotted];
m3_416 -> m3_417  [key=0, style=solid];
m3_416 -> m3_419  [key=2, style=dotted];
m3_417 -> m3_418  [key=0, style=solid];
m3_417 -> m3_105  [key=2, style=dotted];
m3_418 -> m3_415  [key=0, style=bold, color=blue];
m3_284 -> m3_285  [key=0, style=solid];
m3_284 -> m3_286  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_285 -> m3_9  [key=2, style=dotted];
m3_285 -> m3_10  [key=2, style=dotted];
m3_285 -> m3_286  [key=0, style=solid];
m3_285 -> m3_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_286 -> m3_287  [key=0, style=solid];
m3_286 -> m3_105  [key=2, style=dotted];
m3_287 -> m3_284  [key=0, style=bold, color=blue];
m3_199 -> m3_200  [key=0, style=solid];
m3_201 -> m3_9  [key=2, style=dotted];
m3_201 -> m3_10  [key=2, style=dotted];
m3_201 -> m3_202  [key=0, style=solid];
m3_201 -> m3_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_200 -> m3_201  [key=0, style=solid];
m3_200 -> m3_204  [key=2, style=dotted];
m3_200 -> m3_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_202 -> m3_203  [key=0, style=solid];
m3_202 -> m3_105  [key=2, style=dotted];
m3_203 -> m3_199  [key=0, style=bold, color=blue];
m3_189 -> m3_190  [key=0, style=solid];
m3_191 -> m3_9  [key=2, style=dotted];
m3_191 -> m3_10  [key=2, style=dotted];
m3_191 -> m3_192  [key=0, style=solid];
m3_191 -> m3_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_192 -> m3_36  [key=2, style=dotted];
m3_192 -> m3_12  [key=2, style=dotted];
m3_192 -> m3_193  [key=0, style=solid];
m3_190 -> m3_191  [key=0, style=solid];
m3_190 -> m3_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m3_190 -> m3_194  [key=2, style=dotted];
m3_190 -> m3_70  [key=2, style=dotted];
m3_193 -> m3_189  [key=0, style=bold, color=blue];
m3_420 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m3_421 -> m3_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_421 -> m3_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m3_422 -> m3_380  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_423 -> m3_390  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<int>"];
m4_0 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<CommandLine.Core.TypeDescriptor>"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_16 -> m4_17  [key=0, style=solid, color=green];
m4_17 -> m4_18  [key=0, style=solid, color=green];
m4_18 -> m4_16  [key=0, style=bold, color=blue];
m4_12 -> m4_13  [key=0, style=solid, color=green];
m4_12 -> m4_5  [key=3, color=green, style=bold, label="method methodReturn CommandLine.Core.TypeDescriptor WithNextValue"];
m4_13 -> m4_14  [key=0, style=solid, color=green];
m4_13 -> m4_15  [key=2, style=dotted, color=green];
m4_13 -> m4_5  [key=2, style=dotted, color=green];
m4_13 -> m4_13  [key=1, style=dashed, color=green, label="CommandLine.Core.TypeDescriptor"];
m4_13 -> m4_16  [key=1, style=dashed, color=green, label="lambda expression"];
m4_14 -> m4_12  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TargetType"];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=0, style=solid];
m4_6 -> m4_1  [key=3, color=darkorchid, style=bold, label="Parameter variable System.StringComparer nameComparer"];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_0  [key=2, style=dotted];
m4_8 -> m4_11  [key=2, style=dotted];
m4_7 -> m4_9  [key=0, style=solid];
m4_7 -> m4_10  [key=2, style=dotted];
m4_9 -> m4_5  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_4  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_6  [key=2, style=dotted];
m5_2 -> m5_7  [key=2, style=dotted];
m5_2 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_2 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_2 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_3 -> m5_0  [key=0, style=bold, color=blue];
m5_4 -> m5_17  [key=0, style=solid];
m5_4 -> m5_18  [key=0, style=bold, color=crimson];
m5_4 -> m5_22  [key=0, style=bold, color=crimson];
m5_4 -> m5_23  [key=0, style=bold, color=crimson];
m5_4 -> m5_26  [key=0, style=bold, color=crimson];
m5_4 -> m5_27  [key=0, style=bold, color=crimson];
m5_4 -> m5_28  [key=0, style=bold, color=crimson];
m5_4 -> m5_30  [key=0, style=bold, color=crimson];
m5_4 -> m5_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m5_4 -> m5_20  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<string>"];
m5_4 -> m5_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m5_4 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m5_4 -> m5_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_19  [key=0, style=solid];
m5_17 -> m5_32  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_38  [key=2, style=dotted];
m5_22 -> m5_39  [key=2, style=dotted];
m5_23 -> m5_24  [key=0, style=solid];
m5_26 -> m5_27  [key=0, style=solid];
m5_26 -> m5_46  [key=2, style=dotted];
m5_26 -> m5_47  [key=2, style=dotted];
m5_26 -> m5_39  [key=2, style=dotted];
m5_27 -> m5_28  [key=0, style=solid];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_48  [key=2, style=dotted];
m5_28 -> m5_49  [key=2, style=dotted];
m5_28 -> m5_47  [key=2, style=dotted];
m5_28 -> m5_39  [key=2, style=dotted];
m5_28 -> m5_36  [key=2, style=dotted];
m5_28 -> m5_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_30 -> m5_29  [key=0, style=solid];
m5_19 -> m5_20  [key=0, style=solid, color=red];
m5_19 -> m5_33  [key=2, style=dotted];
m5_19 -> m5_22  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_19 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_19 -> m5_26  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_19 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_19 -> m5_58  [key=1, style=dashed, color=darkseagreen4, label=pt];
m5_20 -> m5_21  [key=0, style=solid, color=red];
m5_20 -> m5_34  [key=2, style=dotted, color=red];
m5_20 -> m5_35  [key=2, style=dotted, color=red];
m5_20 -> m5_36  [key=2, style=dotted, color=red];
m5_20 -> m5_37  [key=2, style=dotted, color=red];
m5_20 -> m5_50  [key=1, style=dashed, color=red, label="lambda expression"];
m5_20 -> m5_25  [key=1, style=dashed, color=red, label=taken];
m5_20 -> m5_28  [key=1, style=dashed, color=red, label=taken];
m5_20 -> m5_29  [key=1, style=dashed, color=red, label=taken];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_40  [key=2, style=dotted];
m5_24 -> m5_41  [key=2, style=dotted];
m5_24 -> m5_42  [key=2, style=dotted];
m5_24 -> m5_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_28  [key=0, style=solid];
m5_25 -> m5_43  [key=2, style=dotted];
m5_25 -> m5_44  [key=2, style=dotted];
m5_25 -> m5_35  [key=2, style=dotted];
m5_25 -> m5_40  [key=2, style=dotted];
m5_25 -> m5_45  [key=2, style=dotted];
m5_29 -> m5_30  [key=0, style=solid];
m5_29 -> m5_31  [key=0, style=solid];
m5_29 -> m5_40  [key=2, style=dotted];
m5_29 -> m5_35  [key=2, style=dotted];
m5_29 -> m5_4  [key=2, style=dotted];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_24  [key=0, style=solid];
m5_21 -> m5_32  [key=2, style=dotted];
m5_31 -> m5_4  [key=0, style=bold, color=blue];
m5_57 -> m5_58  [key=0, style=solid];
m5_8 -> m5_9  [key=0, style=solid];
m5_11 -> m5_12  [key=0, style=solid];
m5_14 -> m5_15  [key=0, style=solid];
m5_9 -> m5_10  [key=0, style=solid];
m5_10 -> m5_8  [key=0, style=bold, color=blue];
m5_12 -> m5_13  [key=0, style=solid];
m5_13 -> m5_11  [key=0, style=bold, color=blue];
m5_15 -> m5_16  [key=0, style=solid];
m5_16 -> m5_14  [key=0, style=bold, color=blue];
m5_58 -> m5_59  [key=0, style=solid];
m5_58 -> m5_47  [key=2, style=dotted];
m5_58 -> m5_60  [key=2, style=dotted];
m5_58 -> m5_61  [key=2, style=dotted];
m5_58 -> m5_39  [key=2, style=dotted];
m5_50 -> m5_51  [key=0, style=solid, color=red];
m5_53 -> m5_54  [key=0, style=solid];
m5_51 -> m5_52  [key=0, style=solid, color=red];
m5_52 -> m5_50  [key=0, style=bold, color=blue];
m5_54 -> m5_55  [key=0, style=solid];
m5_54 -> m5_56  [key=2, style=dotted];
m5_55 -> m5_53  [key=0, style=bold, color=blue];
m5_59 -> m5_57  [key=0, style=bold, color=blue];
m5_72 -> m5_73  [key=0, style=solid];
m5_73 -> m5_74  [key=0, style=solid];
m5_73 -> m5_43  [key=2, style=dotted];
m5_73 -> m5_46  [key=2, style=dotted];
m5_73 -> m5_47  [key=2, style=dotted];
m5_73 -> m5_61  [key=2, style=dotted];
m5_74 -> m5_72  [key=0, style=bold, color=blue];
m5_62 -> m5_63  [key=0, style=solid];
m5_62 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m5_62 -> m5_68  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m5_63 -> m5_64  [key=0, style=solid];
m5_63 -> m5_66  [key=0, style=solid];
m5_67 -> m5_68  [key=0, style=solid];
m5_67 -> m5_69  [key=0, style=solid];
m5_67 -> m5_43  [key=2, style=dotted];
m5_68 -> m5_70  [key=0, style=solid];
m5_68 -> m5_71  [key=2, style=dotted];
m5_68 -> m5_47  [key=2, style=dotted];
m5_64 -> m5_65  [key=0, style=solid];
m5_66 -> m5_67  [key=0, style=solid];
m5_65 -> m5_70  [key=0, style=solid];
m5_65 -> m5_47  [key=2, style=dotted];
m5_69 -> m5_70  [key=0, style=solid];
m5_69 -> m5_61  [key=2, style=dotted];
m5_70 -> m5_62  [key=0, style=bold, color=blue];
m5_75 -> m5_58  [key=1, style=dashed, color=darkseagreen4, label=pt];
}
