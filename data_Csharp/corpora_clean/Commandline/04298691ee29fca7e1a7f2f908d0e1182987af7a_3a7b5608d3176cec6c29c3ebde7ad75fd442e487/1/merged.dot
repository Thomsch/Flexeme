digraph  {
n8 [label="CommandLine.Demo.Program.Options", span=""];
n0 [label="Entry CommandLine.Demo.Program.Options.GetUsage()", span="91-91", cluster="CommandLine.Demo.Program.Options.GetUsage()"];
n1 [label="return HelpText.AutoBuild(this, (HelpText current) => HelpText.DefaultParsingErrorsHandler(this, current));", span="93-93", cluster="CommandLine.Demo.Program.Options.GetUsage()"];
n2 [label="Exit CommandLine.Demo.Program.Options.GetUsage()", span="91-91", cluster="CommandLine.Demo.Program.Options.GetUsage()"];
n3 [label="Entry CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.HandleParsingErrorsDelegate, bool)", span="215-215", cluster="CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.HandleParsingErrorsDelegate, bool)"];
n4 [label="Entry lambda expression", span="93-93", cluster="lambda expression"];
n5 [label="HelpText.DefaultParsingErrorsHandler(this, current)", span="93-93", cluster="lambda expression"];
n6 [label="Exit lambda expression", span="93-93", cluster="lambda expression"];
n7 [label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)", span="254-254", cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)"];
d67 [label="var expandedTokens = tokens.Value.Pairwise<Token, IEnumerable<Token>>(\r\n                (f, s) =>\r\n                    {\r\n                        string separator;\r\n                        if (f.IsName() && optionSequenceWithSeparatorLookup(f.Text).MatchJust(out separator))\r\n                        {\r\n                            var parts = s.Text.Split(Convert.ToChar(separator));\r\n                            return new[] { f }.Concat(parts.Select(str => Token.Value(str)));\r\n                        }\r\n                        return new[] { f, s };\r\n                    })", span="59-69", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", color=green, community=0];
d62 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", span="48-48", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)"];
d65 [label="tokens.Errors.Any() || tokens.Value.Count() == 1", span="54-54", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)"];
d68 [label="return StatePair.Create(expandedTokens.SelectMany(x => x), tokens.Errors);", span="71-71", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)"];
d72 [label="Entry Unk.>", span="", cluster="Unk.>"];
d75 [label="Entry lambda expression", span="60-69", cluster="lambda expression"];
d76 [label="string separator", span="62-62", cluster="lambda expression", color=green, community=0];
d77 [label="f.IsName() && optionSequenceWithSeparatorLookup(f.Text).MatchJust(out separator)", span="63-63", cluster="lambda expression"];
d69 [label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)", span="48-48", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)"];
d63 [label="tokens == null", span="52-52", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)"];
d66 [label="return tokens;", span="56-56", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)"];
d70 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
d71 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
d73 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)"];
d74 [label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61", cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d89 [label="Entry lambda expression", span="71-71", cluster="lambda expression"];
d81 [label="Exit lambda expression", span="60-69", cluster="lambda expression"];
d78 [label="var parts = s.Text.Split(Convert.ToChar(separator))", span="65-65", cluster="lambda expression"];
d79 [label="return new[] { f }.Concat(parts.Select(str => Token.Value(str)));", span="66-66", cluster="lambda expression"];
d80 [label="return new[] { f, s };", span="68-68", cluster="lambda expression"];
d140 [label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>", span=""];
d82 [label="Entry CommandLine.Core.Token.IsName()", span="72-72", cluster="CommandLine.Core.Token.IsName()"];
d41 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
d83 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)"];
d64 [label="throw new ArgumentNullException(''tokens'');", span="52-52", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<string>>)"];
d111 [label="yield return Token.Value(text.Substring(seen.Count()));", span="119-119", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d110 [label="seen.Count() < text.Length", span="117-117", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d91 [label="Exit lambda expression", span="71-71", cluster="lambda expression"];
d90 [label=x, span="71-71", cluster="lambda expression"];
d84 [label="Entry System.Convert.ToChar(string)", span="0-0", cluster="System.Convert.ToChar(string)"];
d85 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])"];
d44 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d20 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
d86 [label="Entry lambda expression", span="66-66", cluster="lambda expression"];
d34 [label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="41-41", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d37 [label="return tokenizer(arguments);", span="45-45", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d107 [label="!seen.Contains(c) && nameLookup(n)", span="107-107", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d9 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
d14 [label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="74-74", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d95 [label="var text = value.Substring(1)", span="85-85", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d104 [label="var seen = new List<char> { first[0] }", span="102-102", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d112 [label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="74-74", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d113 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)"];
d12 [label="Entry CommandLine.Core.Token.Value(string)", span="26-26", cluster="CommandLine.Core.Token.Value(string)"];
d105 [label="text.Substring(1)", span="104-104", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d130 [label="var parts = text.Split('=')", span="147-147", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d35 [label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(t => Token.Value(t))", span="42-42", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d7 [label="return StatePair.Create(tokens.Where(x=>!unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d60 [label="tokens.Concat(values)", span="43-43", cluster="lambda expression"];
d88 [label="Exit lambda expression", span="66-66", cluster="lambda expression"];
d87 [label="Token.Value(str)", span="66-66", cluster="lambda expression"];
d30 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d33 [label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="39-39", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)"];
d50 [label="Entry lambda expression", span="41-41", cluster="lambda expression"];
d36 [label="return tokenizerResult.MapValue(tokens => tokens.Concat(values));", span="43-43", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d38 [label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d106 [label="var n = new string(c, 1)", span="106-106", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d108 [label="seen.Add(c)", span="109-109", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d118 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)"];
d2 [label="throw new ArgumentNullException(''arguments'');", span="15-15", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d32 [label="throw new ArgumentNullException(''arguments'');", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d93 [label="throw new ArgumentNullException(''value'');", span="80-80", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d120 [label="throw new ArgumentNullException(''value'');", span="130-130", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d5 [label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new Token[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token).ToList()", span="20-26", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d92 [label="value == null", span="78-78", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d97 [label="yield return Token.Value(value);", span="89-89", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d98 [label="yield break;", span="90-90", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d100 [label="yield return Token.Name(text);", span="95-95", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d101 [label="yield break;", span="96-96", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d103 [label="yield return Token.Name(first);", span="100-100", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d109 [label="yield return Token.Name(n);", span="110-110", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d94 [label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="83-83", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d99 [label="value.Length == 2", span="93-93", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d96 [label="char.IsDigit(text[0])", span="87-87", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d102 [label="var first = text.Substring(0, 1)", span="99-99", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)"];
d10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
d122 [label="var text = value.Substring(2)", span="135-135", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d57 [label="Token.Value(t)", span="42-42", cluster="lambda expression"];
d132 [label="yield return Token.Value(parts[1]);", span="149-149", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d129 [label="yield break;", span="145-145", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d127 [label="equalIndex == 1", span="142-142", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d131 [label="yield return Token.Name(parts[0]);", span="148-148", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d42 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)"];
d43 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)"];
d53 [label="Entry lambda expression", span="42-42", cluster="lambda expression"];
d56 [label="Entry lambda expression", span="42-42", cluster="lambda expression"];
d6 [label="var unkTokens = (from t in tokens where t.IsName() && !nameLookup(t.Text) select t).ToList()", span="28-28", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d3 [label="var errors = new List<Error>()", span="17-17", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d8 [label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d18 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
d19 [label="Entry UnknownOptionError.cstr", span="", cluster="UnknownOptionError.cstr"];
d21 [label="Entry Unk.Create", span="", cluster="Unk.Create"];
d26 [label="Entry lambda expression", span="30-30", cluster="lambda expression"];
d139 [label=values, span=""];
d59 [label="Entry lambda expression", span="43-43", cluster="lambda expression"];
d61 [label="Exit lambda expression", span="43-43", cluster="lambda expression"];
d31 [label="arguments == null", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d39 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
d46 [label="Entry lambda expression", span="39-39", cluster="lambda expression"];
d52 [label="Exit lambda expression", span="41-41", cluster="lambda expression"];
d51 [label="!arg.EqualsOrdinal(''--'')", span="41-41", cluster="lambda expression"];
d45 [label="Entry CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", span="69-69", cluster="CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)"];
d117 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)"];
d25 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
d1 [label="arguments == null", span="15-15", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d119 [label="value == null", span="128-128", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d133 [label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="124-124", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d0 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d4 [label="Action<Error> onError = e => errors.Add(e)", span="18-18", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d11 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)"];
d13 [label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="124-124", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d15 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
d115 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)"];
d114 [label="Entry char.IsDigit(char)", span="0-0", cluster="char.IsDigit(char)"];
d116 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)"];
d121 [label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="133-133", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d123 [label="var equalIndex = text.IndexOf('=')", span="136-136", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d125 [label="yield return Token.Name(text);", span="139-139", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d58 [label="Exit lambda expression", span="42-42", cluster="lambda expression"];
d128 [label="onError(new BadFormatTokenError(value))", span="144-144", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d126 [label="yield break;", span="140-140", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d124 [label="equalIndex <= 0", span="137-137", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)"];
d55 [label="Exit lambda expression", span="42-42", cluster="lambda expression"];
d54 [label="!arg.EqualsOrdinal(''--'')", span="42-42", cluster="lambda expression"];
d16 [label="Entry Unk.IsName", span="", cluster="Unk.IsName"];
d17 [label="Entry Unk.nameLookup", span="", cluster="Unk.nameLookup"];
d27 [label="!unkTokens.Contains(x)", span="30-30", cluster="lambda expression"];
d23 [label="errors.Add(e)", span="18-18", cluster="lambda expression"];
d28 [label="Exit lambda expression", span="30-30", cluster="lambda expression"];
d48 [label="Exit lambda expression", span="39-39", cluster="lambda expression"];
d47 [label="arg.EqualsOrdinal(''--'')", span="39-39", cluster="lambda expression"];
d49 [label="Entry string.EqualsOrdinal(string)", span="34-34", cluster="string.EqualsOrdinal(string)"];
d134 [label="Entry string.IndexOf(char)", span="0-0", cluster="string.IndexOf(char)"];
d135 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)"];
d136 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
d138 [label=unkTokens, span=""];
d29 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
d137 [label=errors, span=""];
d22 [label="Entry lambda expression", span="18-18", cluster="lambda expression"];
d24 [label="Exit lambda expression", span="18-18", cluster="lambda expression"];
n8 -> n1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Demo.Program.Options"];
n8 -> n5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Demo.Program.Options"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n6 -> n4  [key=0, style=bold, color=blue];
d67 -> d68  [key=0, style=solid, color=green];
d67 -> d72  [key=2, style=dotted, color=green];
d67 -> d75  [key=1, style=dashed, color=green, label="lambda expression"];
d62 -> d67  [key=1, style=dashed, color=green, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
d62 -> d63  [key=0, style=solid];
d62 -> d65  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
d62 -> d66  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
d62 -> d77  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>"];
d62 -> d68  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
d65 -> d67  [key=0, style=solid, color=green];
d65 -> d66  [key=0, style=solid];
d65 -> d70  [key=2, style=dotted];
d65 -> d71  [key=2, style=dotted];
d68 -> d69  [key=0, style=solid];
d68 -> d73  [key=2, style=dotted];
d68 -> d74  [key=2, style=dotted];
d68 -> d89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d75 -> d76  [key=0, style=solid, color=green];
d75 -> d77  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
d75 -> d78  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
d75 -> d79  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
d75 -> d80  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
d76 -> d77  [key=0, style=solid, color=green];
d77 -> d78  [key=0, style=solid];
d77 -> d80  [key=0, style=solid];
d77 -> d82  [key=2, style=dotted];
d77 -> d41  [key=2, style=dotted];
d77 -> d83  [key=2, style=dotted];
d69 -> d62  [key=0, style=bold, color=blue];
d63 -> d65  [key=0, style=solid];
d63 -> d64  [key=0, style=solid];
d66 -> d69  [key=0, style=solid];
d89 -> d90  [key=0, style=solid];
d81 -> d75  [key=0, style=bold, color=blue];
d78 -> d79  [key=0, style=solid];
d78 -> d84  [key=2, style=dotted];
d78 -> d85  [key=2, style=dotted];
d79 -> d81  [key=0, style=solid];
d79 -> d44  [key=2, style=dotted];
d79 -> d20  [key=2, style=dotted];
d79 -> d86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d80 -> d81  [key=0, style=solid];
d140 -> d77  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>"];
d64 -> d69  [key=0, style=solid];
d64 -> d9  [key=2, style=dotted];
d111 -> d71  [key=2, style=dotted];
d111 -> d112  [key=0, style=solid];
d111 -> d113  [key=2, style=dotted];
d111 -> d12  [key=2, style=dotted];
d110 -> d71  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d110 -> d112  [key=0, style=solid];
d91 -> d89  [key=0, style=bold, color=blue];
d90 -> d91  [key=0, style=solid];
d86 -> d87  [key=0, style=solid];
d34 -> d41  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d34 -> d40  [key=2, style=dotted];
d34 -> d50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d34 -> d36  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
d37 -> d41  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d107 -> d41  [key=2, style=dotted];
d107 -> d110  [key=0, style=solid];
d107 -> d108  [key=0, style=solid];
d107 -> d118  [key=2, style=dotted];
d14 -> d111  [key=0, style=bold, color=crimson];
d14 -> d107  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
d14 -> d92  [key=0, style=solid];
d14 -> d97  [key=0, style=bold, color=crimson];
d14 -> d98  [key=0, style=bold, color=crimson];
d14 -> d100  [key=0, style=bold, color=crimson];
d14 -> d101  [key=0, style=bold, color=crimson];
d14 -> d103  [key=0, style=bold, color=crimson];
d14 -> d109  [key=0, style=bold, color=crimson];
d14 -> d94  [key=1, style=dashed, color=darkseagreen4, label=string];
d14 -> d95  [key=1, style=dashed, color=darkseagreen4, label=string];
d14 -> d99  [key=1, style=dashed, color=darkseagreen4, label=string];
d95 -> d111  [key=1, style=dashed, color=darkseagreen4, label=text];
d95 -> d110  [key=1, style=dashed, color=darkseagreen4, label=text];
d95 -> d96  [key=0, style=solid];
d95 -> d113  [key=2, style=dotted];
d95 -> d100  [key=1, style=dashed, color=darkseagreen4, label=text];
d95 -> d102  [key=1, style=dashed, color=darkseagreen4, label=text];
d95 -> d105  [key=1, style=dashed, color=darkseagreen4, label=text];
d104 -> d111  [key=1, style=dashed, color=darkseagreen4, label=seen];
d104 -> d110  [key=1, style=dashed, color=darkseagreen4, label=seen];
d104 -> d107  [key=1, style=dashed, color=darkseagreen4, label=seen];
d104 -> d105  [key=0, style=solid];
d104 -> d10  [key=2, style=dotted];
d104 -> d108  [key=1, style=dashed, color=darkseagreen4, label=seen];
d112 -> d14  [key=0, style=bold, color=blue];
d105 -> d110  [key=0, style=solid];
d105 -> d107  [key=1, style=dashed, color=darkseagreen4, label=c];
d105 -> d113  [key=2, style=dotted];
d105 -> d106  [key=0, style=solid];
d105 -> d108  [key=1, style=dashed, color=darkseagreen4, label=c];
d130 -> d85  [key=2, style=dotted];
d130 -> d131  [key=0, style=solid];
d130 -> d132  [key=1, style=dashed, color=darkseagreen4, label=parts];
d35 -> d44  [key=2, style=dotted];
d35 -> d36  [key=0, style=solid];
d35 -> d42  [key=2, style=dotted];
d35 -> d43  [key=2, style=dotted];
d35 -> d53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d35 -> d56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d35 -> d60  [key=1, style=dashed, color=darkseagreen4, label=values];
d7 -> d20  [key=2, style=dotted];
d7 -> d7  [key=1, style=dashed, color=darkseagreen4, label=t];
d7 -> d8  [key=0, style=solid];
d7 -> d18  [key=2, style=dotted];
d7 -> d19  [key=2, style=dotted];
d7 -> d21  [key=2, style=dotted];
d7 -> d26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d60 -> d20  [key=2, style=dotted];
d60 -> d61  [key=0, style=solid];
d88 -> d86  [key=0, style=bold, color=blue];
d87 -> d12  [key=2, style=dotted];
d87 -> d88  [key=0, style=solid];
d30 -> d34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d30 -> d37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d30 -> d35  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d30 -> d31  [key=0, style=solid];
d30 -> d33  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d33 -> d34  [key=0, style=solid];
d33 -> d37  [key=0, style=solid];
d33 -> d39  [key=2, style=dotted];
d33 -> d46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d50 -> d51  [key=0, style=solid];
d36 -> d38  [key=0, style=solid];
d36 -> d45  [key=2, style=dotted];
d36 -> d59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d30  [key=0, style=bold, color=blue];
d106 -> d107  [key=0, style=solid];
d106 -> d117  [key=2, style=dotted];
d106 -> d109  [key=1, style=dashed, color=darkseagreen4, label=n];
d108 -> d109  [key=0, style=solid];
d108 -> d25  [key=2, style=dotted];
d2 -> d9  [key=2, style=dotted];
d2 -> d8  [key=0, style=solid];
d32 -> d9  [key=2, style=dotted];
d32 -> d38  [key=0, style=solid];
d93 -> d9  [key=2, style=dotted];
d93 -> d112  [key=0, style=solid];
d120 -> d9  [key=2, style=dotted];
d120 -> d133  [key=0, style=solid];
d5 -> d14  [key=2, style=dotted];
d5 -> d12  [key=2, style=dotted];
d5 -> d7  [key=1, style=dashed, color=darkseagreen4, label=tokens];
d5 -> d5  [key=1, style=dashed, color=darkseagreen4, label=arg];
d5 -> d6  [key=0, style=solid];
d5 -> d11  [key=2, style=dotted];
d5 -> d13  [key=2, style=dotted];
d5 -> d15  [key=2, style=dotted];
d92 -> d93  [key=0, style=solid];
d92 -> d94  [key=0, style=solid];
d97 -> d12  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d98 -> d99  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d100 -> d115  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d103 -> d104  [key=0, style=solid];
d103 -> d115  [key=2, style=dotted];
d109 -> d105  [key=0, style=solid];
d109 -> d115  [key=2, style=dotted];
d94 -> d95  [key=0, style=solid];
d94 -> d112  [key=0, style=solid];
d99 -> d100  [key=0, style=solid];
d99 -> d102  [key=0, style=solid];
d96 -> d97  [key=0, style=solid];
d96 -> d99  [key=0, style=solid];
d96 -> d114  [key=2, style=dotted];
d102 -> d104  [key=1, style=dashed, color=darkseagreen4, label=first];
d102 -> d103  [key=0, style=solid];
d102 -> d116  [key=2, style=dotted];
d122 -> d113  [key=2, style=dotted];
d122 -> d130  [key=1, style=dashed, color=darkseagreen4, label=text];
d122 -> d123  [key=0, style=solid];
d122 -> d125  [key=1, style=dashed, color=darkseagreen4, label=text];
d57 -> d12  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d132 -> d12  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d129 -> d130  [key=0, style=solid];
d127 -> d130  [key=0, style=solid];
d127 -> d128  [key=0, style=solid];
d131 -> d132  [key=0, style=solid];
d131 -> d115  [key=2, style=dotted];
d53 -> d54  [key=0, style=solid];
d56 -> d57  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d6 -> d6  [key=1, style=dashed, color=darkseagreen4, label=t];
d6 -> d16  [key=2, style=dotted];
d6 -> d17  [key=2, style=dotted];
d6 -> d15  [key=2, style=dotted];
d6 -> d27  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
d3 -> d7  [key=1, style=dashed, color=darkseagreen4, label=errors];
d3 -> d10  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d23  [key=1, style=dashed, color=darkseagreen4, label=errors];
d8 -> d0  [key=0, style=bold, color=blue];
d26 -> d27  [key=0, style=solid];
d139 -> d60  [key=1, style=dashed, color=darkseagreen4, label=values];
d59 -> d60  [key=0, style=solid];
d61 -> d59  [key=0, style=bold, color=blue];
d31 -> d33  [key=0, style=solid];
d31 -> d32  [key=0, style=solid];
d46 -> d47  [key=0, style=solid];
d52 -> d50  [key=0, style=bold, color=blue];
d51 -> d52  [key=0, style=solid];
d51 -> d49  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d1 -> d3  [key=0, style=solid];
d119 -> d120  [key=0, style=solid];
d119 -> d121  [key=0, style=solid];
d133 -> d13  [key=0, style=bold, color=blue];
d0 -> d5  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d0 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
d0 -> d1  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d4 -> d23  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
d13 -> d122  [key=1, style=dashed, color=darkseagreen4, label=string];
d13 -> d132  [key=0, style=bold, color=crimson];
d13 -> d129  [key=0, style=bold, color=crimson];
d13 -> d131  [key=0, style=bold, color=crimson];
d13 -> d119  [key=0, style=solid];
d13 -> d125  [key=0, style=bold, color=crimson];
d13 -> d126  [key=0, style=bold, color=crimson];
d13 -> d121  [key=1, style=dashed, color=darkseagreen4, label=string];
d13 -> d128  [key=1, style=dashed, color=darkseagreen4, label=string];
d121 -> d122  [key=0, style=solid];
d121 -> d133  [key=0, style=solid];
d121 -> d11  [key=2, style=dotted];
d123 -> d127  [key=1, style=dashed, color=darkseagreen4, label=equalIndex];
d123 -> d124  [key=0, style=solid];
d123 -> d134  [key=2, style=dotted];
d125 -> d115  [key=2, style=dotted];
d125 -> d126  [key=0, style=solid];
d58 -> d56  [key=0, style=bold, color=blue];
d128 -> d129  [key=0, style=solid];
d128 -> d135  [key=2, style=dotted];
d128 -> d136  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d124 -> d127  [key=0, style=solid];
d124 -> d125  [key=0, style=solid];
d55 -> d53  [key=0, style=bold, color=blue];
d54 -> d55  [key=0, style=solid];
d54 -> d49  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d27 -> d29  [key=2, style=dotted];
d23 -> d25  [key=2, style=dotted];
d23 -> d24  [key=0, style=solid];
d28 -> d26  [key=0, style=bold, color=blue];
d48 -> d46  [key=0, style=bold, color=blue];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [key=2, style=dotted];
d138 -> d27  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
d137 -> d23  [key=1, style=dashed, color=darkseagreen4, label=errors];
d22 -> d23  [key=0, style=solid];
d24 -> d22  [key=0, style=bold, color=blue];
}
