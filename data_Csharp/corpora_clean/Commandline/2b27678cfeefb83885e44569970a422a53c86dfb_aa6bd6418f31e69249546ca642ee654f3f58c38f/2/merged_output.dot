digraph  {
m0_60 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m0_21 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
m0_94 [cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs", label="Entry NameInfo.cstr", span=""];
m0_4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m0_8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n            {\r\n                var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0);\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return\r\n                            from s in options\r\n                            select new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification());\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-41"];
m0_9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m0_90 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m0_6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="100-100"];
m0_61 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        );\r\n                    if (options.Any())\r\n                    {\r\n                        return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="102-118"];
m0_62 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="100-100"];
m0_52 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
m0_98 [cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m0_69 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m0_51 [cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m0_17 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m0_47 [cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs", label="Entry Unk.IsNothing", span=""];
m0_22 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_53 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m0_7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="121-121"];
m0_81 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="123-141"];
m0_82 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="121-121"];
m0_59 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_70 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
m0_0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m0_1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
m0_2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m0_34 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="32-32"];
m0_40 [cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs", label="1: var requiredWithValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select sp.Specification", span="48-54"];
m0_42 [cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs", label="0: var requiredWithoutValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsNothing()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    where setWithRequiredValue.ContainsIfNotEmpty(o.SetName)\r\n                    select sp.Specification", span="61-68"];
m0_43 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: var missing =\r\n                    requiredWithoutValue.Except(requiredWithValue)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsOption()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            let o = (OptionSpecification)sp.Specification\r\n                            where o.SetName.Length == 0\r\n                            select sp.Specification)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsValue()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            select sp.Specification)", span="69-84"];
m0_39 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="46-88"];
m0_41 [cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs", label="1: var setWithRequiredValue = (\r\n                    from s in requiredWithValue\r\n                    let o = (OptionSpecification)s\r\n                    where o.SetName.Length > 0\r\n                    select o.SetName\r\n                    ).Distinct()", span="55-60"];
m0_44 [cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs", label="0: return\r\n                    from sp in missing\r\n                    select new MissingRequiredOptionError(sp.FromSpecification());", span="85-87"];
m0_45 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="46-88"];
m0_24 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption()", span="29-29"];
m0_84 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="125-127"];
m0_28 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Value.IsJust()", span="30-30"];
m0_75 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Value.IsJust()", span="106-106"];
m0_78 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="(sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())", span="108-109"];
m0_66 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());", span="113-115"];
m0_23 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="29-29"];
m0_25 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="29-29"];
m0_83 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="123-141"];
m0_85 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="128-132"];
m0_27 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="30-30"];
m0_29 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="30-30"];
m0_74 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="106-106"];
m0_76 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="106-106"];
m0_77 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="107-109"];
m0_79 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="107-109"];
m0_64 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="104-110"];
m0_65 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="111-111"];
m0_68 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="102-118"];
m0_11 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0)", span="28-31"];
m0_89 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="123-141"];
m0_86 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="133-136"];
m0_95 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="128-128"];
m0_63 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="102-118"];
m0_71 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="105-105"];
m0_67 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="117-117"];
m0_10 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-41"];
m0_12 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32"];
m0_31 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="31-31"];
m0_14 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return\r\n                            from s in options\r\n                            select new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification());", span="35-38"];
m0_88 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return errors;", span="140-140"];
m0_87 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="137-139"];
m0_97 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="128-128"];
m0_96 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="t.IsName()", span="128-128"];
m0_73 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="105-105"];
m0_72 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.TargetType == TargetType.Sequence", span="105-105"];
m0_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-41"];
m0_13 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="33-33"];
m0_33 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="31-31"];
m0_32 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)sp.Specification).SetName.Length > 0", span="31-31"];
m0_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="40-40"];
m0_35 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)g.Specification).SetName", span="32-32"];
m0_36 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="32-32"];
m0_93 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335"];
m0_50 [cluster="Unk.Concat", file="SpecificationPropertyRules.cs", label="Entry Unk.Concat", span=""];
m0_5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="44-44"];
m0_37 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, file="SpecificationPropertyRules.cs", label="1: return specProps =>\r\n            {\r\n                var requiredWithValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsJust()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    select sp.Specification;\r\n                var setWithRequiredValue = (\r\n                    from s in requiredWithValue\r\n                    let o = (OptionSpecification)s\r\n                    where o.SetName.Length > 0\r\n                    select o.SetName\r\n                    ).Distinct();\r\n                var requiredWithoutValue = from sp in specProps\r\n                    where sp.Specification.IsOption()\r\n                    where sp.Specification.Required\r\n                    where sp.Value.IsNothing()\r\n                    let o = (OptionSpecification)sp.Specification\r\n                    where o.SetName.Length > 0\r\n                    where setWithRequiredValue.ContainsIfNotEmpty(o.SetName)\r\n                    select sp.Specification;\r\n                var missing =\r\n                    requiredWithoutValue.Except(requiredWithValue)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsOption()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            let o = (OptionSpecification)sp.Specification\r\n                            where o.SetName.Length == 0\r\n                            select sp.Specification)\r\n                        .Concat(\r\n                            from sp in specProps\r\n                            where sp.Specification.IsValue()\r\n                            where sp.Specification.Required\r\n                            where sp.Value.IsNothing()\r\n                            select sp.Specification);\r\n                return\r\n                    from sp in missing\r\n                    select new MissingRequiredOptionError(sp.FromSpecification());\r\n            };", span="46-88"];
m0_38 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="44-44"];
m0_30 [cluster="Unk.IsJust", file="SpecificationPropertyRules.cs", label="Entry Unk.IsJust", span=""];
m0_48 [cluster="Unk.ContainsIfNotEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.ContainsIfNotEmpty", span=""];
m0_91 [cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs", label="Entry Unk.UniqueName", span=""];
m0_49 [cluster="Unk.Except", file="SpecificationPropertyRules.cs", label="Entry Unk.Except", span=""];
m0_92 [cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m0_20 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302"];
m0_26 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m0_54 [cluster="CommandLine.Core.SpecificationPropertyRules.ContainsIfNotEmpty<T>(System.Collections.Generic.IEnumerable<T>, T)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.ContainsIfNotEmpty<T>(System.Collections.Generic.IEnumerable<T>, T)", span="91-91"];
m0_55 [cluster="CommandLine.Core.SpecificationPropertyRules.ContainsIfNotEmpty<T>(System.Collections.Generic.IEnumerable<T>, T)", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sequence.Any()", span="93-93"];
m0_56 [cluster="CommandLine.Core.SpecificationPropertyRules.ContainsIfNotEmpty<T>(System.Collections.Generic.IEnumerable<T>, T)", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return sequence.Contains(value);", span="95-95"];
m0_57 [cluster="CommandLine.Core.SpecificationPropertyRules.ContainsIfNotEmpty<T>(System.Collections.Generic.IEnumerable<T>, T)", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return true;", span="97-97"];
m0_58 [cluster="CommandLine.Core.SpecificationPropertyRules.ContainsIfNotEmpty<T>(System.Collections.Generic.IEnumerable<T>, T)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.ContainsIfNotEmpty<T>(System.Collections.Generic.IEnumerable<T>, T)", span="91-91"];
m0_80 [cluster="Unk.FromJust", file="SpecificationPropertyRules.cs", label="Entry Unk.FromJust", span=""];
m0_3 [cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_46 [cluster="Unk.Distinct", file="SpecificationPropertyRules.cs", label="Entry Unk.Distinct", span=""];
m0_18 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m0_19 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m0_99 [file="SpecificationPropertyRules.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m0_4 -> m0_8  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_9 -> m0_4  [color=blue, key=0, style=bold];
m0_6 -> m0_61  [key=0, style=solid];
m0_61 -> m0_64  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_61 -> m0_62  [key=0, style=solid];
m0_62 -> m0_6  [color=blue, key=0, style=bold];
m0_7 -> m0_81  [key=0, style=solid];
m0_7 -> m0_85  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m0_81 -> m0_84  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_81 -> m0_81  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> ", style=bold];
m0_81 -> m0_82  [key=0, style=solid];
m0_82 -> m0_7  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_34 -> m0_35  [key=0, style=solid];
m0_40 -> m0_40  [color=green, key=1, label=sp, style=dashed];
m0_40 -> m0_41  [color=green, key=0, style=solid];
m0_40 -> m0_26  [color=green, key=2, style=dotted];
m0_40 -> m0_30  [color=green, key=2, style=dotted];
m0_40 -> m0_43  [color=green, key=1, label=requiredWithValue, style=dashed];
m0_42 -> m0_42  [color=green, key=1, label=sp, style=dashed];
m0_42 -> m0_43  [color=green, key=0, style=solid];
m0_42 -> m0_26  [color=green, key=2, style=dotted];
m0_42 -> m0_47  [color=green, key=2, style=dotted];
m0_42 -> m0_48  [color=green, key=2, style=dotted];
m0_43 -> m0_43  [color=green, key=1, label=sp, style=dashed];
m0_43 -> m0_44  [color=green, key=0, style=solid];
m0_43 -> m0_49  [color=green, key=2, style=dotted];
m0_43 -> m0_26  [color=green, key=2, style=dotted];
m0_43 -> m0_47  [color=green, key=2, style=dotted];
m0_43 -> m0_50  [color=green, key=2, style=dotted];
m0_43 -> m0_51  [color=green, key=2, style=dotted];
m0_39 -> m0_40  [color=green, key=0, style=solid];
m0_39 -> m0_42  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_39 -> m0_43  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_41 -> m0_42  [color=green, key=0, style=solid];
m0_41 -> m0_41  [color=green, key=1, label=s, style=dashed];
m0_41 -> m0_46  [color=green, key=2, style=dotted];
m0_44 -> m0_44  [color=green, key=1, label=sp, style=dashed];
m0_44 -> m0_45  [color=green, key=0, style=solid];
m0_44 -> m0_52  [color=green, key=2, style=dotted];
m0_44 -> m0_53  [color=green, key=2, style=dotted];
m0_45 -> m0_39  [color=blue, key=0, style=bold];
m0_24 -> m0_26  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_84 -> m0_26  [key=2, style=dotted];
m0_84 -> m0_84  [color=darkseagreen4, key=1, label=sp, style=dashed];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_90  [key=2, style=dotted];
m0_28 -> m0_30  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_75 -> m0_30  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_78 -> m0_30  [key=2, style=dotted];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_80  [key=2, style=dotted];
m0_66 -> m0_53  [key=2, style=dotted];
m0_66 -> m0_66  [color=darkseagreen4, key=1, label=s, style=dashed];
m0_66 -> m0_68  [key=0, style=solid];
m0_66 -> m0_70  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_25 -> m0_23  [color=blue, key=0, style=bold];
m0_83 -> m0_84  [key=0, style=solid];
m0_85 -> m0_85  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_17  [key=2, style=dotted];
m0_85 -> m0_91  [key=2, style=dotted];
m0_85 -> m0_92  [key=2, style=dotted];
m0_85 -> m0_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_27 -> m0_28  [key=0, style=solid];
m0_29 -> m0_27  [color=blue, key=0, style=bold];
m0_74 -> m0_75  [key=0, style=solid];
m0_76 -> m0_74  [color=blue, key=0, style=bold];
m0_77 -> m0_78  [key=0, style=solid];
m0_79 -> m0_77  [color=blue, key=0, style=bold];
m0_64 -> m0_66  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_64 -> m0_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_64 -> m0_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_17  [key=2, style=dotted];
m0_64 -> m0_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_67  [key=0, style=solid];
m0_65 -> m0_69  [key=2, style=dotted];
m0_68 -> m0_63  [color=blue, key=0, style=bold];
m0_11 -> m0_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_11 -> m0_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_17  [key=2, style=dotted];
m0_11 -> m0_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_11 -> m0_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_89 -> m0_83  [color=blue, key=0, style=bold];
m0_86 -> m0_86  [color=darkseagreen4, key=1, label=x, style=dashed];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_19  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_63 -> m0_64  [key=0, style=solid];
m0_71 -> m0_72  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_22  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_18  [key=2, style=dotted];
m0_12 -> m0_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_31 -> m0_32  [key=0, style=solid];
m0_14 -> m0_14  [color=darkseagreen4, key=1, label=s, style=dashed];
m0_14 -> m0_16  [key=0, style=solid];
m0_14 -> m0_20  [key=2, style=dotted];
m0_14 -> m0_21  [key=2, style=dotted];
m0_88 -> m0_89  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_87  [color=darkseagreen4, key=1, label=y, style=dashed];
m0_87 -> m0_93  [key=2, style=dotted];
m0_87 -> m0_94  [key=2, style=dotted];
m0_97 -> m0_95  [color=blue, key=0, style=bold];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_98  [key=2, style=dotted];
m0_73 -> m0_71  [color=blue, key=0, style=bold];
m0_72 -> m0_73  [key=0, style=solid];
m0_16 -> m0_10  [color=blue, key=0, style=bold];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_19  [key=2, style=dotted];
m0_13 -> m0_15  [key=0, style=solid];
m0_33 -> m0_31  [color=blue, key=0, style=bold];
m0_32 -> m0_33  [key=0, style=solid];
m0_15 -> m0_22  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_35 -> m0_36  [key=0, style=solid];
m0_36 -> m0_34  [color=blue, key=0, style=bold];
m0_5 -> m0_37  [color=green, key=0, style=solid];
m0_37 -> m0_38  [color=green, key=0, style=solid];
m0_37 -> m0_40  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_37 -> m0_42  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_37 -> m0_43  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_38 -> m0_5  [color=blue, key=0, style=bold];
m0_54 -> m0_55  [color=green, key=0, style=solid];
m0_54 -> m0_56  [color=green, key=1, label="System.Collections.Generic.IEnumerable<T>", style=dashed];
m0_54 -> m0_57  [color=green, key=3, label="method methodReturn bool ContainsIfNotEmpty", style=bold];
m0_55 -> m0_56  [color=green, key=0, style=solid];
m0_55 -> m0_57  [color=green, key=0, style=solid];
m0_55 -> m0_59  [color=green, key=2, style=dotted];
m0_56 -> m0_58  [color=green, key=0, style=solid];
m0_56 -> m0_60  [color=green, key=2, style=dotted];
m0_57 -> m0_58  [color=green, key=0, style=solid];
m0_58 -> m0_54  [color=blue, key=0, style=bold];
m0_99 -> m0_85  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
}
