digraph  {
d1 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", color=green, community=0, label="6: var options = new OptionsWithValueOptionImplicitIndex()", span="11-11"];
d0 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", label="Entry CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", span="9-9"];
d2 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", color=green, community=0, label="6: string[] args = ''foo bar''.Split()", span="12-12"];
d8 [cluster="CommandLine.Tests.Fakes.OptionsWithValueOptionImplicitIndex.OptionsWithValueOptionImplicitIndex()", label="Entry CommandLine.Tests.Fakes.OptionsWithValueOptionImplicitIndex.OptionsWithValueOptionImplicitIndex()", span="2-2"];
d3 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", color=green, community=0, label="1: Parser.Default.ParseArguments(args, options)", span="13-13"];
d4 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", color=green, community=0, label="6: options.A.ShouldBeEquivalentTo(''foo'')", span="14-14"];
d5 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", color=green, community=0, label="1: options.B.ShouldBeEquivalentTo(''bar'')", span="15-15"];
d6 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", color=green, community=0, label="2: options.C.Should().BeNull()", span="16-16"];
d9 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
d10 [cluster="CommandLine.IParser.ParseArguments(string[], object)", label="Entry CommandLine.IParser.ParseArguments(string[], object)", span="49-49"];
d11 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
d7 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", label="Exit CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Implicit_By_Declaration_Order()", span="9-9"];
d12 [cluster="Unk.Should", label="Entry Unk.Should", span=""];
d13 [cluster="Unk.BeNull", label="Entry Unk.BeNull", span=""];
d15 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", color=green, community=0, label="4: var options = new OptionsWithValueOptionExplicitIndex()", span="22-22"];
d14 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", label="Entry CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", span="20-20"];
d16 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", color=green, community=0, label="2: string[] args = ''foo bar''.Split()", span="23-23"];
d22 [cluster="CommandLine.Tests.Fakes.OptionsWithValueOptionExplicitIndex.OptionsWithValueOptionExplicitIndex()", label="Entry CommandLine.Tests.Fakes.OptionsWithValueOptionExplicitIndex.OptionsWithValueOptionExplicitIndex()", span="2-2"];
d17 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", color=green, community=0, label="1: Parser.Default.ParseArguments(args, options)", span="24-24"];
d18 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", color=green, community=0, label="5: options.A.Should().BeNull()", span="25-25"];
d19 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", color=green, community=0, label="5: options.B.ShouldBeEquivalentTo(''bar'')", span="26-26"];
d20 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", color=green, community=0, label="0: options.C.ShouldBeEquivalentTo(''foo'')", span="27-27"];
d21 [cluster="CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", label="Exit CommandLine.Tests.Unit.Attributes.ValueOptionAttributeFixture.Index_Explicitly_Set_On_Value_Option()", span="20-20"];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d8  [color=green, key=2, style=dotted];
d1 -> d3  [color=green, key=1, label=options, style=dashed];
d1 -> d4  [color=green, key=1, label=options, style=dashed];
d1 -> d5  [color=green, key=1, label=options, style=dashed];
d1 -> d6  [color=green, key=1, label=options, style=dashed];
d0 -> d1  [color=green, key=0, style=solid];
d2 -> d3  [color=green, key=0, style=solid];
d2 -> d9  [color=green, key=2, style=dotted];
d3 -> d4  [color=green, key=0, style=solid];
d3 -> d10  [color=green, key=2, style=dotted];
d4 -> d5  [color=green, key=0, style=solid];
d4 -> d11  [color=green, key=2, style=dotted];
d5 -> d6  [color=green, key=0, style=solid];
d5 -> d11  [color=green, key=2, style=dotted];
d6 -> d7  [color=green, key=0, style=solid];
d6 -> d12  [color=green, key=2, style=dotted];
d6 -> d13  [color=green, key=2, style=dotted];
d7 -> d0  [color=blue, key=0, style=bold];
d15 -> d16  [color=green, key=0, style=solid];
d15 -> d22  [color=green, key=2, style=dotted];
d15 -> d17  [color=green, key=1, label=options, style=dashed];
d15 -> d18  [color=green, key=1, label=options, style=dashed];
d15 -> d19  [color=green, key=1, label=options, style=dashed];
d15 -> d20  [color=green, key=1, label=options, style=dashed];
d14 -> d15  [color=green, key=0, style=solid];
d16 -> d17  [color=green, key=0, style=solid];
d16 -> d9  [color=green, key=2, style=dotted];
d17 -> d18  [color=green, key=0, style=solid];
d17 -> d10  [color=green, key=2, style=dotted];
d18 -> d19  [color=green, key=0, style=solid];
d18 -> d12  [color=green, key=2, style=dotted];
d18 -> d13  [color=green, key=2, style=dotted];
d19 -> d20  [color=green, key=0, style=solid];
d19 -> d11  [color=green, key=2, style=dotted];
d20 -> d21  [color=green, key=0, style=solid];
d20 -> d11  [color=green, key=2, style=dotted];
d21 -> d14  [color=blue, key=0, style=bold];
}
