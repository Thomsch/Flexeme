digraph  {
m0_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ErrorHandling.cs"];
m0_6 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ErrorHandling.cs"];
m0_10 [label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ErrorHandling.cs"];
m0_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="ErrorHandling.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="ErrorHandling.cs"];
m0_1 [label="var expected = Maybe.Just(''.'')", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="ErrorHandling.cs"];
m0_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="18-19", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="ErrorHandling.cs"];
m0_4 [label="expected.ShouldBeEquivalentTo(result)", span="25-25", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="ErrorHandling.cs"];
m0_3 [label="var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="ErrorHandling.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="ErrorHandling.cs"];
m0_11 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="ErrorHandling.cs"];
m0_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="ErrorHandling.cs"];
m1_56 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="13-13", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="InstanceBuilder.cs"];
m1_48 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate", file="InstanceBuilder.cs"];
m1_66 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="InstanceBuilder.cs"];
m1_78 [label="Entry NotParsed<T>.cstr", span="", cluster="NotParsed<T>.cstr", file="InstanceBuilder.cs"];
m1_111 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="InstanceBuilder.cs"];
m1_46 [label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126", cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="InstanceBuilder.cs"];
m1_53 [label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142", cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs"];
m1_63 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs"];
m1_72 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="InstanceBuilder.cs"];
m1_104 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_122 [label="Entry CSharpx.Maybe<T>.FromJust<T>(System.Exception)", span="160-160", cluster="CSharpx.Maybe<T>.FromJust<T>(System.Exception)", file="InstanceBuilder.cs"];
m1_93 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceBuilder.cs"];
m1_77 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="InstanceBuilder.cs"];
m1_18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m1_59 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilder.cs"];
m1_71 [label="Entry System.Type.CreateDefaultForImmutable()", span="125-125", cluster="System.Type.CreateDefaultForImmutable()", file="InstanceBuilder.cs"];
m1_69 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="InstanceBuilder.cs"];
m1_75 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs"];
m1_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m1_68 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor", file="InstanceBuilder.cs"];
m1_61 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="InstanceBuilder.cs"];
m1_47 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="InstanceBuilder.cs"];
m1_50 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs"];
m1_54 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs"];
m1_74 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="InstanceBuilder.cs"];
m1_94 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_4 [label="Entry lambda expression", span="22-29", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_11 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_7 [label="return explodedTokens;", span="28-28", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_15 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_8 [label="Exit lambda expression", span="22-29", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_17 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_91 [label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-57", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_98 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="74-74", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_102 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_106 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="85-85", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_109 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_80 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_84 [label="Entry lambda expression", span="44-45", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_97 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_101 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_105 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_108 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_112 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_140 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_143 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_115 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_119 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_123 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_127 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_130 [label="Entry lambda expression", span="105-107", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_134 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_81 [label="f().GetType()", span="42-42", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_82 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_85 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_86 [label="Exit lambda expression", span="44-45", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_90 [label="Entry lambda expression", span="53-57", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_92 [label="Exit lambda expression", span="53-57", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_95 [label="f()", span="55-55", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_96 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_99 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_103 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_107 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_110 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_113 [label="f()", span="96-96", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_114 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_116 [label="sp.Value.IsJust()", span="99-99", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_117 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_120 [label="sp.Value.FromJust()", span="100-100", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_121 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_124 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="102-102", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_125 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_128 [label="sp.Specification.DefaultValue.FromJust()", span="103-103", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_129 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_131 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="105-107", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_132 [label="Exit lambda expression", span="105-107", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_135 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="108-108", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_136 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_141 [label=v, span="115-115", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_142 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_144 [label=d, span="116-116", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_145 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="InstanceBuilder.cs"];
m1_83 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="InstanceBuilder.cs"];
m1_52 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs"];
m1_60 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs"];
m1_0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-32", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_76 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="InstanceBuilder.cs"];
m1_79 [label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72", cluster="CommandLine.Parsed<T>.Parsed(T)", file="InstanceBuilder.cs"];
m1_138 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="InstanceBuilder.cs"];
m1_139 [label="Entry System.Type.CreateEmptyArray()", span="101-101", cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs"];
m1_70 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="InstanceBuilder.cs"];
m1_137 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="InstanceBuilder.cs"];
m1_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="12-12", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilder.cs"];
m1_87 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs"];
m1_100 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m1_3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_19 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="42-42", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_23 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_24 [label="arguments.Any()", span="59-59", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_25 [label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_28 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_30 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_31 [label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="76-80", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_32 [label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="82-85", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_33 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="87-89", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_37 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="96-96", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_36 [label="typeInfo.IsMutable()", span="94-94", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_39 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="112-112", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_21 [label="var specs = from pt in specProps select pt.Specification", span="47-47", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_27 [label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_26 [label="preprocessorErrors.Any()", span="62-62", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_29 [label="var tokens = tokenizerResult.Value", span="70-70", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_43 [label="var allErrors = tokenizerResult.Errors\r\n                .Concat(missingValueErrors)\r\n                .Concat(optionSpecProps.Errors)\r\n                .Concat(valueSpecProps.Errors)\r\n                .Concat(validationErrors)", span="124-128", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_42 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="121-122", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_34 [label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="91-91", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_35 [label="T instance", span="93-93", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_38 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="97-108", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_40 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="113-117", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_41 [label="instance = (T)ctor.Invoke(values)", span="118-118", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_44 [label="return allErrors.Any()\r\n                ? (ParserResult<T>)new NotParsed<T>(instance, allErrors)\r\n                : (ParserResult<T>)new Parsed<T>(instance);", span="130-132", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_45 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m1_65 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="InstanceBuilder.cs"];
m1_88 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceBuilder.cs"];
m1_57 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs"];
m1_126 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="170-170", cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs"];
m1_133 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29", cluster="CSharpx.Maybe<T>.MatchNothing()", file="InstanceBuilder.cs"];
m1_64 [label="Entry System.Type.IsMutable()", span="115-115", cluster="System.Type.IsMutable()", file="InstanceBuilder.cs"];
m1_89 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="InstanceBuilder.cs"];
m1_49 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs"];
m1_51 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="InstanceBuilder.cs"];
m1_73 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="InstanceBuilder.cs"];
m1_67 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="InstanceBuilder.cs"];
m1_118 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="175-175", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="InstanceBuilder.cs"];
m1_62 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="InstanceBuilder.cs"];
m1_55 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilder.cs"];
m1_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", span="45-45", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", file="InstanceBuilder.cs"];
m1_58 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="InstanceBuilder.cs"];
m1_146 [label="System.StringComparer", span="", file="InstanceBuilder.cs"];
m1_147 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceBuilder.cs"];
m1_148 [label="CSharpx.Maybe<System.Func<T>>", span="", file="InstanceBuilder.cs"];
m1_149 [label=specProps, span="", file="InstanceBuilder.cs"];
m1_150 [label="System.StringComparer", span="", file="InstanceBuilder.cs"];
m1_151 [label=optionSpecs, span="", file="InstanceBuilder.cs"];
m1_152 [label="System.Globalization.CultureInfo", span="", file="InstanceBuilder.cs"];
m1_153 [label=token, span="", file="InstanceBuilder.cs"];
m2_4 [label="Entry Humanizer.Tests.AmbientCulture.AmbientCulture(string)", span="16-16", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(string)", file="SentenceBuilder.cs"];
m2_5 [label="Exit Humanizer.Tests.AmbientCulture.AmbientCulture(string)", span="16-16", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(string)", file="SentenceBuilder.cs"];
m2_6 [label="Entry Humanizer.Tests.AmbientCulture.Dispose()", span="21-21", cluster="Humanizer.Tests.AmbientCulture.Dispose()", file="SentenceBuilder.cs"];
m2_7 [label="Thread.CurrentThread.CurrentUICulture = _culture", span="23-23", cluster="Humanizer.Tests.AmbientCulture.Dispose()", file="SentenceBuilder.cs"];
m2_8 [label="Exit Humanizer.Tests.AmbientCulture.Dispose()", span="21-21", cluster="Humanizer.Tests.AmbientCulture.Dispose()", file="SentenceBuilder.cs"];
m2_0 [label="Entry Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", span="10-10", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", file="SentenceBuilder.cs"];
m2_1 [label="_culture = Thread.CurrentThread.CurrentUICulture", span="12-12", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", file="SentenceBuilder.cs"];
m2_2 [label="Thread.CurrentThread.CurrentUICulture = culture", span="13-13", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", file="SentenceBuilder.cs"];
m2_3 [label="Exit Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", span="10-10", cluster="Humanizer.Tests.AmbientCulture.AmbientCulture(System.Globalization.CultureInfo)", file="SentenceBuilder.cs"];
m2_9 [label="Humanizer.Tests.AmbientCulture", span="", file="SentenceBuilder.cs"];
m3_130 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])", file="Tokenizer.cs"];
m3_62 [label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126", cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Tokenizer.cs"];
m3_14 [label="Entry Unk.nameLookup", span="", cluster="Unk.nameLookup", file="Tokenizer.cs"];
m3_75 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Tokenizer.cs"];
m3_128 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs"];
m3_8 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)", file="Tokenizer.cs"];
m3_56 [label="Entry Unk.SkipWhile", span="", cluster="Unk.SkipWhile", file="Tokenizer.cs"];
m3_108 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs"];
m3_129 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs"];
m3_30 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="Tokenizer.cs"];
m3_9 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs"];
m3_13 [label="Entry Unk.IsName", span="", cluster="Unk.IsName", file="Tokenizer.cs"];
m3_32 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs"];
m3_15 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="Tokenizer.cs"];
m3_18 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="Tokenizer.cs"];
m3_74 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="Tokenizer.cs"];
m3_109 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="Tokenizer.cs"];
m3_110 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)", file="Tokenizer.cs"];
m3_22 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="Tokenizer.cs"];
m3_73 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="Tokenizer.cs"];
m3_61 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="Tokenizer.cs"];
m3_80 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="Tokenizer.cs"];
m3_20 [label="!unkTokens.Contains(x)", span="29-29", cluster="lambda expression", color=red, community=0, file="Tokenizer.cs"];
m3_19 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="Tokenizer.cs"];
m3_21 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="Tokenizer.cs"];
m3_37 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="Tokenizer.cs"];
m3_41 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="Tokenizer.cs"];
m3_44 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="Tokenizer.cs"];
m3_48 [label="tokens.Concat(values)", span="40-40", cluster="lambda expression", color=red, community=0, file="Tokenizer.cs"];
m3_47 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="Tokenizer.cs"];
m3_38 [label="arg.EqualsOrdinal(''--'')", span="36-36", cluster="lambda expression", file="Tokenizer.cs"];
m3_39 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="Tokenizer.cs"];
m3_42 [label="!arg.EqualsOrdinal(''--'')", span="38-38", cluster="lambda expression", file="Tokenizer.cs"];
m3_43 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="Tokenizer.cs"];
m3_45 [label="!arg.EqualsOrdinal(''--'')", span="39-39", cluster="lambda expression", file="Tokenizer.cs"];
m3_46 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="Tokenizer.cs"];
m3_49 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="Tokenizer.cs"];
m3_59 [label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="50-52", cluster="lambda expression", file="Tokenizer.cs"];
m3_58 [label="Entry lambda expression", span="49-52", cluster="lambda expression", file="Tokenizer.cs"];
m3_66 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="Tokenizer.cs"];
m3_70 [label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t }))", span="55-57", cluster="lambda expression", file="Tokenizer.cs"];
m3_69 [label="Entry lambda expression", span="54-57", cluster="lambda expression", file="Tokenizer.cs"];
m3_84 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="Tokenizer.cs"];
m3_64 [label="Tuple.Create(i + 1, sep)", span="51-51", cluster="lambda expression", file="Tokenizer.cs"];
m3_60 [label="Exit lambda expression", span="49-52", cluster="lambda expression", file="Tokenizer.cs"];
m3_63 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="Tokenizer.cs"];
m3_65 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="Tokenizer.cs"];
m3_67 [label="x.Item1 < 0", span="52-52", cluster="lambda expression", file="Tokenizer.cs"];
m3_68 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="Tokenizer.cs"];
m3_78 [label="x.Item1 == i", span="55-55", cluster="lambda expression", file="Tokenizer.cs"];
m3_81 [label="t.Text.Split(r.Item2).Select(Token.Value)", span="56-56", cluster="lambda expression", file="Tokenizer.cs"];
m3_71 [label="Exit lambda expression", span="54-57", cluster="lambda expression", file="Tokenizer.cs"];
m3_77 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="Tokenizer.cs"];
m3_79 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="Tokenizer.cs"];
m3_82 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="Tokenizer.cs"];
m3_85 [label=x, span="59-59", cluster="lambda expression", file="Tokenizer.cs"];
m3_86 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="Tokenizer.cs"];
m3_34 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs"];
m3_10 [label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="109-109", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_114 [label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="113-113", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_118 [label="yield return Token.Name(text);", span="119-119", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_119 [label="yield break;", span="120-120", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_122 [label="yield break;", span="125-125", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_124 [label="yield return Token.Name(parts[0]);", span="128-128", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_125 [label="yield return Token.Value(parts[1]);", span="129-129", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_115 [label="var text = value.Substring(2)", span="115-115", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_121 [label="onError(new BadFormatTokenError(value))", span="124-124", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_116 [label="var equalIndex = text.IndexOf('=')", span="116-116", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_123 [label="var parts = text.Split('=')", span="127-127", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_117 [label="equalIndex <= 0", span="117-117", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_120 [label="equalIndex == 1", span="122-122", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_126 [label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="109-109", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m3_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m3_17 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="Tokenizer.cs"];
m3_40 [label="Entry string.EqualsOrdinal(string)", span="35-35", cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs"];
m3_31 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m3_127 [label="Entry string.IndexOf(char)", span="0-0", cluster="string.IndexOf(char)", file="Tokenizer.cs"];
m3_35 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="Tokenizer.cs"];
m3_36 [label="Entry CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", span="66-66", cluster="CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", file="Tokenizer.cs"];
m3_0 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="12-12", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_1 [label="var errors = new List<Error>()", span="16-16", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_3 [label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token).ToList()", span="19-25", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_4 [label="var unkTokens = (from t in tokens where t.IsName() && !nameLookup(t.Text) select t).ToList()", span="27-27", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_2 [label="Action<Error> onError = errors.Add", span="17-17", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_5 [label="return StatePair.Create(tokens.Where(x=>!unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="29-29", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=red, community=0, file="Tokenizer.cs"];
m3_6 [label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="12-12", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_23 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="32-32", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m3_24 [label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="36-36", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m3_25 [label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="38-38", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m3_26 [label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(Token.Value)", span="39-39", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m3_28 [label="return tokenizer(arguments);", span="42-42", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m3_27 [label="return tokenizerResult.MapValue(tokens => tokens.Concat(values));", span="40-40", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", color=red, community=0, file="Tokenizer.cs"];
m3_29 [label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="32-32", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m3_12 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="Tokenizer.cs"];
m3_76 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="Tokenizer.cs"];
m3_112 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs"];
m3_107 [label="Entry char.IsDigit(char)", span="0-0", cluster="char.IsDigit(char)", file="Tokenizer.cs"];
m3_7 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs"];
m3_16 [label="Entry UnknownOptionError.cstr", span="", cluster="UnknownOptionError.cstr", file="Tokenizer.cs"];
m3_113 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Tokenizer.cs"];
m3_57 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="Tokenizer.cs"];
m3_72 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="Tokenizer.cs"];
m3_83 [label="Entry Unk.Split", span="", cluster="Unk.Split", file="Tokenizer.cs"];
m3_11 [label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="64-64", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_87 [label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="68-68", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_90 [label="yield return Token.Value(value);", span="74-74", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_91 [label="yield break;", span="75-75", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_93 [label="yield return Token.Name(text);", span="80-80", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_94 [label="yield break;", span="81-81", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_96 [label="yield return Token.Name(first);", span="85-85", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_102 [label="yield return Token.Name(n);", span="95-95", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_104 [label="yield return Token.Value(text.Substring(seen.Count()));", span="104-104", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_88 [label="var text = value.Substring(1)", span="70-70", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_92 [label="value.Length == 2", span="78-78", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_100 [label="!seen.Contains(c) && nameLookup(n)", span="92-92", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_89 [label="char.IsDigit(text[0])", span="72-72", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_95 [label="var first = text.Substring(0, 1)", span="84-84", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_98 [label="text.Substring(1)", span="89-89", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_103 [label="seen.Count() < text.Length", span="102-102", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_97 [label="var seen = new List<char> { first[0] }", span="87-87", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_101 [label="seen.Add(c)", span="94-94", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_99 [label="var n = new string(c, 1)", span="91-91", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_105 [label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="64-64", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m3_50 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", span="45-45", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m3_51 [label="var replaces = tokens.Value.Select((t,i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="49-52", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", color=red, community=1, file="Tokenizer.cs"];
m3_52 [label="var exploded = tokens.Value.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t })))", span="54-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", color=red, community=1, file="Tokenizer.cs"];
m3_54 [label="return StatePair.Create(flattened, tokens.Errors);", span="61-61", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", color=red, community=0, file="Tokenizer.cs"];
m3_53 [label="var flattened = exploded.SelectMany(x => x)", span="59-59", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m3_55 [label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", span="45-45", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m3_111 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs"];
m3_106 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="Tokenizer.cs"];
m3_131 [label=unkTokens, span="", file="Tokenizer.cs"];
m3_132 [label=values, span="", file="Tokenizer.cs"];
m3_133 [label="System.Func<string, CSharpx.Maybe<char>>", span="", file="Tokenizer.cs"];
m3_134 [label=int, span="", file="Tokenizer.cs"];
m3_135 [label=replaces, span="", file="Tokenizer.cs"];
m3_136 [label=int, span="", file="Tokenizer.cs"];
m3_137 [label="CommandLine.Core.Token", span="", file="Tokenizer.cs"];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_9  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_11  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_10  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m1_94 -> m1_95  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_9  [key=2, style=dotted];
m1_5 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_10  [key=2, style=dotted];
m1_6 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_4 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_4 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_11 -> m1_12  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_8 -> m1_4  [key=0, style=bold, color=blue];
m1_13 -> m1_11  [key=0, style=bold, color=blue];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_91 -> m1_92  [key=0, style=solid];
m1_91 -> m1_64  [key=2, style=dotted];
m1_91 -> m1_65  [key=2, style=dotted];
m1_91 -> m1_46  [key=2, style=dotted];
m1_91 -> m1_67  [key=2, style=dotted];
m1_91 -> m1_93  [key=2, style=dotted];
m1_91 -> m1_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_91 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_98 -> m1_99  [key=0, style=solid];
m1_98 -> m1_100  [key=2, style=dotted];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_104  [key=2, style=dotted];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_104  [key=2, style=dotted];
m1_109 -> m1_110  [key=0, style=solid];
m1_109 -> m1_111  [key=2, style=dotted];
m1_80 -> m1_81  [key=0, style=solid];
m1_84 -> m1_85  [key=0, style=solid];
m1_97 -> m1_98  [key=0, style=solid];
m1_101 -> m1_102  [key=0, style=solid];
m1_105 -> m1_106  [key=0, style=solid];
m1_108 -> m1_109  [key=0, style=solid];
m1_112 -> m1_113  [key=0, style=solid];
m1_140 -> m1_141  [key=0, style=solid];
m1_143 -> m1_144  [key=0, style=solid];
m1_115 -> m1_116  [key=0, style=solid];
m1_119 -> m1_120  [key=0, style=solid];
m1_123 -> m1_124  [key=0, style=solid];
m1_127 -> m1_128  [key=0, style=solid];
m1_130 -> m1_131  [key=0, style=solid];
m1_134 -> m1_135  [key=0, style=solid];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_54  [key=2, style=dotted];
m1_81 -> m1_83  [key=2, style=dotted];
m1_82 -> m1_80  [key=0, style=bold, color=blue];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_87  [key=2, style=dotted];
m1_85 -> m1_88  [key=2, style=dotted];
m1_85 -> m1_89  [key=2, style=dotted];
m1_86 -> m1_84  [key=0, style=bold, color=blue];
m1_90 -> m1_91  [key=0, style=solid];
m1_92 -> m1_90  [key=0, style=bold, color=blue];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_54  [key=2, style=dotted];
m1_96 -> m1_94  [key=0, style=bold, color=blue];
m1_99 -> m1_97  [key=0, style=bold, color=blue];
m1_103 -> m1_101  [key=0, style=bold, color=blue];
m1_107 -> m1_105  [key=0, style=bold, color=blue];
m1_110 -> m1_108  [key=0, style=bold, color=blue];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_54  [key=2, style=dotted];
m1_114 -> m1_112  [key=0, style=bold, color=blue];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_118  [key=2, style=dotted];
m1_117 -> m1_115  [key=0, style=bold, color=blue];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_122  [key=2, style=dotted];
m1_121 -> m1_119  [key=0, style=bold, color=blue];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_126  [key=2, style=dotted];
m1_124 -> m1_118  [key=2, style=dotted];
m1_125 -> m1_123  [key=0, style=bold, color=blue];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_122  [key=2, style=dotted];
m1_129 -> m1_127  [key=0, style=bold, color=blue];
m1_131 -> m1_132  [key=0, style=solid];
m1_131 -> m1_126  [key=2, style=dotted];
m1_131 -> m1_133  [key=2, style=dotted];
m1_132 -> m1_130  [key=0, style=bold, color=blue];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_137  [key=2, style=dotted];
m1_135 -> m1_138  [key=2, style=dotted];
m1_135 -> m1_139  [key=2, style=dotted];
m1_136 -> m1_134  [key=0, style=bold, color=blue];
m1_141 -> m1_142  [key=0, style=solid];
m1_142 -> m1_140  [key=0, style=bold, color=blue];
m1_144 -> m1_145  [key=0, style=solid];
m1_145 -> m1_143  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> Build"];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_1 -> m1_1  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> "];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_3 -> m1_19  [key=0, style=solid];
m1_3 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m1_3 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m1_3 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_3 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_3 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m1_3 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_98  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_3 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_3 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_3 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_46  [key=2, style=dotted];
m1_19 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_19 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m1_19 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
m1_23 -> m1_23  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_28  [key=0, style=solid];
m1_24 -> m1_50  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_51  [key=2, style=dotted];
m1_25 -> m1_52  [key=2, style=dotted];
m1_25 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=preprocessorErrors];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_55  [key=2, style=dotted];
m1_28 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_56  [key=2, style=dotted];
m1_30 -> m1_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_30 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m1_30 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_57  [key=2, style=dotted];
m1_31 -> m1_58  [key=2, style=dotted];
m1_31 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_31 -> m1_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_31 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m1_31 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_59  [key=2, style=dotted];
m1_32 -> m1_58  [key=2, style=dotted];
m1_32 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_32 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_32 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m1_32 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_60  [key=2, style=dotted];
m1_33 -> m1_61  [key=2, style=dotted];
m1_33 -> m1_62  [key=2, style=dotted];
m1_33 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=token];
m1_33 -> m1_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_33 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label=token];
m1_33 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_65  [key=2, style=dotted];
m1_37 -> m1_46  [key=2, style=dotted];
m1_37 -> m1_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_47  [key=2, style=dotted];
m1_20 -> m1_84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_20 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_20 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_20 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_20 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_20 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_39  [key=0, style=solid];
m1_36 -> m1_64  [key=2, style=dotted];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_67  [key=2, style=dotted];
m1_39 -> m1_68  [key=2, style=dotted];
m1_39 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=sp];
m1_39 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_48  [key=2, style=dotted];
m1_22 -> m1_49  [key=2, style=dotted];
m1_22 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_22 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_22 -> m1_98  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_22 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_27 -> m1_45  [key=0, style=solid];
m1_27 -> m1_53  [key=2, style=dotted];
m1_27 -> m1_54  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_28  [key=0, style=solid];
m1_26 -> m1_50  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_76  [key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_74  [key=2, style=dotted];
m1_42 -> m1_75  [key=2, style=dotted];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_63  [key=2, style=dotted];
m1_34 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m1_34 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m1_34 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m1_35 -> m1_36  [key=0, style=solid];
m1_38 -> m1_42  [key=0, style=solid];
m1_38 -> m1_66  [key=2, style=dotted];
m1_38 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_38 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_69  [key=2, style=dotted];
m1_40 -> m1_70  [key=2, style=dotted];
m1_40 -> m1_71  [key=2, style=dotted];
m1_40 -> m1_46  [key=2, style=dotted];
m1_40 -> m1_72  [key=2, style=dotted];
m1_40 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label=prms];
m1_40 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_40 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_73  [key=2, style=dotted];
m1_41 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_77  [key=2, style=dotted];
m1_44 -> m1_78  [key=2, style=dotted];
m1_44 -> m1_79  [key=2, style=dotted];
m1_45 -> m1_3  [key=0, style=bold, color=blue];
m1_146 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_146 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_146 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_146 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_147 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_147 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_148 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m1_149 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_150 -> m1_98  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_150 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_151 -> m1_98  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_152 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_152 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_153 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label=token];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_4  [key=0, style=bold, color=blue];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_8  [key=0, style=solid];
m2_8 -> m2_6  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_0  [key=0, style=bold, color=blue];
m2_9 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Tests.AmbientCulture"];
m2_9 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.Tests.AmbientCulture"];
m3_80 -> m3_81  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid, color=red];
m3_20 -> m3_22  [key=2, style=dotted, color=red];
m3_19 -> m3_20  [key=0, style=solid, color=red];
m3_21 -> m3_19  [key=0, style=bold, color=blue];
m3_37 -> m3_38  [key=0, style=solid];
m3_41 -> m3_42  [key=0, style=solid];
m3_44 -> m3_45  [key=0, style=solid];
m3_48 -> m3_49  [key=0, style=solid, color=red];
m3_48 -> m3_17  [key=2, style=dotted, color=red];
m3_47 -> m3_48  [key=0, style=solid, color=red];
m3_38 -> m3_39  [key=0, style=solid];
m3_38 -> m3_40  [key=2, style=dotted];
m3_39 -> m3_37  [key=0, style=bold, color=blue];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_40  [key=2, style=dotted];
m3_43 -> m3_41  [key=0, style=bold, color=blue];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_40  [key=2, style=dotted];
m3_46 -> m3_44  [key=0, style=bold, color=blue];
m3_49 -> m3_47  [key=0, style=bold, color=blue];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_32  [key=2, style=dotted];
m3_59 -> m3_61  [key=2, style=dotted];
m3_59 -> m3_62  [key=2, style=dotted];
m3_59 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_66 -> m3_67  [key=0, style=solid];
m3_70 -> m3_71  [key=0, style=solid];
m3_70 -> m3_72  [key=2, style=dotted];
m3_70 -> m3_73  [key=2, style=dotted];
m3_70 -> m3_74  [key=2, style=dotted];
m3_70 -> m3_75  [key=2, style=dotted];
m3_70 -> m3_76  [key=2, style=dotted];
m3_70 -> m3_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_70 -> m3_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_78  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_69 -> m3_81  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m3_84 -> m3_85  [key=0, style=solid];
m3_64 -> m3_65  [key=0, style=solid];
m3_64 -> m3_61  [key=2, style=dotted];
m3_60 -> m3_58  [key=0, style=bold, color=blue];
m3_63 -> m3_64  [key=0, style=solid];
m3_65 -> m3_63  [key=0, style=bold, color=blue];
m3_67 -> m3_68  [key=0, style=solid];
m3_68 -> m3_66  [key=0, style=bold, color=blue];
m3_78 -> m3_79  [key=0, style=solid];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_83  [key=2, style=dotted];
m3_81 -> m3_35  [key=2, style=dotted];
m3_71 -> m3_69  [key=0, style=bold, color=blue];
m3_77 -> m3_78  [key=0, style=solid];
m3_79 -> m3_77  [key=0, style=bold, color=blue];
m3_82 -> m3_80  [key=0, style=bold, color=blue];
m3_85 -> m3_86  [key=0, style=solid];
m3_86 -> m3_84  [key=0, style=bold, color=blue];
m3_10 -> m3_114  [key=0, style=solid];
m3_10 -> m3_118  [key=0, style=bold, color=crimson];
m3_10 -> m3_119  [key=0, style=bold, color=crimson];
m3_10 -> m3_122  [key=0, style=bold, color=crimson];
m3_10 -> m3_124  [key=0, style=bold, color=crimson];
m3_10 -> m3_125  [key=0, style=bold, color=crimson];
m3_10 -> m3_115  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_10 -> m3_121  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_114 -> m3_115  [key=0, style=solid];
m3_114 -> m3_126  [key=0, style=solid];
m3_114 -> m3_8  [key=2, style=dotted];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_108  [key=2, style=dotted];
m3_119 -> m3_120  [key=0, style=solid];
m3_122 -> m3_123  [key=0, style=solid];
m3_124 -> m3_125  [key=0, style=solid];
m3_124 -> m3_108  [key=2, style=dotted];
m3_125 -> m3_126  [key=0, style=solid];
m3_125 -> m3_9  [key=2, style=dotted];
m3_115 -> m3_116  [key=0, style=solid];
m3_115 -> m3_106  [key=2, style=dotted];
m3_115 -> m3_118  [key=1, style=dashed, color=darkseagreen4, label=text];
m3_115 -> m3_123  [key=1, style=dashed, color=darkseagreen4, label=text];
m3_121 -> m3_122  [key=0, style=solid];
m3_121 -> m3_128  [key=2, style=dotted];
m3_121 -> m3_129  [key=2, style=dotted];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_127  [key=2, style=dotted];
m3_116 -> m3_120  [key=1, style=dashed, color=darkseagreen4, label=equalIndex];
m3_123 -> m3_124  [key=0, style=solid];
m3_123 -> m3_130  [key=2, style=dotted];
m3_123 -> m3_125  [key=1, style=dashed, color=darkseagreen4, label=parts];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_120  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_123  [key=0, style=solid];
m3_126 -> m3_10  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_0 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_7  [key=2, style=dotted];
m3_1 -> m3_5  [key=1, style=dashed, color=red, label=errors];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_8  [key=2, style=dotted];
m3_3 -> m3_9  [key=2, style=dotted];
m3_3 -> m3_10  [key=2, style=dotted];
m3_3 -> m3_11  [key=2, style=dotted];
m3_3 -> m3_12  [key=2, style=dotted];
m3_3 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label=arg];
m3_3 -> m3_5  [key=1, style=dashed, color=red, label=tokens];
m3_4 -> m3_5  [key=0, style=solid, color=red];
m3_4 -> m3_13  [key=2, style=dotted];
m3_4 -> m3_14  [key=2, style=dotted];
m3_4 -> m3_12  [key=2, style=dotted];
m3_4 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_4 -> m3_20  [key=1, style=dashed, color=red, label=unkTokens];
m3_2 -> m3_3  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid, color=red];
m3_5 -> m3_15  [key=2, style=dotted, color=red];
m3_5 -> m3_16  [key=2, style=dotted, color=red];
m3_5 -> m3_17  [key=2, style=dotted, color=red];
m3_5 -> m3_18  [key=2, style=dotted, color=red];
m3_5 -> m3_19  [key=1, style=dashed, color=red, label="lambda expression"];
m3_5 -> m3_5  [key=1, style=dashed, color=red, label=t];
m3_6 -> m3_0  [key=0, style=bold, color=blue];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_23 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_23 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_28  [key=0, style=solid];
m3_24 -> m3_30  [key=2, style=dotted];
m3_24 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_31  [key=2, style=dotted];
m3_25 -> m3_32  [key=2, style=dotted];
m3_25 -> m3_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_25 -> m3_27  [key=1, style=dashed, color=red, label=tokenizerResult];
m3_26 -> m3_27  [key=0, style=solid, color=red];
m3_26 -> m3_33  [key=2, style=dotted];
m3_26 -> m3_34  [key=2, style=dotted];
m3_26 -> m3_35  [key=2, style=dotted];
m3_26 -> m3_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_26 -> m3_48  [key=1, style=dashed, color=red, label=values];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_32  [key=2, style=dotted];
m3_27 -> m3_29  [key=0, style=solid, color=red];
m3_27 -> m3_36  [key=2, style=dotted, color=red];
m3_27 -> m3_47  [key=1, style=dashed, color=red, label="lambda expression"];
m3_29 -> m3_23  [key=0, style=bold, color=blue];
m3_11 -> m3_87  [key=0, style=solid];
m3_11 -> m3_90  [key=0, style=bold, color=crimson];
m3_11 -> m3_91  [key=0, style=bold, color=crimson];
m3_11 -> m3_93  [key=0, style=bold, color=crimson];
m3_11 -> m3_94  [key=0, style=bold, color=crimson];
m3_11 -> m3_96  [key=0, style=bold, color=crimson];
m3_11 -> m3_102  [key=0, style=bold, color=crimson];
m3_11 -> m3_104  [key=0, style=bold, color=crimson];
m3_11 -> m3_88  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_11 -> m3_92  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_11 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_105  [key=0, style=solid];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_9  [key=2, style=dotted];
m3_91 -> m3_92  [key=0, style=solid];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_108  [key=2, style=dotted];
m3_94 -> m3_95  [key=0, style=solid];
m3_96 -> m3_97  [key=0, style=solid];
m3_96 -> m3_108  [key=2, style=dotted];
m3_102 -> m3_98  [key=0, style=solid];
m3_102 -> m3_108  [key=2, style=dotted];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_113  [key=2, style=dotted];
m3_104 -> m3_106  [key=2, style=dotted];
m3_104 -> m3_9  [key=2, style=dotted];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_106  [key=2, style=dotted];
m3_88 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label=text];
m3_88 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label=text];
m3_88 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label=text];
m3_88 -> m3_103  [key=1, style=dashed, color=darkseagreen4, label=text];
m3_88 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label=text];
m3_92 -> m3_93  [key=0, style=solid];
m3_92 -> m3_95  [key=0, style=solid];
m3_100 -> m3_101  [key=0, style=solid];
m3_100 -> m3_103  [key=0, style=solid];
m3_100 -> m3_111  [key=2, style=dotted];
m3_100 -> m3_32  [key=2, style=dotted];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_92  [key=0, style=solid];
m3_89 -> m3_107  [key=2, style=dotted];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_109  [key=2, style=dotted];
m3_95 -> m3_97  [key=1, style=dashed, color=darkseagreen4, label=first];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_103  [key=0, style=solid];
m3_98 -> m3_106  [key=2, style=dotted];
m3_98 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label=c];
m3_98 -> m3_101  [key=1, style=dashed, color=darkseagreen4, label=c];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_105  [key=0, style=solid];
m3_103 -> m3_113  [key=2, style=dotted];
m3_97 -> m3_98  [key=0, style=solid];
m3_97 -> m3_7  [key=2, style=dotted];
m3_97 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label=seen];
m3_97 -> m3_101  [key=1, style=dashed, color=darkseagreen4, label=seen];
m3_97 -> m3_103  [key=1, style=dashed, color=darkseagreen4, label=seen];
m3_97 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label=seen];
m3_101 -> m3_102  [key=0, style=solid];
m3_101 -> m3_112  [key=2, style=dotted];
m3_99 -> m3_100  [key=0, style=solid];
m3_99 -> m3_110  [key=2, style=dotted];
m3_99 -> m3_102  [key=1, style=dashed, color=darkseagreen4, label=n];
m3_105 -> m3_11  [key=0, style=bold, color=blue];
m3_50 -> m3_51  [key=0, style=solid, color=red];
m3_50 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m3_50 -> m3_52  [key=1, style=dashed, color=red, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
m3_50 -> m3_54  [key=1, style=dashed, color=red, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
m3_51 -> m3_52  [key=0, style=solid, color=red];
m3_51 -> m3_35  [key=2, style=dotted, color=red];
m3_51 -> m3_56  [key=2, style=dotted, color=red];
m3_51 -> m3_58  [key=1, style=dashed, color=red, label="lambda expression"];
m3_51 -> m3_66  [key=1, style=dashed, color=red, label="lambda expression"];
m3_51 -> m3_70  [key=1, style=dashed, color=red, label=replaces];
m3_52 -> m3_53  [key=0, style=solid, color=red];
m3_52 -> m3_35  [key=2, style=dotted, color=red];
m3_52 -> m3_69  [key=1, style=dashed, color=red, label="lambda expression"];
m3_54 -> m3_55  [key=0, style=solid, color=red];
m3_54 -> m3_18  [key=2, style=dotted, color=red];
m3_53 -> m3_54  [key=0, style=solid, color=red];
m3_53 -> m3_57  [key=2, style=dotted];
m3_53 -> m3_84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_55 -> m3_50  [key=0, style=bold, color=blue];
m3_131 -> m3_20  [key=1, style=dashed, color=red, label=unkTokens];
m3_132 -> m3_48  [key=1, style=dashed, color=red, label=values];
m3_133 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m3_134 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_135 -> m3_70  [key=1, style=dashed, color=darkseagreen4, label=replaces];
m3_136 -> m3_78  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_137 -> m3_81  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
}
