digraph  {
d1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", color=green, community=0, label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture);", prediction=0, span="15-17"];
d0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
d2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
d3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d4 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36"];
d5 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
d46 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, label="return Either.Protect(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType, value);", prediction=1, span="89-92"];
d35 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
d44 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", label="Func<string, object> changeType = input =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                };\r\n\r\n                return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();\r\n            }", span="46-74"];
d45 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", label="Func<string, object> makeType = input =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { input });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="76-87"];
d47 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
d48 [cluster="System.Type.IsPrimitiveEx()", label="Entry System.Type.IsPrimitiveEx()", span="209-209"];
d49 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35"];
d50 [cluster="Unk.Protect", label="Entry Unk.Protect", span=""];
d91 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0, label="object parsedValue", prediction=2, span="97-97"];
d90 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
d92 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0, label="parsedValue = Enum.Parse(conversionType, value)", prediction=3, span="100-100"];
d93 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0, label=ArgumentException, prediction=4, span="102-102"];
d95 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0, label="Enum.IsDefined(conversionType, parsedValue)", prediction=5, span="106-106"];
d99 [cluster="System.Enum.Parse(System.Type, string)", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
d96 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0, label="return parsedValue;", prediction=3, span="108-108"];
d97 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0, label="throw new FormatException();", prediction=7, span="110-110"];
d101 [cluster="System.Enum.IsDefined(System.Type, object)", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
d94 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", color=green, community=0, label="throw new FormatException();", prediction=8, span="104-104"];
d98 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
d100 [cluster="System.FormatException.FormatException()", label="Entry System.FormatException.FormatException()", span="0-0"];
d34 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36"];
d31 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture)", span="38-38"];
d9 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
d6 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="22-27"];
d7 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture))", span="29-29"];
d21 [cluster="lambda expression", label="ChangeTypeScalar(value, type, conversionCulture)", span="29-29"];
d52 [cluster="lambda expression", label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                }", span="48-69"];
d60 [cluster="lambda expression", label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="50-50"];
d61 [cluster="lambda expression", label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="52-56"];
d68 [cluster="lambda expression", label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="54-56"];
d62 [cluster="lambda expression", label="var type = getUnderlyingType() ?? conversionType", span="58-58"];
d63 [cluster="lambda expression", label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="60-64"];
d73 [cluster="lambda expression", label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="62-64"];
d53 [cluster="lambda expression", label="return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();", span="71-73"];
d82 [cluster="lambda expression", label="var ctor = conversionType.GetConstructor(new[] { typeof(string) })", span="80-80"];
d65 [cluster="lambda expression", label="return (input == null) ? empty() : withValue();", span="68-68"];
d83 [cluster="lambda expression", label="return ctor.Invoke(new object[] { input });", span="81-81"];
d33 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", label="return Maybe.OfEither(result);", span="41-41"];
d32 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", label="result.Match(_ => { }, e => e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="39-40"];
d8 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="31-33"];
d10 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
d12 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="249-249"];
d13 [cluster="System.ApplicationException.ApplicationException(string)", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
d14 [cluster="Unk.FromJust", label="Entry Unk.FromJust", span=""];
d15 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d20 [cluster="lambda expression", label="Entry lambda expression", span="29-29"];
d102 [label="System.Globalization.CultureInfo", span=""];
d103 [label=type, span=""];
d22 [cluster="lambda expression", label="Exit lambda expression", span="29-29"];
d23 [cluster="Unk.ChangeTypeScalar", label="Entry Unk.ChangeTypeScalar", span=""];
d104 [label="System.Type", span=""];
d105 [label="System.Globalization.CultureInfo", span=""];
d51 [cluster="lambda expression", label="Entry lambda expression", span="46-74"];
d59 [cluster="lambda expression", label="Entry lambda expression", span="48-69"];
d64 [cluster="lambda expression", label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66"];
d78 [cluster="lambda expression", label="isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66"];
d107 [label=isFsOption, span=""];
d67 [cluster="lambda expression", label="Entry lambda expression", span="53-56"];
d69 [cluster="lambda expression", label="Exit lambda expression", span="53-56"];
d70 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8"];
d71 [cluster="System.Nullable.GetUnderlyingType(System.Type)", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
d58 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d106 [label=string, span=""];
d108 [label=type, span=""];
d72 [cluster="lambda expression", label="Entry lambda expression", span="61-64"];
d74 [cluster="lambda expression", label="Exit lambda expression", span="61-64"];
d75 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
d76 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="14-14"];
d54 [cluster="lambda expression", label="Exit lambda expression", span="46-74"];
d55 [cluster="string.IsBooleanString()", label="Entry string.IsBooleanString()", span="60-60"];
d56 [cluster="string.ToBoolean()", label="Entry string.ToBoolean()", span="66-66"];
d57 [cluster="string.ToEnum(System.Type)", label="Entry string.ToEnum(System.Type)", span="95-95"];
d81 [cluster="lambda expression", label="Entry lambda expression", span="76-87"];
d87 [cluster="System.Type.GetConstructor(System.Type[])", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
d66 [cluster="lambda expression", label="Exit lambda expression", span="48-69"];
d86 [cluster="lambda expression", label="Exit lambda expression", span="76-87"];
d88 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
d37 [cluster="Unk.OfEither", label="Entry Unk.OfEither", span=""];
d36 [cluster="Unk.Match", label="Entry Unk.Match", span=""];
d38 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
d40 [cluster="lambda expression", label="Entry lambda expression", span="39-40"];
d16 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d17 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d18 [cluster="Unk.ToUntypedArray", label="Entry Unk.ToUntypedArray", span=""];
d19 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
d24 [cluster="lambda expression", label="Entry lambda expression", span="31-31"];
d28 [cluster="lambda expression", label="Entry lambda expression", span="33-33"];
d77 [cluster="lambda expression", label="Entry lambda expression", span="66-66"];
d79 [cluster="lambda expression", label="Exit lambda expression", span="66-66"];
d80 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="22-22"];
d85 [cluster="lambda expression", label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="85-85"];
d39 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
d42 [cluster="lambda expression", label="Exit lambda expression", span="39-40"];
d41 [cluster="lambda expression", label="e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="39-40"];
d26 [cluster="lambda expression", label="Exit lambda expression", span="31-31"];
d25 [cluster="lambda expression", label="a.MatchNothing()", span="31-31"];
d30 [cluster="lambda expression", label="Exit lambda expression", span="33-33"];
d29 [cluster="lambda expression", label="((Just<object>)c).Value", span="33-33"];
d84 [cluster="lambda expression", label=Exception, span="83-83"];
d89 [cluster="System.FormatException.FormatException(string)", label="Entry System.FormatException.FormatException(string)", span="0-0"];
d43 [cluster="Unk.RethrowWhenAbsentIn", label="Entry Unk.RethrowWhenAbsentIn", span=""];
d27 [cluster="Unk.MatchNothing", label="Entry Unk.MatchNothing", span=""];
m0_7 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs", label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int, Humanizer.GrammaticalGender)", span="20-20"];
m0_4 [cluster="Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs", label="Entry Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", span="38-38"];
m0_5 [cluster="Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs", label="return Configurator.NumberToWordsConverter.Convert(number, gender);", span="40-40"];
m0_6 [cluster="Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs", label="Exit Humanizer.NumberToWordsExtension.ToWords(int, Humanizer.GrammaticalGender)", span="38-38"];
m0_3 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", file="InstanceBuilder.cs", label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12"];
m0_15 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs", label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="35-35"];
m0_8 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", file="InstanceBuilder.cs", label="Entry Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", span="48-48"];
m0_9 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", file="InstanceBuilder.cs", label="return Configurator.NumberToWordsConverter.ConvertToOrdinal(number);", span="50-50"];
m0_10 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", file="InstanceBuilder.cs", label="Exit Humanizer.NumberToWordsExtension.ToOrdinalWords(int)", span="48-48"];
m0_12 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs", label="Entry Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", span="61-61"];
m0_13 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs", label="return Configurator.NumberToWordsConverter.ConvertToOrdinal(number, gender);", span="63-63"];
m0_14 [cluster="Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", file="InstanceBuilder.cs", label="Exit Humanizer.NumberToWordsExtension.ToOrdinalWords(int, Humanizer.GrammaticalGender)", span="61-61"];
m0_11 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", file="InstanceBuilder.cs", label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.ConvertToOrdinal(int)", span="27-27"];
m0_0 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="InstanceBuilder.cs", label="Entry Humanizer.NumberToWordsExtension.ToWords(int)", span="14-14"];
m0_1 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="InstanceBuilder.cs", label="return Configurator.NumberToWordsConverter.Convert(number);", span="16-16"];
m0_2 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="InstanceBuilder.cs", label="Exit Humanizer.NumberToWordsExtension.ToWords(int)", span="14-14"];
m1_35 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", span="148-148"];
m1_36 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfWords, TruncateFrom.Left))", span="150-150"];
m1_37 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string)", span="148-148"];
m1_8 [cluster="string.Truncate(int, Humanizer.ITruncator, Humanizer.TruncateFrom)", file="InstanceBuilderTests.cs", label="Entry string.Truncate(int, Humanizer.ITruncator, Humanizer.TruncateFrom)", span="28-28"];
m1_19 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="79-79"];
m1_20 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedLength))", span="81-81"];
m1_21 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="79-79"];
m1_26 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="109-109"];
m1_27 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfWords))", span="111-111"];
m1_28 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="109-109"];
m1_44 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", span="194-194"];
m1_45 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfWords, TruncateFrom.Left))", span="196-196"];
m1_46 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncatorTruncateFromLeft(string, int, string, string)", span="194-194"];
m1_5 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="25-25"];
m1_6 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedLength))", span="27-27"];
m1_7 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="25-25"];
m1_23 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="94-94"];
m1_24 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfCharacters))", span="96-96"];
m1_25 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="94-94"];
m1_29 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", span="121-121"];
m1_30 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedLength, TruncateFrom.Left))", span="123-123"];
m1_31 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncatorTruncateFromLeft(string, int, string)", span="121-121"];
m1_18 [cluster="string.Truncate(int, string, Humanizer.TruncateFrom)", file="InstanceBuilderTests.cs", label="Entry string.Truncate(int, string, Humanizer.TruncateFrom)", span="41-41"];
m1_3 [cluster="string.Truncate(int)", file="InstanceBuilderTests.cs", label="Entry string.Truncate(int)", span="15-15"];
m1_0 [cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="13-13"];
m1_1 [cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length))", span="15-15"];
m1_2 [cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="13-13"];
m1_38 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", span="163-163"];
m1_39 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedLength, TruncateFrom.Left))", span="165-165"];
m1_40 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncatorTruncateFromLeft(string, int, string, string)", span="163-163"];
m1_41 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", span="178-178"];
m1_42 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfCharacters, TruncateFrom.Left))", span="180-180"];
m1_43 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string, string)", span="178-178"];
m1_4 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m1_32 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", span="134-134"];
m1_33 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfCharacters, TruncateFrom.Left))", span="136-136"];
m1_34 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncatorTruncateFromLeft(string, int, string)", span="134-134"];
m1_15 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="64-64"];
m1_16 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString))", span="66-66"];
m1_17 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="64-64"];
m1_9 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="37-37"];
m1_10 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfCharacters))", span="39-39"];
m1_11 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="37-37"];
m1_22 [cluster="string.Truncate(int, string, Humanizer.ITruncator, Humanizer.TruncateFrom)", file="InstanceBuilderTests.cs", label="Entry string.Truncate(int, string, Humanizer.ITruncator, Humanizer.TruncateFrom)", span="55-55"];
m1_12 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", file="InstanceBuilderTests.cs", label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="50-50"];
m1_13 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfWords))", span="52-52"];
m1_14 [cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", file="InstanceBuilderTests.cs", label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="50-50"];
m2_4 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="return string.Format(''menos {0}'', Convert(Math.Abs(number)));", span="33-33"];
m2_37 [cluster="System.Collections.Generic.List<T>.ToArray()", file="NameLookup.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m2_35 [cluster="string.Format(string, params object[])", file="NameLookup.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m2_3 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="number < 0", span="32-32"];
m2_12 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="(number / 1000) > 0", span="55-55"];
m2_13 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="parts.Add(number / 1000 == 1\r\n                    ? string.Format(''mil'')\r\n                    : string.Format(''{0} mil'', Convert(number / 1000)))", span="57-59"];
m2_14 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="number %= 1000", span="61-61"];
m2_49 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="NameLookup.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m2_9 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="(number / 1000000) > 0", span="46-46"];
m2_10 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="parts.Add(number / 1000000 == 1\r\n                    ? string.Format(''un millón'')\r\n                    : string.Format(''{0} millones'', Convert(number / 1000000)))", span="48-50"];
m2_11 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="number %= 1000000", span="52-52"];
m2_36 [cluster="System.Collections.Generic.List<T>.Add(T)", file="NameLookup.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m2_6 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="(number / 1000000000) > 0", span="37-37"];
m2_7 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="parts.Add(number / 1000000000 == 1\r\n                    ? string.Format(''mil millones'')\r\n                    : string.Format(''{0} mil millones'', Convert(number / 1000000000)))", span="39-41"];
m2_8 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="number %= 1000000000", span="43-43"];
m2_39 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="Entry Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="94-94"];
m2_40 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="string towords", span="96-96"];
m2_42 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="towords = Convert(number)", span="98-98"];
m2_41 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="!Ordinals.TryGetValue(number, out towords)", span="97-97"];
m2_43 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="gender == GrammaticalGender.Feminine", span="100-100"];
m2_44 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="towords = towords.TrimEnd('o') + ''a''", span="101-101"];
m2_46 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="towords = towords.TrimEnd('o')", span="103-103"];
m2_47 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="return towords;", span="105-105"];
m2_45 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="number % 10 == 1 || number % 10 == 3", span="102-102"];
m2_48 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", file="NameLookup.cs", label="Exit Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.ConvertToOrdinal(int, Humanizer.GrammaticalGender)", span="94-94"];
m2_32 [cluster="System.Math.Abs(int)", file="NameLookup.cs", label="Entry System.Math.Abs(int)", span="0-0"];
m2_33 [cluster="string.Format(string, object)", file="NameLookup.cs", label="Entry string.Format(string, object)", span="0-0"];
m2_38 [cluster="string.Join(string, params string[])", file="NameLookup.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m2_0 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="NameLookup.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m2_1 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", color=green, community=0, file="NameLookup.cs", label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", prediction=9, span="23-25"];
m2_2 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="NameLookup.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m2_15 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="(number / 100) > 0", span="64-64"];
m2_16 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="parts.Add(number == 100 ? string.Format(''cien'') : HundredsMap[(number / 100)])", span="66-66"];
m2_17 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="number %= 100", span="67-67"];
m2_18 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="number > 0", span="70-70"];
m2_19 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="number < 30", span="72-72"];
m2_20 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="parts.Add(UnitsMap[number])", span="73-73"];
m2_21 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="number > 20 && number < 30", span="74-74"];
m2_22 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="var lastPart = TensMap[number / 10]", span="75-75"];
m2_23 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="(number % 10) > 0", span="76-76"];
m2_24 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="lastPart += string.Format('' {0}'', UnitsMap[number % 10])", span="77-77"];
m2_26 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="var lastPart = TensMap[number / 10]", span="83-83"];
m2_27 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="(number % 10) > 0", span="84-84"];
m2_28 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="lastPart += string.Format('' y {0}'', UnitsMap[number % 10])", span="85-85"];
m2_5 [cluster="Unk.ShouldBeEquivalentTo", file="NameLookup.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m2_30 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="return string.Join('' '', parts.ToArray());", span="91-91"];
m2_25 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="parts.Add(lastPart)", span="79-79"];
m2_29 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="parts.Add(lastPart)", span="87-87"];
m2_31 [cluster="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", file="NameLookup.cs", label="Exit Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter.Convert(int)", span="27-27"];
m2_50 [cluster="string.TrimEnd(params char[])", file="NameLookup.cs", label="Entry string.TrimEnd(params char[])", span="0-0"];
m2_34 [cluster="System.Collections.Generic.List<T>.List()", file="NameLookup.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_51 [file="NameLookup.cs", label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", span=""];
m4_79 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string)", file="Tokenizer.cs", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string)", span="0-0"];
m4_153 [cluster="Humanizer.InflectorExtensions.Underscore(string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.Underscore(string)", span="297-297"];
m4_154 [cluster="Humanizer.InflectorExtensions.Underscore(string)", file="Tokenizer.cs", label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(input, @''([A-Z]+)([A-Z][a-z])'', ''$1_$2''), @''([a-z\d])([A-Z])'', ''$1_$2''), @''[-\s]'', ''_'').ToLower();", span="299-301"];
m4_155 [cluster="Humanizer.InflectorExtensions.Underscore(string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.Underscore(string)", span="297-297"];
m4_96 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.Pluralize(string, bool)", span="187-187"];
m4_97 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label="var result = ApplyRules(Plurals, word)", span="189-189"];
m4_100 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label="var asSingular = ApplyRules(Singulars, word)", span="194-194"];
m4_101 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label="var asSingularAsPlural = ApplyRules(Plurals, asSingular)", span="195-195"];
m4_98 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label=inputIsKnownToBeSingular, span="191-191"];
m4_99 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label="return result;", span="192-192"];
m4_102 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label="asSingular != null && asSingular != word && asSingular + ''s'' != word && asSingularAsPlural == word && result != word", span="196-196"];
m4_104 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label="return result;", span="199-199"];
m4_103 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label="return word;", span="197-197"];
m4_105 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.Pluralize(string, bool)", span="187-187"];
m4_143 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string, System.Text.RegularExpressions.MatchEvaluator)", file="Tokenizer.cs", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, System.Text.RegularExpressions.MatchEvaluator)", span="0-0"];
m4_73 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.Rule.Apply(string)", span="133-133"];
m4_74 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs", label="!_regex.IsMatch(word)", span="135-135"];
m4_76 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs", label="return _regex.Replace(word, _replacement);", span="140-140"];
m4_75 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs", label="return null;", span="137-137"];
m4_77 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.Rule.Apply(string)", span="133-133"];
m4_0 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.InflectorExtensions()", span="53-53"];
m4_5 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''(alias|status)$'', ''$1es'')", prediction=10, span="59-59"];
m4_4 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddPlural(''(octop|vir|alumn|fung)us$'', ''$1i'')", span="58-58"];
m4_6 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''(bu)s$'', ''$1ses'')", prediction=11, span="60-60"];
m4_7 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''(buffal|tomat|volcan)o$'', ''$1oes'')", prediction=12, span="61-61"];
m4_8 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''([ti])um$'', ''$1a'')", prediction=13, span="62-62"];
m4_9 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''sis$'', ''ses'')", prediction=14, span="63-63"];
m4_10 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''(?:([^f])fe|([lr])f)$'', ''$1$2ves'')", prediction=15, span="64-64"];
m4_11 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''(hive)$'', ''$1s'')", prediction=16, span="65-65"];
m4_12 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''([^aeiouy]|qu)y$'', ''$1ies'')", prediction=17, span="66-66"];
m4_13 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''(x|ch|ss|sh)$'', ''$1es'')", prediction=18, span="67-67"];
m4_14 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''(matr|vert|ind)ix|ex$'', ''$1ices'')", prediction=19, span="68-68"];
m4_15 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''([m|l])ouse$'', ''$1ice'')", prediction=20, span="69-69"];
m4_16 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''^(ox)$'', ''$1en'')", prediction=21, span="70-70"];
m4_17 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''(quiz)$'', ''$1zes'')", prediction=22, span="71-71"];
m4_18 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddPlural(''(campus)$'', ''$1es'')", prediction=23, span="72-72"];
m4_19 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''s$'', '''')", prediction=24, span="74-74"];
m4_20 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(n)ews$'', ''$1ews'')", prediction=25, span="75-75"];
m4_21 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''([ti])a$'', ''$1um'')", prediction=26, span="76-76"];
m4_22 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$'', ''$1$2sis'')", prediction=27, span="77-77"];
m4_23 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(^analy)ses$'', ''$1sis'')", prediction=28, span="78-78"];
m4_24 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''([^f])ves$'', ''$1fe'')", prediction=29, span="79-79"];
m4_25 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(hive)s$'', ''$1'')", prediction=30, span="80-80"];
m4_26 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(tive)s$'', ''$1'')", prediction=31, span="81-81"];
m4_27 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''([lr])ves$'', ''$1f'')", prediction=32, span="82-82"];
m4_28 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''([^aeiouy]|qu)ies$'', ''$1y'')", prediction=33, span="83-83"];
m4_29 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(s)eries$'', ''$1eries'')", prediction=34, span="84-84"];
m4_30 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(m)ovies$'', ''$1ovie'')", prediction=35, span="85-85"];
m4_31 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(x|ch|ss|sh)es$'', ''$1'')", prediction=36, span="86-86"];
m4_32 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''([m|l])ice$'', ''$1ouse'')", prediction=37, span="87-87"];
m4_33 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(bus)es$'', ''$1'')", prediction=38, span="88-88"];
m4_34 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(o)es$'', ''$1'')", prediction=39, span="89-89"];
m4_35 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(shoe)s$'', ''$1'')", prediction=40, span="90-90"];
m4_36 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(cris|ax|test)es$'', ''$1is'')", prediction=41, span="91-91"];
m4_37 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(octop|vir|alumn|fung)i$'', ''$1us'')", prediction=42, span="92-92"];
m4_38 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(alias|status)es$'', ''$1'')", prediction=43, span="93-93"];
m4_39 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddSingular(''^(ox)en'', ''$1'')", span="94-94"];
m4_40 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(vert|ind)ices$'', ''$1ex'')", prediction=44, span="95-95"];
m4_41 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(matr)ices$'', ''$1ix'')", prediction=45, span="96-96"];
m4_42 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(quiz)zes$'', ''$1'')", prediction=46, span="97-97"];
m4_43 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddSingular(''(campus)es$'', ''$1'')", prediction=47, span="98-98"];
m4_44 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddIrregular(''person'', ''people'')", prediction=48, span="100-100"];
m4_45 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddIrregular(''man'', ''men'')", prediction=49, span="101-101"];
m4_46 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddIrregular(''child'', ''children'')", prediction=50, span="102-102"];
m4_47 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddIrregular(''sex'', ''sexes'')", prediction=51, span="103-103"];
m4_48 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddIrregular(''move'', ''moves'')", prediction=52, span="104-104"];
m4_49 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddIrregular(''goose'', ''geese'')", prediction=53, span="105-105"];
m4_50 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", color=green, community=0, file="Tokenizer.cs", label="AddIrregular(''alumna'', ''alumnae'')", prediction=54, span="106-106"];
m4_51 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddIrregular(''criterion'', ''criteria'')", span="107-107"];
m4_3 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddPlural(''(ax|test)is$'', ''$1es'')", span="57-57"];
m4_1 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddPlural(''$'', ''s'')", span="55-55"];
m4_2 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddPlural(''s$'', ''s'')", span="56-56"];
m4_52 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddIrregular(''wave'',''waves'')", span="108-108"];
m4_53 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''equipment'')", span="110-110"];
m4_54 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''information'')", span="111-111"];
m4_62 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''aircraft'')", span="119-119"];
m4_55 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''rice'')", span="112-112"];
m4_56 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''money'')", span="113-113"];
m4_57 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''species'')", span="114-114"];
m4_58 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''series'')", span="115-115"];
m4_59 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''fish'')", span="116-116"];
m4_60 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''sheep'')", span="117-117"];
m4_61 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="AddUncountable(''deer'')", span="118-118"];
m4_63 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.InflectorExtensions()", span="53-53"];
m4_106 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", span="237-237"];
m4_123 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="IsUncountable(word)", span="242-242"];
m4_128 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="(result = rules[i].Apply(word)) != null", span="248-248"];
m4_121 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="word == null", span="239-239"];
m4_124 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="return word;", span="243-243"];
m4_125 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="var result = word", span="245-245"];
m4_126 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="int i = rules.Count - 1", span="246-246"];
m4_127 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="i >= 0", span="246-246"];
m4_129 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="i--", span="246-246"];
m4_130 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="return result;", span="253-253"];
m4_122 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="return null;", span="240-240"];
m4_131 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", span="237-237"];
m4_152 [cluster="string.Substring(int, int)", file="Tokenizer.cs", label="Entry string.Substring(int, int)", span="0-0"];
m4_68 [cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.Rule.Rule(string, string)", span="127-127"];
m4_69 [cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", file="Tokenizer.cs", label="_regex = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptionsUtil.Compiled)", span="129-129"];
m4_70 [cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", file="Tokenizer.cs", label="_replacement = replacement", span="130-130"];
m4_71 [cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.Rule.Rule(string, string)", span="127-127"];
m4_78 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string)", file="Tokenizer.cs", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0"];
m4_64 [cluster="Humanizer.InflectorExtensions.AddPlural(string, string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.AddPlural(string, string)", span="155-155"];
m4_88 [cluster="Humanizer.InflectorExtensions.AddPlural(string, string)", file="Tokenizer.cs", label="Plurals.Add(new Rule(rule, replacement))", span="157-157"];
m4_89 [cluster="Humanizer.InflectorExtensions.AddPlural(string, string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.AddPlural(string, string)", span="155-155"];
m4_65 [cluster="Humanizer.InflectorExtensions.AddSingular(string, string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.AddSingular(string, string)", span="160-160"];
m4_90 [cluster="Humanizer.InflectorExtensions.AddSingular(string, string)", file="Tokenizer.cs", label="Singulars.Add(new Rule(rule, replacement))", span="162-162"];
m4_91 [cluster="Humanizer.InflectorExtensions.AddSingular(string, string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.AddSingular(string, string)", span="160-160"];
m4_144 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="278-278"];
m4_145 [cluster="lambda expression", file="Tokenizer.cs", label="match.Groups[1].Value.ToUpper()", span="278-278"];
m4_146 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="278-278"];
m4_156 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string, string)", file="Tokenizer.cs", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, string)", span="0-0"];
m4_148 [cluster="Humanizer.InflectorExtensions.Camelize(string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.Camelize(string)", span="286-286"];
m4_150 [cluster="Humanizer.InflectorExtensions.Camelize(string)", file="Tokenizer.cs", label="return word.Substring(0, 1).ToLower() + word.Substring(1);", span="289-289"];
m4_149 [cluster="Humanizer.InflectorExtensions.Camelize(string)", file="Tokenizer.cs", label="string word = Pascalize(input)", span="288-288"];
m4_151 [cluster="Humanizer.InflectorExtensions.Camelize(string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.Camelize(string)", span="286-286"];
m4_66 [cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.AddIrregular(string, string)", span="144-144"];
m4_80 [cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", file="Tokenizer.cs", label="AddPlural(''('' + singular[0] + '')'' + singular.Substring(1) + ''$'', ''$1'' + plural.Substring(1))", span="146-146"];
m4_81 [cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", file="Tokenizer.cs", label="AddSingular(''('' + plural[0] + '')'' + plural.Substring(1) + ''$'', ''$1'' + singular.Substring(1))", span="147-147"];
m4_82 [cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.AddIrregular(string, string)", span="144-144"];
m4_140 [cluster="Humanizer.InflectorExtensions.Pascalize(string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.Pascalize(string)", span="276-276"];
m4_141 [cluster="Humanizer.InflectorExtensions.Pascalize(string)", file="Tokenizer.cs", label="return Regex.Replace(input, ''(?:^|_)(.)'', match => match.Groups[1].Value.ToUpper());", span="278-278"];
m4_142 [cluster="Humanizer.InflectorExtensions.Pascalize(string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.Pascalize(string)", span="276-276"];
m4_67 [cluster="Humanizer.InflectorExtensions.AddUncountable(string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.AddUncountable(string)", span="150-150"];
m4_84 [cluster="Humanizer.InflectorExtensions.AddUncountable(string)", file="Tokenizer.cs", label="Uncountables.Add(word.ToLower())", span="152-152"];
m4_85 [cluster="Humanizer.InflectorExtensions.AddUncountable(string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.AddUncountable(string)", span="150-150"];
m4_86 [cluster="string.ToLower()", file="Tokenizer.cs", label="Entry string.ToLower()", span="0-0"];
m4_111 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.Singularize(string, bool)", span="220-220"];
m4_112 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label="var result = ApplyRules(Singulars, word)", span="223-223"];
m4_115 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label="var asPlural = ApplyRules(Plurals, word)", span="229-229"];
m4_116 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label="var asPluralAsSingular = ApplyRules(Singulars, asPlural)", span="230-230"];
m4_113 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label=inputIsKnownToBePlural, span="225-225"];
m4_114 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label="return result;", span="226-226"];
m4_117 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label="asPlural != word && word + ''s'' != asPlural && asPluralAsSingular == word && result != word", span="231-231"];
m4_119 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label="return result ?? word;", span="234-234"];
m4_118 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label="return word;", span="232-232"];
m4_120 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.Singularize(string, bool)", span="220-220"];
m4_87 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m4_132 [cluster="Humanizer.InflectorExtensions.IsUncountable(string)", file="Tokenizer.cs", label="Entry Humanizer.InflectorExtensions.IsUncountable(string)", span="256-256"];
m4_133 [cluster="Humanizer.InflectorExtensions.IsUncountable(string)", file="Tokenizer.cs", label="return Uncountables.Contains(word.ToLower());", span="258-258"];
m4_134 [cluster="Humanizer.InflectorExtensions.IsUncountable(string)", file="Tokenizer.cs", label="Exit Humanizer.InflectorExtensions.IsUncountable(string)", span="256-256"];
m4_147 [cluster="string.ToUpper()", file="Tokenizer.cs", label="Entry string.ToUpper()", span="0-0"];
m4_72 [cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", file="Tokenizer.cs", label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0"];
m4_135 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m4_83 [cluster="string.Substring(int)", file="Tokenizer.cs", label="Entry string.Substring(int)", span="0-0"];
m4_164 [file="Tokenizer.cs", label="Humanizer.InflectorExtensions.Rule", span=""];
d5 -> d21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d35 -> d46  [color=green, key=1, label=string, style=dashed];
d35 -> d61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
d35 -> d68  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
d35 -> d63  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d35 -> d73  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d35 -> d53  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
d44 -> d46  [color=green, key=1, label=changeType, style=dashed];
d44 -> d63  [color=darkseagreen4, key=1, label=string, style=dashed];
d44 -> d73  [color=darkseagreen4, key=1, label=string, style=dashed];
d44 -> d65  [color=darkseagreen4, key=1, label=string, style=dashed];
d44 -> d53  [color=darkseagreen4, key=1, label=string, style=dashed];
d45 -> d83  [color=darkseagreen4, key=1, label=string, style=dashed];
d90 -> d95  [color=green, key=1, label="System.Type", style=dashed];
d92 -> d96  [color=green, key=1, label=parsedValue, style=dashed];
d31 -> d33  [color=darkseagreen4, key=1, label=result, style=dashed];
d6 -> d21  [color=darkseagreen4, key=1, label=type, style=dashed];
d6 -> d8  [color=darkseagreen4, key=1, label=type, style=dashed];
d7 -> d20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d60 -> d68  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
d60 -> d63  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
d60 -> d73  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
d60 -> d78  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
d62 -> d73  [color=darkseagreen4, key=1, label=type, style=dashed];
d62 -> d78  [color=darkseagreen4, key=1, label=type, style=dashed];
d63 -> d65  [color=darkseagreen4, key=1, label=withValue, style=dashed];
d32 -> d38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d32 -> d40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d8 -> d24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d8 -> d28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d102 -> d21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d103 -> d21  [color=darkseagreen4, key=1, label=type, style=dashed];
d104 -> d61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
d104 -> d68  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
d104 -> d53  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
d105 -> d63  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d105 -> d73  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d51 -> d63  [color=darkseagreen4, key=1, label=string, style=dashed];
d51 -> d73  [color=darkseagreen4, key=1, label=string, style=dashed];
d51 -> d53  [color=darkseagreen4, key=1, label=string, style=dashed];
d51 -> d65  [color=darkseagreen4, key=1, label=string, style=dashed];
d107 -> d68  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
d107 -> d73  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
d107 -> d78  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
d106 -> d63  [color=darkseagreen4, key=1, label=string, style=dashed];
d106 -> d73  [color=darkseagreen4, key=1, label=string, style=dashed];
d106 -> d65  [color=darkseagreen4, key=1, label=string, style=dashed];
d108 -> d73  [color=darkseagreen4, key=1, label=type, style=dashed];
d108 -> d78  [color=darkseagreen4, key=1, label=type, style=dashed];
d81 -> d83  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_14 -> m2_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_14 -> m2_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_14 -> m2_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_14 -> m2_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_14 -> m2_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_14 -> m2_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_14 -> m2_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_11 -> m2_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_11 -> m2_15  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_11 -> m2_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_11 -> m2_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_11 -> m2_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_11 -> m2_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_11 -> m2_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_11 -> m2_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_11 -> m2_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_10  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_12  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_15  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_8 -> m2_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_39 -> m2_41  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_39 -> m2_43  [color=darkseagreen4, key=1, label="Humanizer.GrammaticalGender", style=dashed];
m2_39 -> m2_45  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_42 -> m2_47  [color=darkseagreen4, key=1, label=towords, style=dashed];
m2_41 -> m2_47  [color=darkseagreen4, key=1, label=towords, style=dashed];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_4  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_6  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_7  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_9  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_10  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_12  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_15  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_0 -> m2_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_17 -> m2_19  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_17 -> m2_20  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_17 -> m2_21  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_17 -> m2_23  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_17 -> m2_27  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_22 -> m2_25  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m2_26 -> m2_29  [color=darkseagreen4, key=1, label=lastPart, style=dashed];
m2_5 -> m2_7  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_5 -> m2_10  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_5 -> m2_13  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_5 -> m2_16  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_5 -> m2_20  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_5 -> m2_25  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_5 -> m2_29  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_5 -> m2_30  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_51 -> m2_4  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m2_51 -> m2_7  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m2_51 -> m2_10  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m2_51 -> m2_13  [color=darkseagreen4, key=1, label="Humanizer.Localisation.NumberToWords.SpanishNumberToWordsConverter", style=dashed];
m4_96 -> m4_98  [color=darkseagreen4, key=1, label=bool, style=dashed];
m4_96 -> m4_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_96 -> m4_103  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_97 -> m4_99  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_97 -> m4_102  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_97 -> m4_104  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_100 -> m4_102  [color=darkseagreen4, key=1, label=asSingular, style=dashed];
m4_73 -> m4_76  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_106 -> m4_123  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_106 -> m4_124  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_125 -> m4_130  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_126 -> m4_129  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_129 -> m4_129  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_66 -> m4_81  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_141 -> m4_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_111 -> m4_113  [color=darkseagreen4, key=1, label=bool, style=dashed];
m4_111 -> m4_117  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_111 -> m4_118  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_111 -> m4_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_112 -> m4_114  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_112 -> m4_117  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_112 -> m4_119  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_115 -> m4_117  [color=darkseagreen4, key=1, label=asPlural, style=dashed];
m4_164 -> m4_74  [color=darkseagreen4, key=1, label="Humanizer.InflectorExtensions.Rule", style=dashed];
m4_164 -> m4_76  [color=darkseagreen4, key=1, label="Humanizer.InflectorExtensions.Rule", style=dashed];
}
