digraph  {
d1 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=green, community=0, label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", prediction=0, span="22-36"];
d0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="20-20"];
d2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="20-20"];
d4 [cluster="lambda expression", label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="24-27"];
d7 [cluster="lambda expression", color=green, community=0, label="return options.Select(s => Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", prediction=1, span="31-33"];
d6 [cluster="lambda expression", label="groups.Count() > 1", span="29-29"];
d9 [cluster="lambda expression", label="Exit lambda expression", span="22-36"];
d13 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d26 [cluster="lambda expression", label="Entry lambda expression", span="31-33"];
d8 [cluster="lambda expression", color=green, community=0, label="return Enumerable.Empty<Nothing<Error>>();", prediction=2, span="35-35"];
d14 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
d27 [cluster="lambda expression", color=green, community=0, label="Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", prediction=3, span="31-33"];
d28 [cluster="lambda expression", label="Exit lambda expression", span="31-33"];
d29 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
d30 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
d31 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
d33 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, label="return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", prediction=4, span="41-64"];
d32 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="39-39"];
d34 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="39-39"];
d36 [cluster="lambda expression", color=green, community=0, label="List<string> setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", prediction=4, span="43-47"];
d37 [cluster="lambda expression", color=green, community=0, label="var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", prediction=4, span="49-58"];
d35 [cluster="lambda expression", label="Entry lambda expression", span="41-64"];
d10 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
d42 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
d45 [cluster="lambda expression", label="Entry lambda expression", span="45-46"];
d49 [cluster="lambda expression", label="Entry lambda expression", span="47-47"];
d56 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="52-54"];
d38 [cluster="lambda expression", label="requiredButEmpty.Any()", span="59-59"];
d43 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d52 [cluster="lambda expression", label="Entry lambda expression", span="51-51"];
d55 [cluster="lambda expression", label="Entry lambda expression", span="52-54"];
d60 [cluster="lambda expression", label="Entry lambda expression", span="56-58"];
d39 [cluster="lambda expression", label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="60-61"];
d46 [cluster="lambda expression", color=green, community=0, label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", prediction=7, span="45-46"];
d47 [cluster="lambda expression", label="Exit lambda expression", span="45-46"];
d18 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d48 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
d50 [cluster="lambda expression", color=green, community=0, label="((OptionSpecification)s.Specification).SetName", prediction=8, span="47-47"];
d51 [cluster="lambda expression", label="Exit lambda expression", span="47-47"];
d3 [cluster="lambda expression", label="Entry lambda expression", span="22-36"];
d5 [cluster="lambda expression", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="28-28"];
d15 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
d19 [cluster="lambda expression", label="Entry lambda expression", span="26-27"];
d12 [cluster="Unk.Count", label="Entry Unk.Count", span=""];
d76 [cluster="lambda expression", label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="81-82"];
d40 [cluster="lambda expression", label="return Enumerable.Empty<Nothing<Error>>();", span="63-63"];
d77 [cluster="lambda expression", label="return Enumerable.Empty<Nothing<Error>>();", span="84-84"];
d66 [cluster="lambda expression", label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="60-61"];
d84 [cluster="lambda expression", label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="81-82"];
d41 [cluster="lambda expression", label="Exit lambda expression", span="41-64"];
d74 [cluster="lambda expression", label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="71-78"];
d87 [label=setsWithTrue, span=""];
d57 [cluster="lambda expression", label="Exit lambda expression", span="52-54"];
d58 [cluster="Unk.IsNothing", label="Entry Unk.IsNothing", span=""];
d59 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
d44 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d54 [cluster="lambda expression", label="Exit lambda expression", span="51-51"];
d53 [cluster="lambda expression", label="sp.Specification.IsOption()", span="51-51"];
d62 [cluster="lambda expression", label="Exit lambda expression", span="56-58"];
d61 [cluster="lambda expression", label="sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="56-58"];
d65 [cluster="lambda expression", label="Entry lambda expression", span="60-61"];
d16 [cluster="lambda expression", label="sp.Specification.IsOption()", span="25-25"];
d80 [cluster="lambda expression", label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="72-77"];
d11 [cluster="Unk.GroupBy", label="Entry Unk.GroupBy", span=""];
d23 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
d17 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
d21 [cluster="lambda expression", label="Exit lambda expression", span="26-27"];
d20 [cluster="lambda expression", label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="26-27"];
d75 [cluster="lambda expression", label="options.Any()", span="79-79"];
d78 [cluster="lambda expression", label="Exit lambda expression", span="69-85"];
d83 [cluster="lambda expression", label="Entry lambda expression", span="81-82"];
d67 [cluster="lambda expression", label="Exit lambda expression", span="60-61"];
d68 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
d69 [cluster="Unk.FromSpecification", label="Entry Unk.FromSpecification", span=""];
d85 [cluster="lambda expression", label="Exit lambda expression", span="81-82"];
d86 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
d71 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="69-85"];
d73 [cluster="lambda expression", label="Entry lambda expression", span="69-85"];
d79 [cluster="lambda expression", label="Entry lambda expression", span="72-77"];
d63 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d64 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
d81 [cluster="lambda expression", label="Exit lambda expression", span="72-77"];
d82 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
d25 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
d24 [cluster="lambda expression", label="((OptionSpecification)g.Specification).SetName", span="28-28"];
d22 [cluster="Unk.IsJust", label="Entry Unk.IsJust", span=""];
d70 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="67-67"];
d72 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="67-67"];
m0_31 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", span="49-49"];
m0_32 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="var expected = ''a default''", span="51-51"];
m0_33 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="Parser.Default.ParseArguments<FakeOptions>(new[] { ''-i'', ''aaa'' })\r\n                .WithParsed(opts => expected = opts.StringValue)\r\n                .WithNotParsed(_ => expected = ''changed'')", span="52-54"];
m0_34 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="''changed''.ShouldBeEquivalentTo(expected)", span="56-56"];
m0_35 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", span="49-49"];
m0_11 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", span="28-28"];
m0_12 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="var expected = ''a default''", span="30-30"];
m0_13 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="Parser.Default.ParseArguments<FakeOptions>(new[] { ''-i'', ''aaa'' })\r\n                .WithNotParsed(_ => expected = ''changed'')", span="31-32"];
m0_14 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="''changed''.ShouldBeEquivalentTo(expected)", span="34-34"];
m0_15 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", span="28-28"];
m0_42 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", span="60-60"];
m0_43 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs", label="var expected = Parser.Default.ParseArguments<FakeOptions>(new[] { ''--stringvalue'', ''value'' })\r\n                .Return(_ => 0, _ => -1)", span="62-63"];
m0_44 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs", label="0.ShouldBeEquivalentTo(expected)", span="65-65"];
m0_45 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_sucessful_parsing_into_exit_code()", span="60-60"];
m0_5 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84"];
m0_0 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", span="18-18"];
m0_1 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="var expected = string.Empty", span="20-20"];
m0_2 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="Parser.Default.ParseArguments<FakeOptions>(new[] { ''--stringvalue'', ''value'' })\r\n                .WithParsed(opts => expected = opts.StringValue)", span="21-22"];
m0_3 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="''value''.ShouldBeEquivalentTo(expected)", span="24-24"];
m0_4 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", span="18-18"];
m0_6 [cluster="CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", span="20-20"];
m0_20 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", span="38-38"];
m0_21 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="var expected = string.Empty", span="40-40"];
m0_22 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="Parser.Default.ParseArguments<FakeOptions>(new[] { ''--stringvalue'', ''value'' })\r\n                .WithParsed(opts => expected = opts.StringValue)\r\n                .WithNotParsed(_ => expected = ''changed'')", span="41-43"];
m0_23 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="''value''.ShouldBeEquivalentTo(expected)", span="45-45"];
m0_24 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", span="38-38"];
m0_60 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="72-72"];
m0_8 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="22-22"];
m0_9 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="expected = opts.StringValue", span="22-22"];
m0_10 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="22-22"];
m0_17 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="32-32"];
m0_18 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="expected = ''changed''", span="32-32"];
m0_19 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="32-32"];
m0_25 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="42-42"];
m0_28 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="43-43"];
m0_26 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="expected = opts.StringValue", span="42-42"];
m0_27 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="42-42"];
m0_29 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="expected = ''changed''", span="43-43"];
m0_30 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="43-43"];
m0_36 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="53-53"];
m0_39 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="54-54"];
m0_37 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="expected = opts.StringValue", span="53-53"];
m0_38 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="53-53"];
m0_40 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="expected = ''changed''", span="54-54"];
m0_41 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="54-54"];
m0_47 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="63-63"];
m0_50 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="63-63"];
m0_48 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label=0, span="63-63"];
m0_49 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="63-63"];
m0_51 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="-1", span="63-63"];
m0_52 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="63-63"];
m0_57 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Entry lambda expression", span="72-72"];
m0_58 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label=0, span="72-72"];
m0_59 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="72-72"];
m0_61 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="-1", span="72-72"];
m0_62 [cluster="lambda expression", file="ParserResultExtensionsTests.cs", label="Exit lambda expression", span="72-72"];
m0_46 [cluster="CommandLine.ParserResult<TSource>.Return<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.ParserResult<TSource>.Return<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", span="57-57"];
m0_16 [cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="38-38"];
m0_53 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", span="69-69"];
m0_54 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs", label="var expected = Parser.Default.ParseArguments<FakeOptions>(new[] { ''-i'', ''aaa'' })\r\n                .Return(_ => 0, _ => -1)", span="71-72"];
m0_55 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs", label="(-1).ShouldBeEquivalentTo(expected)", span="74-74"];
m0_56 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Turn_failed_parsing_into_exit_code()", span="69-69"];
m0_7 [cluster="Unk.ShouldBeEquivalentTo", file="ParserResultExtensionsTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
d4 -> d7  [color=green, key=1, label=options, style=dashed];
d4 -> d15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d4 -> d19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d7 -> d26  [color=green, key=1, label="lambda expression", style=dashed];
d33 -> d36  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d33 -> d37  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d36 -> d45  [color=green, key=1, label="lambda expression", style=dashed];
d36 -> d49  [color=green, key=1, label="lambda expression", style=dashed];
d36 -> d56  [color=green, key=1, label=setsWithTrue, style=dashed];
d37 -> d52  [color=green, key=1, label="lambda expression", style=dashed];
d37 -> d55  [color=green, key=1, label="lambda expression", style=dashed];
d37 -> d60  [color=green, key=1, label="lambda expression", style=dashed];
d37 -> d39  [color=green, key=1, label=requiredButEmpty, style=dashed];
d35 -> d37  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
d39 -> d65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d5 -> d23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d76 -> d83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d74 -> d76  [color=darkseagreen4, key=1, label=options, style=dashed];
d74 -> d79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d87 -> d56  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m0_33 -> m0_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_33 -> m0_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_13 -> m0_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_43 -> m0_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_43 -> m0_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_22 -> m0_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_22 -> m0_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_54 -> m0_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_54 -> m0_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
}
