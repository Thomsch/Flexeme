digraph  {
m0_4 [label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="57-57", cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", file="InstanceBuilderTests.cs"];
m0_5 [label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="57-57", cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", file="InstanceBuilderTests.cs"];
m0_0 [label="Entry CommandLine.CommandLineParserException.CommandLineParserException()", span="48-48", cluster="CommandLine.CommandLineParserException.CommandLineParserException()", file="InstanceBuilderTests.cs"];
m0_1 [label="Exit CommandLine.CommandLineParserException.CommandLineParserException()", span="48-48", cluster="CommandLine.CommandLineParserException.CommandLineParserException()", file="InstanceBuilderTests.cs"];
m0_6 [label="Entry CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="62-62", cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="InstanceBuilderTests.cs"];
m0_7 [label="Exit CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="62-62", cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="InstanceBuilderTests.cs"];
m0_2 [label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string)", span="52-52", cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", file="InstanceBuilderTests.cs"];
m0_3 [label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string)", span="52-52", cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", file="InstanceBuilderTests.cs"];
m1_46 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate", file="ParserResultExtensions.cs"];
m1_65 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ParserResultExtensions.cs"];
m1_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="ParserResultExtensions.cs"];
m1_108 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="ParserResultExtensions.cs"];
m1_55 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="ParserResultExtensions.cs"];
m1_44 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="ParserResultExtensions.cs"];
m1_101 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_71 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="ParserResultExtensions.cs"];
m1_115 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="ParserResultExtensions.cs"];
m1_130 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26", cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", file="ParserResultExtensions.cs"];
m1_90 [label="Entry Unk.>", span="", cluster="Unk.>", file="ParserResultExtensions.cs"];
m1_18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserResultExtensions.cs"];
m1_58 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="ParserResultExtensions.cs"];
m1_70 [label="Entry System.Type.CreateDefaultForImmutable()", span="122-122", cluster="System.Type.CreateDefaultForImmutable()", file="ParserResultExtensions.cs"];
m1_74 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="ParserResultExtensions.cs"];
m1_68 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="ParserResultExtensions.cs"];
m1_76 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="ParserResultExtensions.cs"];
m1_123 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="ParserResultExtensions.cs"];
m1_119 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="ParserResultExtensions.cs"];
m1_86 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="ParserResultExtensions.cs"];
m1_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserResultExtensions.cs"];
m1_67 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor", file="ParserResultExtensions.cs"];
m1_50 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="ParserResultExtensions.cs"];
m1_60 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="ParserResultExtensions.cs"];
m1_53 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ParserResultExtensions.cs"];
m1_48 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ParserResultExtensions.cs"];
m1_51 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="ParserResultExtensions.cs"];
m1_45 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="ParserResultExtensions.cs"];
m1_140 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_4 [label="Entry lambda expression", span="21-28", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-26", cluster="lambda expression", color=green, community=0, file="ParserResultExtensions.cs"];
m1_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_7 [label="return explodedTokens;", span="27-27", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_15 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="26-26", cluster="lambda expression", color=green, community=0, file="ParserResultExtensions.cs"];
m1_17 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_88 [label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-56", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_95 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="72-72", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_99 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="77-77", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_103 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="83-83", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_106 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="87-87", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_8 [label="Exit lambda expression", span="21-28", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_11 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_13 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_77 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_87 [label="Entry lambda expression", span="52-56", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_89 [label="Exit lambda expression", span="52-56", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_91 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_94 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_96 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_98 [label="Entry lambda expression", span="77-77", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_100 [label="Exit lambda expression", span="77-77", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_102 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_104 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_105 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_107 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_109 [label="Entry lambda expression", span="94-94", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_81 [label="Entry lambda expression", span="43-44", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_79 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_78 [label="f().GetType()", span="41-41", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_93 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_92 [label="f()", span="54-54", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_112 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_116 [label="Entry lambda expression", span="98-98", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_120 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_124 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_127 [label="Entry lambda expression", span="103-105", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_131 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_111 [label="Exit lambda expression", span="94-94", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_110 [label="f()", span="94-94", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_83 [label="Exit lambda expression", span="43-44", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_82 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="43-44", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_137 [label="Entry lambda expression", span="114-114", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_114 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_113 [label="sp.Value.IsJust()", span="97-97", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_118 [label="Exit lambda expression", span="98-98", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_117 [label="sp.Value.FromJust()", span="98-98", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_122 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_121 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="100-100", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_126 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_125 [label="sp.Specification.DefaultValue.FromJust()", span="101-101", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_129 [label="Exit lambda expression", span="103-105", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_128 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="103-105", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_133 [label="Exit lambda expression", span="106-106", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_132 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="106-106", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_139 [label="Exit lambda expression", span="114-114", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_138 [label=v, span="114-114", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_141 [label=d, span="115-115", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_142 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="ParserResultExtensions.cs"];
m1_49 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ParserResultExtensions.cs"];
m1_73 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="ParserResultExtensions.cs"];
m1_80 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ParserResultExtensions.cs"];
m1_59 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="ParserResultExtensions.cs"];
m1_75 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="ParserResultExtensions.cs"];
m1_135 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="ParserResultExtensions.cs"];
m1_136 [label="Entry System.Type.CreateEmptyArray()", span="101-101", cluster="System.Type.CreateEmptyArray()", file="ParserResultExtensions.cs"];
m1_69 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="ParserResultExtensions.cs"];
m1_134 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="ParserResultExtensions.cs"];
m1_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="ParserResultExtensions.cs"];
m1_84 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserResultExtensions.cs"];
m1_97 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserResultExtensions.cs"];
m1_64 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="ParserResultExtensions.cs"];
m1_56 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="ParserResultExtensions.cs"];
m1_63 [label="Entry System.Type.IsMutable()", span="115-115", cluster="System.Type.IsMutable()", file="ParserResultExtensions.cs"];
m1_85 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserResultExtensions.cs"];
m1_47 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="ParserResultExtensions.cs"];
m1_0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="19-31", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="ParserResultExtensions.cs"];
m1_2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_19 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="41-41", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_23 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="52-56", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_24 [label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="58-58", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_26 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="66-66", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_28 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="70-72", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_29 [label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="74-78", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_30 [label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="80-83", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_31 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="85-87", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_35 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="94-94", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_25 [label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    makeDefault(),\r\n                    new[] { new HelpRequestedError() });", span="60-63", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_42 [label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="123-130", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="43-44", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_34 [label="typeInfo.IsMutable()", span="92-92", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="48-50", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_27 [label="var tokens = tokenizerResult.Value", span="68-68", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_32 [label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="89-89", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_36 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="95-106", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_41 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="120-121", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_40 [label="instance = (T)ctor.Invoke(values)", span="117-117", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_21 [label="var specs = from pt in specProps select pt.Specification", span="46-46", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_38 [label="var ctor = t.GetConstructor((from p in specProps select p.Specification.ConversionType).ToArray())", span="111-111", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_39 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="112-116", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_33 [label="T instance", span="91-91", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_37 [label="var t = typeof(T)", span="110-110", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_43 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ParserResultExtensions.cs"];
m1_72 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="ParserResultExtensions.cs"];
m1_66 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="ParserResultExtensions.cs"];
m1_52 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ParserResultExtensions.cs"];
m1_61 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="ParserResultExtensions.cs"];
m1_54 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="ParserResultExtensions.cs"];
m1_62 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="ParserResultExtensions.cs"];
m1_57 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="ParserResultExtensions.cs"];
m1_143 [label="System.StringComparer", span="", file="ParserResultExtensions.cs"];
m1_144 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="ParserResultExtensions.cs"];
m1_145 [label="CommandLine.Infrastructure.Maybe<System.Func<T>>", span="", file="ParserResultExtensions.cs"];
m1_146 [label=specProps, span="", file="ParserResultExtensions.cs"];
m1_147 [label="System.StringComparer", span="", file="ParserResultExtensions.cs"];
m1_148 [label=optionSpecs, span="", file="ParserResultExtensions.cs"];
m1_149 [label="System.Globalization.CultureInfo", span="", file="ParserResultExtensions.cs"];
m1_150 [label=token, span="", file="ParserResultExtensions.cs"];
m3_52 [label="Entry CommandLine.Core.Specification.GetSetName()", span="80-80", cluster="CommandLine.Core.Specification.GetSetName()", file="SpecificationPropertyRules.cs"];
m3_0 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m3_1 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m3_2 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m3_19 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs"];
m3_59 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m3_60 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="54-70", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=red, community=0, file="SpecificationPropertyRules.cs"];
m3_61 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m3_57 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m3_40 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="SpecificationPropertyRules.cs"];
m3_10 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SpecificationPropertyRules.cs"];
m3_14 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs"];
m3_58 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs"];
m3_73 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs"];
m3_51 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs"];
m3_78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m3_75 [label="Entry lambda expression", span="66-67", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_4 [label="var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_3 [label="Entry lambda expression", span="20-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_5 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_15 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_7 [label="return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_6 [label="groups.Count() > 1", span="24-24", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_20 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_8 [label="return Enumerable.Empty<Nothing<Error>>();", span="28-28", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_9 [label="Exit lambda expression", span="20-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_23 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_16 [label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_17 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_21 [label="((OptionSpecification)g.Specification).SetName", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_22 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_24 [label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_25 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_33 [label="List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList()", span="36-38", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_34 [label="var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList()", span="40-43", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_32 [label="Entry lambda expression", span="34-49", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_41 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_44 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_49 [label="sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())", span="41-43", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_35 [label="requiredButEmpty.Any()", span="44-44", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_48 [label="Entry lambda expression", span="41-43", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_36 [label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="45-46", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_37 [label="return Enumerable.Empty<Nothing<Error>>();", span="48-48", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_38 [label="Exit lambda expression", span="34-49", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_54 [label="Entry lambda expression", span="45-46", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_42 [label="sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required", span="37-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_43 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_45 [label="x.Specification.GetSetName()", span="38-38", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_46 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_50 [label="Exit lambda expression", span="41-43", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_55 [label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="45-46", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_56 [label="Exit lambda expression", span="45-46", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_63 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    )", span="56-63", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m3_62 [label="Entry lambda expression", span="54-70", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_64 [label="options.Any()", span="64-64", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m3_68 [label="Entry lambda expression", span="57-62", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_65 [label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="66-67", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m3_66 [label="return Enumerable.Empty<Nothing<Error>>();", span="69-69", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m3_67 [label="Exit lambda expression", span="54-70", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_69 [label="sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )", span="57-62", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m3_70 [label="Exit lambda expression", span="57-62", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_76 [label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="66-67", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m3_77 [label="Exit lambda expression", span="66-67", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m3_72 [label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70", cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="SpecificationPropertyRules.cs"];
m3_29 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m3_30 [label="return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-49", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0, file="SpecificationPropertyRules.cs"];
m3_31 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m3_28 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationPropertyRules.cs"];
m3_13 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SpecificationPropertyRules.cs"];
m3_71 [label="Entry System.Type.ToDescriptorKind()", span="22-22", cluster="System.Type.ToDescriptorKind()", file="SpecificationPropertyRules.cs"];
m3_39 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SpecificationPropertyRules.cs"];
m3_26 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m3_18 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs"];
m3_27 [label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60", cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SpecificationPropertyRules.cs"];
m3_47 [label="Entry Unk.GetSetName", span="", cluster="Unk.GetSetName", file="SpecificationPropertyRules.cs"];
m3_11 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs"];
m3_12 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="SpecificationPropertyRules.cs"];
m3_53 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="SpecificationPropertyRules.cs"];
m3_74 [label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75", cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="SpecificationPropertyRules.cs"];
m3_79 [label=setsWithTrue, span="", file="SpecificationPropertyRules.cs"];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_4  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_6  [key=0, style=bold, color=blue];
m0_2 -> m0_3  [key=0, style=solid];
m0_3 -> m0_2  [key=0, style=bold, color=blue];
m1_140 -> m1_141  [key=0, style=solid];
m1_4 -> m1_6  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_4 -> m1_16  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_6 -> m1_7  [key=0, style=solid, color=green];
m1_6 -> m1_10  [key=2, style=dotted, color=green];
m1_6 -> m1_15  [key=1, style=dashed, color=green, label="lambda expression"];
m1_5 -> m1_6  [key=0, style=solid, color=green];
m1_5 -> m1_9  [key=2, style=dotted];
m1_5 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_7 -> m1_8  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid, color=green];
m1_16 -> m1_17  [key=0, style=solid, color=green];
m1_16 -> m1_18  [key=2, style=dotted, color=green];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [key=2, style=dotted];
m1_88 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_63  [key=2, style=dotted];
m1_88 -> m1_64  [key=2, style=dotted];
m1_88 -> m1_44  [key=2, style=dotted];
m1_88 -> m1_66  [key=2, style=dotted];
m1_88 -> m1_90  [key=2, style=dotted];
m1_88 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_97  [key=2, style=dotted];
m1_99 -> m1_100  [key=0, style=solid];
m1_99 -> m1_101  [key=2, style=dotted];
m1_103 -> m1_104  [key=0, style=solid];
m1_103 -> m1_101  [key=2, style=dotted];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_108  [key=2, style=dotted];
m1_8 -> m1_4  [key=0, style=bold, color=blue];
m1_11 -> m1_12  [key=0, style=solid];
m1_13 -> m1_11  [key=0, style=bold, color=blue];
m1_77 -> m1_78  [key=0, style=solid];
m1_87 -> m1_88  [key=0, style=solid];
m1_89 -> m1_87  [key=0, style=bold, color=blue];
m1_91 -> m1_92  [key=0, style=solid];
m1_94 -> m1_95  [key=0, style=solid];
m1_96 -> m1_94  [key=0, style=bold, color=blue];
m1_98 -> m1_99  [key=0, style=solid];
m1_100 -> m1_98  [key=0, style=bold, color=blue];
m1_102 -> m1_103  [key=0, style=solid];
m1_104 -> m1_102  [key=0, style=bold, color=blue];
m1_105 -> m1_106  [key=0, style=solid];
m1_107 -> m1_105  [key=0, style=bold, color=blue];
m1_109 -> m1_110  [key=0, style=solid];
m1_81 -> m1_82  [key=0, style=solid];
m1_79 -> m1_77  [key=0, style=bold, color=blue];
m1_78 -> m1_51  [key=2, style=dotted];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_80  [key=2, style=dotted];
m1_93 -> m1_91  [key=0, style=bold, color=blue];
m1_92 -> m1_51  [key=2, style=dotted];
m1_92 -> m1_93  [key=0, style=solid];
m1_112 -> m1_113  [key=0, style=solid];
m1_116 -> m1_117  [key=0, style=solid];
m1_120 -> m1_121  [key=0, style=solid];
m1_124 -> m1_125  [key=0, style=solid];
m1_127 -> m1_128  [key=0, style=solid];
m1_131 -> m1_132  [key=0, style=solid];
m1_111 -> m1_109  [key=0, style=bold, color=blue];
m1_110 -> m1_51  [key=2, style=dotted];
m1_110 -> m1_111  [key=0, style=solid];
m1_83 -> m1_81  [key=0, style=bold, color=blue];
m1_82 -> m1_83  [key=0, style=solid];
m1_82 -> m1_84  [key=2, style=dotted];
m1_82 -> m1_85  [key=2, style=dotted];
m1_82 -> m1_86  [key=2, style=dotted];
m1_137 -> m1_138  [key=0, style=solid];
m1_114 -> m1_112  [key=0, style=bold, color=blue];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_115  [key=2, style=dotted];
m1_118 -> m1_116  [key=0, style=bold, color=blue];
m1_117 -> m1_118  [key=0, style=solid];
m1_117 -> m1_119  [key=2, style=dotted];
m1_122 -> m1_120  [key=0, style=bold, color=blue];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_123  [key=2, style=dotted];
m1_121 -> m1_115  [key=2, style=dotted];
m1_126 -> m1_124  [key=0, style=bold, color=blue];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_119  [key=2, style=dotted];
m1_129 -> m1_127  [key=0, style=bold, color=blue];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_123  [key=2, style=dotted];
m1_128 -> m1_130  [key=2, style=dotted];
m1_133 -> m1_131  [key=0, style=bold, color=blue];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_134  [key=2, style=dotted];
m1_132 -> m1_135  [key=2, style=dotted];
m1_132 -> m1_136  [key=2, style=dotted];
m1_139 -> m1_137  [key=0, style=bold, color=blue];
m1_138 -> m1_139  [key=0, style=solid];
m1_141 -> m1_142  [key=0, style=solid];
m1_142 -> m1_140  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_0 -> m1_6  [key=1, style=dashed, color=green, label="System.StringComparer"];
m1_0 -> m1_16  [key=1, style=dashed, color=green, label="System.StringComparer"];
m1_0 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_3  [key=2, style=dotted, color=green];
m1_1 -> m1_4  [key=1, style=dashed, color=green, label="lambda expression"];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_3 -> m1_19  [key=0, style=solid];
m1_3 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m1_3 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m1_3 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_3 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m1_3 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_95  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_3 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_3 -> m1_103  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_3 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_3 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_44  [key=2, style=dotted];
m1_19 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_19 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_26  [key=0, style=solid];
m1_24 -> m1_48  [key=2, style=dotted];
m1_24 -> m1_49  [key=2, style=dotted];
m1_24 -> m1_50  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_54  [key=2, style=dotted];
m1_26 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_55  [key=2, style=dotted];
m1_28 -> m1_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_28 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m1_28 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m1_29 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_56  [key=2, style=dotted];
m1_29 -> m1_57  [key=2, style=dotted];
m1_29 -> m1_98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_29 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m1_29 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m1_30 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_58  [key=2, style=dotted];
m1_30 -> m1_57  [key=2, style=dotted];
m1_30 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_30 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m1_30 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m1_31 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=token];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_59  [key=2, style=dotted];
m1_31 -> m1_60  [key=2, style=dotted];
m1_31 -> m1_61  [key=2, style=dotted];
m1_31 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_31 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label=token];
m1_31 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_64  [key=2, style=dotted];
m1_35 -> m1_44  [key=2, style=dotted];
m1_35 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_25 -> m1_43  [key=0, style=solid];
m1_25 -> m1_51  [key=2, style=dotted];
m1_25 -> m1_52  [key=2, style=dotted];
m1_25 -> m1_53  [key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_75  [key=2, style=dotted];
m1_42 -> m1_76  [key=2, style=dotted];
m1_20 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_20 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_20 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_20 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_45  [key=2, style=dotted];
m1_20 -> m1_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_20 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_37  [key=0, style=solid];
m1_34 -> m1_63  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_22 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_22 -> m1_95  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_22 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_22 -> m1_46  [key=2, style=dotted];
m1_22 -> m1_47  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_62  [key=2, style=dotted];
m1_32 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m1_32 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m1_32 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m1_36 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_36 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_36 -> m1_41  [key=0, style=solid];
m1_36 -> m1_65  [key=2, style=dotted];
m1_36 -> m1_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_36 -> m1_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_36 -> m1_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_36 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_36 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_36 -> m1_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_73  [key=2, style=dotted];
m1_41 -> m1_74  [key=2, style=dotted];
m1_40 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_72  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_38 -> m1_66  [key=2, style=dotted];
m1_38 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m1_38 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_67  [key=2, style=dotted];
m1_39 -> m1_44  [key=2, style=dotted];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=prms];
m1_39 -> m1_68  [key=2, style=dotted];
m1_39 -> m1_69  [key=2, style=dotted];
m1_39 -> m1_70  [key=2, style=dotted];
m1_39 -> m1_71  [key=2, style=dotted];
m1_39 -> m1_137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_39 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_33 -> m1_34  [key=0, style=solid];
m1_37 -> m1_38  [key=0, style=solid];
m1_43 -> m1_3  [key=0, style=bold, color=blue];
m1_143 -> m1_6  [key=1, style=dashed, color=green, label="System.StringComparer"];
m1_143 -> m1_16  [key=1, style=dashed, color=green, label="System.StringComparer"];
m1_143 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_143 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_144 -> m1_16  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_144 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_145 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m1_146 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m1_147 -> m1_95  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_147 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_148 -> m1_95  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m1_149 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_149 -> m1_103  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_150 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label=token];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_59 -> m3_60  [key=0, style=solid, color=red];
m3_60 -> m3_61  [key=0, style=solid, color=red];
m3_60 -> m3_63  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m3_61 -> m3_59  [key=0, style=bold, color=blue];
m3_75 -> m3_76  [key=0, style=solid, color=red];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_10  [key=2, style=dotted];
m3_4 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_4 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label=options];
m3_3 -> m3_4  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_11  [key=2, style=dotted];
m3_5 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_15 -> m3_16  [key=0, style=solid];
m3_7 -> m3_9  [key=0, style=solid];
m3_7 -> m3_13  [key=2, style=dotted];
m3_7 -> m3_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_8  [key=0, style=solid];
m3_6 -> m3_12  [key=2, style=dotted];
m3_20 -> m3_21  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_14  [key=2, style=dotted];
m3_9 -> m3_3  [key=0, style=bold, color=blue];
m3_23 -> m3_24  [key=0, style=solid];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_18  [key=2, style=dotted];
m3_16 -> m3_19  [key=2, style=dotted];
m3_17 -> m3_15  [key=0, style=bold, color=blue];
m3_21 -> m3_22  [key=0, style=solid];
m3_22 -> m3_20  [key=0, style=bold, color=blue];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_26  [key=2, style=dotted];
m3_24 -> m3_27  [key=2, style=dotted];
m3_24 -> m3_28  [key=2, style=dotted];
m3_25 -> m3_23  [key=0, style=bold, color=blue];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_10  [key=2, style=dotted];
m3_33 -> m3_13  [key=2, style=dotted];
m3_33 -> m3_39  [key=2, style=dotted];
m3_33 -> m3_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_33 -> m3_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_33 -> m3_49  [key=1, style=dashed, color=darkseagreen4, label=setsWithTrue];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_10  [key=2, style=dotted];
m3_34 -> m3_39  [key=2, style=dotted];
m3_34 -> m3_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_34 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label=requiredButEmpty];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m3_41 -> m3_42  [key=0, style=solid];
m3_44 -> m3_45  [key=0, style=solid];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_51  [key=2, style=dotted];
m3_49 -> m3_52  [key=2, style=dotted];
m3_49 -> m3_53  [key=2, style=dotted];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_37  [key=0, style=solid];
m3_35 -> m3_40  [key=2, style=dotted];
m3_48 -> m3_49  [key=0, style=solid];
m3_36 -> m3_38  [key=0, style=solid];
m3_36 -> m3_13  [key=2, style=dotted];
m3_36 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_37 -> m3_38  [key=0, style=solid];
m3_37 -> m3_14  [key=2, style=dotted];
m3_38 -> m3_32  [key=0, style=bold, color=blue];
m3_54 -> m3_55  [key=0, style=solid];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_18  [key=2, style=dotted];
m3_42 -> m3_19  [key=2, style=dotted];
m3_43 -> m3_41  [key=0, style=bold, color=blue];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_47  [key=2, style=dotted];
m3_46 -> m3_44  [key=0, style=bold, color=blue];
m3_50 -> m3_48  [key=0, style=bold, color=blue];
m3_55 -> m3_56  [key=0, style=solid];
m3_55 -> m3_57  [key=2, style=dotted];
m3_55 -> m3_58  [key=2, style=dotted];
m3_55 -> m3_28  [key=2, style=dotted];
m3_56 -> m3_54  [key=0, style=bold, color=blue];
m3_63 -> m3_64  [key=0, style=solid, color=red];
m3_63 -> m3_10  [key=2, style=dotted, color=red];
m3_63 -> m3_68  [key=1, style=dashed, color=red, label="lambda expression"];
m3_63 -> m3_65  [key=1, style=dashed, color=red, label=options];
m3_62 -> m3_63  [key=0, style=solid, color=red];
m3_64 -> m3_65  [key=0, style=solid, color=red];
m3_64 -> m3_66  [key=0, style=solid, color=red];
m3_64 -> m3_40  [key=2, style=dotted, color=red];
m3_68 -> m3_69  [key=0, style=solid, color=red];
m3_65 -> m3_67  [key=0, style=solid, color=red];
m3_65 -> m3_13  [key=2, style=dotted, color=red];
m3_65 -> m3_75  [key=1, style=dashed, color=red, label="lambda expression"];
m3_66 -> m3_67  [key=0, style=solid, color=red];
m3_66 -> m3_14  [key=2, style=dotted, color=red];
m3_67 -> m3_62  [key=0, style=bold, color=blue];
m3_69 -> m3_70  [key=0, style=solid, color=red];
m3_69 -> m3_71  [key=2, style=dotted, color=red];
m3_69 -> m3_19  [key=2, style=dotted, color=red];
m3_69 -> m3_72  [key=2, style=dotted, color=red];
m3_69 -> m3_73  [key=2, style=dotted, color=red];
m3_69 -> m3_74  [key=2, style=dotted, color=red];
m3_70 -> m3_68  [key=0, style=bold, color=blue];
m3_76 -> m3_77  [key=0, style=solid, color=red];
m3_76 -> m3_78  [key=2, style=dotted, color=red];
m3_76 -> m3_58  [key=2, style=dotted, color=red];
m3_76 -> m3_28  [key=2, style=dotted, color=red];
m3_77 -> m3_75  [key=0, style=bold, color=blue];
m3_29 -> m3_30  [key=0, style=solid, color=red];
m3_30 -> m3_31  [key=0, style=solid, color=red];
m3_30 -> m3_33  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m3_30 -> m3_34  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m3_31 -> m3_29  [key=0, style=bold, color=blue];
m3_79 -> m3_49  [key=1, style=dashed, color=darkseagreen4, label=setsWithTrue];
}
