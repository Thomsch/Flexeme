digraph  {
n0 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13"];
n1 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", label="var expected = new Token[] { }", span="15-15"];
n2 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", label="var result = Sequence.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22"];
n3 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", label="expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
n5 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
n7 [cluster="lambda expression", label="Entry lambda expression", span="19-22"];
n4 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13"];
n6 [cluster="Unk.ShouldAllBeEquivalentTo", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
n8 [cluster="lambda expression", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22"];
n9 [cluster="lambda expression", label="Exit lambda expression", span="19-22"];
n10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
n11 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
n12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
n13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
n14 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28"];
n15 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="30-33"];
n16 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="35-45"];
n19 [cluster="CommandLine.Core.Token.Name(string)", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
n20 [cluster="CommandLine.Core.Token.Value(string)", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
n17 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", label="expected.ShouldAllBeEquivalentTo(result)", span="47-47"];
n21 [cluster="lambda expression", label="Entry lambda expression", span="42-45"];
n18 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28"];
n22 [cluster="lambda expression", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="43-45"];
n23 [cluster="lambda expression", label="Exit lambda expression", span="42-45"];
n24 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51"];
n25 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                    Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                }", span="53-57"];
n26 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2''),\r\n                        Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="59-70"];
n27 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", label="expected.ShouldAllBeEquivalentTo(result)", span="72-72"];
n29 [cluster="lambda expression", label="Entry lambda expression", span="67-70"];
n28 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51"];
n30 [cluster="lambda expression", label="new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="68-70"];
n31 [cluster="lambda expression", label="Exit lambda expression", span="67-70"];
n32 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76"];
n33 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="78-81"];
n34 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="83-91"];
n35 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", label="expected.ShouldAllBeEquivalentTo(result)", span="93-93"];
n37 [cluster="lambda expression", label="Entry lambda expression", span="88-91"];
n36 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76"];
n38 [cluster="lambda expression", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="89-91"];
n39 [cluster="lambda expression", label="Exit lambda expression", span="88-91"];
m0_4 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="NameLookup.cs", label="Exit CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="14-14"];
m0_20 [cluster="Unk.Load", file="NameLookup.cs", label="Entry Unk.Load", span=""];
m0_14 [cluster="Ninject.Modules.CompiledModuleLoaderPlugin.LoadModules(System.Collections.Generic.IEnumerable<string>)", file="NameLookup.cs", label="Entry Ninject.Modules.CompiledModuleLoaderPlugin.LoadModules(System.Collections.Generic.IEnumerable<string>)", span="73-73"];
m0_0 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="NameLookup.cs", label="Entry CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="14-14"];
m0_1 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="NameLookup.cs", label="this.property = property", span="16-16"];
m0_2 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="NameLookup.cs", label="this.specification = specification", span="17-17"];
m0_3 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", color=green, community=0, file="NameLookup.cs", label="0: this.value = value", span="18-18"];
m0_5 [cluster="CompiledModuleLoaderPlugin.cstr", file="NameLookup.cs", label="Entry CompiledModuleLoaderPlugin.cstr", span=""];
m0_6 [cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", color=green, community=0, file="NameLookup.cs", label="0: Entry Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", span="29-29"];
m0_7 [cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", color=green, community=0, file="NameLookup.cs", label="0: Assembly expected = Assembly.Load(''Ninject.Tests.TestModule'')", span="31-31"];
m0_8 [cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", file="NameLookup.cs", label="expected.ShouldNotBeNull()", span="32-32"];
m0_9 [cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", file="NameLookup.cs", label="loaderPlugin.LoadModules(new[] { assemblyFilename })", span="34-34"];
m0_13 [cluster="Unk.ShouldNotBeNull", file="NameLookup.cs", label="Entry Unk.ShouldNotBeNull", span=""];
m0_24 [cluster="Unk.Contains", file="NameLookup.cs", label="Entry Unk.Contains", span=""];
m0_21 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="36-36"];
m0_17 [cluster="lambda expression", file="NameLookup.cs", label="x.Load(It.Is<IEnumerable<Assembly>>(p => p.Contains(expected)))", span="36-36"];
m0_22 [cluster="lambda expression", file="NameLookup.cs", label="p.Contains(expected)", span="36-36"];
m0_16 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="36-36"];
m0_18 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="36-36"];
m0_23 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="36-36"];
m0_19 [cluster="Unk.>", file="NameLookup.cs", label="Entry Unk.>", span=""];
m0_10 [cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", file="NameLookup.cs", label="kernelMock.Verify(x => x.Load(It.Is<IEnumerable<Assembly>>(p => p.Contains(expected))))", span="36-36"];
m0_11 [cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", file="NameLookup.cs", label="CommandLine.Core.SpecificationProperty", span=""];
m0_12 [cluster="System.Reflection.Assembly.Load(string)", file="NameLookup.cs", label="Entry System.Reflection.Assembly.Load(string)", span="0-0"];
m0_15 [cluster="Unk.Verify", file="NameLookup.cs", label="Entry Unk.Verify", span=""];
m0_25 [file="NameLookup.cs", label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.CompiledModuleLoaderPluginContext", span=""];
m0_26 [file="NameLookup.cs", label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled", span=""];
m0_27 [file="NameLookup.cs", label=expected, span=""];
m1_19 [cluster="lambda expression", file="ParserTests.cs", label="m.Kernel == this.Kernel", span="22-22"];
m1_20 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="22-22"];
m1_11 [cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42"];
m1_13 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="ParserTests.cs", label="this.value = value", span="52-52"];
m1_44 [cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120"];
m1_45 [cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", file="ParserTests.cs", label="return maybe.Map(selector);", span="123-123"];
m1_46 [cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120"];
m1_12 [cluster="Unk.All", file="ParserTests.cs", label="Entry Unk.All", span=""];
m1_14 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="21-21"];
m1_47 [cluster="CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="95-95"];
m1_6 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m1_8 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="ParserTests.cs", label="return this.Tag == MaybeType.Just;", span="36-36"];
m1_3 [cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs", label="modules.Select(m => m.GetType().FullName).Should().BeEquivalentTo(new[] { ''Ninject.Tests.TestModules.TestModule'' })", span="21-21"];
m1_4 [cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs", label="modules.All(m => m.Kernel == this.Kernel).Should().BeTrue()", span="22-22"];
m1_5 [cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs", label="Exit Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", span="15-15"];
m1_21 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="ParserTests.cs", label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName", span=""];
m1_22 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", color=green, community=0, file="ParserTests.cs", label="0: return object.Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="84-84"];
m1_23 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82"];
m1_43 [cluster="System.Action<T>.Invoke(T)", file="ParserTests.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_7 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="ParserTests.cs", label="value = this.Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="33-35"];
m1_29 [cluster="System.Func<T, TResult>.Invoke(T)", file="ParserTests.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m1_65 [cluster="System.ArgumentException.ArgumentException(string)", file="ParserTests.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m1_48 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126"];
m1_49 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="ParserTests.cs", label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="131-134"];
m1_50 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126"];
m1_55 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="134-134"];
m1_18 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="22-22"];
m1_15 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m1_16 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserTests.cs", label="return new Nothing<T>();", span="68-68"];
m1_53 [cluster="lambda expression", file="ParserTests.cs", label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="132-134"];
m1_52 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="132-134"];
m1_54 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="132-134"];
m1_56 [cluster="lambda expression", file="ParserTests.cs", label="resultSelector(sourceValue, resultValue)", span="134-134"];
m1_57 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="134-134"];
m1_17 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m1_0 [cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs", label="Entry Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", span="15-15"];
m1_1 [cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs", label="this.Kernel.Load(this.ModuleFilename)", span="17-17"];
m1_2 [cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs", label="var modules = this.Kernel.GetModules().ToArray()", span="19-19"];
m1_10 [cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42"];
m1_30 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95"];
m1_31 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", color=green, community=0, file="ParserTests.cs", label="0: T1 value1", span="97-97"];
m1_32 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", color=green, community=0, file="ParserTests.cs", label="0: return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="98-100"];
m1_33 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95"];
m1_9 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m1_38 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111"];
m1_40 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs", label="maybe.MatchJust(out value)", span="114-114"];
m1_39 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs", label="T value", span="113-113"];
m1_41 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs", label="action(value)", span="116-116"];
m1_42 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111"];
m1_24 [cluster="object.Equals(object, object)", file="ParserTests.cs", label="Entry object.Equals(object, object)", span="0-0"];
m1_51 [cluster="CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
m1_34 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
m1_35 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", color=green, community=0, file="ParserTests.cs", label="0: T1 value1", span="105-105"];
m1_36 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", color=green, community=0, file="ParserTests.cs", label="0: return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="106-108"];
m1_37 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
m1_59 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137"];
m1_61 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs", label="maybe.MatchJust(out value)", span="140-140"];
m1_60 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs", label="T value", span="139-139"];
m1_62 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs", label="return value;", span="142-142"];
m1_63 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs", label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="144-144"];
m1_64 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137"];
m1_25 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
m1_26 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", color=green, community=0, file="ParserTests.cs", label="0: T1 value1", span="89-89"];
m1_27 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", color=green, community=0, file="ParserTests.cs", label="0: return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="90-92"];
m1_28 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="ParserTests.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
m1_58 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="ParserTests.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m1_72 [file="ParserTests.cs", label="CommandLine.Infrastructure.Maybe<T>", span=""];
m1_74 [file="ParserTests.cs", label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", span=""];
m1_75 [file="ParserTests.cs", label="System.Func<TSource, TValue, TResult>", span=""];
m1_73 [file="ParserTests.cs", label="CommandLine.Infrastructure.Just<T>", span=""];
m1_76 [file="ParserTests.cs", label=TSource, span=""];
m2_9 [cluster="Ninject.Activation.InstanceReference.As<T>()", file="SentenceBuilder.cs", label="Entry Ninject.Activation.InstanceReference.As<T>()", span="59-59"];
m2_10 [cluster="Ninject.Activation.InstanceReference.As<T>()", file="SentenceBuilder.cs", label="return (T)Instance;", span="61-61"];
m2_11 [cluster="Ninject.Activation.InstanceReference.As<T>()", file="SentenceBuilder.cs", label="Exit Ninject.Activation.InstanceReference.As<T>()", span="59-59"];
m2_12 [cluster="Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", file="SentenceBuilder.cs", label="Entry Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", span="69-69"];
m2_13 [cluster="Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", file="SentenceBuilder.cs", label="this.Is<T>()", span="71-71"];
m2_14 [cluster="Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", file="SentenceBuilder.cs", label="action((T)Instance)", span="72-72"];
m2_15 [cluster="Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", file="SentenceBuilder.cs", label="Exit Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", span="69-69"];
m2_0 [cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs", label="Entry Ninject.Activation.InstanceReference.Is<T>()", span="34-34"];
m2_1 [cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs", label="System.Runtime.Remoting.RemotingServices.IsTransparentProxy(Instance)\r\n                && System.Runtime.Remoting.RemotingServices.GetRealProxy(Instance).GetType().Name == ''RemotingProxy''", span="37-38"];
m2_2 [cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs", label="return typeof(T).IsAssignableFrom(Instance.GetType());", span="44-44"];
m2_3 [cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs", label="return Instance is T;", span="51-51"];
m2_4 [cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs", label="Exit Ninject.Activation.InstanceReference.Is<T>()", span="34-34"];
m2_6 [cluster="System.Runtime.Remoting.RemotingServices.GetRealProxy(object)", file="SentenceBuilder.cs", label="Entry System.Runtime.Remoting.RemotingServices.GetRealProxy(object)", span="0-0"];
m2_7 [cluster="object.GetType()", file="SentenceBuilder.cs", label="Entry object.GetType()", span="0-0"];
m2_16 [cluster="System.Action<T>.Invoke(T)", file="SentenceBuilder.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m2_8 [cluster="System.Type.IsAssignableFrom(System.Type)", file="SentenceBuilder.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m2_5 [cluster="System.Runtime.Remoting.RemotingServices.IsTransparentProxy(object)", file="SentenceBuilder.cs", label="Entry System.Runtime.Remoting.RemotingServices.IsTransparentProxy(object)", span="0-0"];
m2_17 [file="SentenceBuilder.cs", label="Ninject.Activation.InstanceReference", span=""];
m4_19 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Tokenizer.cs", label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45"];
m4_20 [cluster="CommandLine.Parser.~Parser()", file="Tokenizer.cs", label="Entry CommandLine.Parser.~Parser()", span="54-54"];
m4_69 [cluster="CommandLine.Parser.Dispose()", file="Tokenizer.cs", label="Exit CommandLine.Parser.Dispose()", span="148-148"];
m4_70 [cluster="System.GC.SuppressFinalize(object)", file="Tokenizer.cs", label="Entry System.GC.SuppressFinalize(object)", span="0-0"];
m4_71 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Tokenizer.cs", label="return settings.EnableDashDash\r\n                ? Tokenizer.PreprocessDashDash(\r\n                        arguments,\r\n                        args =>\r\n                            Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer)))\r\n                : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer));", span="160-165"];
m4_44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Tokenizer.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m4_45 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="110-110"];
m4_46 [cluster="lambda expression", file="Tokenizer.cs", label="Tokenize(arguments, optionSpecs, this.settings)", span="110-110"];
m4_29 [cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m4_38 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", color=green, community=0, file="Tokenizer.cs", label="0: Entry CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111"];
m4_36 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="106-108"];
m4_34 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
m4_37 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
m4_35 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs", label="T1 value1", span="105-105"];
m4_39 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs", label="T value", span="113-113"];
m4_8 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs", label="return this.Tag == MaybeType.Just;", span="36-36"];
m4_11 [cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42"];
m4_12 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49"];
m4_13 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="Tokenizer.cs", label="this.value = value", span="52-52"];
m4_10 [cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42"];
m4_9 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m4_14 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49"];
m4_47 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="110-110"];
m4_21 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82"];
m4_22 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="Tokenizer.cs", label="return object.Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="84-84"];
m4_49 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", color=red, community=0, file="Tokenizer.cs", label="0: return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="131-134"];
m4_50 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", color=green, community=0, file="Tokenizer.cs", label="0: Exit CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126"];
m4_51 [cluster="CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", color=green, community=0, file="Tokenizer.cs", label="0: Entry CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
m4_52 [cluster="lambda expression", color=green, community=0, file="Tokenizer.cs", label="0: Entry lambda expression", span="132-134"];
m4_53 [cluster="lambda expression", color=red, community=0, file="Tokenizer.cs", label="0: valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="132-134"];
m4_54 [cluster="lambda expression", color=green, community=0, file="Tokenizer.cs", label="0: Exit lambda expression", span="132-134"];
m4_55 [cluster="lambda expression", color=green, community=0, file="Tokenizer.cs", label="0: Entry lambda expression", span="134-134"];
m4_56 [cluster="lambda expression", color=green, community=0, file="Tokenizer.cs", label="0: resultSelector(sourceValue, resultValue)", span="134-134"];
m4_57 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="134-134"];
m4_3 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Tokenizer.cs", label="Entry CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45"];
m4_4 [cluster="CommandLine.ParserSettings.ParserSettings()", file="Tokenizer.cs", label="Entry CommandLine.ParserSettings.ParserSettings()", span="25-25"];
m4_5 [cluster="CommandLine.Parser.Parser()", file="Tokenizer.cs", label="Entry CommandLine.Parser.Parser()", span="25-25"];
m4_23 [cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs", label="Entry CommandLine.Parser.Dispose(bool)", span="194-194"];
m4_16 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Tokenizer.cs", label="return new Nothing<T>();", span="68-68"];
m4_43 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="108-113"];
m4_33 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95"];
m4_17 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m4_18 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Tokenizer.cs", label="this.settings.Consumed = true", span="48-48"];
m4_58 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="Tokenizer.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m4_65 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="137-137"];
m4_96 [cluster="Unk.Where", file="Tokenizer.cs", label="Entry Unk.Where", span=""];
m4_62 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="return value;", span="142-142"];
m4_81 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Tokenizer.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m4_48 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Tokenizer.cs", label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="155-155"];
m4_6 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m4_7 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs", label="value = this.Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="33-35"];
m4_66 [cluster="CommandLine.Parser.Dispose()", file="Tokenizer.cs", label="Entry CommandLine.Parser.Dispose()", span="148-148"];
m4_67 [cluster="CommandLine.Parser.Dispose()", file="Tokenizer.cs", label="Dispose(true)", span="150-150"];
m4_68 [cluster="CommandLine.Parser.Dispose()", file="Tokenizer.cs", label="GC.SuppressFinalize(this)", span="152-152"];
m4_87 [cluster="System.Func<TResult>.Invoke()", file="Tokenizer.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m4_97 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="180-180"];
m4_1 [cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", color=green, community=0, file="Tokenizer.cs", label="0: this.tag = tag", span="18-18"];
m4_0 [cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16"];
m4_41 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs", label="action(value)", span="116-116"];
m4_59 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137"];
m4_60 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=green, community=0, file="Tokenizer.cs", label="0: T value", span="139-139"];
m4_61 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="maybe.MatchJust(out value)", span="140-140"];
m4_63 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="144-144"];
m4_64 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=green, community=0, file="Tokenizer.cs", label="0: Exit CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137"];
m4_42 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111"];
m4_76 [cluster="lambda expression", file="Tokenizer.cs", label=TSource, span=""];
m4_79 [cluster="lambda expression", file="Tokenizer.cs", label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="164-164"];
m4_83 [cluster="lambda expression", file="Tokenizer.cs", label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="165-165"];
m4_30 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95"];
m4_75 [cluster="lambda expression", file="Tokenizer.cs", label="System.Func<TSource, TValue, TResult>", span=""];
m4_82 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="165-165"];
m4_77 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="163-164"];
m4_78 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="164-164"];
m4_80 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="164-164"];
m4_84 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="165-165"];
m4_32 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", color=red, community=0, file="Tokenizer.cs", label="0: return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="98-100"];
m4_31 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs", label="T1 value1", span="97-97"];
m4_108 [cluster="lambda expression", file="Tokenizer.cs", label="writer.Write(HelpText.AutoBuild(parserResult))", span="188-188"];
m4_93 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="180-180"];
m4_107 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="188-188"];
m4_109 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="188-188"];
m4_95 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="180-180"];
m4_94 [cluster="lambda expression", file="Tokenizer.cs", label="errs.Where(e => e.Tag != ErrorType.UnknownOptionError)", span="180-180"];
m4_98 [cluster="lambda expression", file="Tokenizer.cs", label="e.Tag != ErrorType.UnknownOptionError", span="180-180"];
m4_99 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="180-180"];
m4_2 [cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16"];
m4_89 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs", label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="184-184"];
m4_100 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs", label="parserResult.Errors.Any()", span="186-186"];
m4_101 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs", label="helpWriter.ToMaybe().Do(writer => writer.Write(HelpText.AutoBuild(parserResult)))", span="188-188"];
m4_102 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs", label="return parserResult;", span="191-191"];
m4_103 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs", label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="184-184"];
m4_104 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m4_105 [cluster="T.ToMaybe<T>()", file="Tokenizer.cs", label="Entry T.ToMaybe<T>()", span="82-82"];
m4_88 [cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="Tokenizer.cs", label="Entry CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="177-177"];
m4_90 [cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="Tokenizer.cs", label="return ignoreUnknownArguments\r\n                       ? parserResult.MapErrors(errs => errs.Where(e => e.Tag != ErrorType.UnknownOptionError))\r\n                       : parserResult;", span="179-181"];
m4_91 [cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="Tokenizer.cs", label="Exit CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="177-177"];
m4_24 [cluster="object.Equals(object, object)", file="Tokenizer.cs", label="Entry object.Equals(object, object)", span="0-0"];
m4_27 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="90-92"];
m4_26 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs", label="T1 value1", span="89-89"];
m4_25 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
m4_28 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
m4_92 [cluster="Unk.MapErrors", file="Tokenizer.cs", label="Entry Unk.MapErrors", span=""];
m4_40 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Tokenizer.cs", label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="168-168"];
m4_110 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Tokenizer.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252"];
m4_106 [cluster="CommandLine.Infrastructure.Maybe<T>.Do<T>(System.Action<T>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.Do<T>(System.Action<T>)", span="111-111"];
m4_74 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", span=""];
m4_73 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="CommandLine.Infrastructure.Just<T>", span=""];
m4_119 [cluster="CommandLine.ParserSettings.Dispose()", file="Tokenizer.cs", label="Entry CommandLine.ParserSettings.Dispose()", span="119-119"];
m4_85 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Tokenizer.cs", label="return DisplayHelp(\r\n                HandleUnknownArguments(\r\n                    parseFunc(),\r\n                    settings.IgnoreUnknownArguments),\r\n                settings.HelpWriter);", span="170-174"];
m4_86 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Tokenizer.cs", label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="168-168"];
m4_15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Tokenizer.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_72 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Tokenizer.cs", label="CommandLine.Infrastructure.Maybe<T>", span=""];
m4_112 [cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs", label="this.disposed", span="196-196"];
m4_115 [cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs", label="settings != null", span="203-203"];
m4_116 [cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs", label="settings.Dispose()", span="205-205"];
m4_117 [cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs", label="this.disposed = true", span="208-208"];
m4_113 [cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs", label="return;", span="198-198"];
m4_114 [cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs", label=disposing, span="201-201"];
m4_118 [cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs", label="Exit CommandLine.Parser.Dispose(bool)", span="194-194"];
m4_111 [cluster="System.IO.TextWriter.Write(string)", file="Tokenizer.cs", label="Entry System.IO.TextWriter.Write(string)", span="0-0"];
m4_120 [file="Tokenizer.cs", label="CommandLine.Parser", span=""];
m4_123 [file="Tokenizer.cs", label="string[]", span=""];
m4_124 [file="Tokenizer.cs", label="params System.Type[]", span=""];
m4_121 [file="Tokenizer.cs", label="System.Func<T>", span=""];
m4_122 [file="Tokenizer.cs", label="string[]", span=""];
m4_125 [file="Tokenizer.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m4_126 [file="Tokenizer.cs", label="CommandLine.ParserSettings", span=""];
m4_127 [file="Tokenizer.cs", label="CommandLine.ParserResult<T>", span=""];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [color=darkseagreen4, key=1, label=expected, style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n2 -> n7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n4  [key=0, style=solid];
n3 -> n6  [key=2, style=dotted];
n7 -> n8  [key=0, style=solid];
n4 -> n0  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=2, style=dotted];
n8 -> n11  [key=2, style=dotted];
n8 -> n12  [key=2, style=dotted];
n8 -> n13  [key=2, style=dotted];
n9 -> n7  [color=blue, key=0, style=bold];
n14 -> n15  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n19  [key=2, style=dotted];
n15 -> n20  [key=2, style=dotted];
n15 -> n17  [color=darkseagreen4, key=1, label=expected, style=dashed];
n16 -> n17  [key=0, style=solid];
n16 -> n19  [key=2, style=dotted];
n16 -> n20  [key=2, style=dotted];
n16 -> n5  [key=2, style=dotted];
n16 -> n21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n17 -> n18  [key=0, style=solid];
n17 -> n6  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n18 -> n14  [color=blue, key=0, style=bold];
n22 -> n23  [key=0, style=solid];
n22 -> n10  [key=2, style=dotted];
n22 -> n11  [key=2, style=dotted];
n22 -> n12  [key=2, style=dotted];
n22 -> n13  [key=2, style=dotted];
n23 -> n21  [color=blue, key=0, style=bold];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n19  [key=2, style=dotted];
n25 -> n20  [key=2, style=dotted];
n25 -> n27  [color=darkseagreen4, key=1, label=expected, style=dashed];
n26 -> n27  [key=0, style=solid];
n26 -> n19  [key=2, style=dotted];
n26 -> n20  [key=2, style=dotted];
n26 -> n5  [key=2, style=dotted];
n26 -> n29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n27 -> n28  [key=0, style=solid];
n27 -> n6  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n28 -> n24  [color=blue, key=0, style=bold];
n30 -> n31  [key=0, style=solid];
n30 -> n10  [key=2, style=dotted];
n30 -> n11  [key=2, style=dotted];
n30 -> n12  [key=2, style=dotted];
n30 -> n13  [key=2, style=dotted];
n31 -> n29  [color=blue, key=0, style=bold];
n32 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n33 -> n19  [key=2, style=dotted];
n33 -> n20  [key=2, style=dotted];
n33 -> n35  [color=darkseagreen4, key=1, label=expected, style=dashed];
n34 -> n35  [key=0, style=solid];
n34 -> n19  [key=2, style=dotted];
n34 -> n20  [key=2, style=dotted];
n34 -> n5  [key=2, style=dotted];
n34 -> n37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n35 -> n36  [key=0, style=solid];
n35 -> n6  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n36 -> n32  [color=blue, key=0, style=bold];
n38 -> n39  [key=0, style=solid];
n38 -> n10  [key=2, style=dotted];
n38 -> n11  [key=2, style=dotted];
n38 -> n12  [key=2, style=dotted];
n38 -> n13  [key=2, style=dotted];
n39 -> n37  [color=blue, key=0, style=bold];
m0_4 -> m0_0  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_3  [color=green, key=1, label="CommandLine.Infrastructure.Maybe<object>", style=dashed];
m0_0 -> m0_2  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_3  [color=green, key=0, style=solid];
m0_2 -> m0_5  [key=2, style=dotted];
m0_3 -> m0_0  [color=blue, key=0, style=bold];
m0_3 -> m0_4  [color=green, key=0, style=solid];
m0_5 -> m0_6  [color=green, key=0, style=solid];
m0_5 -> m0_8  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_6 -> m0_7  [color=green, key=0, style=solid];
m0_6 -> m0_8  [color=green, key=0, style=solid];
m0_7 -> m0_9  [color=green, key=0, style=solid];
m0_7 -> m0_10  [color=green, key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_12  [key=2, style=dotted];
m0_7 -> m0_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_7 -> m0_22  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_8 -> m0_0  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_13  [key=2, style=dotted];
m0_9 -> m0_5  [color=blue, key=0, style=bold];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_14  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_20  [key=2, style=dotted];
m0_17 -> m0_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_24  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_18 -> m0_16  [color=blue, key=0, style=bold];
m0_23 -> m0_21  [color=blue, key=0, style=bold];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_15  [key=2, style=dotted];
m0_10 -> m0_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_11 -> m0_6  [color=blue, key=0, style=bold];
m0_11 -> m0_3  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m0_11 -> m0_1  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m0_11 -> m0_2  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m0_25 -> m0_1  [color=darkseagreen4, key=1, label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.CompiledModuleLoaderPluginContext", style=dashed];
m0_25 -> m0_2  [color=darkseagreen4, key=1, label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.CompiledModuleLoaderPluginContext", style=dashed];
m0_26 -> m0_9  [color=darkseagreen4, key=1, label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled", style=dashed];
m0_26 -> m0_10  [color=darkseagreen4, key=1, label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled", style=dashed];
m0_27 -> m0_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_27 -> m0_22  [color=darkseagreen4, key=1, label=expected, style=dashed];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_12  [key=2, style=dotted];
m1_20 -> n13  [color=blue, key=0, style=bold];
m1_20 -> m1_18  [color=blue, key=0, style=bold];
m1_11 -> m1_10  [color=blue, key=0, style=bold];
m1_13 -> m1_14  [key=0, style=solid];
m1_44 -> m1_45  [key=0, style=solid];
m1_45 -> m1_47  [key=2, style=dotted];
m1_45 -> m1_46  [key=0, style=solid];
m1_46 -> m1_44  [color=blue, key=0, style=bold];
m1_12 -> m1_13  [key=0, style=solid];
m1_14 -> m1_12  [color=blue, key=0, style=bold];
m1_14 -> m1_15  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_10  [key=2, style=dotted];
m1_3 -> m1_11  [key=2, style=dotted];
m1_3 -> m1_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_12  [key=2, style=dotted];
m1_4 -> m1_10  [key=2, style=dotted];
m1_4 -> m1_13  [key=2, style=dotted];
m1_4 -> m1_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_3  [color=blue, key=0, style=bold];
m1_5 -> m1_0  [color=blue, key=0, style=bold];
m1_21 -> m1_22  [color=green, key=0, style=solid];
m1_21 -> m1_1  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName", style=dashed];
m1_21 -> m1_2  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName", style=dashed];
m1_21 -> m1_4  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName", style=dashed];
m1_21 -> m1_19  [color=darkseagreen4, key=1, label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName", style=dashed];
m1_22 -> m1_23  [color=green, key=0, style=solid];
m1_22 -> m1_24  [color=green, key=2, style=dotted];
m1_22 -> m1_15  [color=green, key=2, style=dotted];
m1_22 -> n13  [color=green, key=2, style=dotted];
m1_23 -> m1_21  [color=blue, key=0, style=bold];
m1_7 -> m1_9  [color=darkseagreen4, key=1, label="out T", style=dashed];
m1_7 -> m1_8  [key=0, style=solid];
m1_48 -> m1_53  [color=darkseagreen4, key=1, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", style=dashed];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_56  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m1_49 -> m1_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_51  [key=2, style=dotted];
m1_50 -> m1_48  [color=blue, key=0, style=bold];
m1_55 -> m1_56  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_17  [key=2, style=dotted];
m1_16 -> m1_14  [color=blue, key=0, style=bold];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_10  [key=2, style=dotted];
m1_53 -> m1_29  [key=2, style=dotted];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_47  [key=2, style=dotted];
m1_53 -> m1_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_56  [color=darkseagreen4, key=1, label=TSource, style=dashed];
m1_54 -> m1_52  [color=blue, key=0, style=bold];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_58  [key=2, style=dotted];
m1_57 -> m1_55  [color=blue, key=0, style=bold];
m1_17 -> m1_15  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_4  [color=darkseagreen4, key=1, label=modules, style=dashed];
m1_10 -> m1_11  [key=0, style=solid];
m1_30 -> m1_31  [color=green, key=0, style=solid];
m1_30 -> m1_32  [color=green, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
m1_31 -> m1_32  [color=green, key=0, style=solid];
m1_32 -> m1_32  [color=green, key=1, label=value1, style=dashed];
m1_32 -> m1_33  [color=green, key=0, style=solid];
m1_32 -> m1_6  [color=green, key=2, style=dotted];
m1_32 -> m1_29  [color=green, key=2, style=dotted];
m1_32 -> n13  [color=green, key=2, style=dotted];
m1_32 -> m1_15  [color=green, key=2, style=dotted];
m1_33 -> m1_30  [color=blue, key=0, style=bold];
m1_9 -> m1_6  [color=blue, key=0, style=bold];
m1_38 -> m1_40  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_41  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
m1_40 -> m1_6  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_42  [key=0, style=solid];
m1_39 -> m1_40  [key=0, style=solid];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [key=2, style=dotted];
m1_42 -> m1_38  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [color=green, key=0, style=solid];
m1_34 -> m1_36  [color=green, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
m1_35 -> m1_36  [color=green, key=0, style=solid];
m1_36 -> m1_36  [color=green, key=1, label=value1, style=dashed];
m1_36 -> m1_37  [color=green, key=0, style=solid];
m1_36 -> m1_6  [color=green, key=2, style=dotted];
m1_36 -> m1_29  [color=green, key=2, style=dotted];
m1_37 -> m1_34  [color=blue, key=0, style=bold];
m1_59 -> m1_61  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_63  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m1_61 -> m1_6  [key=2, style=dotted];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_63  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_62 -> m1_64  [key=0, style=solid];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_65  [key=2, style=dotted];
m1_64 -> m1_59  [color=blue, key=0, style=bold];
m1_25 -> m1_26  [color=green, key=0, style=solid];
m1_25 -> m1_27  [color=green, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
m1_26 -> m1_27  [color=green, key=0, style=solid];
m1_27 -> m1_27  [color=green, key=1, label=value1, style=dashed];
m1_27 -> m1_28  [color=green, key=0, style=solid];
m1_27 -> m1_6  [color=green, key=2, style=dotted];
m1_27 -> m1_29  [color=green, key=2, style=dotted];
m1_27 -> m1_15  [color=green, key=2, style=dotted];
m1_28 -> m1_25  [color=blue, key=0, style=bold];
m1_72 -> m1_7  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m1_72 -> m1_8  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m1_72 -> m1_1  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m1_72 -> m1_4  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m1_74 -> m1_53  [color=darkseagreen4, key=1, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", style=dashed];
m1_75 -> m1_53  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m1_75 -> m1_56  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m1_73 -> m1_13  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Just<T>", style=dashed];
m1_76 -> m1_56  [color=darkseagreen4, key=1, label=TSource, style=dashed];
m2_9 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_11 -> m2_9  [color=blue, key=0, style=bold];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_14  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_15  [key=0, style=solid];
m2_13 -> m2_0  [key=2, style=dotted];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_16  [key=2, style=dotted];
m2_15 -> m2_12  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=0, style=solid];
m2_1 -> m2_5  [key=2, style=dotted];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_7  [key=2, style=dotted];
m2_2 -> m2_4  [key=0, style=solid];
m2_2 -> m2_7  [key=2, style=dotted];
m2_2 -> m2_8  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_0  [color=blue, key=0, style=bold];
m2_17 -> m2_1  [color=darkseagreen4, key=1, label="Ninject.Activation.InstanceReference", style=dashed];
m2_17 -> m2_2  [color=darkseagreen4, key=1, label="Ninject.Activation.InstanceReference", style=dashed];
m2_17 -> m2_3  [color=darkseagreen4, key=1, label="Ninject.Activation.InstanceReference", style=dashed];
m2_17 -> m2_10  [color=darkseagreen4, key=1, label="Ninject.Activation.InstanceReference", style=dashed];
m2_17 -> m2_13  [color=darkseagreen4, key=1, label="Ninject.Activation.InstanceReference", style=dashed];
m2_17 -> m2_14  [color=darkseagreen4, key=1, label="Ninject.Activation.InstanceReference", style=dashed];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_12  [key=2, style=dotted];
m4_19 -> m4_3  [color=blue, key=0, style=bold];
m4_20 -> n13  [color=blue, key=0, style=bold];
m4_20 -> m4_21  [key=0, style=solid];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_66  [color=blue, key=0, style=bold];
m4_70 -> m4_71  [key=0, style=solid];
m4_71 -> m4_69  [color=blue, key=0, style=bold];
m4_71 -> m4_72  [key=0, style=solid];
m4_71 -> m4_73  [key=2, style=dotted];
m4_71 -> m4_74  [key=2, style=dotted];
m4_71 -> m4_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_71 -> m4_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_44 -> m4_45  [key=0, style=solid];
m4_45 -> m4_46  [key=0, style=solid];
m4_45 -> m4_47  [key=2, style=dotted];
m4_45 -> m4_22  [color=darkorchid, key=3, label="method methodReturn CommandLine.Infrastructure.Maybe<TResult> SelectMany", style=bold];
m4_46 -> m4_44  [color=blue, key=0, style=bold];
m4_46 -> m4_48  [key=2, style=dotted];
m4_46 -> m4_47  [key=0, style=solid];
m4_29 -> m4_38  [color=green, key=1, label="System.Func<T>", style=dashed];
m4_29 -> m4_34  [key=0, style=solid];
m4_29 -> m4_36  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_29 -> m4_42  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m4_38 -> m4_39  [color=green, key=0, style=solid];
m4_38 -> m4_40  [color=green, key=2, style=dotted];
m4_38 -> m4_41  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
m4_36 -> m4_38  [color=green, key=0, style=solid];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_6  [key=2, style=dotted];
m4_36 -> m4_29  [key=2, style=dotted];
m4_36 -> m4_36  [color=darkseagreen4, key=1, label=value1, style=dashed];
m4_34 -> m4_36  [key=0, style=solid];
m4_34 -> m4_35  [key=0, style=solid];
m4_37 -> m4_39  [key=0, style=solid];
m4_37 -> m4_15  [key=2, style=dotted];
m4_37 -> m4_34  [color=blue, key=0, style=bold];
m4_35 -> m4_39  [key=0, style=solid];
m4_35 -> m4_15  [key=2, style=dotted];
m4_35 -> m4_36  [key=0, style=solid];
m4_39 -> m4_29  [color=blue, key=0, style=bold];
m4_39 -> m4_40  [key=0, style=solid];
m4_8 -> m4_12  [color=darkseagreen4, key=1, label="System.Action<CommandLine.ParserSettings>", style=dashed];
m4_8 -> m4_9  [key=0, style=solid];
m4_11 -> m4_4  [key=2, style=dotted];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_10  [color=blue, key=0, style=bold];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_16  [key=2, style=dotted];
m4_13 -> m4_14  [key=0, style=solid];
m4_10 -> m4_15  [key=2, style=dotted];
m4_10 -> m4_14  [key=0, style=solid];
m4_10 -> m4_11  [key=0, style=solid];
m4_9 -> m4_11  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_6  [color=blue, key=0, style=bold];
m4_14 -> m4_8  [color=blue, key=0, style=bold];
m4_14 -> m4_12  [color=blue, key=0, style=bold];
m4_47 -> m4_45  [color=blue, key=0, style=bold];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_23  [key=2, style=dotted];
m4_22 -> m4_20  [color=blue, key=0, style=bold];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_24  [key=2, style=dotted];
m4_22 -> m4_15  [key=2, style=dotted];
m4_22 -> n13  [key=2, style=dotted];
m4_49 -> m4_50  [color=red, key=0, style=solid];
m4_49 -> m4_52  [color=red, key=1, label="lambda expression", style=dashed];
m4_49 -> m4_54  [color=green, key=1, label="params System.Type[]", style=dashed];
m4_49 -> m4_56  [color=green, key=1, label="string[]", style=dashed];
m4_49 -> m4_60  [color=green, key=1, label="string[]", style=dashed];
m4_49 -> m4_51  [color=red, key=2, style=dotted];
m4_50 -> m4_51  [color=green, key=0, style=solid];
m4_50 -> m4_52  [color=green, key=0, style=solid];
m4_50 -> m4_48  [color=blue, key=0, style=bold];
m4_51 -> m4_57  [color=green, key=0, style=solid];
m4_51 -> m4_15  [color=green, key=2, style=dotted];
m4_52 -> m4_53  [color=red, key=0, style=solid];
m4_52 -> m4_54  [color=green, key=0, style=solid];
m4_52 -> m4_56  [color=darkseagreen4, key=1, label=TSource, style=dashed];
m4_53 -> m4_57  [color=green, key=0, style=solid];
m4_53 -> m4_15  [color=green, key=2, style=dotted];
m4_53 -> m4_54  [color=red, key=0, style=solid];
m4_53 -> m4_29  [color=red, key=2, style=dotted];
m4_53 -> m4_47  [color=red, key=2, style=dotted];
m4_53 -> m4_55  [color=red, key=1, label="lambda expression", style=dashed];
m4_54 -> m4_55  [color=green, key=0, style=solid];
m4_54 -> m4_56  [color=green, key=0, style=solid];
m4_54 -> m4_52  [color=blue, key=0, style=bold];
m4_54 -> m4_0  [color=blue, key=0, style=bold];
m4_55 -> m4_57  [color=green, key=0, style=solid];
m4_55 -> m4_58  [color=green, key=2, style=dotted];
m4_55 -> m4_56  [key=0, style=solid];
m4_56 -> m4_57  [color=green, key=0, style=solid];
m4_56 -> m4_40  [color=green, key=2, style=dotted];
m4_56 -> m4_59  [color=green, key=1, label="lambda expression", style=dashed];
m4_56 -> m4_58  [key=2, style=dotted];
m4_57 -> m4_49  [color=blue, key=0, style=bold];
m4_57 -> m4_55  [color=blue, key=0, style=bold];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_17  [key=0, style=solid];
m4_4 -> m4_5  [key=0, style=solid];
m4_5 -> m4_3  [color=blue, key=0, style=bold];
m4_5 -> m4_6  [key=0, style=solid];
m4_23 -> m4_21  [color=blue, key=0, style=bold];
m4_23 -> m4_112  [key=0, style=solid];
m4_23 -> m4_114  [color=darkseagreen4, key=1, label=bool, style=dashed];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_10  [key=2, style=dotted];
m4_43 -> m4_41  [color=blue, key=0, style=bold];
m4_33 -> m4_30  [color=blue, key=0, style=bold];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_15  [color=blue, key=0, style=bold];
m4_18 -> m4_19  [key=0, style=solid];
m4_65 -> m4_63  [color=blue, key=0, style=bold];
m4_62 -> m4_64  [key=0, style=solid];
m4_48 -> m4_49  [color=red, key=0, style=solid];
m4_48 -> m4_53  [color=red, key=1, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", style=dashed];
m4_48 -> m4_56  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m4_48 -> m4_71  [key=0, style=solid];
m4_48 -> m4_76  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_48 -> m4_79  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_48 -> m4_83  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_6 -> m4_4  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid];
m4_7 -> m4_5  [color=blue, key=0, style=bold];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [color=darkseagreen4, key=1, label="out T", style=dashed];
m4_66 -> m4_67  [key=0, style=solid];
m4_67 -> m4_68  [key=0, style=solid];
m4_67 -> m4_23  [key=2, style=dotted];
m4_68 -> m4_66  [color=blue, key=0, style=bold];
m4_68 -> m4_62  [color=darkorchid, key=3, label="Parameter variable System.Action<CommandLine.Error> onError", style=bold];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_70  [key=2, style=dotted];
m4_97 -> m4_98  [key=0, style=solid];
m4_1 -> m4_54  [color=green, key=0, style=solid];
m4_1 -> m4_3  [color=green, key=2, style=dotted];
m4_1 -> m4_4  [color=green, key=2, style=dotted];
m4_1 -> m4_2  [key=0, style=solid];
m4_0 -> m4_1  [color=green, key=0, style=solid];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_43  [key=2, style=dotted];
m4_59 -> m4_60  [color=green, key=0, style=solid];
m4_59 -> m4_61  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m4_59 -> m4_63  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m4_60 -> m4_61  [color=green, key=0, style=solid];
m4_60 -> m4_62  [color=green, key=2, style=dotted];
m4_60 -> m4_63  [color=green, key=1, label="lambda expression", style=dashed];
m4_61 -> m4_59  [color=blue, key=0, style=bold];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_63  [key=0, style=solid];
m4_61 -> m4_6  [key=2, style=dotted];
m4_63 -> m4_64  [color=green, key=0, style=solid];
m4_63 -> m4_65  [key=2, style=dotted];
m4_63 -> m4_1  [color=darkorchid, key=3, label="Parameter variable System.Action<CommandLine.Error> onError", style=bold];
m4_64 -> m4_65  [color=green, key=0, style=solid];
m4_64 -> m4_48  [color=green, key=2, style=dotted];
m4_64 -> m4_59  [color=blue, key=0, style=bold];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_44  [key=2, style=dotted];
m4_42 -> m4_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_42 -> m4_38  [color=blue, key=0, style=bold];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> m4_74  [key=2, style=dotted];
m4_76 -> m4_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_76 -> m4_56  [color=darkseagreen4, key=1, label=TSource, style=dashed];
m4_79 -> m4_80  [key=0, style=solid];
m4_79 -> m4_81  [key=2, style=dotted];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_81  [key=2, style=dotted];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_32  [color=red, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
m4_75 -> m4_76  [key=0, style=solid];
m4_75 -> m4_53  [color=red, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m4_75 -> m4_56  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m4_82 -> m4_83  [key=0, style=solid];
m4_77 -> m4_75  [color=blue, key=0, style=bold];
m4_78 -> m4_79  [key=0, style=solid];
m4_80 -> m4_78  [color=blue, key=0, style=bold];
m4_84 -> m4_82  [color=blue, key=0, style=bold];
m4_32 -> m4_30  [color=blue, key=0, style=bold];
m4_32 -> m4_33  [color=red, key=0, style=solid];
m4_32 -> m4_6  [color=red, key=2, style=dotted];
m4_32 -> m4_29  [color=red, key=2, style=dotted];
m4_32 -> n13  [color=red, key=2, style=dotted];
m4_32 -> m4_15  [color=red, key=2, style=dotted];
m4_32 -> m4_32  [color=red, key=1, label=value1, style=dashed];
m4_31 -> m4_32  [color=red, key=0, style=solid];
m4_31 -> m4_33  [key=2, style=dotted];
m4_108 -> m4_109  [key=0, style=solid];
m4_108 -> m4_110  [key=2, style=dotted];
m4_108 -> m4_111  [key=2, style=dotted];
m4_93 -> m4_94  [key=0, style=solid];
m4_107 -> m4_108  [key=0, style=solid];
m4_109 -> m4_107  [color=blue, key=0, style=bold];
m4_95 -> m4_93  [color=blue, key=0, style=bold];
m4_94 -> m4_95  [key=0, style=solid];
m4_94 -> m4_96  [key=2, style=dotted];
m4_94 -> m4_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_98 -> m4_99  [key=0, style=solid];
m4_99 -> m4_97  [color=blue, key=0, style=bold];
m4_2 -> m4_0  [color=blue, key=0, style=bold];
m4_89 -> m4_100  [key=0, style=solid];
m4_89 -> m4_101  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m4_89 -> m4_108  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m4_89 -> m4_102  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m4_100 -> m4_101  [key=0, style=solid];
m4_100 -> m4_102  [key=0, style=solid];
m4_100 -> m4_104  [key=2, style=dotted];
m4_101 -> m4_102  [key=0, style=solid];
m4_101 -> m4_105  [key=2, style=dotted];
m4_101 -> m4_106  [key=2, style=dotted];
m4_101 -> m4_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_102 -> m4_103  [key=0, style=solid];
m4_103 -> m4_89  [color=blue, key=0, style=bold];
m4_88 -> m4_90  [key=0, style=solid];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_92  [key=2, style=dotted];
m4_90 -> m4_93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_91 -> m4_88  [color=blue, key=0, style=bold];
m4_24 -> m4_27  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_24 -> m4_25  [key=0, style=solid];
m4_27 -> m4_29  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_27 -> m4_6  [key=2, style=dotted];
m4_27 -> m4_15  [key=2, style=dotted];
m4_27 -> m4_27  [color=darkseagreen4, key=1, label=value1, style=dashed];
m4_27 -> m4_49  [color=red, key=3, label="Parameter variable System.Func<T1, T2> func", style=bold];
m4_26 -> m4_15  [key=2, style=dotted];
m4_26 -> m4_28  [key=0, style=solid];
m4_26 -> m4_27  [key=0, style=solid];
m4_25 -> m4_27  [key=0, style=solid];
m4_25 -> m4_26  [key=0, style=solid];
m4_28 -> m4_24  [color=blue, key=0, style=bold];
m4_28 -> m4_25  [color=blue, key=0, style=bold];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_42  [key=0, style=solid];
m4_40 -> m4_6  [key=2, style=dotted];
m4_40 -> m4_85  [key=0, style=solid];
m4_74 -> m4_53  [color=red, key=1, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", style=dashed];
m4_73 -> m4_13  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Just<T>", style=dashed];
m4_85 -> m4_86  [key=0, style=solid];
m4_85 -> m4_87  [key=2, style=dotted];
m4_85 -> m4_88  [key=2, style=dotted];
m4_85 -> m4_89  [key=2, style=dotted];
m4_86 -> m4_40  [color=blue, key=0, style=bold];
m4_15 -> m4_16  [key=0, style=solid];
m4_72 -> m4_48  [color=blue, key=0, style=bold];
m4_72 -> m4_1  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m4_72 -> m4_4  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m4_72 -> m4_7  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m4_72 -> m4_8  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m4_112 -> m4_113  [key=0, style=solid];
m4_112 -> m4_114  [key=0, style=solid];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> m4_117  [key=0, style=solid];
m4_116 -> m4_117  [key=0, style=solid];
m4_116 -> m4_119  [key=2, style=dotted];
m4_117 -> m4_118  [key=0, style=solid];
m4_113 -> m4_118  [key=0, style=solid];
m4_114 -> m4_115  [key=0, style=solid];
m4_114 -> m4_118  [key=0, style=solid];
m4_118 -> m4_23  [color=blue, key=0, style=bold];
m4_120 -> m4_38  [color=green, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_56  [color=green, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_60  [color=green, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_64  [color=green, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_6  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_11  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_12  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_13  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_17  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_18  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_21  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_27  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_42  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_46  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_67  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_68  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_112  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_115  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_116  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_120 -> m4_117  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m4_123 -> m4_60  [color=green, key=1, label="string[]", style=dashed];
m4_124 -> m4_60  [color=green, key=1, label="params System.Type[]", style=dashed];
m4_121 -> m4_42  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m4_122 -> m4_42  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_125 -> m4_76  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_125 -> m4_79  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_125 -> m4_83  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_126 -> m4_76  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m4_126 -> m4_79  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m4_126 -> m4_83  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m4_127 -> m4_108  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
}
