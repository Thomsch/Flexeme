digraph  {
n0 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()"];
n1 [label="var expected = new Token[] { }", span="15-15", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()"];
n2 [label="var result = Sequence.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()"];
n3 [label="expected.ShouldAllBeEquivalentTo(result)", span="24-24", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()"];
n5 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)"];
n7 [label="Entry lambda expression", span="19-22", cluster="lambda expression"];
n4 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()"];
n6 [label="Entry Unk.ShouldAllBeEquivalentTo", span="", cluster="Unk.ShouldAllBeEquivalentTo"];
n8 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22", cluster="lambda expression"];
n9 [label="Exit lambda expression", span="19-22", cluster="lambda expression"];
n10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)"];
n11 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n12 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)"];
n13 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n14 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()"];
n15 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="30-33", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()"];
n16 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="35-45", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()"];
n19 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)"];
n20 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)"];
n17 [label="expected.ShouldAllBeEquivalentTo(result)", span="47-47", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()"];
n21 [label="Entry lambda expression", span="42-45", cluster="lambda expression"];
n18 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()"];
n22 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="43-45", cluster="lambda expression"];
n23 [label="Exit lambda expression", span="42-45", cluster="lambda expression"];
n24 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()"];
n25 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                    Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                }", span="53-57", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()"];
n26 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2''),\r\n                        Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="59-70", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()"];
n27 [label="expected.ShouldAllBeEquivalentTo(result)", span="72-72", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()"];
n29 [label="Entry lambda expression", span="67-70", cluster="lambda expression"];
n28 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()"];
n30 [label="new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="68-70", cluster="lambda expression"];
n31 [label="Exit lambda expression", span="67-70", cluster="lambda expression"];
n32 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()"];
n33 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="78-81", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()"];
n34 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="83-91", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()"];
n35 [label="expected.ShouldAllBeEquivalentTo(result)", span="93-93", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()"];
n37 [label="Entry lambda expression", span="88-91", cluster="lambda expression"];
n36 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()"];
n38 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="89-91", cluster="lambda expression"];
n39 [label="Exit lambda expression", span="88-91", cluster="lambda expression"];
m0_4 [label="Exit CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="14-14", cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="NameLookup.cs"];
m0_20 [label="Entry Unk.Load", span="", cluster="Unk.Load", file="NameLookup.cs"];
m0_14 [label="Entry Ninject.Modules.CompiledModuleLoaderPlugin.LoadModules(System.Collections.Generic.IEnumerable<string>)", span="73-73", cluster="Ninject.Modules.CompiledModuleLoaderPlugin.LoadModules(System.Collections.Generic.IEnumerable<string>)", file="NameLookup.cs"];
m0_0 [label="Entry CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="14-14", cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="NameLookup.cs"];
m0_1 [label="this.property = property", span="16-16", cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="NameLookup.cs"];
m0_2 [label="this.specification = specification", span="17-17", cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="NameLookup.cs"];
m0_3 [label="this.value = value", span="18-18", cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="NameLookup.cs", color=green, community=0];
m0_5 [label="Entry CompiledModuleLoaderPlugin.cstr", span="", cluster="CompiledModuleLoaderPlugin.cstr", file="NameLookup.cs"];
m0_6 [label="Entry Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", span="29-29", cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", color=green, community=0, file="NameLookup.cs"];
m0_7 [label="Assembly expected = Assembly.Load(''Ninject.Tests.TestModule'')", span="31-31", cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", color=green, community=0, file="NameLookup.cs"];
m0_8 [label="expected.ShouldNotBeNull()", span="32-32", cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", file="NameLookup.cs"];
m0_9 [label="loaderPlugin.LoadModules(new[] { assemblyFilename })", span="34-34", cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", file="NameLookup.cs"];
m0_13 [label="Entry Unk.ShouldNotBeNull", span="", cluster="Unk.ShouldNotBeNull", file="NameLookup.cs"];
m0_24 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="NameLookup.cs"];
m0_21 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="NameLookup.cs"];
m0_17 [label="x.Load(It.Is<IEnumerable<Assembly>>(p => p.Contains(expected)))", span="36-36", cluster="lambda expression", file="NameLookup.cs"];
m0_22 [label="p.Contains(expected)", span="36-36", cluster="lambda expression", file="NameLookup.cs"];
m0_16 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="NameLookup.cs"];
m0_18 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="NameLookup.cs"];
m0_23 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="NameLookup.cs"];
m0_19 [label="Entry Unk.>", span="", cluster="Unk.>", file="NameLookup.cs"];
m0_10 [label="kernelMock.Verify(x => x.Load(It.Is<IEnumerable<Assembly>>(p => p.Contains(expected))))", span="36-36", cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", file="NameLookup.cs"];
m0_11 [label="CommandLine.Core.SpecificationProperty", span="", cluster="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled.CallsLoadMethodOnKernelWithAssemblies()", file="NameLookup.cs"];
m0_12 [label="Entry System.Reflection.Assembly.Load(string)", span="0-0", cluster="System.Reflection.Assembly.Load(string)", file="NameLookup.cs"];
m0_15 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="NameLookup.cs"];
m0_25 [label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.CompiledModuleLoaderPluginContext", span="", file="NameLookup.cs"];
m0_26 [label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled", span="", file="NameLookup.cs"];
m0_27 [label=expected, span="", file="NameLookup.cs"];
m1_19 [label="m.Kernel == this.Kernel", span="22-22", cluster="lambda expression", file="ParserTests.cs"];
m1_20 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="ParserTests.cs"];
m1_11 [label="Exit CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42", cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="ParserTests.cs"];
m1_13 [label="this.value = value", span="52-52", cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="ParserTests.cs"];
m1_44 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120", cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", file="ParserTests.cs"];
m1_45 [label="return maybe.Map(selector);", span="123-123", cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", file="ParserTests.cs"];
m1_46 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120", cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", file="ParserTests.cs"];
m1_12 [label="Entry Unk.All", span="", cluster="Unk.All", file="ParserTests.cs"];
m1_14 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="ParserTests.cs"];
m1_47 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="95-95", cluster="CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", file="ParserTests.cs"];
m1_6 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="ParserTests.cs"];
m1_8 [label="return this.Tag == MaybeType.Just;", span="36-36", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="ParserTests.cs"];
m1_3 [label="modules.Select(m => m.GetType().FullName).Should().BeEquivalentTo(new[] { ''Ninject.Tests.TestModules.TestModule'' })", span="21-21", cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs"];
m1_4 [label="modules.All(m => m.Kernel == this.Kernel).Should().BeTrue()", span="22-22", cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs"];
m1_5 [label="Exit Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", span="15-15", cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs"];
m1_21 [label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName", span="", cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="ParserTests.cs"];
m1_22 [label="return object.Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="84-84", cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", color=green, community=0, file="ParserTests.cs"];
m1_23 [label="Exit CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82", cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="ParserTests.cs"];
m1_43 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="ParserTests.cs"];
m1_7 [label="value = this.Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="33-35", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="ParserTests.cs"];
m1_29 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="ParserTests.cs"];
m1_65 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="ParserTests.cs"];
m1_48 [label="Entry CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126", cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="ParserTests.cs"];
m1_49 [label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="131-134", cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="ParserTests.cs"];
m1_50 [label="Exit CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126", cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="ParserTests.cs"];
m1_55 [label="Entry lambda expression", span="134-134", cluster="lambda expression", file="ParserTests.cs"];
m1_18 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="ParserTests.cs"];
m1_15 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserTests.cs"];
m1_16 [label="return new Nothing<T>();", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserTests.cs"];
m1_53 [label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="132-134", cluster="lambda expression", file="ParserTests.cs"];
m1_52 [label="Entry lambda expression", span="132-134", cluster="lambda expression", file="ParserTests.cs"];
m1_54 [label="Exit lambda expression", span="132-134", cluster="lambda expression", file="ParserTests.cs"];
m1_56 [label="resultSelector(sourceValue, resultValue)", span="134-134", cluster="lambda expression", file="ParserTests.cs"];
m1_57 [label="Exit lambda expression", span="134-134", cluster="lambda expression", file="ParserTests.cs"];
m1_17 [label="Exit CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserTests.cs"];
m1_0 [label="Entry Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", span="15-15", cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs"];
m1_1 [label="this.Kernel.Load(this.ModuleFilename)", span="17-17", cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs"];
m1_2 [label="var modules = this.Kernel.GetModules().ToArray()", span="19-19", cluster="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName.ModulesContainedInAssembliesAreLoaded()", file="ParserTests.cs"];
m1_10 [label="Entry CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42", cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="ParserTests.cs"];
m1_30 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="ParserTests.cs"];
m1_31 [label="T1 value1", span="97-97", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", color=green, community=0, file="ParserTests.cs"];
m1_32 [label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="98-100", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", color=green, community=0, file="ParserTests.cs"];
m1_33 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="ParserTests.cs"];
m1_9 [label="Exit CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="ParserTests.cs"];
m1_38 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs"];
m1_40 [label="maybe.MatchJust(out value)", span="114-114", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs"];
m1_39 [label="T value", span="113-113", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs"];
m1_41 [label="action(value)", span="116-116", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs"];
m1_42 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="ParserTests.cs"];
m1_24 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)", file="ParserTests.cs"];
m1_51 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87", cluster="CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="ParserTests.cs"];
m1_34 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="ParserTests.cs"];
m1_35 [label="T1 value1", span="105-105", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", color=green, community=0, file="ParserTests.cs"];
m1_36 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="106-108", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", color=green, community=0, file="ParserTests.cs"];
m1_37 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="ParserTests.cs"];
m1_59 [label="Entry CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs"];
m1_61 [label="maybe.MatchJust(out value)", span="140-140", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs"];
m1_60 [label="T value", span="139-139", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs"];
m1_62 [label="return value;", span="142-142", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs"];
m1_63 [label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="144-144", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs"];
m1_64 [label="Exit CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="ParserTests.cs"];
m1_25 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="ParserTests.cs"];
m1_26 [label="T1 value1", span="89-89", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", color=green, community=0, file="ParserTests.cs"];
m1_27 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="90-92", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", color=green, community=0, file="ParserTests.cs"];
m1_28 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="ParserTests.cs"];
m1_58 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="ParserTests.cs"];
m1_72 [label="CommandLine.Infrastructure.Maybe<T>", span="", file="ParserTests.cs"];
m1_74 [label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", span="", file="ParserTests.cs"];
m1_75 [label="System.Func<TSource, TValue, TResult>", span="", file="ParserTests.cs"];
m1_73 [label="CommandLine.Infrastructure.Just<T>", span="", file="ParserTests.cs"];
m1_76 [label=TSource, span="", file="ParserTests.cs"];
m2_9 [label="Entry Ninject.Activation.InstanceReference.As<T>()", span="59-59", cluster="Ninject.Activation.InstanceReference.As<T>()", file="SentenceBuilder.cs"];
m2_10 [label="return (T)Instance;", span="61-61", cluster="Ninject.Activation.InstanceReference.As<T>()", file="SentenceBuilder.cs"];
m2_11 [label="Exit Ninject.Activation.InstanceReference.As<T>()", span="59-59", cluster="Ninject.Activation.InstanceReference.As<T>()", file="SentenceBuilder.cs"];
m2_12 [label="Entry Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", span="69-69", cluster="Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", file="SentenceBuilder.cs"];
m2_13 [label="this.Is<T>()", span="71-71", cluster="Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", file="SentenceBuilder.cs"];
m2_14 [label="action((T)Instance)", span="72-72", cluster="Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", file="SentenceBuilder.cs"];
m2_15 [label="Exit Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", span="69-69", cluster="Ninject.Activation.InstanceReference.IfInstanceIs<T>(System.Action<T>)", file="SentenceBuilder.cs"];
m2_0 [label="Entry Ninject.Activation.InstanceReference.Is<T>()", span="34-34", cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs"];
m2_1 [label="System.Runtime.Remoting.RemotingServices.IsTransparentProxy(Instance)\r\n                && System.Runtime.Remoting.RemotingServices.GetRealProxy(Instance).GetType().Name == ''RemotingProxy''", span="37-38", cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs"];
m2_2 [label="return typeof(T).IsAssignableFrom(Instance.GetType());", span="44-44", cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs"];
m2_3 [label="return Instance is T;", span="51-51", cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs"];
m2_4 [label="Exit Ninject.Activation.InstanceReference.Is<T>()", span="34-34", cluster="Ninject.Activation.InstanceReference.Is<T>()", file="SentenceBuilder.cs"];
m2_6 [label="Entry System.Runtime.Remoting.RemotingServices.GetRealProxy(object)", span="0-0", cluster="System.Runtime.Remoting.RemotingServices.GetRealProxy(object)", file="SentenceBuilder.cs"];
m2_7 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="SentenceBuilder.cs"];
m2_16 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SentenceBuilder.cs"];
m2_8 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)", file="SentenceBuilder.cs"];
m2_5 [label="Entry System.Runtime.Remoting.RemotingServices.IsTransparentProxy(object)", span="0-0", cluster="System.Runtime.Remoting.RemotingServices.IsTransparentProxy(object)", file="SentenceBuilder.cs"];
m2_17 [label="Ninject.Activation.InstanceReference", span="", file="SentenceBuilder.cs"];
m4_19 [label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Tokenizer.cs"];
m4_20 [label="Entry CommandLine.Parser.~Parser()", span="54-54", cluster="CommandLine.Parser.~Parser()", file="Tokenizer.cs"];
m4_69 [label="Exit CommandLine.Parser.Dispose()", span="148-148", cluster="CommandLine.Parser.Dispose()", file="Tokenizer.cs"];
m4_70 [label="Entry System.GC.SuppressFinalize(object)", span="0-0", cluster="System.GC.SuppressFinalize(object)", file="Tokenizer.cs"];
m4_71 [label="return settings.EnableDashDash\r\n                ? Tokenizer.PreprocessDashDash(\r\n                        arguments,\r\n                        args =>\r\n                            Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer)))\r\n                : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer));", span="160-165", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m4_44 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="Tokenizer.cs"];
m4_45 [label="Entry lambda expression", span="110-110", cluster="lambda expression", file="Tokenizer.cs"];
m4_46 [label="Tokenize(arguments, optionSpecs, this.settings)", span="110-110", cluster="lambda expression", file="Tokenizer.cs"];
m4_29 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs"];
m4_38 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", color=green, community=0, file="Tokenizer.cs"];
m4_36 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="106-108", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs"];
m4_34 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs"];
m4_37 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs"];
m4_35 [label="T1 value1", span="105-105", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs"];
m4_39 [label="T value", span="113-113", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs"];
m4_8 [label="return this.Tag == MaybeType.Just;", span="36-36", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs"];
m4_11 [label="Exit CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42", cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="Tokenizer.cs"];
m4_12 [label="Entry CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49", cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="Tokenizer.cs"];
m4_13 [label="this.value = value", span="52-52", cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="Tokenizer.cs"];
m4_10 [label="Entry CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42", cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="Tokenizer.cs"];
m4_9 [label="Exit CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs"];
m4_14 [label="Exit CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49", cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="Tokenizer.cs"];
m4_47 [label="Exit lambda expression", span="110-110", cluster="lambda expression", file="Tokenizer.cs"];
m4_21 [label="Entry CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82", cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="Tokenizer.cs"];
m4_22 [label="return object.Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="84-84", cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="Tokenizer.cs"];
m4_49 [label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="131-134", cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="Tokenizer.cs", color=red, community=0];
m4_50 [label="Exit CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126", cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", color=green, community=0, file="Tokenizer.cs"];
m4_51 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87", cluster="CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", color=green, community=0, file="Tokenizer.cs"];
m4_52 [label="Entry lambda expression", span="132-134", cluster="lambda expression", color=green, community=0, file="Tokenizer.cs"];
m4_53 [label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="132-134", cluster="lambda expression", color=red, community=0, file="Tokenizer.cs"];
m4_54 [label="Exit lambda expression", span="132-134", cluster="lambda expression", color=green, community=0, file="Tokenizer.cs"];
m4_55 [label="Entry lambda expression", span="134-134", cluster="lambda expression", color=green, community=0, file="Tokenizer.cs"];
m4_56 [label="resultSelector(sourceValue, resultValue)", span="134-134", cluster="lambda expression", color=green, community=0, file="Tokenizer.cs"];
m4_57 [label="Exit lambda expression", span="134-134", cluster="lambda expression", file="Tokenizer.cs"];
m4_3 [label="Entry CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="45-45", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Tokenizer.cs"];
m4_4 [label="Entry CommandLine.ParserSettings.ParserSettings()", span="25-25", cluster="CommandLine.ParserSettings.ParserSettings()", file="Tokenizer.cs"];
m4_5 [label="Entry CommandLine.Parser.Parser()", span="25-25", cluster="CommandLine.Parser.Parser()", file="Tokenizer.cs"];
m4_23 [label="Entry CommandLine.Parser.Dispose(bool)", span="194-194", cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs"];
m4_16 [label="return new Nothing<T>();", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Tokenizer.cs"];
m4_43 [label="Exit lambda expression", span="108-113", cluster="lambda expression", file="Tokenizer.cs"];
m4_33 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs"];
m4_17 [label="Exit CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Tokenizer.cs"];
m4_18 [label="this.settings.Consumed = true", span="48-48", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Tokenizer.cs"];
m4_58 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="Tokenizer.cs"];
m4_65 [label="Exit lambda expression", span="137-137", cluster="lambda expression", file="Tokenizer.cs"];
m4_96 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="Tokenizer.cs"];
m4_62 [label="return value;", span="142-142", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs"];
m4_81 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Tokenizer.cs"];
m4_48 [label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="155-155", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m4_6 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs"];
m4_7 [label="value = this.Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="33-35", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs"];
m4_66 [label="Entry CommandLine.Parser.Dispose()", span="148-148", cluster="CommandLine.Parser.Dispose()", file="Tokenizer.cs"];
m4_67 [label="Dispose(true)", span="150-150", cluster="CommandLine.Parser.Dispose()", file="Tokenizer.cs"];
m4_68 [label="GC.SuppressFinalize(this)", span="152-152", cluster="CommandLine.Parser.Dispose()", file="Tokenizer.cs"];
m4_87 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="Tokenizer.cs"];
m4_97 [label="Entry lambda expression", span="180-180", cluster="lambda expression", file="Tokenizer.cs"];
m4_1 [label="this.tag = tag", span="18-18", cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", color=green, community=0, file="Tokenizer.cs"];
m4_0 [label="Entry CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16", cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", file="Tokenizer.cs"];
m4_41 [label="action(value)", span="116-116", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs"];
m4_59 [label="Entry CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs"];
m4_60 [label="T value", span="139-139", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=green, community=0, file="Tokenizer.cs"];
m4_61 [label="maybe.MatchJust(out value)", span="140-140", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs"];
m4_63 [label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="144-144", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs"];
m4_64 [label="Exit CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", color=green, community=0, file="Tokenizer.cs"];
m4_42 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111", cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs"];
m4_76 [label=TSource, span="", cluster="lambda expression", file="Tokenizer.cs"];
m4_79 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="164-164", cluster="lambda expression", file="Tokenizer.cs"];
m4_83 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="165-165", cluster="lambda expression", file="Tokenizer.cs"];
m4_30 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs"];
m4_75 [label="System.Func<TSource, TValue, TResult>", span="", cluster="lambda expression", file="Tokenizer.cs"];
m4_82 [label="Entry lambda expression", span="165-165", cluster="lambda expression", file="Tokenizer.cs"];
m4_77 [label="Exit lambda expression", span="163-164", cluster="lambda expression", file="Tokenizer.cs"];
m4_78 [label="Entry lambda expression", span="164-164", cluster="lambda expression", file="Tokenizer.cs"];
m4_80 [label="Exit lambda expression", span="164-164", cluster="lambda expression", file="Tokenizer.cs"];
m4_84 [label="Exit lambda expression", span="165-165", cluster="lambda expression", file="Tokenizer.cs"];
m4_32 [label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="98-100", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs", color=red, community=0];
m4_31 [label="T1 value1", span="97-97", cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs"];
m4_108 [label="writer.Write(HelpText.AutoBuild(parserResult))", span="188-188", cluster="lambda expression", file="Tokenizer.cs"];
m4_93 [label="Entry lambda expression", span="180-180", cluster="lambda expression", file="Tokenizer.cs"];
m4_107 [label="Entry lambda expression", span="188-188", cluster="lambda expression", file="Tokenizer.cs"];
m4_109 [label="Exit lambda expression", span="188-188", cluster="lambda expression", file="Tokenizer.cs"];
m4_95 [label="Exit lambda expression", span="180-180", cluster="lambda expression", file="Tokenizer.cs"];
m4_94 [label="errs.Where(e => e.Tag != ErrorType.UnknownOptionError)", span="180-180", cluster="lambda expression", file="Tokenizer.cs"];
m4_98 [label="e.Tag != ErrorType.UnknownOptionError", span="180-180", cluster="lambda expression", file="Tokenizer.cs"];
m4_99 [label="Exit lambda expression", span="180-180", cluster="lambda expression", file="Tokenizer.cs"];
m4_2 [label="Exit CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16", cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", file="Tokenizer.cs"];
m4_89 [label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="184-184", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs"];
m4_100 [label="parserResult.Errors.Any()", span="186-186", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs"];
m4_101 [label="helpWriter.ToMaybe().Do(writer => writer.Write(HelpText.AutoBuild(parserResult)))", span="188-188", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs"];
m4_102 [label="return parserResult;", span="191-191", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs"];
m4_103 [label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="184-184", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Tokenizer.cs"];
m4_104 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Tokenizer.cs"];
m4_105 [label="Entry T.ToMaybe<T>()", span="82-82", cluster="T.ToMaybe<T>()", file="Tokenizer.cs"];
m4_88 [label="Entry CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="177-177", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="Tokenizer.cs"];
m4_90 [label="return ignoreUnknownArguments\r\n                       ? parserResult.MapErrors(errs => errs.Where(e => e.Tag != ErrorType.UnknownOptionError))\r\n                       : parserResult;", span="179-181", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="Tokenizer.cs"];
m4_91 [label="Exit CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", span="177-177", cluster="CommandLine.Parser.HandleUnknownArguments<T>(CommandLine.ParserResult<T>, bool)", file="Tokenizer.cs"];
m4_24 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)", file="Tokenizer.cs"];
m4_27 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="90-92", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs"];
m4_26 [label="T1 value1", span="89-89", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs"];
m4_25 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs"];
m4_28 [label="Exit CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87", cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs"];
m4_92 [label="Entry Unk.MapErrors", span="", cluster="Unk.MapErrors", file="Tokenizer.cs"];
m4_40 [label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="168-168", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m4_110 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="252-252", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Tokenizer.cs"];
m4_106 [label="Entry CommandLine.Infrastructure.Maybe<T>.Do<T>(System.Action<T>)", span="111-111", cluster="CommandLine.Infrastructure.Maybe<T>.Do<T>(System.Action<T>)", file="Tokenizer.cs"];
m4_74 [label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", span="", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m4_73 [label="CommandLine.Infrastructure.Just<T>", span="", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m4_119 [label="Entry CommandLine.ParserSettings.Dispose()", span="119-119", cluster="CommandLine.ParserSettings.Dispose()", file="Tokenizer.cs"];
m4_85 [label="return DisplayHelp(\r\n                HandleUnknownArguments(\r\n                    parseFunc(),\r\n                    settings.IgnoreUnknownArguments),\r\n                settings.HelpWriter);", span="170-174", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m4_86 [label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="168-168", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m4_15 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Tokenizer.cs"];
m4_72 [label="CommandLine.Infrastructure.Maybe<T>", span="", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Tokenizer.cs"];
m4_112 [label="this.disposed", span="196-196", cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs"];
m4_115 [label="settings != null", span="203-203", cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs"];
m4_116 [label="settings.Dispose()", span="205-205", cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs"];
m4_117 [label="this.disposed = true", span="208-208", cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs"];
m4_113 [label="return;", span="198-198", cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs"];
m4_114 [label=disposing, span="201-201", cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs"];
m4_118 [label="Exit CommandLine.Parser.Dispose(bool)", span="194-194", cluster="CommandLine.Parser.Dispose(bool)", file="Tokenizer.cs"];
m4_111 [label="Entry System.IO.TextWriter.Write(string)", span="0-0", cluster="System.IO.TextWriter.Write(string)", file="Tokenizer.cs"];
m4_120 [label="CommandLine.Parser", span="", file="Tokenizer.cs"];
m4_123 [label="string[]", span="", file="Tokenizer.cs"];
m4_124 [label="params System.Type[]", span="", file="Tokenizer.cs"];
m4_121 [label="System.Func<T>", span="", file="Tokenizer.cs"];
m4_122 [label="string[]", span="", file="Tokenizer.cs"];
m4_125 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="Tokenizer.cs"];
m4_126 [label="CommandLine.ParserSettings", span="", file="Tokenizer.cs"];
m4_127 [label="CommandLine.ParserResult<T>", span="", file="Tokenizer.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=1, style=dashed, color=darkseagreen4, label=expected];
n2 -> n3  [key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n2 -> n7  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n3 -> n4  [key=0, style=solid];
n3 -> n6  [key=2, style=dotted];
n7 -> n8  [key=0, style=solid];
n4 -> n0  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=2, style=dotted];
n8 -> n11  [key=2, style=dotted];
n8 -> n12  [key=2, style=dotted];
n8 -> n13  [key=2, style=dotted];
n9 -> n7  [key=0, style=bold, color=blue];
n14 -> n15  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n19  [key=2, style=dotted];
n15 -> n20  [key=2, style=dotted];
n15 -> n17  [key=1, style=dashed, color=darkseagreen4, label=expected];
n16 -> n17  [key=0, style=solid];
n16 -> n19  [key=2, style=dotted];
n16 -> n20  [key=2, style=dotted];
n16 -> n5  [key=2, style=dotted];
n16 -> n21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n17 -> n18  [key=0, style=solid];
n17 -> n6  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n18 -> n14  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid];
n22 -> n10  [key=2, style=dotted];
n22 -> n11  [key=2, style=dotted];
n22 -> n12  [key=2, style=dotted];
n22 -> n13  [key=2, style=dotted];
n23 -> n21  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n19  [key=2, style=dotted];
n25 -> n20  [key=2, style=dotted];
n25 -> n27  [key=1, style=dashed, color=darkseagreen4, label=expected];
n26 -> n27  [key=0, style=solid];
n26 -> n19  [key=2, style=dotted];
n26 -> n20  [key=2, style=dotted];
n26 -> n5  [key=2, style=dotted];
n26 -> n29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n27 -> n28  [key=0, style=solid];
n27 -> n6  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n28 -> n24  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n30 -> n10  [key=2, style=dotted];
n30 -> n11  [key=2, style=dotted];
n30 -> n12  [key=2, style=dotted];
n30 -> n13  [key=2, style=dotted];
n31 -> n29  [key=0, style=bold, color=blue];
n32 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n33 -> n19  [key=2, style=dotted];
n33 -> n20  [key=2, style=dotted];
n33 -> n35  [key=1, style=dashed, color=darkseagreen4, label=expected];
n34 -> n35  [key=0, style=solid];
n34 -> n19  [key=2, style=dotted];
n34 -> n20  [key=2, style=dotted];
n34 -> n5  [key=2, style=dotted];
n34 -> n37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n35 -> n36  [key=0, style=solid];
n35 -> n6  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n36 -> n32  [key=0, style=bold, color=blue];
n38 -> n39  [key=0, style=solid];
n38 -> n10  [key=2, style=dotted];
n38 -> n11  [key=2, style=dotted];
n38 -> n12  [key=2, style=dotted];
n38 -> n13  [key=2, style=dotted];
n39 -> n37  [key=0, style=bold, color=blue];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_3  [key=1, style=dashed, color=green, label="CommandLine.Infrastructure.Maybe<object>"];
m0_0 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_5  [key=2, style=dotted];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_3 -> m0_4  [key=0, style=solid, color=green];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_5 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_6 -> m0_7  [key=0, style=solid, color=green];
m0_6 -> m0_8  [key=0, style=solid, color=green];
m0_7 -> m0_9  [key=0, style=solid, color=green];
m0_7 -> m0_10  [key=2, style=dotted, color=green];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_12  [key=2, style=dotted];
m0_7 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_7 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_8 -> m0_0  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_13  [key=2, style=dotted];
m0_9 -> m0_5  [key=0, style=bold, color=blue];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_14  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_20  [key=2, style=dotted];
m0_17 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_24  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_15  [key=2, style=dotted];
m0_10 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_11 -> m0_6  [key=0, style=bold, color=blue];
m0_11 -> m0_3  [key=1, style=dashed, color=green, label="CommandLine.Core.SpecificationProperty"];
m0_11 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m0_11 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m0_25 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.CompiledModuleLoaderPluginContext"];
m0_25 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.CompiledModuleLoaderPluginContext"];
m0_26 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled"];
m0_26 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Unit.CompiledModuleLoaderPluginTests.WhenLoadModulesIsCalled"];
m0_27 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_27 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label=expected];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_12  [key=2, style=dotted];
m1_20 -> n13  [key=0, style=bold, color=blue];
m1_20 -> m1_18  [key=0, style=bold, color=blue];
m1_11 -> m1_10  [key=0, style=bold, color=blue];
m1_13 -> m1_14  [key=0, style=solid];
m1_44 -> m1_45  [key=0, style=solid];
m1_45 -> m1_47  [key=2, style=dotted];
m1_45 -> m1_46  [key=0, style=solid];
m1_46 -> m1_44  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_10  [key=2, style=dotted];
m1_3 -> m1_11  [key=2, style=dotted];
m1_3 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_12  [key=2, style=dotted];
m1_4 -> m1_10  [key=2, style=dotted];
m1_4 -> m1_13  [key=2, style=dotted];
m1_4 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_5 -> m1_3  [key=0, style=bold, color=blue];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid, color=green];
m1_21 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName"];
m1_21 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName"];
m1_21 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName"];
m1_21 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Integration.ModuleLoadingTests.WhenLoadIsCalledWithFileName"];
m1_22 -> m1_23  [key=0, style=solid, color=green];
m1_22 -> m1_24  [key=2, style=dotted, color=green];
m1_22 -> m1_15  [key=2, style=dotted, color=green];
m1_22 -> n13  [key=2, style=dotted, color=green];
m1_23 -> m1_21  [key=0, style=bold, color=blue];
m1_7 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="out T"];
m1_7 -> m1_8  [key=0, style=solid];
m1_48 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>"];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
m1_49 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_51  [key=2, style=dotted];
m1_50 -> m1_48  [key=0, style=bold, color=blue];
m1_55 -> m1_56  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_17  [key=2, style=dotted];
m1_16 -> m1_14  [key=0, style=bold, color=blue];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_10  [key=2, style=dotted];
m1_53 -> m1_29  [key=2, style=dotted];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_47  [key=2, style=dotted];
m1_53 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label=TSource];
m1_54 -> m1_52  [key=0, style=bold, color=blue];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_58  [key=2, style=dotted];
m1_57 -> m1_55  [key=0, style=bold, color=blue];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=modules];
m1_10 -> m1_11  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid, color=green];
m1_30 -> m1_32  [key=1, style=dashed, color=green, label="CommandLine.Infrastructure.Maybe<T1>"];
m1_31 -> m1_32  [key=0, style=solid, color=green];
m1_32 -> m1_32  [key=1, style=dashed, color=green, label=value1];
m1_32 -> m1_33  [key=0, style=solid, color=green];
m1_32 -> m1_6  [key=2, style=dotted, color=green];
m1_32 -> m1_29  [key=2, style=dotted, color=green];
m1_32 -> n13  [key=2, style=dotted, color=green];
m1_32 -> m1_15  [key=2, style=dotted, color=green];
m1_33 -> m1_30  [key=0, style=bold, color=blue];
m1_9 -> m1_6  [key=0, style=bold, color=blue];
m1_38 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T>"];
m1_40 -> m1_6  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_42  [key=0, style=solid];
m1_39 -> m1_40  [key=0, style=solid];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [key=2, style=dotted];
m1_42 -> m1_38  [key=0, style=bold, color=blue];
m1_34 -> m1_35  [key=0, style=solid, color=green];
m1_34 -> m1_36  [key=1, style=dashed, color=green, label="CommandLine.Infrastructure.Maybe<T1>"];
m1_35 -> m1_36  [key=0, style=solid, color=green];
m1_36 -> m1_36  [key=1, style=dashed, color=green, label=value1];
m1_36 -> m1_37  [key=0, style=solid, color=green];
m1_36 -> m1_6  [key=2, style=dotted, color=green];
m1_36 -> m1_29  [key=2, style=dotted, color=green];
m1_37 -> m1_34  [key=0, style=bold, color=blue];
m1_59 -> m1_61  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
m1_61 -> m1_6  [key=2, style=dotted];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_63  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_62 -> m1_64  [key=0, style=solid];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_65  [key=2, style=dotted];
m1_64 -> m1_59  [key=0, style=bold, color=blue];
m1_25 -> m1_26  [key=0, style=solid, color=green];
m1_25 -> m1_27  [key=1, style=dashed, color=green, label="CommandLine.Infrastructure.Maybe<T1>"];
m1_26 -> m1_27  [key=0, style=solid, color=green];
m1_27 -> m1_27  [key=1, style=dashed, color=green, label=value1];
m1_27 -> m1_28  [key=0, style=solid, color=green];
m1_27 -> m1_6  [key=2, style=dotted, color=green];
m1_27 -> m1_29  [key=2, style=dotted, color=green];
m1_27 -> m1_15  [key=2, style=dotted, color=green];
m1_28 -> m1_25  [key=0, style=bold, color=blue];
m1_72 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m1_72 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m1_72 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m1_72 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m1_74 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>"];
m1_75 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
m1_75 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
m1_73 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Just<T>"];
m1_76 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label=TSource];
m2_9 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_11 -> m2_9  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T>"];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_15  [key=0, style=solid];
m2_13 -> m2_0  [key=2, style=dotted];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_16  [key=2, style=dotted];
m2_15 -> m2_12  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=0, style=solid];
m2_1 -> m2_5  [key=2, style=dotted];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_7  [key=2, style=dotted];
m2_2 -> m2_4  [key=0, style=solid];
m2_2 -> m2_7  [key=2, style=dotted];
m2_2 -> m2_8  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_0  [key=0, style=bold, color=blue];
m2_17 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Activation.InstanceReference"];
m2_17 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Activation.InstanceReference"];
m2_17 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Activation.InstanceReference"];
m2_17 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Activation.InstanceReference"];
m2_17 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Activation.InstanceReference"];
m2_17 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Activation.InstanceReference"];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_12  [key=2, style=dotted];
m4_19 -> m4_3  [key=0, style=bold, color=blue];
m4_20 -> n13  [key=0, style=bold, color=blue];
m4_20 -> m4_21  [key=0, style=solid];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_66  [key=0, style=bold, color=blue];
m4_70 -> m4_71  [key=0, style=solid];
m4_71 -> m4_69  [key=0, style=bold, color=blue];
m4_71 -> m4_72  [key=0, style=solid];
m4_71 -> m4_73  [key=2, style=dotted];
m4_71 -> m4_74  [key=2, style=dotted];
m4_71 -> m4_75  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_71 -> m4_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_44 -> m4_45  [key=0, style=solid];
m4_45 -> m4_46  [key=0, style=solid];
m4_45 -> m4_47  [key=2, style=dotted];
m4_45 -> m4_22  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Infrastructure.Maybe<TResult> SelectMany"];
m4_46 -> m4_44  [key=0, style=bold, color=blue];
m4_46 -> m4_48  [key=2, style=dotted];
m4_46 -> m4_47  [key=0, style=solid];
m4_29 -> m4_38  [key=1, style=dashed, color=green, label="System.Func<T>"];
m4_29 -> m4_34  [key=0, style=solid];
m4_29 -> m4_36  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_29 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
m4_38 -> m4_39  [key=0, style=solid, color=green];
m4_38 -> m4_40  [key=2, style=dotted, color=green];
m4_38 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T>"];
m4_36 -> m4_38  [key=0, style=solid, color=green];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_6  [key=2, style=dotted];
m4_36 -> m4_29  [key=2, style=dotted];
m4_36 -> m4_36  [key=1, style=dashed, color=darkseagreen4, label=value1];
m4_34 -> m4_36  [key=0, style=solid];
m4_34 -> m4_35  [key=0, style=solid];
m4_37 -> m4_39  [key=0, style=solid];
m4_37 -> m4_15  [key=2, style=dotted];
m4_37 -> m4_34  [key=0, style=bold, color=blue];
m4_35 -> m4_39  [key=0, style=solid];
m4_35 -> m4_15  [key=2, style=dotted];
m4_35 -> m4_36  [key=0, style=solid];
m4_39 -> m4_29  [key=0, style=bold, color=blue];
m4_39 -> m4_40  [key=0, style=solid];
m4_8 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.Action<CommandLine.ParserSettings>"];
m4_8 -> m4_9  [key=0, style=solid];
m4_11 -> m4_4  [key=2, style=dotted];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_10  [key=0, style=bold, color=blue];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_16  [key=2, style=dotted];
m4_13 -> m4_14  [key=0, style=solid];
m4_10 -> m4_15  [key=2, style=dotted];
m4_10 -> m4_14  [key=0, style=solid];
m4_10 -> m4_11  [key=0, style=solid];
m4_9 -> m4_11  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_6  [key=0, style=bold, color=blue];
m4_14 -> m4_8  [key=0, style=bold, color=blue];
m4_14 -> m4_12  [key=0, style=bold, color=blue];
m4_47 -> m4_45  [key=0, style=bold, color=blue];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_23  [key=2, style=dotted];
m4_22 -> m4_20  [key=0, style=bold, color=blue];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_24  [key=2, style=dotted];
m4_22 -> m4_15  [key=2, style=dotted];
m4_22 -> n13  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid, color=red];
m4_49 -> m4_52  [key=1, style=dashed, color=red, label="lambda expression"];
m4_49 -> m4_54  [key=1, style=dashed, color=green, label="params System.Type[]"];
m4_49 -> m4_56  [key=1, style=dashed, color=green, label="string[]"];
m4_49 -> m4_60  [key=1, style=dashed, color=green, label="string[]"];
m4_49 -> m4_51  [key=2, style=dotted, color=red];
m4_50 -> m4_51  [key=0, style=solid, color=green];
m4_50 -> m4_52  [key=0, style=solid, color=green];
m4_50 -> m4_48  [key=0, style=bold, color=blue];
m4_51 -> m4_57  [key=0, style=solid, color=green];
m4_51 -> m4_15  [key=2, style=dotted, color=green];
m4_52 -> m4_53  [key=0, style=solid, color=red];
m4_52 -> m4_54  [key=0, style=solid, color=green];
m4_52 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label=TSource];
m4_53 -> m4_57  [key=0, style=solid, color=green];
m4_53 -> m4_15  [key=2, style=dotted, color=green];
m4_53 -> m4_54  [key=0, style=solid, color=red];
m4_53 -> m4_29  [key=2, style=dotted, color=red];
m4_53 -> m4_47  [key=2, style=dotted, color=red];
m4_53 -> m4_55  [key=1, style=dashed, color=red, label="lambda expression"];
m4_54 -> m4_55  [key=0, style=solid, color=green];
m4_54 -> m4_56  [key=0, style=solid, color=green];
m4_54 -> m4_52  [key=0, style=bold, color=blue];
m4_54 -> m4_0  [key=0, style=bold, color=blue];
m4_55 -> m4_57  [key=0, style=solid, color=green];
m4_55 -> m4_58  [key=2, style=dotted, color=green];
m4_55 -> m4_56  [key=0, style=solid];
m4_56 -> m4_57  [key=0, style=solid, color=green];
m4_56 -> m4_40  [key=2, style=dotted, color=green];
m4_56 -> m4_59  [key=1, style=dashed, color=green, label="lambda expression"];
m4_56 -> m4_58  [key=2, style=dotted];
m4_57 -> m4_49  [key=0, style=bold, color=blue];
m4_57 -> m4_55  [key=0, style=bold, color=blue];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_17  [key=0, style=solid];
m4_4 -> m4_5  [key=0, style=solid];
m4_5 -> m4_3  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_23 -> m4_21  [key=0, style=bold, color=blue];
m4_23 -> m4_112  [key=0, style=solid];
m4_23 -> m4_114  [key=1, style=dashed, color=darkseagreen4, label=bool];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_10  [key=2, style=dotted];
m4_43 -> m4_41  [key=0, style=bold, color=blue];
m4_33 -> m4_30  [key=0, style=bold, color=blue];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_15  [key=0, style=bold, color=blue];
m4_18 -> m4_19  [key=0, style=solid];
m4_65 -> m4_63  [key=0, style=bold, color=blue];
m4_62 -> m4_64  [key=0, style=solid];
m4_48 -> m4_49  [key=0, style=solid, color=red];
m4_48 -> m4_53  [key=1, style=dashed, color=red, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>"];
m4_48 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
m4_48 -> m4_71  [key=0, style=solid];
m4_48 -> m4_76  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_48 -> m4_79  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_48 -> m4_83  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_6 -> m4_4  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid];
m4_7 -> m4_5  [key=0, style=bold, color=blue];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label="out T"];
m4_66 -> m4_67  [key=0, style=solid];
m4_67 -> m4_68  [key=0, style=solid];
m4_67 -> m4_23  [key=2, style=dotted];
m4_68 -> m4_66  [key=0, style=bold, color=blue];
m4_68 -> m4_62  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<CommandLine.Error> onError"];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_70  [key=2, style=dotted];
m4_97 -> m4_98  [key=0, style=solid];
m4_1 -> m4_54  [key=0, style=solid, color=green];
m4_1 -> m4_3  [key=2, style=dotted, color=green];
m4_1 -> m4_4  [key=2, style=dotted, color=green];
m4_1 -> m4_2  [key=0, style=solid];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_43  [key=2, style=dotted];
m4_59 -> m4_60  [key=0, style=solid, color=green];
m4_59 -> m4_61  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m4_59 -> m4_63  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
m4_60 -> m4_61  [key=0, style=solid, color=green];
m4_60 -> m4_62  [key=2, style=dotted, color=green];
m4_60 -> m4_63  [key=1, style=dashed, color=green, label="lambda expression"];
m4_61 -> m4_59  [key=0, style=bold, color=blue];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_63  [key=0, style=solid];
m4_61 -> m4_6  [key=2, style=dotted];
m4_63 -> m4_64  [key=0, style=solid, color=green];
m4_63 -> m4_65  [key=2, style=dotted];
m4_63 -> m4_1  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<CommandLine.Error> onError"];
m4_64 -> m4_65  [key=0, style=solid, color=green];
m4_64 -> m4_48  [key=2, style=dotted, color=green];
m4_64 -> m4_59  [key=0, style=bold, color=blue];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_44  [key=2, style=dotted];
m4_42 -> m4_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_42 -> m4_38  [key=0, style=bold, color=blue];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> m4_74  [key=2, style=dotted];
m4_76 -> m4_78  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_76 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label=TSource];
m4_79 -> m4_80  [key=0, style=solid];
m4_79 -> m4_81  [key=2, style=dotted];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_81  [key=2, style=dotted];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_32  [key=1, style=dashed, color=red, label="CommandLine.Infrastructure.Maybe<T1>"];
m4_75 -> m4_76  [key=0, style=solid];
m4_75 -> m4_53  [key=1, style=dashed, color=red, label="System.Func<TSource, TValue, TResult>"];
m4_75 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
m4_82 -> m4_83  [key=0, style=solid];
m4_77 -> m4_75  [key=0, style=bold, color=blue];
m4_78 -> m4_79  [key=0, style=solid];
m4_80 -> m4_78  [key=0, style=bold, color=blue];
m4_84 -> m4_82  [key=0, style=bold, color=blue];
m4_32 -> m4_30  [key=0, style=bold, color=blue];
m4_32 -> m4_33  [key=0, style=solid, color=red];
m4_32 -> m4_6  [key=2, style=dotted, color=red];
m4_32 -> m4_29  [key=2, style=dotted, color=red];
m4_32 -> n13  [key=2, style=dotted, color=red];
m4_32 -> m4_15  [key=2, style=dotted, color=red];
m4_32 -> m4_32  [key=1, style=dashed, color=red, label=value1];
m4_31 -> m4_32  [key=0, style=solid, color=red];
m4_31 -> m4_33  [key=2, style=dotted];
m4_108 -> m4_109  [key=0, style=solid];
m4_108 -> m4_110  [key=2, style=dotted];
m4_108 -> m4_111  [key=2, style=dotted];
m4_93 -> m4_94  [key=0, style=solid];
m4_107 -> m4_108  [key=0, style=solid];
m4_109 -> m4_107  [key=0, style=bold, color=blue];
m4_95 -> m4_93  [key=0, style=bold, color=blue];
m4_94 -> m4_95  [key=0, style=solid];
m4_94 -> m4_96  [key=2, style=dotted];
m4_94 -> m4_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_98 -> m4_99  [key=0, style=solid];
m4_99 -> m4_97  [key=0, style=bold, color=blue];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
m4_89 -> m4_100  [key=0, style=solid];
m4_89 -> m4_101  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m4_89 -> m4_108  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m4_89 -> m4_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m4_100 -> m4_101  [key=0, style=solid];
m4_100 -> m4_102  [key=0, style=solid];
m4_100 -> m4_104  [key=2, style=dotted];
m4_101 -> m4_102  [key=0, style=solid];
m4_101 -> m4_105  [key=2, style=dotted];
m4_101 -> m4_106  [key=2, style=dotted];
m4_101 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_102 -> m4_103  [key=0, style=solid];
m4_103 -> m4_89  [key=0, style=bold, color=blue];
m4_88 -> m4_90  [key=0, style=solid];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_92  [key=2, style=dotted];
m4_90 -> m4_93  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_91 -> m4_88  [key=0, style=bold, color=blue];
m4_24 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_24 -> m4_25  [key=0, style=solid];
m4_27 -> m4_29  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_27 -> m4_6  [key=2, style=dotted];
m4_27 -> m4_15  [key=2, style=dotted];
m4_27 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label=value1];
m4_27 -> m4_49  [key=3, color=red, style=bold, label="Parameter variable System.Func<T1, T2> func"];
m4_26 -> m4_15  [key=2, style=dotted];
m4_26 -> m4_28  [key=0, style=solid];
m4_26 -> m4_27  [key=0, style=solid];
m4_25 -> m4_27  [key=0, style=solid];
m4_25 -> m4_26  [key=0, style=solid];
m4_28 -> m4_24  [key=0, style=bold, color=blue];
m4_28 -> m4_25  [key=0, style=bold, color=blue];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_42  [key=0, style=solid];
m4_40 -> m4_6  [key=2, style=dotted];
m4_40 -> m4_85  [key=0, style=solid];
m4_74 -> m4_53  [key=1, style=dashed, color=red, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>"];
m4_73 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Just<T>"];
m4_85 -> m4_86  [key=0, style=solid];
m4_85 -> m4_87  [key=2, style=dotted];
m4_85 -> m4_88  [key=2, style=dotted];
m4_85 -> m4_89  [key=2, style=dotted];
m4_86 -> m4_40  [key=0, style=bold, color=blue];
m4_15 -> m4_16  [key=0, style=solid];
m4_72 -> m4_48  [key=0, style=bold, color=blue];
m4_72 -> m4_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m4_72 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m4_72 -> m4_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m4_72 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<T>"];
m4_112 -> m4_113  [key=0, style=solid];
m4_112 -> m4_114  [key=0, style=solid];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> m4_117  [key=0, style=solid];
m4_116 -> m4_117  [key=0, style=solid];
m4_116 -> m4_119  [key=2, style=dotted];
m4_117 -> m4_118  [key=0, style=solid];
m4_113 -> m4_118  [key=0, style=solid];
m4_114 -> m4_115  [key=0, style=solid];
m4_114 -> m4_118  [key=0, style=solid];
m4_118 -> m4_23  [key=0, style=bold, color=blue];
m4_120 -> m4_38  [key=1, style=dashed, color=green, label="CommandLine.Parser"];
m4_120 -> m4_56  [key=1, style=dashed, color=green, label="CommandLine.Parser"];
m4_120 -> m4_60  [key=1, style=dashed, color=green, label="CommandLine.Parser"];
m4_120 -> m4_64  [key=1, style=dashed, color=green, label="CommandLine.Parser"];
m4_120 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_46  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_67  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_68  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_112  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_115  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_116  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_120 -> m4_117  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m4_123 -> m4_60  [key=1, style=dashed, color=green, label="string[]"];
m4_124 -> m4_60  [key=1, style=dashed, color=green, label="params System.Type[]"];
m4_121 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
m4_122 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_125 -> m4_76  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_125 -> m4_79  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_125 -> m4_83  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_126 -> m4_76  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_126 -> m4_79  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_126 -> m4_83  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_127 -> m4_108  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
}
