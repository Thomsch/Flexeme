digraph  {
n101 [label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo", span=""];
n102 [label="CommandLine.Internal.OptionMap", span=""];
n0 [label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", span="45-45", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()"];
n1 [label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", span="45-45", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()"];
n2 [label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", span="47-47", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)"];
n3 [label="BadOption = option", span="49-49", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)"];
n4 [label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", span="47-47", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)"];
n5 [label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="54-54", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()"];
n6 [label="++_count", span="54-54", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()"];
n7 [label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="54-54", cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()"];
n8 [label="Entry CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="62-62", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)"];
n9 [label="_settings = settings", span="67-67", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)"];
n11 [label="_names = new Dictionary<string, string>(capacity, comparer)", span="71-71", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)"];
n12 [label="_map = new Dictionary<string, OptionInfo>(capacity * 2, comparer)", span="72-72", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)"];
n14 [label="_mutuallyExclusiveSetMap = new Dictionary<string, MutuallyExclusiveInfo>(capacity, StringComparer.OrdinalIgnoreCase)", span="75-75", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)"];
n10 [label="IEqualityComparer<string> comparer =\r\n                _settings.CaseSensitive ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase", span="69-70", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)"];
n16 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)"];
n13 [label="_settings.MutuallyExclusive", span="73-73", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)"];
n15 [label="Exit CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="62-62", cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)"];
n17 [label="Entry CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", span="79-79", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n18 [label="var list = ReflectionUtil.RetrievePropertyList<BaseOptionAttribute>(target)", span="81-81", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n21 [label="var map = new OptionMap(list.Count, settings)", span="86-86", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n25 [label="map.RawOptions = target", span="94-94", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n19 [label="list == null", span="82-82", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n28 [label="Entry CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="43-43", cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)"];
n22 [label=list, span="87-87", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n20 [label="return null;", span="84-84", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n24 [label="map[pair.Right.UniqueName] = new OptionInfo(pair.Right, pair.Left)", span="91-91", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n26 [label="return map;", span="95-95", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n23 [label="pair.Left != null && pair.Right != null", span="89-89", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n29 [label="Entry CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", span="43-43", cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)"];
n27 [label="Exit CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", span="79-79", cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)"];
n30 [label="Entry CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", span="98-98", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n31 [label="var map = new OptionMap(verbs.Count, settings)", span="101-101", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n32 [label=verbs, span="102-102", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n34 [label="!optionInfo.HasParameterLessCtor && verb.Left.GetValue(target, null) == null", span="109-109", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n37 [label="map.RawOptions = target", span="116-116", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n36 [label="map[verb.Right.UniqueName] = optionInfo", span="114-114", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n38 [label="return map;", span="117-117", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n33 [label="var optionInfo = new OptionInfo(verb.Right, verb.Left)\r\n                {\r\n                    HasParameterLessCtor = verb.Left.PropertyType.GetConstructor(Type.EmptyTypes) != null\r\n\r\n                }", span="104-108", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n35 [label="throw new CommandLineParserException(''Type {0} must have a parameterless constructor or'' +\r\n                        '' be already initialized to be used as a verb command.''.FormatInvariant(verb.Left.PropertyType));", span="111-112", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n40 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])"];
n41 [label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.GetValue(object, object[])"];
n39 [label="Exit CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", span="98-98", cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)"];
n42 [label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string)", span="52-52", cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)"];
n43 [label="Entry string.FormatInvariant(params object[])", span="58-58", cluster="string.FormatInvariant(params object[])"];
n44 [label="Entry CommandLine.Internal.OptionMap.EnforceRules()", span="153-153", cluster="CommandLine.Internal.OptionMap.EnforceRules()"];
n45 [label="return EnforceMutuallyExclusiveMap() && EnforceRequiredRule();", span="155-155", cluster="CommandLine.Internal.OptionMap.EnforceRules()"];
n46 [label="Exit CommandLine.Internal.OptionMap.EnforceRules()", span="153-153", cluster="CommandLine.Internal.OptionMap.EnforceRules()"];
n47 [label="Entry CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", span="180-180", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n48 [label="Entry CommandLine.Internal.OptionMap.EnforceRequiredRule()", span="166-166", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()"];
n49 [label="Entry CommandLine.Internal.OptionMap.SetDefaults()", span="158-158", cluster="CommandLine.Internal.OptionMap.SetDefaults()"];
n50 [label="_map.Values", span="160-160", cluster="CommandLine.Internal.OptionMap.SetDefaults()"];
n51 [label="option.SetDefault(RawOptions)", span="162-162", cluster="CommandLine.Internal.OptionMap.SetDefaults()"];
n52 [label="Exit CommandLine.Internal.OptionMap.SetDefaults()", span="158-158", cluster="CommandLine.Internal.OptionMap.SetDefaults()"];
n53 [label="Entry CommandLine.Internal.OptionInfo.SetDefault(object)", span="160-160", cluster="CommandLine.Internal.OptionInfo.SetDefault(object)"];
n54 [label="bool requiredRulesAllMet = true", span="168-168", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()"];
n55 [label="_map.Values", span="169-169", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()"];
n59 [label="return requiredRulesAllMet;", span="177-177", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()"];
n56 [label="option.Required && !option.IsDefined", span="171-171", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()"];
n57 [label="SetParserStateIfNeeded(RawOptions, option, true, null)", span="173-173", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()"];
n58 [label="requiredRulesAllMet = false", span="174-174", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()"];
n61 [label="Entry CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", span="214-214", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n60 [label="Exit CommandLine.Internal.OptionMap.EnforceRequiredRule()", span="166-166", cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()"];
n62 [label="!_settings.MutuallyExclusive", span="182-182", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n63 [label="return true;", span="184-184", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n64 [label="_map.Values", span="186-186", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n65 [label="option.IsDefined && option.MutuallyExclusiveSet != null", span="188-188", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n67 [label="_mutuallyExclusiveSetMap.Values", span="193-193", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n66 [label="BuildMutuallyExclusiveMap(option)", span="190-190", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n73 [label="Entry CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", span="204-204", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)"];
n68 [label="info.Occurrence > 1", span="195-195", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n71 [label="return true;", span="201-201", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n69 [label="SetParserStateIfNeeded(RawOptions, info.BadOption, null, true)", span="197-197", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n70 [label="return false;", span="198-198", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n72 [label="Exit CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", span="180-180", cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()"];
n74 [label="var setName = option.MutuallyExclusiveSet", span="206-206", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)"];
n76 [label="_mutuallyExclusiveSetMap.Add(setName, new MutuallyExclusiveInfo(option))", span="209-209", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)"];
n75 [label="!_mutuallyExclusiveSetMap.ContainsKey(setName)", span="207-207", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)"];
n77 [label="_mutuallyExclusiveSetMap[setName].IncrementOccurrence()", span="211-211", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)"];
n79 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)"];
n80 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)"];
n78 [label="Exit CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", span="204-204", cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)"];
n81 [label="var list = ReflectionUtil.RetrievePropertyList<ParserStateAttribute>(options)", span="216-216", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n85 [label="property.GetValue(options, null) == null", span="223-223", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n86 [label="property.SetValue(options, new CommandLine.ParserState(), null)", span="225-225", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n87 [label="var parserState = (IParserState)property.GetValue(options, null)", span="227-227", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n90 [label="var error = new ParsingError\r\n                {\r\n                    BadOption =\r\n                        {\r\n                            ShortName = option.ShortName,\r\n                            LongName = option.LongName\r\n                        }\r\n                }", span="232-239", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n91 [label="required != null", span="240-240", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n92 [label="error.ViolatesRequired = required.Value", span="240-240", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n93 [label="mutualExclusiveness != null", span="241-241", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n94 [label="error.ViolatesMutualExclusiveness = mutualExclusiveness.Value", span="241-241", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n82 [label="list.Count == 0", span="217-217", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n84 [label="var property = list[0].Left", span="221-221", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n83 [label="return;", span="219-219", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n97 [label="Entry CommandLine.ParserState.ParserState()", span="47-47", cluster="CommandLine.ParserState.ParserState()"];
n98 [label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])"];
n88 [label="parserState == null", span="228-228", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n95 [label="parserState.Errors.Add(error)", span="242-242", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n89 [label="return;", span="230-230", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n99 [label="Entry CommandLine.ParsingError.ParsingError()", span="47-47", cluster="CommandLine.ParsingError.ParsingError()"];
n96 [label="Exit CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", span="214-214", cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)"];
n100 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)"];
m0_75 [label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ReflectionExtensions.cs"];
m0_76 [label="Func<bool> isMutable = () => {\r\n                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite);\r\n                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any();\r\n                return props || fields;\r\n            }", span="117-121", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=1, file="ReflectionExtensions.cs"];
m0_77 [label="return type != typeof(object) ? isMutable() : true;", span="122-122", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=0, file="ReflectionExtensions.cs"];
m0_78 [label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ReflectionExtensions.cs"];
m0_85 [label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetFields(System.Reflection.BindingFlags)", file="ReflectionExtensions.cs"];
m0_110 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="ReflectionExtensions.cs"];
m0_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="ReflectionExtensions.cs"];
m0_66 [label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs"];
m0_68 [label="return e.Compile()();", span="112-112", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs"];
m0_67 [label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="108-111", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs"];
m0_69 [label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs"];
m0_7 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="ReflectionExtensions.cs"];
m0_8 [label="Entry Unk.First", span="", cluster="Unk.First", file="ReflectionExtensions.cs"];
m0_36 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="ReflectionExtensions.cs"];
m0_109 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs"];
m0_86 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ReflectionExtensions.cs"];
m0_74 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="ReflectionExtensions.cs"];
m0_4 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="ReflectionExtensions.cs"];
m0_38 [label="Entry lambda expression", span="66-70", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_80 [label="var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="118-118", cluster="lambda expression", color=green, community=0, file="ReflectionExtensions.cs"];
m0_79 [label="Entry lambda expression", span="117-121", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_81 [label="var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="119-119", cluster="lambda expression", color=green, community=0, file="ReflectionExtensions.cs"];
m0_87 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_82 [label="return props || fields;", span="120-120", cluster="lambda expression", color=green, community=0, file="ReflectionExtensions.cs"];
m0_83 [label="Exit lambda expression", span="117-121", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_88 [label="p.CanWrite", span="118-118", cluster="lambda expression", color=green, community=0, file="ReflectionExtensions.cs"];
m0_89 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_10 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_39 [label="specProp.Property.SetValue(current, selector(specProp))", span="68-68", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_12 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_11 [label="x.GetProperties()", span="16-16", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_112 [label="Entry lambda expression", span="145-145", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_40 [label="return instance;", span="69-69", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_114 [label="Exit lambda expression", span="145-145", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_113 [label="pi.PropertyType", span="145-145", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_41 [label="Exit lambda expression", span="66-70", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_9 [label="Entry Unk.selector", span="", cluster="Unk.selector", file="ReflectionExtensions.cs"];
m0_71 [label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0", cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="ReflectionExtensions.cs"];
m0_111 [label="Entry CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", span="50-50", cluster="CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", file="ReflectionExtensions.cs"];
m0_65 [label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0", cluster="System.Array.CreateInstance(System.Type, int)", file="ReflectionExtensions.cs"];
m0_70 [label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0", cluster="System.Linq.Expressions.Expression.Default(System.Type)", file="ReflectionExtensions.cs"];
m0_90 [label="Entry CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="125-125", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs"];
m0_91 [label="type == typeof(string)", span="127-127", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs"];
m0_93 [label="type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>)", span="131-131", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs"];
m0_94 [label="return type.GetGenericArguments()[0].CreateEmptyArray();", span="133-133", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs"];
m0_95 [label="return type.GetDefaultValue();", span="135-135", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs"];
m0_92 [label="return string.Empty;", span="129-129", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs"];
m0_96 [label="Exit CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="125-125", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs"];
m0_13 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="ReflectionExtensions.cs"];
m0_0 [label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs"];
m0_1 [label="return from pi in type.FlattenHierarchy().SelectMany(x => x.GetProperties())\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                       attrs.OfType<OptionAttribute>().Any() ||\r\n                       attrs.OfType<ValueAttribute>().Any()\r\n                   group pi by pi.Name into g\r\n                   select selector(g.First());", span="16-22", cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs"];
m0_2 [label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs"];
m0_72 [label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0", cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="ReflectionExtensions.cs"];
m0_97 [label="Entry System.Type.GetGenericTypeDefinition()", span="0-0", cluster="System.Type.GetGenericTypeDefinition()", file="ReflectionExtensions.cs"];
m0_101 [label="Entry CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="138-138", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs"];
m0_104 [label="var ctorTypes = type.GetSpecifications(pi => pi.PropertyType).ToArray()", span="145-145", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs"];
m0_102 [label="type.IsMutable()", span="140-140", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs"];
m0_105 [label="return ReflectionHelper.CreateDefaultImmutableInstance(type, ctorTypes);", span="147-147", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs"];
m0_103 [label="return Activator.CreateInstance(type);", span="142-142", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs"];
m0_106 [label="Exit CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="138-138", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs"];
m0_99 [label="Entry System.Type.CreateEmptyArray()", span="101-101", cluster="System.Type.CreateEmptyArray()", file="ReflectionExtensions.cs"];
m0_100 [label="Entry System.Type.GetDefaultValue()", span="106-106", cluster="System.Type.GetDefaultValue()", file="ReflectionExtensions.cs"];
m0_98 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="ReflectionExtensions.cs"];
m0_108 [label="Entry System.Activator.CreateInstance(System.Type)", span="0-0", cluster="System.Activator.CreateInstance(System.Type)", file="ReflectionExtensions.cs"];
m0_84 [label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetProperties(System.Reflection.BindingFlags)", file="ReflectionExtensions.cs"];
m0_5 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="ReflectionExtensions.cs"];
m0_107 [label="Entry System.Type.IsMutable()", span="115-115", cluster="System.Type.IsMutable()", file="ReflectionExtensions.cs"];
m0_37 [label="Entry Unk.Aggregate", span="", cluster="Unk.Aggregate", file="ReflectionExtensions.cs"];
m0_62 [label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101", cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs"];
m0_63 [label="return Array.CreateInstance(type, 0);", span="103-103", cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs"];
m0_64 [label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101", cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs"];
m0_33 [label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs"];
m0_34 [label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="64-70", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs"];
m0_35 [label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs"];
m0_42 [label="Entry Unk.SetValue", span="", cluster="Unk.SetValue", file="ReflectionExtensions.cs"];
m0_3 [label="Entry System.Type.FlattenHierarchy()", span="25-25", cluster="System.Type.FlattenHierarchy()", file="ReflectionExtensions.cs"];
m0_73 [label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0", cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="ReflectionExtensions.cs"];
m0_117 [label="System.Type", span="", file="ReflectionExtensions.cs"];
m0_115 [label="System.Func<CommandLine.Core.SpecificationProperty, object>", span="", file="ReflectionExtensions.cs"];
m0_116 [label=T, span="", file="ReflectionExtensions.cs"];
m1_39 [label="Entry string.JoinTo(params string[])", span="45-45", cluster="string.JoinTo(params string[])", file="SentenceBuilder.cs"];
m1_16 [label="Entry lambda expression", span="97-132", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_19 [label="return ''Token '''.JoinTo(((BadFormatTokenError)error).Token, ''' is not recognized.'');", span="102-102", cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs"];
m1_18 [label="ErrorType.BadFormatTokenError", span="101-101", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_21 [label="return ''Option '''.JoinTo(((MissingValueOptionError)error).NameInfo.NameText,\r\n                                        ''' has no value.'');", span="104-105", cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs"];
m1_20 [label="ErrorType.MissingValueOptionError", span="103-103", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_23 [label="return ''Option '''.JoinTo(((UnknownOptionError)error).Token, ''' is unknown.'');", span="107-107", cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs"];
m1_22 [label="ErrorType.UnknownOptionError", span="106-106", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_34 [label="return ''Verb '''.JoinTo(((BadVerbSelectedError)error).Token, ''' is not recognized.'');", span="127-127", cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs"];
m1_33 [label="ErrorType.BadVerbSelectedError", span="126-126", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_26 [label="return errMisssing.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A required value not bound to option name is missing.''\r\n                                               : ''Required option '''.JoinTo(errMisssing.NameInfo.NameText, ''' is missing.'');", span="110-112", cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs"];
m1_25 [label="var errMisssing = ((MissingRequiredOptionError)error)", span="109-109", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_29 [label="return badFormat.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A value not bound to option name is defined with a bad format.''\r\n                                               : ''Option '''.JoinTo(badFormat.NameInfo.NameText, ''' is defined with a bad format.'');", span="117-119", cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs"];
m1_28 [label="var badFormat = ((BadFormatConversionError)error)", span="116-116", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_32 [label="return seqOutRange.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A sequence value not bound to option name is defined with few items than required.''\r\n                                               : ''A sequence option '''.JoinTo(seqOutRange.NameInfo.NameText,\r\n                                                    ''' is defined with few items than required.'');", span="122-125", cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs"];
m1_31 [label="var seqOutRange = ((SequenceOutOfRangeError)error)", span="121-121", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_17 [label="error.Tag", span="99-99", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_36 [label="return ''No verb selected.'';", span="129-129", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_38 [label="throw new InvalidOperationException();", span="131-131", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_24 [label="ErrorType.MissingRequiredOptionError", span="108-108", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_27 [label="ErrorType.BadFormatConversionError", span="115-115", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_30 [label="ErrorType.SequenceOutOfRangeError", span="120-120", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_35 [label="ErrorType.NoVerbSelectedError", span="128-128", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_37 [label="Exit lambda expression", span="97-132", cluster="lambda expression", file="SentenceBuilder.cs"];
m1_40 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="SentenceBuilder.cs"];
m2_8 [label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", span="68-68", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", file="StringExtensions.cs"];
m2_9 [label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", span="68-68", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", file="StringExtensions.cs"];
m2_2 [label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", span="29-29", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", file="StringExtensions.cs"];
m2_3 [label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", span="29-29", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", file="StringExtensions.cs"];
m2_6 [label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", span="54-54", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", file="StringExtensions.cs"];
m2_7 [label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", span="54-54", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", file="StringExtensions.cs"];
m2_0 [label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", span="18-18", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", file="StringExtensions.cs"];
m2_1 [label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", span="18-18", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", file="StringExtensions.cs"];
m2_4 [label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", span="41-41", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", file="StringExtensions.cs"];
m2_5 [label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", span="41-41", cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", file="StringExtensions.cs"];
n101 -> n3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo"];
n101 -> n6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo"];
n102 -> n9  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n14  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n45  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n50  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n51  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n55  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n57  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n62  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n64  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n66  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n67  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n69  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n75  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n76  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n102 -> n77  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionMap"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n4 -> n2  [key=0, style=bold, color=blue];
n5 -> n6  [key=0, style=solid];
n6 -> n7  [key=0, style=solid];
n7 -> n5  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [key=1, style=dashed, color=darkseagreen4, label=int];
n8 -> n12  [key=1, style=dashed, color=darkseagreen4, label=int];
n8 -> n14  [key=1, style=dashed, color=darkseagreen4, label=int];
n9 -> n10  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n16  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n12 -> n16  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n10 -> n12  [key=1, style=dashed, color=darkseagreen4, label=comparer];
n13 -> n14  [key=0, style=solid];
n13 -> n15  [key=0, style=solid];
n15 -> n8  [key=0, style=bold, color=blue];
n17 -> n18  [key=0, style=solid];
n17 -> n21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.CommandLineParserSettings"];
n17 -> n25  [key=1, style=dashed, color=darkseagreen4, label=object];
n18 -> n19  [key=0, style=solid];
n18 -> n28  [key=2, style=dotted];
n18 -> n21  [key=1, style=dashed, color=darkseagreen4, label=list];
n18 -> n22  [key=1, style=dashed, color=darkseagreen4, label=list];
n21 -> n22  [key=0, style=solid];
n21 -> n8  [key=2, style=dotted];
n21 -> n24  [key=1, style=dashed, color=darkseagreen4, label=map];
n21 -> n25  [key=1, style=dashed, color=darkseagreen4, label=map];
n21 -> n26  [key=1, style=dashed, color=darkseagreen4, label=map];
n25 -> n26  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n21  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n25  [key=0, style=solid];
n22 -> n24  [key=1, style=dashed, color=darkseagreen4, label=pair];
n20 -> n27  [key=0, style=solid];
n24 -> n22  [key=0, style=solid];
n24 -> n29  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n22  [key=0, style=solid];
n27 -> n17  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>"];
n30 -> n34  [key=1, style=dashed, color=darkseagreen4, label=object];
n30 -> n37  [key=1, style=dashed, color=darkseagreen4, label=object];
n31 -> n32  [key=0, style=solid];
n31 -> n8  [key=2, style=dotted];
n31 -> n36  [key=1, style=dashed, color=darkseagreen4, label=map];
n31 -> n37  [key=1, style=dashed, color=darkseagreen4, label=map];
n31 -> n38  [key=1, style=dashed, color=darkseagreen4, label=map];
n32 -> n33  [key=0, style=solid];
n32 -> n37  [key=0, style=solid];
n32 -> n34  [key=1, style=dashed, color=darkseagreen4, label=verb];
n32 -> n35  [key=1, style=dashed, color=darkseagreen4, label=verb];
n32 -> n36  [key=1, style=dashed, color=darkseagreen4, label=verb];
n34 -> n35  [key=0, style=solid];
n34 -> n36  [key=0, style=solid];
n34 -> n41  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n36 -> n32  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n33 -> n29  [key=2, style=dotted];
n33 -> n40  [key=2, style=dotted];
n33 -> n36  [key=1, style=dashed, color=darkseagreen4, label=optionInfo];
n35 -> n39  [key=0, style=solid];
n35 -> n42  [key=2, style=dotted];
n35 -> n43  [key=2, style=dotted];
n39 -> n30  [key=0, style=bold, color=blue];
n44 -> n45  [key=0, style=solid];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=2, style=dotted];
n45 -> n48  [key=2, style=dotted];
n46 -> n44  [key=0, style=bold, color=blue];
n47 -> n62  [key=0, style=solid];
n48 -> n54  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n52  [key=0, style=solid];
n51 -> n50  [key=0, style=solid];
n51 -> n53  [key=2, style=dotted];
n52 -> n49  [key=0, style=bold, color=blue];
n54 -> n55  [key=0, style=solid];
n54 -> n59  [key=1, style=dashed, color=darkseagreen4, label=requiredRulesAllMet];
n55 -> n56  [key=0, style=solid];
n55 -> n59  [key=0, style=solid];
n55 -> n57  [key=1, style=dashed, color=darkseagreen4, label=option];
n59 -> n60  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n55  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n57 -> n61  [key=2, style=dotted];
n58 -> n55  [key=0, style=solid];
n58 -> n59  [key=1, style=dashed, color=darkseagreen4, label=requiredRulesAllMet];
n61 -> n81  [key=0, style=solid];
n61 -> n85  [key=1, style=dashed, color=darkseagreen4, label=object];
n61 -> n86  [key=1, style=dashed, color=darkseagreen4, label=object];
n61 -> n87  [key=1, style=dashed, color=darkseagreen4, label=object];
n61 -> n90  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionInfo"];
n61 -> n91  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
n61 -> n92  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
n61 -> n93  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
n61 -> n94  [key=1, style=dashed, color=darkseagreen4, label="bool?"];
n60 -> n48  [key=0, style=bold, color=blue];
n62 -> n63  [key=0, style=solid];
n62 -> n64  [key=0, style=solid];
n63 -> n72  [key=0, style=solid];
n64 -> n65  [key=0, style=solid];
n64 -> n67  [key=0, style=solid];
n64 -> n66  [key=1, style=dashed, color=darkseagreen4, label=option];
n65 -> n66  [key=0, style=solid];
n65 -> n64  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n71  [key=0, style=solid];
n67 -> n69  [key=1, style=dashed, color=darkseagreen4, label=info];
n66 -> n64  [key=0, style=solid];
n66 -> n73  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n76  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Internal.OptionInfo"];
n68 -> n69  [key=0, style=solid];
n68 -> n67  [key=0, style=solid];
n71 -> n72  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n61  [key=2, style=dotted];
n70 -> n72  [key=0, style=solid];
n72 -> n47  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid];
n74 -> n76  [key=1, style=dashed, color=darkseagreen4, label=setName];
n74 -> n77  [key=1, style=dashed, color=darkseagreen4, label=setName];
n76 -> n77  [key=0, style=solid];
n76 -> n2  [key=2, style=dotted];
n76 -> n80  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n77  [key=0, style=solid];
n75 -> n79  [key=2, style=dotted];
n77 -> n78  [key=0, style=solid];
n77 -> n5  [key=2, style=dotted];
n78 -> n73  [key=0, style=bold, color=blue];
n81 -> n82  [key=0, style=solid];
n81 -> n28  [key=2, style=dotted];
n81 -> n84  [key=1, style=dashed, color=darkseagreen4, label=list];
n85 -> n86  [key=0, style=solid];
n85 -> n87  [key=0, style=solid];
n85 -> n41  [key=2, style=dotted];
n86 -> n87  [key=0, style=solid];
n86 -> n97  [key=2, style=dotted];
n86 -> n98  [key=2, style=dotted];
n87 -> n88  [key=0, style=solid];
n87 -> n41  [key=2, style=dotted];
n87 -> n95  [key=1, style=dashed, color=darkseagreen4, label=parserState];
n90 -> n91  [key=0, style=solid];
n90 -> n99  [key=2, style=dotted];
n90 -> n92  [key=1, style=dashed, color=darkseagreen4, label=error];
n90 -> n94  [key=1, style=dashed, color=darkseagreen4, label=error];
n90 -> n95  [key=1, style=dashed, color=darkseagreen4, label=error];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n93 -> n94  [key=0, style=solid];
n93 -> n95  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n82 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n86  [key=1, style=dashed, color=darkseagreen4, label=property];
n84 -> n87  [key=1, style=dashed, color=darkseagreen4, label=property];
n83 -> n96  [key=0, style=solid];
n88 -> n89  [key=0, style=solid];
n88 -> n90  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n95 -> n100  [key=2, style=dotted];
n89 -> n96  [key=0, style=solid];
n96 -> n61  [key=0, style=bold, color=blue];
m0_75 -> m0_76  [key=0, style=solid, color=green];
m0_75 -> m0_80  [key=1, style=dashed, color=green, label="System.Type"];
m0_75 -> m0_81  [key=1, style=dashed, color=green, label="System.Type"];
m0_75 -> m0_77  [key=1, style=dashed, color=green, label="System.Type"];
m0_76 -> m0_76  [key=3, color=green, style=bold, label="Local variable System.Func<bool> isMutable"];
m0_76 -> m0_77  [key=0, style=solid, color=green];
m0_77 -> m0_78  [key=0, style=solid, color=green];
m0_77 -> m0_74  [key=2, style=dotted, color=green];
m0_78 -> m0_75  [key=0, style=bold, color=blue];
m0_66 -> m0_67  [key=0, style=solid];
m0_68 -> m0_74  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_73  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_70  [key=2, style=dotted];
m0_67 -> m0_71  [key=2, style=dotted];
m0_67 -> m0_72  [key=2, style=dotted];
m0_69 -> m0_66  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid, color=green];
m0_80 -> m0_84  [key=2, style=dotted, color=green];
m0_80 -> m0_7  [key=2, style=dotted, color=green];
m0_80 -> m0_87  [key=1, style=dashed, color=green, label="lambda expression"];
m0_80 -> m0_82  [key=1, style=dashed, color=green, label=props];
m0_79 -> m0_80  [key=0, style=solid, color=green];
m0_81 -> m0_82  [key=0, style=solid, color=green];
m0_81 -> m0_85  [key=2, style=dotted, color=green];
m0_81 -> m0_86  [key=2, style=dotted, color=green];
m0_87 -> m0_88  [key=0, style=solid, color=green];
m0_82 -> m0_83  [key=0, style=solid, color=green];
m0_83 -> m0_79  [key=0, style=bold, color=blue];
m0_88 -> m0_89  [key=0, style=solid, color=green];
m0_89 -> m0_87  [key=0, style=bold, color=blue];
m0_10 -> m0_11  [key=0, style=solid];
m0_39 -> m0_9  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_42  [key=2, style=dotted];
m0_12 -> m0_10  [key=0, style=bold, color=blue];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=2, style=dotted];
m0_112 -> m0_113  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_114 -> m0_112  [key=0, style=bold, color=blue];
m0_113 -> m0_114  [key=0, style=solid];
m0_41 -> m0_38  [key=0, style=bold, color=blue];
m0_90 -> m0_66  [key=3, color=darkorchid, style=bold, label="method methodReturn object CreateDefaultForImmutable"];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_90 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_90 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_90 -> m0_62  [key=3, color=darkorchid, style=bold, label="method methodReturn object CreateDefaultForImmutable"];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_95  [key=0, style=solid];
m0_93 -> m0_97  [key=2, style=dotted];
m0_94 -> m0_96  [key=0, style=solid];
m0_94 -> m0_98  [key=2, style=dotted];
m0_94 -> m0_99  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_100  [key=2, style=dotted];
m0_92 -> m0_96  [key=0, style=solid];
m0_96 -> m0_90  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_104  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<System.Reflection.PropertyInfo, T> selector"];
m0_1 -> m0_7  [key=2, style=dotted];
m0_1 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label=pi];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_8  [key=2, style=dotted];
m0_1 -> m0_9  [key=2, style=dotted];
m0_1 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_101 -> m0_104  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_101 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_109  [key=2, style=dotted];
m0_104 -> m0_110  [key=2, style=dotted];
m0_104 -> m0_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_102 -> m0_104  [key=0, style=solid];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_107  [key=2, style=dotted];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_111  [key=2, style=dotted];
m0_103 -> m0_106  [key=0, style=solid];
m0_103 -> m0_108  [key=2, style=dotted];
m0_106 -> m0_101  [key=0, style=bold, color=blue];
m0_62 -> m0_63  [key=0, style=solid];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_65  [key=2, style=dotted];
m0_64 -> m0_62  [key=0, style=bold, color=blue];
m0_33 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Core.SpecificationProperty, object>"];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=T];
m0_34 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_37  [key=2, style=dotted];
m0_35 -> m0_33  [key=0, style=bold, color=blue];
m0_117 -> m0_80  [key=1, style=dashed, color=green, label="System.Type"];
m0_117 -> m0_81  [key=1, style=dashed, color=green, label="System.Type"];
m0_115 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Core.SpecificationProperty, object>"];
m0_116 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=T];
m1_16 -> m1_19  [key=1, style=dashed, color=green, label="CommandLine.Error"];
m1_16 -> m1_21  [key=1, style=dashed, color=green, label="CommandLine.Error"];
m1_16 -> m1_23  [key=1, style=dashed, color=green, label="CommandLine.Error"];
m1_16 -> m1_34  [key=1, style=dashed, color=green, label="CommandLine.Error"];
m1_16 -> m1_16  [key=3, color=darkorchid, style=bold, label="method methodReturn string "];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_16 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_16 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_19 -> m1_37  [key=0, style=solid, color=green];
m1_19 -> m1_39  [key=2, style=dotted, color=green];
m1_18 -> m1_19  [key=0, style=solid, color=green];
m1_21 -> m1_37  [key=0, style=solid, color=green];
m1_21 -> m1_39  [key=2, style=dotted, color=green];
m1_20 -> m1_21  [key=0, style=solid, color=green];
m1_23 -> m1_37  [key=0, style=solid, color=green];
m1_23 -> m1_39  [key=2, style=dotted, color=green];
m1_22 -> m1_23  [key=0, style=solid, color=green];
m1_34 -> m1_37  [key=0, style=solid, color=green];
m1_34 -> m1_39  [key=2, style=dotted, color=green];
m1_33 -> m1_34  [key=0, style=solid, color=green];
m1_26 -> m1_37  [key=0, style=solid, color=green];
m1_26 -> m1_39  [key=2, style=dotted, color=green];
m1_25 -> m1_26  [key=0, style=solid, color=green];
m1_29 -> m1_37  [key=0, style=solid, color=green];
m1_29 -> m1_39  [key=2, style=dotted, color=green];
m1_28 -> m1_29  [key=0, style=solid, color=green];
m1_32 -> m1_37  [key=0, style=solid, color=green];
m1_32 -> m1_39  [key=2, style=dotted, color=green];
m1_31 -> m1_32  [key=0, style=solid, color=green];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_20  [key=0, style=solid];
m1_17 -> m1_22  [key=0, style=solid];
m1_17 -> m1_33  [key=0, style=solid];
m1_17 -> m1_24  [key=0, style=solid];
m1_17 -> m1_27  [key=0, style=solid];
m1_17 -> m1_30  [key=0, style=solid];
m1_17 -> m1_35  [key=0, style=solid];
m1_36 -> m1_37  [key=0, style=solid];
m1_38 -> m1_37  [key=0, style=solid];
m1_38 -> m1_40  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_35 -> m1_36  [key=0, style=solid];
m1_37 -> m1_16  [key=0, style=bold, color=blue];
m2_8 -> m2_9  [key=0, style=solid];
m2_9 -> m2_8  [key=0, style=bold, color=blue];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_2  [key=0, style=bold, color=blue];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_6  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_4  [key=0, style=bold, color=blue];
}
