digraph  {
d7 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, label="Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n                var optionsPartition = partitions.Item1;\r\n                var valuesPartition = partitions.Item2;\r\n                var errorsPartition = partitions.Item3;\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        optionsPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        valuesPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in errorsPartition\r\n                                         select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", prediction=0, span="42-125"];
d0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
d1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var typeInfo = factory.MapValueOrDefault(f => f().GetType(), typeof(T))", span="22-22"];
d2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="24-25"];
d4 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="29-31"];
d6 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="39-40"];
d8 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="127-129"];
d9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="131-135"];
d54 [cluster="lambda expression", color=green, community=0, label="var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        optionsPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", prediction=1, span="55-60"];
d152 [label=specProps, span=""];
d157 [label="System.StringComparer", span=""];
d158 [label="System.Globalization.CultureInfo", span=""];
d51 [cluster="lambda expression", color=green, community=0, label="var optionsPartition = partitions.Item1", prediction=1, span="51-51"];
d53 [cluster="lambda expression", color=green, community=0, label="var errorsPartition = partitions.Item3", prediction=3, span="53-53"];
d55 [cluster="lambda expression", color=green, community=0, label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        valuesPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", prediction=1, span="62-66"];
d69 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d70 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
d88 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
d57 [cluster="lambda expression", label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="74-75"];
d62 [cluster="lambda expression", label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="114-120"];
d52 [cluster="lambda expression", color=green, community=0, label="var valuesPartition = partitions.Item2", prediction=1, span="52-52"];
d56 [cluster="lambda expression", color=green, community=0, label="var missingValueErrors = from token in errorsPartition\r\n                                         select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", prediction=6, span="68-72"];
d71 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d92 [cluster="lambda expression", label="Entry lambda expression", span="66-66"];
d156 [label=optionSpecs, span=""];
d72 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
d73 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d74 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
d95 [cluster="lambda expression", label="Entry lambda expression", span="71-71"];
d96 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="71-71"];
d50 [cluster="lambda expression", label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="48-50"];
d11 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
d5 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="33-37"];
d33 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="34-37"];
d48 [cluster="lambda expression", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="44-44"];
d85 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="50-50"];
d89 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="59-59"];
d93 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="66-66"];
d58 [cluster="lambda expression", label="Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="77-93"];
d100 [cluster="lambda expression", label="var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())", span="79-79"];
d63 [cluster="lambda expression", label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="122-122"];
d12 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
d22 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
d59 [cluster="lambda expression", label="Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="95-108"];
d134 [cluster="lambda expression", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="97-97"];
d60 [cluster="lambda expression", label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="110-110"];
d3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specs = from pt in specProps select pt.Specification", span="27-27"];
d13 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
d26 [cluster="lambda expression", label="Entry lambda expression", span="24-25"];
d14 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
d15 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
d43 [cluster="lambda expression", label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="40-40"];
d16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d17 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
d18 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
d19 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
d10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return result;", span="137-137"];
d20 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
d21 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d90 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
d67 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
d75 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
d101 [cluster="lambda expression", label="mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="80-91"];
d135 [cluster="lambda expression", label="var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="98-105"];
d61 [cluster="lambda expression", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="112-112"];
d78 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15"];
d79 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d80 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
d64 [cluster="lambda expression", label="return allErrors.Except(warnings).ToParserResult(instance);", span="124-124"];
d94 [cluster="lambda expression", label="Exit lambda expression", span="66-66"];
d97 [cluster="lambda expression", label="Exit lambda expression", span="71-71"];
d161 [label=token, span=""];
d98 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
d49 [cluster="lambda expression", label="var tokens = tokenizerResult.SucceededWith()", span="46-46"];
d68 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="16-16"];
d84 [cluster="lambda expression", label="Entry lambda expression", span="50-50"];
d151 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d32 [cluster="lambda expression", label="Entry lambda expression", span="33-37"];
d34 [cluster="lambda expression", label="Exit lambda expression", span="33-37"];
d35 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="139-139"];
d36 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
d37 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d38 [cluster="Unk.>", label="Entry Unk.>", span=""];
d39 [cluster="lambda expression", label="Entry lambda expression", span="35-35"];
d154 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span=""];
d155 [label="System.Collections.Generic.IEnumerable<string>", span=""];
d47 [cluster="lambda expression", label="Entry lambda expression", span="42-125"];
d66 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d86 [cluster="lambda expression", label="Exit lambda expression", span="50-50"];
d87 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d91 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14"];
d99 [cluster="lambda expression", label="Entry lambda expression", span="77-93"];
d105 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
d160 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
d81 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
d24 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
d23 [cluster="lambda expression", label="f().GetType()", span="22-22"];
d159 [label=typeInfo, span=""];
d133 [cluster="lambda expression", label="Entry lambda expression", span="95-108"];
d139 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
d136 [cluster="lambda expression", label="var immutable = (T)ctor.Invoke(values)", span="106-106"];
d28 [cluster="lambda expression", label="Exit lambda expression", span="24-25"];
d27 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="24-25"];
d153 [label=makeDefault, span=""];
d42 [cluster="lambda expression", label="Entry lambda expression", span="40-40"];
d44 [cluster="lambda expression", label="Exit lambda expression", span="40-40"];
d45 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
d25 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d46 [cluster="System.Type.ToTypeInfo()", label="Entry System.Type.ToTypeInfo()", span="174-174"];
d40 [cluster="lambda expression", label="f()", span="35-35"];
d106 [cluster="lambda expression", label="f()", span="79-79"];
d162 [label=specPropsWithValue, span=""];
d102 [cluster="lambda expression", label="return mutable;", span="92-92"];
d104 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
d108 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
d112 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
d116 [cluster="lambda expression", label="Entry lambda expression", span="84-84"];
d120 [cluster="lambda expression", label="Entry lambda expression", span="85-85"];
d123 [cluster="lambda expression", label="Entry lambda expression", span="88-90"];
d127 [cluster="lambda expression", label="Entry lambda expression", span="91-91"];
d140 [cluster="System.Reflection.MethodBase.GetParameters()", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
d141 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
d142 [cluster="System.Type.CreateDefaultForImmutable()", label="Entry System.Type.CreateDefaultForImmutable()", span="149-149"];
d143 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
d145 [cluster="lambda expression", label="Entry lambda expression", span="102-102"];
d148 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
d76 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
d77 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
d65 [cluster="lambda expression", label="Exit lambda expression", span="42-125"];
d82 [cluster="Unk.Except", label="Entry Unk.Except", span=""];
d83 [cluster="Unk.ToParserResult", label="Entry Unk.ToParserResult", span=""];
d41 [cluster="lambda expression", label="Exit lambda expression", span="35-35"];
d103 [cluster="lambda expression", label="Exit lambda expression", span="77-93"];
d107 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
d138 [cluster="lambda expression", label="Exit lambda expression", span="95-108"];
d137 [cluster="lambda expression", label="return immutable;", span="107-107"];
d144 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
d29 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103"];
d30 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d31 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
d110 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
d109 [cluster="lambda expression", label="sp.Value.IsJust()", span="81-81"];
d114 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
d113 [cluster="lambda expression", label="sp.Value.FromJustOrFail()", span="81-81"];
d118 [cluster="lambda expression", label="Exit lambda expression", span="84-84"];
d117 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="84-84"];
d122 [cluster="lambda expression", label="Exit lambda expression", span="85-85"];
d121 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJustOrFail()", span="85-85"];
d125 [cluster="lambda expression", label="Exit lambda expression", span="88-90"];
d124 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="89-90"];
d129 [cluster="lambda expression", label="Exit lambda expression", span="91-91"];
d128 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="91-91"];
d147 [cluster="lambda expression", label="Exit lambda expression", span="102-102"];
d146 [cluster="lambda expression", label=v, span="102-102"];
d150 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
d149 [cluster="lambda expression", label=d, span="104-104"];
d111 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
d115 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
d119 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
d126 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
d130 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d131 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d132 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
m0_8 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22"];
m0_9 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="specification.Tag", span="24-24"];
m0_11 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="return FromOptionSpecification((OptionSpecification)specification);", span="27-27"];
m0_10 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="SpecificationType.Option", span="26-26"];
m0_12 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="return NameInfo.EmptyName;", span="29-29"];
m0_13 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22"];
m0_7 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NameExtensions.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m0_3 [cluster="System.StringComparer.Equals(string, string)", file="NameExtensions.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m0_0 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m0_1 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="return value.Length == 1\r\n               ? comparer.Equals(value, shortName)\r\n               : comparer.Equals(value, longName);", span="10-12"];
m0_2 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m0_4 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15"];
m0_5 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", color=green, community=0, file="NameExtensions.cs", label="return new NameInfo(\r\n                specification.LongName,\r\n                specification.ShortName);", prediction=7, span="17-19"];
m0_6 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15"];
m1_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="NameLookupTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m1_6 [cluster="CSharpx.Maybe.Just<T>(T)", file="NameLookupTests.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var expected = Maybe.Just(''.'')", span="17-17"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="18-19"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m1_10 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27"];
m1_11 [cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_9 [cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36"];
m3_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m3_0 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m3_1 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", prediction=8, span="15-24"];
m3_2 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m3_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m3_25 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="29-29"];
m3_4 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="16-22"];
m3_5 [cluster="lambda expression", file="TokenPartitioner.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="17-22"];
m3_12 [cluster="lambda expression", file="TokenPartitioner.cs", label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f))\r\n                                        : new Token[] { }", span="19-21"];
m3_6 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="16-22"];
m3_11 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="18-21"];
m3_13 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="18-21"];
m3_30 [cluster="lambda expression", file="TokenPartitioner.cs", label="v.IsValue()", span="32-32"];
m3_29 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="32-32"];
m3_31 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="32-32"];
m3_26 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Equals(nameToken)", span="29-29"];
m3_27 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="29-29"];
m3_28 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55"];
m3_16 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", span="27-27"];
m3_19 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs", label="return tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue());", span="32-32"];
m3_17 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs", label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29"];
m3_18 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs", label="nameIndex >= 0", span="30-30"];
m3_20 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs", label="return new Token[] { };", span="34-34"];
m3_21 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", span="27-27"];
m3_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m3_10 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitioner.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m3_7 [cluster="CommandLine.Core.Token.IsName()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m3_14 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token)", span="27-27"];
m3_8 [cluster="CommandLine.Core.Token.IsValue()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
m3_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m3_32 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m3_33 [file="TokenPartitioner.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m3_34 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m3_35 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m4_74 [cluster="Unk.Create", file="TokenPartitionerTests.cs", label="Entry Unk.Create", span=""];
m4_56 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="121-121"];
m4_66 [cluster="System.Reflection.MethodBase.GetParameters()", file="TokenPartitionerTests.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m4_257 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="581-581"];
m4_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="586-590"];
m4_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenPartitionerTests.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="593-593"];
m4_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="581-581"];
m4_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="264-268"];
m4_90 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer)", span="65-65"];
m4_157 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="373-373"];
m4_158 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="376-382"];
m4_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="383-383"];
m4_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="396-396"];
m4_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="386-393"];
m4_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="373-373"];
m4_130 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="290-290"];
m4_249 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="560-560"];
m4_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="563-563"];
m4_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="566-570"];
m4_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="573-573"];
m4_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="560-560"];
m4_117 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="94-94"];
m4_194 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m4_85 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21"];
m4_86 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="55-55"];
m4_87 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="f()", span="55-55"];
m4_88 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="55-55"];
m4_89 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="65-65"];
m4_237 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m4_103 [cluster="string.MatchName(string, string, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m4_104 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="87-87"];
m4_105 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="f()", span="87-87"];
m4_106 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="87-87"];
m4_107 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="91-91"];
m4_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m4_174 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m4_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="165-169"];
m4_6 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="23-25"];
m4_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="541-541"];
m4_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="544-544"];
m4_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="547-551"];
m4_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="554-554"];
m4_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="541-541"];
m4_50 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
m4_7 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="return explodedTokens;", span="26-26"];
m4_59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="138-138"];
m4_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="114-114"];
m4_118 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m4_63 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="144-144"];
m4_41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="117-124"];
m4_42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m4_43 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m4_44 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="TokenPartitionerTests.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="13-13"];
m4_45 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", span="95-95"];
m4_163 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m4_69 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TokenPartitionerTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="172-172"];
m4_125 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="296-296"];
m4_94 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="70-70"];
m4_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="TokenPartitionerTests.cs", label="Assert.Equal(expectedResult, result.Value.LongValue)", span="51-51"];
m4_67 [cluster="string.ToLower()", file="TokenPartitionerTests.cs", label="Entry string.ToLower()", span="0-0"];
m4_70 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TokenPartitionerTests.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m4_65 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="144-144"];
m4_49 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="102-102"];
m4_58 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="121-121"];
m4_71 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="166-166"];
m4_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="38-38"];
m4_13 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="22-22"];
m4_12 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22"];
m4_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m4_21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var specs = from pt in specProps select pt.Specification", span="45-45"];
m4_22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="47-49"];
m4_23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="51-51"];
m4_29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="73-76"];
m4_30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         NameExtensions.FromOptionSpecification(optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))))", span="78-80"];
m4_31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="82-82"];
m4_38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specProps on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.GetDefaultValue()))).ToArray()", span="106-110"];
m4_39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="instance = (T)ctor.Invoke(values)", span="111-111"];
m4_40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="114-115"];
m4_47 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m4_48 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m4_57 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TokenPartitionerTests.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m4_64 [cluster="Unk.ToArray", file="TokenPartitionerTests.cs", label="Entry Unk.ToArray", span=""];
m4_72 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
m4_73 [cluster="Unk.Concat", file="TokenPartitionerTests.cs", label="Entry Unk.Concat", span=""];
m4_82 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="42-43"];
m4_83 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82"];
m4_84 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m4_91 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="65-65"];
m4_92 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m4_93 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="70-70"];
m4_100 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="80-80"];
m4_101 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="80-80"];
m4_102 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="80-80"];
m4_108 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="sp.Value.IsJust()", span="91-91"];
m4_109 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="91-91"];
m4_110 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m4_119 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="95-95"];
m4_120 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="sp.Specification.DefaultValue.FromJust()", span="95-95"];
m4_121 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="95-95"];
m4_128 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="100-100"];
m4_129 [cluster="System.Type.GetGenericArguments()", file="TokenPartitionerTests.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m4_137 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="109-109"];
m4_138 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="System.StringComparer", span=""];
m4_139 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m4_146 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="335-335"];
m4_147 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="335-335"];
m4_148 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="335-335"];
m4_154 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="358-358"];
m4_155 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="358-358"];
m4_156 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="358-358"];
m4_164 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="387-387"];
m4_167 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="388-390"];
m4_165 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptionsWithValues()", span="387-387"];
m4_166 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="387-387"];
m4_168 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="389-390"];
m4_172 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="390-390"];
m4_176 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="390-390"];
m4_169 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="388-390"];
m4_171 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="390-390"];
m4_173 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="390-390"];
m4_175 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="390-390"];
m4_177 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="390-390"];
m4_185 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="413-413"];
m4_186 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptionsWithSets()", span="413-413"];
m4_187 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="413-413"];
m4_195 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="433-433"];
m4_196 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptionWithRequiredAndSet()", span="433-433"];
m4_197 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="433-433"];
m4_203 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="453-453"];
m4_204 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptionWithRequiredAndSet()", span="453-453"];
m4_205 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="453-453"];
m4_212 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="473-473"];
m4_213 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptionWithRequiredAndSet()", span="473-473"];
m4_214 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="473-473"];
m4_220 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="491-491"];
m4_221 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptionWithRequired()", span="491-491"];
m4_222 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="491-491"];
m4_229 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="510-510"];
m4_230 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptions()", span="510-510"];
m4_231 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="510-510"];
m4_238 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="529-529"];
m4_239 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptions()", span="529-529"];
m4_240 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="529-529"];
m4_246 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="548-548"];
m4_247 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptions()", span="548-548"];
m4_248 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="548-548"];
m4_254 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="567-567"];
m4_255 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptions()", span="567-567"];
m4_256 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="567-567"];
m4_262 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="587-587"];
m4_263 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="new FakeOptions()", span="587-587"];
m4_264 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="587-587"];
m4_98 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="230-230"];
m4_97 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="223-227"];
m4_111 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
m4_115 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="271-271"];
m4_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="277-277"];
m4_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="277-277"];
m4_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs", label="Assert.True(expectedResult.Equals(result))", span="32-32"];
m4_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="178-178"];
m4_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="217-217"];
m4_99 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="217-217"];
m4_80 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TokenPartitionerTests.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m4_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs", label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="258-261"];
m4_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="255-255"];
m4_116 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="255-255"];
m4_124 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="289-293"];
m4_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="280-286"];
m4_127 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m4_132 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs", label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="305-308"];
m4_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="302-302"];
m4_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16"];
m4_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="TokenPartitionerTests.cs", label="var expectedResult = -123", span="41-41"];
m4_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
m4_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="184-188"];
m4_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenPartitionerTests.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="181-181"];
m4_81 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m4_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="318-318"];
m4_133 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="311-315"];
m4_136 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
m4_11 [cluster="Unk.True", file="TokenPartitionerTests.cs", label="Entry Unk.True", span=""];
m4_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="44-48"];
m4_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m4_32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="T instance", span="84-84"];
m4_145 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
m4_170 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m4_61 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TokenPartitionerTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="150-150"];
m4_184 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="TokenPartitionerTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m4_223 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m4_60 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m4_62 [cluster="System.Activator.CreateInstance<T>()", file="TokenPartitionerTests.cs", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
m4_19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="40-40"];
m4_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16"];
m4_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs", label="var fakeOptions = new FakeOptions()", span="19-19"];
m4_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="20-22"];
m4_51 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m4_52 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="TokenPartitionerTests.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m4_53 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m4_54 [cluster="CommandLine.Core.Specification.IsOption()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m4_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="503-503"];
m4_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="506-506"];
m4_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="509-513"];
m4_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="516-516"];
m4_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="503-503"];
m4_178 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m4_3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m4_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="484-484"];
m4_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="487-487"];
m4_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="490-494"];
m4_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="497-497"];
m4_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="484-484"];
m4_206 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="464-464"];
m4_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="466-470"];
m4_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="472-476"];
m4_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="479-479"];
m4_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="464-464"];
m4_46 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="TokenPartitionerTests.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m4_140 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs", label="System.StringComparer", span=""];
m4_141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs", label=optionSpecs, span=""];
m4_142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs", label="System.Globalization.CultureInfo", span=""];
m4_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs", label=token, span=""];
m4_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="324-324"];
m4_96 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m4_78 [cluster="System.Func<TResult>.Invoke()", file="TokenPartitionerTests.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m4_79 [cluster="object.GetType()", file="TokenPartitionerTests.cs", label="Entry object.GetType()", span="0-0"];
m4_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="302-302"];
m4_188 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m4_261 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m4_149 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="347-347"];
m4_150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs", label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n            {\r\n                LongSequence = new long[] {},\r\n                StringSequence = new[] { ''eml1@xyz.com'', ''test@unit.org'', ''xyz@srv.it'' }\r\n            }", span="350-354"];
m4_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''-s'', ''eml1@xyz.com,test@unit.org,xyz@srv.it'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="357-361"];
m4_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="364-364"];
m4_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="347-347"];
m4_24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    factory.Return(f => f(), default(T)),\r\n                    new[] { new HelpRequestedError() });", span="53-56"];
m4_26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="TokenPartitionerTests.cs", label="var tokens = tokenizerResult.Value", prediction=9, span="61-61"];
m4_27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer))", span="63-65"];
m4_28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="67-71"];
m4_20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="42-43"];
m4_33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="ReflectionHelper.IsTypeMutable(typeInfo)", span="85-85"];
m4_34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="87-87"];
m4_35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="89-100"];
m4_36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var t = typeof(T)", span="104-104"];
m4_37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", label="var ctor = t.GetConstructor((from p in specProps select p.Specification.ConversionType).ToArray())", span="105-105"];
m4_211 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="TokenPartitionerTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m4_232 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="522-522"];
m4_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="525-525"];
m4_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="528-532"];
m4_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="535-535"];
m4_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="522-522"];
m4_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="445-445"];
m4_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="447-450"];
m4_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="452-456"];
m4_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="459-459"];
m4_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="445-445"];
m4_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="425-425"];
m4_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="427-430"];
m4_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="432-436"];
m4_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="439-439"];
m4_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="425-425"];
m4_179 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="402-402"];
m4_180 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="405-409"];
m4_181 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="412-416"];
m4_182 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="419-419"];
m4_183 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="402-402"];
m4_265 [file="TokenPartitionerTests.cs", label=fakeOptions, span=""];
m4_266 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m5_0 [cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="Entry CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m5_4 [cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="Exit CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m5_5 [cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="Entry CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="37-37"];
m5_7 [cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="Exit CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="37-37"];
m5_8 [file="TokenPartitions.cs", label="CommandLine.Core.TokenPartitions", span=""];
d0 -> d54  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> d55  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
d0 -> d33  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d0 -> d85  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d89  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d0 -> d93  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d0 -> d96  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d1 -> d22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d2 -> d54  [color=green, key=1, label=specProps, style=dashed];
d2 -> d55  [color=green, key=1, label=specProps, style=dashed];
d2 -> d26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d2 -> d33  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d4 -> d85  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d6 -> d43  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Error>", style=dashed];
d54 -> d54  [color=green, key=1, label=pt, style=dashed];
d54 -> d88  [color=green, key=1, label="lambda expression", style=dashed];
d54 -> d57  [color=green, key=1, label=optionSpecPropsResult, style=dashed];
d54 -> d62  [color=green, key=1, label=optionSpecPropsResult, style=dashed];
d152 -> d54  [color=green, key=1, label=specProps, style=dashed];
d152 -> d55  [color=green, key=1, label=specProps, style=dashed];
d152 -> d33  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d157 -> d54  [color=green, key=1, label="System.StringComparer", style=dashed];
d157 -> d85  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d157 -> d96  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d158 -> d54  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
d158 -> d55  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
d158 -> d89  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d158 -> d93  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d51 -> d54  [color=green, key=1, label=optionsPartition, style=dashed];
d55 -> d55  [color=green, key=1, label=pt, style=dashed];
d55 -> d92  [color=green, key=1, label="lambda expression", style=dashed];
d55 -> d57  [color=green, key=1, label=valueSpecPropsResult, style=dashed];
d55 -> d62  [color=green, key=1, label=valueSpecPropsResult, style=dashed];
d57 -> d101  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
d62 -> d64  [color=darkseagreen4, key=1, label=allErrors, style=dashed];
d52 -> d55  [color=green, key=1, label=valuesPartition, style=dashed];
d56 -> d95  [color=green, key=1, label="lambda expression", style=dashed];
d56 -> d96  [color=green, key=1, label=token, style=dashed];
d56 -> d62  [color=green, key=1, label=missingValueErrors, style=dashed];
d156 -> d85  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d50 -> d84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d5 -> d43  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
d33 -> d33  [color=darkseagreen4, key=1, label=p, style=dashed];
d33 -> d39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d48 -> d62  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
d100 -> d105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d60 -> d64  [color=darkseagreen4, key=1, label=instance, style=dashed];
d101 -> d101  [color=darkseagreen4, key=1, label=mutable, style=dashed];
d101 -> d108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d101 -> d112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d101 -> d116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d101 -> d120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d101 -> d123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d101 -> d127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d135 -> d145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d135 -> d148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d161 -> d96  [color=darkseagreen4, key=1, label=token, style=dashed];
d151 -> d33  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d153 -> d43  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
d162 -> d101  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
m0_8 -> m0_11  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m3_0 -> m3_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_0 -> m3_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_1 -> m3_1  [color=green, key=1, label=tseq, style=dashed];
m3_1 -> m3_4  [color=green, key=1, label="lambda expression", style=dashed];
m3_4 -> m3_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_5 -> m3_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_16 -> m3_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_16 -> m3_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_19 -> m3_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_17 -> m3_19  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m3_17 -> m3_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_32 -> m3_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_32 -> m3_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_33 -> m3_5  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m3_34 -> m3_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_35 -> m3_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_257 -> m4_259  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_258 -> m4_262  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_114 -> m4_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_158 -> m4_161  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_160 -> m4_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_160 -> m4_167  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_250 -> m4_252  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_251 -> m4_254  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_86 -> m4_88  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_87 -> m4_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_104 -> m4_106  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_105 -> m4_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_68 -> m4_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_6 -> m4_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_242 -> m4_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_243 -> m4_246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_59 -> m4_61  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_42 -> m4_44  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_43 -> m4_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_67 -> m4_69  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_22 -> m4_90  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m4_29 -> m4_41  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
m4_30 -> m4_41  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
m4_30 -> m4_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_30 -> m4_101  [color=darkseagreen4, key=1, label=token, style=dashed];
m4_38 -> m4_135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_39 -> m4_41  [color=darkseagreen4, key=1, label=instance, style=dashed];
m4_138 -> m4_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m4_138 -> m4_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m4_139 -> m4_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_167 -> m4_172  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_167 -> m4_176  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_168 -> m4_171  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_172 -> m4_175  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_97 -> m4_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_4 -> m4_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_113 -> m4_115  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_124 -> m4_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_132 -> m4_134  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_5 -> m4_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_77 -> m4_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_133 -> m4_137  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_60 -> m4_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_19 -> m4_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_19 -> m4_33  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
m4_0 -> m4_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m4_0 -> m4_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m4_1 -> m4_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_1 -> m4_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m4_2 -> m4_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_52 -> m4_54  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_53 -> m4_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_225 -> m4_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_226 -> m4_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_3 -> m4_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_3 -> m4_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m4_3 -> m4_24  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<System.Func<T>>", style=dashed];
m4_3 -> m4_90  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m4_3 -> m4_94  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m4_3 -> m4_98  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m4_3 -> m4_101  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m4_216 -> m4_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_217 -> m4_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_207 -> m4_209  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_208 -> m4_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_140 -> m4_90  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m4_140 -> m4_101  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m4_141 -> m4_143  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_141 -> m4_90  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m4_142 -> m4_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_142 -> m4_94  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m4_142 -> m4_98  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m4_143 -> m4_101  [color=darkseagreen4, key=1, label=token, style=dashed];
m4_96 -> m4_98  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_150 -> m4_152  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_151 -> m4_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_24 -> m4_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_27 -> m4_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_28 -> m4_41  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
m4_28 -> m4_93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_20 -> m4_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_34 -> m4_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_35 -> m4_41  [color=darkseagreen4, key=1, label=instance, style=dashed];
m4_35 -> m4_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_35 -> m4_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_35 -> m4_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_35 -> m4_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_35 -> m4_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_35 -> m4_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_233 -> m4_235  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_234 -> m4_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_199 -> m4_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_200 -> m4_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_190 -> m4_192  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_191 -> m4_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_180 -> m4_182  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_181 -> m4_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_265 -> m4_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m4_266 -> m4_172  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_266 -> m4_176  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
}
