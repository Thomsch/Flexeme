digraph  {
d7 [label="Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n                var optionsPartition = partitions.Item1;\r\n                var valuesPartition = partitions.Item2;\r\n                var errorsPartition = partitions.Item3;\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        optionsPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        valuesPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in errorsPartition\r\n                                         select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", span="42-125", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0];
d0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d1 [label="var typeInfo = factory.MapValueOrDefault(f => f().GetType(), typeof(T))", span="22-22", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d2 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="24-25", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d4 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="29-31", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d6 [label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="39-40", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d8 [label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="127-129", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d9 [label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="131-135", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d54 [label="var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        optionsPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="55-60", cluster="lambda expression", color=green, community=0];
d152 [label=specProps, span=""];
d157 [label="System.StringComparer", span=""];
d158 [label="System.Globalization.CultureInfo", span=""];
d51 [label="var optionsPartition = partitions.Item1", span="51-51", cluster="lambda expression", color=green, community=0];
d53 [label="var errorsPartition = partitions.Item3", span="53-53", cluster="lambda expression", color=green, community=0];
d55 [label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        valuesPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="62-66", cluster="lambda expression", color=green, community=0];
d69 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()"];
d70 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues"];
d88 [label="Entry lambda expression", span="59-59", cluster="lambda expression"];
d57 [label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="74-75", cluster="lambda expression"];
d62 [label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="114-120", cluster="lambda expression"];
d52 [label="var valuesPartition = partitions.Item2", span="52-52", cluster="lambda expression", color=green, community=0];
d56 [label="var missingValueErrors = from token in errorsPartition\r\n                                         select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="68-72", cluster="lambda expression", color=green, community=0];
d71 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
d92 [label="Entry lambda expression", span="66-66", cluster="lambda expression"];
d156 [label=optionSpecs, span=""];
d72 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
d73 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
d74 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification"];
d95 [label="Entry lambda expression", span="71-71", cluster="lambda expression"];
d96 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="71-71", cluster="lambda expression"];
d50 [label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="48-50", cluster="lambda expression"];
d11 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d5 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="33-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d33 [label="typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="34-37", cluster="lambda expression"];
d48 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="44-44", cluster="lambda expression"];
d85 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="50-50", cluster="lambda expression"];
d89 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="59-59", cluster="lambda expression"];
d93 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="66-66", cluster="lambda expression"];
d58 [label="Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="77-93", cluster="lambda expression"];
d100 [label="var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())", span="79-79", cluster="lambda expression"];
d63 [label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="122-122", cluster="lambda expression"];
d12 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)"];
d22 [label="Entry lambda expression", span="22-22", cluster="lambda expression"];
d59 [label="Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="95-108", cluster="lambda expression"];
d134 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="97-97", cluster="lambda expression"];
d60 [label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="110-110", cluster="lambda expression"];
d3 [label="var specs = from pt in specProps select pt.Specification", span="27-27", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d13 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)"];
d26 [label="Entry lambda expression", span="24-25", cluster="lambda expression"];
d14 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate"];
d15 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()"];
d43 [label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="40-40", cluster="lambda expression"];
d16 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
d17 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)"];
d18 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
d19 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
d10 [label="return result;", span="137-137", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d20 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
d21 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
d90 [label="Exit lambda expression", span="59-59", cluster="lambda expression"];
d67 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()"];
d75 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
d101 [label="mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="80-91", cluster="lambda expression"];
d135 [label="var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="98-105", cluster="lambda expression"];
d61 [label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="112-112", cluster="lambda expression"];
d78 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()"];
d79 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
d80 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize"];
d64 [label="return allErrors.Except(warnings).ToParserResult(instance);", span="124-124", cluster="lambda expression"];
d94 [label="Exit lambda expression", span="66-66", cluster="lambda expression"];
d97 [label="Exit lambda expression", span="71-71", cluster="lambda expression"];
d161 [label=token, span=""];
d98 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)"];
d49 [label="var tokens = tokenizerResult.SucceededWith()", span="46-46", cluster="lambda expression"];
d68 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)"];
d84 [label="Entry lambda expression", span="50-50", cluster="lambda expression"];
d151 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d32 [label="Entry lambda expression", span="33-37", cluster="lambda expression"];
d34 [label="Exit lambda expression", span="33-37", cluster="lambda expression"];
d35 [label="Entry System.Type.IsMutable()", span="139-139", cluster="System.Type.IsMutable()"];
d36 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()"];
d37 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
d38 [label="Entry Unk.>", span="", cluster="Unk.>"];
d39 [label="Entry lambda expression", span="35-35", cluster="lambda expression"];
d154 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span=""];
d155 [label="System.Collections.Generic.IEnumerable<string>", span=""];
d47 [label="Entry lambda expression", span="42-125", cluster="lambda expression"];
d66 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
d86 [label="Exit lambda expression", span="50-50", cluster="lambda expression"];
d87 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d91 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
d99 [label="Entry lambda expression", span="77-93", cluster="lambda expression"];
d105 [label="Entry lambda expression", span="79-79", cluster="lambda expression"];
d160 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
d81 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
d24 [label="Exit lambda expression", span="22-22", cluster="lambda expression"];
d23 [label="f().GetType()", span="22-22", cluster="lambda expression"];
d159 [label=typeInfo, span=""];
d133 [label="Entry lambda expression", span="95-108", cluster="lambda expression"];
d139 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor"];
d136 [label="var immutable = (T)ctor.Invoke(values)", span="106-106", cluster="lambda expression"];
d28 [label="Exit lambda expression", span="24-25", cluster="lambda expression"];
d27 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="24-25", cluster="lambda expression"];
d153 [label=makeDefault, span=""];
d42 [label="Entry lambda expression", span="40-40", cluster="lambda expression"];
d44 [label="Exit lambda expression", span="40-40", cluster="lambda expression"];
d45 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d25 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
d46 [label="Entry System.Type.ToTypeInfo()", span="174-174", cluster="System.Type.ToTypeInfo()"];
d40 [label="f()", span="35-35", cluster="lambda expression"];
d106 [label="f()", span="79-79", cluster="lambda expression"];
d162 [label=specPropsWithValue, span=""];
d102 [label="return mutable;", span="92-92", cluster="lambda expression"];
d104 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)"];
d108 [label="Entry lambda expression", span="81-81", cluster="lambda expression"];
d112 [label="Entry lambda expression", span="81-81", cluster="lambda expression"];
d116 [label="Entry lambda expression", span="84-84", cluster="lambda expression"];
d120 [label="Entry lambda expression", span="85-85", cluster="lambda expression"];
d123 [label="Entry lambda expression", span="88-90", cluster="lambda expression"];
d127 [label="Entry lambda expression", span="91-91", cluster="lambda expression"];
d140 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()"];
d141 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()"];
d142 [label="Entry System.Type.CreateDefaultForImmutable()", span="149-149", cluster="System.Type.CreateDefaultForImmutable()"];
d143 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()"];
d145 [label="Entry lambda expression", span="102-102", cluster="lambda expression"];
d148 [label="Entry lambda expression", span="104-104", cluster="lambda expression"];
d76 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d77 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
d65 [label="Exit lambda expression", span="42-125", cluster="lambda expression"];
d82 [label="Entry Unk.Except", span="", cluster="Unk.Except"];
d83 [label="Entry Unk.ToParserResult", span="", cluster="Unk.ToParserResult"];
d41 [label="Exit lambda expression", span="35-35", cluster="lambda expression"];
d103 [label="Exit lambda expression", span="77-93", cluster="lambda expression"];
d107 [label="Exit lambda expression", span="79-79", cluster="lambda expression"];
d138 [label="Exit lambda expression", span="95-108", cluster="lambda expression"];
d137 [label="return immutable;", span="107-107", cluster="lambda expression"];
d144 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])"];
d29 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)"];
d30 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
d31 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)"];
d110 [label="Exit lambda expression", span="81-81", cluster="lambda expression"];
d109 [label="sp.Value.IsJust()", span="81-81", cluster="lambda expression"];
d114 [label="Exit lambda expression", span="81-81", cluster="lambda expression"];
d113 [label="sp.Value.FromJustOrFail()", span="81-81", cluster="lambda expression"];
d118 [label="Exit lambda expression", span="84-84", cluster="lambda expression"];
d117 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="84-84", cluster="lambda expression"];
d122 [label="Exit lambda expression", span="85-85", cluster="lambda expression"];
d121 [label="sp.Specification.DefaultValue.FromJustOrFail()", span="85-85", cluster="lambda expression"];
d125 [label="Exit lambda expression", span="88-90", cluster="lambda expression"];
d124 [label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="89-90", cluster="lambda expression"];
d129 [label="Exit lambda expression", span="91-91", cluster="lambda expression"];
d128 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="91-91", cluster="lambda expression"];
d147 [label="Exit lambda expression", span="102-102", cluster="lambda expression"];
d146 [label=v, span="102-102", cluster="lambda expression"];
d150 [label="Exit lambda expression", span="104-104", cluster="lambda expression"];
d149 [label=d, span="104-104", cluster="lambda expression"];
d111 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()"];
d115 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)"];
d119 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334", cluster="CSharpx.Maybe<T>.IsNothing<T>()"];
d126 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()"];
d130 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
d131 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
d132 [label="Entry System.Type.CreateEmptyArray()", span="125-125", cluster="System.Type.CreateEmptyArray()"];
m0_8 [label="Entry CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_9 [label="specification.Tag", span="24-24", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_11 [label="return FromOptionSpecification((OptionSpecification)specification);", span="27-27", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_10 [label="SpecificationType.Option", span="26-26", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_12 [label="return NameInfo.EmptyName;", span="29-29", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_13 [label="Exit CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22", cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs"];
m0_7 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NameExtensions.cs"];
m0_3 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="NameExtensions.cs"];
m0_0 [label="Entry CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs"];
m0_1 [label="return value.Length == 1\r\n               ? comparer.Equals(value, shortName)\r\n               : comparer.Equals(value, longName);", span="10-12", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs"];
m0_2 [label="Exit CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8", cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs"];
m0_4 [label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs"];
m0_5 [label="return new NameInfo(\r\n                specification.LongName,\r\n                specification.ShortName);", span="17-19", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", color=green, community=0, file="NameExtensions.cs"];
m0_6 [label="Exit CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15", cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs"];
m1_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="NameLookupTests.cs"];
m1_6 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="NameLookupTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_1 [label="var expected = Maybe.Just(''.'')", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="18-19", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_4 [label="expected.ShouldBeEquivalentTo(result)", span="25-25", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_3 [label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_10 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs"];
m1_11 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs"];
m3_22 [label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36", cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs"];
m3_24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs"];
m3_0 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m3_1 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-24", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs"];
m3_2 [label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m3_3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="TokenPartitioner.cs"];
m3_25 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_4 [label="Entry lambda expression", span="16-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_5 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="17-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_12 [label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f))\r\n                                        : new Token[] { }", span="19-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_6 [label="Exit lambda expression", span="16-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_11 [label="Entry lambda expression", span="18-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_13 [label="Exit lambda expression", span="18-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_30 [label="v.IsValue()", span="32-32", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_29 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_31 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_26 [label="t.Equals(nameToken)", span="29-29", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_27 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="TokenPartitioner.cs"];
m3_28 [label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="TokenPartitioner.cs"];
m3_16 [label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", span="27-27", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs"];
m3_19 [label="return tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue());", span="32-32", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs"];
m3_17 [label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs"];
m3_18 [label="nameIndex >= 0", span="30-30", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs"];
m3_20 [label="return new Token[] { };", span="34-34", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs"];
m3_21 [label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", span="27-27", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="TokenPartitioner.cs"];
m3_23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TokenPartitioner.cs"];
m3_10 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitioner.cs"];
m3_7 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="TokenPartitioner.cs"];
m3_14 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token)", span="27-27", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token)", file="TokenPartitioner.cs"];
m3_8 [label="Entry CommandLine.Core.Token.IsValue()", span="73-73", cluster="CommandLine.Core.Token.IsValue()", file="TokenPartitioner.cs"];
m3_9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs"];
m3_32 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="TokenPartitioner.cs"];
m3_33 [label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span="", file="TokenPartitioner.cs"];
m3_34 [label="CommandLine.Core.Token", span="", file="TokenPartitioner.cs"];
m3_35 [label="CommandLine.Core.Token", span="", file="TokenPartitioner.cs"];
m4_74 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="TokenPartitionerTests.cs"];
m4_56 [label="Entry lambda expression", span="121-121", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_66 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="TokenPartitionerTests.cs"];
m4_257 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="581-581", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenPartitionerTests.cs"];
m4_258 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="586-590", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenPartitionerTests.cs"];
m4_259 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="593-593", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenPartitionerTests.cs"];
m4_260 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="581-581", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenPartitionerTests.cs"];
m4_114 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="264-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs"];
m4_90 [label="TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer)", span="65-65", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_157 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs"];
m4_158 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="376-382", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs"];
m4_159 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs"];
m4_161 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs"];
m4_160 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="386-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs"];
m4_162 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenPartitionerTests.cs"];
m4_130 [label="Exit lambda expression", span="290-290", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_249 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_250 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="563-563", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_251 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="566-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_252 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="573-573", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_253 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_117 [label="Exit lambda expression", span="94-94", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_194 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="TokenPartitionerTests.cs"];
m4_85 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="TokenPartitionerTests.cs"];
m4_86 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_87 [label="f()", span="55-55", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_88 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_89 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_237 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="TokenPartitionerTests.cs"];
m4_103 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="TokenPartitionerTests.cs"];
m4_104 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_105 [label="f()", span="87-87", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_106 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_107 [label="Entry lambda expression", span="91-91", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_174 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TokenPartitionerTests.cs"];
m4_68 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="165-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TokenPartitionerTests.cs"];
m4_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="23-25", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_242 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="544-544", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_243 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="547-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_244 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="554-554", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_245 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_50 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="TokenPartitionerTests.cs"];
m4_7 [label="return explodedTokens;", span="26-26", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_59 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="138-138", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TokenPartitionerTests.cs"];
m4_55 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="114-114", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="TokenPartitionerTests.cs"];
m4_118 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="TokenPartitionerTests.cs"];
m4_63 [label="Entry lambda expression", span="144-144", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_41 [label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="117-124", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_42 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_43 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitionerTests.cs"];
m4_44 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="13-13", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="TokenPartitionerTests.cs"];
m4_45 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", span="95-95", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence()", file="TokenPartitionerTests.cs"];
m4_163 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_69 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="172-172", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TokenPartitionerTests.cs"];
m4_125 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs"];
m4_94 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="70-70", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_18 [label="Assert.Equal(expectedResult, result.Value.LongValue)", span="51-51", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="TokenPartitionerTests.cs"];
m4_67 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="TokenPartitionerTests.cs"];
m4_70 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TokenPartitionerTests.cs"];
m4_65 [label="Exit lambda expression", span="144-144", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_49 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_58 [label="Exit lambda expression", span="121-121", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_71 [label="Entry lambda expression", span="166-166", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="38-38", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="TokenPartitionerTests.cs"];
m4_13 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs"];
m4_21 [label="var specs = from pt in specProps select pt.Specification", span="45-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="47-49", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_23 [label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="51-51", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_29 [label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="73-76", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_30 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         NameExtensions.FromOptionSpecification(optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))))", span="78-80", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_31 [label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="82-82", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_38 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specProps on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.GetDefaultValue()))).ToArray()", span="106-110", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_39 [label="instance = (T)ctor.Invoke(values)", span="111-111", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_40 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="114-115", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_47 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TokenPartitionerTests.cs"];
m4_48 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TokenPartitionerTests.cs"];
m4_57 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TokenPartitionerTests.cs"];
m4_64 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="TokenPartitionerTests.cs"];
m4_72 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TokenPartitionerTests.cs"];
m4_73 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="TokenPartitionerTests.cs"];
m4_82 [label="Exit lambda expression", span="42-43", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_83 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="TokenPartitionerTests.cs"];
m4_84 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenPartitionerTests.cs"];
m4_91 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_92 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs"];
m4_93 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_100 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_101 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="80-80", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_102 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_108 [label="sp.Value.IsJust()", span="91-91", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_109 [label="Exit lambda expression", span="91-91", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_110 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="TokenPartitionerTests.cs"];
m4_119 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_120 [label="sp.Specification.DefaultValue.FromJust()", span="95-95", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_121 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_128 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_129 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="TokenPartitionerTests.cs"];
m4_137 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_138 [label="System.StringComparer", span="", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_139 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_146 [label="Entry lambda expression", span="335-335", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_147 [label="new FakeOptionsWithSequenceAndSeparator()", span="335-335", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_148 [label="Exit lambda expression", span="335-335", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_154 [label="Entry lambda expression", span="358-358", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_155 [label="new FakeOptionsWithSequenceAndSeparator()", span="358-358", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_156 [label="Exit lambda expression", span="358-358", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_164 [label="Entry lambda expression", span="387-387", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_167 [label="Entry lambda expression", span="388-390", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_165 [label="new FakeOptionsWithValues()", span="387-387", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_166 [label="Exit lambda expression", span="387-387", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_168 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="389-390", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_172 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="390-390", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_176 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="390-390", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_169 [label="Exit lambda expression", span="388-390", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_171 [label="Entry lambda expression", span="390-390", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_173 [label="Exit lambda expression", span="390-390", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_175 [label="Entry lambda expression", span="390-390", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_177 [label="Exit lambda expression", span="390-390", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_185 [label="Entry lambda expression", span="413-413", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_186 [label="new FakeOptionsWithSets()", span="413-413", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_187 [label="Exit lambda expression", span="413-413", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_195 [label="Entry lambda expression", span="433-433", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_196 [label="new FakeOptionWithRequiredAndSet()", span="433-433", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_197 [label="Exit lambda expression", span="433-433", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_203 [label="Entry lambda expression", span="453-453", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_204 [label="new FakeOptionWithRequiredAndSet()", span="453-453", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_205 [label="Exit lambda expression", span="453-453", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_212 [label="Entry lambda expression", span="473-473", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_213 [label="new FakeOptionWithRequiredAndSet()", span="473-473", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_214 [label="Exit lambda expression", span="473-473", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_220 [label="Entry lambda expression", span="491-491", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_221 [label="new FakeOptionWithRequired()", span="491-491", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_222 [label="Exit lambda expression", span="491-491", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_229 [label="Entry lambda expression", span="510-510", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_230 [label="new FakeOptions()", span="510-510", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_231 [label="Exit lambda expression", span="510-510", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_238 [label="Entry lambda expression", span="529-529", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_239 [label="new FakeOptions()", span="529-529", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_240 [label="Exit lambda expression", span="529-529", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_246 [label="Entry lambda expression", span="548-548", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_247 [label="new FakeOptions()", span="548-548", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_248 [label="Exit lambda expression", span="548-548", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_254 [label="Entry lambda expression", span="567-567", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_255 [label="new FakeOptions()", span="567-567", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_256 [label="Exit lambda expression", span="567-567", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_262 [label="Entry lambda expression", span="587-587", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_263 [label="new FakeOptions()", span="587-587", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_264 [label="Exit lambda expression", span="587-587", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m4_98 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs"];
m4_97 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="223-227", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs"];
m4_111 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="TokenPartitionerTests.cs"];
m4_115 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="271-271", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs"];
m4_122 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs"];
m4_126 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs"];
m4_4 [label="Assert.True(expectedResult.Equals(result))", span="32-32", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs"];
m4_75 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="178-178", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenPartitionerTests.cs"];
m4_95 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="217-217", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs"];
m4_99 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="217-217", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs"];
m4_80 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TokenPartitionerTests.cs"];
m4_113 [label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="258-261", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs"];
m4_112 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs"];
m4_116 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="TokenPartitionerTests.cs"];
m4_124 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="289-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs"];
m4_123 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="280-286", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenPartitionerTests.cs"];
m4_127 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="TokenPartitionerTests.cs"];
m4_132 [label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="305-308", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs"];
m4_135 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="302-302", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs"];
m4_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs"];
m4_16 [label="var expectedResult = -123", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="TokenPartitionerTests.cs"];
m4_8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitionerTests.cs"];
m4_77 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="184-188", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenPartitionerTests.cs"];
m4_76 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="181-181", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenPartitionerTests.cs"];
m4_81 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="TokenPartitionerTests.cs"];
m4_134 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="318-318", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs"];
m4_133 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="311-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs"];
m4_136 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="TokenPartitionerTests.cs"];
m4_11 [label="Entry Unk.True", span="", cluster="Unk.True", file="TokenPartitionerTests.cs"];
m4_17 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="44-48", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="TokenPartitionerTests.cs"];
m4_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TokenPartitionerTests.cs"];
m4_32 [label="T instance", span="84-84", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_145 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="TokenPartitionerTests.cs"];
m4_170 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TokenPartitionerTests.cs"];
m4_61 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="150-150", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TokenPartitionerTests.cs"];
m4_184 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="TokenPartitionerTests.cs"];
m4_223 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="TokenPartitionerTests.cs"];
m4_60 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitionerTests.cs"];
m4_62 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="TokenPartitionerTests.cs"];
m4_19 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="40-40", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="16-16", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs"];
m4_1 [label="var fakeOptions = new FakeOptions()", span="19-19", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs"];
m4_2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="20-22", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenPartitionerTests.cs"];
m4_51 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitionerTests.cs"];
m4_52 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="TokenPartitionerTests.cs"];
m4_53 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs"];
m4_54 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="TokenPartitionerTests.cs"];
m4_224 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="503-503", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs"];
m4_225 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="506-506", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs"];
m4_226 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="509-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs"];
m4_227 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="516-516", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs"];
m4_228 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="503-503", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenPartitionerTests.cs"];
m4_178 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs"];
m4_3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_215 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="484-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs"];
m4_216 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="487-487", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs"];
m4_217 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="490-494", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs"];
m4_218 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="497-497", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs"];
m4_219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="484-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenPartitionerTests.cs"];
m4_206 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="464-464", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs"];
m4_207 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="466-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs"];
m4_208 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="472-476", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs"];
m4_209 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs"];
m4_210 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="464-464", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenPartitionerTests.cs"];
m4_46 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="TokenPartitionerTests.cs"];
m4_140 [label="System.StringComparer", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_141 [label=optionSpecs, span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_142 [label="System.Globalization.CultureInfo", span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_143 [label=token, span="", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_144 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="324-324", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_96 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_78 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="TokenPartitionerTests.cs"];
m4_79 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="TokenPartitionerTests.cs"];
m4_131 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="302-302", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="TokenPartitionerTests.cs"];
m4_188 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="TokenPartitionerTests.cs"];
m4_261 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TokenPartitionerTests.cs"];
m4_149 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="347-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_150 [label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n            {\r\n                LongSequence = new long[] {},\r\n                StringSequence = new[] { ''eml1@xyz.com'', ''test@unit.org'', ''xyz@srv.it'' }\r\n            }", span="350-354", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_151 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''-s'', ''eml1@xyz.com,test@unit.org,xyz@srv.it'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="357-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_152 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="364-364", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_153 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="347-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="TokenPartitionerTests.cs"];
m4_24 [label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    factory.Return(f => f(), default(T)),\r\n                    new[] { new HelpRequestedError() });", span="53-56", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_25 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="59-59", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="TokenPartitionerTests.cs"];
m4_26 [label="var tokens = tokenizerResult.Value", span="61-61", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs", color=green, community=0];
m4_27 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer))", span="63-65", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_28 [label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="67-71", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="42-43", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_33 [label="ReflectionHelper.IsTypeMutable(typeInfo)", span="85-85", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_34 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="87-87", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_35 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="89-100", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_36 [label="var t = typeof(T)", span="104-104", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_37 [label="var ctor = t.GetConstructor((from p in specProps select p.Specification.ConversionType).ToArray())", span="105-105", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenPartitionerTests.cs"];
m4_211 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="TokenPartitionerTests.cs"];
m4_232 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="522-522", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_233 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="525-525", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_234 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="528-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_235 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="535-535", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_236 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="522-522", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenPartitionerTests.cs"];
m4_198 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="445-445", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs"];
m4_199 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="447-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs"];
m4_200 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="452-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs"];
m4_201 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="459-459", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs"];
m4_202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="445-445", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenPartitionerTests.cs"];
m4_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="425-425", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs"];
m4_190 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="427-430", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs"];
m4_191 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="432-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs"];
m4_192 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="439-439", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs"];
m4_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="425-425", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenPartitionerTests.cs"];
m4_179 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="402-402", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs"];
m4_180 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="405-409", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs"];
m4_181 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="412-416", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs"];
m4_182 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="419-419", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs"];
m4_183 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="402-402", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenPartitionerTests.cs"];
m4_265 [label=fakeOptions, span="", file="TokenPartitionerTests.cs"];
m4_266 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="TokenPartitionerTests.cs"];
m5_0 [label="Entry CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs"];
m5_1 [label="this.options = options", span="17-17", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=red, community=0, file="TokenPartitions.cs"];
m5_2 [label="this.values = values", span="18-18", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=red, community=0, file="TokenPartitions.cs"];
m5_3 [label="this.errors = errors", span="19-19", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=red, community=0, file="TokenPartitions.cs"];
m5_4 [label="Exit CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs"];
m5_5 [label="Entry CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="37-37", cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs"];
m5_6 [label="return new TokenPartitions(options, values, errors);", span="42-42", cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=red, community=0, file="TokenPartitions.cs"];
m5_7 [label="Exit CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="37-37", cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs"];
m5_8 [label="CommandLine.Core.TokenPartitions", span="", file="TokenPartitions.cs"];
d7 -> d7  [key=3, color=green, style=bold, label="Local variable System.Func<CommandLine.ParserResult<T>> buildUp"];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d9  [key=1, style=dashed, color=green, label=buildUp];
d0 -> d7  [key=1, style=dashed, color=green, label="CSharpx.Maybe<System.Func<T>>"];
d0 -> d54  [key=1, style=dashed, color=green, label="System.StringComparer"];
d0 -> d55  [key=1, style=dashed, color=green, label="System.Globalization.CultureInfo"];
d0 -> d56  [key=1, style=dashed, color=green, label="System.StringComparer"];
d0 -> d1  [key=0, style=solid];
d0 -> d5  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d0 -> d33  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d0 -> d48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
d0 -> d50  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d85  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d89  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d0 -> d93  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d0 -> d96  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d58  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d0 -> d100  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d0 -> d63  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
d0 -> d8  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d0 -> d9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d1 -> d7  [key=1, style=dashed, color=green, label=typeInfo];
d1 -> d2  [key=0, style=solid];
d1 -> d12  [key=2, style=dotted];
d1 -> d22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d1 -> d59  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d1 -> d134  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d1 -> d60  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d2 -> d7  [key=1, style=dashed, color=green, label=specProps];
d2 -> d54  [key=1, style=dashed, color=green, label=specProps];
d2 -> d55  [key=1, style=dashed, color=green, label=specProps];
d2 -> d3  [key=0, style=solid];
d2 -> d13  [key=2, style=dotted];
d2 -> d26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d2 -> d5  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d2 -> d33  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d2 -> d59  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d2 -> d134  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d4 -> d7  [key=1, style=dashed, color=green, label=optionSpecs];
d4 -> d56  [key=1, style=dashed, color=green, label=optionSpecs];
d4 -> d5  [key=0, style=solid];
d4 -> d14  [key=2, style=dotted];
d4 -> d15  [key=2, style=dotted];
d4 -> d48  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d4 -> d50  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d4 -> d85  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d6  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.ParserResult<T>> notParsed"];
d6 -> d43  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Error>"];
d6 -> d9  [key=1, style=dashed, color=darkseagreen4, label=notParsed];
d8 -> d9  [key=0, style=solid];
d8 -> d16  [key=2, style=dotted];
d8 -> d17  [key=2, style=dotted];
d8 -> d18  [key=2, style=dotted];
d8 -> d19  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d9 -> d16  [key=2, style=dotted];
d9 -> d20  [key=2, style=dotted];
d9 -> d21  [key=2, style=dotted];
d54 -> d54  [key=1, style=dashed, color=green, label=pt];
d54 -> d55  [key=0, style=solid, color=green];
d54 -> d69  [key=2, style=dotted, color=green];
d54 -> d70  [key=2, style=dotted, color=green];
d54 -> d88  [key=1, style=dashed, color=green, label="lambda expression"];
d54 -> d57  [key=1, style=dashed, color=green, label=optionSpecPropsResult];
d54 -> d62  [key=1, style=dashed, color=green, label=optionSpecPropsResult];
d152 -> d54  [key=1, style=dashed, color=green, label=specProps];
d152 -> d55  [key=1, style=dashed, color=green, label=specProps];
d152 -> d33  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d152 -> d59  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d152 -> d134  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d157 -> d54  [key=1, style=dashed, color=green, label="System.StringComparer"];
d157 -> d56  [key=1, style=dashed, color=green, label="System.StringComparer"];
d157 -> d50  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d157 -> d85  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d157 -> d96  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d158 -> d54  [key=1, style=dashed, color=green, label="System.Globalization.CultureInfo"];
d158 -> d55  [key=1, style=dashed, color=green, label="System.Globalization.CultureInfo"];
d158 -> d89  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d158 -> d93  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d51 -> d54  [key=1, style=dashed, color=green, label=optionsPartition];
d51 -> d52  [key=0, style=solid, color=green];
d53 -> d54  [key=0, style=solid, color=green];
d53 -> d56  [key=1, style=dashed, color=green, label=errorsPartition];
d55 -> d55  [key=1, style=dashed, color=green, label=pt];
d55 -> d56  [key=0, style=solid, color=green];
d55 -> d71  [key=2, style=dotted, color=green];
d55 -> d70  [key=2, style=dotted, color=green];
d55 -> d92  [key=1, style=dashed, color=green, label="lambda expression"];
d55 -> d57  [key=1, style=dashed, color=green, label=valueSpecPropsResult];
d55 -> d62  [key=1, style=dashed, color=green, label=valueSpecPropsResult];
d88 -> d89  [key=0, style=solid];
d57 -> d58  [key=0, style=solid];
d57 -> d67  [key=2, style=dotted];
d57 -> d75  [key=2, style=dotted];
d57 -> d101  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d57 -> d59  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d57 -> d135  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d57 -> d61  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d62 -> d63  [key=0, style=solid];
d62 -> d78  [key=2, style=dotted];
d62 -> d79  [key=2, style=dotted];
d62 -> d80  [key=2, style=dotted];
d62 -> d64  [key=1, style=dashed, color=darkseagreen4, label=allErrors];
d52 -> d55  [key=1, style=dashed, color=green, label=valuesPartition];
d52 -> d53  [key=0, style=solid, color=green];
d56 -> d56  [key=1, style=dashed, color=green, label=token];
d56 -> d57  [key=0, style=solid, color=green];
d56 -> d72  [key=2, style=dotted, color=green];
d56 -> d73  [key=2, style=dotted, color=green];
d56 -> d74  [key=2, style=dotted, color=green];
d56 -> d95  [key=1, style=dashed, color=green, label="lambda expression"];
d56 -> d96  [key=1, style=dashed, color=green, label=token];
d56 -> d62  [key=1, style=dashed, color=green, label=missingValueErrors];
d92 -> d93  [key=0, style=solid];
d156 -> d56  [key=1, style=dashed, color=green, label=optionSpecs];
d156 -> d48  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d156 -> d50  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d156 -> d85  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d95 -> d96  [key=0, style=solid];
d96 -> d97  [key=0, style=solid];
d96 -> d98  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid, color=green];
d50 -> d52  [key=1, style=dashed, color=green, label=partitions];
d50 -> d53  [key=1, style=dashed, color=green, label=partitions];
d50 -> d68  [key=2, style=dotted];
d50 -> d84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d11 -> d0  [key=0, style=bold, color=blue];
d5 -> d6  [key=0, style=solid];
d5 -> d5  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
d5 -> d43  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
d33 -> d33  [key=1, style=dashed, color=darkseagreen4, label=p];
d33 -> d34  [key=0, style=solid];
d33 -> d35  [key=2, style=dotted];
d33 -> d36  [key=2, style=dotted];
d33 -> d12  [key=2, style=dotted];
d33 -> d37  [key=2, style=dotted];
d33 -> d38  [key=2, style=dotted];
d33 -> d39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d48 -> d62  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
d48 -> d49  [key=0, style=solid];
d48 -> d66  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d85 -> d87  [key=2, style=dotted];
d89 -> d90  [key=0, style=solid];
d89 -> d91  [key=2, style=dotted];
d93 -> d94  [key=0, style=solid];
d93 -> d91  [key=2, style=dotted];
d58 -> d59  [key=0, style=solid];
d58 -> d60  [key=1, style=dashed, color=darkseagreen4, label=buildMutable];
d100 -> d101  [key=0, style=solid];
d100 -> d36  [key=2, style=dotted];
d100 -> d12  [key=2, style=dotted];
d100 -> d105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d63 -> d63  [key=1, style=dashed, color=darkseagreen4, label=e];
d63 -> d64  [key=0, style=solid];
d63 -> d81  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d59 -> d60  [key=0, style=solid];
d134 -> d134  [key=1, style=dashed, color=darkseagreen4, label=sp];
d134 -> d135  [key=0, style=solid];
d134 -> d37  [key=2, style=dotted];
d134 -> d139  [key=2, style=dotted];
d134 -> d136  [key=1, style=dashed, color=darkseagreen4, label=ctor];
d60 -> d61  [key=0, style=solid];
d60 -> d35  [key=2, style=dotted];
d60 -> d21  [key=2, style=dotted];
d60 -> d64  [key=1, style=dashed, color=darkseagreen4, label=instance];
d3 -> d4  [key=0, style=solid];
d3 -> d3  [key=1, style=dashed, color=darkseagreen4, label=pt];
d26 -> d27  [key=0, style=solid];
d43 -> d44  [key=0, style=solid];
d43 -> d45  [key=2, style=dotted];
d43 -> d21  [key=2, style=dotted];
d43 -> d25  [key=2, style=dotted];
d43 -> d46  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d90 -> d88  [key=0, style=bold, color=blue];
d101 -> d101  [key=1, style=dashed, color=darkseagreen4, label=mutable];
d101 -> d102  [key=0, style=solid];
d101 -> d104  [key=2, style=dotted];
d101 -> d108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d101 -> d112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d101 -> d116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d101 -> d120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d101 -> d123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d101 -> d127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d135 -> d12  [key=2, style=dotted];
d135 -> d135  [key=1, style=dashed, color=darkseagreen4, label=prms];
d135 -> d136  [key=0, style=solid];
d135 -> d140  [key=2, style=dotted];
d135 -> d141  [key=2, style=dotted];
d135 -> d142  [key=2, style=dotted];
d135 -> d143  [key=2, style=dotted];
d135 -> d145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d135 -> d148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d61 -> d62  [key=0, style=solid];
d61 -> d76  [key=2, style=dotted];
d61 -> d77  [key=2, style=dotted];
d64 -> d65  [key=0, style=solid];
d64 -> d82  [key=2, style=dotted];
d64 -> d83  [key=2, style=dotted];
d94 -> d92  [key=0, style=bold, color=blue];
d97 -> d95  [key=0, style=bold, color=blue];
d161 -> d96  [key=1, style=dashed, color=darkseagreen4, label=token];
d49 -> d50  [key=0, style=solid];
d49 -> d67  [key=2, style=dotted];
d49 -> d61  [key=1, style=dashed, color=darkseagreen4, label=tokens];
d84 -> d85  [key=0, style=solid];
d151 -> d33  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d151 -> d58  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d151 -> d100  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d32 -> d33  [key=0, style=solid];
d34 -> d32  [key=0, style=bold, color=blue];
d39 -> d40  [key=0, style=solid];
d154 -> d48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
d155 -> d48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d47 -> d48  [key=0, style=solid];
d86 -> d84  [key=0, style=bold, color=blue];
d99 -> d100  [key=0, style=solid];
d105 -> d106  [key=0, style=solid];
d160 -> d63  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
d24 -> d22  [key=0, style=bold, color=blue];
d23 -> d21  [key=2, style=dotted];
d23 -> d24  [key=0, style=solid];
d23 -> d25  [key=2, style=dotted];
d159 -> d59  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d159 -> d134  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d159 -> d60  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d133 -> d134  [key=0, style=solid];
d136 -> d137  [key=0, style=solid];
d136 -> d144  [key=2, style=dotted];
d28 -> d26  [key=0, style=bold, color=blue];
d27 -> d28  [key=0, style=solid];
d27 -> d29  [key=2, style=dotted];
d27 -> d30  [key=2, style=dotted];
d27 -> d31  [key=2, style=dotted];
d153 -> d43  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
d42 -> d43  [key=0, style=solid];
d44 -> d42  [key=0, style=bold, color=blue];
d40 -> d21  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d106 -> d21  [key=2, style=dotted];
d106 -> d107  [key=0, style=solid];
d162 -> d101  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d162 -> d135  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d102 -> d103  [key=0, style=solid];
d108 -> d109  [key=0, style=solid];
d112 -> d113  [key=0, style=solid];
d116 -> d117  [key=0, style=solid];
d120 -> d121  [key=0, style=solid];
d123 -> d124  [key=0, style=solid];
d127 -> d128  [key=0, style=solid];
d145 -> d146  [key=0, style=solid];
d148 -> d149  [key=0, style=solid];
d65 -> d47  [key=0, style=bold, color=blue];
d41 -> d39  [key=0, style=bold, color=blue];
d103 -> d99  [key=0, style=bold, color=blue];
d107 -> d105  [key=0, style=bold, color=blue];
d138 -> d133  [key=0, style=bold, color=blue];
d137 -> d138  [key=0, style=solid];
d110 -> d108  [key=0, style=bold, color=blue];
d109 -> d110  [key=0, style=solid];
d109 -> d111  [key=2, style=dotted];
d114 -> d112  [key=0, style=bold, color=blue];
d113 -> d114  [key=0, style=solid];
d113 -> d115  [key=2, style=dotted];
d118 -> d116  [key=0, style=bold, color=blue];
d117 -> d118  [key=0, style=solid];
d117 -> d119  [key=2, style=dotted];
d117 -> d111  [key=2, style=dotted];
d122 -> d120  [key=0, style=bold, color=blue];
d121 -> d122  [key=0, style=solid];
d121 -> d115  [key=2, style=dotted];
d125 -> d123  [key=0, style=bold, color=blue];
d124 -> d125  [key=0, style=solid];
d124 -> d119  [key=2, style=dotted];
d124 -> d126  [key=2, style=dotted];
d129 -> d127  [key=0, style=bold, color=blue];
d128 -> d129  [key=0, style=solid];
d128 -> d130  [key=2, style=dotted];
d128 -> d131  [key=2, style=dotted];
d128 -> d132  [key=2, style=dotted];
d147 -> d145  [key=0, style=bold, color=blue];
d146 -> d147  [key=0, style=solid];
d150 -> d148  [key=0, style=bold, color=blue];
d149 -> d150  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_8 -> m0_4  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.NameInfo FromSpecification"];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=0, style=solid];
m0_11 -> m0_4  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_8  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid, color=green];
m0_4 -> m0_8  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.OptionSpecification specification"];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_5 -> m0_7  [key=2, style=dotted, color=green];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expected];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> d30  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_10  [key=2, style=dotted];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid, color=green];
m3_0 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m3_0 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m3_1 -> m3_1  [key=1, style=dashed, color=green, label=tseq];
m3_1 -> m3_2  [key=0, style=solid, color=green];
m3_1 -> m3_3  [key=2, style=dotted, color=green];
m3_1 -> m3_4  [key=1, style=dashed, color=green, label="lambda expression"];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_25 -> m3_26  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_7  [key=2, style=dotted];
m3_5 -> m3_8  [key=2, style=dotted];
m3_5 -> m3_9  [key=2, style=dotted];
m3_5 -> m3_10  [key=2, style=dotted];
m3_5 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_14  [key=2, style=dotted];
m3_12 -> d75  [key=2, style=dotted];
m3_6 -> m3_4  [key=0, style=bold, color=blue];
m3_11 -> m3_12  [key=0, style=solid];
m3_13 -> m3_11  [key=0, style=bold, color=blue];
m3_30 -> m3_8  [key=2, style=dotted];
m3_30 -> m3_31  [key=0, style=solid];
m3_29 -> m3_30  [key=0, style=solid];
m3_31 -> m3_29  [key=0, style=bold, color=blue];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_28  [key=2, style=dotted];
m3_27 -> m3_25  [key=0, style=bold, color=blue];
m3_16 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m3_19 -> m3_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_19 -> m3_21  [key=0, style=solid];
m3_19 -> m3_23  [key=2, style=dotted];
m3_19 -> m3_24  [key=2, style=dotted];
m3_17 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label=nameIndex];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_22  [key=2, style=dotted];
m3_17 -> m3_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_20  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid];
m3_21 -> m3_16  [key=0, style=bold, color=blue];
m3_32 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m3_32 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m3_33 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m3_34 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m3_35 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m4_56 -> m4_57  [key=0, style=solid];
m4_257 -> m4_258  [key=0, style=solid];
m4_257 -> m4_259  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_258 -> m4_259  [key=0, style=solid];
m4_258 -> m4_9  [key=2, style=dotted];
m4_258 -> m4_262  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_259 -> m4_260  [key=0, style=solid];
m4_259 -> m4_261  [key=2, style=dotted];
m4_259 -> m4_11  [key=2, style=dotted];
m4_260 -> m4_257  [key=0, style=bold, color=blue];
m4_114 -> m4_115  [key=0, style=solid];
m4_114 -> m4_9  [key=2, style=dotted];
m4_114 -> m4_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_92  [key=2, style=dotted];
m4_157 -> m4_158  [key=0, style=solid];
m4_158 -> m4_159  [key=0, style=solid];
m4_158 -> m4_127  [key=2, style=dotted];
m4_158 -> m4_161  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_159 -> m4_160  [key=0, style=solid];
m4_161 -> m4_162  [key=0, style=solid];
m4_161 -> m4_118  [key=2, style=dotted];
m4_160 -> m4_161  [key=0, style=solid];
m4_160 -> m4_163  [key=2, style=dotted];
m4_160 -> m4_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_160 -> m4_167  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_162 -> m4_157  [key=0, style=bold, color=blue];
m4_130 -> m4_128  [key=0, style=bold, color=blue];
m4_249 -> m4_250  [key=0, style=solid];
m4_250 -> m4_251  [key=0, style=solid];
m4_250 -> m4_237  [key=2, style=dotted];
m4_250 -> m4_252  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_251 -> m4_252  [key=0, style=solid];
m4_251 -> m4_9  [key=2, style=dotted];
m4_251 -> m4_254  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_252 -> m4_253  [key=0, style=solid];
m4_252 -> m4_46  [key=2, style=dotted];
m4_252 -> m4_11  [key=2, style=dotted];
m4_253 -> m4_249  [key=0, style=bold, color=blue];
m4_117 -> m4_115  [key=0, style=bold, color=blue];
m4_85 -> m4_86  [key=0, style=solid];
m4_86 -> m4_87  [key=0, style=solid];
m4_86 -> m4_90  [key=2, style=dotted];
m4_86 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_87 -> m4_88  [key=0, style=solid];
m4_87 -> m4_9  [key=2, style=dotted];
m4_87 -> m4_91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_87 -> m4_78  [key=2, style=dotted];
m4_88 -> m4_89  [key=0, style=solid];
m4_88 -> m4_46  [key=2, style=dotted];
m4_88 -> m4_11  [key=2, style=dotted];
m4_88 -> m4_86  [key=0, style=bold, color=blue];
m4_89 -> m4_85  [key=0, style=bold, color=blue];
m4_89 -> m4_90  [key=0, style=solid];
m4_103 -> m4_104  [key=0, style=solid];
m4_104 -> m4_105  [key=0, style=solid];
m4_104 -> m4_90  [key=2, style=dotted];
m4_104 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_105 -> m4_106  [key=0, style=solid];
m4_105 -> m4_9  [key=2, style=dotted];
m4_105 -> m4_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_105 -> m4_78  [key=2, style=dotted];
m4_106 -> m4_107  [key=0, style=solid];
m4_106 -> m4_46  [key=2, style=dotted];
m4_106 -> m4_11  [key=2, style=dotted];
m4_106 -> m4_104  [key=0, style=bold, color=blue];
m4_107 -> m4_103  [key=0, style=bold, color=blue];
m4_107 -> m4_108  [key=0, style=solid];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_9  [key=2, style=dotted];
m4_68 -> m4_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_10  [key=2, style=dotted];
m4_6 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_241 -> m4_242  [key=0, style=solid];
m4_242 -> m4_243  [key=0, style=solid];
m4_242 -> m4_237  [key=2, style=dotted];
m4_242 -> m4_244  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_243 -> m4_244  [key=0, style=solid];
m4_243 -> m4_9  [key=2, style=dotted];
m4_243 -> m4_246  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_244 -> m4_245  [key=0, style=solid];
m4_244 -> m4_46  [key=2, style=dotted];
m4_244 -> m4_11  [key=2, style=dotted];
m4_245 -> m4_241  [key=0, style=bold, color=blue];
m4_7 -> m4_8  [key=0, style=solid];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_61  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_55 -> m4_51  [key=0, style=bold, color=blue];
m4_63 -> m4_64  [key=0, style=solid];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_73  [key=2, style=dotted];
m4_41 -> m4_74  [key=2, style=dotted];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_44  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_42 -> m4_3  [key=0, style=bold, color=blue];
m4_43 -> m4_44  [key=0, style=solid];
m4_43 -> m4_9  [key=2, style=dotted];
m4_43 -> m4_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_44 -> m4_45  [key=0, style=solid];
m4_44 -> m4_46  [key=2, style=dotted];
m4_44 -> m4_11  [key=2, style=dotted];
m4_45 -> m4_41  [key=0, style=bold, color=blue];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_46  [key=2, style=dotted];
m4_69 -> m4_11  [key=2, style=dotted];
m4_125 -> m4_126  [key=0, style=solid];
m4_125 -> m4_118  [key=2, style=dotted];
m4_94 -> m4_95  [key=0, style=solid];
m4_94 -> m4_96  [key=2, style=dotted];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_20  [key=2, style=dotted];
m4_67 -> m4_68  [key=0, style=solid];
m4_67 -> m4_69  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m4_70 -> m4_67  [key=0, style=bold, color=blue];
m4_65 -> m4_63  [key=0, style=bold, color=blue];
m4_49 -> m4_47  [key=0, style=bold, color=blue];
m4_58 -> m4_56  [key=0, style=bold, color=blue];
m4_71 -> m4_72  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_11  [key=0, style=bold, color=blue];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_14  [key=2, style=dotted];
m4_14 -> m4_12  [key=0, style=bold, color=blue];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label=pt];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_6  [key=2, style=dotted];
m4_22 -> m4_25  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_22 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_22 -> d14  [key=2, style=dotted];
m4_22 -> m4_46  [key=2, style=dotted];
m4_22 -> m4_90  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_22 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_23 -> m4_21  [key=0, style=bold, color=blue];
m4_23 -> m4_25  [key=0, style=solid];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_47  [key=2, style=dotted];
m4_23 -> m4_48  [key=2, style=dotted];
m4_23 -> m4_49  [key=2, style=dotted];
m4_29 -> m4_30  [key=0, style=solid];
m4_29 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m4_29 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label=pt];
m4_29 -> m4_56  [key=2, style=dotted];
m4_29 -> m4_55  [key=2, style=dotted];
m4_29 -> m4_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_29 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_32  [key=2, style=dotted];
m4_30 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
m4_30 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label=token];
m4_30 -> m4_57  [key=2, style=dotted];
m4_30 -> m4_58  [key=2, style=dotted];
m4_30 -> m4_59  [key=2, style=dotted];
m4_30 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_30 -> m4_101  [key=1, style=dashed, color=darkseagreen4, label=token];
m4_31 -> m4_29  [key=0, style=bold, color=blue];
m4_31 -> m4_40  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m4_31 -> m4_32  [key=0, style=solid];
m4_31 -> m4_60  [key=2, style=dotted];
m4_31 -> m4_35  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label=prms];
m4_38 -> m4_66  [key=2, style=dotted];
m4_38 -> m4_67  [key=2, style=dotted];
m4_38 -> m4_68  [key=2, style=dotted];
m4_38 -> m4_43  [key=2, style=dotted];
m4_38 -> m4_69  [key=2, style=dotted];
m4_38 -> m4_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_38 -> m4_135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_39 -> m4_40  [key=0, style=solid];
m4_39 -> m4_32  [key=2, style=dotted];
m4_39 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=instance];
m4_39 -> m4_70  [key=2, style=dotted];
m4_40 -> m4_38  [key=0, style=bold, color=blue];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_71  [key=2, style=dotted];
m4_40 -> m4_72  [key=2, style=dotted];
m4_47 -> m4_48  [key=0, style=solid];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_50  [key=2, style=dotted];
m4_57 -> m4_58  [key=0, style=solid];
m4_57 -> m4_6  [key=2, style=dotted];
m4_64 -> m4_65  [key=0, style=solid];
m4_64 -> m4_66  [key=2, style=dotted];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_74  [key=2, style=dotted];
m4_73 -> m4_71  [key=0, style=bold, color=blue];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_80  [key=0, style=bold, color=blue];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_66  [key=2, style=dotted];
m4_84 -> m4_82  [key=0, style=bold, color=blue];
m4_91 -> m4_92  [key=0, style=solid];
m4_91 -> m4_89  [key=0, style=bold, color=blue];
m4_92 -> m4_93  [key=0, style=solid];
m4_92 -> m4_94  [key=2, style=dotted];
m4_93 -> m4_91  [key=0, style=bold, color=blue];
m4_93 -> m4_94  [key=0, style=solid];
m4_100 -> m4_101  [key=0, style=solid];
m4_101 -> m4_102  [key=0, style=solid];
m4_101 -> m4_74  [key=2, style=dotted];
m4_101 -> m4_103  [key=2, style=dotted];
m4_102 -> m4_100  [key=0, style=bold, color=blue];
m4_108 -> m4_109  [key=0, style=solid];
m4_108 -> m4_110  [key=2, style=dotted];
m4_109 -> m4_110  [key=0, style=solid];
m4_109 -> m4_111  [key=2, style=dotted];
m4_109 -> m4_107  [key=0, style=bold, color=blue];
m4_110 -> m4_108  [key=0, style=bold, color=blue];
m4_119 -> m4_120  [key=0, style=solid];
m4_120 -> m4_121  [key=0, style=solid];
m4_120 -> m4_117  [key=2, style=dotted];
m4_120 -> m4_114  [key=2, style=dotted];
m4_121 -> m4_119  [key=0, style=bold, color=blue];
m4_128 -> m4_129  [key=0, style=solid];
m4_128 -> m4_126  [key=0, style=bold, color=blue];
m4_129 -> m4_130  [key=0, style=solid];
m4_129 -> m4_127  [key=2, style=dotted];
m4_137 -> m4_138  [key=0, style=solid];
m4_137 -> m4_135  [key=0, style=bold, color=blue];
m4_138 -> m4_139  [key=0, style=solid];
m4_138 -> m4_136  [key=2, style=dotted];
m4_138 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_138 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_138 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_138 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_139 -> m4_137  [key=0, style=bold, color=blue];
m4_139 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_139 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_146 -> m4_147  [key=0, style=solid];
m4_147 -> m4_148  [key=0, style=solid];
m4_147 -> m4_145  [key=2, style=dotted];
m4_148 -> m4_146  [key=0, style=bold, color=blue];
m4_154 -> m4_155  [key=0, style=solid];
m4_155 -> m4_156  [key=0, style=solid];
m4_155 -> m4_145  [key=2, style=dotted];
m4_156 -> m4_154  [key=0, style=bold, color=blue];
m4_164 -> m4_165  [key=0, style=solid];
m4_167 -> m4_168  [key=0, style=solid];
m4_167 -> m4_172  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_167 -> m4_176  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_165 -> m4_166  [key=0, style=solid];
m4_165 -> m4_127  [key=2, style=dotted];
m4_166 -> m4_164  [key=0, style=bold, color=blue];
m4_168 -> m4_169  [key=0, style=solid];
m4_168 -> m4_170  [key=2, style=dotted];
m4_168 -> m4_171  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_172 -> m4_173  [key=0, style=solid];
m4_172 -> m4_174  [key=2, style=dotted];
m4_172 -> m4_175  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_176 -> m4_177  [key=0, style=solid];
m4_176 -> m4_178  [key=2, style=dotted];
m4_169 -> m4_167  [key=0, style=bold, color=blue];
m4_171 -> m4_172  [key=0, style=solid];
m4_173 -> m4_171  [key=0, style=bold, color=blue];
m4_175 -> m4_176  [key=0, style=solid];
m4_177 -> m4_175  [key=0, style=bold, color=blue];
m4_185 -> m4_186  [key=0, style=solid];
m4_186 -> m4_187  [key=0, style=solid];
m4_186 -> m4_188  [key=2, style=dotted];
m4_187 -> m4_185  [key=0, style=bold, color=blue];
m4_195 -> m4_196  [key=0, style=solid];
m4_196 -> m4_197  [key=0, style=solid];
m4_196 -> m4_194  [key=2, style=dotted];
m4_197 -> m4_195  [key=0, style=bold, color=blue];
m4_203 -> m4_204  [key=0, style=solid];
m4_204 -> m4_205  [key=0, style=solid];
m4_204 -> m4_194  [key=2, style=dotted];
m4_205 -> m4_203  [key=0, style=bold, color=blue];
m4_212 -> m4_213  [key=0, style=solid];
m4_213 -> m4_214  [key=0, style=solid];
m4_213 -> m4_194  [key=2, style=dotted];
m4_214 -> m4_212  [key=0, style=bold, color=blue];
m4_220 -> m4_221  [key=0, style=solid];
m4_221 -> m4_222  [key=0, style=solid];
m4_221 -> m4_223  [key=2, style=dotted];
m4_222 -> m4_220  [key=0, style=bold, color=blue];
m4_229 -> m4_230  [key=0, style=solid];
m4_230 -> m4_231  [key=0, style=solid];
m4_230 -> m4_6  [key=2, style=dotted];
m4_231 -> m4_229  [key=0, style=bold, color=blue];
m4_238 -> m4_239  [key=0, style=solid];
m4_239 -> m4_240  [key=0, style=solid];
m4_239 -> m4_6  [key=2, style=dotted];
m4_240 -> m4_238  [key=0, style=bold, color=blue];
m4_246 -> m4_247  [key=0, style=solid];
m4_247 -> m4_248  [key=0, style=solid];
m4_247 -> m4_6  [key=2, style=dotted];
m4_248 -> m4_246  [key=0, style=bold, color=blue];
m4_254 -> m4_255  [key=0, style=solid];
m4_255 -> m4_256  [key=0, style=solid];
m4_255 -> m4_6  [key=2, style=dotted];
m4_256 -> m4_254  [key=0, style=bold, color=blue];
m4_262 -> m4_263  [key=0, style=solid];
m4_263 -> m4_264  [key=0, style=solid];
m4_263 -> m4_6  [key=2, style=dotted];
m4_264 -> m4_262  [key=0, style=bold, color=blue];
m4_98 -> m4_99  [key=0, style=solid];
m4_98 -> m4_96  [key=2, style=dotted];
m4_98 -> m4_46  [key=2, style=dotted];
m4_98 -> m4_11  [key=2, style=dotted];
m4_97 -> m4_98  [key=0, style=solid];
m4_97 -> m4_9  [key=2, style=dotted];
m4_97 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_111 -> m4_112  [key=0, style=solid];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> m4_118  [key=2, style=dotted];
m4_122 -> m4_123  [key=0, style=solid];
m4_126 -> m4_127  [key=0, style=solid];
m4_126 -> m4_122  [key=0, style=bold, color=blue];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_4 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_4 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_4 -> m4_10  [key=2, style=dotted];
m4_4 -> m4_11  [key=2, style=dotted];
m4_75 -> m4_76  [key=0, style=solid];
m4_95 -> m4_93  [key=0, style=bold, color=blue];
m4_95 -> m4_96  [key=0, style=solid];
m4_99 -> m4_97  [key=0, style=bold, color=blue];
m4_99 -> m4_95  [key=0, style=bold, color=blue];
m4_80 -> m4_81  [key=0, style=solid];
m4_113 -> m4_111  [key=0, style=bold, color=blue];
m4_113 -> m4_114  [key=0, style=solid];
m4_113 -> m4_117  [key=2, style=dotted];
m4_113 -> m4_115  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_112 -> m4_113  [key=0, style=solid];
m4_112 -> m4_114  [key=2, style=dotted];
m4_116 -> m4_117  [key=0, style=solid];
m4_116 -> m4_118  [key=2, style=dotted];
m4_116 -> m4_110  [key=2, style=dotted];
m4_116 -> m4_112  [key=0, style=bold, color=blue];
m4_124 -> m4_122  [key=0, style=bold, color=blue];
m4_124 -> m4_125  [key=0, style=solid];
m4_124 -> m4_9  [key=2, style=dotted];
m4_124 -> m4_128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_123 -> m4_124  [key=0, style=solid];
m4_123 -> m4_118  [key=2, style=dotted];
m4_123 -> m4_125  [key=2, style=dotted];
m4_123 -> m4_127  [key=2, style=dotted];
m4_127 -> m4_128  [key=0, style=solid];
m4_127 -> m4_129  [key=2, style=dotted];
m4_127 -> m4_130  [key=2, style=dotted];
m4_127 -> m4_131  [key=2, style=dotted];
m4_132 -> m4_133  [key=0, style=solid];
m4_132 -> m4_136  [key=2, style=dotted];
m4_132 -> m4_134  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_135 -> m4_136  [key=0, style=solid];
m4_135 -> m4_131  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_9  [key=2, style=dotted];
m4_5 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_5 -> m4_0  [key=0, style=bold, color=blue];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_18  [key=2, style=dotted];
m4_8 -> m4_4  [key=0, style=bold, color=blue];
m4_77 -> m4_75  [key=0, style=bold, color=blue];
m4_77 -> m4_78  [key=0, style=solid];
m4_77 -> m4_9  [key=2, style=dotted];
m4_77 -> m4_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> m4_78  [key=2, style=dotted];
m4_76 -> m4_79  [key=2, style=dotted];
m4_76 -> m4_80  [key=2, style=dotted];
m4_76 -> m4_81  [key=2, style=dotted];
m4_81 -> m4_82  [key=0, style=solid];
m4_81 -> m4_83  [key=2, style=dotted];
m4_81 -> m4_84  [key=2, style=dotted];
m4_81 -> m4_85  [key=2, style=dotted];
m4_134 -> m4_132  [key=0, style=bold, color=blue];
m4_134 -> m4_135  [key=0, style=solid];
m4_134 -> m4_118  [key=2, style=dotted];
m4_133 -> m4_134  [key=0, style=solid];
m4_133 -> m4_9  [key=2, style=dotted];
m4_133 -> m4_137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_136 -> m4_137  [key=0, style=solid];
m4_11 -> m4_12  [key=0, style=solid];
m4_17 -> m4_15  [key=0, style=bold, color=blue];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_9  [key=2, style=dotted];
m4_17 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_32 -> m4_33  [key=0, style=solid];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_46  [key=2, style=dotted];
m4_61 -> m4_11  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid];
m4_60 -> m4_9  [key=2, style=dotted];
m4_60 -> m4_63  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_62 -> m4_59  [key=0, style=bold, color=blue];
m4_19 -> m4_15  [key=0, style=bold, color=blue];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_43  [key=2, style=dotted];
m4_19 -> m4_75  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_19 -> m4_33  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_0 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_0 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_0 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_1 -> m4_3  [key=2, style=dotted];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_1 -> m4_6  [key=2, style=dotted];
m4_1 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_7  [key=2, style=dotted];
m4_2 -> m4_8  [key=2, style=dotted];
m4_2 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_51 -> m4_52  [key=0, style=solid];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_54  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_53 -> m4_54  [key=0, style=solid];
m4_53 -> m4_9  [key=2, style=dotted];
m4_53 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_54 -> m4_55  [key=0, style=solid];
m4_54 -> m4_46  [key=2, style=dotted];
m4_54 -> m4_11  [key=2, style=dotted];
m4_224 -> m4_225  [key=0, style=solid];
m4_225 -> m4_226  [key=0, style=solid];
m4_225 -> m4_90  [key=2, style=dotted];
m4_225 -> m4_81  [key=2, style=dotted];
m4_225 -> m4_227  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_226 -> m4_227  [key=0, style=solid];
m4_226 -> m4_9  [key=2, style=dotted];
m4_226 -> m4_229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_227 -> m4_228  [key=0, style=solid];
m4_227 -> m4_46  [key=2, style=dotted];
m4_227 -> m4_11  [key=2, style=dotted];
m4_228 -> m4_224  [key=0, style=bold, color=blue];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_9  [key=2, style=dotted];
m4_3 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_3 -> m4_25  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m4_3 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_19  [key=0, style=solid];
m4_3 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m4_3 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m4_3 -> m4_90  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_94  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_3 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_3 -> m4_98  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_3 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_101  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m4_215 -> m4_216  [key=0, style=solid];
m4_216 -> m4_217  [key=0, style=solid];
m4_216 -> m4_211  [key=2, style=dotted];
m4_216 -> m4_81  [key=2, style=dotted];
m4_216 -> m4_218  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_217 -> m4_218  [key=0, style=solid];
m4_217 -> m4_9  [key=2, style=dotted];
m4_217 -> m4_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_218 -> m4_219  [key=0, style=solid];
m4_218 -> m4_46  [key=2, style=dotted];
m4_218 -> m4_11  [key=2, style=dotted];
m4_219 -> m4_215  [key=0, style=bold, color=blue];
m4_206 -> m4_207  [key=0, style=solid];
m4_207 -> m4_208  [key=0, style=solid];
m4_207 -> m4_211  [key=2, style=dotted];
m4_207 -> m4_81  [key=2, style=dotted];
m4_207 -> m4_209  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_208 -> m4_209  [key=0, style=solid];
m4_208 -> m4_9  [key=2, style=dotted];
m4_208 -> m4_212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_209 -> m4_210  [key=0, style=solid];
m4_209 -> m4_46  [key=2, style=dotted];
m4_209 -> m4_11  [key=2, style=dotted];
m4_210 -> m4_206  [key=0, style=bold, color=blue];
m4_140 -> m4_141  [key=0, style=solid];
m4_140 -> m4_90  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_140 -> m4_101  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_141 -> m4_142  [key=0, style=solid];
m4_141 -> m4_145  [key=2, style=dotted];
m4_141 -> m4_143  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_141 -> m4_90  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_142 -> m4_143  [key=0, style=solid];
m4_142 -> m4_9  [key=2, style=dotted];
m4_142 -> m4_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_142 -> m4_94  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_142 -> m4_98  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_143 -> m4_144  [key=0, style=solid];
m4_143 -> m4_118  [key=2, style=dotted];
m4_143 -> m4_101  [key=1, style=dashed, color=darkseagreen4, label=token];
m4_144 -> m4_140  [key=0, style=bold, color=blue];
m4_96 -> m4_97  [key=0, style=solid];
m4_96 -> m4_90  [key=2, style=dotted];
m4_96 -> m4_81  [key=2, style=dotted];
m4_96 -> m4_98  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_78 -> m4_79  [key=0, style=solid];
m4_78 -> m4_46  [key=2, style=dotted];
m4_78 -> m4_11  [key=2, style=dotted];
m4_79 -> m4_75  [key=0, style=bold, color=blue];
m4_131 -> m4_132  [key=0, style=solid];
m4_149 -> m4_150  [key=0, style=solid];
m4_150 -> m4_151  [key=0, style=solid];
m4_150 -> m4_145  [key=2, style=dotted];
m4_150 -> m4_152  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_151 -> m4_152  [key=0, style=solid];
m4_151 -> m4_9  [key=2, style=dotted];
m4_151 -> m4_154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_152 -> m4_153  [key=0, style=solid];
m4_152 -> m4_118  [key=2, style=dotted];
m4_153 -> m4_149  [key=0, style=bold, color=blue];
m4_24 -> m4_25  [key=0, style=solid, color=red];
m4_24 -> m4_42  [key=0, style=solid];
m4_24 -> m4_43  [key=2, style=dotted];
m4_24 -> m4_50  [key=2, style=dotted];
m4_24 -> m4_51  [key=2, style=dotted];
m4_24 -> m4_86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_25 -> m4_26  [key=0, style=solid, color=green];
m4_25 -> m4_27  [key=1, style=dashed, color=red, label=expectedResult];
m4_25 -> m4_52  [key=2, style=dotted];
m4_25 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m4_26 -> m4_27  [key=0, style=solid, color=green];
m4_26 -> m4_9  [key=2, style=dotted];
m4_26 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_26 -> m4_40  [key=1, style=dashed, color=green, label=tokens];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_20  [key=2, style=dotted];
m4_27 -> m4_53  [key=2, style=dotted];
m4_27 -> m4_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_27 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m4_27 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m4_28 -> m4_24  [key=0, style=bold, color=blue];
m4_28 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m4_28 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label=pt];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_54  [key=2, style=dotted];
m4_28 -> m4_55  [key=2, style=dotted];
m4_28 -> m4_93  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_28 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m4_20 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_20 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_44  [key=2, style=dotted];
m4_20 -> m4_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_20 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_20 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_33 -> m4_34  [key=0, style=solid];
m4_33 -> m4_36  [key=0, style=solid];
m4_33 -> m4_61  [key=2, style=dotted];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_36  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_34 -> m4_62  [key=2, style=dotted];
m4_34 -> m4_43  [key=2, style=dotted];
m4_34 -> m4_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_9  [key=2, style=dotted];
m4_35 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_35 -> m4_40  [key=0, style=solid];
m4_35 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=instance];
m4_35 -> m4_35  [key=1, style=dashed, color=darkseagreen4, label=instance];
m4_35 -> m4_63  [key=2, style=dotted];
m4_35 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_35 -> m4_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_35 -> m4_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_35 -> m4_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_35 -> m4_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_35 -> m4_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_20  [key=2, style=dotted];
m4_37 -> m4_33  [key=0, style=bold, color=blue];
m4_37 -> m4_39  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m4_37 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label=p];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_64  [key=2, style=dotted];
m4_37 -> m4_65  [key=2, style=dotted];
m4_232 -> m4_233  [key=0, style=solid];
m4_233 -> m4_234  [key=0, style=solid];
m4_233 -> m4_237  [key=2, style=dotted];
m4_233 -> m4_235  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_234 -> m4_235  [key=0, style=solid];
m4_234 -> m4_9  [key=2, style=dotted];
m4_234 -> m4_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_235 -> m4_236  [key=0, style=solid];
m4_235 -> m4_46  [key=2, style=dotted];
m4_235 -> m4_11  [key=2, style=dotted];
m4_236 -> m4_232  [key=0, style=bold, color=blue];
m4_198 -> m4_199  [key=0, style=solid];
m4_199 -> m4_200  [key=0, style=solid];
m4_199 -> m4_194  [key=2, style=dotted];
m4_199 -> m4_201  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_200 -> m4_201  [key=0, style=solid];
m4_200 -> m4_9  [key=2, style=dotted];
m4_200 -> m4_203  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_201 -> m4_202  [key=0, style=solid];
m4_201 -> m4_118  [key=2, style=dotted];
m4_202 -> m4_198  [key=0, style=bold, color=blue];
m4_189 -> m4_190  [key=0, style=solid];
m4_190 -> m4_191  [key=0, style=solid];
m4_190 -> m4_194  [key=2, style=dotted];
m4_190 -> m4_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_191 -> m4_192  [key=0, style=solid];
m4_191 -> m4_9  [key=2, style=dotted];
m4_191 -> m4_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_192 -> m4_193  [key=0, style=solid];
m4_192 -> m4_118  [key=2, style=dotted];
m4_193 -> m4_189  [key=0, style=bold, color=blue];
m4_179 -> m4_180  [key=0, style=solid];
m4_180 -> m4_181  [key=0, style=solid];
m4_180 -> m4_184  [key=2, style=dotted];
m4_180 -> m4_81  [key=2, style=dotted];
m4_180 -> m4_182  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m4_181 -> m4_182  [key=0, style=solid];
m4_181 -> m4_9  [key=2, style=dotted];
m4_181 -> m4_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_182 -> m4_183  [key=0, style=solid];
m4_182 -> m4_46  [key=2, style=dotted];
m4_182 -> m4_11  [key=2, style=dotted];
m4_183 -> m4_179  [key=0, style=bold, color=blue];
m4_265 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m4_266 -> m4_172  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_266 -> m4_176  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m5_0 -> m5_1  [key=0, style=solid, color=red];
m5_0 -> m5_2  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<string>"];
m5_0 -> m5_3  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m5_1 -> m5_2  [key=0, style=solid, color=red];
m5_2 -> m5_3  [key=0, style=solid, color=red];
m5_3 -> m5_4  [key=0, style=solid, color=red];
m5_4 -> m5_0  [key=0, style=bold, color=blue];
m5_5 -> m5_6  [key=0, style=solid, color=red];
m5_6 -> m5_7  [key=0, style=solid, color=red];
m5_6 -> m5_0  [key=2, style=dotted, color=red];
m5_7 -> m5_5  [key=0, style=bold, color=blue];
m5_8 -> m5_1  [key=1, style=dashed, color=red, label="CommandLine.Core.TokenPartitions"];
m5_8 -> m5_2  [key=1, style=dashed, color=red, label="CommandLine.Core.TokenPartitions"];
m5_8 -> m5_3  [key=1, style=dashed, color=red, label="CommandLine.Core.TokenPartitions"];
}
