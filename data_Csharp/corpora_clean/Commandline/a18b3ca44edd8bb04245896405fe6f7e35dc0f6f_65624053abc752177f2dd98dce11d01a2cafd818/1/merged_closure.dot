digraph  {
n0 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", label="Entry CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="12-12"];
n1 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", label="result.Tag == ResultType.Ok", span="14-14"];
n2 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", label="var ok = (Ok<TSuccess, TMessage>)result", span="16-16"];
n4 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", label="return Enumerable.Empty<TMessage>();", span="19-19"];
n3 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", label="return ok.Value.Messages;", span="17-17"];
n5 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", label="Exit CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="12-12"];
n6 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_50 [cluster="Unk.Protect", file="TypeConverter.cs", label="Entry Unk.Protect", span=""];
m0_95 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="Enum.IsDefined(conversionType, parsedValue)", span="106-106"];
m0_16 [cluster="lambda expression", file="TypeConverter.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27"];
m0_79 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="66-66"];
m0_61 [cluster="lambda expression", file="TypeConverter.cs", label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="52-56"];
m0_3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m0_140 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57"];
m0_9 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
m0_10 [cluster="System.Type.GetGenericArguments()", file="TypeConverter.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_90 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
m0_91 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="object parsedValue", span="97-97"];
m0_53 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();", prediction=0, span="71-73"];
m0_64 [cluster="lambda expression", file="TypeConverter.cs", label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66"];
m0_60 [cluster="lambda expression", file="TypeConverter.cs", label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="50-50"];
m0_58 [cluster="System.Func<TResult>.Invoke()", file="TypeConverter.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_68 [cluster="lambda expression", file="TypeConverter.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="54-56"];
m0_113 [cluster="string.MatchName(string, string, System.StringComparer)", file="TypeConverter.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m0_74 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="61-64"];
m0_101 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="74-74"];
m0_124 [cluster="CSharpx.Maybe<T>.FromJust<T>(System.Exception)", file="TypeConverter.cs", label="Entry CSharpx.Maybe<T>.FromJust<T>(System.Exception)", span="160-160"];
m0_76 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TypeConverter.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m0_13 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="24-24"];
m0_18 [cluster="Unk.ToUntypedArray", file="TypeConverter.cs", label="Entry Unk.ToUntypedArray", span=""];
m0_99 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="74-74"];
m0_70 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8"];
m0_63 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", prediction=0, span="60-64"];
m0_5 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
m0_12 [cluster="T.ToMaybe<T>()", file="TypeConverter.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m0_6 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="22-27"];
m0_4 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36"];
m0_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m0_7 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture))", span="29-29"];
m0_15 [cluster="Unk.Select", file="TypeConverter.cs", label="Entry Unk.Select", span=""];
m0_8 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="31-33"];
m0_17 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="27-27"];
m0_93 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label=ArgumentException, span="102-102"];
m0_100 [cluster="System.FormatException.FormatException()", file="TypeConverter.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m0_104 [cluster="lambda expression", file="TypeConverter.cs", label="System.Type", span=""];
m0_108 [cluster="lambda expression", file="TypeConverter.cs", label=type, span=""];
m0_82 [cluster="lambda expression", file="TypeConverter.cs", label="var ctor = conversionType.GetConstructor(new[] { typeof(string) })", span="80-80"];
m0_86 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="76-87"];
m0_103 [cluster="lambda expression", file="TypeConverter.cs", label=type, span=""];
m0_107 [cluster="lambda expression", file="TypeConverter.cs", label=isFsOption, span=""];
m0_110 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="89-89"];
m0_114 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="96-96"];
m0_142 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="115-115"];
m0_145 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="116-116"];
m0_117 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="99-99"];
m0_121 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="100-100"];
m0_125 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="102-102"];
m0_129 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="103-103"];
m0_132 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="105-107"];
m0_136 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="108-108"];
m0_83 [cluster="lambda expression", file="TypeConverter.cs", label="return ctor.Invoke(new object[] { input });", span="81-81"];
m0_84 [cluster="lambda expression", file="TypeConverter.cs", label=Exception, span="83-83"];
m0_88 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TypeConverter.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m0_92 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="parsedValue = Enum.Parse(conversionType, value)", span="100-100"];
m0_94 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="throw new FormatException();", span="104-104"];
m0_96 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="return parsedValue;", span="108-108"];
m0_97 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="throw new FormatException();", span="110-110"];
m0_98 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
m0_105 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="79-79"];
m0_109 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="85-85"];
m0_112 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="89-89"];
m0_115 [cluster="lambda expression", file="TypeConverter.cs", label="f()", span="96-96"];
m0_116 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="96-96"];
m0_118 [cluster="lambda expression", file="TypeConverter.cs", label="sp.Value.IsJust()", span="99-99"];
m0_119 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="99-99"];
m0_122 [cluster="lambda expression", file="TypeConverter.cs", label="sp.Value.FromJust()", span="100-100"];
m0_123 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="100-100"];
m0_126 [cluster="lambda expression", file="TypeConverter.cs", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="102-102"];
m0_127 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="102-102"];
m0_130 [cluster="lambda expression", file="TypeConverter.cs", label="sp.Specification.DefaultValue.FromJust()", span="103-103"];
m0_131 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="103-103"];
m0_133 [cluster="lambda expression", file="TypeConverter.cs", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="105-107"];
m0_134 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="105-107"];
m0_137 [cluster="lambda expression", file="TypeConverter.cs", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="108-108"];
m0_138 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="108-108"];
m0_143 [cluster="lambda expression", file="TypeConverter.cs", label=v, span="115-115"];
m0_144 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="115-115"];
m0_146 [cluster="lambda expression", file="TypeConverter.cs", label=d, span="116-116"];
m0_147 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="116-116"];
m0_38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="97-108"];
m0_40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="113-117"];
m0_41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="instance = (T)ctor.Invoke(values)", prediction=0, span="118-118"];
m0_42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="121-122"];
m0_52 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", color=green, community=0, file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", prediction=0, span="0-0"];
m0_73 [cluster="System.Type.CreateDefaultForImmutable()", color=green, community=0, file="TypeConverter.cs", label="Entry System.Type.CreateDefaultForImmutable()", prediction=0, span="125-125"];
m0_65 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_51 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="TypeConverter.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m0_62 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TypeConverter.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
m0_72 [cluster="string.ToLower()", file="TypeConverter.cs", label="Entry string.ToLower()", span="0-0"];
m0_54 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="12-12"];
m0_39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="112-112"];
m0_66 [cluster="System.Type.IsMutable()", file="TypeConverter.cs", label="Entry System.Type.IsMutable()", span="115-115"];
m0_59 [cluster="CommandLine.Core.Specification.IsOption()", file="TypeConverter.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m0_78 [cluster="Unk.Concat", file="TypeConverter.cs", label="Entry Unk.Concat", span=""];
m0_81 [cluster="CommandLine.Parsed<T>.Parsed(T)", file="TypeConverter.cs", label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72"];
m0_67 [cluster="System.Activator.CreateInstance<T>()", file="TypeConverter.cs", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
m0_69 [cluster="Unk.ToArray", file="TypeConverter.cs", label="Entry Unk.ToArray", span=""];
m0_77 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
m0_85 [cluster="object.GetType()", file="TypeConverter.cs", label="Entry object.GetType()", span="0-0"];
m0_21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var specs = from pt in specProps select pt.Specification", span="47-47"];
m0_29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var tokens = tokenizerResult.Value", span="70-70"];
m0_0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
m0_1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture);", span="15-17"];
m0_2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
m0_75 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TypeConverter.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m0_49 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="TypeConverter.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m0_48 [cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TypeConverter.cs", label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126"];
m0_37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="96-96"];
m0_139 [cluster="System.Type.GetGenericArguments()", file="TypeConverter.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_135 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="TypeConverter.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29"];
m0_80 [cluster="NotParsed<T>.cstr", file="TypeConverter.cs", label="Entry NotParsed<T>.cstr", span=""];
m0_55 [cluster="string.IsBooleanString()", file="TypeConverter.cs", label="Entry string.IsBooleanString()", span="60-60"];
m0_71 [cluster="System.Reflection.MethodBase.GetParameters()", file="TypeConverter.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m0_14 [cluster="Unk.FromJust", file="TypeConverter.cs", label="Entry Unk.FromJust", span=""];
m0_57 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="TypeConverter.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m0_141 [cluster="System.Type.CreateEmptyArray()", file="TypeConverter.cs", label="Entry System.Type.CreateEmptyArray()", span="101-101"];
m0_36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="typeInfo.IsMutable()", span="94-94"];
m0_56 [cluster="System.Func<TResult>.Invoke()", file="TypeConverter.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_89 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
m0_19 [cluster="CSharpx.Maybe.Just<T>(T)", file="TypeConverter.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m0_24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="arguments.Any()", span="59-59"];
m0_25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61"];
m0_32 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="result.Match(_ => { }, e => e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", prediction=5, span="39-40"];
m0_22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51"];
m0_26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="preprocessorErrors.Any()", span="62-62"];
m0_43 [cluster="Unk.RethrowWhenAbsentIn", file="TypeConverter.cs", label="Entry Unk.RethrowWhenAbsentIn", span=""];
m0_34 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36"];
m0_35 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
m0_45 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="Func<string, object> makeType = input =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { input });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", prediction=6, span="76-87"];
m0_46 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="return Either.Protect(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType, value);", prediction=0, span="89-92"];
m0_44 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="Func<string, object> changeType = input =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                };\r\n\r\n                return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();\r\n            }", prediction=0, span="46-74"];
m0_47 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
m0_128 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="TypeConverter.cs", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="170-170"];
m0_106 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label=string, span=""];
m0_102 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeConverter.cs", label="System.Globalization.CultureInfo", span=""];
m0_120 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="TypeConverter.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="175-175"];
m0_148 [file="TypeConverter.cs", label="System.StringComparer", span=""];
m0_149 [file="TypeConverter.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m0_150 [file="TypeConverter.cs", label="CSharpx.Maybe<System.Func<T>>", span=""];
m0_151 [file="TypeConverter.cs", label=specProps, span=""];
m0_152 [file="TypeConverter.cs", label="System.StringComparer", span=""];
m0_153 [file="TypeConverter.cs", label=optionSpecs, span=""];
m0_154 [file="TypeConverter.cs", label="System.Globalization.CultureInfo", span=""];
m0_155 [file="TypeConverter.cs", label=token, span=""];
m0_3 -> m0_93  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m0_3 -> m0_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_3 -> m0_100  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_104  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_32  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_108  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_90 -> m0_95  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_60 -> m0_63  [color=green, key=1, label=isFsOption, style=dashed];
m0_60 -> m0_73  [color=green, key=1, label=isFsOption, style=dashed];
m0_60 -> m0_68  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_60 -> m0_78  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_63 -> m0_65  [color=green, key=1, label=withValue, style=dashed];
m0_5 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_8  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_7 -> m0_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_93 -> m0_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_93 -> m0_93  [color=darkseagreen4, key=1, label=p, style=dashed];
m0_104 -> m0_52  [color=green, key=1, label="System.Type", style=dashed];
m0_104 -> m0_53  [color=green, key=1, label="System.Type", style=dashed];
m0_104 -> m0_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_104 -> m0_68  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_104 -> m0_62  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_108 -> m0_73  [color=green, key=1, label=type, style=dashed];
m0_108 -> m0_78  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_107 -> m0_73  [color=green, key=1, label=isFsOption, style=dashed];
m0_107 -> m0_68  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_107 -> m0_78  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_92 -> m0_96  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
m0_38 -> m0_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_121  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_46  [color=darkseagreen4, key=1, label=instance, style=dashed];
m0_40 -> m0_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_40 -> m0_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_41 -> m0_46  [color=darkseagreen4, key=1, label=instance, style=dashed];
m0_51 -> m0_63  [color=green, key=1, label=string, style=dashed];
m0_51 -> m0_73  [color=green, key=1, label=string, style=dashed];
m0_51 -> m0_53  [color=green, key=1, label=string, style=dashed];
m0_51 -> m0_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_62 -> m0_73  [color=green, key=1, label=type, style=dashed];
m0_62 -> m0_78  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_81 -> m0_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_0 -> m0_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_37 -> m0_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_19 -> m0_36  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
m0_32 -> m0_32  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_32 -> m0_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_32 -> m0_34  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
m0_32 -> m0_43  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
m0_22 -> m0_100  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_35 -> m0_52  [color=green, key=1, label="System.Type", style=dashed];
m0_35 -> m0_63  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_35 -> m0_73  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_35 -> m0_53  [color=green, key=1, label="System.Type", style=dashed];
m0_35 -> m0_46  [color=green, key=1, label=string, style=dashed];
m0_35 -> m0_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_68  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_62  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_45 -> m0_83  [color=green, key=1, label=string, style=dashed];
m0_44 -> m0_52  [color=green, key=1, label=string, style=dashed];
m0_44 -> m0_63  [color=green, key=1, label=string, style=dashed];
m0_44 -> m0_73  [color=green, key=1, label=string, style=dashed];
m0_44 -> m0_65  [color=green, key=1, label=string, style=dashed];
m0_44 -> m0_53  [color=green, key=1, label=string, style=dashed];
m0_106 -> m0_63  [color=green, key=1, label=string, style=dashed];
m0_106 -> m0_73  [color=green, key=1, label=string, style=dashed];
m0_106 -> m0_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_148 -> m0_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_148 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_148 -> m0_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_148 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_149 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_149 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_150 -> m0_93  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m0_151 -> m0_93  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m0_152 -> m0_100  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_153 -> m0_100  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_154 -> m0_104  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_154 -> m0_108  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_154 -> m0_52  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_154 -> m0_63  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_154 -> m0_73  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
}
