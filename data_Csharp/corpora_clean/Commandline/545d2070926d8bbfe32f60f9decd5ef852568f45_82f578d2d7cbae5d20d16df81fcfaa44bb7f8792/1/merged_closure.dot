digraph  {
n12 [label="CommandLine.Tests.ArgumentParserFixture", span=""];
n0 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="Entry CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40"];
n1 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="var ae = new StringArrayEnumerator(new string[] { ''--optarr'', ''one'', ''two'', ''--plain'', ''3'' })", span="42-42"];
n2 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="ae.MoveNext()", span="44-44"];
n7 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", label="Entry CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", span="1335-1335"];
n3 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="var items = ArgumentParser.PublicWrapperOfGetNextInputValues(ae)", span="46-46"];
n8 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", label="Entry CommandLine.StringArrayEnumerator.MoveNext()", span="1390-1390"];
n9 [cluster="Unk.PublicWrapperOfGetNextInputValues", label="Entry Unk.PublicWrapperOfGetNextInputValues", span=""];
n10 [cluster="Unk.AssertArrayItemEqual", label="Entry Unk.AssertArrayItemEqual", span=""];
n6 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="Exit CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40"];
n11 [cluster="Unk.AreEqual", label="Entry Unk.AreEqual", span=""];
d5 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", color=green, community=0, label="Assert.AreEqual(''two'', ae.Current)", prediction=0, span="48-48"];
d4 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'' }, items)", span="47-47"];
d10 [cluster="Unk.ElementsShouldBeEqual", label="Entry Unk.ElementsShouldBeEqual", span=""];
m0_0 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", span="39-39"];
m0_1 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", color=green, community=0, file="BaseFixture.cs", label="expected.Length.Should().Equal(actual.Length)", prediction=1, span="41-41"];
m0_3 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="i < expected.Length", span="42-42"];
m0_4 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", color=green, community=0, file="BaseFixture.cs", label="expected[i].Should().Equal(actual[i])", prediction=2, span="44-44"];
m0_2 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="int i = 0", span="42-42"];
m0_5 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="i++", span="42-42"];
m0_6 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs", label="Exit CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", span="39-39"];
m0_8 [cluster="Unk.Equal", file="BaseFixture.cs", label="Entry Unk.Equal", span=""];
m0_11 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs", label="int i = 0", span="51-51"];
m0_10 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=green, community=0, file="BaseFixture.cs", label="expected.Length.Should().Equal(actual.Count)", prediction=3, span="50-50"];
m0_13 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=green, community=0, file="BaseFixture.cs", label="expected[i].Should().Equal(actual[i])", prediction=3, span="53-53"];
m0_14 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs", label="i++", span="51-51"];
m0_7 [cluster="Unk.Should", file="BaseFixture.cs", label="Entry Unk.Should", span=""];
m0_15 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs", label="Exit CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48"];
m1_14 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", color=green, community=0, file="CommandLineParserBaseFixture.cs", label="Exit CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", prediction=5, span="63-63"];
m1_15 [cluster="Unk.IsFalse", file="CommandLineParserBaseFixture.cs", label="Entry Unk.IsFalse", span=""];
m1_16 [cluster="Unk.False", file="CommandLineParserBaseFixture.cs", label="Entry Unk.False", span=""];
m1_4 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", span="53-53"];
m1_6 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", file="CommandLineParserBaseFixture.cs", label="Exit CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", span="53-53"];
m1_0 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", span="42-42"];
m1_1 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", file="CommandLineParserBaseFixture.cs", label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''en-US'')", span="48-48"];
m1_2 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", file="CommandLineParserBaseFixture.cs", label="Exit CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", span="42-42"];
m1_7 [cluster="CommandLine.CommandLineParser.CommandLineParser()", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser()", span="1681-1681"];
m1_12 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m1_11 [cluster="Unk.Should", file="CommandLineParserBaseFixture.cs", label="Entry Unk.Should", span=""];
m1_3 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="CommandLineParserBaseFixture.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m1_8 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="CommandLineParserBaseFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m1_10 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="CommandLineParserBaseFixture.cs", label="Exit CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m1_17 [file="CommandLineParserBaseFixture.cs", label="CommandLine.Tests.CommandLineParserBaseFixture", span=""];
m2_10 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", span="63-63"];
m2_11 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", color=green, community=0, file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", prediction=6, span="65-65"];
m2_15 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="70-70"];
m2_13 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="68-68"];
m2_16 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", span="63-63"];
m2_176 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", span="302-302"];
m2_177 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="304-304"];
m2_178 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--int'' }, options)", prediction=8, span="305-305"];
m2_179 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="307-307"];
m2_180 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", span="302-302"];
m2_260 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", span="445-445"];
m2_261 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="447-447"];
m2_262 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-b'', short.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", prediction=10, span="448-448"];
m2_263 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="450-450"];
m2_264 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", span="445-445"];
m2_242 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", span="413-413"];
m2_243 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="415-415"];
m2_244 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-d-4096.1024'' }, options)", prediction=12, span="416-416"];
m2_246 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096.1024, options.DoubleValue)", prediction=13, span="419-419"];
m2_245 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="418-418"];
m2_247 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", span="413-413"];
m2_284 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", span="481-481"];
m2_285 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="483-483"];
m2_286 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-f'', double.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", prediction=15, span="484-484"];
m2_287 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="486-486"];
m2_288 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", span="481-481"];
m2_0 [cluster="CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", span="44-44"];
m2_1 [cluster="CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", span="44-44"];
m2_123 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithBadDefaults.SimpleOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithBadDefaults.SimpleOptionsWithBadDefaults()", span="33-33"];
m2_80 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", span="38-38"];
m2_118 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithDefaultArray.SimpleOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithDefaultArray.SimpleOptionsWithDefaultArray()", span="35-35"];
m2_254 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", span="433-433"];
m2_255 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="435-435"];
m2_256 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--double=-4096.1024'' }, options)", prediction=17, span="436-436"];
m2_258 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096.1024, options.DoubleValue)", prediction=18, span="439-439"];
m2_257 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="438-438"];
m2_259 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", span="433-433"];
m2_90 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="CommandLineParserFixture.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m2_283 [cluster="float.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry float.ToString(System.IFormatProvider)", span="0-0"];
m2_248 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", span="423-423"];
m2_249 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="425-425"];
m2_250 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--double'', ''-4096.1024'' }, options)", prediction=20, span="426-426"];
m2_252 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096.1024, options.DoubleValue)", prediction=21, span="429-429"];
m2_251 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="428-428"];
m2_253 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", span="423-423"];
m2_91 [cluster="CommandLine.Tests.Mocks.NumberSetOptions.NumberSetOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.NumberSetOptions.NumberSetOptions()", span="35-35"];
m2_7 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", span="57-57"];
m2_8 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", file="CommandLineParserFixture.cs", label="base.Parser.ParseArguments(new string[] { }, null)", span="59-59"];
m2_9 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", span="57-57"];
m2_72 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", span="145-145"];
m2_73 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithEnum()", span="147-147"];
m2_74 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-s'', ''data.bin'', ''-a'', ''ReadWrite'' }, options)", prediction=23, span="149-149"];
m2_76 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''data.bin'', options.StringValue)", prediction=24, span="152-152"];
m2_77 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(FileAccess.ReadWrite, options.FileAccess)", prediction=24, span="153-153"];
m2_78 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="154-154"];
m2_75 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="151-151"];
m2_79 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", span="145-145"];
m2_17 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", span="58-58"];
m2_129 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m2_160 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", file="CommandLineParserFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", span="1553-1553"];
m2_224 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", span="383-383"];
m2_225 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="385-385"];
m2_226 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--int'', ''-4096'' }, options)", prediction=27, span="386-386"];
m2_228 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096, options.IntegerValue)", prediction=28, span="389-389"];
m2_227 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="388-388"];
m2_229 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", span="383-383"];
m2_161 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", span="275-275"];
m2_162 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="277-277"];
m2_163 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--string'' }, options)", prediction=30, span="278-278"];
m2_164 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="280-280"];
m2_165 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", span="275-275"];
m2_29 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", span="88-88"];
m2_30 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="var options = new BooleanSetOptions()", prediction=32, span="90-90"];
m2_33 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.IsTrue(options.BooleanThree)", prediction=32, span="94-94"];
m2_34 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.IsTrue(options.BooleanOne)", prediction=32, span="95-95"];
m2_35 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.IsFalse(options.BooleanTwo)", prediction=32, span="96-96"];
m2_37 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="98-98"];
m2_32 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="93-93"];
m2_38 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", span="88-88"];
m2_67 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", span="135-135"];
m2_68 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="137-137"];
m2_69 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.IsFalse(base.Parser.ParseArguments(new string[] { ''-i=10'' }, options))", prediction=7, span="139-139"];
m2_70 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="140-140"];
m2_71 [cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", span="135-135"];
m2_278 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", span="472-472"];
m2_279 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="474-474"];
m2_280 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-l'', float.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", prediction=38, span="475-475"];
m2_281 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="477-477"];
m2_282 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", span="472-472"];
m2_52 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", span="116-116"];
m2_53 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=green, community=0, file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithOptionList()", prediction=40, span="118-118"];
m2_57 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=green, community=0, file="CommandLineParserFixture.cs", label="Console.WriteLine(options.SearchKeywords[0])", prediction=40, span="124-124"];
m2_59 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=green, community=0, file="CommandLineParserFixture.cs", label="Console.WriteLine(options.SearchKeywords[1])", prediction=40, span="126-126"];
m2_61 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=green, community=0, file="CommandLineParserFixture.cs", label="Console.WriteLine(options.SearchKeywords[2])", prediction=40, span="128-128"];
m2_63 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options.StringValue)", span="130-130"];
m2_55 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="122-122"];
m2_64 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", span="116-116"];
m2_191 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", span="329-329"];
m2_192 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="331-331"];
m2_193 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--double'' }, options)", prediction=45, span="332-332"];
m2_194 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="334-334"];
m2_195 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", span="329-329"];
m2_6 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="CommandLineParserFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m2_151 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", span="261-261"];
m2_152 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="ICommandLineParser local = new CommandLineParser(new CommandLineParserSettings(false))", span="263-263"];
m2_153 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="var options = new MixedCaseOptions()", span="264-264"];
m2_154 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = local.ParseArguments(new string[] { ''-A'', ''alfa'', ''--Beta-Option'', ''beta'' }, options)", prediction=47, span="265-265"];
m2_156 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''alfa'', options.AlfaValue)", prediction=48, span="268-268"];
m2_157 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''beta'', options.BetaValue)", prediction=48, span="269-269"];
m2_155 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="267-267"];
m2_158 [cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", span="261-261"];
m2_218 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", span="374-374"];
m2_219 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="376-376"];
m2_220 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-i-4096'' }, options)", prediction=51, span="377-377"];
m2_222 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096, options.IntegerValue)", prediction=52, span="380-380"];
m2_221 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="379-379"];
m2_223 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", span="374-374"];
m2_19 [cluster="System.Console.WriteLine(object)", file="CommandLineParserFixture.cs", label="Entry System.Console.WriteLine(object)", span="0-0"];
m2_39 [cluster="CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", span="35-35"];
m2_65 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithOptionList.SimpleOptionsWithOptionList()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithOptionList.SimpleOptionsWithOptionList()", span="35-35"];
m2_135 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", span="239-239"];
m2_136 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="ICommandLineParser local = new CommandLineParser()", span="241-241"];
m2_137 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="var options = new MixedCaseOptions()", span="242-242"];
m2_138 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = local.ParseArguments(new string[] { ''-a'', ''alfa'', ''--beta-OPTION'', ''beta'' }, options)", prediction=54, span="243-243"];
m2_140 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''alfa'', options.AlfaValue)", prediction=55, span="246-246"];
m2_141 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''beta'', options.BetaValue)", prediction=55, span="247-247"];
m2_139 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="245-245"];
m2_142 [cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", span="239-239"];
m2_81 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", span="158-158"];
m2_82 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="var actualCulture = Thread.CurrentThread.CurrentCulture", span="160-160"];
m2_83 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''it-IT'')", span="161-161"];
m2_88 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="Thread.CurrentThread.CurrentCulture = actualCulture", span="168-168"];
m2_84 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="162-162"];
m2_85 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-d'', ''10,986'' }, options)", prediction=58, span="163-163"];
m2_87 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(10.986, options.DoubleValue)", prediction=59, span="166-166"];
m2_86 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="165-165"];
m2_89 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", span="158-158"];
m2_130 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", span="228-228"];
m2_131 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="230-230"];
m2_132 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--extend'' }, options)", prediction=61, span="231-231"];
m2_133 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="233-233"];
m2_134 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", span="228-228"];
m2_20 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", span="74-74"];
m2_21 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", prediction=63, span="76-76"];
m2_24 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''another string'', options.StringValue)", prediction=63, span="81-81"];
m2_25 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(100, options.IntegerValue)", prediction=63, span="82-82"];
m2_27 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="84-84"];
m2_23 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="80-80"];
m2_28 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", span="74-74"];
m2_202 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", span="350-350"];
m2_203 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithValueList()", span="352-352"];
m2_204 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-sparser.xml'', ''-'', ''--switch'' }, options)", prediction=67, span="353-353"];
m2_206 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''parser.xml'', options.StringValue)", prediction=68, span="356-356"];
m2_207 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(true, options.BooleanValue)", prediction=68, span="357-357"];
m2_208 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(1, options.Items.Count)", prediction=68, span="358-358"];
m2_209 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''-'', options.Items[0])", prediction=68, span="359-359"];
m2_205 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="355-355"];
m2_210 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", span="350-350"];
m2_143 [cluster="CommandLine.CommandLineParser.CommandLineParser()", file="CommandLineParserFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser()", span="1681-1681"];
m2_41 [cluster="Unk.IsFalse", file="CommandLineParserFixture.cs", label="Entry Unk.IsFalse", span=""];
m2_145 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", span="251-251"];
m2_146 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs", label="ICommandLineParser local = new CommandLineParser()", span="253-253"];
m2_147 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs", label="var options = new MixedCaseOptions()", span="254-254"];
m2_148 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = local.ParseArguments(new string[] { ''-A'', ''alfa'', ''--Beta-Option'', ''beta'' }, options)", prediction=73, span="255-255"];
m2_149 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="257-257"];
m2_150 [cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", span="251-251"];
m2_159 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="CommandLineParserFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692"];
m2_2 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", span="50-50"];
m2_3 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", file="CommandLineParserFixture.cs", label="base.Parser.ParseArguments(null, new SimpleOptions())", span="52-52"];
m2_4 [cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", span="50-50"];
m2_119 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", span="211-211"];
m2_120 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithBadDefaults()", span="213-213"];
m2_121 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="base.Parser.ParseArguments(new string[] {}, options)", span="214-214"];
m2_122 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", span="211-211"];
m2_211 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", span="35-35"];
m2_109 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithDefaults.SimpleOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithDefaults.SimpleOptionsWithDefaults()", span="33-33"];
m2_196 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", span="340-340"];
m2_197 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="342-342"];
m2_198 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--string'', ''-'' }, options)", prediction=75, span="343-343"];
m2_200 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''-'', options.StringValue)", prediction=76, span="346-346"];
m2_199 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="345-345"];
m2_201 [cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", span="340-340"];
m2_5 [cluster="CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", span="33-33"];
m2_212 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", span="365-365"];
m2_213 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="367-367"];
m2_214 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-i'', ''-4096'' }, options)", prediction=78, span="368-368"];
m2_216 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096, options.IntegerValue)", prediction=79, span="371-371"];
m2_215 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="370-370"];
m2_217 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", span="365-365"];
m2_266 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", span="454-454"];
m2_267 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="456-456"];
m2_268 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-s'', int.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", prediction=81, span="457-457"];
m2_269 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="459-459"];
m2_270 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", span="454-454"];
m2_230 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", span="392-392"];
m2_231 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="394-394"];
m2_232 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--int=-4096'' }, options)", prediction=83, span="395-395"];
m2_234 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096, options.IntegerValue)", prediction=84, span="398-398"];
m2_233 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="397-397"];
m2_235 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", span="392-392"];
m2_66 [cluster="System.Console.WriteLine(string)", file="CommandLineParserFixture.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m2_42 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", span="102-102"];
m2_43 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="var options = new BooleanSetOptions()", prediction=86, span="104-104"];
m2_46 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.IsTrue(options.BooleanTwo)", prediction=86, span="108-108"];
m2_47 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.IsFalse(options.BooleanOne)", prediction=86, span="109-109"];
m2_48 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.IsFalse(options.BooleanThree)", prediction=86, span="110-110"];
m2_50 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Console.WriteLine(options)", span="112-112"];
m2_45 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="107-107"];
m2_51 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", span="102-102"];
m2_166 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", span="284-284"];
m2_167 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="286-286"];
m2_168 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--byte'' }, options)", prediction=91, span="287-287"];
m2_169 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="289-289"];
m2_170 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", span="284-284"];
m2_181 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", span="311-311"];
m2_182 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="313-313"];
m2_183 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--long'' }, options)", prediction=93, span="314-314"];
m2_184 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="316-316"];
m2_185 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", span="311-311"];
m2_144 [cluster="CommandLine.Tests.Mocks.MixedCaseOptions.MixedCaseOptions()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.Mocks.MixedCaseOptions.MixedCaseOptions()", span="33-33"];
m2_236 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", span="403-403"];
m2_237 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="405-405"];
m2_238 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-d'', ''-4096.1024'' }, options)", prediction=95, span="406-406"];
m2_240 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(-4096.1024, options.DoubleValue)", prediction=96, span="409-409"];
m2_239 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="408-408"];
m2_241 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", span="403-403"];
m2_289 [cluster="double.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry double.ToString(System.IFormatProvider)", span="0-0"];
m2_110 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", span="198-198"];
m2_111 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithDefaultArray()", span="200-200"];
m2_112 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-y'', ''4'', ''5'', ''6'' }, options)", prediction=98, span="201-201"];
m2_114 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(new string[] { ''a'', ''b'', ''c'' }, options.StringArrayValue)", prediction=99, span="204-204"];
m2_115 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(new int[] { 4, 5, 6 }, options.IntegerArrayValue)", prediction=99, span="205-205"];
m2_116 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(new double[] { 1.1, 2.2, 3.3 }, options.DoubleArrayValue)", prediction=99, span="206-206"];
m2_113 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="203-203"];
m2_117 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", span="198-198"];
m2_272 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", span="463-463"];
m2_273 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="465-465"];
m2_274 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-i'', long.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", prediction=103, span="466-466"];
m2_275 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="468-468"];
m2_276 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", span="463-463"];
m2_265 [cluster="short.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry short.ToString(System.IFormatProvider)", span="0-0"];
m2_92 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", span="172-172"];
m2_93 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="var actualCulture = Thread.CurrentThread.CurrentCulture", span="174-174"];
m2_94 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''it-IT'')", span="175-175"];
m2_99 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="Thread.CurrentThread.CurrentCulture = actualCulture", span="182-182"];
m2_95 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="176-176"];
m2_96 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--n-double'', ''12,32982'' }, options)", prediction=105, span="177-177"];
m2_98 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(12.32982, options.NullableDoubleValue)", prediction=106, span="180-180"];
m2_97 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="179-179"];
m2_100 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", span="172-172"];
m2_271 [cluster="int.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m2_186 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", span="320-320"];
m2_187 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="322-322"];
m2_188 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--float'' }, options)", prediction=108, span="323-323"];
m2_189 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="325-325"];
m2_190 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", span="320-320"];
m2_101 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", span="186-186"];
m2_102 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptionsWithDefaults()", span="188-188"];
m2_103 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {}, options)", prediction=110, span="189-189"];
m2_105 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(''str'', options.StringValue)", prediction=111, span="192-192"];
m2_106 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(9, options.IntegerValue)", prediction=111, span="193-193"];
m2_107 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs", label="Assert.AreEqual(true, options.BooleanValue)", prediction=111, span="194-194"];
m2_104 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeTrue()", prediction=7, span="191-191"];
m2_108 [cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", span="186-186"];
m2_277 [cluster="long.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs", label="Entry long.ToString(System.IFormatProvider)", span="0-0"];
m2_124 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", span="219-219"];
m2_125 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="var options = new SimpleOptions()", span="221-221"];
m2_126 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''-x'' }, options)", prediction=115, span="222-222"];
m2_127 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="224-224"];
m2_128 [cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", span="219-219"];
m2_171 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", span="293-293"];
m2_172 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="var options = new NumberSetOptions()", span="295-295"];
m2_173 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="Result = base.Parser.ParseArguments(new string[] { ''--short'' }, options)", prediction=117, span="296-296"];
m2_174 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs", label="ResultShouldBeFalse()", prediction=7, span="298-298"];
m2_175 [cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", file="CommandLineParserFixture.cs", label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", span="293-293"];
m2_40 [cluster="Unk.IsTrue", file="CommandLineParserFixture.cs", label="Entry Unk.IsTrue", span=""];
m2_290 [file="CommandLineParserFixture.cs", label="CommandLine.Tests.CommandLineParserFixture", span=""];
m3_12 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="CommandLineParserSettingsFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m3_0 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs", label="Entry CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", span="40-40"];
m3_1 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs", label="var writer = new StringWriter()", span="42-42"];
m3_2 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs", label="ICommandLineParser parser = new CommandLineParser(new CommandLineParserSettings(writer))", span="43-43"];
m3_6 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", color=green, community=0, file="CommandLineParserSettingsFixture.cs", label="Assert.AreEqual(''MockOptions::GetUsage()'', writer.ToString())", prediction=119, span="49-49"];
m3_3 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs", label="var options = new SimpleOptionsWithHelpOption()", span="44-44"];
m3_4 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs", label="bool success = parser.ParseArguments(new string[] {''--help''}, options)", span="46-46"];
m3_7 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs", label="Exit CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", span="40-40"];
m3_11 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithHelpOption.SimpleOptionsWithHelpOption()", file="CommandLineParserSettingsFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithHelpOption.SimpleOptionsWithHelpOption()", span="33-33"];
m3_14 [cluster="System.IO.StringWriter.ToString()", file="CommandLineParserSettingsFixture.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m3_8 [cluster="System.IO.StringWriter.StringWriter()", file="CommandLineParserSettingsFixture.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m3_34 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", file="CommandLineParserSettingsFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1486-1486"];
m3_9 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="CommandLineParserSettingsFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692"];
m3_25 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", file="CommandLineParserSettingsFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1543-1543"];
m3_26 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs", label="Entry CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", span="68-68"];
m3_27 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs", label="var writer = new StringWriter()", span="70-70"];
m3_28 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs", label="ICommandLineParser parser = new CommandLineParser(new CommandLineParserSettings())", span="71-71"];
m3_30 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs", label="bool success = parser.ParseArguments(new string[] { ''--help'' }, options, writer)", span="74-74"];
m3_32 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", color=green, community=0, file="CommandLineParserSettingsFixture.cs", label="Assert.AreEqual(''MockOptions::GetUsage()'', writer.ToString())", prediction=120, span="77-77"];
m3_29 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs", label="var options = new SimpleOptionsWithHelpOption()", span="72-72"];
m3_33 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs", label="Exit CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", span="68-68"];
m3_10 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", file="CommandLineParserSettingsFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", span="1564-1564"];
m3_15 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs", label="Entry CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", span="53-53"];
m3_16 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs", label="var writer = new StringWriter()", span="55-55"];
m3_17 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs", label="var settings = new CommandLineParserSettings()", span="56-56"];
m3_18 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs", label="settings.HelpWriter = writer", span="57-57"];
m3_23 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", color=green, community=0, file="CommandLineParserSettingsFixture.cs", label="Assert.AreEqual(''MockOptions::GetUsage()'', writer.ToString())", prediction=121, span="64-64"];
m3_19 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs", label="ICommandLineParser parser = new CommandLineParser(settings)", span="58-58"];
m3_20 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs", label="var options = new SimpleOptionsWithHelpOption()", span="59-59"];
m3_21 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs", label="bool success = parser.ParseArguments(new string[] { ''--help'' }, options)", span="61-61"];
m3_24 [cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs", label="Exit CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", span="53-53"];
m4_13 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="CopyrightInfoFixture.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m4_2 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", span="53-53"];
m4_3 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="var yearsPart = new StringBuilder(years.Length * 4)", span="55-55"];
m4_4 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label=years, span="57-57"];
m4_7 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="yearsPart.Append(string.Concat(''''', y))", span="61-61"];
m4_8 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="yearsPart.Append(y)", span="63-63"];
m4_9 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="yearsPart.Append('', '')", span="64-64"];
m4_10 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="yearsPart.Remove(yearsPart.Length - 2, 2)", span="66-66"];
m4_11 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="return yearsPart.ToString();", span="68-68"];
m4_5 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="string y = year.ToString(CultureInfo.InvariantCulture)", span="59-59"];
m4_6 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="y.Length == 2", span="60-60"];
m4_12 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", span="53-53"];
m4_43 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", span="114-114"];
m4_44 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", file="CopyrightInfoFixture.cs", label="new CopyrightInfo(''Authors, Inc.'')", span="116-116"];
m4_45 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", span="114-114"];
m4_26 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", span="82-82"];
m4_27 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs", label="var copyright = new CopyrightInfo(true, ''X & Y Group'', 2006, 2007)", span="84-84"];
m4_29 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", span="82-82"];
m4_0 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", span="43-43"];
m4_1 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", span="43-43"];
m4_15 [cluster="string.Concat(string, string)", file="CopyrightInfoFixture.cs", label="Entry string.Concat(string, string)", span="0-0"];
m4_46 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", span="120-120"];
m4_47 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs", label="var info = new CopyleftInfo(true, ''Free Company, Inc.'', 96, 97, 98, 2005)", span="122-122"];
m4_49 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", span="120-120"];
m4_50 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", span="129-129"];
m4_51 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs", label="var info = new CopyrightInfo (''ManOnTheMoon, Inc.'', 2019)", span="131-131"];
m4_52 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs", label="int i=0", span="133-133"];
m4_53 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs", label="i<10", span="133-133"];
m4_55 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs", label="i++", span="133-133"];
m4_56 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", span="129-129"];
m4_34 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="179-179"];
m4_30 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", span="90-90"];
m4_31 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs", label="var copyright = new CopyrightInfo(''W & Z, Inc.'', 2005, 2007)", span="92-92"];
m4_33 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", span="90-90"];
m4_17 [cluster="System.Text.StringBuilder.Remove(int, int)", file="CopyrightInfoFixture.cs", label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0"];
m4_23 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="193-193"];
m4_42 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="166-166"];
m4_35 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", span="98-98"];
m4_36 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs", label="var copyright = new CopyrightInfo(''CommandLine, Ltd'', 1999, 2003, 2004, 2007)", span="100-100"];
m4_38 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", span="98-98"];
m4_24 [cluster="CommandLine.Text.CopyrightInfo.ToString()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.ToString()", span="209-209"];
m4_18 [cluster="System.Text.StringBuilder.ToString()", file="CopyrightInfoFixture.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m4_16 [cluster="System.Text.StringBuilder.Append(string)", file="CopyrightInfoFixture.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m4_14 [cluster="int.ToString(System.IFormatProvider)", file="CopyrightInfoFixture.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m4_19 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", span="74-74"];
m4_20 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs", label="var copyright = new CopyrightInfo(false, ''Authors, Inc.'', 2007)", span="76-76"];
m4_22 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", span="74-74"];
m4_39 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", file="CopyrightInfoFixture.cs", label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", span="107-107"];
m4_40 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", file="CopyrightInfoFixture.cs", label="new CopyrightInfo(null, 2000)", span="109-109"];
m4_41 [cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", file="CopyrightInfoFixture.cs", label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", span="107-107"];
m5_20 [cluster="CommandLine.IArgumentEnumerator.MoveNext()", file="EnumeratorsFixture.cs", label="Entry CommandLine.IArgumentEnumerator.MoveNext()", span="532-532"];
m5_23 [cluster="Unk.IsNull", file="EnumeratorsFixture.cs", label="Entry Unk.IsNull", span=""];
m5_46 [cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", file="EnumeratorsFixture.cs", label="Entry CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", span="628-628"];
m5_22 [cluster="Unk.IsFalse", file="EnumeratorsFixture.cs", label="Entry Unk.IsFalse", span=""];
m5_21 [cluster="Unk.AreEqual", file="EnumeratorsFixture.cs", label="Entry Unk.AreEqual", span=""];
m5_0 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="Entry CommandLine.Tests.EnumeratorsFixture.StringIteration()", span="38-38"];
m5_1 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="string valueOne = ''one''", span="40-40"];
m5_2 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="string valueTwo = ''two''", span="41-41"];
m5_4 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="string[] values = { valueOne, valueTwo, valueThree }", span="44-44"];
m5_3 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="string valueThree = ''three''", span="42-42"];
m5_8 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.AreEqual(valueTwo, e.Next)", prediction=122, span="49-49"];
m5_12 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.AreEqual(valueThree, e.Next)", prediction=122, span="55-55"];
m5_5 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="IArgumentEnumerator e = new StringArrayEnumerator(values)", span="45-45"];
m5_6 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="e.MoveNext()", span="46-46"];
m5_9 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.IsFalse(e.IsLast)", prediction=122, span="50-50"];
m5_10 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="e.MoveNext()", span="52-52"];
m5_13 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.IsFalse(e.IsLast)", prediction=122, span="56-56"];
m5_14 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="e.MoveNext()", span="58-58"];
m5_16 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.IsNull(e.Next)", prediction=122, span="61-61"];
m5_17 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.IsTrue(e.IsLast)", prediction=122, span="62-62"];
m5_18 [cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs", label="Exit CommandLine.Tests.EnumeratorsFixture.StringIteration()", span="38-38"];
m5_47 [cluster="CommandLine.IArgumentEnumerator.GetRemainingFromNext()", file="EnumeratorsFixture.cs", label="Entry CommandLine.IArgumentEnumerator.GetRemainingFromNext()", span="527-527"];
m5_24 [cluster="Unk.IsTrue", file="EnumeratorsFixture.cs", label="Entry Unk.IsTrue", span=""];
m5_25 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs", label="Entry CommandLine.Tests.EnumeratorsFixture.CharIteration()", span="66-66"];
m5_26 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs", label="IArgumentEnumerator e = new OneCharStringEnumerator(''abcd'')", span="68-68"];
m5_27 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs", label="e.MoveNext()", span="69-69"];
m5_29 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.AreEqual(''b'', e.Next)", prediction=128, span="72-72"];
m5_30 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.AreEqual(''bcd'', e.GetRemainingFromNext())", prediction=128, span="73-73"];
m5_31 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.IsFalse(e.IsLast)", prediction=128, span="74-74"];
m5_32 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs", label="e.MoveNext()", span="76-76"];
m5_34 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.AreEqual(''c'', e.Next)", prediction=128, span="79-79"];
m5_35 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.AreEqual(''cd'', e.GetRemainingFromNext())", prediction=128, span="80-80"];
m5_36 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.IsFalse(e.IsLast)", prediction=128, span="81-81"];
m5_37 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs", label="e.MoveNext()", span="83-83"];
m5_39 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.AreEqual(''d'', e.Next)", prediction=128, span="86-86"];
m5_40 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.AreEqual(''d'', e.GetRemainingFromNext())", prediction=128, span="87-87"];
m5_41 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.IsFalse(e.IsLast)", prediction=128, span="88-88"];
m5_42 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs", label="e.MoveNext()", span="90-90"];
m5_44 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs", label="Assert.IsTrue(e.IsLast)", prediction=128, span="93-93"];
m5_45 [cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs", label="Exit CommandLine.Tests.EnumeratorsFixture.CharIteration()", span="66-66"];
m6_0 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs", label="Entry CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", span="40-40"];
m6_1 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs", label="var hi = new HeadingInfo(''myprog'')", span="42-42"];
m6_2 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs", label="string s = hi", span="43-43"];
m6_5 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs", label="hi.WriteMessage(''a message'', sw)", span="48-48"];
m6_4 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs", label="var sw = new StringWriter()", span="47-47"];
m6_7 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs", label="Exit CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", span="40-40"];
m6_10 [cluster="System.IO.StringWriter.StringWriter()", file="HeadingInfoFixture.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m6_12 [cluster="System.IO.StringWriter.ToString()", file="HeadingInfoFixture.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m6_21 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="HeadingInfoFixture.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="298-298"];
m6_8 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string)", file="HeadingInfoFixture.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string)", span="286-286"];
m6_11 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="HeadingInfoFixture.cs", label="Entry CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", span="343-343"];
m6_13 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs", label="Entry CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", span="54-54"];
m6_14 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs", label="var hi = new HeadingInfo(''myecho'', ''2.5'')", span="56-56"];
m6_15 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs", label="string s = hi", span="57-57"];
m6_18 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs", label="hi.WriteMessage(''hello unit-test'', sw)", span="62-62"];
m6_17 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs", label="var sw = new StringWriter()", span="61-61"];
m6_20 [cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs", label="Exit CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", span="54-54"];
m7_15 [cluster="CommandLine.Text.HelpText.AddOptions(object)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.HelpText.AddOptions(object)", span="946-946"];
m7_27 [cluster="System.IO.StringWriter.ToString()", file="HelpOptionAttributeFixture.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m7_24 [cluster="System.IO.StringWriter.StringWriter()", file="HelpOptionAttributeFixture.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m7_14 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="921-921"];
m7_29 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", span="86-86"];
m7_30 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="var options = new MockOptions()", span="88-88"];
m7_31 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="var writer = new StringWriter()", span="89-89"];
m7_34 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="string helpText = writer.ToString()", span="96-96"];
m7_36 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Console.Write(helpText)", span="99-99"];
m7_37 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", span="86-86"];
m7_40 [cluster="System.Console.Write(string)", file="HelpOptionAttributeFixture.cs", label="Entry System.Console.Write(string)", span="0-0"];
m7_12 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="298-298"];
m7_13 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="166-166"];
m7_25 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1486-1486"];
m7_16 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", span="73-73"];
m7_17 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="var options = new MockOptions()", span="75-75"];
m7_18 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="var writer = new StringWriter()", span="76-76"];
m7_22 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", span="73-73"];
m7_38 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m7_0 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", span="57-57"];
m7_1 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="var help = new HelpText(new HeadingInfo(''MyProgram'', ''1.0''))", span="59-59"];
m7_2 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.Copyright = new CopyrightInfo(''Authors, Inc.'', 2007)", span="60-60"];
m7_3 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''This software is under the terms of the XYZ License'')", span="61-61"];
m7_4 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''(http://license-text.org/show.cgi?xyz).'')", span="62-62"];
m7_5 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''Usage: myprog --input equations-file.xml -o result-file.xml'')", span="63-63"];
m7_6 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''       myprog -i equations-file.xml --paralell'')", span="64-64"];
m7_7 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddPreOptionsLine(''       myprog -i equations-file.xml -vo result-file.xml'')", span="65-65"];
m7_8 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="help.AddOptions(this)", span="66-66"];
m7_9 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="return help;", span="67-67"];
m7_10 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", span="57-57"];
m7_39 [cluster="Unk.IsTrue", file="HelpOptionAttributeFixture.cs", label="Entry Unk.IsTrue", span=""];
m7_41 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", span="103-103"];
m7_42 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="var options = new MockOptions()", span="105-105"];
m7_43 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="var writer = new StringWriter()", span="106-106"];
m7_46 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="string helpText = writer.ToString()", span="113-113"];
m7_48 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs", label="Exit CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", span="103-103"];
m7_11 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="681-681"];
m7_23 [cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.MockOptions()", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.MockOptions()", span="42-42"];
m7_26 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", file="HelpOptionAttributeFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", span="58-58"];
m7_49 [file="HelpOptionAttributeFixture.cs", label="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions", span=""];
m7_50 [file="HelpOptionAttributeFixture.cs", label="CommandLine.Tests.HelpOptionAttributeFixture", span=""];
m8_125 [cluster="string.Format(System.IFormatProvider, string, object)", file="HelpTextFixture.cs", label="Entry string.Format(System.IFormatProvider, string, object)", span="0-0"];
m8_175 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", span="397-397"];
m8_176 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", file="HelpTextFixture.cs", label="var options = new ComplexOptionsWithHelp()", span="399-399"];
m8_177 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", file="HelpTextFixture.cs", label="bool result = new CommandLineParser(new CommandLineParserSettings(true, true, Console.Out)).ParseArguments(\r\n                new string[] { ''-iIN.FILE'', ''-oOUT.FILE'', ''--offset'', ''0'', ''-ap'' }, options)", span="401-402"];
m8_179 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", span="397-397"];
m8_154 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", file="HelpTextFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1543-1543"];
m8_194 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", span="433-433"];
m8_195 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="string optionHelp = null", span="436-436"];
m8_196 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="e.Option.ShortName", span="438-438"];
m8_201 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="e.Option.Required", span="449-449"];
m8_203 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="e.Option.HelpText = optionHelp", span="452-452"];
m8_197 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="''v''", span="440-440"];
m8_199 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="''i''", span="444-444"];
m8_198 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="optionHelp = ''Kommentar umfassend Operationen.''", span="441-441"];
m8_200 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="optionHelp = ''Gibt den Eingang an zu bearbeitenden Datei.''", span="445-445"];
m8_202 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="optionHelp = ''Erforderlich. '' + optionHelp", span="450-450"];
m8_204 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", span="433-433"];
m8_152 [cluster="CommandLine.Tests.Mocks.RPEOptions.RPEOptions()", file="HelpTextFixture.cs", label="Entry CommandLine.Tests.Mocks.RPEOptions.RPEOptions()", span="6-6"];
m8_193 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", file="HelpTextFixture.cs", label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1735-1735"];
m8_138 [cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", span="278-278"];
m8_139 [cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs", label="var sw = new StringWriter()", span="280-280"];
m8_140 [cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs", label="var options = new RPEOptions()", span="281-281"];
m8_141 [cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs", label="var parser = new CommandLineParser(new CommandLineParserSettings {\r\n                MutuallyExclusive = true, CaseSensitive = true, HelpWriter = sw})", span="282-283"];
m8_144 [cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs", label="var outsw = sw.ToString()", span="288-288"];
m8_142 [cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs", label="var result = parser.ParseArguments(new string[] {''--option-b'', ''hello'', ''-cWORLD''}, options)", span="284-284"];
m8_145 [cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs", label="Console.WriteLine(outsw)", span="290-290"];
m8_146 [cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs", label="var lines = outsw.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="292-292"];
m8_150 [cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", span="278-278"];
m8_181 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", span="408-408"];
m8_182 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", file="HelpTextFixture.cs", label="var options = new ComplexOptionsWithHelp()", span="410-410"];
m8_183 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", file="HelpTextFixture.cs", label="bool result = new CommandLineParser(new CommandLineParserSettings(true, true, Console.Out)).ParseArguments(\r\n                new string[] { ''-iIN.FILE'', ''-oOUT.FILE'', ''--offset'', ''zero'', ''-pa'' }, options)", span="412-413"];
m8_185 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", span="408-408"];
m8_58 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", span="172-172"];
m8_59 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs", label="_helpText.MaximumDisplayWidth = 40", span="174-174"];
m8_60 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs", label="_helpText.AddOptions(new MockOptionsWithLongDescriptionAndNoSpaces())", span="175-175"];
m8_61 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs", label="string help = _helpText.ToString()", span="176-176"];
m8_62 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs", label="string[] lines = help.Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="178-178"];
m8_69 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", span="172-172"];
m8_21 [cluster="CommandLine.Text.HelpText.AddOptions(object)", file="HelpTextFixture.cs", label="Entry CommandLine.Text.HelpText.AddOptions(object)", span="946-946"];
m8_121 [cluster="CommandLine.Text.HelpText.HelpText()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.HelpText.HelpText()", span="651-651"];
m8_134 [cluster="CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", span="270-270"];
m8_135 [cluster="CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", file="HelpTextFixture.cs", label="var local = new HelpText()", span="272-272"];
m8_137 [cluster="CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", span="270-270"];
m8_20 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="HelpTextFixture.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="921-921"];
m8_151 [cluster="System.IO.StringWriter.StringWriter()", file="HelpTextFixture.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m8_163 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.ComplexOptionsWithHelp()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.ComplexOptionsWithHelp()", span="88-88"];
m8_19 [cluster="string.Concat(string, string)", file="HelpTextFixture.cs", label="Entry string.Concat(string, string)", span="0-0"];
m8_86 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", span="208-208"];
m8_87 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="var local = new HelpText(''Customizing Test.'')", span="210-210"];
m8_88 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="local.FormatOptionHelpText += new EventHandler<FormatOptionHelpTextEventArgs>(CustomizeOptionsFormat_FormatOptionHelpText)", span="211-211"];
m8_89 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="local.AddPreOptionsLine(''Pre-Options.'')", span="212-212"];
m8_90 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="local.AddOptions(new MockOptionsWithDescription())", span="213-213"];
m8_91 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="local.AddPostOptionsLine(''Post-Options.'')", span="214-214"];
m8_92 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="string help = local.ToString()", span="216-216"];
m8_93 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="Console.WriteLine(help)", span="218-218"];
m8_94 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="220-220"];
m8_100 [cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", span="208-208"];
m8_170 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", span="386-386"];
m8_171 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", file="HelpTextFixture.cs", label="var options = new ComplexOptionsWithHelp()", span="388-388"];
m8_172 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", file="HelpTextFixture.cs", label="bool result = new CommandLineParser(new CommandLineParserSettings(Console.Out)).ParseArguments(\r\n                new string[] { ''-i0'' }, options)", span="390-391"];
m8_174 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", span="386-386"];
m8_14 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="HelpTextFixture.cs", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="681-681"];
m8_16 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", file="HelpTextFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="179-179"];
m8_57 [cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithLongDescription.MockOptionsWithLongDescription()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithLongDescription.MockOptionsWithLongDescription()", span="64-64"];
m8_102 [cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithDescription.MockOptionsWithDescription()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithDescription.MockOptionsWithDescription()", span="55-55"];
m8_158 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", span="364-364"];
m8_159 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", file="HelpTextFixture.cs", label="var options = new ComplexOptionsWithHelp()", span="366-366"];
m8_160 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", file="HelpTextFixture.cs", label="bool result = new CommandLineParser(new CommandLineParserSettings(Console.Out)).ParseArguments(\r\n                new string[] { ''-iIN.FILE'', ''-oOUT.FILE'', ''--offset'', ''abc'' }, options)", span="368-369"];
m8_162 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", span="364-364"];
m8_42 [cluster="CommandLine.Text.HelpText.ToString()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.HelpText.ToString()", span="1131-1131"];
m8_157 [cluster="System.IO.StringWriter.ToString()", file="HelpTextFixture.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m8_25 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", span="130-130"];
m8_26 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", file="HelpTextFixture.cs", label="_helpText.AddPreOptionsLine(string.Empty)", span="132-132"];
m8_27 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", span="130-130"];
m8_15 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="HelpTextFixture.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="298-298"];
m8_45 [cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", span="156-156"];
m8_46 [cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs", label="_helpText.MaximumDisplayWidth = 40", span="158-158"];
m8_47 [cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs", label="_helpText.AddOptions(new MockOptionsWithLongDescription())", span="159-159"];
m8_48 [cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs", label="string help = _helpText.ToString()", span="160-160"];
m8_49 [cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs", label="string[] lines = help.Split(new[] {Environment.NewLine}, StringSplitOptions.None)", span="162-162"];
m8_56 [cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", span="156-156"];
m8_123 [cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="HelpTextFixture.cs", label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="166-166"];
m8_41 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="HelpTextFixture.cs", label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="936-936"];
m8_122 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string)", file="HelpTextFixture.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string)", span="286-286"];
m8_153 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="HelpTextFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692"];
m8_18 [cluster="string.IsNullOrEmpty(string)", file="HelpTextFixture.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m8_156 [cluster="Unk.IsFalse", file="HelpTextFixture.cs", label="Entry Unk.IsFalse", span=""];
m8_126 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", span="252-252"];
m8_127 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs", label="var local = new HelpText {\r\n				AddDashesToOption = true,\r\n		    	Heading = new HeadingInfo(''AddOptionsWithDashes''),\r\n	        	Copyright = new CopyrightInfo(''Author'', DateTime.Now.Year)\r\n			}", span="254-258"];
m8_128 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs", label="local.AddOptions(new MockOptionsSimple())", span="259-259"];
m8_129 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs", label="string help = local.ToString()", span="261-261"];
m8_130 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs", label="Console.WriteLine(help)", span="263-263"];
m8_131 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs", label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="265-265"];
m8_133 [cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", span="252-252"];
m8_164 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", file="HelpTextFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", span="1564-1564"];
m8_17 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText(CommandLine.CommandLineOptionsBase, int)", file="HelpTextFixture.cs", label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText(CommandLine.CommandLineOptionsBase, int)", span="1004-1004"];
m8_101 [cluster="EventHandler<FormatOptionHelpTextEventArgs>.cstr", file="HelpTextFixture.cs", label="Entry EventHandler<FormatOptionHelpTextEventArgs>.cstr", span=""];
m8_165 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", span="375-375"];
m8_166 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", file="HelpTextFixture.cs", label="var options = new ComplexOptionsWithHelp()", span="377-377"];
m8_167 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", file="HelpTextFixture.cs", label="bool result = new CommandLineParser(new CommandLineParserSettings(Console.Out)).ParseArguments(\r\n                new string[] { ''-j0'' }, options)", span="379-380"];
m8_169 [cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", span="375-375"];
m8_71 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", span="188-188"];
m8_72 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs", label="var local = new HelpText(''Heading Info.'')", span="190-190"];
m8_73 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs", label="local.MaximumDisplayWidth = 40", span="191-191"];
m8_74 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs", label="local.AddPreOptionsLine(''Before 0123456789012345678901234567890123456789012 After'')", span="192-192"];
m8_75 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs", label="local.AddOptions(new MockOptions())", span="193-193"];
m8_76 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs", label="local.AddPostOptionsLine(''Before 0123456789012345678901234567890123456789 After'')", span="194-194"];
m8_77 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs", label="string help = local.ToString()", span="196-196"];
m8_78 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs", label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="198-198"];
m8_85 [cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", span="188-188"];
m8_186 [cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", span="420-420"];
m8_187 [cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs", label="var options = new ComplexOptions()", span="422-422"];
m8_188 [cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs", label="var writer = new StringWriter()", span="423-423"];
m8_189 [cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs", label="new CommandLineParser(new CommandLineParserSettings(false,  false, writer)).ParseArguments(new string[0], options, writer)", span="425-425"];
m8_191 [cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", span="420-420"];
m8_0 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", span="97-97"];
m8_1 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="var help = new HelpText(new HeadingInfo(''unittest'', ''1.9''))", span="99-99"];
m8_2 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="help.AdditionalNewLineAfterOption = true", span="100-100"];
m8_3 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="help.Copyright = new CopyrightInfo(''CommandLine.dll Author'', 2005, 2011)", span="101-101"];
m8_4 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="string errors = help.RenderParsingErrorsText(this, 2)", span="104-104"];
m8_6 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="help.AddPreOptionsLine(string.Concat(Environment.NewLine, ''ERROR(S):''))", span="107-107"];
m8_7 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="help.AddPreOptionsLine(errors)", span="108-108"];
m8_8 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="help.AddPreOptionsLine(''This is free software. You may redistribute copies of it under the terms of'')", span="111-111"];
m8_9 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="help.AddPreOptionsLine(''the MIT License <http://www.opensource.org/licenses/mit-license.php>.'')", span="112-112"];
m8_10 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="help.AddPreOptionsLine(''Usage: Please run the unit...'')", span="113-113"];
m8_11 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="help.AddOptions(this)", span="114-114"];
m8_12 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="return help;", span="116-116"];
m8_5 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="!string.IsNullOrEmpty(errors)", span="105-105"];
m8_13 [cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", span="97-97"];
m8_103 [cluster="System.Console.WriteLine(string)", file="HelpTextFixture.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m8_192 [cluster="CommandLine.Tests.Mocks.ComplexOptions.ComplexOptions()", file="HelpTextFixture.cs", label="Entry CommandLine.Tests.Mocks.ComplexOptions.ComplexOptions()", span="35-35"];
m8_40 [cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptions.MockOptions()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptions.MockOptions()", span="46-46"];
m8_70 [cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithLongDescriptionAndNoSpaces.MockOptionsWithLongDescriptionAndNoSpaces()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithLongDescriptionAndNoSpaces.MockOptionsWithLongDescriptionAndNoSpaces()", span="73-73"];
m8_28 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", span="139-139"];
m8_29 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="var local = new HelpText(''Heading Info.'')", span="141-141"];
m8_30 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="local.AddPreOptionsLine(''This is a first pre-options line.'')", span="142-142"];
m8_31 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="local.AddPreOptionsLine(''This is a second pre-options line.'')", span="143-143"];
m8_32 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="local.AddOptions(new MockOptions())", span="144-144"];
m8_33 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="local.AddPostOptionsLine(''This is a first post-options line.'')", span="145-145"];
m8_34 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="local.AddPostOptionsLine(''This is a second post-options line.'')", span="146-146"];
m8_35 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="string help = local.ToString()", span="148-148"];
m8_36 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="150-150"];
m8_39 [cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", span="139-139"];
m8_22 [cluster="CommandLine.Text.Tests.HelpTextFixture.SetUp()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.SetUp()", span="124-124"];
m8_23 [cluster="CommandLine.Text.Tests.HelpTextFixture.SetUp()", file="HelpTextFixture.cs", label="_helpText = new HelpText(new HeadingInfo(_ThisAssembly.Title, _ThisAssembly.Version))", span="126-126"];
m8_24 [cluster="CommandLine.Text.Tests.HelpTextFixture.SetUp()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.SetUp()", span="124-124"];
m8_124 [cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptionsSimple.MockOptionsSimple()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptionsSimple.MockOptionsSimple()", span="82-82"];
m8_180 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", file="HelpTextFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", span="1603-1603"];
m8_43 [cluster="string.Split(string[], System.StringSplitOptions)", file="HelpTextFixture.cs", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
m8_155 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", file="HelpTextFixture.cs", label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object)", span="1717-1717"];
m8_104 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="Entry CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", span="229-229"];
m8_105 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="var year = DateTime.Now.Year", span="231-231"];
m8_106 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="var local = new HelpText()", span="232-232"];
m8_108 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="local.Copyright = new CopyrightInfo(''Author'', year)", span="234-234"];
m8_107 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="local.Heading = new HeadingInfo(''Parameterless Constructor Test.'')", span="233-233"];
m8_109 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="local.AddPreOptionsLine(''Pre-Options.'')", span="235-235"];
m8_110 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="local.AddOptions(new MockOptionsSimple())", span="236-236"];
m8_111 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="local.AddPostOptionsLine(''Post-Options.'')", span="237-237"];
m8_112 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="string help = local.ToString()", span="239-239"];
m8_113 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="Console.WriteLine(help)", span="241-241"];
m8_114 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="243-243"];
m8_120 [cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs", label="Exit CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", span="229-229"];
m8_205 [file="HelpTextFixture.cs", label="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp", span=""];
m8_206 [file="HelpTextFixture.cs", label="CommandLine.Text.Tests.HelpTextFixture", span=""];
m9_43 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", span="98-98"];
m9_44 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithMultipleSetAndOneOption()", span="100-100"];
m9_47 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", span="98-98"];
m9_14 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m9_17 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", span="58-58"];
m9_18 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithDefaultSet()", span="60-60"];
m9_21 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", span="58-58"];
m9_48 [cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSetAndOneOption.OptionsWithMultipleSetAndOneOption()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSetAndOneOption.OptionsWithMultipleSetAndOneOption()", span="35-35"];
m9_37 [cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", span="35-35"];
m9_30 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", span="78-78"];
m9_31 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithMultipleSet()", span="80-80"];
m9_34 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(167, options.Green)", prediction=138, span="81-81"];
m9_35 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(205, options.Hue)", prediction=138, span="82-82"];
m9_36 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", span="78-78"];
m9_6 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1543-1543"];
m9_5 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692"];
m9_13 [cluster="CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", span="35-35"];
m9_15 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m9_22 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m9_23 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", span="67-67"];
m9_24 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithDefaultSet()", span="69-69"];
m9_27 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(''mystuff.xml'', options.FileName)", prediction=140, span="70-70"];
m9_28 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(true, options.Verbose)", prediction=140, span="71-71"];
m9_29 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", span="67-67"];
m9_38 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", span="89-89"];
m9_39 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithMultipleSet()", span="91-91"];
m9_42 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", span="89-89"];
m9_0 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", span="38-38"];
m9_1 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", span="38-38"];
m9_49 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", span="107-107"];
m9_50 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithMultipleSetAndOneOption()", span="109-109"];
m9_53 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(100, options.Green)", prediction=142, span="110-110"];
m9_54 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(200, options.Hue)", prediction=142, span="111-111"];
m9_55 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(ColorSet.RgbColorSet, options.DefaultColorSet)", prediction=142, span="112-112"];
m9_56 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", span="107-107"];
m9_7 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", span="48-48"];
m9_8 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="var options = new OptionsWithDefaultSet()", span="50-50"];
m9_11 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs", label="Assert.AreEqual(''mystuff.xml'', options.FileName)", prediction=145, span="51-51"];
m9_12 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", span="48-48"];
m9_2 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.CreateCommandLineParser()", file="MutuallyExclusiveParsingFixture.cs", label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.CreateCommandLineParser()", span="42-42"];
m9_4 [cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.CreateCommandLineParser()", file="MutuallyExclusiveParsingFixture.cs", label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.CreateCommandLineParser()", span="42-42"];
m9_57 [file="MutuallyExclusiveParsingFixture.cs", label="CommandLine.Tests.MutuallyExclusiveParsingFixture", span=""];
m10_23 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", span="71-71"];
m10_24 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="73-73"];
m10_27 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", span="71-71"];
m10_13 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m10_48 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", span="114-114"];
m10_49 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="116-116"];
m10_52 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(9.999, options.DoubleValue)", prediction=146, span="119-119"];
m10_53 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="122-122"];
m10_56 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.IsNull(options.DoubleValue)", prediction=147, span="125-125"];
m10_57 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", span="114-114"];
m10_28 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", span="80-80"];
m10_29 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="82-82"];
m10_32 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(FileAccess.ReadWrite, options.EnumValue)", prediction=148, span="85-85"];
m10_33 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="88-88"];
m10_36 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.IsNull(options.EnumValue)", prediction=149, span="91-91"];
m10_37 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", span="80-80"];
m10_38 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", span="96-96"];
m10_39 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="98-98"];
m10_42 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", span="96-96"];
m10_16 [cluster="Unk.IsNull", file="NullableTypesParsingFixture.cs", label="Entry Unk.IsNull", span=""];
m10_2 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", span="46-46"];
m10_3 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="48-48"];
m10_6 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(99, options.IntegerValue)", prediction=150, span="51-51"];
m10_7 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="54-54"];
m10_10 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.IsNull(options.IntegerValue)", prediction=151, span="57-57"];
m10_11 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", span="46-46"];
m10_63 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", span="139-139"];
m10_64 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="141-141"];
m10_67 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", span="139-139"];
m10_12 [cluster="CommandLine.Tests.Mocks.NullableTypesOptions.NullableTypesOptions()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.NullableTypesOptions.NullableTypesOptions()", span="35-35"];
m10_0 [cluster="CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", span="41-41"];
m10_1 [cluster="CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", span="41-41"];
m10_17 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", span="62-62"];
m10_18 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="64-64"];
m10_21 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", span="62-62"];
m10_22 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m10_43 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", span="105-105"];
m10_44 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="107-107"];
m10_47 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", span="105-105"];
m10_58 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", span="130-130"];
m10_59 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="132-132"];
m10_62 [cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", span="130-130"];
m10_68 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", span="148-148"];
m10_69 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="var options = new NullableTypesOptions()", span="150-150"];
m10_72 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(''alone'', options.StringValue)", prediction=152, span="153-153"];
m10_73 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="options = new NullableTypesOptions()", span="156-156"];
m10_74 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Result = base.Parser.ParseArguments(\r\n                new string[] { ''-d1.789'', ''--int'', ''10099'', ''-stogether'', ''--enum'', ''Read'' }, options)", prediction=153, span="156-157"];
m10_76 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(1.789, options.DoubleValue)", prediction=154, span="160-160"];
m10_77 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(10099, options.IntegerValue)", prediction=154, span="161-161"];
m10_78 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(''together'', options.StringValue)", prediction=154, span="162-162"];
m10_79 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs", label="Assert.AreEqual(FileAccess.Read, options.EnumValue)", prediction=154, span="163-163"];
m10_80 [cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs", label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", span="148-148"];
m10_14 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="NullableTypesParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m10_81 [file="NullableTypesParsingFixture.cs", label="CommandLine.Tests.NullableTypesParsingFixture", span=""];
m11_12 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", span="57-57"];
m11_13 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="59-59"];
m11_16 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''alfa'', ''beta'', ''gamma'' }, options.StringArrayValue)", prediction=158, span="62-62"];
m11_17 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", span="57-57"];
m11_55 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", span="123-123"];
m11_56 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArrayAndValueList()", span="125-125"];
m11_57 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-shere'', ''-i999'', ''--strarr=0'', ''1'', ''2'', ''3'', ''4'', ''5'', ''6'', ''7'', ''8'', ''9'' , ''--switch'', ''f1.xml'', ''f2.xml''}, options)", prediction=159, span="125-126"];
m11_59 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''here'', options.StringValue)", prediction=158, span="129-129"];
m11_60 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(999, options.IntegerValue)", prediction=158, span="130-130"];
m11_61 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''0'', ''1'', ''2'', ''3'', ''4'', ''5'', ''6'', ''7'', ''8'', ''9'' }, options.StringArrayValue)", prediction=158, span="131-131"];
m11_62 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.IsTrue(options.BooleanValue)", prediction=158, span="132-132"];
m11_63 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''f1.xml'', ''f2.xml'' }, options.Items)", prediction=158, span="133-133"];
m11_64 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", span="123-123"];
m11_65 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithArrayAndValueList.SimpleOptionsWithArrayAndValueList()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithArrayAndValueList.SimpleOptionsWithArrayAndValueList()", span="35-35"];
m11_82 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", span="164-164"];
m11_83 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="166-166"];
m11_86 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="171-171"];
m11_89 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="176-176"];
m11_92 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="181-181"];
m11_95 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", span="164-164"];
m11_18 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", span="67-67"];
m11_19 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="69-69"];
m11_22 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''apple'', ''kiwi'' }, options.StringArrayValue)", prediction=158, span="72-72"];
m11_23 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", span="67-67"];
m11_96 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", span="189-189"];
m11_97 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="191-191"];
m11_100 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="196-196"];
m11_103 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", span="189-189"];
m11_169 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", span="338-338"];
m11_170 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="base.Parser.ParseArguments(new string[] { ''-w'', ''1'', ''2'', ''3'' }, new SimpleOptionsWithBadOptionArray())", span="340-340"];
m11_171 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", span="338-338"];
m11_184 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="OptionArrayAttributeParsingFixture.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m11_45 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", span="109-109"];
m11_46 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="111-111"];
m11_47 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-i'', ''191919'', ''-z'', ''one'', ''two'', ''three'', ''--switch'', ''--string=near'' }, options)", prediction=166, span="111-112"];
m11_49 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(191919, options.IntegerValue)", prediction=158, span="115-115"];
m11_50 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'' }, options.StringArrayValue)", prediction=158, span="116-116"];
m11_51 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.IsTrue(options.BooleanValue)", prediction=158, span="117-117"];
m11_52 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''near'', options.StringValue)", prediction=158, span="118-118"];
m11_53 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", span="109-109"];
m11_162 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", span="324-324"];
m11_163 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="base.Parser.ParseArguments(new string[] { ''-v'', ''a'', ''b'', ''c'' }, new SimpleOptionsWithBadOptionArray())", span="326-326"];
m11_164 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", span="324-324"];
m11_194 [cluster="CommandLine.Tests.OptionsWithUIntArray.OptionsWithUIntArray()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionsWithUIntArray.OptionsWithUIntArray()", span="34-34"];
m11_10 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", span="58-58"];
m11_24 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", span="77-77"];
m11_25 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="79-79"];
m11_28 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''apple'', ''kiwi'' }, options.StringArrayValue)", prediction=158, span="82-82"];
m11_29 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", span="77-77"];
m11_130 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", span="257-257"];
m11_131 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="259-259"];
m11_132 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''--string=after''\r\n            }, options)", prediction=172, span="259-264"];
m11_134 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", prediction=158, span="267-267"];
m11_135 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", prediction=158, span="268-268"];
m11_136 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", prediction=158, span="269-269"];
m11_137 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''after'', options.StringValue)", prediction=158, span="270-270"];
m11_138 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="273-273"];
m11_139 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''--string'', ''before'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4''\r\n            }, options)", prediction=177, span="273-278"];
m11_141 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''before'', options.StringValue)", prediction=158, span="281-281"];
m11_142 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", prediction=158, span="282-282"];
m11_143 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", prediction=158, span="283-283"];
m11_144 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", prediction=158, span="284-284"];
m11_145 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="287-287"];
m11_146 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-s'', ''near-the-center'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four''\r\n            }, options)", prediction=182, span="287-292"];
m11_148 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", prediction=158, span="295-295"];
m11_149 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", prediction=158, span="296-296"];
m11_150 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''near-the-center'', options.StringValue)", prediction=158, span="297-297"];
m11_151 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", prediction=158, span="298-298"];
m11_152 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="301-301"];
m11_153 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''--switch'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-i'', ''1234'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''--string'', ''I'm really playing with the parser!''\r\n            }, options)", prediction=187, span="301-308"];
m11_155 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.IsTrue(options.BooleanValue)", prediction=158, span="311-311"];
m11_156 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", prediction=158, span="312-312"];
m11_157 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", prediction=158, span="313-313"];
m11_158 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(1234, options.IntegerValue)", prediction=158, span="314-314"];
m11_159 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", prediction=158, span="315-315"];
m11_160 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''I'm really playing with the parser!'', options.StringValue)", prediction=158, span="316-316"];
m11_161 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", span="257-257"];
m11_2 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", span="47-47"];
m11_3 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="49-49"];
m11_6 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''alfa'', ''beta'', ''gamma'' }, options.StringArrayValue)", prediction=158, span="52-52"];
m11_7 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", span="47-47"];
m11_66 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48"];
m11_54 [cluster="Unk.IsTrue", file="OptionArrayAttributeParsingFixture.cs", label="Entry Unk.IsTrue", span=""];
m11_165 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithBadOptionArray.SimpleOptionsWithBadOptionArray()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithBadOptionArray.SimpleOptionsWithBadOptionArray()", span="37-37"];
m11_195 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", span="385-385"];
m11_196 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new OptionsWithUIntArray()", span="387-387"];
m11_197 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = CommandLineParser.Default.ParseArguments(new string[] {\r\n                ''-s'', ''just a string'',\r\n                ''-o'', ''10'', ''20'', ''30'', ''40'',\r\n                ''-t'', ''11'', ''22'', ''33'', ''44'',\r\n                ''-b''\r\n            }, options)", prediction=195, span="387-392"];
m11_199 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''just a string'', options.SomeStringValue)", prediction=158, span="395-395"];
m11_200 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new uint[] {10, 20, 30, 40}, options.ArrayOne)", prediction=158, span="396-396"];
m11_201 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new uint[] {11, 22, 33, 44}, options.ArrayTwo)", prediction=158, span="397-397"];
m11_202 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(true, options.SomeBooleanValue)", prediction=158, span="398-398"];
m11_203 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", span="385-385"];
m11_38 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", span="98-98"];
m11_39 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="100-100"];
m11_42 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''before'', options.StringValue)", prediction=158, span="103-103"];
m11_43 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'' }, options.StringArrayValue)", prediction=158, span="104-104"];
m11_44 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", span="98-98"];
m11_11 [cluster="CommandLine.Tests.BaseFixture.AssertArrayItemEqual<T>(T[], T[])", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.BaseFixture.AssertArrayItemEqual<T>(T[], T[])", span="37-37"];
m11_9 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m11_75 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m11_185 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", span="367-367"];
m11_186 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new OptionsWithUIntArray()", span="369-369"];
m11_187 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = CommandLineParser.Default.ParseArguments(new string[] {\r\n                ''--somestr'', ''just a string'',\r\n                ''--arrayone'', ''10'', ''20'', ''30'', ''40'',\r\n                ''--arraytwo'', ''11'', ''22'', ''33'', ''44'',\r\n                ''--somebool''\r\n            }, options)", prediction=202, span="369-374"];
m11_189 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''just a string'', options.SomeStringValue)", prediction=158, span="377-377"];
m11_190 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new uint[] {10, 20, 30, 40}, options.ArrayOne)", prediction=158, span="378-378"];
m11_191 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new uint[] {11, 22, 33, 44}, options.ArrayTwo)", prediction=158, span="379-379"];
m11_192 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(true, options.SomeBooleanValue)", prediction=158, span="380-380"];
m11_193 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", span="367-367"];
m11_110 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", span="217-217"];
m11_111 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="219-219"];
m11_112 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4''\r\n            }, options)", prediction=207, span="219-223"];
m11_114 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", prediction=158, span="226-226"];
m11_115 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", prediction=158, span="227-227"];
m11_116 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", prediction=158, span="228-228"];
m11_117 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="231-231"];
m11_118 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4''\r\n            }, options)", prediction=211, span="231-235"];
m11_120 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", prediction=158, span="238-238"];
m11_121 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", prediction=158, span="239-239"];
m11_122 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", prediction=158, span="240-240"];
m11_123 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="243-243"];
m11_124 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four''\r\n            }, options)", prediction=215, span="243-247"];
m11_126 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", prediction=158, span="250-250"];
m11_127 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", prediction=158, span="251-251"];
m11_128 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", prediction=158, span="252-252"];
m11_129 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", span="217-217"];
m11_76 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", span="154-154"];
m11_77 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="156-156"];
m11_80 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3 }, options.IntegerArrayValue)", prediction=158, span="159-159"];
m11_81 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", span="154-154"];
m11_104 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", span="205-205"];
m11_105 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="207-207"];
m11_108 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new double[] { .1, 2.3, .9 }, options.DoubleArrayValue)", prediction=158, span="210-210"];
m11_109 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", span="205-205"];
m11_8 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithArray.SimpleOptionsWithArray()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithArray.SimpleOptionsWithArray()", span="35-35"];
m11_175 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", span="351-351"];
m11_176 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="var actualCulture = Thread.CurrentThread.CurrentCulture", span="353-353"];
m11_177 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''it-IT'')", span="354-354"];
m11_182 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="Thread.CurrentThread.CurrentCulture = actualCulture", span="361-361"];
m11_178 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="355-355"];
m11_181 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new double[] { 1.2, 1.23, 1.234 }, options.DoubleArrayValue)", prediction=158, span="358-358"];
m11_183 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", span="351-351"];
m11_67 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", span="138-138"];
m11_68 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="140-140"];
m11_71 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="options = new SimpleOptionsWithArray()", span="145-145"];
m11_74 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", span="138-138"];
m11_166 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", span="331-331"];
m11_167 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="base.Parser.ParseArguments(new string[] { ''--bstrarr'', ''a'', ''b'', ''c'' }, new SimpleOptionsWithBadOptionArray())", span="333-333"];
m11_168 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", span="331-331"];
m11_172 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", span="345-345"];
m11_173 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="base.Parser.ParseArguments(new string[] { ''--bintarr'', ''1'', ''2'', ''3'' }, new SimpleOptionsWithBadOptionArray())", span="347-347"];
m11_174 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", span="345-345"];
m11_0 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", span="42-42"];
m11_1 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", span="42-42"];
m11_30 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", span="87-87"];
m11_31 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithArray()", span="89-89"];
m11_34 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'' }, options.StringArrayValue)", prediction=158, span="92-92"];
m11_35 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs", label="Assert.AreEqual(''after'', options.StringValue)", prediction=158, span="93-93"];
m11_36 [cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs", label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", span="87-87"];
m11_204 [file="OptionArrayAttributeParsingFixture.cs", label="CommandLine.Tests.OptionArrayAttributeParsingFixture", span=""];
m12_40 [cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", file="OptionMapFixture.cs", label="Entry CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", span="114-114"];
m12_41 [cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", file="OptionMapFixture.cs", label="var longOi = _optionMap[''nomorebugshere'']", span="116-116"];
m12_43 [cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", file="OptionMapFixture.cs", label="Exit CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", span="114-114"];
m12_6 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", file="OptionMapFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", span="1553-1553"];
m12_16 [cluster="Unk.CreateOptionInfo", file="OptionMapFixture.cs", label="Entry Unk.CreateOptionInfo", span=""];
m12_29 [cluster="CommandLine.Tests.OptionMapFixture.ManageOptions()", file="OptionMapFixture.cs", label="Entry CommandLine.Tests.OptionMapFixture.ManageOptions()", span="99-99"];
m12_31 [cluster="CommandLine.Tests.OptionMapFixture.ManageOptions()", color=green, community=0, file="OptionMapFixture.cs", label="Assert.AreSame(_omBuilder.Options[1], _optionMap[_omBuilder.Names[1]])", prediction=224, span="102-102"];
m12_32 [cluster="CommandLine.Tests.OptionMapFixture.ManageOptions()", color=green, community=0, file="OptionMapFixture.cs", label="Assert.AreSame(_omBuilder.Options[2], _optionMap[_omBuilder.Names[2]])", prediction=225, span="103-103"];
m12_33 [cluster="CommandLine.Tests.OptionMapFixture.ManageOptions()", file="OptionMapFixture.cs", label="Exit CommandLine.Tests.OptionMapFixture.ManageOptions()", span="99-99"];
m12_39 [cluster="Unk.IsNull", file="OptionMapFixture.cs", label="Entry Unk.IsNull", span=""];
m12_8 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs", label="Entry CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", span="53-53"];
m12_9 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs", label="var oa = new OptionAttribute(shortName, longName)", span="55-55"];
m12_10 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs", label="var oi = oa.CreateOptionInfo()", span="56-56"];
m12_11 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs", label="_optionMap[oa.UniqueName] = oi", span="57-57"];
m12_13 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs", label="_names.Add(oa.UniqueName)", span="59-59"];
m12_12 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs", label="_options.Add(oi)", span="58-58"];
m12_14 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs", label="Exit CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", span="53-53"];
m12_44 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="Entry CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", span="120-120"];
m12_45 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="map == null", span="122-122"];
m12_53 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="map[attribute1.UniqueName] = option1", span="133-133"];
m12_54 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="map[attribute2.UniqueName] = option2", span="134-134"];
m12_55 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="map[attribute3.UniqueName] = option3", span="135-135"];
m12_56 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="optionCache != null", span="137-137"];
m12_57 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="optionCache[attribute1.UniqueName] = option1", span="139-139"];
m12_58 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="optionCache[attribute1.UniqueName] = option2", span="140-140"];
m12_59 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="optionCache[attribute2.UniqueName]= option3", span="141-141"];
m12_60 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="return map;", span="144-144"];
m12_47 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", color=green, community=0, file="OptionMapFixture.cs", label="var attribute1 = new OptionAttribute(''p'', ''pretend'')", prediction=226, span="125-125"];
m12_48 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", color=green, community=0, file="OptionMapFixture.cs", label="var attribute2 = new OptionAttribute(null, ''newuse'')", prediction=227, span="126-126"];
m12_50 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="var option1 = attribute1.CreateOptionInfo()", span="129-129"];
m12_49 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="var attribute3 = new OptionAttribute(''D'', null)", span="127-127"];
m12_51 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="var option2 = attribute2.CreateOptionInfo()", span="130-130"];
m12_52 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="var option3 = attribute3.CreateOptionInfo()", span="131-131"];
m12_61 [cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", label="Exit CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", span="120-120"];
m12_19 [cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs", label="Entry CommandLine.Tests.OptionMapFixture.CreateInstance()", span="82-82"];
m12_20 [cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs", label="_omBuilder = new OptionMapBuilder(3)", span="84-84"];
m12_21 [cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs", label="_omBuilder.AppendOption(''p'', ''pretend'')", span="85-85"];
m12_22 [cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs", label="_omBuilder.AppendOption(null, ''newuse'')", span="86-86"];
m12_23 [cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs", label="_omBuilder.AppendOption(''D'', null)", span="87-87"];
m12_24 [cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs", label="_optionMap = _omBuilder.OptionMap", span="89-89"];
m12_25 [cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs", label="Exit CommandLine.Tests.OptionMapFixture.CreateInstance()", span="82-82"];
m12_17 [cluster="Unk.Add", file="OptionMapFixture.cs", label="Entry Unk.Add", span=""];
m12_7 [cluster="System.Collections.Generic.List<T>.List(int)", file="OptionMapFixture.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m12_18 [cluster="System.Collections.Generic.List<T>.Add(T)", file="OptionMapFixture.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m12_26 [cluster="CommandLine.Tests.OptionMapFixture.ShutdownInstance()", file="OptionMapFixture.cs", label="Entry CommandLine.Tests.OptionMapFixture.ShutdownInstance()", span="93-93"];
m12_27 [cluster="CommandLine.Tests.OptionMapFixture.ShutdownInstance()", file="OptionMapFixture.cs", label="_optionMap = null", span="95-95"];
m12_28 [cluster="CommandLine.Tests.OptionMapFixture.ShutdownInstance()", file="OptionMapFixture.cs", label="Exit CommandLine.Tests.OptionMapFixture.ShutdownInstance()", span="93-93"];
m12_0 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs", label="Entry CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", span="46-46"];
m12_1 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs", label="_optionMap = new OptionMap(capacity, new CommandLineParserSettings(true))", span="48-48"];
m12_2 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs", label="_options = new List<OptionInfo>(capacity)", span="49-49"];
m12_3 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs", label="_names = new List<string>(capacity)", span="50-50"];
m12_4 [cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs", label="Exit CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", span="46-46"];
m12_34 [cluster="Unk.AreSame", file="OptionMapFixture.cs", label="Entry Unk.AreSame", span=""];
m12_15 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionMapFixture.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string, string)", span="204-204"];
m12_5 [cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMapFixture.cs", label="Entry CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="1086-1086"];
m12_35 [cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", file="OptionMapFixture.cs", label="Entry CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", span="107-107"];
m12_36 [cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", file="OptionMapFixture.cs", label="var shortOi = _optionMap[''y'']", span="109-109"];
m12_38 [cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", file="OptionMapFixture.cs", label="Exit CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", span="107-107"];
m12_62 [file="OptionMapFixture.cs", label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder", span=""];
m13_10 [cluster="CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", span="101-101"];
m13_11 [cluster="CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", file="ReflectionUtilFixture.cs", label="_target = new MockObject()", span="103-103"];
m13_12 [cluster="CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", span="101-101"];
m13_30 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", span="132-132"];
m13_31 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs", label="var pair = ReflectionUtil.RetrieveMethod<MockAttribute>(_target)", span="134-134"];
m13_33 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", color=green, community=0, file="ReflectionUtilFixture.cs", label="Assert.AreEqual(''DoNothing'', pair.Left.Name)", prediction=228, span="137-137"];
m13_34 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", span="132-132"];
m13_16 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", span="113-113"];
m13_17 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="var list = ReflectionUtil.RetrievePropertyList<MockAttribute>(_target)", span="115-115"];
m13_19 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", color=green, community=0, file="ReflectionUtilFixture.cs", label="Assert.AreEqual(''StringField'', list[0].Left.Name)", prediction=229, span="118-118"];
m13_20 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", color=green, community=0, file="ReflectionUtilFixture.cs", label="Assert.AreEqual(''BooleanField'', list[1].Left.Name)", prediction=229, span="119-119"];
m13_21 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="PrintFieldList<MockAttribute>(list)", span="121-121"];
m13_22 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="var anotherList = ReflectionUtil.RetrievePropertyList<AnotherMockAttribute>(_target)", span="123-123"];
m13_24 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", color=green, community=0, file="ReflectionUtilFixture.cs", label="Assert.AreEqual(''IntField'', anotherList[0].Left.Name)", prediction=231, span="126-126"];
m13_25 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="PrintFieldList<AnotherMockAttribute>(anotherList)", span="128-128"];
m13_26 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", span="113-113"];
m13_0 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", span="58-58"];
m13_1 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", file="ReflectionUtilFixture.cs", label="IntField = 0", span="60-60"];
m13_2 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", span="58-58"];
m13_37 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", span="141-141"];
m13_38 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="var list = ReflectionUtil.RetrievePropertyAttributeList<MockWithValueAttribute>(new AnotherMockObject())", span="143-143"];
m13_40 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", color=green, community=0, file="ReflectionUtilFixture.cs", label="Assert.AreEqual(3, list.Count)", prediction=232, span="146-146"];
m13_41 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", color=green, community=0, file="ReflectionUtilFixture.cs", label="Assert.AreEqual(''applied to X'', list[0].StringValue)", prediction=232, span="147-147"];
m13_42 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", color=green, community=0, file="ReflectionUtilFixture.cs", label="Assert.AreEqual(''applied to Y'', list[1].StringValue)", prediction=232, span="148-148"];
m13_43 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", color=green, community=0, file="ReflectionUtilFixture.cs", label="Assert.AreEqual(''applied to Z'', list[2].StringValue)", prediction=232, span="149-149"];
m13_44 [cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", span="141-141"];
m13_45 [cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", span="1920-1920"];
m13_35 [cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", span="1882-1882"];
m13_50 [cluster="object.GetType()", file="ReflectionUtilFixture.cs", label="Entry object.GetType()", span="0-0"];
m13_5 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", span="80-80"];
m13_6 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="X = 0", span="82-82"];
m13_7 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="Y = 0", span="83-83"];
m13_8 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="Z = 0", span="84-84"];
m13_9 [cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", span="80-80"];
m13_27 [cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="1856-1856"];
m13_51 [cluster="System.Console.WriteLine(string, object)", file="ReflectionUtilFixture.cs", label="Entry System.Console.WriteLine(string, object)", span="0-0"];
m13_36 [cluster="Unk.IsNotNull", file="ReflectionUtilFixture.cs", label="Entry Unk.IsNotNull", span=""];
m13_13 [cluster="CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", span="107-107"];
m13_14 [cluster="CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", file="ReflectionUtilFixture.cs", label="_target = null", span="109-109"];
m13_15 [cluster="CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", span="107-107"];
m13_29 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", span="181-181"];
m13_46 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label="Console.WriteLine(''Attribute: {0}'', list[0].Right.GetType())", span="184-184"];
m13_47 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label=list, span="185-185"];
m13_48 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label="Console.WriteLine(''\tField: {0}'', pair.Left.Name)", span="187-187"];
m13_49 [cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", span="181-181"];
m13_3 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", span="73-73"];
m13_4 [cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", span="73-73"];
m13_52 [file="ReflectionUtilFixture.cs", label="CommandLine.Tests.ReflectionUtilFixture.MockObject", span=""];
m13_53 [file="ReflectionUtilFixture.cs", label="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject", span=""];
m14_10 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="Singleton.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m14_13 [cluster="System.Console.WriteLine(object)", file="Singleton.cs", label="Entry System.Console.WriteLine(object)", span="0-0"];
m14_19 [cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", file="Singleton.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", span="35-35"];
m14_0 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="Entry CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", span="40-40"];
m14_1 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="var options = new SimpleOptions()", span="42-42"];
m14_2 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="bool result = CommandLineParser.Default.ParseArguments(\r\n                    new string[] { ''-s'', ''another string'', ''-i100'', ''--switch'' }, options)", span="43-44"];
m14_4 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", color=green, community=0, file="Singleton.cs", label="Assert.AreEqual(''another string'', options.StringValue)", prediction=236, span="47-47"];
m14_5 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", color=green, community=0, file="Singleton.cs", label="Assert.AreEqual(100, options.IntegerValue)", prediction=236, span="48-48"];
m14_6 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", color=green, community=0, file="Singleton.cs", label="Assert.AreEqual(true, options.BooleanValue)", prediction=236, span="49-49"];
m14_7 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", color=green, community=0, file="Singleton.cs", label="Console.WriteLine(options)", prediction=236, span="50-50"];
m14_8 [cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", label="Exit CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", span="40-40"];
m14_14 [cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs", label="Entry CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", span="54-54"];
m14_15 [cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs", label="var options = new OptionsWithMultipleSet()", span="56-56"];
m14_16 [cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs", label="bool result = CommandLineParser.Default.ParseArguments(\r\n                new string[] { ''-r1'', ''-g2'', ''-b3'', ''-h4'', ''-s5'', ''-v6'' }, options)", span="57-58"];
m14_18 [cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs", label="Exit CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", span="54-54"];
m14_9 [cluster="CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", file="Singleton.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", span="33-33"];
m14_11 [cluster="Unk.IsTrue", file="Singleton.cs", label="Entry Unk.IsTrue", span=""];
m16_19 [cluster="CommandLine.Tests.Mocks.OptionsOfPlugInX.OptionsOfPlugInX()", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsOfPlugInX.OptionsOfPlugInX()", span="41-41"];
m16_15 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1543-1543"];
m16_14 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692"];
m16_0 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", span="41-41"];
m16_1 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="string[] args = { ''--plugin'', ''addonX'', ''--filename'', ''input.dat'' }", span="43-43"];
m16_2 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var appOptions = new OptionsForAppWithPlugIns()", span="44-44"];
m16_4 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var result1 = parser.ParseArguments(args, appOptions)", span="47-47"];
m16_8 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var result2 = parser.ParseArguments(args, plugInXOptions)", span="53-53"];
m16_3 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var parser = new CommandLineParser(new CommandLineParserSettings {\r\n                IgnoreUnknownArguments = true, CaseSensitive = true })", span="45-46"];
m16_6 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", color=green, community=0, file="UnknownArgumentsFixture.cs", label="Assert.AreEqual(''addonX'', appOptions.PlugInName)", prediction=240, span="50-50"];
m16_7 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="var plugInXOptions = new OptionsOfPlugInX()", span="52-52"];
m16_10 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", color=green, community=0, file="UnknownArgumentsFixture.cs", label="Assert.AreEqual(''input.dat'', plugInXOptions.InputFileName)", prediction=241, span="56-56"];
m16_11 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", color=green, community=0, file="UnknownArgumentsFixture.cs", label="Assert.AreEqual(10, plugInXOptions.ReadOffset)", prediction=241, span="57-57"];
m16_12 [cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs", label="Exit CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", span="41-41"];
m16_13 [cluster="CommandLine.Tests.Mocks.OptionsForAppWithPlugIns.OptionsForAppWithPlugIns()", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsForAppWithPlugIns.OptionsForAppWithPlugIns()", span="35-35"];
m16_16 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", file="UnknownArgumentsFixture.cs", label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object)", span="1717-1717"];
m16_17 [cluster="Unk.IsTrue", file="UnknownArgumentsFixture.cs", label="Entry Unk.IsTrue", span=""];
m17_15 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", span="41-41"];
m17_3 [cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", file="ValueListAttributeFixture.cs", label="Entry CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", span="304-304"];
m17_12 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m17_13 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ValueListAttributeFixture.cs", label="new ValueListAttribute(new MockSpecializedList().GetType())", span="75-75"];
m17_14 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73"];
m17_24 [cluster="Unk.IsNotNull", file="ValueListAttributeFixture.cs", label="Entry Unk.IsNotNull", span=""];
m17_22 [cluster="CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", span="45-45"];
m17_35 [cluster="CommandLine.Tests.BaseFixture.AssertArrayItemEqual(string[], System.Collections.Generic.IList<string>)", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.BaseFixture.AssertArrayItemEqual(string[], System.Collections.Generic.IList<string>)", span="46-46"];
m17_26 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m17_27 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="var options = new MockOptions()", span="91-91"];
m17_28 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="var values = ValueListAttribute.GetReference(options)", span="93-93"];
m17_29 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="values.Add(''value0'')", span="94-94"];
m17_30 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="values.Add(''value1'')", span="95-95"];
m17_31 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="values.Add(''value2'')", span="96-96"];
m17_33 [cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89"];
m17_16 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m17_17 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="var options = new MockOptions()", span="81-81"];
m17_18 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="IList<string> values = ValueListAttribute.GetReference(options)", span="83-83"];
m17_20 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", color=green, community=0, file="ValueListAttributeFixture.cs", label="Assert.AreEqual(typeof(List<string>), values.GetType())", prediction=243, span="84-84"];
m17_21 [cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79"];
m17_4 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m17_5 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ValueListAttributeFixture.cs", label="new ValueListAttribute(new List<object>().GetType())", span="63-63"];
m17_6 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61"];
m17_34 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="ValueListAttributeFixture.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m17_23 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="ValueListAttributeFixture.cs", label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="328-328"];
m17_8 [cluster="object.GetType()", file="ValueListAttributeFixture.cs", label="Entry object.GetType()", span="0-0"];
m17_0 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m17_1 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ValueListAttributeFixture.cs", label="new ValueListAttribute(null)", span="56-56"];
m17_2 [cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54"];
m17_9 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ValueListAttributeFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m17_10 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ValueListAttributeFixture.cs", label="new ValueListAttribute(new List<string>().GetType())", span="69-69"];
m17_11 [cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ValueListAttributeFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67"];
m17_7 [cluster="System.Collections.Generic.List<T>.List()", file="ValueListAttributeFixture.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m17_36 [file="ValueListAttributeFixture.cs", label="CommandLine.Tests.ValueListAttributeFixture", span=""];
m18_14 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471"];
m18_19 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", span="61-61"];
m18_20 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumThree()", span="62-62"];
m18_23 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file.a'', options.InputFilenames[0])", prediction=244, span="66-66"];
m18_24 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file.b'', options.InputFilenames[1])", prediction=244, span="67-67"];
m18_25 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file.c'', options.InputFilenames[2])", prediction=244, span="68-68"];
m18_26 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.IsNull(options.OutputFile)", prediction=244, span="69-69"];
m18_27 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.IsFalse(options.Overwrite)", prediction=244, span="70-70"];
m18_28 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Console.WriteLine(options)", prediction=244, span="71-71"];
m18_29 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", span="61-61"];
m18_38 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63"];
m18_18 [cluster="System.Console.WriteLine(object)", file="ValueListAttributeParsingFixture.cs", label="Entry System.Console.WriteLine(object)", span="0-0"];
m18_31 [cluster="Unk.IsNull", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.IsNull", span=""];
m18_33 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", span="76-76"];
m18_34 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumThree()", span="78-78"];
m18_35 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(\r\n                    new string[] { ''file.a'', ''file.b'', ''file.c'', ''file.d'' }, options)", prediction=250, span="78-79"];
m18_37 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", span="76-76"];
m18_30 [cluster="CommandLine.Tests.Mocks.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", span="35-35"];
m18_32 [cluster="Unk.IsFalse", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.IsFalse", span=""];
m18_17 [cluster="Unk.IsTrue", file="ValueListAttributeParsingFixture.cs", label="Entry Unk.IsTrue", span=""];
m18_13 [cluster="CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", span="35-35"];
m18_0 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", span="40-40"];
m18_1 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", span="40-40"];
m18_46 [cluster="CommandLine.Tests.Mocks.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.Mocks.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", span="36-36"];
m18_47 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", span="97-97"];
m18_48 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumZero()", span="99-99"];
m18_50 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", span="97-97"];
m18_2 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", span="45-45"];
m18_3 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="var options = new SimpleOptionsWithValueList()", span="47-47"];
m18_4 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Result = base.Parser.ParseArguments(\r\n                new string[] { ''--switch'', ''file1.ext'', ''file2.ext'', ''file3.ext'', ''-s'', ''out.ext'' }, options)", prediction=251, span="47-48"];
m18_6 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file1.ext'', options.Items[0])", prediction=252, span="51-51"];
m18_7 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file2.ext'', options.Items[1])", prediction=252, span="52-52"];
m18_8 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''file3.ext'', options.Items[2])", prediction=252, span="53-53"];
m18_9 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(''out.ext'', options.StringValue)", prediction=252, span="54-54"];
m18_10 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.IsTrue(options.BooleanValue)", prediction=252, span="55-55"];
m18_11 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Console.WriteLine(options)", prediction=252, span="56-56"];
m18_12 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", span="45-45"];
m18_39 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", span="86-86"];
m18_40 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="var options = new OptionsWithValueListMaximumZero()", span="87-87"];
m18_43 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Assert.AreEqual(0, options.Junk.Count)", prediction=258, span="91-91"];
m18_44 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs", label="Console.WriteLine(options)", prediction=258, span="92-92"];
m18_45 [cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", span="86-86"];
m18_15 [cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="ValueListAttributeParsingFixture.cs", label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60"];
m18_51 [file="ValueListAttributeParsingFixture.cs", label="CommandLine.Tests.ValueListAttributeParsingFixture", span=""];
n12 -> d4  [color=darkseagreen4, key=1, label="CommandLine.Tests.ArgumentParserFixture", style=dashed];
n1 -> d5  [color=green, key=1, label=ae, style=dashed];
m0_0 -> m0_3  [color=darkseagreen4, key=1, label="T[]", style=dashed];
m0_0 -> m0_4  [color=green, key=1, label="T[]", style=dashed];
m0_2 -> m0_4  [color=green, key=1, label=i, style=dashed];
m0_2 -> m0_5  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_5 -> m0_5  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_11 -> m0_13  [color=green, key=1, label=i, style=dashed];
m0_10 -> m0_13  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_13 -> m0_13  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_14 -> m0_14  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_17 -> m1_14  [color=green, key=1, label="CommandLine.Tests.CommandLineParserBaseFixture", style=dashed];
m2_11 -> m2_15  [color=green, key=1, label=options, style=dashed];
m2_243 -> m2_246  [color=green, key=1, label=options, style=dashed];
m2_255 -> m2_258  [color=green, key=1, label=options, style=dashed];
m2_249 -> m2_252  [color=green, key=1, label=options, style=dashed];
m2_73 -> m2_76  [color=green, key=1, label=options, style=dashed];
m2_73 -> m2_77  [color=green, key=1, label=options, style=dashed];
m2_73 -> m2_78  [color=darkseagreen4, key=1, label=options, style=dashed];
m2_225 -> m2_228  [color=green, key=1, label=options, style=dashed];
m2_30 -> m2_33  [color=green, key=1, label=options, style=dashed];
m2_30 -> m2_34  [color=green, key=1, label=options, style=dashed];
m2_30 -> m2_35  [color=green, key=1, label=options, style=dashed];
m2_30 -> m2_37  [color=green, key=1, label=options, style=dashed];
m2_68 -> m2_70  [color=darkseagreen4, key=1, label=options, style=dashed];
m2_53 -> m2_57  [color=green, key=1, label=options, style=dashed];
m2_53 -> m2_59  [color=green, key=1, label=options, style=dashed];
m2_53 -> m2_61  [color=green, key=1, label=options, style=dashed];
m2_53 -> m2_63  [color=green, key=1, label=options, style=dashed];
m2_153 -> m2_156  [color=green, key=1, label=options, style=dashed];
m2_153 -> m2_157  [color=green, key=1, label=options, style=dashed];
m2_219 -> m2_222  [color=green, key=1, label=options, style=dashed];
m2_137 -> m2_140  [color=green, key=1, label=options, style=dashed];
m2_137 -> m2_141  [color=green, key=1, label=options, style=dashed];
m2_84 -> m2_87  [color=green, key=1, label=options, style=dashed];
m2_21 -> m2_24  [color=green, key=1, label=options, style=dashed];
m2_21 -> m2_25  [color=green, key=1, label=options, style=dashed];
m2_21 -> m2_27  [color=green, key=1, label=options, style=dashed];
m2_203 -> m2_206  [color=green, key=1, label=options, style=dashed];
m2_203 -> m2_207  [color=green, key=1, label=options, style=dashed];
m2_203 -> m2_208  [color=green, key=1, label=options, style=dashed];
m2_203 -> m2_209  [color=green, key=1, label=options, style=dashed];
m2_197 -> m2_200  [color=green, key=1, label=options, style=dashed];
m2_213 -> m2_216  [color=green, key=1, label=options, style=dashed];
m2_231 -> m2_234  [color=green, key=1, label=options, style=dashed];
m2_43 -> m2_46  [color=green, key=1, label=options, style=dashed];
m2_43 -> m2_47  [color=green, key=1, label=options, style=dashed];
m2_43 -> m2_48  [color=green, key=1, label=options, style=dashed];
m2_43 -> m2_50  [color=green, key=1, label=options, style=dashed];
m2_237 -> m2_240  [color=green, key=1, label=options, style=dashed];
m2_111 -> m2_114  [color=green, key=1, label=options, style=dashed];
m2_111 -> m2_115  [color=green, key=1, label=options, style=dashed];
m2_111 -> m2_116  [color=green, key=1, label=options, style=dashed];
m2_95 -> m2_98  [color=green, key=1, label=options, style=dashed];
m2_102 -> m2_105  [color=green, key=1, label=options, style=dashed];
m2_102 -> m2_106  [color=green, key=1, label=options, style=dashed];
m2_102 -> m2_107  [color=green, key=1, label=options, style=dashed];
m2_290 -> m2_3  [color=darkseagreen4, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_8  [color=darkseagreen4, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_13  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_23  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_32  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_45  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_55  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_69  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_75  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_86  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_97  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_104  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_113  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_121  [color=darkseagreen4, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_127  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_133  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_139  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_149  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_155  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_164  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_169  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_174  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_179  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_184  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_189  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_194  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_199  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_205  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_215  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_221  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_227  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_233  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_239  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_245  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_251  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_257  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_263  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_269  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_275  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_281  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m2_290 -> m2_287  [color=green, key=1, label="CommandLine.Tests.CommandLineParserFixture", style=dashed];
m3_1 -> m3_6  [color=green, key=1, label=writer, style=dashed];
m3_27 -> m3_32  [color=green, key=1, label=writer, style=dashed];
m3_16 -> m3_23  [color=green, key=1, label=writer, style=dashed];
m4_2 -> m4_4  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m4_3 -> m4_7  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m4_3 -> m4_8  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m4_3 -> m4_9  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m4_3 -> m4_10  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m4_3 -> m4_11  [color=darkseagreen4, key=1, label=yearsPart, style=dashed];
m4_5 -> m4_7  [color=darkseagreen4, key=1, label=y, style=dashed];
m4_5 -> m4_8  [color=darkseagreen4, key=1, label=y, style=dashed];
m4_52 -> m4_55  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_55 -> m4_55  [color=darkseagreen4, key=1, label=i, style=dashed];
m5_2 -> m5_8  [color=green, key=1, label=valueTwo, style=dashed];
m5_3 -> m5_12  [color=green, key=1, label=valueThree, style=dashed];
m5_5 -> m5_8  [color=green, key=1, label=e, style=dashed];
m5_5 -> m5_9  [color=green, key=1, label=e, style=dashed];
m5_5 -> m5_10  [color=darkseagreen4, key=1, label=e, style=dashed];
m5_5 -> m5_12  [color=green, key=1, label=e, style=dashed];
m5_5 -> m5_13  [color=green, key=1, label=e, style=dashed];
m5_5 -> m5_14  [color=darkseagreen4, key=1, label=e, style=dashed];
m5_5 -> m5_16  [color=green, key=1, label=e, style=dashed];
m5_5 -> m5_17  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_29  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_30  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_31  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_32  [color=darkseagreen4, key=1, label=e, style=dashed];
m5_26 -> m5_34  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_35  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_36  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_37  [color=darkseagreen4, key=1, label=e, style=dashed];
m5_26 -> m5_39  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_40  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_41  [color=green, key=1, label=e, style=dashed];
m5_26 -> m5_42  [color=darkseagreen4, key=1, label=e, style=dashed];
m5_26 -> m5_44  [color=green, key=1, label=e, style=dashed];
m6_1 -> m6_5  [color=darkseagreen4, key=1, label=hi, style=dashed];
m6_14 -> m6_18  [color=darkseagreen4, key=1, label=hi, style=dashed];
m7_34 -> m7_36  [color=darkseagreen4, key=1, label=helpText, style=dashed];
m7_1 -> m7_3  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_4  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_5  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_6  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_7  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_8  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_1 -> m7_9  [color=darkseagreen4, key=1, label=help, style=dashed];
m7_49 -> m7_8  [color=darkseagreen4, key=1, label="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions", style=dashed];
m8_194 -> m8_196  [color=darkseagreen4, key=1, label="CommandLine.Text.FormatOptionHelpTextEventArgs", style=dashed];
m8_194 -> m8_201  [color=darkseagreen4, key=1, label="CommandLine.Text.FormatOptionHelpTextEventArgs", style=dashed];
m8_87 -> m8_89  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_87 -> m8_90  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_87 -> m8_91  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_72 -> m8_74  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_72 -> m8_75  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_72 -> m8_76  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_187 -> m8_189  [color=darkseagreen4, key=1, label=options, style=dashed];
m8_1 -> m8_6  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_1 -> m8_7  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_1 -> m8_8  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_1 -> m8_9  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_1 -> m8_10  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_1 -> m8_11  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_1 -> m8_12  [color=darkseagreen4, key=1, label=help, style=dashed];
m8_4 -> m8_7  [color=darkseagreen4, key=1, label=errors, style=dashed];
m8_29 -> m8_31  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_29 -> m8_32  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_29 -> m8_33  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_29 -> m8_34  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_106 -> m8_109  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_106 -> m8_110  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_106 -> m8_111  [color=darkseagreen4, key=1, label=local, style=dashed];
m8_205 -> m8_11  [color=darkseagreen4, key=1, label="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp", style=dashed];
m8_206 -> m8_26  [color=darkseagreen4, key=1, label="CommandLine.Text.Tests.HelpTextFixture", style=dashed];
m8_206 -> m8_47  [color=darkseagreen4, key=1, label="CommandLine.Text.Tests.HelpTextFixture", style=dashed];
m8_206 -> m8_60  [color=darkseagreen4, key=1, label="CommandLine.Text.Tests.HelpTextFixture", style=dashed];
m9_31 -> m9_34  [color=green, key=1, label=options, style=dashed];
m9_31 -> m9_35  [color=green, key=1, label=options, style=dashed];
m9_24 -> m9_27  [color=green, key=1, label=options, style=dashed];
m9_24 -> m9_28  [color=green, key=1, label=options, style=dashed];
m9_50 -> m9_53  [color=green, key=1, label=options, style=dashed];
m9_50 -> m9_54  [color=green, key=1, label=options, style=dashed];
m9_50 -> m9_55  [color=green, key=1, label=options, style=dashed];
m9_8 -> m9_11  [color=green, key=1, label=options, style=dashed];
m10_49 -> m10_52  [color=green, key=1, label=options, style=dashed];
m10_53 -> m10_56  [color=green, key=1, label=options, style=dashed];
m10_29 -> m10_32  [color=green, key=1, label=options, style=dashed];
m10_33 -> m10_36  [color=green, key=1, label=options, style=dashed];
m10_3 -> m10_6  [color=green, key=1, label=options, style=dashed];
m10_7 -> m10_10  [color=green, key=1, label=options, style=dashed];
m10_69 -> m10_72  [color=green, key=1, label=options, style=dashed];
m10_73 -> m10_76  [color=green, key=1, label=options, style=dashed];
m10_73 -> m10_77  [color=green, key=1, label=options, style=dashed];
m10_73 -> m10_78  [color=green, key=1, label=options, style=dashed];
m10_73 -> m10_79  [color=green, key=1, label=options, style=dashed];
m11_13 -> m11_16  [color=green, key=1, label=options, style=dashed];
m11_56 -> m11_59  [color=green, key=1, label=options, style=dashed];
m11_56 -> m11_60  [color=green, key=1, label=options, style=dashed];
m11_56 -> m11_61  [color=green, key=1, label=options, style=dashed];
m11_56 -> m11_62  [color=green, key=1, label=options, style=dashed];
m11_56 -> m11_63  [color=green, key=1, label=options, style=dashed];
m11_19 -> m11_22  [color=green, key=1, label=options, style=dashed];
m11_46 -> m11_49  [color=green, key=1, label=options, style=dashed];
m11_46 -> m11_50  [color=green, key=1, label=options, style=dashed];
m11_46 -> m11_51  [color=green, key=1, label=options, style=dashed];
m11_46 -> m11_52  [color=green, key=1, label=options, style=dashed];
m11_25 -> m11_28  [color=green, key=1, label=options, style=dashed];
m11_131 -> m11_134  [color=green, key=1, label=options, style=dashed];
m11_131 -> m11_135  [color=green, key=1, label=options, style=dashed];
m11_131 -> m11_136  [color=green, key=1, label=options, style=dashed];
m11_131 -> m11_137  [color=green, key=1, label=options, style=dashed];
m11_138 -> m11_141  [color=green, key=1, label=options, style=dashed];
m11_138 -> m11_142  [color=green, key=1, label=options, style=dashed];
m11_138 -> m11_143  [color=green, key=1, label=options, style=dashed];
m11_138 -> m11_144  [color=green, key=1, label=options, style=dashed];
m11_145 -> m11_148  [color=green, key=1, label=options, style=dashed];
m11_145 -> m11_149  [color=green, key=1, label=options, style=dashed];
m11_145 -> m11_150  [color=green, key=1, label=options, style=dashed];
m11_145 -> m11_151  [color=green, key=1, label=options, style=dashed];
m11_152 -> m11_155  [color=green, key=1, label=options, style=dashed];
m11_152 -> m11_156  [color=green, key=1, label=options, style=dashed];
m11_152 -> m11_157  [color=green, key=1, label=options, style=dashed];
m11_152 -> m11_158  [color=green, key=1, label=options, style=dashed];
m11_152 -> m11_159  [color=green, key=1, label=options, style=dashed];
m11_152 -> m11_160  [color=green, key=1, label=options, style=dashed];
m11_3 -> m11_6  [color=green, key=1, label=options, style=dashed];
m11_196 -> m11_199  [color=green, key=1, label=options, style=dashed];
m11_196 -> m11_200  [color=green, key=1, label=options, style=dashed];
m11_196 -> m11_201  [color=green, key=1, label=options, style=dashed];
m11_196 -> m11_202  [color=green, key=1, label=options, style=dashed];
m11_39 -> m11_42  [color=green, key=1, label=options, style=dashed];
m11_39 -> m11_43  [color=green, key=1, label=options, style=dashed];
m11_186 -> m11_189  [color=green, key=1, label=options, style=dashed];
m11_186 -> m11_190  [color=green, key=1, label=options, style=dashed];
m11_186 -> m11_191  [color=green, key=1, label=options, style=dashed];
m11_186 -> m11_192  [color=green, key=1, label=options, style=dashed];
m11_111 -> m11_114  [color=green, key=1, label=options, style=dashed];
m11_111 -> m11_115  [color=green, key=1, label=options, style=dashed];
m11_111 -> m11_116  [color=green, key=1, label=options, style=dashed];
m11_117 -> m11_120  [color=green, key=1, label=options, style=dashed];
m11_117 -> m11_121  [color=green, key=1, label=options, style=dashed];
m11_117 -> m11_122  [color=green, key=1, label=options, style=dashed];
m11_123 -> m11_126  [color=green, key=1, label=options, style=dashed];
m11_123 -> m11_127  [color=green, key=1, label=options, style=dashed];
m11_123 -> m11_128  [color=green, key=1, label=options, style=dashed];
m11_77 -> m11_80  [color=green, key=1, label=options, style=dashed];
m11_105 -> m11_108  [color=green, key=1, label=options, style=dashed];
m11_178 -> m11_181  [color=green, key=1, label=options, style=dashed];
m11_31 -> m11_34  [color=green, key=1, label=options, style=dashed];
m11_31 -> m11_35  [color=green, key=1, label=options, style=dashed];
m11_204 -> m11_6  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_16  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_22  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_28  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_34  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_43  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_50  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_61  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_63  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_80  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_108  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_114  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_115  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_116  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_120  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_121  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_122  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_126  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_127  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_128  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_134  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_135  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_136  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_142  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_143  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_144  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_148  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_149  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_151  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_156  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_157  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_159  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_163  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_167  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_170  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_173  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_181  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_190  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_191  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_200  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m11_204 -> m11_201  [color=green, key=1, label="CommandLine.Tests.OptionArrayAttributeParsingFixture", style=dashed];
m12_9 -> m12_13  [color=darkseagreen4, key=1, label=oa, style=dashed];
m12_10 -> m12_12  [color=darkseagreen4, key=1, label=oi, style=dashed];
m12_44 -> m12_56  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>", style=dashed];
m12_44 -> m12_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>", style=dashed];
m12_44 -> m12_60  [color=darkseagreen4, key=1, label="ref CommandLine.OptionMap", style=dashed];
m12_44 -> m12_61  [color=darkseagreen4, key=1, label="ref CommandLine.OptionMap", style=dashed];
m12_48 -> m12_59  [color=green, key=1, label=attribute2, style=dashed];
m12_52 -> m12_59  [color=darkseagreen4, key=1, label=option3, style=dashed];
m12_62 -> m12_12  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder", style=dashed];
m12_62 -> m12_13  [color=darkseagreen4, key=1, label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder", style=dashed];
m13_31 -> m13_33  [color=green, key=1, label=pair, style=dashed];
m13_17 -> m13_19  [color=green, key=1, label=list, style=dashed];
m13_17 -> m13_20  [color=green, key=1, label=list, style=dashed];
m13_17 -> m13_21  [color=darkseagreen4, key=1, label=list, style=dashed];
m13_22 -> m13_24  [color=green, key=1, label=anotherList, style=dashed];
m13_22 -> m13_25  [color=darkseagreen4, key=1, label=anotherList, style=dashed];
m13_38 -> m13_40  [color=green, key=1, label=list, style=dashed];
m13_38 -> m13_41  [color=green, key=1, label=list, style=dashed];
m13_38 -> m13_42  [color=green, key=1, label=list, style=dashed];
m13_38 -> m13_43  [color=green, key=1, label=list, style=dashed];
m13_29 -> m13_47  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>", style=dashed];
m14_1 -> m14_4  [color=green, key=1, label=options, style=dashed];
m14_1 -> m14_5  [color=green, key=1, label=options, style=dashed];
m14_1 -> m14_6  [color=green, key=1, label=options, style=dashed];
m14_1 -> m14_7  [color=green, key=1, label=options, style=dashed];
m16_2 -> m16_6  [color=green, key=1, label=appOptions, style=dashed];
m16_7 -> m16_10  [color=green, key=1, label=plugInXOptions, style=dashed];
m16_7 -> m16_11  [color=green, key=1, label=plugInXOptions, style=dashed];
m17_28 -> m17_30  [color=darkseagreen4, key=1, label=values, style=dashed];
m17_28 -> m17_31  [color=darkseagreen4, key=1, label=values, style=dashed];
m17_18 -> m17_20  [color=green, key=1, label=values, style=dashed];
m18_20 -> m18_23  [color=green, key=1, label=options, style=dashed];
m18_20 -> m18_24  [color=green, key=1, label=options, style=dashed];
m18_20 -> m18_25  [color=green, key=1, label=options, style=dashed];
m18_20 -> m18_26  [color=green, key=1, label=options, style=dashed];
m18_20 -> m18_27  [color=green, key=1, label=options, style=dashed];
m18_20 -> m18_28  [color=green, key=1, label=options, style=dashed];
m18_3 -> m18_6  [color=green, key=1, label=options, style=dashed];
m18_3 -> m18_7  [color=green, key=1, label=options, style=dashed];
m18_3 -> m18_8  [color=green, key=1, label=options, style=dashed];
m18_3 -> m18_9  [color=green, key=1, label=options, style=dashed];
m18_3 -> m18_10  [color=green, key=1, label=options, style=dashed];
m18_3 -> m18_11  [color=green, key=1, label=options, style=dashed];
m18_40 -> m18_43  [color=green, key=1, label=options, style=dashed];
m18_40 -> m18_44  [color=green, key=1, label=options, style=dashed];
}
