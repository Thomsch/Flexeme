digraph  {
m0_50 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="93-93", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_51 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<FakeOptionsWithHelpTextEnum>(TypeInfo.Create(typeof(FakeOptionsWithHelpTextEnum)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="97-100", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_52 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="104-104", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_53 [label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="105-105", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_54 [label="lines[1].ShouldBeEquivalentTo(''--stringvalue    Define a string value here.'')", span="106-106", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_55 [label="lines[2].ShouldBeEquivalentTo(''--shape          Define a enum value here.'')", span="107-107", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_56 [label="lines[3].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="108-108", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_57 [label="lines[4].ShouldBeEquivalentTo(''--version        Display version information.'')", span="109-109", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_58 [label="lines[5].ShouldBeEquivalentTo(''post-options'')", span="110-110", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_59 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", span="93-93", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_disabled()", file="InstanceBuilder.cs"];
m0_16 [label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="82-82", cluster="CommandLine.Text.HelpText.HelpText(string, string)", file="InstanceBuilder.cs"];
m0_126 [label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="403-403", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="InstanceBuilder.cs"];
m0_22 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_23 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<FakeOptions>(TypeInfo.Create(typeof(FakeOptions)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="50-53", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_24 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="57-57", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_25 [label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="58-58", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_26 [label="lines[1].ShouldBeEquivalentTo(''--stringvalue    Define a string value here.'')", span="59-59", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_27 [label="lines[2].ShouldBeEquivalentTo(''-i               Define a int sequence here.'')", span="60-60", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_28 [label="lines[3].ShouldBeEquivalentTo(''-x               Define a boolean or switch value here.'')", span="61-61", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_29 [label="lines[4].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="62-62", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_30 [label="lines[5].ShouldBeEquivalentTo(''--version        Display version information.'')", span="63-63", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_31 [label="lines[6].ShouldBeEquivalentTo(''value pos. 0     Define a long value here.'')", span="64-64", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_32 [label="lines[7].ShouldBeEquivalentTo(''post-options'')", span="65-65", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_33 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="InstanceBuilder.cs"];
m0_66 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="131-131", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_67 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="135-135", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_68 [label="sut.MaximumDisplayWidth = 40", span="136-136", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_69 [label="sut.AddOptions(\r\n                new NotParsed<FakeOptionsWithLongDescription>(\r\n                    TypeInfo.Create(typeof(FakeOptionsWithLongDescription)),\r\n                    Enumerable.Empty<Error>()))", span="137-140", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_70 [label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="143-143", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_71 [label="lines[2].ShouldBeEquivalentTo(''  v, verbose    This is the description'')", span="144-144", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_72 [label="lines[3].ShouldBeEquivalentTo(''                of the verbosity to '')", span="146-146", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_73 [label="lines[4].ShouldBeEquivalentTo(''                test out the wrapping '')", span="147-147", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_74 [label="lines[5].ShouldBeEquivalentTo(''                capabilities of the '')", span="148-148", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_75 [label="lines[6].ShouldBeEquivalentTo(''                Help Text.'')", span="149-149", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_76 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="131-131", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="InstanceBuilder.cs"];
m0_217 [label="Entry CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", span="439-439", cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="InstanceBuilder.cs"];
m0_78 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="154-154", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_79 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="158-158", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_80 [label="sut.MaximumDisplayWidth = 40", span="159-159", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_81 [label="sut.AddOptions(\r\n                new NotParsed<FakeOptionsWithLongDescriptionAndNoSpaces>(\r\n                    TypeInfo.Create(typeof(FakeOptionsWithLongDescriptionAndNoSpaces)),\r\n                    Enumerable.Empty<Error>()))", span="160-163", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_82 [label="var lines = sut.ToString().ToNotEmptyLines()", span="166-166", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_83 [label="lines[1].ShouldBeEquivalentTo(''  v, verbose    Before '')", span="167-167", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_84 [label="lines[2].ShouldBeEquivalentTo(''                012345678901234567890123'')", span="168-168", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_85 [label="lines[3].ShouldBeEquivalentTo(''                After'')", span="169-169", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_86 [label="lines[4].ShouldBeEquivalentTo(''  input-file    Before '')", span="170-170", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_87 [label="lines[5].ShouldBeEquivalentTo(''                012345678901234567890123'')", span="171-171", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_88 [label="lines[6].ShouldBeEquivalentTo(''                456789 After'')", span="172-172", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_89 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="154-154", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="InstanceBuilder.cs"];
m0_190 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs"];
m0_116 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="InstanceBuilder.cs"];
m0_149 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="260-260", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_150 [label="var fakeResult = new NotParsed<FakeOptions>(\r\n                TypeInfo.Create(typeof(FakeOptions)),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new SequenceOutOfRangeError(new NameInfo(''i'', ''''))\r\n                    })", span="263-269", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_151 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="272-272", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_152 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="275-275", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_153 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="276-276", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_154 [label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="277-277", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_155 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="278-278", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_156 [label="lines[3].ShouldBeEquivalentTo(''Token 'badtoken' is not recognized.'')", span="279-279", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_157 [label="lines[4].ShouldBeEquivalentTo(''A sequence option 'i' is defined with fewer or more items than required.'')", span="280-280", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_158 [label="lines[5].ShouldBeEquivalentTo(''--stringvalue    Define a string value here.'')", span="281-281", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_159 [label="lines[6].ShouldBeEquivalentTo(''-i               Define a int sequence here.'')", span="282-282", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_160 [label="lines[7].ShouldBeEquivalentTo(''-x               Define a boolean or switch value here.'')", span="283-283", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_161 [label="lines[8].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="284-284", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_162 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="260-260", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_192 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="342-342", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_193 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<FakeOptionsWithHelpTextValue>(TypeInfo.Create(typeof(FakeOptionsWithHelpTextValue)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="346-349", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_194 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="353-353", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_195 [label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="354-354", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_196 [label="lines[1].ShouldBeEquivalentTo(''--stringvalue=STR            Define a string value here.'')", span="355-355", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_197 [label="lines[2].ShouldBeEquivalentTo(''-i INTSEQ                    Define a int sequence here.'')", span="356-356", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_198 [label="lines[3].ShouldBeEquivalentTo(''-x                           Define a boolean or switch value here.'')", span="357-357", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_199 [label="lines[4].ShouldBeEquivalentTo(''--help                       Display this help screen.'')", span="358-358", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_200 [label="lines[5].ShouldBeEquivalentTo(''--version                    Display version information.'')", span="359-359", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_201 [label="lines[6].ShouldBeEquivalentTo(''number (pos. 0) NUM          Define a long value here.'')", span="360-360", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_202 [label="lines[7].ShouldBeEquivalentTo(''paintcolor (pos. 1) COLOR    Define a color value here.'')", span="361-361", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_203 [label="lines[8].ShouldBeEquivalentTo(''post-options'', lines[8])", span="362-362", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_204 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", span="342-342", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options_and_values()", file="InstanceBuilder.cs"];
m0_39 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="70-70", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_40 [label="var sut = new HelpText { AddDashesToOption = true, AddEnumValuesToHelpText = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new NotParsed<FakeOptionsWithHelpTextEnum>(TypeInfo.Create(typeof(FakeOptionsWithHelpTextEnum)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''post-options'')", span="74-77", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", color=red, community=0, file="InstanceBuilder.cs"];
m0_41 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="81-81", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_42 [label="lines[0].ShouldBeEquivalentTo(''pre-options'')", span="82-82", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_43 [label="lines[1].ShouldBeEquivalentTo(''--stringvalue    Define a string value here.'')", span="83-83", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_44 [label="lines[2].ShouldBeEquivalentTo(''--shape          Define a enum value here. Valid values: Circle, Square,'')", span="84-84", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_45 [label="lines[3].ShouldBeEquivalentTo(''Triangle'')", span="85-85", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_46 [label="lines[4].ShouldBeEquivalentTo(''--help           Display this help screen.'')", span="86-86", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_47 [label="lines[5].ShouldBeEquivalentTo(''--version        Display version information.'')", span="87-87", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_48 [label="lines[6].ShouldBeEquivalentTo(''post-options'')", span="88-88", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_49 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", span="70-70", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_enum_options_enabled()", file="InstanceBuilder.cs"];
m0_120 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs"];
m0_90 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="177-177", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_91 [label="var sut = new HelpText(''Heading Info.'')", span="181-181", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_92 [label="sut.MaximumDisplayWidth = 40", span="182-182", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_93 [label="sut.AddPreOptionsLine(''Before 0123456789012345678901234567890123456789012 After'')\r\n                .AddOptions(new NotParsed<FakeOptionsForHelp>(TypeInfo.Create(typeof(FakeOptionsForHelp)), Enumerable.Empty<Error>()))\r\n                .AddPostOptionsLine(''Before 0123456789012345678901234567890123456789 After'')", span="183-185", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_94 [label="var lines = sut.ToString().ToNotEmptyLines()", span="188-188", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_95 [label="lines[1].ShouldBeEquivalentTo(''Before '')", span="189-189", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_96 [label="lines[2].ShouldBeEquivalentTo(''0123456789012345678901234567890123456789'')", span="190-190", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_97 [label="lines[3].ShouldBeEquivalentTo(''012 After'')", span="191-191", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_98 [label="lines[lines.Length - 3].ShouldBeEquivalentTo(''Before '')", span="192-192", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_99 [label="lines[lines.Length - 2].ShouldBeEquivalentTo(''0123456789012345678901234567890123456789'')", span="193-193", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_100 [label="lines[lines.Length - 1].ShouldBeEquivalentTo('' After'')", span="194-194", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_101 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="177-177", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="InstanceBuilder.cs"];
m0_177 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="315-315", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_178 [label="var verbTypes = Enumerable.Empty<Type>().Concat(\r\n                new[] { typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions) })", span="318-319", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_179 [label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance),\r\n                    verbTypes),\r\n                new Error[] { new HelpVerbRequestedError(null, null, false) })", span="320-323", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_180 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="326-326", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_181 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="329-329", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_182 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="331-331", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_183 [label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="332-332", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_184 [label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="333-333", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_185 [label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="334-334", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_186 [label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="335-335", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_187 [label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="336-336", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_188 [label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="337-337", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_189 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="315-315", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="InstanceBuilder.cs"];
m0_1 [label="string.Empty.ShouldBeEquivalentTo(new HelpText().ToString())", span="18-18", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="InstanceBuilder.cs"];
m0_2 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="InstanceBuilder.cs"];
m0_145 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="InstanceBuilder.cs"];
m0_36 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="InstanceBuilder.cs"];
m0_38 [label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15", cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="InstanceBuilder.cs"];
m0_34 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs"];
m0_123 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="InstanceBuilder.cs"];
m0_3 [label="Entry CommandLine.Text.HelpText.HelpText()", span="36-36", cluster="CommandLine.Text.HelpText.HelpText()", file="InstanceBuilder.cs"];
m0_60 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="115-115", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="InstanceBuilder.cs"];
m0_61 [label="var sut =\r\n                new HelpText(''Meta Value.'').AddOptions(\r\n                    new NotParsed<FakeOptionsWithMetaValue>(TypeInfo.Create(typeof(FakeOptionsWithMetaValue)), Enumerable.Empty<Error>()))", span="119-121", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="InstanceBuilder.cs"];
m0_62 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="124-124", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="InstanceBuilder.cs"];
m0_63 [label="lines[2].ShouldBeEquivalentTo(''i FILE, input-file=FILE    Required. Specify input FILE to be processed.'')", span="126-126", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="InstanceBuilder.cs"];
m0_64 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="115-115", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="InstanceBuilder.cs"];
m0_19 [label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="316-316", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="InstanceBuilder.cs"];
m0_125 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="InstanceBuilder.cs"];
m0_205 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", span="367-367", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_206 [label="ParserResult<FakeOptionsWithUsageText> result =\r\n                new NotParsed<FakeOptionsWithUsageText>(\r\n                    TypeInfo.Create(typeof(FakeOptionsWithUsageText)), Enumerable.Empty<Error>())", span="370-372", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_207 [label="var text = HelpText.RenderUsageText(result)", span="375-375", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_208 [label="var lines = text.ToNotEmptyLines()", span="378-378", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_209 [label="lines[0].ShouldBeEquivalentTo(''Normal scenario:'')", span="381-381", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_210 [label="lines[1].ShouldBeEquivalentTo(''  mono testapp.exe --input file.bin --output out.bin'')", span="382-382", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_211 [label="lines[2].ShouldBeEquivalentTo(''Logging warnings:'')", span="383-383", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_212 [label="lines[3].ShouldBeEquivalentTo(''  mono testapp.exe -w --input file.bin'')", span="384-384", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_213 [label="lines[4].ShouldBeEquivalentTo(''Logging errors:'')", span="385-385", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_214 [label="lines[5].ShouldBeEquivalentTo(''  mono testapp.exe -w --input file.bin'')", span="386-386", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_215 [label="lines[6].ShouldBeEquivalentTo(''  mono testapp.exe --input=file.bin --warns'')", span="387-387", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_216 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", span="367-367", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.RenderUsageText_returns_properly_formatted_text()", file="InstanceBuilder.cs"];
m0_121 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilder.cs"];
m0_37 [label="Entry CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="336-336", cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="InstanceBuilder.cs"];
m0_146 [label="Entry lambda expression", span="241-241", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_128 [label="err.Tag", span="220-220", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_130 [label="return ''ERR '' + ((BadFormatTokenError)err).Token;", span="223-223", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_132 [label="return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;", span="225-225", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_134 [label="return ''ERR '' + ((UnknownOptionError)err).Token;", span="227-227", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_136 [label="return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;", span="229-229", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_138 [label="return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;", span="231-231", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_142 [label="return ''ERR '' + ((BadVerbSelectedError)err).Token;", span="235-235", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_127 [label="Entry lambda expression", span="218-239", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_129 [label="ErrorType.BadFormatTokenError", span="222-222", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_131 [label="ErrorType.MissingValueOptionError", span="224-224", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_133 [label="ErrorType.UnknownOptionError", span="226-226", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_135 [label="ErrorType.MissingRequiredOptionError", span="228-228", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_137 [label="ErrorType.SequenceOutOfRangeError", span="230-230", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_139 [label="ErrorType.NoVerbSelectedError", span="232-232", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_141 [label="ErrorType.BadVerbSelectedError", span="234-234", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_143 [label="throw new InvalidOperationException();", span="237-237", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_140 [label="return ''ERR no-verb-selected'';", span="233-233", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_144 [label="Exit lambda expression", span="218-239", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_147 [label="string.Empty", span="241-241", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_148 [label="Exit lambda expression", span="241-241", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_191 [label="Entry CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", span="34-34", cluster="CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", file="InstanceBuilder.cs"];
m0_35 [label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29", cluster="CommandLine.TypeInfo.Create(System.Type)", file="InstanceBuilder.cs"];
m0_65 [label="Entry CommandLine.Text.HelpText.HelpText(string)", span="59-59", cluster="CommandLine.Text.HelpText.HelpText(string)", file="InstanceBuilder.cs"];
m0_117 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs"];
m0_164 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="InstanceBuilder.cs"];
m0_4 [label="Entry CommandLine.Text.HelpText.ToString()", span="496-496", cluster="CommandLine.Text.HelpText.ToString()", file="InstanceBuilder.cs"];
m0_165 [label="Entry Unk.StartWithEquivalent", span="", cluster="Unk.StartWithEquivalent", file="InstanceBuilder.cs"];
m0_163 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="251-251", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="InstanceBuilder.cs"];
m0_122 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="InstanceBuilder.cs"];
m0_17 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="27-27", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="InstanceBuilder.cs"];
m0_119 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilder.cs"];
m0_18 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="60-60", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", file="InstanceBuilder.cs"];
m0_20 [label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="326-326", cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="InstanceBuilder.cs"];
m0_21 [label="Entry string.ToNotEmptyLines()", span="10-10", cluster="string.ToNotEmptyLines()", file="InstanceBuilder.cs"];
m0_118 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilder.cs"];
m0_6 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_7 [label="var sut =\r\n                new HelpText(new HeadingInfo(''Unit-tests'', ''2.0''), new CopyrightInfo(true, ''Author'', 2005, 2013))\r\n                    .AddPreOptionsLine(''pre-options line 1'')\r\n                    .AddPreOptionsLine(''pre-options line 2'')\r\n                    .AddPostOptionsLine(''post-options line 1'')\r\n                    .AddPostOptionsLine(''post-options line 2'')", span="26-31", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_8 [label="var lines = sut.ToString().ToNotEmptyLines()", span="34-34", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_9 [label="lines[0].ShouldBeEquivalentTo(''Unit-tests 2.0'')", span="36-36", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_10 [label="lines[1].ShouldBeEquivalentTo(''Copyright (C) 2005 - 2013 Author'')", span="37-37", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_11 [label="lines[2].ShouldBeEquivalentTo(''pre-options line 1'')", span="38-38", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_12 [label="lines[3].ShouldBeEquivalentTo(''pre-options line 2'')", span="39-39", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_13 [label="lines[4].ShouldBeEquivalentTo(''post-options line 1'')", span="40-40", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_14 [label="lines[5].ShouldBeEquivalentTo(''post-options line 2'')", span="41-41", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_15 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="InstanceBuilder.cs"];
m0_102 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="200-200", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_103 [label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance)),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new MissingValueOptionError(new NameInfo(''x'', ''switch'')),\r\n                        new UnknownOptionError(''unknown''),\r\n                        new MissingRequiredOptionError(new NameInfo('''', ''missing'')),\r\n                        //new MutuallyExclusiveSetError(new NameInfo(''z'', ''''), string.Empty),\r\n                        new SequenceOutOfRangeError(new NameInfo(''s'', ''sequence'')),\r\n                        new NoVerbSelectedError(),\r\n                        new BadVerbSelectedError(''badverb''),\r\n                        new HelpRequestedError(), // should be ignored\r\n                        new HelpVerbRequestedError(null, null, false) // should be ignored \r\n                    })", span="203-217", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_104 [label="Func<Error, string> fakeRenderer = err =>\r\n                {\r\n                    switch (err.Tag)\r\n                    {\r\n                        case ErrorType.BadFormatTokenError:\r\n                            return ''ERR '' + ((BadFormatTokenError)err).Token;\r\n                        case ErrorType.MissingValueOptionError:\r\n                            return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.UnknownOptionError:\r\n                            return ''ERR '' + ((UnknownOptionError)err).Token;\r\n                        case ErrorType.MissingRequiredOptionError:\r\n                            return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.SequenceOutOfRangeError:\r\n                            return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;\r\n                        case ErrorType.NoVerbSelectedError:\r\n                            return ''ERR no-verb-selected'';\r\n                        case ErrorType.BadVerbSelectedError:\r\n                            return ''ERR '' + ((BadVerbSelectedError)err).Token;\r\n                        default:\r\n                            throw new InvalidOperationException();\r\n                    }\r\n                }", span="218-239", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_106 [label="var errorsText = HelpText.RenderParsingErrorsText(fakeResult, fakeRenderer, fakeMutExclRenderer, 2)", span="244-244", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_105 [label="Func<IEnumerable<MutuallyExclusiveSetError>, string> fakeMutExclRenderer =\r\n                _ => string.Empty", span="240-241", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_107 [label="var lines = errorsText.ToNotEmptyLines()", span="247-247", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_108 [label="lines[0].ShouldBeEquivalentTo(''  ERR badtoken'')", span="249-249", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_109 [label="lines[1].ShouldBeEquivalentTo(''  ERR x, switch'')", span="250-250", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_110 [label="lines[2].ShouldBeEquivalentTo(''  ERR unknown'')", span="251-251", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_111 [label="lines[3].ShouldBeEquivalentTo(''  ERR missing'')", span="252-252", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_112 [label="lines[4].ShouldBeEquivalentTo(''  ERR s, sequence'')", span="253-253", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_113 [label="lines[5].ShouldBeEquivalentTo(''  ERR no-verb-selected'')", span="254-254", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_114 [label="lines[6].ShouldBeEquivalentTo(''  ERR badverb'')", span="255-255", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_115 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="200-200", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_166 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="289-289", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_167 [label="var fakeResult = new NotParsed<object>(\r\n                TypeInfo.Create(typeof(NullInstance)),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(''commit'', typeof(CommitOptions), true)\r\n                    })", span="292-297", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_168 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="300-300", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_169 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="303-303", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_170 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="305-305", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_171 [label="lines[1].Should().StartWithEquivalent(''Copyright (c)'')", span="306-306", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_172 [label="lines[2].ShouldBeEquivalentTo(''-p, --patch    Use the interactive patch selection interface to chose which'')", span="307-307", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_173 [label="lines[3].ShouldBeEquivalentTo(''changes to commit.'')", span="308-308", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_174 [label="lines[4].ShouldBeEquivalentTo(''--amend        Used to amend the tip of the current branch.'')", span="309-309", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_175 [label="lines[5].ShouldBeEquivalentTo(''--help         Display this help screen.'')", span="310-310", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_176 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="289-289", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="InstanceBuilder.cs"];
m0_124 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilder.cs"];
m0_77 [label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0", cluster="string.Split(string[], System.StringSplitOptions)", file="InstanceBuilder.cs"];
m0_5 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilder.cs"];
m1_41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="SharedAssemblyInfo.cs"];
m1_42 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="SharedAssemblyInfo.cs"];
m1_43 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptions>)result).Value.IntSequence))", span="123-123", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="SharedAssemblyInfo.cs"];
m1_44 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="SharedAssemblyInfo.cs"];
m1_441 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", file="SharedAssemblyInfo.cs"];
m1_350 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="814-814", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_351 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="817-821", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_352 [label="Assert.Throws<ApplicationException>(test)", span="824-824", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_353 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="814-814", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="SharedAssemblyInfo.cs"];
m1_331 [label="Entry Unk.>", span="", cluster="Unk.>", file="SharedAssemblyInfo.cs"];
m1_63 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="SharedAssemblyInfo.cs"];
m1_152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SharedAssemblyInfo.cs"];
m1_153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SharedAssemblyInfo.cs"];
m1_154 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.LongSequence)", span="395-395", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SharedAssemblyInfo.cs"];
m1_155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="SharedAssemblyInfo.cs"];
m1_55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="SharedAssemblyInfo.cs"];
m1_259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="615-615", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SharedAssemblyInfo.cs"];
m1_260 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SharedAssemblyInfo.cs"];
m1_261 [label="Assert.True(expected.Equals(((Parsed<FakeOptions>)result).Value.StringValue))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SharedAssemblyInfo.cs"];
m1_262 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="615-615", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="SharedAssemblyInfo.cs"];
m1_327 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="786-786", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_328 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_329 [label="Assert.Throws<ApplicationException>(test)", span="796-796", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_330 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="786-786", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="719-719", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="SharedAssemblyInfo.cs"];
m1_301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="724-728", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="SharedAssemblyInfo.cs"];
m1_302 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableLong)", span="731-731", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="SharedAssemblyInfo.cs"];
m1_303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="719-719", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="SharedAssemblyInfo.cs"];
m1_79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SharedAssemblyInfo.cs"];
m1_167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SharedAssemblyInfo.cs"];
m1_168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SharedAssemblyInfo.cs"];
m1_169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SharedAssemblyInfo.cs"];
m1_171 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="449-449", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SharedAssemblyInfo.cs"];
m1_170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SharedAssemblyInfo.cs"];
m1_172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="SharedAssemblyInfo.cs"];
m1_251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="594-594", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="597-597", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="600-604", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_254 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="607-607", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="594-594", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_387 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="871-871", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="SharedAssemblyInfo.cs"];
m1_388 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="874-878", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="SharedAssemblyInfo.cs"];
m1_389 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeInterfaceOptions>)result).Value.InputFile)", span="881-881", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="SharedAssemblyInfo.cs"];
m1_390 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="871-871", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="SharedAssemblyInfo.cs"];
m1_109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="SharedAssemblyInfo.cs"];
m1_204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="SharedAssemblyInfo.cs"];
m1_74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_77 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>)result).Errors))", span="206-206", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_239 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="SharedAssemblyInfo.cs"];
m1_92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="234-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_95 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>)result).Errors))", span="244-244", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="SharedAssemblyInfo.cs"];
m1_449 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="SharedAssemblyInfo.cs"];
m1_307 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SharedAssemblyInfo.cs"];
m1_308 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SharedAssemblyInfo.cs"];
m1_310 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName.Value)", span="753-753", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SharedAssemblyInfo.cs"];
m1_311 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName))", span="755-755", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SharedAssemblyInfo.cs"];
m1_309 [label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName != null", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SharedAssemblyInfo.cs"];
m1_312 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="SharedAssemblyInfo.cs"];
m1_291 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="SharedAssemblyInfo.cs"];
m1_299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="SharedAssemblyInfo.cs"];
m1_432 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="976-976", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="SharedAssemblyInfo.cs"];
m1_433 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithTwoRequired>>(() => new FakeOptionWithTwoRequired()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="979-983", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="SharedAssemblyInfo.cs"];
m1_435 [label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="987-987", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="SharedAssemblyInfo.cs"];
m1_434 [label="var errors = ((NotParsed<FakeOptionWithTwoRequired>)result).Errors", span="986-986", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="SharedAssemblyInfo.cs"];
m1_436 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="976-976", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="SharedAssemblyInfo.cs"];
m1_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="SharedAssemblyInfo.cs"];
m1_243 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="575-575", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_244 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="578-578", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_245 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_246 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="588-588", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_247 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="575-575", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_113 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="287-287", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_8 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="SharedAssemblyInfo.cs"];
m1_373 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="SharedAssemblyInfo.cs"];
m1_105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="SharedAssemblyInfo.cs"];
m1_416 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="933-933", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="SharedAssemblyInfo.cs"];
m1_417 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="938-942", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="SharedAssemblyInfo.cs"];
m1_418 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithScalarValueAndSequenceStringAdjacent>)result).Value)", span="945-945", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="SharedAssemblyInfo.cs"];
m1_419 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="933-933", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="SharedAssemblyInfo.cs"];
m1_83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="SharedAssemblyInfo.cs"];
m1_144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SharedAssemblyInfo.cs"];
m1_145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SharedAssemblyInfo.cs"];
m1_146 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceWithoutRange>)result).Value.LongSequence)", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SharedAssemblyInfo.cs"];
m1_147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="SharedAssemblyInfo.cs"];
m1_56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_57 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_58 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequenceAndOnlyMaxConstraint>)result).Value.StringSequence))", span="168-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_361 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="833-833", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_362 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="836-840", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_363 [label="type == ParserResultType.NotParsed", span="843-843", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_364 [label="((NotParsed<FakeOptionsWithNamedAndEmptySets>)result).Errors.Should().HaveCount(x => x == expected)", span="845-845", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_365 [label="type == ParserResultType.Parsed", span="847-847", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_366 [label="result.Should().BeOfType<Parsed<FakeOptionsWithNamedAndEmptySets>>()", span="849-849", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_367 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="833-833", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_32 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="SharedAssemblyInfo.cs"];
m1_33 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="SharedAssemblyInfo.cs"];
m1_34 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequence>)result).Value.IntSequence))", span="101-101", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="SharedAssemblyInfo.cs"];
m1_35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="SharedAssemblyInfo.cs"];
m1_442 [label="Entry lambda expression", span="987-987", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_14 [label=fakeOptions, span="27-27", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_13 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_15 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_21 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_22 [label="new FakeOptions()", span="48-48", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_23 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_28 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_29 [label="new FakeOptionsWithDouble()", span="71-71", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_30 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_37 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_38 [label="new FakeOptionsWithSequence()", span="95-95", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_39 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_45 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_46 [label="new FakeOptions()", span="117-117", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_47 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_52 [label="Entry lambda expression", span="140-140", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_53 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_54 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_60 [label="Entry lambda expression", span="162-162", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_62 [label="Exit lambda expression", span="162-162", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_71 [label="Entry lambda expression", span="181-181", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_73 [label="Exit lambda expression", span="181-181", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_80 [label="Entry lambda expression", span="200-200", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_82 [label="Exit lambda expression", span="200-200", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_89 [label="Entry lambda expression", span="219-219", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="219-219", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_91 [label="Exit lambda expression", span="219-219", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_97 [label="Entry lambda expression", span="238-238", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_99 [label="Exit lambda expression", span="238-238", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_106 [label="Entry lambda expression", span="262-262", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_107 [label="new FakeOptionsWithEnum()", span="262-262", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_108 [label="Exit lambda expression", span="262-262", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_116 [label="Entry lambda expression", span="281-281", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_117 [label="new FakeOptionsWithEnum()", span="281-281", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_118 [label="Exit lambda expression", span="281-281", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_124 [label="Entry lambda expression", span="300-300", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_125 [label="new FakeOptionsWithEnum()", span="300-300", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_126 [label="Exit lambda expression", span="300-300", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_132 [label="Entry lambda expression", span="319-319", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_133 [label="new FakeOptionsWithEnum()", span="319-319", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_134 [label="Exit lambda expression", span="319-319", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_141 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_142 [label="new FakeOptionsWithValues()", span="344-344", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_143 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_148 [label="Entry lambda expression", span="367-367", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_149 [label="new FakeOptionsWithSequenceWithoutRange()", span="367-367", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_150 [label="Exit lambda expression", span="367-367", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_156 [label="Entry lambda expression", span="389-389", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_157 [label="new FakeOptionsWithSequenceAndSeparator()", span="389-389", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_158 [label="Exit lambda expression", span="389-389", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_164 [label="Entry lambda expression", span="411-411", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_165 [label="new FakeOptionsWithSequenceAndSeparator()", span="411-411", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_166 [label="Exit lambda expression", span="411-411", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_174 [label="Entry lambda expression", span="440-440", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_177 [label="Entry lambda expression", span="441-443", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_175 [label="new FakeOptionsWithValues()", span="440-440", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_176 [label="Exit lambda expression", span="440-440", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_179 [label="Exit lambda expression", span="441-443", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_181 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_183 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_185 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_187 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_195 [label="Entry lambda expression", span="466-466", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_196 [label="new FakeOptionsWithSets()", span="466-466", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_197 [label="Exit lambda expression", span="466-466", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_205 [label="Entry lambda expression", span="486-486", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_206 [label="new FakeOptionWithRequiredAndSet()", span="486-486", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_207 [label="Exit lambda expression", span="486-486", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_214 [label="Entry lambda expression", span="506-506", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_215 [label="new FakeOptionWithRequiredAndSet()", span="506-506", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_216 [label="Exit lambda expression", span="506-506", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_222 [label="Entry lambda expression", span="525-525", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_223 [label="new FakeOptionWithRequired()", span="525-525", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_224 [label="Exit lambda expression", span="525-525", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_231 [label="Entry lambda expression", span="544-544", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_232 [label="new FakeOptions()", span="544-544", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_233 [label="Exit lambda expression", span="544-544", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_240 [label="Entry lambda expression", span="563-563", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_241 [label="new FakeOptions()", span="563-563", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_242 [label="Exit lambda expression", span="563-563", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_248 [label="Entry lambda expression", span="582-582", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_249 [label="new FakeOptions()", span="582-582", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_250 [label="Exit lambda expression", span="582-582", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_256 [label="Entry lambda expression", span="601-601", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_257 [label="new FakeOptions()", span="601-601", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_258 [label="Exit lambda expression", span="601-601", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_264 [label="Entry lambda expression", span="621-621", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_265 [label="new FakeOptions()", span="621-621", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_266 [label="Exit lambda expression", span="621-621", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_272 [label="Entry lambda expression", span="640-640", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_273 [label="new FakeOptionsWithRequiredValue()", span="640-640", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_274 [label="Exit lambda expression", span="640-640", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_280 [label="Entry lambda expression", span="662-662", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_281 [label="new FakeOptions()", span="662-662", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_282 [label="Exit lambda expression", span="662-662", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_288 [label="Entry lambda expression", span="681-681", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_289 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="681-681", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_290 [label="Exit lambda expression", span="681-681", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_296 [label="Entry lambda expression", span="703-703", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_297 [label="new FakeOptionsWithNullables()", span="703-703", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_298 [label="Exit lambda expression", span="703-703", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_304 [label="Entry lambda expression", span="725-725", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_305 [label="new FakeOptionsWithNullables()", span="725-725", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_306 [label="Exit lambda expression", span="725-725", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_314 [label="Entry lambda expression", span="745-745", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_315 [label="new FakeOptionsWithFSharpOption()", span="745-745", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_316 [label="Exit lambda expression", span="745-745", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_324 [label="Entry lambda expression", span="769-769", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_325 [label="new FakeOptionsWithFSharpOption()", span="769-769", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_326 [label="Exit lambda expression", span="769-769", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_332 [label="Entry lambda expression", span="789-793", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_333 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_334 [label="Exit lambda expression", span="789-793", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_335 [label="Entry lambda expression", span="790-790", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_336 [label="new FakeOptionsWithMinZero()", span="790-790", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_337 [label="Exit lambda expression", span="790-790", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_343 [label="Entry lambda expression", span="803-807", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_344 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="803-807", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_345 [label="Exit lambda expression", span="803-807", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_346 [label="Entry lambda expression", span="804-804", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_347 [label="new FakeOptionsWithMaxZero()", span="804-804", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_348 [label="Exit lambda expression", span="804-804", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_354 [label="Entry lambda expression", span="817-821", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_355 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="817-821", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_356 [label="Exit lambda expression", span="817-821", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_357 [label="Entry lambda expression", span="818-818", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_358 [label="new FakeOptionsWithMinMaxZero()", span="818-818", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_359 [label="Exit lambda expression", span="818-818", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_375 [label="x == expected", span="845-845", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_370 [label="Entry lambda expression", span="837-837", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_374 [label="Entry lambda expression", span="845-845", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_371 [label="new FakeOptionsWithNamedAndEmptySets()", span="837-837", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_372 [label="Exit lambda expression", span="837-837", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_376 [label="Exit lambda expression", span="845-845", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_385 [label="x == expected", span="865-865", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_381 [label="Entry lambda expression", span="859-859", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_384 [label="Entry lambda expression", span="865-865", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_382 [label="new FakeOptions()", span="859-859", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_383 [label="Exit lambda expression", span="859-859", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_386 [label="Exit lambda expression", span="865-865", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_391 [label="Entry lambda expression", span="875-875", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_392 [label="new FakeInterfaceOptions()", span="875-875", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_393 [label="Exit lambda expression", span="875-875", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_407 [label="x == expected", span="904-904", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_402 [label="Entry lambda expression", span="896-896", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_406 [label="Entry lambda expression", span="904-904", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_403 [label="new FakeOptionsWithTwoRequiredAndSets()", span="896-896", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_404 [label="Exit lambda expression", span="896-896", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_408 [label="Exit lambda expression", span="904-904", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_413 [label="Entry lambda expression", span="920-920", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_414 [label="new FakeOptionsWithRequiredValue()", span="920-920", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_415 [label="Exit lambda expression", span="920-920", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_420 [label="Entry lambda expression", span="939-939", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_421 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="939-939", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_422 [label="Exit lambda expression", span="939-939", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_429 [label="Entry lambda expression", span="958-958", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_430 [label="new FakeOptions()", span="958-958", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_431 [label="Exit lambda expression", span="958-958", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_443 [label="x == expected", span="987-987", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_438 [label="Entry lambda expression", span="980-980", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_439 [label="new FakeOptionWithTwoRequired()", span="980-980", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_440 [label="Exit lambda expression", span="980-980", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_444 [label="Exit lambda expression", span="987-987", cluster="lambda expression", file="SharedAssemblyInfo.cs"];
m1_10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="SharedAssemblyInfo.cs"];
m1_31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="SharedAssemblyInfo.cs"];
m1_159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="SharedAssemblyInfo.cs"];
m1_377 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="855-855", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="SharedAssemblyInfo.cs"];
m1_378 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="858-862", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="SharedAssemblyInfo.cs"];
m1_379 [label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == expected)", span="865-865", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="SharedAssemblyInfo.cs"];
m1_380 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="855-855", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="SharedAssemblyInfo.cs"];
m1_395 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="892-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_396 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithTwoRequiredAndSets>>(() => new FakeOptionsWithTwoRequiredAndSets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="895-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_397 [label="type == ParserResultType.NotParsed", span="902-902", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_398 [label="((NotParsed<FakeOptionsWithTwoRequiredAndSets>)result).Errors.Should().HaveCount(x => x == expected)", span="904-904", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_399 [label="type == ParserResultType.Parsed", span="906-906", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_400 [label="result.Should().BeOfType<Parsed<FakeOptionsWithTwoRequiredAndSets>>()", span="908-908", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_401 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="892-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="SharedAssemblyInfo.cs"];
m1_225 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="SharedAssemblyInfo.cs"];
m1_48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_50 [label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Value.StringSequence))", span="146-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_122 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="306-306", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="SharedAssemblyInfo.cs"];
m1_24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SharedAssemblyInfo.cs"];
m1_25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SharedAssemblyInfo.cs"];
m1_26 [label="Assert.Equal(expected, ((Parsed<FakeOptionsWithDouble>)result).Value.DoubleValue)", span="77-77", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SharedAssemblyInfo.cs"];
m1_27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="SharedAssemblyInfo.cs"];
m1_275 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="SharedAssemblyInfo.cs"];
m1_360 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="SharedAssemblyInfo.cs"];
m1_12 [label="Entry Unk.True", span="", cluster="Unk.True", file="SharedAssemblyInfo.cs"];
m1_267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="633-633", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_268 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="636-636", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_269 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="639-643", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_270 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithRequiredValue>)result).Errors))", span="646-646", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_271 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="633-633", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_226 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="537-537", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_227 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="540-540", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_228 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="543-547", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_229 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="550-550", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_230 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="537-537", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_317 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="SharedAssemblyInfo.cs"];
m1_313 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="SharedAssemblyInfo.cs"];
m1_188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="SharedAssemblyInfo.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SharedAssemblyInfo.cs"];
m1_1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SharedAssemblyInfo.cs"];
m1_2 [label="var expectedResult = new NotParsed<FakeOptions>(\r\n                typeof(FakeOptions), new Error[] { new HelpRequestedError() })", span="22-23", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SharedAssemblyInfo.cs"];
m1_3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SharedAssemblyInfo.cs"];
m1_4 [label="Assert.True(expectedResult.Equals(result))", span="33-33", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SharedAssemblyInfo.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="SharedAssemblyInfo.cs"];
m1_217 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_218 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="521-521", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_219 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="524-528", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_220 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequired>)result).Errors))", span="531-531", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_221 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="SharedAssemblyInfo.cs"];
m1_208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="497-497", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SharedAssemblyInfo.cs"];
m1_209 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="499-503", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SharedAssemblyInfo.cs"];
m1_210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="505-509", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SharedAssemblyInfo.cs"];
m1_211 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequiredAndSet>)result).Errors))", span="512-512", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SharedAssemblyInfo.cs"];
m1_212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="497-497", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="SharedAssemblyInfo.cs"];
m1_11 [label="Entry CommandLine.NotParsed<T>.Equals(object)", span="211-211", cluster="CommandLine.NotParsed<T>.Equals(object)", file="SharedAssemblyInfo.cs"];
m1_36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="SharedAssemblyInfo.cs"];
m1_127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_130 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="SharedAssemblyInfo.cs"];
m1_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="SharedAssemblyInfo.cs"];
m1_409 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="914-914", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="SharedAssemblyInfo.cs"];
m1_410 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="919-923", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="SharedAssemblyInfo.cs"];
m1_411 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithRequiredValue>)result).Value)", span="926-926", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="SharedAssemblyInfo.cs"];
m1_412 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="914-914", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="SharedAssemblyInfo.cs"];
m1_84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_87 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraint>)result).Errors))", span="225-225", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SharedAssemblyInfo.cs"];
m1_65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SharedAssemblyInfo.cs"];
m1_66 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SharedAssemblyInfo.cs"];
m1_67 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Errors))", span="187-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SharedAssemblyInfo.cs"];
m1_68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="SharedAssemblyInfo.cs"];
m1_135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SharedAssemblyInfo.cs"];
m1_136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SharedAssemblyInfo.cs"];
m1_137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SharedAssemblyInfo.cs"];
m1_138 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="350-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SharedAssemblyInfo.cs"];
m1_139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="SharedAssemblyInfo.cs"];
m1_423 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="SharedAssemblyInfo.cs"];
m1_349 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="SharedAssemblyInfo.cs"];
m1_369 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="SharedAssemblyInfo.cs"];
m1_198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="SharedAssemblyInfo.cs"];
m1_263 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="SharedAssemblyInfo.cs"];
m1_70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="SharedAssemblyInfo.cs"];
m1_16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SharedAssemblyInfo.cs"];
m1_17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SharedAssemblyInfo.cs"];
m1_18 [label="Assert.Equal(expected, ((Parsed<FakeOptions>)result).Value.LongValue)", span="54-54", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SharedAssemblyInfo.cs"];
m1_19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="SharedAssemblyInfo.cs"];
m1_394 [label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2", cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="SharedAssemblyInfo.cs"];
m1_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SharedAssemblyInfo.cs"];
m1_318 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="763-763", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SharedAssemblyInfo.cs"];
m1_319 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="768-772", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SharedAssemblyInfo.cs"];
m1_321 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset.Value)", span="777-777", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SharedAssemblyInfo.cs"];
m1_322 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset))", span="779-779", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SharedAssemblyInfo.cs"];
m1_320 [label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset != null", span="775-775", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SharedAssemblyInfo.cs"];
m1_323 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="763-763", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="SharedAssemblyInfo.cs"];
m1_424 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="951-951", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SharedAssemblyInfo.cs"];
m1_425 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="954-954", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SharedAssemblyInfo.cs"];
m1_426 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="957-961", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SharedAssemblyInfo.cs"];
m1_427 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value)", span="964-964", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SharedAssemblyInfo.cs"];
m1_428 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="951-951", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="SharedAssemblyInfo.cs"];
m1_151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="SharedAssemblyInfo.cs"];
m1_194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="304-304", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="SharedAssemblyInfo.cs"];
m1_180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="SharedAssemblyInfo.cs"];
m1_160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_162 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.StringSequence)", span="417-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="SharedAssemblyInfo.cs"];
m1_213 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SharedAssemblyInfo.cs"];
m1_292 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="SharedAssemblyInfo.cs"];
m1_293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="702-706", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="SharedAssemblyInfo.cs"];
m1_294 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableInt)", span="709-709", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="SharedAssemblyInfo.cs"];
m1_295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="SharedAssemblyInfo.cs"];
m1_234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="556-556", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_235 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="559-559", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="562-566", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_237 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="569-569", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="556-556", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="SharedAssemblyInfo.cs"];
m1_199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="478-478", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SharedAssemblyInfo.cs"];
m1_200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="480-483", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SharedAssemblyInfo.cs"];
m1_201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SharedAssemblyInfo.cs"];
m1_202 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionWithRequiredAndSet>)result).Value)", span="492-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SharedAssemblyInfo.cs"];
m1_203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="478-478", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="SharedAssemblyInfo.cs"];
m1_283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="674-674", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_284 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="677-677", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="680-684", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_286 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceMinMaxEqual>)result).Errors))", span="687-687", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="674-674", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="SharedAssemblyInfo.cs"];
m1_9 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="SharedAssemblyInfo.cs"];
m1_405 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", file="SharedAssemblyInfo.cs"];
m1_101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SharedAssemblyInfo.cs"];
m1_102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SharedAssemblyInfo.cs"];
m1_103 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithEnum>)result).Value.Colors)", span="268-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SharedAssemblyInfo.cs"];
m1_104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="SharedAssemblyInfo.cs"];
m1_445 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="992-992", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="SharedAssemblyInfo.cs"];
m1_446 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="997-1001", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="SharedAssemblyInfo.cs"];
m1_447 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeImmutableOptions>)result).Value)", span="1004-1004", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="SharedAssemblyInfo.cs"];
m1_448 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="992-992", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="SharedAssemblyInfo.cs"];
m1_100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="SharedAssemblyInfo.cs"];
m1_368 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="SharedAssemblyInfo.cs"];
m1_276 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SharedAssemblyInfo.cs"];
m1_277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="661-665", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SharedAssemblyInfo.cs"];
m1_278 [label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value.StringValue)", span="668-668", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SharedAssemblyInfo.cs"];
m1_279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="SharedAssemblyInfo.cs"];
m1_7 [label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="192-192", cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="SharedAssemblyInfo.cs"];
m1_115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="SharedAssemblyInfo.cs"];
m1_437 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="SharedAssemblyInfo.cs"];
m1_40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="SharedAssemblyInfo.cs"];
m1_338 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="SharedAssemblyInfo.cs"];
m1_339 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="800-800", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_340 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="803-807", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_341 [label="Assert.Throws<ApplicationException>(test)", span="810-810", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_342 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="800-800", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="SharedAssemblyInfo.cs"];
m1_189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SharedAssemblyInfo.cs"];
m1_190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="458-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SharedAssemblyInfo.cs"];
m1_191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SharedAssemblyInfo.cs"];
m1_192 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSets>)result).Errors))", span="472-472", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SharedAssemblyInfo.cs"];
m1_193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="SharedAssemblyInfo.cs"];
m1_450 [label=fakeOptions, span="", file="SharedAssemblyInfo.cs"];
m1_451 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="SharedAssemblyInfo.cs"];
m1_452 [label=int, span="", file="SharedAssemblyInfo.cs"];
m1_453 [label=int, span="", file="SharedAssemblyInfo.cs"];
m1_454 [label=int, span="", file="SharedAssemblyInfo.cs"];
m1_455 [label=int, span="", file="SharedAssemblyInfo.cs"];
m3_0 [label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="SpecificationGuards.cs"];
m3_1 [label="return spec => spec.ConversionType.ToDescriptor() == DescriptorType.Scalar && (spec.Min > 0 || spec.Max > 0);", span="18-18", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="SpecificationGuards.cs"];
m3_2 [label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="SpecificationGuards.cs"];
m3_7 [label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="SpecificationGuards.cs"];
m3_8 [label="return spec => spec.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max;", span="23-24", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", color=green, community=1, file="SpecificationGuards.cs"];
m3_9 [label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21", cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="SpecificationGuards.cs"];
m3_3 [label="Entry lambda expression", span="18-18", cluster="lambda expression", file="SpecificationGuards.cs"];
m3_11 [label="spec.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max", span="23-24", cluster="lambda expression", color=green, community=1, file="SpecificationGuards.cs"];
m3_10 [label="Entry lambda expression", span="23-24", cluster="lambda expression", file="SpecificationGuards.cs"];
m3_12 [label="Exit lambda expression", span="23-24", cluster="lambda expression", file="SpecificationGuards.cs"];
m3_4 [label="spec.ConversionType.ToDescriptor() == DescriptorType.Scalar && (spec.Min > 0 || spec.Max > 0)", span="18-18", cluster="lambda expression", file="SpecificationGuards.cs"];
m3_5 [label="Exit lambda expression", span="18-18", cluster="lambda expression", file="SpecificationGuards.cs"];
m3_6 [label="Entry System.Type.ToDescriptor()", span="22-22", cluster="System.Type.ToDescriptor()", file="SpecificationGuards.cs"];
m3_13 [label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="76-76", cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="SpecificationGuards.cs"];
m3_14 [label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="81-81", cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="SpecificationGuards.cs"];
m0_50 -> m0_51  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_3  [key=2, style=dotted];
m0_51 -> m0_19  [key=2, style=dotted];
m0_51 -> m0_34  [key=2, style=dotted];
m0_51 -> m0_35  [key=2, style=dotted];
m0_51 -> m0_36  [key=2, style=dotted];
m0_51 -> m0_37  [key=2, style=dotted];
m0_51 -> m0_20  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_4  [key=2, style=dotted];
m0_52 -> m0_21  [key=2, style=dotted];
m0_52 -> m0_38  [key=2, style=dotted];
m0_52 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_52 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_52 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_52 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_52 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_5  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_5  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_5  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_5  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_5  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_5  [key=2, style=dotted];
m0_59 -> m0_50  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_3  [key=2, style=dotted];
m0_23 -> m0_19  [key=2, style=dotted];
m0_23 -> m0_34  [key=2, style=dotted];
m0_23 -> m0_35  [key=2, style=dotted];
m0_23 -> m0_36  [key=2, style=dotted];
m0_23 -> m0_37  [key=2, style=dotted];
m0_23 -> m0_20  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_4  [key=2, style=dotted];
m0_24 -> m0_21  [key=2, style=dotted];
m0_24 -> m0_38  [key=2, style=dotted];
m0_24 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_24 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_24 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_24 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_24 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_24 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_24 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_5  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_5  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_5  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_5  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_5  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_5  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_5  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_5  [key=2, style=dotted];
m0_33 -> m0_22  [key=0, style=bold, color=blue];
m0_66 -> m0_67  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_65  [key=2, style=dotted];
m0_67 -> m0_17  [key=2, style=dotted];
m0_67 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label=sut];
m0_67 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label=sut];
m0_68 -> m0_69  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_34  [key=2, style=dotted];
m0_69 -> m0_35  [key=2, style=dotted];
m0_69 -> m0_36  [key=2, style=dotted];
m0_69 -> m0_37  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_4  [key=2, style=dotted];
m0_70 -> m0_77  [key=2, style=dotted];
m0_70 -> m0_72  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_70 -> m0_73  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_70 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_70 -> m0_75  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_5  [key=2, style=dotted];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_5  [key=2, style=dotted];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_5  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_5  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_5  [key=2, style=dotted];
m0_76 -> m0_66  [key=0, style=bold, color=blue];
m0_78 -> m0_79  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_65  [key=2, style=dotted];
m0_79 -> m0_17  [key=2, style=dotted];
m0_79 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label=sut];
m0_79 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label=sut];
m0_80 -> m0_81  [key=0, style=solid];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_34  [key=2, style=dotted];
m0_81 -> m0_35  [key=2, style=dotted];
m0_81 -> m0_36  [key=2, style=dotted];
m0_81 -> m0_37  [key=2, style=dotted];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_4  [key=2, style=dotted];
m0_82 -> m0_21  [key=2, style=dotted];
m0_82 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_82 -> m0_85  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_82 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_82 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_82 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_5  [key=2, style=dotted];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_5  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_5  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_5  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_5  [key=2, style=dotted];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_5  [key=2, style=dotted];
m0_89 -> m0_78  [key=0, style=bold, color=blue];
m0_149 -> m0_150  [key=0, style=solid];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_34  [key=2, style=dotted];
m0_150 -> m0_35  [key=2, style=dotted];
m0_150 -> m0_116  [key=2, style=dotted];
m0_150 -> m0_121  [key=2, style=dotted];
m0_150 -> m0_118  [key=2, style=dotted];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_163  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_4  [key=2, style=dotted];
m0_152 -> m0_21  [key=2, style=dotted];
m0_152 -> m0_38  [key=2, style=dotted];
m0_152 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_152 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_152 -> m0_156  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_152 -> m0_157  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_152 -> m0_158  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_152 -> m0_159  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_152 -> m0_160  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_152 -> m0_161  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_164  [key=2, style=dotted];
m0_153 -> m0_165  [key=2, style=dotted];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_164  [key=2, style=dotted];
m0_154 -> m0_165  [key=2, style=dotted];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_5  [key=2, style=dotted];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_5  [key=2, style=dotted];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_5  [key=2, style=dotted];
m0_158 -> m0_159  [key=0, style=solid];
m0_158 -> m0_5  [key=2, style=dotted];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_5  [key=2, style=dotted];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_5  [key=2, style=dotted];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_5  [key=2, style=dotted];
m0_162 -> m0_149  [key=0, style=bold, color=blue];
m0_192 -> m0_193  [key=0, style=solid];
m0_193 -> m0_194  [key=0, style=solid];
m0_193 -> m0_3  [key=2, style=dotted];
m0_193 -> m0_19  [key=2, style=dotted];
m0_193 -> m0_34  [key=2, style=dotted];
m0_193 -> m0_35  [key=2, style=dotted];
m0_193 -> m0_36  [key=2, style=dotted];
m0_193 -> m0_37  [key=2, style=dotted];
m0_193 -> m0_20  [key=2, style=dotted];
m0_194 -> m0_195  [key=0, style=solid];
m0_194 -> m0_4  [key=2, style=dotted];
m0_194 -> m0_21  [key=2, style=dotted];
m0_194 -> m0_38  [key=2, style=dotted];
m0_194 -> m0_196  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_194 -> m0_197  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_194 -> m0_198  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_194 -> m0_199  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_194 -> m0_200  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_194 -> m0_201  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_194 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_194 -> m0_203  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_5  [key=2, style=dotted];
m0_196 -> m0_197  [key=0, style=solid];
m0_196 -> m0_5  [key=2, style=dotted];
m0_197 -> m0_198  [key=0, style=solid];
m0_197 -> m0_5  [key=2, style=dotted];
m0_198 -> m0_199  [key=0, style=solid];
m0_198 -> m0_5  [key=2, style=dotted];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_5  [key=2, style=dotted];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_5  [key=2, style=dotted];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_5  [key=2, style=dotted];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_5  [key=2, style=dotted];
m0_203 -> m0_204  [key=0, style=solid];
m0_203 -> m0_5  [key=2, style=dotted];
m0_204 -> m0_192  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid, color=red];
m0_40 -> m0_41  [key=0, style=solid, color=red];
m0_40 -> m0_3  [key=2, style=dotted, color=red];
m0_40 -> m0_19  [key=2, style=dotted, color=red];
m0_40 -> m0_34  [key=2, style=dotted, color=red];
m0_40 -> m0_35  [key=2, style=dotted, color=red];
m0_40 -> m0_36  [key=2, style=dotted, color=red];
m0_40 -> m0_37  [key=2, style=dotted, color=red];
m0_40 -> m0_20  [key=2, style=dotted, color=red];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_4  [key=2, style=dotted];
m0_41 -> m0_21  [key=2, style=dotted];
m0_41 -> m0_38  [key=2, style=dotted];
m0_41 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_41 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_41 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_41 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_41 -> m0_47  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_41 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_5  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_5  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_5  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_5  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_5  [key=2, style=dotted];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_5  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_5  [key=2, style=dotted];
m0_49 -> m0_39  [key=0, style=bold, color=blue];
m0_90 -> m0_91  [key=0, style=solid];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_65  [key=2, style=dotted];
m0_91 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label=sut];
m0_91 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=sut];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_19  [key=2, style=dotted];
m0_93 -> m0_34  [key=2, style=dotted];
m0_93 -> m0_35  [key=2, style=dotted];
m0_93 -> m0_36  [key=2, style=dotted];
m0_93 -> m0_37  [key=2, style=dotted];
m0_93 -> m0_20  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_4  [key=2, style=dotted];
m0_94 -> m0_21  [key=2, style=dotted];
m0_94 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_94 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_94 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_94 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_94 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_5  [key=2, style=dotted];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_5  [key=2, style=dotted];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_5  [key=2, style=dotted];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_5  [key=2, style=dotted];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_5  [key=2, style=dotted];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_5  [key=2, style=dotted];
m0_101 -> m0_90  [key=0, style=bold, color=blue];
m0_177 -> m0_178  [key=0, style=solid];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_36  [key=2, style=dotted];
m0_178 -> m0_190  [key=2, style=dotted];
m0_179 -> m0_180  [key=0, style=solid];
m0_179 -> m0_34  [key=2, style=dotted];
m0_179 -> m0_191  [key=2, style=dotted];
m0_179 -> m0_125  [key=2, style=dotted];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_163  [key=2, style=dotted];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_4  [key=2, style=dotted];
m0_181 -> m0_21  [key=2, style=dotted];
m0_181 -> m0_38  [key=2, style=dotted];
m0_181 -> m0_183  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_181 -> m0_184  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_181 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_181 -> m0_186  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_181 -> m0_187  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_181 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_164  [key=2, style=dotted];
m0_182 -> m0_165  [key=2, style=dotted];
m0_183 -> m0_184  [key=0, style=solid];
m0_183 -> m0_164  [key=2, style=dotted];
m0_183 -> m0_165  [key=2, style=dotted];
m0_184 -> m0_185  [key=0, style=solid];
m0_184 -> m0_5  [key=2, style=dotted];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_5  [key=2, style=dotted];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_5  [key=2, style=dotted];
m0_187 -> m0_188  [key=0, style=solid];
m0_187 -> m0_5  [key=2, style=dotted];
m0_188 -> m0_189  [key=0, style=solid];
m0_188 -> m0_5  [key=2, style=dotted];
m0_189 -> m0_177  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_60 -> m0_61  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_65  [key=2, style=dotted];
m0_61 -> m0_34  [key=2, style=dotted];
m0_61 -> m0_35  [key=2, style=dotted];
m0_61 -> m0_36  [key=2, style=dotted];
m0_61 -> m0_37  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_4  [key=2, style=dotted];
m0_62 -> m0_21  [key=2, style=dotted];
m0_62 -> m0_38  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_5  [key=2, style=dotted];
m0_64 -> m0_60  [key=0, style=bold, color=blue];
m0_205 -> m0_206  [key=0, style=solid];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_34  [key=2, style=dotted];
m0_206 -> m0_35  [key=2, style=dotted];
m0_206 -> m0_36  [key=2, style=dotted];
m0_207 -> m0_208  [key=0, style=solid];
m0_207 -> m0_217  [key=2, style=dotted];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_21  [key=2, style=dotted];
m0_208 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_208 -> m0_211  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_208 -> m0_212  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_208 -> m0_213  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_208 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_208 -> m0_215  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_5  [key=2, style=dotted];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_5  [key=2, style=dotted];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_5  [key=2, style=dotted];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_5  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_213 -> m0_5  [key=2, style=dotted];
m0_214 -> m0_215  [key=0, style=solid];
m0_214 -> m0_5  [key=2, style=dotted];
m0_215 -> m0_216  [key=0, style=solid];
m0_215 -> m0_5  [key=2, style=dotted];
m0_216 -> m0_205  [key=0, style=bold, color=blue];
m0_146 -> m0_147  [key=0, style=solid];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_131  [key=0, style=solid];
m0_128 -> m0_133  [key=0, style=solid];
m0_128 -> m0_135  [key=0, style=solid];
m0_128 -> m0_137  [key=0, style=solid];
m0_128 -> m0_139  [key=0, style=solid];
m0_128 -> m0_141  [key=0, style=solid];
m0_128 -> m0_143  [key=0, style=solid];
m0_130 -> m0_144  [key=0, style=solid];
m0_132 -> m0_144  [key=0, style=solid];
m0_134 -> m0_144  [key=0, style=solid];
m0_136 -> m0_144  [key=0, style=solid];
m0_138 -> m0_144  [key=0, style=solid];
m0_142 -> m0_144  [key=0, style=solid];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_127 -> m0_132  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_127 -> m0_134  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_127 -> m0_136  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_127 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_127 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_129 -> m0_130  [key=0, style=solid];
m0_131 -> m0_132  [key=0, style=solid];
m0_133 -> m0_134  [key=0, style=solid];
m0_135 -> m0_136  [key=0, style=solid];
m0_137 -> m0_138  [key=0, style=solid];
m0_139 -> m0_140  [key=0, style=solid];
m0_141 -> m0_142  [key=0, style=solid];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_145  [key=2, style=dotted];
m0_140 -> m0_144  [key=0, style=solid];
m0_144 -> m0_127  [key=0, style=bold, color=blue];
m0_147 -> m0_148  [key=0, style=solid];
m0_148 -> m0_146  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_16  [key=2, style=dotted];
m0_7 -> m0_17  [key=2, style=dotted];
m0_7 -> m0_18  [key=2, style=dotted];
m0_7 -> m0_19  [key=2, style=dotted];
m0_7 -> m0_20  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_4  [key=2, style=dotted];
m0_8 -> m0_21  [key=2, style=dotted];
m0_8 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_8 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_8 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_8 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_5  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_5  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_5  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_5  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_5  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_5  [key=2, style=dotted];
m0_15 -> m0_6  [key=0, style=bold, color=blue];
m0_102 -> m0_103  [key=0, style=solid];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_34  [key=2, style=dotted];
m0_103 -> m0_35  [key=2, style=dotted];
m0_103 -> m0_116  [key=2, style=dotted];
m0_103 -> m0_117  [key=2, style=dotted];
m0_103 -> m0_118  [key=2, style=dotted];
m0_103 -> m0_119  [key=2, style=dotted];
m0_103 -> m0_120  [key=2, style=dotted];
m0_103 -> m0_121  [key=2, style=dotted];
m0_103 -> m0_122  [key=2, style=dotted];
m0_103 -> m0_123  [key=2, style=dotted];
m0_103 -> m0_124  [key=2, style=dotted];
m0_103 -> m0_125  [key=2, style=dotted];
m0_103 -> m0_106  [key=1, style=dashed, color=darkseagreen4, label=fakeResult];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_128  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_104 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_104 -> m0_132  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_104 -> m0_134  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_104 -> m0_136  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_104 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_104 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m0_104 -> m0_106  [key=1, style=dashed, color=darkseagreen4, label=fakeRenderer];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_126  [key=2, style=dotted];
m0_105 -> m0_106  [key=0, style=solid];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_21  [key=2, style=dotted];
m0_107 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_107 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_107 -> m0_111  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_107 -> m0_112  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_107 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_107 -> m0_114  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_5  [key=2, style=dotted];
m0_109 -> m0_110  [key=0, style=solid];
m0_109 -> m0_5  [key=2, style=dotted];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_5  [key=2, style=dotted];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_5  [key=2, style=dotted];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_5  [key=2, style=dotted];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_5  [key=2, style=dotted];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_5  [key=2, style=dotted];
m0_115 -> m0_102  [key=0, style=bold, color=blue];
m0_166 -> m0_167  [key=0, style=solid];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_34  [key=2, style=dotted];
m0_167 -> m0_35  [key=2, style=dotted];
m0_167 -> m0_125  [key=2, style=dotted];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_163  [key=2, style=dotted];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_4  [key=2, style=dotted];
m0_169 -> m0_21  [key=2, style=dotted];
m0_169 -> m0_38  [key=2, style=dotted];
m0_169 -> m0_171  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_169 -> m0_172  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_169 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_169 -> m0_174  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_169 -> m0_175  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_164  [key=2, style=dotted];
m0_170 -> m0_165  [key=2, style=dotted];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_164  [key=2, style=dotted];
m0_171 -> m0_165  [key=2, style=dotted];
m0_172 -> m0_173  [key=0, style=solid];
m0_172 -> m0_5  [key=2, style=dotted];
m0_173 -> m0_174  [key=0, style=solid];
m0_173 -> m0_5  [key=2, style=dotted];
m0_174 -> m0_175  [key=0, style=solid];
m0_174 -> m0_5  [key=2, style=dotted];
m0_175 -> m0_176  [key=0, style=solid];
m0_175 -> m0_5  [key=2, style=dotted];
m0_176 -> m0_166  [key=0, style=bold, color=blue];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_9  [key=2, style=dotted];
m1_42 -> m1_10  [key=2, style=dotted];
m1_42 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_36  [key=2, style=dotted];
m1_43 -> m1_12  [key=2, style=dotted];
m1_44 -> m1_41  [key=0, style=bold, color=blue];
m1_350 -> m1_351  [key=0, style=solid];
m1_351 -> m1_352  [key=0, style=solid];
m1_352 -> m1_353  [key=0, style=solid];
m1_352 -> m1_331  [key=2, style=dotted];
m1_353 -> m1_350  [key=0, style=bold, color=blue];
m1_152 -> m1_153  [key=0, style=solid];
m1_152 -> m1_154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_9  [key=2, style=dotted];
m1_153 -> m1_10  [key=2, style=dotted];
m1_153 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_154 -> m1_155  [key=0, style=solid];
m1_154 -> m1_105  [key=2, style=dotted];
m1_155 -> m1_152  [key=0, style=bold, color=blue];
m1_259 -> m1_260  [key=0, style=solid];
m1_259 -> m1_261  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_260 -> m1_261  [key=0, style=solid];
m1_260 -> m1_9  [key=2, style=dotted];
m1_260 -> m1_10  [key=2, style=dotted];
m1_260 -> m1_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_261 -> m1_262  [key=0, style=solid];
m1_261 -> m1_263  [key=2, style=dotted];
m1_261 -> m1_12  [key=2, style=dotted];
m1_262 -> m1_259  [key=0, style=bold, color=blue];
m1_327 -> m1_328  [key=0, style=solid];
m1_328 -> m1_329  [key=0, style=solid];
m1_329 -> m1_330  [key=0, style=solid];
m1_329 -> m1_331  [key=2, style=dotted];
m1_330 -> m1_327  [key=0, style=bold, color=blue];
m1_300 -> m1_301  [key=0, style=solid];
m1_300 -> m1_302  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m1_301 -> m1_302  [key=0, style=solid];
m1_301 -> m1_9  [key=2, style=dotted];
m1_301 -> m1_10  [key=2, style=dotted];
m1_301 -> m1_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_302 -> m1_303  [key=0, style=solid];
m1_302 -> m1_105  [key=2, style=dotted];
m1_303 -> m1_300  [key=0, style=bold, color=blue];
m1_167 -> m1_168  [key=0, style=solid];
m1_168 -> m1_169  [key=0, style=solid];
m1_168 -> m1_140  [key=2, style=dotted];
m1_168 -> m1_171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_169 -> m1_170  [key=0, style=solid];
m1_171 -> m1_172  [key=0, style=solid];
m1_171 -> m1_105  [key=2, style=dotted];
m1_170 -> m1_171  [key=0, style=solid];
m1_170 -> m1_9  [key=2, style=dotted];
m1_170 -> m1_173  [key=2, style=dotted];
m1_170 -> m1_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_170 -> m1_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_172 -> m1_167  [key=0, style=bold, color=blue];
m1_251 -> m1_252  [key=0, style=solid];
m1_252 -> m1_253  [key=0, style=solid];
m1_252 -> m1_239  [key=2, style=dotted];
m1_252 -> m1_254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_253 -> m1_254  [key=0, style=solid];
m1_253 -> m1_9  [key=2, style=dotted];
m1_253 -> m1_10  [key=2, style=dotted];
m1_253 -> m1_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_254 -> m1_255  [key=0, style=solid];
m1_254 -> m1_36  [key=2, style=dotted];
m1_254 -> m1_12  [key=2, style=dotted];
m1_255 -> m1_251  [key=0, style=bold, color=blue];
m1_387 -> m1_388  [key=0, style=solid];
m1_387 -> m1_389  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_388 -> m1_389  [key=0, style=solid];
m1_388 -> m1_9  [key=2, style=dotted];
m1_388 -> m1_10  [key=2, style=dotted];
m1_388 -> m1_391  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_389 -> m1_390  [key=0, style=solid];
m1_389 -> m1_105  [key=2, style=dotted];
m1_390 -> m1_387  [key=0, style=bold, color=blue];
m1_74 -> m1_75  [key=0, style=solid];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_79  [key=2, style=dotted];
m1_75 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_9  [key=2, style=dotted];
m1_76 -> m1_10  [key=2, style=dotted];
m1_76 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_77 -> m1_78  [key=0, style=solid];
m1_77 -> m1_36  [key=2, style=dotted];
m1_77 -> m1_12  [key=2, style=dotted];
m1_78 -> m1_74  [key=0, style=bold, color=blue];
m1_92 -> m1_93  [key=0, style=solid];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_79  [key=2, style=dotted];
m1_93 -> m1_95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_9  [key=2, style=dotted];
m1_94 -> m1_10  [key=2, style=dotted];
m1_94 -> m1_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_36  [key=2, style=dotted];
m1_95 -> m1_12  [key=2, style=dotted];
m1_96 -> m1_92  [key=0, style=bold, color=blue];
m1_307 -> m1_308  [key=0, style=solid];
m1_307 -> m1_310  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_307 -> m1_311  [key=1, style=dashed, color=darkseagreen4, label=bool];
m1_308 -> m1_309  [key=0, style=solid];
m1_308 -> m1_9  [key=2, style=dotted];
m1_308 -> m1_10  [key=2, style=dotted];
m1_308 -> m1_314  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_308 -> m1_310  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_308 -> m1_311  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_310 -> m1_311  [key=0, style=solid];
m1_310 -> m1_105  [key=2, style=dotted];
m1_311 -> m1_312  [key=0, style=solid];
m1_311 -> m1_313  [key=2, style=dotted];
m1_311 -> m1_105  [key=2, style=dotted];
m1_309 -> m1_310  [key=0, style=solid];
m1_309 -> m1_311  [key=0, style=solid];
m1_312 -> m1_307  [key=0, style=bold, color=blue];
m1_432 -> m1_433  [key=0, style=solid];
m1_432 -> m1_435  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_432 -> m1_443  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_433 -> m1_434  [key=0, style=solid];
m1_433 -> m1_9  [key=2, style=dotted];
m1_433 -> m1_10  [key=2, style=dotted];
m1_433 -> m1_438  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_435 -> m1_436  [key=0, style=solid];
m1_435 -> m1_437  [key=2, style=dotted];
m1_435 -> m1_368  [key=2, style=dotted];
m1_435 -> m1_369  [key=2, style=dotted];
m1_435 -> m1_442  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_434 -> m1_435  [key=0, style=solid];
m1_436 -> m1_432  [key=0, style=bold, color=blue];
m1_243 -> m1_244  [key=0, style=solid];
m1_244 -> m1_245  [key=0, style=solid];
m1_244 -> m1_239  [key=2, style=dotted];
m1_244 -> m1_246  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_245 -> m1_246  [key=0, style=solid];
m1_245 -> m1_9  [key=2, style=dotted];
m1_245 -> m1_10  [key=2, style=dotted];
m1_245 -> m1_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_246 -> m1_247  [key=0, style=solid];
m1_246 -> m1_36  [key=2, style=dotted];
m1_246 -> m1_12  [key=2, style=dotted];
m1_247 -> m1_243  [key=0, style=bold, color=blue];
m1_110 -> m1_111  [key=0, style=solid];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_115  [key=2, style=dotted];
m1_111 -> m1_70  [key=2, style=dotted];
m1_111 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_9  [key=2, style=dotted];
m1_112 -> m1_10  [key=2, style=dotted];
m1_112 -> m1_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_36  [key=2, style=dotted];
m1_113 -> m1_12  [key=2, style=dotted];
m1_114 -> m1_110  [key=0, style=bold, color=blue];
m1_416 -> m1_417  [key=0, style=solid];
m1_416 -> m1_418  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m1_417 -> m1_418  [key=0, style=solid];
m1_417 -> m1_9  [key=2, style=dotted];
m1_417 -> m1_10  [key=2, style=dotted];
m1_417 -> m1_420  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_418 -> m1_419  [key=0, style=solid];
m1_418 -> m1_105  [key=2, style=dotted];
m1_419 -> m1_416  [key=0, style=bold, color=blue];
m1_144 -> m1_145  [key=0, style=solid];
m1_144 -> m1_146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m1_145 -> m1_146  [key=0, style=solid];
m1_145 -> m1_9  [key=2, style=dotted];
m1_145 -> m1_10  [key=2, style=dotted];
m1_145 -> m1_148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_146 -> m1_147  [key=0, style=solid];
m1_146 -> m1_105  [key=2, style=dotted];
m1_147 -> m1_144  [key=0, style=bold, color=blue];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_9  [key=2, style=dotted];
m1_57 -> m1_10  [key=2, style=dotted];
m1_57 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_36  [key=2, style=dotted];
m1_58 -> m1_12  [key=2, style=dotted];
m1_59 -> m1_56  [key=0, style=bold, color=blue];
m1_361 -> m1_362  [key=0, style=solid];
m1_361 -> m1_363  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m1_361 -> m1_364  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_361 -> m1_375  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_361 -> m1_365  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m1_362 -> m1_363  [key=0, style=solid];
m1_362 -> m1_9  [key=2, style=dotted];
m1_362 -> m1_10  [key=2, style=dotted];
m1_362 -> m1_370  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_362 -> m1_364  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_362 -> m1_366  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_363 -> m1_364  [key=0, style=solid];
m1_363 -> m1_365  [key=0, style=solid];
m1_364 -> m1_367  [key=0, style=solid];
m1_364 -> m1_368  [key=2, style=dotted];
m1_364 -> m1_369  [key=2, style=dotted];
m1_364 -> m1_374  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_365 -> m1_366  [key=0, style=solid];
m1_365 -> m1_367  [key=0, style=solid];
m1_366 -> m1_367  [key=0, style=solid];
m1_366 -> m1_368  [key=2, style=dotted];
m1_366 -> m1_331  [key=2, style=dotted];
m1_367 -> m1_361  [key=0, style=bold, color=blue];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m1_32 -> m1_173  [key=3, color=darkorchid, style=bold, label="Parameter variable System.StringComparer nameComparer"];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_9  [key=2, style=dotted];
m1_33 -> m1_10  [key=2, style=dotted];
m1_33 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_36  [key=2, style=dotted];
m1_34 -> m1_12  [key=2, style=dotted];
m1_35 -> m1_32  [key=0, style=bold, color=blue];
m1_442 -> m1_443  [key=0, style=solid];
m1_14 -> m1_15  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_15 -> m1_13  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_6  [key=2, style=dotted];
m1_23 -> m1_21  [key=0, style=bold, color=blue];
m1_28 -> m1_29  [key=0, style=solid];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_31  [key=2, style=dotted];
m1_30 -> m1_28  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_40  [key=2, style=dotted];
m1_39 -> m1_37  [key=0, style=bold, color=blue];
m1_45 -> m1_46  [key=0, style=solid];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_6  [key=2, style=dotted];
m1_47 -> m1_45  [key=0, style=bold, color=blue];
m1_52 -> m1_53  [key=0, style=solid];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_55  [key=2, style=dotted];
m1_54 -> m1_52  [key=0, style=bold, color=blue];
m1_60 -> m1_61  [key=0, style=solid];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_63  [key=2, style=dotted];
m1_62 -> m1_60  [key=0, style=bold, color=blue];
m1_71 -> m1_72  [key=0, style=solid];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_55  [key=2, style=dotted];
m1_73 -> m1_71  [key=0, style=bold, color=blue];
m1_80 -> m1_81  [key=0, style=solid];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_83  [key=2, style=dotted];
m1_82 -> m1_80  [key=0, style=bold, color=blue];
m1_89 -> m1_90  [key=0, style=solid];
m1_90 -> m1_91  [key=0, style=solid];
m1_90 -> m1_63  [key=2, style=dotted];
m1_91 -> m1_89  [key=0, style=bold, color=blue];
m1_97 -> m1_98  [key=0, style=solid];
m1_98 -> m1_99  [key=0, style=solid];
m1_98 -> m1_100  [key=2, style=dotted];
m1_99 -> m1_97  [key=0, style=bold, color=blue];
m1_106 -> m1_107  [key=0, style=solid];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_109  [key=2, style=dotted];
m1_108 -> m1_106  [key=0, style=bold, color=blue];
m1_116 -> m1_117  [key=0, style=solid];
m1_117 -> m1_118  [key=0, style=solid];
m1_117 -> m1_109  [key=2, style=dotted];
m1_118 -> m1_116  [key=0, style=bold, color=blue];
m1_124 -> m1_125  [key=0, style=solid];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_109  [key=2, style=dotted];
m1_126 -> m1_124  [key=0, style=bold, color=blue];
m1_132 -> m1_133  [key=0, style=solid];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_109  [key=2, style=dotted];
m1_134 -> m1_132  [key=0, style=bold, color=blue];
m1_141 -> m1_142  [key=0, style=solid];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_140  [key=2, style=dotted];
m1_143 -> m1_141  [key=0, style=bold, color=blue];
m1_148 -> m1_149  [key=0, style=solid];
m1_149 -> m1_150  [key=0, style=solid];
m1_149 -> m1_151  [key=2, style=dotted];
m1_150 -> m1_148  [key=0, style=bold, color=blue];
m1_156 -> m1_157  [key=0, style=solid];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_159  [key=2, style=dotted];
m1_158 -> m1_156  [key=0, style=bold, color=blue];
m1_164 -> m1_165  [key=0, style=solid];
m1_165 -> m1_166  [key=0, style=solid];
m1_165 -> m1_159  [key=2, style=dotted];
m1_166 -> m1_164  [key=0, style=bold, color=blue];
m1_174 -> m1_175  [key=0, style=solid];
m1_177 -> m1_178  [key=0, style=solid];
m1_177 -> m1_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_177 -> m1_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_175 -> m1_176  [key=0, style=solid];
m1_175 -> m1_140  [key=2, style=dotted];
m1_176 -> m1_174  [key=0, style=bold, color=blue];
m1_178 -> m1_179  [key=0, style=solid];
m1_178 -> m1_180  [key=2, style=dotted];
m1_178 -> m1_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_182 -> m1_183  [key=0, style=solid];
m1_182 -> m1_184  [key=2, style=dotted];
m1_182 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_186 -> m1_187  [key=0, style=solid];
m1_186 -> m1_188  [key=2, style=dotted];
m1_179 -> m1_177  [key=0, style=bold, color=blue];
m1_181 -> m1_182  [key=0, style=solid];
m1_183 -> m1_181  [key=0, style=bold, color=blue];
m1_185 -> m1_186  [key=0, style=solid];
m1_187 -> m1_185  [key=0, style=bold, color=blue];
m1_195 -> m1_196  [key=0, style=solid];
m1_196 -> m1_197  [key=0, style=solid];
m1_196 -> m1_198  [key=2, style=dotted];
m1_197 -> m1_195  [key=0, style=bold, color=blue];
m1_205 -> m1_206  [key=0, style=solid];
m1_206 -> m1_207  [key=0, style=solid];
m1_206 -> m1_204  [key=2, style=dotted];
m1_207 -> m1_205  [key=0, style=bold, color=blue];
m1_214 -> m1_215  [key=0, style=solid];
m1_215 -> m1_216  [key=0, style=solid];
m1_215 -> m1_204  [key=2, style=dotted];
m1_216 -> m1_214  [key=0, style=bold, color=blue];
m1_222 -> m1_223  [key=0, style=solid];
m1_223 -> m1_224  [key=0, style=solid];
m1_223 -> m1_225  [key=2, style=dotted];
m1_224 -> m1_222  [key=0, style=bold, color=blue];
m1_231 -> m1_232  [key=0, style=solid];
m1_232 -> m1_233  [key=0, style=solid];
m1_232 -> m1_6  [key=2, style=dotted];
m1_233 -> m1_231  [key=0, style=bold, color=blue];
m1_240 -> m1_241  [key=0, style=solid];
m1_241 -> m1_242  [key=0, style=solid];
m1_241 -> m1_6  [key=2, style=dotted];
m1_242 -> m1_240  [key=0, style=bold, color=blue];
m1_248 -> m1_249  [key=0, style=solid];
m1_249 -> m1_250  [key=0, style=solid];
m1_249 -> m1_6  [key=2, style=dotted];
m1_250 -> m1_248  [key=0, style=bold, color=blue];
m1_256 -> m1_257  [key=0, style=solid];
m1_257 -> m1_258  [key=0, style=solid];
m1_257 -> m1_6  [key=2, style=dotted];
m1_258 -> m1_256  [key=0, style=bold, color=blue];
m1_264 -> m1_265  [key=0, style=solid];
m1_265 -> m1_266  [key=0, style=solid];
m1_265 -> m1_6  [key=2, style=dotted];
m1_266 -> m1_264  [key=0, style=bold, color=blue];
m1_272 -> m1_273  [key=0, style=solid];
m1_273 -> m1_274  [key=0, style=solid];
m1_273 -> m1_275  [key=2, style=dotted];
m1_274 -> m1_272  [key=0, style=bold, color=blue];
m1_280 -> m1_281  [key=0, style=solid];
m1_281 -> m1_282  [key=0, style=solid];
m1_281 -> m1_6  [key=2, style=dotted];
m1_282 -> m1_280  [key=0, style=bold, color=blue];
m1_288 -> m1_289  [key=0, style=solid];
m1_289 -> m1_290  [key=0, style=solid];
m1_289 -> m1_291  [key=2, style=dotted];
m1_290 -> m1_288  [key=0, style=bold, color=blue];
m1_296 -> m1_297  [key=0, style=solid];
m1_297 -> m1_298  [key=0, style=solid];
m1_297 -> m1_299  [key=2, style=dotted];
m1_298 -> m1_296  [key=0, style=bold, color=blue];
m1_304 -> m1_305  [key=0, style=solid];
m1_305 -> m1_306  [key=0, style=solid];
m1_305 -> m1_299  [key=2, style=dotted];
m1_306 -> m1_304  [key=0, style=bold, color=blue];
m1_314 -> m1_315  [key=0, style=solid];
m1_315 -> m1_316  [key=0, style=solid];
m1_315 -> m1_317  [key=2, style=dotted];
m1_316 -> m1_314  [key=0, style=bold, color=blue];
m1_324 -> m1_325  [key=0, style=solid];
m1_325 -> m1_326  [key=0, style=solid];
m1_325 -> m1_317  [key=2, style=dotted];
m1_326 -> m1_324  [key=0, style=bold, color=blue];
m1_332 -> m1_333  [key=0, style=solid];
m1_333 -> m1_334  [key=0, style=solid];
m1_333 -> m1_9  [key=2, style=dotted];
m1_333 -> m1_10  [key=2, style=dotted];
m1_333 -> m1_335  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_334 -> m1_332  [key=0, style=bold, color=blue];
m1_335 -> m1_336  [key=0, style=solid];
m1_336 -> m1_337  [key=0, style=solid];
m1_336 -> m1_338  [key=2, style=dotted];
m1_337 -> m1_335  [key=0, style=bold, color=blue];
m1_343 -> m1_344  [key=0, style=solid];
m1_344 -> m1_345  [key=0, style=solid];
m1_344 -> m1_9  [key=2, style=dotted];
m1_344 -> m1_10  [key=2, style=dotted];
m1_344 -> m1_346  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_345 -> m1_343  [key=0, style=bold, color=blue];
m1_346 -> m1_347  [key=0, style=solid];
m1_347 -> m1_348  [key=0, style=solid];
m1_347 -> m1_349  [key=2, style=dotted];
m1_348 -> m1_346  [key=0, style=bold, color=blue];
m1_354 -> m1_355  [key=0, style=solid];
m1_355 -> m1_356  [key=0, style=solid];
m1_355 -> m1_9  [key=2, style=dotted];
m1_355 -> m1_10  [key=2, style=dotted];
m1_355 -> m1_357  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_356 -> m1_354  [key=0, style=bold, color=blue];
m1_357 -> m1_358  [key=0, style=solid];
m1_358 -> m1_359  [key=0, style=solid];
m1_358 -> m1_360  [key=2, style=dotted];
m1_359 -> m1_357  [key=0, style=bold, color=blue];
m1_375 -> m1_376  [key=0, style=solid];
m1_370 -> m1_371  [key=0, style=solid];
m1_374 -> m1_375  [key=0, style=solid];
m1_371 -> m1_372  [key=0, style=solid];
m1_371 -> m1_373  [key=2, style=dotted];
m1_372 -> m1_370  [key=0, style=bold, color=blue];
m1_376 -> m1_374  [key=0, style=bold, color=blue];
m1_385 -> m1_386  [key=0, style=solid];
m1_381 -> m1_382  [key=0, style=solid];
m1_384 -> m1_385  [key=0, style=solid];
m1_382 -> m1_383  [key=0, style=solid];
m1_382 -> m1_6  [key=2, style=dotted];
m1_383 -> m1_381  [key=0, style=bold, color=blue];
m1_386 -> m1_384  [key=0, style=bold, color=blue];
m1_391 -> m1_392  [key=0, style=solid];
m1_392 -> m1_393  [key=0, style=solid];
m1_392 -> m1_394  [key=2, style=dotted];
m1_393 -> m1_391  [key=0, style=bold, color=blue];
m1_407 -> m1_408  [key=0, style=solid];
m1_402 -> m1_403  [key=0, style=solid];
m1_406 -> m1_407  [key=0, style=solid];
m1_403 -> m1_404  [key=0, style=solid];
m1_403 -> m1_405  [key=2, style=dotted];
m1_404 -> m1_402  [key=0, style=bold, color=blue];
m1_408 -> m1_406  [key=0, style=bold, color=blue];
m1_413 -> m1_414  [key=0, style=solid];
m1_414 -> m1_415  [key=0, style=solid];
m1_414 -> m1_275  [key=2, style=dotted];
m1_415 -> m1_413  [key=0, style=bold, color=blue];
m1_420 -> m1_421  [key=0, style=solid];
m1_421 -> m1_422  [key=0, style=solid];
m1_421 -> m1_423  [key=2, style=dotted];
m1_422 -> m1_420  [key=0, style=bold, color=blue];
m1_429 -> m1_430  [key=0, style=solid];
m1_430 -> m1_431  [key=0, style=solid];
m1_430 -> m1_6  [key=2, style=dotted];
m1_431 -> m1_429  [key=0, style=bold, color=blue];
m1_443 -> m1_444  [key=0, style=solid];
m1_438 -> m1_439  [key=0, style=solid];
m1_439 -> m1_440  [key=0, style=solid];
m1_439 -> m1_441  [key=2, style=dotted];
m1_440 -> m1_438  [key=0, style=bold, color=blue];
m1_444 -> m1_442  [key=0, style=bold, color=blue];
m1_377 -> m1_378  [key=0, style=solid];
m1_377 -> m1_379  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_377 -> m1_385  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_378 -> m1_379  [key=0, style=solid];
m1_378 -> m1_9  [key=2, style=dotted];
m1_378 -> m1_10  [key=2, style=dotted];
m1_378 -> m1_381  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_379 -> m1_380  [key=0, style=solid];
m1_379 -> m1_368  [key=2, style=dotted];
m1_379 -> m1_369  [key=2, style=dotted];
m1_379 -> m1_384  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_380 -> m1_377  [key=0, style=bold, color=blue];
m1_395 -> m1_396  [key=0, style=solid];
m1_395 -> m1_397  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m1_395 -> m1_398  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_395 -> m1_407  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_395 -> m1_399  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
m1_396 -> m1_397  [key=0, style=solid];
m1_396 -> m1_9  [key=2, style=dotted];
m1_396 -> m1_10  [key=2, style=dotted];
m1_396 -> m1_402  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_396 -> m1_398  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_396 -> m1_400  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_397 -> m1_398  [key=0, style=solid];
m1_397 -> m1_399  [key=0, style=solid];
m1_398 -> m1_401  [key=0, style=solid];
m1_398 -> m1_368  [key=2, style=dotted];
m1_398 -> m1_369  [key=2, style=dotted];
m1_398 -> m1_406  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_399 -> m1_400  [key=0, style=solid];
m1_399 -> m1_401  [key=0, style=solid];
m1_400 -> m1_401  [key=0, style=solid];
m1_400 -> m1_368  [key=2, style=dotted];
m1_400 -> m1_331  [key=2, style=dotted];
m1_401 -> m1_395  [key=0, style=bold, color=blue];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_9  [key=2, style=dotted];
m1_49 -> m1_10  [key=2, style=dotted];
m1_49 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_36  [key=2, style=dotted];
m1_50 -> m1_12  [key=2, style=dotted];
m1_51 -> m1_48  [key=0, style=bold, color=blue];
m1_119 -> m1_120  [key=0, style=solid];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_115  [key=2, style=dotted];
m1_120 -> m1_70  [key=2, style=dotted];
m1_120 -> m1_122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_9  [key=2, style=dotted];
m1_121 -> m1_10  [key=2, style=dotted];
m1_121 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_122 -> m1_123  [key=0, style=solid];
m1_122 -> m1_36  [key=2, style=dotted];
m1_122 -> m1_12  [key=2, style=dotted];
m1_123 -> m1_119  [key=0, style=bold, color=blue];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=double];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_9  [key=2, style=dotted];
m1_25 -> m1_10  [key=2, style=dotted];
m1_25 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_25 -> m1_173  [key=3, color=darkorchid, style=bold, label="Parameter variable System.StringComparer nameComparer"];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_20  [key=2, style=dotted];
m1_27 -> m1_24  [key=0, style=bold, color=blue];
m1_267 -> m1_268  [key=0, style=solid];
m1_268 -> m1_269  [key=0, style=solid];
m1_268 -> m1_213  [key=2, style=dotted];
m1_268 -> m1_270  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_269 -> m1_270  [key=0, style=solid];
m1_269 -> m1_9  [key=2, style=dotted];
m1_269 -> m1_10  [key=2, style=dotted];
m1_269 -> m1_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_270 -> m1_271  [key=0, style=solid];
m1_270 -> m1_36  [key=2, style=dotted];
m1_270 -> m1_12  [key=2, style=dotted];
m1_271 -> m1_267  [key=0, style=bold, color=blue];
m1_226 -> m1_227  [key=0, style=solid];
m1_227 -> m1_228  [key=0, style=solid];
m1_227 -> m1_79  [key=2, style=dotted];
m1_227 -> m1_70  [key=2, style=dotted];
m1_227 -> m1_229  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_228 -> m1_229  [key=0, style=solid];
m1_228 -> m1_9  [key=2, style=dotted];
m1_228 -> m1_10  [key=2, style=dotted];
m1_228 -> m1_231  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_229 -> m1_230  [key=0, style=solid];
m1_229 -> m1_36  [key=2, style=dotted];
m1_229 -> m1_12  [key=2, style=dotted];
m1_230 -> m1_226  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_1 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_10  [key=2, style=dotted];
m1_3 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_4 -> m1_12  [key=2, style=dotted];
m1_4 -> m1_184  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types"];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_217 -> m1_218  [key=0, style=solid];
m1_218 -> m1_219  [key=0, style=solid];
m1_218 -> m1_213  [key=2, style=dotted];
m1_218 -> m1_70  [key=2, style=dotted];
m1_218 -> m1_220  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_219 -> m1_220  [key=0, style=solid];
m1_219 -> m1_9  [key=2, style=dotted];
m1_219 -> m1_10  [key=2, style=dotted];
m1_219 -> m1_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_220 -> m1_221  [key=0, style=solid];
m1_220 -> m1_36  [key=2, style=dotted];
m1_220 -> m1_12  [key=2, style=dotted];
m1_221 -> m1_217  [key=0, style=bold, color=blue];
m1_208 -> m1_209  [key=0, style=solid];
m1_209 -> m1_210  [key=0, style=solid];
m1_209 -> m1_213  [key=2, style=dotted];
m1_209 -> m1_70  [key=2, style=dotted];
m1_209 -> m1_211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_210 -> m1_211  [key=0, style=solid];
m1_210 -> m1_9  [key=2, style=dotted];
m1_210 -> m1_10  [key=2, style=dotted];
m1_210 -> m1_214  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_211 -> m1_212  [key=0, style=solid];
m1_211 -> m1_36  [key=2, style=dotted];
m1_211 -> m1_12  [key=2, style=dotted];
m1_212 -> m1_208  [key=0, style=bold, color=blue];
m1_127 -> m1_128  [key=0, style=solid];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_115  [key=2, style=dotted];
m1_128 -> m1_70  [key=2, style=dotted];
m1_128 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_9  [key=2, style=dotted];
m1_129 -> m1_10  [key=2, style=dotted];
m1_129 -> m1_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_36  [key=2, style=dotted];
m1_130 -> m1_12  [key=2, style=dotted];
m1_131 -> m1_127  [key=0, style=bold, color=blue];
m1_409 -> m1_410  [key=0, style=solid];
m1_409 -> m1_411  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m1_410 -> m1_411  [key=0, style=solid];
m1_410 -> m1_9  [key=2, style=dotted];
m1_410 -> m1_10  [key=2, style=dotted];
m1_410 -> m1_413  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_411 -> m1_412  [key=0, style=solid];
m1_411 -> m1_105  [key=2, style=dotted];
m1_412 -> m1_409  [key=0, style=bold, color=blue];
m1_84 -> m1_85  [key=0, style=solid];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_79  [key=2, style=dotted];
m1_85 -> m1_70  [key=2, style=dotted];
m1_85 -> m1_87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_9  [key=2, style=dotted];
m1_86 -> m1_10  [key=2, style=dotted];
m1_86 -> m1_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_87 -> m1_88  [key=0, style=solid];
m1_87 -> m1_36  [key=2, style=dotted];
m1_87 -> m1_12  [key=2, style=dotted];
m1_88 -> m1_84  [key=0, style=bold, color=blue];
m1_64 -> m1_65  [key=0, style=solid];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_69  [key=2, style=dotted];
m1_65 -> m1_70  [key=2, style=dotted];
m1_65 -> m1_67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_9  [key=2, style=dotted];
m1_66 -> m1_10  [key=2, style=dotted];
m1_66 -> m1_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_67 -> m1_68  [key=0, style=solid];
m1_67 -> m1_36  [key=2, style=dotted];
m1_67 -> m1_12  [key=2, style=dotted];
m1_68 -> m1_64  [key=0, style=bold, color=blue];
m1_135 -> m1_136  [key=0, style=solid];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_140  [key=2, style=dotted];
m1_136 -> m1_138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_9  [key=2, style=dotted];
m1_137 -> m1_10  [key=2, style=dotted];
m1_137 -> m1_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_105  [key=2, style=dotted];
m1_139 -> m1_135  [key=0, style=bold, color=blue];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label=long];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_9  [key=2, style=dotted];
m1_17 -> m1_10  [key=2, style=dotted];
m1_17 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=2, style=dotted];
m1_19 -> m1_16  [key=0, style=bold, color=blue];
m1_318 -> m1_319  [key=0, style=solid];
m1_318 -> m1_321  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_318 -> m1_322  [key=1, style=dashed, color=darkseagreen4, label=bool];
m1_319 -> m1_320  [key=0, style=solid];
m1_319 -> m1_9  [key=2, style=dotted];
m1_319 -> m1_10  [key=2, style=dotted];
m1_319 -> m1_324  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_319 -> m1_321  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_319 -> m1_322  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_321 -> m1_322  [key=0, style=solid];
m1_321 -> m1_105  [key=2, style=dotted];
m1_322 -> m1_323  [key=0, style=solid];
m1_322 -> m1_313  [key=2, style=dotted];
m1_322 -> m1_105  [key=2, style=dotted];
m1_320 -> m1_321  [key=0, style=solid];
m1_320 -> m1_322  [key=0, style=solid];
m1_323 -> m1_318  [key=0, style=bold, color=blue];
m1_424 -> m1_425  [key=0, style=solid];
m1_425 -> m1_426  [key=0, style=solid];
m1_425 -> m1_6  [key=2, style=dotted];
m1_425 -> m1_427  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_426 -> m1_427  [key=0, style=solid];
m1_426 -> m1_9  [key=2, style=dotted];
m1_426 -> m1_10  [key=2, style=dotted];
m1_426 -> m1_429  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_427 -> m1_428  [key=0, style=solid];
m1_427 -> m1_105  [key=2, style=dotted];
m1_428 -> m1_424  [key=0, style=bold, color=blue];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_161 -> m1_162  [key=0, style=solid];
m1_161 -> m1_9  [key=2, style=dotted];
m1_161 -> m1_10  [key=2, style=dotted];
m1_161 -> m1_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_162 -> m1_163  [key=0, style=solid];
m1_162 -> m1_105  [key=2, style=dotted];
m1_163 -> m1_160  [key=0, style=bold, color=blue];
m1_292 -> m1_293  [key=0, style=solid];
m1_292 -> m1_294  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m1_293 -> m1_294  [key=0, style=solid];
m1_293 -> m1_9  [key=2, style=dotted];
m1_293 -> m1_10  [key=2, style=dotted];
m1_293 -> m1_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_294 -> m1_295  [key=0, style=solid];
m1_294 -> m1_105  [key=2, style=dotted];
m1_295 -> m1_292  [key=0, style=bold, color=blue];
m1_234 -> m1_235  [key=0, style=solid];
m1_235 -> m1_236  [key=0, style=solid];
m1_235 -> m1_239  [key=2, style=dotted];
m1_235 -> m1_237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_236 -> m1_237  [key=0, style=solid];
m1_236 -> m1_9  [key=2, style=dotted];
m1_236 -> m1_10  [key=2, style=dotted];
m1_236 -> m1_240  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_237 -> m1_238  [key=0, style=solid];
m1_237 -> m1_36  [key=2, style=dotted];
m1_237 -> m1_12  [key=2, style=dotted];
m1_238 -> m1_234  [key=0, style=bold, color=blue];
m1_199 -> m1_200  [key=0, style=solid];
m1_200 -> m1_201  [key=0, style=solid];
m1_200 -> m1_204  [key=2, style=dotted];
m1_200 -> m1_202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_201 -> m1_202  [key=0, style=solid];
m1_201 -> m1_9  [key=2, style=dotted];
m1_201 -> m1_10  [key=2, style=dotted];
m1_201 -> m1_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_202 -> m1_203  [key=0, style=solid];
m1_202 -> m1_105  [key=2, style=dotted];
m1_203 -> m1_199  [key=0, style=bold, color=blue];
m1_283 -> m1_284  [key=0, style=solid];
m1_284 -> m1_285  [key=0, style=solid];
m1_284 -> m1_79  [key=2, style=dotted];
m1_284 -> m1_286  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_285 -> m1_286  [key=0, style=solid];
m1_285 -> m1_9  [key=2, style=dotted];
m1_285 -> m1_10  [key=2, style=dotted];
m1_285 -> m1_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_286 -> m1_287  [key=0, style=solid];
m1_286 -> m1_36  [key=2, style=dotted];
m1_286 -> m1_12  [key=2, style=dotted];
m1_287 -> m1_283  [key=0, style=bold, color=blue];
m1_101 -> m1_102  [key=0, style=solid];
m1_101 -> m1_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_9  [key=2, style=dotted];
m1_102 -> m1_10  [key=2, style=dotted];
m1_102 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_103 -> m1_104  [key=0, style=solid];
m1_103 -> m1_105  [key=2, style=dotted];
m1_103 -> m1_103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m1_104 -> m1_101  [key=0, style=bold, color=blue];
m1_445 -> m1_446  [key=0, style=solid];
m1_445 -> m1_447  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
m1_446 -> m1_447  [key=0, style=solid];
m1_446 -> m1_449  [key=2, style=dotted];
m1_446 -> m1_10  [key=2, style=dotted];
m1_447 -> m1_448  [key=0, style=solid];
m1_447 -> m1_105  [key=2, style=dotted];
m1_448 -> m1_445  [key=0, style=bold, color=blue];
m1_276 -> m1_277  [key=0, style=solid];
m1_276 -> m1_278  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_277 -> m1_278  [key=0, style=solid];
m1_277 -> m1_9  [key=2, style=dotted];
m1_277 -> m1_10  [key=2, style=dotted];
m1_277 -> m1_280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_278 -> m1_279  [key=0, style=solid];
m1_278 -> m1_105  [key=2, style=dotted];
m1_279 -> m1_276  [key=0, style=bold, color=blue];
m1_339 -> m1_340  [key=0, style=solid];
m1_340 -> m1_341  [key=0, style=solid];
m1_341 -> m1_342  [key=0, style=solid];
m1_341 -> m1_331  [key=2, style=dotted];
m1_342 -> m1_339  [key=0, style=bold, color=blue];
m1_189 -> m1_190  [key=0, style=solid];
m1_190 -> m1_191  [key=0, style=solid];
m1_190 -> m1_194  [key=2, style=dotted];
m1_190 -> m1_70  [key=2, style=dotted];
m1_190 -> m1_192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m1_191 -> m1_192  [key=0, style=solid];
m1_191 -> m1_9  [key=2, style=dotted];
m1_191 -> m1_10  [key=2, style=dotted];
m1_191 -> m1_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_192 -> m1_193  [key=0, style=solid];
m1_192 -> m1_36  [key=2, style=dotted];
m1_192 -> m1_12  [key=2, style=dotted];
m1_193 -> m1_189  [key=0, style=bold, color=blue];
m1_450 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m1_451 -> m1_182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_451 -> m1_186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_452 -> m1_375  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_453 -> m1_385  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_454 -> m1_407  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_455 -> m1_443  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_7 -> m3_8  [key=0, style=solid, color=green];
m3_8 -> m3_9  [key=0, style=solid, color=green];
m3_8 -> m3_11  [key=1, style=dashed, color=green, label="CommandLine.Core.Specification"];
m3_9 -> m3_7  [key=0, style=bold, color=blue];
m3_3 -> m3_4  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid, color=green];
m3_11 -> m3_6  [key=2, style=dotted, color=green];
m3_11 -> m3_13  [key=2, style=dotted, color=green];
m3_11 -> m3_14  [key=2, style=dotted, color=green];
m3_10 -> m3_11  [key=0, style=solid, color=green];
m3_12 -> m3_10  [key=0, style=bold, color=blue];
m3_4 -> m3_6  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid];
m3_5 -> m3_3  [key=0, style=bold, color=blue];
}
