digraph  {
m1_16 [label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="78-78", cluster="CommandLine.Text.HelpText.HelpText(string, string)", file="HelpTextTests.cs"];
m1_22 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="HelpTextTests.cs"];
m1_23 [label="var sut = new HelpText { AddDashesToOption = true }\r\n                .AddPreOptionsLine(''pre-options'')\r\n                .AddOptions(new FakeOptions())\r\n                .AddPostOptionsLine(''post-options'')", span="50-53", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="HelpTextTests.cs"];
m1_24 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="57-57", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="HelpTextTests.cs"];
m1_25 [label="Assert.Equal(''pre-options'', lines[0])", span="58-58", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="HelpTextTests.cs"];
m1_26 [label="Assert.Equal(''--stringvalue    Define a string value here.'', lines[1])", span="59-59", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="HelpTextTests.cs"];
m1_27 [label="Assert.Equal(''-i               Define a int sequence here.'', lines[2])", span="60-60", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="HelpTextTests.cs"];
m1_28 [label="Assert.Equal(''-x               Define a boolean or switch value here.'', lines[3])", span="61-61", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="HelpTextTests.cs"];
m1_29 [label="Assert.Equal(''--help           Display this help screen.'', lines[4])", span="62-62", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="HelpTextTests.cs"];
m1_30 [label="Assert.Equal( ''post-options'', lines[5])", span="63-63", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", color=green, community=0, file="HelpTextTests.cs"];
m1_31 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", span="46-46", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_with_options()", file="HelpTextTests.cs"];
m1_42 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="83-83", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs"];
m1_43 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="87-87", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs", color=green, community=0];
m1_44 [label="sut.MaximumDisplayWidth = 40", span="88-88", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs", color=green, community=0];
m1_45 [label="sut.AddOptions(new FakeOptionsWithLongDescription())", span="89-89", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs", color=green, community=0];
m1_46 [label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="92-92", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs", color=green, community=0];
m1_47 [label="lines[2].Should().Be(''  v, verbose    This is the description'')", span="93-93", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs", color=green, community=0];
m1_48 [label="lines[3].Should().Be(''                of the verbosity to '')", span="95-95", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs", color=green, community=0];
m1_49 [label="lines[4].Should().Be(''                test out the wrapping '')", span="96-96", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs", color=green, community=0];
m1_50 [label="lines[5].Should().Be(''                capabilities of the '')", span="97-97", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs", color=green, community=0];
m1_51 [label="lines[6].Should().Be(''                Help Text.'')", span="98-98", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs", color=green, community=0];
m1_52 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", span="83-83", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_help_text_is_longer_than_width_it_will_wrap_around_as_if_in_a_column()", file="HelpTextTests.cs"];
m1_57 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="103-103", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_58 [label="var sut = new HelpText(new HeadingInfo(''CommandLine.Tests.dll'', ''1.9.4.131''))", span="107-107", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_59 [label="sut.MaximumDisplayWidth = 40", span="108-108", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_60 [label="sut.AddOptions(new FakeOptionsWithLongDescriptionAndNoSpaces())", span="109-109", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_61 [label="var lines = sut.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="112-112", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_62 [label="lines[2].Should().Be(''  v, verbose    Before '')", span="113-113", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_63 [label="lines[3].Should().Be(''                012345678901234567890123'')", span="114-114", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_64 [label="lines[4].Should().Be(''                After'')", span="115-115", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_65 [label="lines[5].Should().Be(''  input-file    Before '')", span="116-116", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_66 [label="lines[6].Should().Be(''                012345678901234567890123'')", span="117-117", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_67 [label="lines[7].Should().Be(''                456789 After'')", span="118-118", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_68 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", span="103-103", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_help_text_without_spaces()", file="HelpTextTests.cs"];
m1_174 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="HelpTextTests.cs"];
m1_149 [label="Entry Unk.True", span="", cluster="Unk.True", file="HelpTextTests.cs"];
m1_99 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="HelpTextTests.cs"];
m1_133 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="209-209", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_134 [label="var fakeResult = new ParserResult<FakeOptions>(\r\n                ParserResultType.Options,\r\n                new FakeOptions(),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new SequenceOutOfRangeError(new NameInfo(''i'', ''''))\r\n                    },\r\n                Maybe.Nothing<IEnumerable<Type>>())", span="212-220", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_135 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="223-223", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_136 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="226-226", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_137 [label="Assert.True(lines[0].StartsWith(''CommandLine'', StringComparison.Ordinal))", span="228-228", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_138 [label="Assert.True(lines[1].StartsWith(''Copyright (c)'', StringComparison.Ordinal))", span="229-229", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_139 [label="Assert.Equal(''ERROR(S):'', lines[2])", span="230-230", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_140 [label="Assert.Equal(''Token 'badtoken' is not recognized.'', lines[3])", span="231-231", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_141 [label="Assert.Equal(''A sequence option 'i' is defined with few items than required.'', lines[4])", span="232-232", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_142 [label="Assert.Equal(''--stringvalue    Define a string value here.'', lines[5])", span="233-233", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_143 [label="Assert.Equal(''-i               Define a int sequence here.'', lines[6])", span="234-234", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_144 [label="Assert.Equal(''-x               Define a boolean or switch value here.'', lines[7])", span="235-235", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_145 [label="Assert.Equal(''--help           Display this help screen.'', lines[8])", span="236-236", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_146 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", span="209-209", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Options_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_148 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)", file="HelpTextTests.cs"];
m1_103 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="HelpTextTests.cs"];
m1_161 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="269-269", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_162 [label="var verbTypes = Enumerable.Empty<Type>().Concat(\r\n                new[] { typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions) })", span="272-273", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_163 [label="var fakeResult = new ParserResult<object>(\r\n                ParserResultType.Verbs,\r\n                new NullInstance(),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(null, null, false)\r\n                    },\r\n                Maybe.Just(verbTypes))", span="274-281", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_164 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="284-284", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_165 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="287-287", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_166 [label="Assert.True(lines[0].StartsWith(''CommandLine'', StringComparison.Ordinal))", span="289-289", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_167 [label="Assert.True(lines[1].StartsWith(''Copyright (c)'', StringComparison.Ordinal))", span="290-290", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_168 [label="Assert.Equal(''add       Add file contents to the index.'', lines[2])", span="291-291", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_169 [label="Assert.Equal(''commit    Record changes to the repository.'', lines[3])", span="292-292", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_170 [label="Assert.Equal(''clone     Clone a repository into a new directory.'', lines[4])", span="293-293", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_171 [label="Assert.Equal(''help      Display more information on a specific command.'', lines[5])", span="294-294", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_172 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", span="269-269", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_unknown_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_70 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="123-123", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_71 [label="var sut = new HelpText(''Heading Info.'')", span="127-127", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_72 [label="sut.MaximumDisplayWidth = 40", span="128-128", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_73 [label="sut.AddPreOptionsLine(''Before 0123456789012345678901234567890123456789012 After'')\r\n                .AddOptions(new FakeOptionsForHelp())\r\n                .AddPostOptionsLine(''Before 0123456789012345678901234567890123456789 After'')", span="129-131", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_74 [label="var lines = sut.ToString().Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="134-134", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_75 [label="lines[1].Should().Be(''Before '')", span="135-135", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_76 [label="lines[2].Should().Be(''0123456789012345678901234567890123456789'')", span="136-136", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_77 [label="lines[3].Should().Be(''012 After'')", span="137-137", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_78 [label="lines[lines.Length - 3].Should().Be(''Before '')", span="138-138", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_79 [label="lines[lines.Length - 2].Should().Be(''0123456789012345678901234567890123456789'')", span="139-139", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_80 [label="lines[lines.Length - 1].Should().Be('' After'')", span="140-140", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_81 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", span="123-123", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Long_pre_and_post_lines_without_spaces()", file="HelpTextTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="HelpTextTests.cs"];
m1_1 [label="Assert.Equal(string.Empty, new HelpText().ToString())", span="18-18", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="HelpTextTests.cs"];
m1_2 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", span="16-16", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_empty_instance()", file="HelpTextTests.cs"];
m1_111 [label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", span="389-389", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, int)", file="HelpTextTests.cs"];
m1_132 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="HelpTextTests.cs"];
m1_173 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="HelpTextTests.cs"];
m1_107 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="327-327", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="HelpTextTests.cs"];
m1_3 [label="Entry CommandLine.Text.HelpText.HelpText()", span="32-32", cluster="CommandLine.Text.HelpText.HelpText()", file="HelpTextTests.cs"];
m1_35 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="68-68", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="HelpTextTests.cs"];
m1_36 [label="var sut = new HelpText(''Meta Value.'')\r\n                .AddOptions(new FakeOptionsWithMetaValue())", span="72-73", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="HelpTextTests.cs", color=green, community=0];
m1_37 [label="var lines = sut.ToString().ToNotEmptyLines().TrimStringArray()", span="76-76", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="HelpTextTests.cs", color=green, community=0];
m1_38 [label="Assert.Equal(''i FILE, input-file=FILE    Required. Specify input FILE to be processed.'', lines[2])", span="78-78", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="HelpTextTests.cs", color=green, community=0];
m1_39 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", span="68-68", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.When_defined_MetaValue_should_be_rendered()", file="HelpTextTests.cs"];
m1_19 [label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="313-313", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="HelpTextTests.cs"];
m1_97 [label="Entry CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", span="23-23", cluster="CommandLine.ParserResult<T>.ParserResult(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="HelpTextTests.cs"];
m1_109 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="353-353", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="HelpTextTests.cs"];
m1_41 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMetaValue.FakeOptionsWithMetaValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMetaValue.FakeOptionsWithMetaValue()", file="HelpTextTests.cs"];
m1_105 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="HelpTextTests.cs"];
m1_112 [label="Entry lambda expression", span="166-189", cluster="lambda expression", file="HelpTextTests.cs"];
m1_113 [label="err.Tag", span="168-168", cluster="lambda expression", file="HelpTextTests.cs"];
m1_115 [label="return ''ERR '' + ((BadFormatTokenError)err).Token;", span="171-171", cluster="lambda expression", file="HelpTextTests.cs"];
m1_117 [label="return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;", span="173-173", cluster="lambda expression", file="HelpTextTests.cs"];
m1_119 [label="return ''ERR '' + ((UnknownOptionError)err).Token;", span="175-175", cluster="lambda expression", file="HelpTextTests.cs"];
m1_121 [label="return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;", span="177-177", cluster="lambda expression", file="HelpTextTests.cs"];
m1_123 [label="return ''ERR '' + ((MutuallyExclusiveSetError)err).NameInfo.NameText;", span="179-179", cluster="lambda expression", file="HelpTextTests.cs"];
m1_125 [label="return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;", span="181-181", cluster="lambda expression", file="HelpTextTests.cs"];
m1_129 [label="return ''ERR '' + ((BadVerbSelectedError)err).Token;", span="185-185", cluster="lambda expression", file="HelpTextTests.cs"];
m1_114 [label="ErrorType.BadFormatTokenError", span="170-170", cluster="lambda expression", file="HelpTextTests.cs"];
m1_116 [label="ErrorType.MissingValueOptionError", span="172-172", cluster="lambda expression", file="HelpTextTests.cs"];
m1_118 [label="ErrorType.UnknownOptionError", span="174-174", cluster="lambda expression", file="HelpTextTests.cs"];
m1_120 [label="ErrorType.MissingRequiredOptionError", span="176-176", cluster="lambda expression", file="HelpTextTests.cs"];
m1_122 [label="ErrorType.MutuallyExclusiveSetError", span="178-178", cluster="lambda expression", file="HelpTextTests.cs"];
m1_124 [label="ErrorType.SequenceOutOfRangeError", span="180-180", cluster="lambda expression", file="HelpTextTests.cs"];
m1_126 [label="ErrorType.NoVerbSelectedError", span="182-182", cluster="lambda expression", file="HelpTextTests.cs"];
m1_128 [label="ErrorType.BadVerbSelectedError", span="184-184", cluster="lambda expression", file="HelpTextTests.cs"];
m1_130 [label="throw new InvalidOperationException();", span="187-187", cluster="lambda expression", file="HelpTextTests.cs"];
m1_127 [label="return ''ERR no-verb-selected'';", span="183-183", cluster="lambda expression", file="HelpTextTests.cs"];
m1_131 [label="Exit lambda expression", span="166-189", cluster="lambda expression", file="HelpTextTests.cs"];
m1_40 [label="Entry CommandLine.Text.HelpText.HelpText(string)", span="55-55", cluster="CommandLine.Text.HelpText.HelpText(string)", file="HelpTextTests.cs"];
m1_100 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="HelpTextTests.cs"];
m1_55 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="HelpTextTests.cs"];
m1_56 [label="Entry Unk.Be", span="", cluster="Unk.Be", file="HelpTextTests.cs"];
m1_4 [label="Entry CommandLine.Text.HelpText.ToString()", span="417-417", cluster="CommandLine.Text.HelpText.ToString()", file="HelpTextTests.cs"];
m1_33 [label="Entry CommandLine.Text.HelpText.AddOptions<T>(T)", span="333-333", cluster="CommandLine.Text.HelpText.AddOptions<T>(T)", file="HelpTextTests.cs"];
m1_175 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="HelpTextTests.cs"];
m1_82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsForHelp.FakeOptionsForHelp()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsForHelp.FakeOptionsForHelp()", file="HelpTextTests.cs"];
m1_106 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="391-391", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="HelpTextTests.cs"];
m1_17 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="37-37", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="HelpTextTests.cs"];
m1_69 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithLongDescriptionAndNoSpaces.FakeOptionsWithLongDescriptionAndNoSpaces()", span="31-31", cluster="CommandLine.Tests.Fakes.FakeOptionsWithLongDescriptionAndNoSpaces.FakeOptionsWithLongDescriptionAndNoSpaces()", file="HelpTextTests.cs"];
m1_102 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="HelpTextTests.cs"];
m1_18 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", file="HelpTextTests.cs"];
m1_147 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="242-242", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="HelpTextTests.cs"];
m1_20 [label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="323-323", cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="HelpTextTests.cs"];
m1_104 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="HelpTextTests.cs"];
m1_21 [label="Entry string.ToNotEmptyLines()", span="9-9", cluster="string.ToNotEmptyLines()", file="HelpTextTests.cs"];
m1_98 [label="Entry CommandLine.NullInstance.NullInstance()", span="9-9", cluster="CommandLine.NullInstance.NullInstance()", file="HelpTextTests.cs"];
m1_110 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="HelpTextTests.cs"];
m1_101 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="HelpTextTests.cs"];
m1_32 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="HelpTextTests.cs"];
m1_6 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_7 [label="var sut =\r\n                new HelpText(new HeadingInfo(''Unit-tests'', ''2.0''), new CopyrightInfo(true, ''Author'', 2005, 2013))\r\n                    .AddPreOptionsLine(''pre-options line 1'')\r\n                    .AddPreOptionsLine(''pre-options line 2'')\r\n                    .AddPostOptionsLine(''post-options line 1'')\r\n                    .AddPostOptionsLine(''post-options line 2'')", span="26-31", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_8 [label="var lines = sut.ToString().ToNotEmptyLines()", span="34-34", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_9 [label="Assert.Equal(''Unit-tests 2.0'', lines[0])", span="36-36", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_10 [label="Assert.Equal(''Copyright (C) 2005 - 2013 Author'', lines[1])", span="37-37", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_11 [label="Assert.Equal(''pre-options line 1'', lines[2])", span="38-38", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_12 [label="Assert.Equal(''pre-options line 2'', lines[3])", span="39-39", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_13 [label="Assert.Equal(''post-options line 1'', lines[4])", span="40-40", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_14 [label="Assert.Equal(''post-options line 2'', lines[5])", span="41-41", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_15 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", span="22-22", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Create_instance_without_options()", file="HelpTextTests.cs"];
m1_83 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="146-146", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_84 [label="var fakeResult = new ParserResult<NullInstance>(\r\n                ParserResultType.Options,\r\n                new NullInstance(),\r\n                new Error[]\r\n                    {\r\n                        new BadFormatTokenError(''badtoken''),\r\n                        new MissingValueOptionError(new NameInfo(''x'', ''switch'')),\r\n                        new UnknownOptionError(''unknown''),\r\n                        new MissingRequiredOptionError(new NameInfo('''', ''missing'')),\r\n                        new MutuallyExclusiveSetError(new NameInfo(''z'', '''')),\r\n                        new SequenceOutOfRangeError(new NameInfo(''s'', ''sequence'')),\r\n                        new NoVerbSelectedError(),\r\n                        new BadVerbSelectedError(''badverb''),\r\n                        new HelpRequestedError(), // should be ignored\r\n                        new HelpVerbRequestedError(null, null, false), // should be ignored \r\n                    },\r\n                Maybe.Nothing<IEnumerable<Type>>())", span="149-165", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_85 [label="Func<Error, string> fakeRenderer = err =>\r\n                {\r\n                    switch (err.Tag)\r\n                    {\r\n                        case ErrorType.BadFormatTokenError:\r\n                            return ''ERR '' + ((BadFormatTokenError)err).Token;\r\n                        case ErrorType.MissingValueOptionError:\r\n                            return ''ERR '' + ((MissingValueOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.UnknownOptionError:\r\n                            return ''ERR '' + ((UnknownOptionError)err).Token;\r\n                        case ErrorType.MissingRequiredOptionError:\r\n                            return ''ERR '' + ((MissingRequiredOptionError)err).NameInfo.NameText;\r\n                        case ErrorType.MutuallyExclusiveSetError:\r\n                            return ''ERR '' + ((MutuallyExclusiveSetError)err).NameInfo.NameText;\r\n                        case ErrorType.SequenceOutOfRangeError:\r\n                            return ''ERR '' + ((SequenceOutOfRangeError)err).NameInfo.NameText;\r\n                        case ErrorType.NoVerbSelectedError:\r\n                            return ''ERR no-verb-selected'';\r\n                        case ErrorType.BadVerbSelectedError:\r\n                            return ''ERR '' + ((BadVerbSelectedError)err).Token;\r\n                        default:\r\n                            throw new InvalidOperationException();\r\n                    }\r\n                }", span="166-189", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_86 [label="var errorsText = HelpText.RenderParsingErrorsText(fakeResult, fakeRenderer, 2)", span="192-192", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_87 [label="var lines = errorsText.ToNotEmptyLines()", span="195-195", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_88 [label="Assert.Equal(''  ERR badtoken'', lines[0])", span="197-197", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_89 [label="Assert.Equal(''  ERR x, switch'', lines[1])", span="198-198", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_90 [label="Assert.Equal(''  ERR unknown'', lines[2])", span="199-199", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_91 [label="Assert.Equal(''  ERR missing'', lines[3])", span="200-200", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_92 [label="Assert.Equal(''  ERR z'', lines[4])", span="201-201", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_93 [label="Assert.Equal(''  ERR s, sequence'', lines[5])", span="202-202", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_94 [label="Assert.Equal(''  ERR no-verb-selected'', lines[6])", span="203-203", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_95 [label="Assert.Equal(''  ERR badverb'', lines[7])", span="204-204", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_96 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", span="146-146", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoking_RenderParsingErrorsText_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_150 [label="Entry CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="241-241", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_151 [label="var fakeResult = new ParserResult<object>(\r\n                ParserResultType.Verbs,\r\n                new NullInstance(),\r\n                new Error[]\r\n                    {\r\n                        new HelpVerbRequestedError(''commit'', typeof(CommitOptions), true)\r\n                    },\r\n                Maybe.Nothing<IEnumerable<Type>>())", span="244-251", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_152 [label="var helpText = HelpText.AutoBuild(fakeResult)", span="254-254", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_153 [label="var lines = helpText.ToString().ToNotEmptyLines().TrimStringArray()", span="257-257", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_154 [label="Assert.True(lines[0].StartsWith(''CommandLine'', StringComparison.Ordinal))", span="259-259", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_155 [label="Assert.True(lines[1].StartsWith(''Copyright (c)'', StringComparison.Ordinal))", span="260-260", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_156 [label="Assert.Equal(''-p, --patch    Use the interactive patch selection interface to chose which'', lines[2])", span="261-261", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_157 [label="Assert.Equal(''changes to commit.'', lines[3])", span="262-262", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_158 [label="Assert.Equal(''--amend        Used to amend the tip of the current branch.'', lines[4])", span="263-263", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_159 [label="Assert.Equal(''--help         Display this help screen.'', lines[5])", span="264-264", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_160 [label="Exit CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", span="241-241", cluster="CommandLine.Tests.Unit.Text.HelpTextTests.Invoke_AutoBuild_for_Verbs_with_specific_verb_returns_appropriate_formatted_text()", file="HelpTextTests.cs"];
m1_34 [label="Entry string[].TrimStringArray()", span="14-14", cluster="string[].TrimStringArray()", file="HelpTextTests.cs"];
m1_108 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="HelpTextTests.cs"];
m1_5 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="HelpTextTests.cs"];
m1_54 [label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0", cluster="string.Split(string[], System.StringSplitOptions)", file="HelpTextTests.cs"];
m1_53 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithLongDescription.FakeOptionsWithLongDescription()", span="22-22", cluster="CommandLine.Tests.Fakes.FakeOptionsWithLongDescription.FakeOptionsWithLongDescription()", file="HelpTextTests.cs"];
m2_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapperTests.cs"];
m2_11 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="OptionMapperTests.cs"];
m2_12 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="OptionMapperTests.cs"];
m2_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs"];
m2_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", span="15-15", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionMapperTests.cs"];
m2_10 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="OptionMapperTests.cs"];
m2_14 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="OptionMapperTests.cs"];
m2_26 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, -1, -1, Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="OptionMapperTests.cs"];
m2_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_4 [label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true))", span="39-42", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_27 [label="Entry lambda expression", span="40-42", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_15 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_19 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_23 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_16 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_17 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_20 [label="pt.Specification.IsOption()", span="33-33", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_21 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_24 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_25 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_28 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true", span="40-42", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_29 [label="Exit lambda expression", span="40-42", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_30 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="OptionMapperTests.cs"];
m2_18 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs"];
m2_22 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs"];
m2_13 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="OptionMapperTests.cs"];
m2_9 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="OptionMapperTests.cs"];
m3_0 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", span="15-15", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs"];
m3_1 [label="this.shortName = shortName", span="18-18", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs"];
m3_2 [label="this.longName = longName", span="19-19", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs"];
m3_3 [label="this.setName = setName", span="20-20", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs"];
m3_4 [label="this.helpText = helpText", span="21-21", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs"];
m3_5 [label="this.metaValue = metaValue", span="22-22", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs"];
m3_6 [label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", span="15-15", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs"];
m3_7 [label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", span="25-25", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", file="OptionSpecification.cs"];
m3_8 [label="return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                attribute.HelpText,\r\n                attribute.MetaValue);", span="27-37", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", color=green, community=0, file="OptionSpecification.cs"];
m3_9 [label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", span="25-25", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", file="OptionSpecification.cs"];
m3_10 [label="Entry T.ToMaybe<T>()", span="82-82", cluster="T.ToMaybe<T>()", file="OptionSpecification.cs"];
m3_11 [label="CommandLine.Core.OptionSpecification", span="", file="OptionSpecification.cs"];
m4_4 [label="Entry CommandLine.ParserSettings.~ParserSettings()", span="34-34", cluster="CommandLine.ParserSettings.~ParserSettings()", file="ParserSettings.cs"];
m4_5 [label="Dispose(false)", span="36-36", cluster="CommandLine.ParserSettings.~ParserSettings()", file="ParserSettings.cs"];
m4_6 [label="Exit CommandLine.ParserSettings.~ParserSettings()", span="34-34", cluster="CommandLine.ParserSettings.~ParserSettings()", file="ParserSettings.cs"];
m4_0 [label="Entry CommandLine.ParserSettings.ParserSettings()", span="25-25", cluster="CommandLine.ParserSettings.ParserSettings()", file="ParserSettings.cs"];
m4_1 [label="this.caseSensitive = true", span="27-27", cluster="CommandLine.ParserSettings.ParserSettings()", file="ParserSettings.cs"];
m4_2 [label="this.parsingCulture = CultureInfo.InvariantCulture", span="28-28", cluster="CommandLine.ParserSettings.ParserSettings()", file="ParserSettings.cs"];
m4_3 [label="Exit CommandLine.ParserSettings.ParserSettings()", span="25-25", cluster="CommandLine.ParserSettings.ParserSettings()", file="ParserSettings.cs"];
m4_7 [label="Entry CommandLine.ParserSettings.Dispose(bool)", span="124-124", cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs"];
m4_13 [label="this.disposed", span="126-126", cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs"];
m4_15 [label=disposing, span="131-131", cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs"];
m4_14 [label="return;", span="128-128", cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs"];
m4_16 [label="HelpWriter != null", span="133-133", cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs"];
m4_17 [label="this.helpWriter.Dispose()", span="135-135", cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs"];
m4_19 [label="this.disposed = true", span="139-139", cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs"];
m4_18 [label="this.helpWriter = null", span="136-136", cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs"];
m4_20 [label="Exit CommandLine.ParserSettings.Dispose(bool)", span="124-124", cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs"];
m4_12 [label="Entry System.GC.SuppressFinalize(object)", span="0-0", cluster="System.GC.SuppressFinalize(object)", file="ParserSettings.cs"];
m4_21 [label="Entry System.IO.TextWriter.Dispose()", span="0-0", cluster="System.IO.TextWriter.Dispose()", file="ParserSettings.cs"];
m4_8 [label="Entry CommandLine.ParserSettings.Dispose()", span="117-117", cluster="CommandLine.ParserSettings.Dispose()", file="ParserSettings.cs"];
m4_9 [label="Dispose(true)", span="119-119", cluster="CommandLine.ParserSettings.Dispose()", file="ParserSettings.cs"];
m4_10 [label="GC.SuppressFinalize(this)", span="121-121", cluster="CommandLine.ParserSettings.Dispose()", file="ParserSettings.cs"];
m4_11 [label="Exit CommandLine.ParserSettings.Dispose()", span="117-117", cluster="CommandLine.ParserSettings.Dispose()", file="ParserSettings.cs"];
m4_22 [label="CommandLine.ParserSettings", span="", file="ParserSettings.cs"];
m5_23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Specification.cs"];
m5_22 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="Specification.cs"];
m5_26 [label="Entry string.ToLowerInvariant()", span="0-0", cluster="string.ToLowerInvariant()", file="Specification.cs"];
m5_28 [label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="17-17", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="Specification.cs"];
m5_25 [label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", span="25-25", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", file="Specification.cs"];
m5_8 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="67-67", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs"];
m5_9 [label="var attrs = property.GetCustomAttributes(true)", span="69-69", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", color=green, community=0];
m5_12 [label="var spec = OptionSpecification.FromAttribute(oa.Single(), property.PropertyType)", span="73-73", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs"];
m5_14 [label="return spec.WithLongName(property.Name.ToLowerInvariant());", span="76-76", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=red, community=0, file="Specification.cs"];
m5_18 [label="return ValueSpecification.FromAttribute(va.Single(), property.PropertyType);", span="84-84", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs"];
m5_10 [label="var oa = attrs.OfType<OptionAttribute>()", span="70-70", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", color=green, community=0];
m5_16 [label="var va = attrs.OfType<ValueAttribute>()", span="81-81", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs"];
m5_11 [label="oa.Count() == 1", span="71-71", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", color=green, community=0];
m5_13 [label="spec.ShortName.Length == 0 && spec.LongName.Length == 0", span="74-74", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", color=green, community=0];
m5_15 [label="return spec;", span="78-78", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs"];
m5_17 [label="va.Count() == 1", span="82-82", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", color=green, community=0];
m5_19 [label="throw new InvalidOperationException();", span="87-87", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs"];
m5_20 [label="Exit CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="67-67", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs"];
m5_29 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="Specification.cs"];
m5_21 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="Specification.cs"];
m5_24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="Specification.cs"];
m5_27 [label="Entry CommandLine.Core.OptionSpecification.WithLongName(string)", span="25-25", cluster="CommandLine.Core.OptionSpecification.WithLongName(string)", file="Specification.cs"];
m5_0 [label="Entry CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="27-27", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs"];
m5_1 [label="this.tag = tag", span="29-29", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs"];
m5_2 [label="this.required = required", span="30-30", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs"];
m5_3 [label="this.min = min", span="31-31", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs"];
m5_4 [label="this.max = max", span="32-32", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs"];
m5_5 [label="this.defaultValue = defaultValue", span="33-33", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs"];
m5_6 [label="this.conversionType = conversionType", span="34-34", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs"];
m5_7 [label="Exit CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="27-27", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs"];
m5_30 [label="CommandLine.Core.Specification", span="", file="Specification.cs"];
m6_10 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SpecificationPropertyRules.cs"];
m6_11 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs"];
m6_12 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="SpecificationPropertyRules.cs"];
m6_0 [label="Entry CommonMark.Utilities.Warning(string, params object[])", span="17-17", cluster="CommonMark.Utilities.Warning(string, params object[])", file="SpecificationPropertyRules.cs"];
m6_1 [label="args != null && args.Length > 0", span="19-19", cluster="CommonMark.Utilities.Warning(string, params object[])", file="SpecificationPropertyRules.cs"];
m6_2 [label="message = string.Format(System.Globalization.CultureInfo.InvariantCulture, message, args)", span="20-20", cluster="CommonMark.Utilities.Warning(string, params object[])", file="SpecificationPropertyRules.cs"];
m6_19 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs"];
m6_48 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="46-46", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m6_49 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min);\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="48-60", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m6_50 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="46-46", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m6_46 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m6_38 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="SpecificationPropertyRules.cs"];
m6_5 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_14 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs"];
m6_47 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs"];
m6_61 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs"];
m6_6 [label="groups.Count() > 1", span="24-24", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_42 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs"];
m6_65 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m6_20 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_33 [label="var options = specProps.Where(sp => sp.Value.IsNothing() && sp.Specification.Required)", span="36-36", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m6_32 [label="Entry lambda expression", span="34-43", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_34 [label="options.Any()", span="37-37", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m6_39 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_35 [label="return options.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="39-40", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m6_36 [label="return Enumerable.Empty<Nothing<Error>>();", span="42-42", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m6_37 [label="Exit lambda expression", span="34-43", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_43 [label="Entry lambda expression", span="39-40", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_40 [label="sp.Value.IsNothing() && sp.Specification.Required", span="36-36", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m6_41 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_44 [label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="39-40", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m6_45 [label="Exit lambda expression", span="39-40", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_4 [label="Exit CommonMark.Utilities.Warning(string, params object[])", span="17-17", cluster="CommonMark.Utilities.Warning(string, params object[])", file="SpecificationPropertyRules.cs"];
m6_52 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)", span="50-53", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_53 [label="options.Any()", span="54-54", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_7 [label="Entry CommonMark.Utilities.IsEscapableSymbol(char)", span="28-28", cluster="CommonMark.Utilities.IsEscapableSymbol(char)", file="SpecificationPropertyRules.cs"];
m6_54 [label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="56-57", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_8 [label="return (c > ' ' && c < '0') || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z' && c < 127) || c == '•';", span="31-31", cluster="CommonMark.Utilities.IsEscapableSymbol(char)", file="SpecificationPropertyRules.cs"];
m6_55 [label="return Enumerable.Empty<Nothing<Error>>();", span="59-59", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_63 [label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="56-57", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_24 [label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_3 [label="System.Diagnostics.Debug.WriteLine(message, ''Warning'')", span="22-22", cluster="CommonMark.Utilities.Warning(string, params object[])", file="SpecificationPropertyRules.cs"];
m6_15 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_51 [label="Entry lambda expression", span="48-60", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_57 [label="Entry lambda expression", span="51-53", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_9 [label="Exit CommonMark.Utilities.IsEscapableSymbol(char)", span="28-28", cluster="CommonMark.Utilities.IsEscapableSymbol(char)", file="SpecificationPropertyRules.cs"];
m6_23 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_56 [label="Exit lambda expression", span="48-60", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_62 [label="Entry lambda expression", span="56-57", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_64 [label="Exit lambda expression", span="56-57", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_25 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_17 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_16 [label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_59 [label="Exit lambda expression", span="51-53", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_58 [label="sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min", span="51-53", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_21 [label="((OptionSpecification)g.Specification).SetName", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_22 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m6_29 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m6_30 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Value.IsNothing() && sp.Specification.Required);\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, file="SpecificationPropertyRules.cs"];
m6_31 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m6_28 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationPropertyRules.cs"];
m6_13 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SpecificationPropertyRules.cs"];
m6_60 [label="Entry System.Type.ToDescriptor()", span="22-22", cluster="System.Type.ToDescriptor()", file="SpecificationPropertyRules.cs"];
m6_26 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m6_18 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs"];
m6_27 [label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60", cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SpecificationPropertyRules.cs"];
m7_103 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])", file="Tokenizer.cs"];
m7_16 [label="Entry Unk.nameLookup", span="", cluster="Unk.nameLookup", file="Tokenizer.cs"];
m7_101 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs"];
m7_11 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)", file="Tokenizer.cs"];
m7_80 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs"];
m7_102 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs"];
m7_34 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="Tokenizer.cs"];
m7_12 [label="Entry CommandLine.Core.Token.Value(string)", span="26-26", cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs"];
m7_15 [label="Entry Unk.IsName", span="", cluster="Unk.IsName", file="Tokenizer.cs"];
m7_36 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs"];
m7_20 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="Tokenizer.cs"];
m7_81 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="Tokenizer.cs"];
m7_82 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)", file="Tokenizer.cs"];
m7_54 [label="Entry lambda expression", span="43-43", cluster="lambda expression", file="Tokenizer.cs"];
m7_22 [label="errors.Add(e)", span="18-18", cluster="lambda expression", file="Tokenizer.cs"];
m7_21 [label="Entry lambda expression", span="18-18", cluster="lambda expression", file="Tokenizer.cs"];
m7_23 [label="Exit lambda expression", span="18-18", cluster="lambda expression", file="Tokenizer.cs"];
m7_41 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="Tokenizer.cs"];
m7_45 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m7_48 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m7_51 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m7_55 [label="tokens.Concat(values)", span="43-43", cluster="lambda expression", file="Tokenizer.cs"];
m7_42 [label="arg.EqualsOrdinal(''--'')", span="39-39", cluster="lambda expression", file="Tokenizer.cs"];
m7_43 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="Tokenizer.cs"];
m7_46 [label="!arg.EqualsOrdinal(''--'')", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m7_47 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m7_49 [label="!arg.EqualsOrdinal(''--'')", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m7_50 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m7_52 [label="Token.Value(t)", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m7_53 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="Tokenizer.cs"];
m7_56 [label="Exit lambda expression", span="43-43", cluster="lambda expression", file="Tokenizer.cs"];
m7_38 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs"];
m7_13 [label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_85 [label="value == null", span="102-102", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_91 [label="yield return Token.Name(text);", span="113-113", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_92 [label="yield break;", span="114-114", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_95 [label="yield break;", span="119-119", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_97 [label="yield return Token.Name(parts[0]);", span="122-122", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_98 [label="yield return Token.Value(parts[1]);", span="123-123", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_87 [label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="107-107", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_88 [label="var text = value.Substring(2)", span="109-109", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_94 [label="onError(new BadFormatTokenError(value))", span="118-118", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_86 [label="throw new ArgumentNullException(''value'');", span="104-104", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_89 [label="var equalIndex = text.IndexOf('=')", span="110-110", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_96 [label="var parts = text.Split('=')", span="121-121", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_90 [label="equalIndex <= 0", span="111-111", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_93 [label="equalIndex == 1", span="116-116", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_99 [label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m7_37 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m7_19 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="Tokenizer.cs"];
m7_44 [label="Entry string.EqualsOrdinal(string)", span="34-34", cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs"];
m7_35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m7_100 [label="Entry string.IndexOf(char)", span="0-0", cluster="string.IndexOf(char)", file="Tokenizer.cs"];
m7_39 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="Tokenizer.cs"];
m7_40 [label="Entry CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", span="69-69", cluster="CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", file="Tokenizer.cs"];
m7_0 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_1 [label="arguments == null", span="15-15", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_5 [label="var tokens = from arg in arguments\r\n                         from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new Token[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                         select token", span="20-26", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m7_6 [label="var unkTokens = from t in tokens where t.IsName() && !nameLookup(t.Text) select t", span="28-28", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m7_2 [label="throw new ArgumentNullException(''arguments'');", span="15-15", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_3 [label="var errors = new List<Error>()", span="17-17", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_4 [label="Action<Error> onError = e => errors.Add(e)", span="18-18", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_7 [label="return StatePair.Create(tokens.Except(unkTokens), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs"];
m7_8 [label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_17 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="Tokenizer.cs"];
m7_25 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m7_26 [label="arguments == null", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m7_28 [label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="39-39", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m7_29 [label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="41-41", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m7_30 [label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(t => Token.Value(t))", span="42-42", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m7_32 [label="return tokenizer(arguments);", span="45-45", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m7_27 [label="throw new ArgumentNullException(''arguments'');", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m7_31 [label="return tokenizerResult.MapValue(tokens => tokens.Concat(values));", span="43-43", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m7_33 [label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs"];
m7_24 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs"];
m7_79 [label="Entry char.IsDigit(char)", span="0-0", cluster="char.IsDigit(char)", file="Tokenizer.cs"];
m7_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs"];
m7_18 [label="Entry UnknownOptionError.cstr", span="", cluster="UnknownOptionError.cstr", file="Tokenizer.cs"];
m7_84 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Tokenizer.cs"];
m7_14 [label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_57 [label="value == null", span="52-52", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_62 [label="yield return Token.Value(value);", span="63-63", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_63 [label="yield break;", span="64-64", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_65 [label="yield return Token.Name(text);", span="69-69", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_66 [label="yield break;", span="70-70", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_68 [label="yield return Token.Name(first);", span="74-74", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_74 [label="yield return Token.Name(n);", span="84-84", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_76 [label="yield return Token.Value(text.Substring(seen.Count()));", span="93-93", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_59 [label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="57-57", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_60 [label="var text = value.Substring(1)", span="59-59", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_64 [label="value.Length == 2", span="67-67", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_72 [label="!seen.Contains(c) && nameLookup(n)", span="81-81", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_58 [label="throw new ArgumentNullException(''value'');", span="54-54", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_61 [label="char.IsDigit(text[0])", span="61-61", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_67 [label="var first = text.Substring(0, 1)", span="73-73", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_70 [label="text.Substring(1)", span="78-78", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_75 [label="seen.Count() < text.Length", span="91-91", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_69 [label="var seen = new List<char> { first[0] }", span="76-76", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_73 [label="seen.Add(c)", span="83-83", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_71 [label="var n = new string(c, 1)", span="80-80", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_77 [label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs"];
m7_9 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Tokenizer.cs"];
m7_83 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs"];
m7_78 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="Tokenizer.cs"];
m7_104 [label=errors, span="", file="Tokenizer.cs"];
m7_105 [label=values, span="", file="Tokenizer.cs"];
m8_13 [label="Entry CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="46-46", cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_44 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                from t in tseq\r\n                select t;", span="50-57", cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_45 [label="Exit CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="46-46", cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_18 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="TokenPartitioner.cs"];
m8_68 [label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="59-59", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="TokenPartitioner.cs"];
m8_43 [label="Entry CommandLine.Core.Token.IsName()", span="72-72", cluster="CommandLine.Core.Token.IsName()", file="TokenPartitioner.cs"];
m8_11 [label="Entry CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="37-37", cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_36 [label="return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.Item1 == DescriptorType.Boolean, false)\r\n                   select t;", span="41-43", cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_37 [label="Exit CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="37-37", cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_38 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs"];
m8_15 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="TokenPartitioner.cs"];
m8_21 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="TokenPartitioner.cs"];
m8_29 [label="Entry CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", span="88-88", cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TokenPartitioner.cs"];
m8_93 [label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="90-90", cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TokenPartitioner.cs"];
m8_94 [label="Exit CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", span="88-88", cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TokenPartitioner.cs"];
m8_78 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TokenPartitioner.cs"];
m8_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs"];
m8_90 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_22 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_26 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_30 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_33 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_23 [label="v.IsValue()", span="26-26", cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs"];
m8_24 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_27 [label="CreateValue(t.Text,''true'')", span="30-30", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_28 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_31 [label="CreateValue(f.Text, s.Text)", span="31-31", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_32 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_34 [label="t.Text", span="33-33", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_35 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_40 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_41 [label="t.IsName() && info.Item1 == DescriptorType.Boolean", span="42-42", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_42 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_47 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="52-55", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_46 [label="Entry lambda expression", span="51-55", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_50 [label="info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }", span="54-54", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_48 [label="Exit lambda expression", span="51-55", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_49 [label="Entry lambda expression", span="53-54", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_51 [label="Exit lambda expression", span="53-54", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_55 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { } , new Token[] { })\r\n                            : new Token[] {}", span="66-71", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_58 [label="info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { }", span="68-70", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_54 [label="Entry lambda expression", span="65-71", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_66 [label="t.Equals(f)", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_56 [label="Exit lambda expression", span="65-71", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_57 [label="Entry lambda expression", span="67-70", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_59 [label="Exit lambda expression", span="67-70", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_65 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_69 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_72 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_67 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_70 [label="v.IsValue()", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_71 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_73 [label=items, span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_74 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_80 [label="f.IsName()\r\n                            ? CreateValue(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : CreateValue(string.Empty)", span="81-83", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_79 [label="Entry lambda expression", span="80-83", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_85 [label="t.Equals(f)", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_81 [label="Exit lambda expression", span="80-83", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_84 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_87 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_86 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_88 [label="v.IsValue()", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_89 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_91 [label="x.Text", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_92 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m8_0 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_1 [label="var switches = PartitionSwitches(tokens, typeLookup)", span="20-20", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs"];
m8_2 [label="var tokensExceptSwitches = tokens.Except(switches)", span="21-21", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs"];
m8_3 [label="var scalars = PartitionScalars(tokensExceptSwitches, typeLookup)", span="22-22", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs"];
m8_5 [label="var sequences = PartitionSequences(tokensExceptSwitchesAndScalars, typeLookup)", span="24-24", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs"];
m8_9 [label="return Tuple.Create(\r\n                    switches.Select(t => CreateValue(t.Text,''true''))\r\n                        .Concat(scalars.Pairwise((f, s) => CreateValue(f.Text, s.Text)))\r\n                        .Concat(SequenceTokensToKeyValuePairEnumerable(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="29-34", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_4 [label="var tokensExceptSwitchesAndScalars = tokensExceptSwitches.Except(scalars)", span="23-23", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs"];
m8_6 [label="var tokensExceptSwitchesAndScalarsAndSeq = tokensExceptSwitchesAndScalars.Except(sequences)", span="25-25", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs"];
m8_7 [label="var values = tokensExceptSwitchesAndScalarsAndSeq.Where(v => v.IsValue())", span="26-26", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs"];
m8_8 [label="var errors = tokensExceptSwitchesAndScalarsAndSeq.Except(values)", span="27-27", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs"];
m8_10 [label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_63 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="TokenPartitioner.cs"];
m8_60 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs"];
m8_19 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="TokenPartitioner.cs"];
m8_14 [label="Entry CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="60-60", cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_52 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>     \r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { } , new Token[] { })\r\n                            : new Token[] {})\r\n                from t in tseq\r\n                select t;", span="64-73", cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_53 [label="Exit CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="60-60", cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs"];
m8_77 [label="Entry Unk.Pairwise", span="", cluster="Unk.Pairwise", file="TokenPartitioner.cs"];
m8_61 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs"];
m8_20 [label="Entry CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="76-76", cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m8_75 [label="return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? CreateValue(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : CreateValue(string.Empty))\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", span="79-85", cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m8_76 [label="Exit CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="76-76", cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m8_17 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="TokenPartitioner.cs"];
m8_83 [label="Entry Unk.CreateValue", span="", cluster="Unk.CreateValue", file="TokenPartitioner.cs"];
m8_16 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="TokenPartitioner.cs"];
m8_25 [label="Entry CommandLine.Core.Token.IsValue()", span="77-77", cluster="CommandLine.Core.Token.IsValue()", file="TokenPartitioner.cs"];
m8_95 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitioner.cs"];
m8_62 [label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="TokenPartitioner.cs"];
m8_82 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="TokenPartitioner.cs"];
m8_39 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitioner.cs"];
m8_64 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs"];
m8_96 [label=t, span="", file="TokenPartitioner.cs"];
m8_97 [label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", span="", file="TokenPartitioner.cs"];
m8_98 [label="CommandLine.Core.Token", span="", file="TokenPartitioner.cs"];
m8_99 [label="CommandLine.Core.Token", span="", file="TokenPartitioner.cs"];
m8_100 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="TokenPartitioner.cs"];
m8_101 [label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", span="", file="TokenPartitioner.cs"];
m8_102 [label="CommandLine.Core.Token", span="", file="TokenPartitioner.cs"];
m8_103 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="TokenPartitioner.cs"];
m8_104 [label="CommandLine.Core.Token", span="", file="TokenPartitioner.cs"];
m9_0 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m9_1 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m9_2 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, null, typeof(string), string.Empty, string.Empty),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, null, typeof(IEnumerable<int>), string.Empty, string.Empty)\r\n                }", span="21-25", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=green, community=0, file="TokenPartitionerTests.cs"];
m9_4 [label="Assert.True(expectedSequence.All(a => result.Item1.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m9_3 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.GetDescriptorInfo(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m9_5 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m9_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs"];
m9_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", span="15-15", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="TokenPartitionerTests.cs"];
m9_12 [label="Entry Unk.True", span="", cluster="Unk.True", file="TokenPartitionerTests.cs"];
m9_16 [label="Entry CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs"];
m9_11 [label="Entry Unk.All", span="", cluster="Unk.All", file="TokenPartitionerTests.cs"];
m9_21 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m9_14 [label="TypeLookup.GetDescriptorInfo(name, specs, StringComparer.InvariantCulture)", span="30-30", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m9_13 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m9_18 [label="result.Item1.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m9_17 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m9_15 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m9_19 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m9_22 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m9_23 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m9_24 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TokenPartitionerTests.cs"];
m9_8 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs"];
m9_10 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitionerTests.cs"];
m9_25 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs"];
m9_20 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="TokenPartitionerTests.cs"];
m9_9 [label="Entry CommandLine.Core.Token.Value(string)", span="26-26", cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs"];
m9_26 [label=specs, span="", file="TokenPartitionerTests.cs"];
m9_27 [label=result, span="", file="TokenPartitionerTests.cs"];
m9_28 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span="", file="TokenPartitionerTests.cs"];
m1_22 -> m1_23  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_3  [key=2, style=dotted];
m1_23 -> m1_19  [key=2, style=dotted];
m1_23 -> m1_32  [key=2, style=dotted];
m1_23 -> m1_33  [key=2, style=dotted];
m1_23 -> m1_20  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_4  [key=2, style=dotted];
m1_24 -> m1_21  [key=2, style=dotted];
m1_24 -> m1_34  [key=2, style=dotted];
m1_24 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_24 -> m1_30  [key=1, style=dashed, color=green, label=lines];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_5  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_5  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_5  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_5  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid, color=green];
m1_29 -> m1_5  [key=2, style=dotted];
m1_30 -> m1_31  [key=0, style=solid, color=green];
m1_30 -> m1_5  [key=2, style=dotted, color=green];
m1_31 -> m1_22  [key=0, style=bold, color=blue];
m1_42 -> m1_43  [key=0, style=solid, color=green];
m1_43 -> m1_44  [key=0, style=solid, color=green];
m1_43 -> m1_40  [key=2, style=dotted, color=green];
m1_43 -> m1_17  [key=2, style=dotted, color=green];
m1_43 -> m1_45  [key=1, style=dashed, color=green, label=sut];
m1_43 -> m1_46  [key=1, style=dashed, color=green, label=sut];
m1_44 -> m1_45  [key=0, style=solid, color=green];
m1_45 -> m1_46  [key=0, style=solid, color=green];
m1_45 -> m1_53  [key=2, style=dotted, color=green];
m1_45 -> m1_33  [key=2, style=dotted, color=green];
m1_46 -> m1_47  [key=0, style=solid, color=green];
m1_46 -> m1_4  [key=2, style=dotted, color=green];
m1_46 -> m1_54  [key=2, style=dotted, color=green];
m1_46 -> m1_48  [key=1, style=dashed, color=green, label=lines];
m1_46 -> m1_49  [key=1, style=dashed, color=green, label=lines];
m1_46 -> m1_50  [key=1, style=dashed, color=green, label=lines];
m1_46 -> m1_51  [key=1, style=dashed, color=green, label=lines];
m1_47 -> m1_48  [key=0, style=solid, color=green];
m1_47 -> m1_55  [key=2, style=dotted, color=green];
m1_47 -> m1_56  [key=2, style=dotted, color=green];
m1_48 -> m1_49  [key=0, style=solid, color=green];
m1_48 -> m1_55  [key=2, style=dotted, color=green];
m1_48 -> m1_56  [key=2, style=dotted, color=green];
m1_49 -> m1_50  [key=0, style=solid, color=green];
m1_49 -> m1_55  [key=2, style=dotted, color=green];
m1_49 -> m1_56  [key=2, style=dotted, color=green];
m1_50 -> m1_51  [key=0, style=solid, color=green];
m1_50 -> m1_55  [key=2, style=dotted, color=green];
m1_50 -> m1_56  [key=2, style=dotted, color=green];
m1_51 -> m1_52  [key=0, style=solid, color=green];
m1_51 -> m1_55  [key=2, style=dotted, color=green];
m1_51 -> m1_56  [key=2, style=dotted, color=green];
m1_52 -> m1_42  [key=0, style=bold, color=blue];
m1_57 -> m1_58  [key=0, style=solid];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_40  [key=2, style=dotted];
m1_58 -> m1_17  [key=2, style=dotted];
m1_58 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_58 -> m1_61  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_59 -> m1_60  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_69  [key=2, style=dotted];
m1_60 -> m1_33  [key=2, style=dotted];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_4  [key=2, style=dotted];
m1_61 -> m1_54  [key=2, style=dotted];
m1_61 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_61 -> m1_64  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_61 -> m1_65  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_61 -> m1_66  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_61 -> m1_67  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_55  [key=2, style=dotted];
m1_62 -> m1_56  [key=2, style=dotted];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_55  [key=2, style=dotted];
m1_63 -> m1_56  [key=2, style=dotted];
m1_64 -> m1_65  [key=0, style=solid];
m1_64 -> m1_55  [key=2, style=dotted];
m1_64 -> m1_56  [key=2, style=dotted];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_55  [key=2, style=dotted];
m1_65 -> m1_56  [key=2, style=dotted];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_55  [key=2, style=dotted];
m1_66 -> m1_56  [key=2, style=dotted];
m1_67 -> m1_68  [key=0, style=solid];
m1_67 -> m1_55  [key=2, style=dotted];
m1_67 -> m1_56  [key=2, style=dotted];
m1_68 -> m1_57  [key=0, style=bold, color=blue];
m1_133 -> m1_134  [key=0, style=solid];
m1_134 -> m1_135  [key=0, style=solid];
m1_134 -> m1_97  [key=2, style=dotted];
m1_134 -> m1_32  [key=2, style=dotted];
m1_134 -> m1_99  [key=2, style=dotted];
m1_134 -> m1_105  [key=2, style=dotted];
m1_134 -> m1_101  [key=2, style=dotted];
m1_134 -> m1_110  [key=2, style=dotted];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_147  [key=2, style=dotted];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_4  [key=2, style=dotted];
m1_136 -> m1_21  [key=2, style=dotted];
m1_136 -> m1_34  [key=2, style=dotted];
m1_136 -> m1_138  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_136 -> m1_139  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_136 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_136 -> m1_141  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_136 -> m1_142  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_136 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_136 -> m1_144  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_136 -> m1_145  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_148  [key=2, style=dotted];
m1_137 -> m1_149  [key=2, style=dotted];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_148  [key=2, style=dotted];
m1_138 -> m1_149  [key=2, style=dotted];
m1_139 -> m1_140  [key=0, style=solid];
m1_139 -> m1_5  [key=2, style=dotted];
m1_140 -> m1_141  [key=0, style=solid];
m1_140 -> m1_5  [key=2, style=dotted];
m1_141 -> m1_142  [key=0, style=solid];
m1_141 -> m1_5  [key=2, style=dotted];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_5  [key=2, style=dotted];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_5  [key=2, style=dotted];
m1_144 -> m1_145  [key=0, style=solid];
m1_144 -> m1_5  [key=2, style=dotted];
m1_145 -> m1_146  [key=0, style=solid];
m1_145 -> m1_5  [key=2, style=dotted];
m1_146 -> m1_133  [key=0, style=bold, color=blue];
m1_161 -> m1_162  [key=0, style=solid];
m1_162 -> m1_163  [key=0, style=solid];
m1_162 -> m1_173  [key=2, style=dotted];
m1_162 -> m1_174  [key=2, style=dotted];
m1_163 -> m1_164  [key=0, style=solid];
m1_163 -> m1_97  [key=2, style=dotted];
m1_163 -> m1_98  [key=2, style=dotted];
m1_163 -> m1_109  [key=2, style=dotted];
m1_163 -> m1_175  [key=2, style=dotted];
m1_164 -> m1_165  [key=0, style=solid];
m1_164 -> m1_147  [key=2, style=dotted];
m1_165 -> m1_166  [key=0, style=solid];
m1_165 -> m1_4  [key=2, style=dotted];
m1_165 -> m1_21  [key=2, style=dotted];
m1_165 -> m1_34  [key=2, style=dotted];
m1_165 -> m1_167  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_165 -> m1_168  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_165 -> m1_169  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_165 -> m1_170  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_165 -> m1_171  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_166 -> m1_167  [key=0, style=solid];
m1_166 -> m1_148  [key=2, style=dotted];
m1_166 -> m1_149  [key=2, style=dotted];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_148  [key=2, style=dotted];
m1_167 -> m1_149  [key=2, style=dotted];
m1_168 -> m1_169  [key=0, style=solid];
m1_168 -> m1_5  [key=2, style=dotted];
m1_169 -> m1_170  [key=0, style=solid];
m1_169 -> m1_5  [key=2, style=dotted];
m1_170 -> m1_171  [key=0, style=solid];
m1_170 -> m1_5  [key=2, style=dotted];
m1_171 -> m1_172  [key=0, style=solid];
m1_171 -> m1_5  [key=2, style=dotted];
m1_172 -> m1_161  [key=0, style=bold, color=blue];
m1_70 -> m1_71  [key=0, style=solid];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_40  [key=2, style=dotted];
m1_71 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_71 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label=sut];
m1_72 -> m1_73  [key=0, style=solid];
m1_73 -> m1_74  [key=0, style=solid];
m1_73 -> m1_19  [key=2, style=dotted];
m1_73 -> m1_82  [key=2, style=dotted];
m1_73 -> m1_33  [key=2, style=dotted];
m1_73 -> m1_20  [key=2, style=dotted];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_4  [key=2, style=dotted];
m1_74 -> m1_54  [key=2, style=dotted];
m1_74 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_74 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_74 -> m1_78  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_74 -> m1_79  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_74 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_55  [key=2, style=dotted];
m1_75 -> m1_56  [key=2, style=dotted];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_55  [key=2, style=dotted];
m1_76 -> m1_56  [key=2, style=dotted];
m1_77 -> m1_78  [key=0, style=solid];
m1_77 -> m1_55  [key=2, style=dotted];
m1_77 -> m1_56  [key=2, style=dotted];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_55  [key=2, style=dotted];
m1_78 -> m1_56  [key=2, style=dotted];
m1_79 -> m1_80  [key=0, style=solid];
m1_79 -> m1_55  [key=2, style=dotted];
m1_79 -> m1_56  [key=2, style=dotted];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_55  [key=2, style=dotted];
m1_80 -> m1_56  [key=2, style=dotted];
m1_81 -> m1_70  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_35 -> m1_36  [key=0, style=solid, color=green];
m1_36 -> m1_37  [key=0, style=solid, color=green];
m1_36 -> m1_40  [key=2, style=dotted, color=green];
m1_36 -> m1_41  [key=2, style=dotted, color=green];
m1_36 -> m1_33  [key=2, style=dotted, color=green];
m1_37 -> m1_38  [key=0, style=solid, color=green];
m1_37 -> m1_4  [key=2, style=dotted, color=green];
m1_37 -> m1_21  [key=2, style=dotted, color=green];
m1_37 -> m1_34  [key=2, style=dotted, color=green];
m1_38 -> m1_39  [key=0, style=solid, color=green];
m1_38 -> m1_5  [key=2, style=dotted, color=green];
m1_39 -> m1_35  [key=0, style=bold, color=blue];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_112 -> m1_117  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_112 -> m1_119  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_112 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_112 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_112 -> m1_125  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_112 -> m1_129  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_116  [key=0, style=solid];
m1_113 -> m1_118  [key=0, style=solid];
m1_113 -> m1_120  [key=0, style=solid];
m1_113 -> m1_122  [key=0, style=solid];
m1_113 -> m1_124  [key=0, style=solid];
m1_113 -> m1_126  [key=0, style=solid];
m1_113 -> m1_128  [key=0, style=solid];
m1_113 -> m1_130  [key=0, style=solid];
m1_115 -> m1_131  [key=0, style=solid];
m1_117 -> m1_131  [key=0, style=solid];
m1_119 -> m1_131  [key=0, style=solid];
m1_121 -> m1_131  [key=0, style=solid];
m1_123 -> m1_131  [key=0, style=solid];
m1_125 -> m1_131  [key=0, style=solid];
m1_129 -> m1_131  [key=0, style=solid];
m1_114 -> m1_115  [key=0, style=solid];
m1_116 -> m1_117  [key=0, style=solid];
m1_118 -> m1_119  [key=0, style=solid];
m1_120 -> m1_121  [key=0, style=solid];
m1_122 -> m1_123  [key=0, style=solid];
m1_124 -> m1_125  [key=0, style=solid];
m1_126 -> m1_127  [key=0, style=solid];
m1_128 -> m1_129  [key=0, style=solid];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_132  [key=2, style=dotted];
m1_127 -> m1_131  [key=0, style=solid];
m1_131 -> m1_112  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_16  [key=2, style=dotted];
m1_7 -> m1_17  [key=2, style=dotted];
m1_7 -> m1_18  [key=2, style=dotted];
m1_7 -> m1_19  [key=2, style=dotted];
m1_7 -> m1_20  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_4  [key=2, style=dotted];
m1_8 -> m1_21  [key=2, style=dotted];
m1_8 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_8 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_8 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_8 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_8 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_5  [key=2, style=dotted];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_5  [key=2, style=dotted];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_5  [key=2, style=dotted];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_5  [key=2, style=dotted];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_5  [key=2, style=dotted];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_5  [key=2, style=dotted];
m1_15 -> m1_6  [key=0, style=bold, color=blue];
m1_83 -> m1_84  [key=0, style=solid];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_97  [key=2, style=dotted];
m1_84 -> m1_98  [key=2, style=dotted];
m1_84 -> m1_99  [key=2, style=dotted];
m1_84 -> m1_100  [key=2, style=dotted];
m1_84 -> m1_101  [key=2, style=dotted];
m1_84 -> m1_102  [key=2, style=dotted];
m1_84 -> m1_103  [key=2, style=dotted];
m1_84 -> m1_104  [key=2, style=dotted];
m1_84 -> m1_105  [key=2, style=dotted];
m1_84 -> m1_106  [key=2, style=dotted];
m1_84 -> m1_107  [key=2, style=dotted];
m1_84 -> m1_108  [key=2, style=dotted];
m1_84 -> m1_109  [key=2, style=dotted];
m1_84 -> m1_110  [key=2, style=dotted];
m1_84 -> m1_86  [key=1, style=dashed, color=darkseagreen4, label=fakeResult];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_85 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_85 -> m1_117  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_85 -> m1_119  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_85 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_85 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_85 -> m1_125  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_85 -> m1_129  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m1_85 -> m1_85  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<CommandLine.Error, string> fakeRenderer"];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_111  [key=2, style=dotted];
m1_87 -> m1_88  [key=0, style=solid];
m1_87 -> m1_21  [key=2, style=dotted];
m1_87 -> m1_89  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_87 -> m1_90  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_87 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_87 -> m1_92  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_87 -> m1_93  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_87 -> m1_94  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_87 -> m1_95  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_5  [key=2, style=dotted];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_5  [key=2, style=dotted];
m1_90 -> m1_91  [key=0, style=solid];
m1_90 -> m1_5  [key=2, style=dotted];
m1_91 -> m1_92  [key=0, style=solid];
m1_91 -> m1_5  [key=2, style=dotted];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_5  [key=2, style=dotted];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_5  [key=2, style=dotted];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_5  [key=2, style=dotted];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_5  [key=2, style=dotted];
m1_96 -> m1_83  [key=0, style=bold, color=blue];
m1_150 -> m1_151  [key=0, style=solid];
m1_151 -> m1_152  [key=0, style=solid];
m1_151 -> m1_97  [key=2, style=dotted];
m1_151 -> m1_98  [key=2, style=dotted];
m1_151 -> m1_109  [key=2, style=dotted];
m1_151 -> m1_110  [key=2, style=dotted];
m1_152 -> m1_153  [key=0, style=solid];
m1_152 -> m1_147  [key=2, style=dotted];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_4  [key=2, style=dotted];
m1_153 -> m1_21  [key=2, style=dotted];
m1_153 -> m1_34  [key=2, style=dotted];
m1_153 -> m1_155  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_153 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_153 -> m1_157  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_153 -> m1_158  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_153 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label=lines];
m1_154 -> m1_155  [key=0, style=solid];
m1_154 -> m1_148  [key=2, style=dotted];
m1_154 -> m1_149  [key=2, style=dotted];
m1_155 -> m1_156  [key=0, style=solid];
m1_155 -> m1_148  [key=2, style=dotted];
m1_155 -> m1_149  [key=2, style=dotted];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_5  [key=2, style=dotted];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_5  [key=2, style=dotted];
m1_158 -> m1_159  [key=0, style=solid];
m1_158 -> m1_5  [key=2, style=dotted];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_5  [key=2, style=dotted];
m1_160 -> m1_150  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=tokenPartitions];
m2_2 -> m2_3  [key=0, style=solid, color=green];
m2_2 -> m2_7  [key=2, style=dotted, color=green];
m2_2 -> m2_8  [key=2, style=dotted, color=green];
m2_2 -> m2_9  [key=2, style=dotted, color=green];
m2_2 -> m2_10  [key=2, style=dotted, color=green];
m2_2 -> m2_11  [key=2, style=dotted, color=green];
m2_2 -> m2_15  [key=1, style=dashed, color=green, label="lambda expression"];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_12  [key=2, style=dotted];
m2_3 -> m2_13  [key=2, style=dotted];
m2_3 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_3 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_10  [key=2, style=dotted];
m2_4 -> m2_14  [key=2, style=dotted];
m2_4 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_27 -> m2_28  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_23 -> m2_24  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_18  [key=2, style=dotted];
m2_17 -> m2_15  [key=0, style=bold, color=blue];
m2_20 -> m2_21  [key=0, style=solid];
m2_20 -> m2_22  [key=2, style=dotted];
m2_21 -> m2_19  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=2, style=dotted];
m2_25 -> m2_23  [key=0, style=bold, color=blue];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_22  [key=2, style=dotted];
m2_28 -> m2_30  [key=2, style=dotted];
m2_29 -> m2_27  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_0 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_0 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_0 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_0  [key=0, style=bold, color=blue];
m3_7 -> m3_8  [key=0, style=solid, color=green];
m3_8 -> m3_9  [key=0, style=solid, color=green];
m3_8 -> m3_0  [key=2, style=dotted, color=green];
m3_8 -> m3_10  [key=2, style=dotted, color=green];
m3_9 -> m3_7  [key=0, style=bold, color=blue];
m3_11 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m3_11 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m3_11 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m3_11 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m3_11 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m4_4 -> m4_5  [key=0, style=solid];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_7  [key=2, style=dotted];
m4_6 -> m4_4  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_2 -> m4_3  [key=0, style=solid];
m4_3 -> m4_0  [key=0, style=bold, color=blue];
m4_7 -> m4_13  [key=0, style=solid];
m4_7 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label=bool];
m4_7 -> m4_5  [key=3, color=darkorchid, style=bold, label="Parameter variable bool disposing"];
m4_7 -> m4_9  [key=3, color=darkorchid, style=bold, label="Parameter variable bool disposing"];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_15  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_20  [key=0, style=solid];
m4_14 -> m4_20  [key=0, style=solid];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_19  [key=0, style=solid];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_21  [key=2, style=dotted];
m4_19 -> m4_20  [key=0, style=solid];
m4_18 -> m4_19  [key=0, style=solid];
m4_20 -> m4_7  [key=0, style=bold, color=blue];
m4_8 -> m4_9  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_7  [key=2, style=dotted];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_12  [key=2, style=dotted];
m4_11 -> m4_8  [key=0, style=bold, color=blue];
m4_22 -> m4_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_22 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_22 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_22 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_22 -> m4_10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_22 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_22 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_22 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_22 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m4_22 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m5_28 -> m5_0  [key=3, color=darkorchid, style=bold, label="Field variable CommandLine.Core.SpecificationType tag"];
m5_25 -> m5_0  [key=3, color=darkorchid, style=bold, label="Field variable System.Type conversionType"];
m5_8 -> m5_9  [key=0, style=solid, color=green];
m5_8 -> m5_12  [key=1, style=dashed, color=red, label="System.Reflection.PropertyInfo"];
m5_8 -> m5_14  [key=1, style=dashed, color=red, label="System.Reflection.PropertyInfo"];
m5_8 -> m5_18  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m5_9 -> m5_10  [key=0, style=solid, color=green];
m5_9 -> m5_21  [key=2, style=dotted, color=green];
m5_9 -> m5_16  [key=1, style=dashed, color=green, label=attrs];
m5_12 -> m5_13  [key=0, style=solid, color=green];
m5_12 -> m5_24  [key=2, style=dotted, color=green];
m5_12 -> m5_25  [key=2, style=dotted, color=green];
m5_12 -> m5_14  [key=1, style=dashed, color=green, label=spec];
m5_12 -> m5_15  [key=1, style=dashed, color=green, label=spec];
m5_14 -> m5_20  [key=0, style=solid, color=red];
m5_14 -> m5_26  [key=2, style=dotted, color=red];
m5_14 -> m5_27  [key=2, style=dotted, color=red];
m5_18 -> m5_20  [key=0, style=solid];
m5_18 -> m5_24  [key=2, style=dotted];
m5_18 -> m5_28  [key=2, style=dotted];
m5_10 -> m5_11  [key=0, style=solid, color=green];
m5_10 -> m5_22  [key=2, style=dotted, color=green];
m5_10 -> m5_12  [key=1, style=dashed, color=green, label=oa];
m5_16 -> m5_17  [key=0, style=solid, color=green];
m5_16 -> m5_22  [key=2, style=dotted];
m5_16 -> m5_18  [key=1, style=dashed, color=darkseagreen4, label=va];
m5_11 -> m5_12  [key=0, style=solid, color=green];
m5_11 -> m5_16  [key=0, style=solid, color=green];
m5_11 -> m5_23  [key=2, style=dotted, color=green];
m5_13 -> m5_14  [key=0, style=solid, color=green];
m5_13 -> m5_15  [key=0, style=solid, color=green];
m5_15 -> m5_20  [key=0, style=solid];
m5_17 -> m5_18  [key=0, style=solid, color=green];
m5_17 -> m5_19  [key=0, style=solid, color=green];
m5_17 -> m5_23  [key=2, style=dotted, color=green];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_29  [key=2, style=dotted];
m5_20 -> m5_8  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label=bool];
m5_0 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m5_0 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label=int];
m5_0 -> m5_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<object>"];
m5_0 -> m5_6  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m5_1 -> m5_2  [key=0, style=solid];
m5_2 -> m5_3  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid];
m5_4 -> m5_5  [key=0, style=solid];
m5_5 -> m5_6  [key=0, style=solid];
m5_6 -> m5_7  [key=0, style=solid];
m5_7 -> m5_0  [key=0, style=bold, color=blue];
m5_30 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m5_30 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m5_30 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m5_30 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m5_30 -> m5_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m5_30 -> m5_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m6_10 -> m6_11  [key=0, style=solid];
m6_11 -> m6_12  [key=0, style=solid];
m6_12 -> m6_10  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_1 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=0, style=solid];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_5  [key=2, style=dotted];
m6_2 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_48 -> m6_49  [key=0, style=solid];
m6_49 -> m6_52  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_49 -> m6_50  [key=0, style=solid];
m6_50 -> m6_48  [key=0, style=bold, color=blue];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_11  [key=2, style=dotted];
m6_5 -> m6_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_8  [key=0, style=solid];
m6_6 -> m6_12  [key=2, style=dotted];
m6_20 -> m6_21  [key=0, style=solid];
m6_33 -> m6_34  [key=0, style=solid, color=green];
m6_33 -> m6_10  [key=2, style=dotted, color=green];
m6_33 -> m6_39  [key=1, style=dashed, color=green, label="lambda expression"];
m6_33 -> m6_35  [key=1, style=dashed, color=green, label=options];
m6_32 -> m6_33  [key=0, style=solid, color=green];
m6_34 -> m6_35  [key=0, style=solid, color=green];
m6_34 -> m6_36  [key=0, style=solid, color=green];
m6_34 -> m6_38  [key=2, style=dotted, color=green];
m6_39 -> m6_40  [key=0, style=solid, color=green];
m6_35 -> m6_37  [key=0, style=solid, color=green];
m6_35 -> m6_13  [key=2, style=dotted, color=green];
m6_35 -> m6_43  [key=1, style=dashed, color=green, label="lambda expression"];
m6_36 -> m6_37  [key=0, style=solid, color=green];
m6_36 -> m6_14  [key=2, style=dotted, color=green];
m6_37 -> m6_32  [key=0, style=bold, color=blue];
m6_43 -> m6_44  [key=0, style=solid, color=green];
m6_40 -> m6_41  [key=0, style=solid, color=green];
m6_40 -> m6_42  [key=2, style=dotted, color=green];
m6_41 -> m6_39  [key=0, style=bold, color=blue];
m6_44 -> m6_45  [key=0, style=solid, color=green];
m6_44 -> m6_46  [key=2, style=dotted, color=green];
m6_44 -> m6_47  [key=2, style=dotted, color=green];
m6_44 -> m6_28  [key=2, style=dotted, color=green];
m6_45 -> m6_43  [key=0, style=bold, color=blue];
m6_4 -> m6_10  [key=2, style=dotted];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_4 -> m6_7  [key=1, style=dashed, color=darkseagreen4, label=options];
m6_4 -> m6_0  [key=0, style=bold, color=blue];
m6_52 -> m6_10  [key=2, style=dotted];
m6_52 -> m6_53  [key=0, style=solid];
m6_52 -> m6_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_52 -> m6_54  [key=1, style=dashed, color=darkseagreen4, label=options];
m6_53 -> m6_38  [key=2, style=dotted];
m6_53 -> m6_54  [key=0, style=solid];
m6_53 -> m6_55  [key=0, style=solid];
m6_7 -> m6_13  [key=2, style=dotted];
m6_7 -> m6_9  [key=0, style=solid];
m6_7 -> m6_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_7 -> m6_8  [key=0, style=solid];
m6_54 -> m6_13  [key=2, style=dotted];
m6_54 -> m6_56  [key=0, style=solid];
m6_54 -> m6_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_8 -> m6_14  [key=2, style=dotted];
m6_8 -> m6_9  [key=0, style=solid];
m6_55 -> m6_14  [key=2, style=dotted];
m6_55 -> m6_56  [key=0, style=solid];
m6_63 -> m6_47  [key=2, style=dotted];
m6_63 -> m6_28  [key=2, style=dotted];
m6_63 -> m6_64  [key=0, style=solid];
m6_63 -> m6_65  [key=2, style=dotted];
m6_24 -> m6_28  [key=2, style=dotted];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_26  [key=2, style=dotted];
m6_24 -> m6_27  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_6  [key=2, style=dotted];
m6_15 -> m6_16  [key=0, style=solid];
m6_51 -> m6_52  [key=0, style=solid];
m6_57 -> m6_58  [key=0, style=solid];
m6_9 -> m6_3  [key=0, style=bold, color=blue];
m6_9 -> m6_7  [key=0, style=bold, color=blue];
m6_23 -> m6_24  [key=0, style=solid];
m6_56 -> m6_51  [key=0, style=bold, color=blue];
m6_62 -> m6_63  [key=0, style=solid];
m6_64 -> m6_62  [key=0, style=bold, color=blue];
m6_25 -> m6_23  [key=0, style=bold, color=blue];
m6_17 -> m6_15  [key=0, style=bold, color=blue];
m6_16 -> m6_17  [key=0, style=solid];
m6_16 -> m6_18  [key=2, style=dotted];
m6_16 -> m6_19  [key=2, style=dotted];
m6_59 -> m6_57  [key=0, style=bold, color=blue];
m6_58 -> m6_59  [key=0, style=solid];
m6_58 -> m6_60  [key=2, style=dotted];
m6_58 -> m6_19  [key=2, style=dotted];
m6_58 -> m6_61  [key=2, style=dotted];
m6_21 -> m6_22  [key=0, style=solid];
m6_22 -> m6_20  [key=0, style=bold, color=blue];
m6_29 -> m6_30  [key=0, style=solid, color=green];
m6_30 -> m6_31  [key=0, style=solid, color=green];
m6_30 -> m6_33  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m6_31 -> m6_29  [key=0, style=bold, color=blue];
m7_54 -> m7_55  [key=0, style=solid];
m7_22 -> m7_23  [key=0, style=solid];
m7_22 -> m7_24  [key=2, style=dotted];
m7_21 -> m7_22  [key=0, style=solid];
m7_23 -> m7_21  [key=0, style=bold, color=blue];
m7_41 -> m7_42  [key=0, style=solid];
m7_45 -> m7_46  [key=0, style=solid];
m7_48 -> m7_49  [key=0, style=solid];
m7_51 -> m7_52  [key=0, style=solid];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_19  [key=2, style=dotted];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_44  [key=2, style=dotted];
m7_43 -> m7_41  [key=0, style=bold, color=blue];
m7_46 -> m7_47  [key=0, style=solid];
m7_46 -> m7_44  [key=2, style=dotted];
m7_47 -> m7_45  [key=0, style=bold, color=blue];
m7_49 -> m7_50  [key=0, style=solid];
m7_49 -> m7_44  [key=2, style=dotted];
m7_50 -> m7_48  [key=0, style=bold, color=blue];
m7_52 -> m7_53  [key=0, style=solid];
m7_52 -> m7_12  [key=2, style=dotted];
m7_53 -> m7_51  [key=0, style=bold, color=blue];
m7_56 -> m7_54  [key=0, style=bold, color=blue];
m7_13 -> m7_85  [key=0, style=solid];
m7_13 -> m7_91  [key=0, style=bold, color=crimson];
m7_13 -> m7_92  [key=0, style=bold, color=crimson];
m7_13 -> m7_95  [key=0, style=bold, color=crimson];
m7_13 -> m7_97  [key=0, style=bold, color=crimson];
m7_13 -> m7_98  [key=0, style=bold, color=crimson];
m7_13 -> m7_87  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_13 -> m7_88  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_13 -> m7_94  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_85 -> m7_86  [key=0, style=solid];
m7_85 -> m7_87  [key=0, style=solid];
m7_91 -> m7_92  [key=0, style=solid];
m7_91 -> m7_80  [key=2, style=dotted];
m7_92 -> m7_93  [key=0, style=solid];
m7_95 -> m7_96  [key=0, style=solid];
m7_97 -> m7_98  [key=0, style=solid];
m7_97 -> m7_80  [key=2, style=dotted];
m7_98 -> m7_99  [key=0, style=solid];
m7_98 -> m7_12  [key=2, style=dotted];
m7_87 -> m7_88  [key=0, style=solid];
m7_87 -> m7_99  [key=0, style=solid];
m7_87 -> m7_11  [key=2, style=dotted];
m7_88 -> m7_89  [key=0, style=solid];
m7_88 -> m7_78  [key=2, style=dotted];
m7_88 -> m7_91  [key=1, style=dashed, color=darkseagreen4, label=text];
m7_88 -> m7_96  [key=1, style=dashed, color=darkseagreen4, label=text];
m7_94 -> m7_95  [key=0, style=solid];
m7_94 -> m7_101  [key=2, style=dotted];
m7_94 -> m7_102  [key=2, style=dotted];
m7_86 -> m7_99  [key=0, style=solid];
m7_86 -> m7_9  [key=2, style=dotted];
m7_89 -> m7_90  [key=0, style=solid];
m7_89 -> m7_100  [key=2, style=dotted];
m7_89 -> m7_93  [key=1, style=dashed, color=darkseagreen4, label=equalIndex];
m7_96 -> m7_97  [key=0, style=solid];
m7_96 -> m7_103  [key=2, style=dotted];
m7_96 -> m7_98  [key=1, style=dashed, color=darkseagreen4, label=parts];
m7_90 -> m7_91  [key=0, style=solid];
m7_90 -> m7_93  [key=0, style=solid];
m7_93 -> m7_94  [key=0, style=solid];
m7_93 -> m7_96  [key=0, style=solid];
m7_99 -> m7_13  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_5  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
m7_0 -> m7_6  [key=1, style=dashed, color=green, label="System.Func<string, bool>"];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid, color=green];
m7_5 -> m7_11  [key=2, style=dotted, color=green];
m7_5 -> m7_12  [key=2, style=dotted, color=green];
m7_5 -> m7_13  [key=2, style=dotted, color=green];
m7_5 -> m7_14  [key=2, style=dotted, color=green];
m7_5 -> m7_5  [key=1, style=dashed, color=green, label=arg];
m7_5 -> m7_7  [key=1, style=dashed, color=green, label=tokens];
m7_6 -> m7_7  [key=0, style=solid, color=green];
m7_6 -> m7_15  [key=2, style=dotted, color=green];
m7_6 -> m7_16  [key=2, style=dotted, color=green];
m7_6 -> m7_6  [key=1, style=dashed, color=green, label=t];
m7_2 -> m7_8  [key=0, style=solid];
m7_2 -> m7_9  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_10  [key=2, style=dotted];
m7_3 -> m7_22  [key=1, style=dashed, color=darkseagreen4, label=errors];
m7_3 -> m7_7  [key=1, style=dashed, color=green, label=errors];
m7_4 -> m7_5  [key=0, style=solid, color=green];
m7_4 -> m7_22  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
m7_4 -> m7_4  [key=3, color=darkorchid, style=bold, label="Local variable System.Action<CommandLine.Error> onError"];
m7_7 -> m7_8  [key=0, style=solid, color=green];
m7_7 -> m7_17  [key=2, style=dotted, color=green];
m7_7 -> m7_18  [key=2, style=dotted, color=green];
m7_7 -> m7_19  [key=2, style=dotted, color=green];
m7_7 -> m7_20  [key=2, style=dotted, color=green];
m7_7 -> m7_7  [key=1, style=dashed, color=green, label=t];
m7_8 -> m7_0  [key=0, style=bold, color=blue];
m7_25 -> m7_26  [key=0, style=solid];
m7_25 -> m7_28  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m7_25 -> m7_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m7_25 -> m7_30  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m7_25 -> m7_32  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m7_26 -> m7_27  [key=0, style=solid];
m7_26 -> m7_28  [key=0, style=solid];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_32  [key=0, style=solid];
m7_28 -> m7_34  [key=2, style=dotted];
m7_28 -> m7_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_29 -> m7_30  [key=0, style=solid];
m7_29 -> m7_35  [key=2, style=dotted];
m7_29 -> m7_36  [key=2, style=dotted];
m7_29 -> m7_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_29 -> m7_31  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m7_30 -> m7_31  [key=0, style=solid];
m7_30 -> m7_37  [key=2, style=dotted];
m7_30 -> m7_38  [key=2, style=dotted];
m7_30 -> m7_39  [key=2, style=dotted];
m7_30 -> m7_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_30 -> m7_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_30 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label=values];
m7_32 -> m7_33  [key=0, style=solid];
m7_32 -> m7_36  [key=2, style=dotted];
m7_27 -> m7_33  [key=0, style=solid];
m7_27 -> m7_9  [key=2, style=dotted];
m7_31 -> m7_33  [key=0, style=solid];
m7_31 -> m7_40  [key=2, style=dotted];
m7_31 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_33 -> m7_25  [key=0, style=bold, color=blue];
m7_14 -> m7_57  [key=0, style=solid];
m7_14 -> m7_62  [key=0, style=bold, color=crimson];
m7_14 -> m7_63  [key=0, style=bold, color=crimson];
m7_14 -> m7_65  [key=0, style=bold, color=crimson];
m7_14 -> m7_66  [key=0, style=bold, color=crimson];
m7_14 -> m7_68  [key=0, style=bold, color=crimson];
m7_14 -> m7_74  [key=0, style=bold, color=crimson];
m7_14 -> m7_76  [key=0, style=bold, color=crimson];
m7_14 -> m7_59  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_14 -> m7_60  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_14 -> m7_64  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_14 -> m7_72  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m7_57 -> m7_58  [key=0, style=solid];
m7_57 -> m7_59  [key=0, style=solid];
m7_62 -> m7_63  [key=0, style=solid];
m7_62 -> m7_12  [key=2, style=dotted];
m7_63 -> m7_64  [key=0, style=solid];
m7_65 -> m7_66  [key=0, style=solid];
m7_65 -> m7_80  [key=2, style=dotted];
m7_66 -> m7_67  [key=0, style=solid];
m7_68 -> m7_69  [key=0, style=solid];
m7_68 -> m7_80  [key=2, style=dotted];
m7_74 -> m7_70  [key=0, style=solid];
m7_74 -> m7_80  [key=2, style=dotted];
m7_76 -> m7_77  [key=0, style=solid];
m7_76 -> m7_84  [key=2, style=dotted];
m7_76 -> m7_78  [key=2, style=dotted];
m7_76 -> m7_12  [key=2, style=dotted];
m7_59 -> m7_60  [key=0, style=solid];
m7_59 -> m7_77  [key=0, style=solid];
m7_60 -> m7_61  [key=0, style=solid];
m7_60 -> m7_78  [key=2, style=dotted];
m7_60 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label=text];
m7_60 -> m7_67  [key=1, style=dashed, color=darkseagreen4, label=text];
m7_60 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=text];
m7_60 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label=text];
m7_60 -> m7_76  [key=1, style=dashed, color=darkseagreen4, label=text];
m7_64 -> m7_65  [key=0, style=solid];
m7_64 -> m7_67  [key=0, style=solid];
m7_72 -> m7_73  [key=0, style=solid];
m7_72 -> m7_75  [key=0, style=solid];
m7_72 -> m7_83  [key=2, style=dotted];
m7_72 -> m7_36  [key=2, style=dotted];
m7_58 -> m7_77  [key=0, style=solid];
m7_58 -> m7_9  [key=2, style=dotted];
m7_61 -> m7_62  [key=0, style=solid];
m7_61 -> m7_64  [key=0, style=solid];
m7_61 -> m7_79  [key=2, style=dotted];
m7_67 -> m7_68  [key=0, style=solid];
m7_67 -> m7_81  [key=2, style=dotted];
m7_67 -> m7_69  [key=1, style=dashed, color=darkseagreen4, label=first];
m7_70 -> m7_71  [key=0, style=solid];
m7_70 -> m7_75  [key=0, style=solid];
m7_70 -> m7_78  [key=2, style=dotted];
m7_70 -> m7_72  [key=1, style=dashed, color=darkseagreen4, label=c];
m7_70 -> m7_73  [key=1, style=dashed, color=darkseagreen4, label=c];
m7_75 -> m7_76  [key=0, style=solid];
m7_75 -> m7_77  [key=0, style=solid];
m7_75 -> m7_84  [key=2, style=dotted];
m7_69 -> m7_70  [key=0, style=solid];
m7_69 -> m7_10  [key=2, style=dotted];
m7_69 -> m7_72  [key=1, style=dashed, color=darkseagreen4, label=seen];
m7_69 -> m7_73  [key=1, style=dashed, color=darkseagreen4, label=seen];
m7_69 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label=seen];
m7_69 -> m7_76  [key=1, style=dashed, color=darkseagreen4, label=seen];
m7_73 -> m7_74  [key=0, style=solid];
m7_73 -> m7_24  [key=2, style=dotted];
m7_71 -> m7_72  [key=0, style=solid];
m7_71 -> m7_82  [key=2, style=dotted];
m7_71 -> m7_74  [key=1, style=dashed, color=darkseagreen4, label=n];
m7_77 -> m7_14  [key=0, style=bold, color=blue];
m7_104 -> m7_22  [key=1, style=dashed, color=darkseagreen4, label=errors];
m7_105 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label=values];
m8_13 -> m8_44  [key=0, style=solid];
m8_13 -> m8_47  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>"];
m8_44 -> m8_45  [key=0, style=solid];
m8_44 -> m8_18  [key=2, style=dotted];
m8_44 -> m8_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_44 -> m8_44  [key=1, style=dashed, color=darkseagreen4, label=tseq];
m8_45 -> m8_13  [key=0, style=bold, color=blue];
m8_11 -> m8_36  [key=0, style=solid];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_38  [key=2, style=dotted];
m8_36 -> m8_39  [key=2, style=dotted];
m8_36 -> m8_36  [key=1, style=dashed, color=darkseagreen4, label=t];
m8_36 -> m8_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_36 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label=t];
m8_37 -> m8_11  [key=0, style=bold, color=blue];
m8_29 -> m8_93  [key=0, style=solid];
m8_29 -> m8_9  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] values"];
m8_93 -> m8_94  [key=0, style=solid];
m8_93 -> m8_95  [key=2, style=dotted];
m8_94 -> m8_29  [key=0, style=bold, color=blue];
m8_90 -> m8_91  [key=0, style=solid];
m8_22 -> m8_23  [key=0, style=solid, color=green];
m8_26 -> m8_27  [key=0, style=solid];
m8_30 -> m8_31  [key=0, style=solid];
m8_33 -> m8_34  [key=0, style=solid];
m8_23 -> m8_24  [key=0, style=solid, color=green];
m8_23 -> m8_25  [key=2, style=dotted, color=green];
m8_24 -> m8_22  [key=0, style=bold, color=blue];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> m8_29  [key=2, style=dotted];
m8_28 -> m8_26  [key=0, style=bold, color=blue];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_29  [key=2, style=dotted];
m8_32 -> m8_30  [key=0, style=bold, color=blue];
m8_34 -> m8_35  [key=0, style=solid];
m8_35 -> m8_33  [key=0, style=bold, color=blue];
m8_40 -> m8_41  [key=0, style=solid];
m8_41 -> m8_42  [key=0, style=solid];
m8_41 -> m8_43  [key=2, style=dotted];
m8_42 -> m8_40  [key=0, style=bold, color=blue];
m8_47 -> m8_48  [key=0, style=solid];
m8_47 -> m8_43  [key=2, style=dotted];
m8_47 -> m8_25  [key=2, style=dotted];
m8_47 -> m8_38  [key=2, style=dotted];
m8_47 -> m8_39  [key=2, style=dotted];
m8_47 -> m8_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_46 -> m8_47  [key=0, style=solid];
m8_46 -> m8_50  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_50 -> m8_51  [key=0, style=solid];
m8_48 -> m8_46  [key=0, style=bold, color=blue];
m8_49 -> m8_50  [key=0, style=solid];
m8_51 -> m8_49  [key=0, style=bold, color=blue];
m8_55 -> m8_56  [key=0, style=solid];
m8_55 -> m8_43  [key=2, style=dotted];
m8_55 -> m8_25  [key=2, style=dotted];
m8_55 -> m8_38  [key=2, style=dotted];
m8_55 -> m8_39  [key=2, style=dotted];
m8_55 -> m8_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_58 -> m8_59  [key=0, style=solid];
m8_58 -> m8_60  [key=2, style=dotted];
m8_58 -> m8_61  [key=2, style=dotted];
m8_58 -> m8_62  [key=2, style=dotted];
m8_58 -> m8_63  [key=2, style=dotted];
m8_58 -> m8_64  [key=2, style=dotted];
m8_58 -> m8_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_58 -> m8_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_58 -> m8_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_54 -> m8_55  [key=0, style=solid];
m8_54 -> m8_58  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_54 -> m8_66  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_66 -> m8_67  [key=0, style=solid];
m8_66 -> m8_68  [key=2, style=dotted];
m8_56 -> m8_54  [key=0, style=bold, color=blue];
m8_57 -> m8_58  [key=0, style=solid];
m8_59 -> m8_57  [key=0, style=bold, color=blue];
m8_65 -> m8_66  [key=0, style=solid];
m8_69 -> m8_70  [key=0, style=solid];
m8_72 -> m8_73  [key=0, style=solid];
m8_67 -> m8_65  [key=0, style=bold, color=blue];
m8_70 -> m8_71  [key=0, style=solid];
m8_70 -> m8_25  [key=2, style=dotted];
m8_71 -> m8_69  [key=0, style=bold, color=blue];
m8_73 -> m8_74  [key=0, style=solid];
m8_74 -> m8_72  [key=0, style=bold, color=blue];
m8_80 -> m8_81  [key=0, style=solid];
m8_80 -> m8_43  [key=2, style=dotted];
m8_80 -> m8_60  [key=2, style=dotted];
m8_80 -> m8_61  [key=2, style=dotted];
m8_80 -> m8_17  [key=2, style=dotted];
m8_80 -> m8_82  [key=2, style=dotted];
m8_80 -> m8_83  [key=2, style=dotted];
m8_80 -> m8_29  [key=2, style=dotted];
m8_80 -> m8_84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_80 -> m8_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_80 -> m8_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_79 -> m8_80  [key=0, style=solid];
m8_79 -> m8_85  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_85 -> m8_86  [key=0, style=solid];
m8_85 -> m8_68  [key=2, style=dotted];
m8_81 -> m8_79  [key=0, style=bold, color=blue];
m8_84 -> m8_85  [key=0, style=solid];
m8_87 -> m8_88  [key=0, style=solid];
m8_86 -> m8_84  [key=0, style=bold, color=blue];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_25  [key=2, style=dotted];
m8_89 -> m8_87  [key=0, style=bold, color=blue];
m8_91 -> m8_92  [key=0, style=solid];
m8_92 -> m8_90  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid, color=green];
m8_0 -> m8_2  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m8_0 -> m8_3  [key=1, style=dashed, color=green, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>"];
m8_0 -> m8_5  [key=1, style=dashed, color=green, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>"];
m8_1 -> m8_2  [key=0, style=solid, color=green];
m8_1 -> m8_11  [key=2, style=dotted, color=green];
m8_1 -> m8_9  [key=1, style=dashed, color=green, label=switches];
m8_2 -> m8_3  [key=0, style=solid, color=green];
m8_2 -> m8_12  [key=2, style=dotted, color=green];
m8_2 -> m8_4  [key=1, style=dashed, color=green, label=tokensExceptSwitches];
m8_3 -> m8_4  [key=0, style=solid, color=green];
m8_3 -> m8_13  [key=2, style=dotted, color=green];
m8_3 -> m8_9  [key=1, style=dashed, color=green, label=scalars];
m8_5 -> m8_6  [key=0, style=solid, color=green];
m8_5 -> m8_14  [key=2, style=dotted, color=green];
m8_5 -> m8_9  [key=1, style=dashed, color=green, label=sequences];
m8_9 -> m8_10  [key=0, style=solid];
m8_9 -> m8_17  [key=2, style=dotted];
m8_9 -> m8_18  [key=2, style=dotted];
m8_9 -> m8_19  [key=2, style=dotted];
m8_9 -> m8_20  [key=2, style=dotted];
m8_9 -> m8_21  [key=2, style=dotted];
m8_9 -> m8_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_9 -> m8_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_9 -> m8_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_4 -> m8_5  [key=0, style=solid, color=green];
m8_4 -> m8_12  [key=2, style=dotted, color=green];
m8_4 -> m8_6  [key=1, style=dashed, color=green, label=tokensExceptSwitchesAndScalars];
m8_6 -> m8_7  [key=0, style=solid, color=green];
m8_6 -> m8_12  [key=2, style=dotted, color=green];
m8_6 -> m8_8  [key=1, style=dashed, color=green, label=tokensExceptSwitchesAndScalarsAndSeq];
m8_7 -> m8_8  [key=0, style=solid, color=green];
m8_7 -> m8_15  [key=2, style=dotted, color=green];
m8_7 -> m8_22  [key=1, style=dashed, color=green, label="lambda expression"];
m8_7 -> m8_9  [key=1, style=dashed, color=green, label=values];
m8_8 -> m8_9  [key=0, style=solid, color=green];
m8_8 -> m8_16  [key=2, style=dotted, color=green];
m8_10 -> m8_0  [key=0, style=bold, color=blue];
m8_14 -> m8_52  [key=0, style=solid];
m8_14 -> m8_55  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m8_14 -> m8_58  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m8_52 -> m8_53  [key=0, style=solid];
m8_52 -> m8_18  [key=2, style=dotted];
m8_52 -> m8_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_52 -> m8_52  [key=1, style=dashed, color=darkseagreen4, label=tseq];
m8_53 -> m8_14  [key=0, style=bold, color=blue];
m8_20 -> m8_75  [key=0, style=solid];
m8_20 -> m8_80  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_77  [key=2, style=dotted];
m8_75 -> m8_78  [key=2, style=dotted];
m8_75 -> m8_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_75 -> m8_75  [key=1, style=dashed, color=darkseagreen4, label=t];
m8_76 -> m8_20  [key=0, style=bold, color=blue];
m8_25 -> m8_5  [key=3, color=green, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<CommandLine.Core.Token> tokens"];
m8_96 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label=t];
m8_97 -> m8_47  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>"];
m8_98 -> m8_50  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_99 -> m8_50  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_100 -> m8_55  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m8_100 -> m8_58  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m8_101 -> m8_55  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>"];
m8_102 -> m8_58  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_102 -> m8_66  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_103 -> m8_80  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m8_104 -> m8_85  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid, color=green];
m9_1 -> m9_6  [key=2, style=dotted];
m9_1 -> m9_4  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
m9_2 -> m9_3  [key=0, style=solid, color=green];
m9_2 -> m9_7  [key=2, style=dotted, color=green];
m9_2 -> m9_14  [key=1, style=dashed, color=green, label=specs];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_11  [key=2, style=dotted];
m9_4 -> m9_12  [key=2, style=dotted];
m9_4 -> m9_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_8  [key=2, style=dotted];
m9_3 -> m9_9  [key=2, style=dotted];
m9_3 -> m9_10  [key=2, style=dotted];
m9_3 -> m9_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_3 -> m9_18  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_5 -> m9_0  [key=0, style=bold, color=blue];
m9_21 -> m9_22  [key=0, style=solid];
m9_14 -> m9_15  [key=0, style=solid];
m9_14 -> m9_16  [key=2, style=dotted];
m9_13 -> m9_14  [key=0, style=solid];
m9_18 -> m9_19  [key=0, style=solid];
m9_18 -> m9_20  [key=2, style=dotted];
m9_18 -> m9_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_18 -> m9_22  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m9_17 -> m9_18  [key=0, style=solid];
m9_15 -> m9_13  [key=0, style=bold, color=blue];
m9_19 -> m9_17  [key=0, style=bold, color=blue];
m9_22 -> m9_23  [key=0, style=solid];
m9_22 -> m9_24  [key=2, style=dotted];
m9_22 -> m9_25  [key=2, style=dotted];
m9_22 -> m9_22  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m9_23 -> m9_21  [key=0, style=bold, color=blue];
m9_26 -> m9_14  [key=1, style=dashed, color=darkseagreen4, label=specs];
m9_27 -> m9_18  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_28 -> m9_22  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
}
