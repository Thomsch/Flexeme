digraph  {
n43 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n44 [label="CommandLine.Core.Token", span=""];
n0 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
n1 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="return tokens.Select(t => t.Text.ToKeyValuePair(''true''));", span="13-13"];
n2 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
n3 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n4 [cluster="lambda expression", label="Entry lambda expression", span="13-13"];
n5 [cluster="lambda expression", label="t.Text.ToKeyValuePair(''true'')", span="13-13"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="13-13"];
n7 [cluster="string.ToKeyValuePair(params string[])", label="Entry string.ToKeyValuePair(params string[])", span="34-34"];
n8 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
n9 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="return tokens.Pairwise((f, s) => f.Text.ToKeyValuePair(s.Text));", span="19-19"];
n10 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
n11 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="272-272"];
n12 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
n13 [cluster="lambda expression", label="f.Text.ToKeyValuePair(s.Text)", span="19-19"];
n14 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
n15 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
n17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
n18 [cluster="Unk.Pairwise", label="Entry Unk.Pairwise", span=""];
n19 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n20 [cluster="lambda expression", label="Entry lambda expression", span="26-29"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="26-29"];
n23 [cluster="CommandLine.Core.Token.IsName()", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
n24 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
n25 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
n26 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n27 [cluster="Unk.ToKeyValuePair", label="Entry Unk.ToKeyValuePair", span=""];
n28 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n32 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n36 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n30 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n31 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55"];
n34 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n35 [cluster="CommandLine.Core.Token.IsValue()", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
n38 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n39 [cluster="CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", label="Entry CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", span="34-34"];
n40 [cluster="CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="36-36"];
n41 [cluster="CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", label="Exit CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", span="34-34"];
n42 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
d16 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=green, community=0, label="return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? f.Text.ToKeyValuePair(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : string.Empty.ToKeyValuePair())\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", prediction=0, span="25-31"];
d21 [cluster="lambda expression", color=green, community=0, label="f.IsName()\r\n                            ? f.Text.ToKeyValuePair(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : string.Empty.ToKeyValuePair()", prediction=1, span="27-29"];
d29 [cluster="lambda expression", color=green, community=0, label="t.Equals(f)", prediction=2, span="28-28"];
d33 [cluster="lambda expression", color=green, community=0, label="v.IsValue()", prediction=3, span="28-28"];
d37 [cluster="lambda expression", color=green, community=0, label="x.Text", prediction=4, span="28-28"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", span="12-12"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="var expected = new KeyValuePair<string, IEnumerable<string>>[] { }", span="14-14"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="var result = KeyValuePairHelper.ForSequence(new Token[] { })", span="16-16"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="Exit CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", span="12-12"];
m0_13 [cluster="CommandLine.Core.Token.Name(string)", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m0_6 [cluster="Unk.SequenceEqual", file="KeyValuePairHelperTests.cs", label="Entry Unk.SequenceEqual", span=""];
m0_7 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", span="22-22"];
m0_8 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="var expected = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''seq'', new[] {''seq0'', ''seq1'', ''seq2''})\r\n                }", span="24-27"];
m0_9 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="var result = KeyValuePairHelper.ForSequence(new []\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seq0''), Token.Value(''seq1''), Token.Value(''seq2'') \r\n                })", span="29-32"];
m0_11 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="Exit CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", span="22-22"];
m0_14 [cluster="CommandLine.Core.Token.Value(string)", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m0_5 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m2_6 [cluster="CommandLine.Text.Example<T>.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="Entry CommandLine.Text.Example<T>.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="22-22"];
m2_7 [cluster="CommandLine.Text.Example<T>.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="Exit CommandLine.Text.Example<T>.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="22-22"];
m2_8 [cluster="CommandLine.Text.Example<T>.Example(string, CommandLine.UnParserSettings, T)", file="UnParserExtensions.cs", label="Entry CommandLine.Text.Example<T>.Example(string, CommandLine.UnParserSettings, T)", span="27-27"];
m2_9 [cluster="CommandLine.Text.Example<T>.Example(string, CommandLine.UnParserSettings, T)", file="UnParserExtensions.cs", label="Exit CommandLine.Text.Example<T>.Example(string, CommandLine.UnParserSettings, T)", span="27-27"];
m2_10 [cluster="CommandLine.Text.Example<T>.Example(string, T)", file="UnParserExtensions.cs", label="Entry CommandLine.Text.Example<T>.Example(string, T)", span="32-32"];
m2_11 [cluster="CommandLine.Text.Example<T>.Example(string, T)", file="UnParserExtensions.cs", label="Exit CommandLine.Text.Example<T>.Example(string, T)", span="32-32"];
m2_0 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="Entry CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="14-14"];
m2_1 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="this.group = group", span="16-16"];
m2_2 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="this.helpText = helpText", span="17-17"];
m2_3 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="this.formatStyles = formatStyles", span="18-18"];
m2_4 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="this.sample = sample", span="19-19"];
m2_5 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="Exit CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="14-14"];
m2_12 [file="UnParserExtensions.cs", label="CommandLine.Text.Example<T>", span=""];
m3_4 [cluster="CommandLine.Parser.FormatCommandLine<T>(T)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Parser.FormatCommandLine<T>(T)", span="24-24"];
m3_3 [cluster="CommandLine.Parser.Parser()", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m3_6 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="30-30"];
m3_7 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs", label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="32-34"];
m3_8 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="30-30"];
m3_0 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m3_1 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", span="23-25"];
m3_2 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m3_5 [cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensionsTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
n43 -> d21  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n44 -> d29  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n9 -> n12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n15 -> d21  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n20 -> d29  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
d16 -> d16  [color=green, key=1, label=t, style=dashed];
d16 -> n20  [color=green, key=1, label="lambda expression", style=dashed];
d21 -> n28  [color=green, key=1, label="lambda expression", style=dashed];
d21 -> n32  [color=green, key=1, label="lambda expression", style=dashed];
d21 -> n36  [color=green, key=1, label="lambda expression", style=dashed];
}
