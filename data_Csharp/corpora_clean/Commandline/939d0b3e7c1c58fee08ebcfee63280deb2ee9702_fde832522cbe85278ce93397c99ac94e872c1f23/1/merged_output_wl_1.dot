digraph  {
n43 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n44 [label="CommandLine.Core.Token", span=""];
n0 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
n1 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="return tokens.Select(t => t.Text.ToKeyValuePair(''true''));", span="13-13"];
n2 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
n3 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n4 [cluster="lambda expression", label="Entry lambda expression", span="13-13"];
n5 [cluster="lambda expression", label="t.Text.ToKeyValuePair(''true'')", span="13-13"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="13-13"];
n7 [cluster="string.ToKeyValuePair(params string[])", label="Entry string.ToKeyValuePair(params string[])", span="34-34"];
n8 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
n9 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="return tokens.Pairwise((f, s) => f.Text.ToKeyValuePair(s.Text));", span="19-19"];
n10 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
n11 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="272-272"];
n12 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
n13 [cluster="lambda expression", label="f.Text.ToKeyValuePair(s.Text)", span="19-19"];
n14 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
n15 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
n16 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=red, community=0, label="0: return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? f.Text.ToKeyValuePair(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : string.Empty.ToKeyValuePair())\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", span="25-31"];
n21 [cluster="lambda expression", color=red, community=0, label="0: f.IsName()\r\n                            ? f.Text.ToKeyValuePair(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : string.Empty.ToKeyValuePair()", span="27-29"];
n17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Exit CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
n18 [cluster="Unk.Pairwise", label="Entry Unk.Pairwise", span=""];
n19 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n20 [cluster="lambda expression", label="Entry lambda expression", span="26-29"];
n29 [cluster="lambda expression", color=red, community=0, label="0: t.Equals(f)", span="28-28"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="26-29"];
n23 [cluster="CommandLine.Core.Token.IsName()", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
n24 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
n25 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
n26 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n27 [cluster="Unk.ToKeyValuePair", label="Entry Unk.ToKeyValuePair", span=""];
n28 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n32 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n36 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n30 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n31 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55"];
n33 [cluster="lambda expression", color=red, community=0, label="0: v.IsValue()", span="28-28"];
n34 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n35 [cluster="CommandLine.Core.Token.IsValue()", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
n37 [cluster="lambda expression", color=red, community=0, label="0: x.Text", span="28-28"];
n38 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n39 [cluster="CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", label="Entry CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", span="34-34"];
n40 [cluster="CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="36-36"];
n41 [cluster="CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", label="Exit CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", span="34-34"];
n42 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
d16 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", color=green, community=0, label="0: return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? f.Text.ToKeyValuePair(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : string.Empty.ToKeyValuePair())\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", span="25-31"];
d21 [cluster="lambda expression", color=green, community=0, label="0: f.IsName()\r\n                            ? f.Text.ToKeyValuePair(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : string.Empty.ToKeyValuePair()", span="27-29"];
d29 [cluster="lambda expression", color=green, community=0, label="0: t.Equals(f)", span="28-28"];
d33 [cluster="lambda expression", color=green, community=0, label="0: v.IsValue()", span="28-28"];
d37 [cluster="lambda expression", color=green, community=0, label="0: x.Text", span="28-28"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", span="12-12"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="var expected = new KeyValuePair<string, IEnumerable<string>>[] { }", span="14-14"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="var result = KeyValuePairHelper.ForSequence(new Token[] { })", span="16-16"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", color=red, community=0, file="KeyValuePairHelperTests.cs", label="0: result.SequenceEqual(expected)", span="18-18"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="Exit CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Empty_token_sequence_creates_an_empty_KeyValuePair_sequence()", span="12-12"];
m0_13 [cluster="CommandLine.Core.Token.Name(string)", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m0_6 [cluster="Unk.SequenceEqual", file="KeyValuePairHelperTests.cs", label="Entry Unk.SequenceEqual", span=""];
m0_7 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", span="22-22"];
m0_8 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="var expected = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''seq'', new[] {''seq0'', ''seq1'', ''seq2''})\r\n                }", span="24-27"];
m0_9 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="var result = KeyValuePairHelper.ForSequence(new []\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seq0''), Token.Value(''seq1''), Token.Value(''seq2'') \r\n                })", span="29-32"];
m0_10 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", color=red, community=0, file="KeyValuePairHelperTests.cs", label="0: result.SequenceEqual(expected)", span="34-34"];
m0_11 [cluster="CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", file="KeyValuePairHelperTests.cs", label="Exit CommandLine.Tests.Unit.Core.KeyValuePairHelperTests.Token_sequence_creates_a_KeyValuePair_sequence()", span="22-22"];
m0_14 [cluster="CommandLine.Core.Token.Value(string)", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m0_5 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelperTests.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m2_6 [cluster="CommandLine.Text.Example<T>.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="Entry CommandLine.Text.Example<T>.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="22-22"];
m2_7 [cluster="CommandLine.Text.Example<T>.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="Exit CommandLine.Text.Example<T>.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="22-22"];
m2_8 [cluster="CommandLine.Text.Example<T>.Example(string, CommandLine.UnParserSettings, T)", file="UnParserExtensions.cs", label="Entry CommandLine.Text.Example<T>.Example(string, CommandLine.UnParserSettings, T)", span="27-27"];
m2_9 [cluster="CommandLine.Text.Example<T>.Example(string, CommandLine.UnParserSettings, T)", file="UnParserExtensions.cs", label="Exit CommandLine.Text.Example<T>.Example(string, CommandLine.UnParserSettings, T)", span="27-27"];
m2_10 [cluster="CommandLine.Text.Example<T>.Example(string, T)", file="UnParserExtensions.cs", label="Entry CommandLine.Text.Example<T>.Example(string, T)", span="32-32"];
m2_11 [cluster="CommandLine.Text.Example<T>.Example(string, T)", file="UnParserExtensions.cs", label="Exit CommandLine.Text.Example<T>.Example(string, T)", span="32-32"];
m2_0 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="Entry CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="14-14"];
m2_1 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="this.group = group", span="16-16"];
m2_2 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="this.helpText = helpText", span="17-17"];
m2_3 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="this.formatStyles = formatStyles", span="18-18"];
m2_4 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="this.sample = sample", span="19-19"];
m2_5 [cluster="CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", file="UnParserExtensions.cs", label="Exit CommandLine.Text.Example<T>.Example(string, string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, T)", span="14-14"];
m2_12 [file="UnParserExtensions.cs", label="CommandLine.Text.Example<T>", span=""];
m3_4 [cluster="CommandLine.Parser.FormatCommandLine<T>(T)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Parser.FormatCommandLine<T>(T)", span="24-24"];
m3_3 [cluster="CommandLine.Parser.Parser()", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m3_6 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="30-30"];
m3_7 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs", label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="32-34"];
m3_8 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="30-30"];
m3_0 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m3_1 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", span="23-25"];
m3_2 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21"];
m3_5 [cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensionsTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
n43 -> n21  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n43 -> d21  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n44 -> n29  [color=red, key=1, label="CommandLine.Core.Token", style=dashed];
n44 -> d29  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n6 -> n4  [color=blue, key=0, style=bold];
n7 -> n1  [color=darkorchid, key=3, label="Parameter variable string[] values", style=bold];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=2, style=dotted];
n9 -> n12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n10 -> n8  [color=blue, key=0, style=bold];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n7  [key=2, style=dotted];
n14 -> n12  [color=blue, key=0, style=bold];
n15 -> n16  [color=red, key=0, style=solid];
n15 -> n21  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n15 -> d16  [color=green, key=0, style=solid];
n15 -> d21  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n16 -> n17  [color=red, key=0, style=solid];
n16 -> n18  [color=red, key=2, style=dotted];
n16 -> n19  [color=red, key=2, style=dotted];
n16 -> n20  [color=red, key=1, label="lambda expression", style=dashed];
n16 -> n16  [color=red, key=1, label=t, style=dashed];
n21 -> n22  [color=red, key=0, style=solid];
n21 -> n23  [color=red, key=2, style=dotted];
n21 -> n24  [color=red, key=2, style=dotted];
n21 -> n25  [color=red, key=2, style=dotted];
n21 -> n3  [color=red, key=2, style=dotted];
n21 -> n26  [color=red, key=2, style=dotted];
n21 -> n27  [color=red, key=2, style=dotted];
n21 -> n7  [color=red, key=2, style=dotted];
n21 -> n28  [color=red, key=1, label="lambda expression", style=dashed];
n21 -> n32  [color=red, key=1, label="lambda expression", style=dashed];
n21 -> n36  [color=red, key=1, label="lambda expression", style=dashed];
n17 -> n15  [color=blue, key=0, style=bold];
n20 -> n21  [color=red, key=0, style=solid];
n20 -> n29  [color=red, key=1, label="CommandLine.Core.Token", style=dashed];
n20 -> d21  [color=green, key=0, style=solid];
n20 -> d29  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
n29 -> n30  [color=red, key=0, style=solid];
n29 -> n31  [color=red, key=2, style=dotted];
n22 -> n20  [color=blue, key=0, style=bold];
n28 -> n29  [color=red, key=0, style=solid];
n28 -> d29  [color=green, key=0, style=solid];
n32 -> n33  [color=red, key=0, style=solid];
n32 -> d33  [color=green, key=0, style=solid];
n36 -> n37  [color=red, key=0, style=solid];
n36 -> d37  [color=green, key=0, style=solid];
n30 -> n28  [color=blue, key=0, style=bold];
n33 -> n34  [color=red, key=0, style=solid];
n33 -> n35  [color=red, key=2, style=dotted];
n34 -> n32  [color=blue, key=0, style=bold];
n37 -> n38  [color=red, key=0, style=solid];
n38 -> n36  [color=blue, key=0, style=bold];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [key=2, style=dotted];
n41 -> n39  [color=blue, key=0, style=bold];
d16 -> d16  [color=green, key=1, label=t, style=dashed];
d16 -> n17  [color=green, key=0, style=solid];
d16 -> n18  [color=green, key=2, style=dotted];
d16 -> n19  [color=green, key=2, style=dotted];
d16 -> n20  [color=green, key=1, label="lambda expression", style=dashed];
d21 -> n22  [color=green, key=0, style=solid];
d21 -> n23  [color=green, key=2, style=dotted];
d21 -> n24  [color=green, key=2, style=dotted];
d21 -> n25  [color=green, key=2, style=dotted];
d21 -> n3  [color=green, key=2, style=dotted];
d21 -> n26  [color=green, key=2, style=dotted];
d21 -> n27  [color=green, key=2, style=dotted];
d21 -> n7  [color=green, key=2, style=dotted];
d21 -> n28  [color=green, key=1, label="lambda expression", style=dashed];
d21 -> n32  [color=green, key=1, label="lambda expression", style=dashed];
d21 -> n36  [color=green, key=1, label="lambda expression", style=dashed];
d29 -> n30  [color=green, key=0, style=solid];
d29 -> n31  [color=green, key=2, style=dotted];
d33 -> n34  [color=green, key=0, style=solid];
d33 -> n35  [color=green, key=2, style=dotted];
d37 -> n38  [color=green, key=0, style=solid];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [color=red, key=1, label=expected, style=dashed];
m0_2 -> m0_3  [color=red, key=0, style=solid];
m0_2 -> m0_5  [key=2, style=dotted];
m0_3 -> m0_4  [color=red, key=0, style=solid];
m0_3 -> m0_6  [color=red, key=2, style=dotted];
m0_4 -> m0_0  [color=blue, key=0, style=bold];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> n42  [key=2, style=dotted];
m0_8 -> m0_10  [color=red, key=1, label=expected, style=dashed];
m0_9 -> m0_10  [color=red, key=0, style=solid];
m0_9 -> m0_13  [key=2, style=dotted];
m0_9 -> m0_14  [key=2, style=dotted];
m0_9 -> m0_5  [key=2, style=dotted];
m0_10 -> m0_11  [color=red, key=0, style=solid];
m0_10 -> m0_6  [color=red, key=2, style=dotted];
m0_11 -> m0_7  [color=blue, key=0, style=bold];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_6  [color=blue, key=0, style=bold];
m2_8 -> m2_9  [key=0, style=solid];
m2_9 -> m2_8  [color=blue, key=0, style=bold];
m2_10 -> m2_11  [key=0, style=solid];
m2_11 -> m2_10  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>", style=dashed];
m2_0 -> m2_4  [color=darkseagreen4, key=1, label=T, style=dashed];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_0  [color=blue, key=0, style=bold];
m2_12 -> m2_1  [color=darkseagreen4, key=1, label="CommandLine.Text.Example<T>", style=dashed];
m2_12 -> m2_2  [color=darkseagreen4, key=1, label="CommandLine.Text.Example<T>", style=dashed];
m2_12 -> m2_3  [color=darkseagreen4, key=1, label="CommandLine.Text.Example<T>", style=dashed];
m2_12 -> m2_4  [color=darkseagreen4, key=1, label="CommandLine.Text.Example<T>", style=dashed];
m3_6 -> m3_7  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_3  [key=2, style=dotted];
m3_7 -> m3_4  [key=2, style=dotted];
m3_7 -> m3_5  [key=2, style=dotted];
m3_8 -> m3_6  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=2, style=dotted];
m3_1 -> m3_5  [key=2, style=dotted];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
}
