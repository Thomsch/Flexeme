digraph  {
n298 [label=fakeOptions, span=""];
n299 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
n1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var fakeOptions = new FakeOptions()", span="20-20"];
n2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
n6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
n3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
n13 [cluster="lambda expression", label=fakeOptions, span="27-27"];
n7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
n8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
n4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Assert.True(expectedResult.Equals(result))", span="33-33"];
n9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n12 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
n5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
n10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
n11 [cluster="Unk.True", label="Entry Unk.True", span=""];
n14 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
n15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
n16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
n17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Assert.Equal(expected, result.Value.LongValue)", span="54-54"];
n20 [cluster="lambda expression", label="Entry lambda expression", span="48-48"];
n18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
n19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n21 [cluster="lambda expression", label="new FakeOptions()", span="48-48"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="48-48"];
n23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
n27 [cluster="lambda expression", label="Entry lambda expression", span="71-71"];
n26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
n29 [cluster="lambda expression", label="Exit lambda expression", span="71-71"];
n30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
n31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
n36 [cluster="lambda expression", label="Entry lambda expression", span="95-95"];
n34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
n35 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
n38 [cluster="lambda expression", label="Exit lambda expression", span="95-95"];
n39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
n40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
n44 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
n43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
n46 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
n47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
n49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
n51 [cluster="lambda expression", label="Entry lambda expression", span="140-140"];
n50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
n52 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
n53 [cluster="lambda expression", label="Exit lambda expression", span="140-140"];
n54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
n55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
n56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
n57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
n59 [cluster="lambda expression", label="Entry lambda expression", span="162-162"];
n58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
n60 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
n61 [cluster="lambda expression", label="Exit lambda expression", span="162-162"];
n62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
n63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
n64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
n65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
n68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
n69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
n66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187"];
n70 [cluster="lambda expression", label="Entry lambda expression", span="181-181"];
n67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
n71 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
n72 [cluster="lambda expression", label="Exit lambda expression", span="181-181"];
n73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
n75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
n78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
n76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206"];
n79 [cluster="lambda expression", label="Entry lambda expression", span="200-200"];
n77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n80 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
n81 [cluster="lambda expression", label="Exit lambda expression", span="200-200"];
n82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
n83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
n84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
n85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
n86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
n88 [cluster="lambda expression", label="Entry lambda expression", span="220-220"];
n87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
n89 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
n90 [cluster="lambda expression", label="Exit lambda expression", span="220-220"];
n91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
n92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
n93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
n94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
n96 [cluster="lambda expression", label="Entry lambda expression", span="239-239"];
n95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
n97 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
n98 [cluster="lambda expression", label="Exit lambda expression", span="239-239"];
n99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
n100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
n101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
n102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
n105 [cluster="lambda expression", label="Entry lambda expression", span="263-263"];
n103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
n104 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
n106 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="263-263"];
n107 [cluster="lambda expression", label="Exit lambda expression", span="263-263"];
n108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
n109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
n110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
n111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
n114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
n112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="282-282"];
n113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
n116 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="282-282"];
n117 [cluster="lambda expression", label="Exit lambda expression", span="282-282"];
n118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
n119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
n120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
n121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
n123 [cluster="lambda expression", label="Entry lambda expression", span="301-301"];
n122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
n124 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="301-301"];
n125 [cluster="lambda expression", label="Exit lambda expression", span="301-301"];
n126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
n127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
n128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
n129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
n131 [cluster="lambda expression", label="Entry lambda expression", span="320-320"];
n130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
n132 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="320-320"];
n133 [cluster="lambda expression", label="Exit lambda expression", span="320-320"];
n134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
n135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
n136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
n139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
n137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
n140 [cluster="lambda expression", label="Entry lambda expression", span="345-345"];
n138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
n141 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="345-345"];
n142 [cluster="lambda expression", label="Exit lambda expression", span="345-345"];
n143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
n144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
n145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
n147 [cluster="lambda expression", label="Entry lambda expression", span="368-368"];
n146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
n148 [cluster="lambda expression", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
n149 [cluster="lambda expression", label="Exit lambda expression", span="368-368"];
n150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
n151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
n152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
n153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
n155 [cluster="lambda expression", label="Entry lambda expression", span="390-390"];
n154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
n156 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
n157 [cluster="lambda expression", label="Exit lambda expression", span="390-390"];
n158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
n159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
n160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
n161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
n163 [cluster="lambda expression", label="Entry lambda expression", span="412-412"];
n162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
n164 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
n165 [cluster="lambda expression", label="Exit lambda expression", span="412-412"];
n166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
n167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
n168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
n170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
n169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
n172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
n173 [cluster="lambda expression", label="Entry lambda expression", span="441-441"];
n176 [cluster="lambda expression", label="Entry lambda expression", span="442-444"];
n171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
n174 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="441-441"];
n175 [cluster="lambda expression", label="Exit lambda expression", span="441-441"];
n177 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
n181 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
n185 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
n178 [cluster="lambda expression", label="Exit lambda expression", span="442-444"];
n179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
n180 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
n182 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
n183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
n184 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
n186 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
n187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
n188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
n189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
n190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
n193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
n191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
n194 [cluster="lambda expression", label="Entry lambda expression", span="467-467"];
n192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
n195 [cluster="lambda expression", label="new FakeOptionsWithSets()", span="467-467"];
n196 [cluster="lambda expression", label="Exit lambda expression", span="467-467"];
n197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
n198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
n199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
n200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
n203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
n201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
n204 [cluster="lambda expression", label="Entry lambda expression", span="487-487"];
n202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
n205 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
n206 [cluster="lambda expression", label="Exit lambda expression", span="487-487"];
n207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
n208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
n209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
n210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
n212 [cluster="lambda expression", label="Entry lambda expression", span="507-507"];
n211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
n213 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
n214 [cluster="lambda expression", label="Exit lambda expression", span="507-507"];
n215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
n216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
n217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
n220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
n218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
n221 [cluster="lambda expression", label="Entry lambda expression", span="527-527"];
n219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
n222 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
n223 [cluster="lambda expression", label="Exit lambda expression", span="527-527"];
n224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
n225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
n226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
n227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
n229 [cluster="lambda expression", label="Entry lambda expression", span="545-545"];
n228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
n230 [cluster="lambda expression", label="new FakeOptionWithRequired()", span="545-545"];
n231 [cluster="lambda expression", label="Exit lambda expression", span="545-545"];
n232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
n233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
n234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
n235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
n236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
n238 [cluster="lambda expression", label="Entry lambda expression", span="564-564"];
n237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
n239 [cluster="lambda expression", label="new FakeOptions()", span="564-564"];
n240 [cluster="lambda expression", label="Exit lambda expression", span="564-564"];
n241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
n242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
n243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
n246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
n244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
n247 [cluster="lambda expression", label="Entry lambda expression", span="583-583"];
n245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
n248 [cluster="lambda expression", label="new FakeOptions()", span="583-583"];
n249 [cluster="lambda expression", label="Exit lambda expression", span="583-583"];
n250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
n251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
n252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
n253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
n255 [cluster="lambda expression", label="Entry lambda expression", span="602-602"];
n254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
n256 [cluster="lambda expression", label="new FakeOptions()", span="602-602"];
n257 [cluster="lambda expression", label="Exit lambda expression", span="602-602"];
n258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
n259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
n260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
n261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
n263 [cluster="lambda expression", label="Entry lambda expression", span="621-621"];
n262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
n264 [cluster="lambda expression", label="new FakeOptions()", span="621-621"];
n265 [cluster="lambda expression", label="Exit lambda expression", span="621-621"];
n266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
n267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
n268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
n271 [cluster="lambda expression", label="Entry lambda expression", span="641-641"];
n269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
n270 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
n272 [cluster="lambda expression", label="new FakeOptions()", span="641-641"];
n273 [cluster="lambda expression", label="Exit lambda expression", span="641-641"];
n274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
n275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
n276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
n277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
n279 [cluster="lambda expression", label="Entry lambda expression", span="660-660"];
n278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
n280 [cluster="lambda expression", label="new FakeOptionWithRequiredValue()", span="660-660"];
n281 [cluster="lambda expression", label="Exit lambda expression", span="660-660"];
n282 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", span="4-4"];
n283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
n284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="678-682"];
n285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="expected.ShouldBeEquivalentTo(result.Value)", span="685-685"];
n287 [cluster="lambda expression", label="Entry lambda expression", span="679-679"];
n286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
n288 [cluster="lambda expression", label="new FakeOptionWithRequiredValue()", span="679-679"];
n289 [cluster="lambda expression", label="Exit lambda expression", span="679-679"];
n290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
n291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="697-701"];
n292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="expected.ShouldBeEquivalentTo(result.Value)", span="704-704"];
n294 [cluster="lambda expression", label="Entry lambda expression", span="698-698"];
n293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
n295 [cluster="lambda expression", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="698-698"];
n296 [cluster="lambda expression", label="Exit lambda expression", span="698-698"];
n297 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m0_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120"];
m0_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceChooser.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123"];
m0_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
m0_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m0_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
m0_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="697-701"];
m0_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="704-704"];
m0_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
m0_11 [cluster="Unk.True", file="InstanceChooser.cs", label="Entry Unk.True", span=""];
m0_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m0_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m0_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m0_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m0_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m0_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m0_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m0_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m0_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m0_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m0_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m0_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m0_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m0_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m0_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceChooser.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m0_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
m0_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m0_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m0_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m0_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m0_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
m0_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m0_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m0_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m0_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m0_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m0_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m0_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m0_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m0_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m0_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m0_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
m0_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceChooser.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
m0_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m0_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
m0_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m0_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m0_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceChooser.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m0_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m0_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m0_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m0_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m0_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m0_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m0_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m0_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m0_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98"];
m0_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceChooser.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101"];
m0_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="var fakeOptions = new FakeOptions()", span="20-20"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="Assert.True(expectedResult.Equals(result))", span="33-33"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m0_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m0_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m0_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m0_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m0_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m0_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceChooser.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
m0_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceChooser.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m0_184 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="444-444"];
m0_20 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="48-48"];
m0_21 [cluster="lambda expression", color=green, community=0, file="InstanceChooser.cs", label="new FakeOptions()", prediction=0, span="48-48"];
m0_22 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="48-48"];
m0_45 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="117-117"];
m0_239 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="564-564"];
m0_248 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="583-583"];
m0_256 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="602-602"];
m0_264 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="621-621"];
m0_272 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="641-641"];
m0_12 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="27-27"];
m0_27 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="71-71"];
m0_36 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="95-95"];
m0_44 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="117-117"];
m0_51 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="140-140"];
m0_59 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="162-162"];
m0_70 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="181-181"];
m0_79 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="200-200"];
m0_88 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="220-220"];
m0_96 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="239-239"];
m0_105 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="263-263"];
m0_115 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="282-282"];
m0_123 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="301-301"];
m0_131 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="320-320"];
m0_140 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="345-345"];
m0_147 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="368-368"];
m0_155 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="390-390"];
m0_163 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="412-412"];
m0_194 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="467-467"];
m0_204 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="487-487"];
m0_212 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="507-507"];
m0_221 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="527-527"];
m0_229 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="545-545"];
m0_238 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="564-564"];
m0_247 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="583-583"];
m0_255 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="602-602"];
m0_263 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="621-621"];
m0_271 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="641-641"];
m0_279 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="660-660"];
m0_287 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="679-679"];
m0_294 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="698-698"];
m0_13 [cluster="lambda expression", file="InstanceChooser.cs", label=fakeOptions, span="27-27"];
m0_46 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="117-117"];
m0_240 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="564-564"];
m0_249 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="583-583"];
m0_257 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="602-602"];
m0_265 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="621-621"];
m0_273 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="641-641"];
m0_14 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="27-27"];
m0_29 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="71-71"];
m0_28 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithDouble()", span="71-71"];
m0_38 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="95-95"];
m0_37 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequence()", span="95-95"];
m0_53 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="140-140"];
m0_52 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
m0_61 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="162-162"];
m0_60 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
m0_72 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="181-181"];
m0_71 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
m0_81 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="200-200"];
m0_80 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
m0_90 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="220-220"];
m0_89 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
m0_98 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="239-239"];
m0_97 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m0_107 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="263-263"];
m0_106 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m0_117 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="282-282"];
m0_116 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m0_125 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="301-301"];
m0_124 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m0_133 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="320-320"];
m0_132 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m0_142 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="345-345"];
m0_141 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithValues()", span="345-345"];
m0_149 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="368-368"];
m0_148 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m0_157 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="390-390"];
m0_156 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m0_165 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="412-412"];
m0_164 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m0_196 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="467-467"];
m0_195 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSets()", span="467-467"];
m0_206 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="487-487"];
m0_205 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m0_214 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="507-507"];
m0_213 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m0_223 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="527-527"];
m0_222 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m0_231 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="545-545"];
m0_230 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithRequired()", span="545-545"];
m0_281 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="660-660"];
m0_280 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithRequiredValue()", span="660-660"];
m0_289 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="679-679"];
m0_288 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithRequiredValue()", span="679-679"];
m0_296 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="698-698"];
m0_295 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="698-698"];
m0_174 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithValues()", span="441-441"];
m0_173 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="441-441"];
m0_175 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="441-441"];
m0_176 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="442-444"];
m0_178 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="442-444"];
m0_177 [cluster="lambda expression", file="InstanceChooser.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m0_181 [cluster="lambda expression", file="InstanceChooser.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m0_185 [cluster="lambda expression", file="InstanceChooser.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m0_180 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="444-444"];
m0_182 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="444-444"];
m0_186 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="444-444"];
m0_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m0_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m0_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m0_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m0_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m0_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m0_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m0_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m0_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m0_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m0_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m0_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m0_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m0_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m0_35 [cluster="Unk.SequenceEqual", file="InstanceChooser.cs", label="Entry Unk.SequenceEqual", span=""];
m0_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceChooser.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m0_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
m0_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="678-682"];
m0_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="685-685"];
m0_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
m0_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
m0_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m0_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m0_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m0_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m0_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m0_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m0_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m0_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m0_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m0_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m0_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m0_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m0_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m0_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m0_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m0_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m0_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceChooser.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
m0_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m0_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
m0_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
m0_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187"];
m0_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m0_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m0_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m0_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m0_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m0_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m0_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
m0_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
m0_297 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m0_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m0_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m0_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
m0_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
m0_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206"];
m0_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m0_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceChooser.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m0_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m0_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m0_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m0_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m0_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m0_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m0_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m0_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceChooser.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m0_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceChooser.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m0_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m0_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceChooser.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m0_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
m0_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
m0_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m0_270 [cluster="string.Equals(string)", file="InstanceChooser.cs", label="Entry string.Equals(string)", span="0-0"];
m0_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m0_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceChooser.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m0_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m0_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceChooser.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m0_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m0_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
m0_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceChooser.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
m0_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m0_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m0_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=green, community=0, file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", prediction=1, span="47-51"];
m0_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=green, community=0, file="InstanceChooser.cs", label="Assert.Equal(expected, result.Value.LongValue)", prediction=2, span="54-54"];
m0_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m0_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
m0_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m0_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m0_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m0_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m0_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m0_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m0_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m0_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m0_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m0_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m0_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m0_282 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", span="4-4"];
m0_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m0_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m0_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m0_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m0_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m0_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m0_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceChooser.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77"];
m0_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m0_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m0_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceChooser.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m0_19 [cluster="Unk.Equal", file="InstanceChooser.cs", label="Entry Unk.Equal", span=""];
m0_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m0_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m0_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m0_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m0_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m0_104 [cluster="Unk.ShouldBeEquivalentTo", file="InstanceChooser.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m0_298 [file="InstanceChooser.cs", label=fakeOptions, span=""];
m0_299 [file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120"];
m1_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ResultExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123"];
m1_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
m1_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ResultExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m1_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
m1_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="697-701"];
m1_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ResultExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="704-704"];
m1_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
m1_11 [cluster="Unk.True", file="ResultExtensions.cs", label="Entry Unk.True", span=""];
m1_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m1_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m1_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ResultExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m1_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m1_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m1_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m1_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m1_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m1_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m1_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m1_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m1_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m1_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m1_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m1_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="ResultExtensions.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m1_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
m1_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m1_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m1_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ResultExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m1_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m1_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
m1_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m1_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m1_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ResultExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m1_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m1_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m1_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m1_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m1_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m1_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m1_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m1_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
m1_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ResultExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
m1_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m1_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
m1_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m1_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m1_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ResultExtensions.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m1_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m1_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m1_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m1_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ResultExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m1_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ResultExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m1_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m1_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ResultExtensions.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m1_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m1_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98"];
m1_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ResultExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101"];
m1_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", prediction=3, span="26-30"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ResultExtensions.cs", label="var fakeOptions = new FakeOptions()", span="20-20"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ResultExtensions.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="ResultExtensions.cs", label="Assert.True(expectedResult.Equals(result))", prediction=4, span="33-33"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m1_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m1_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m1_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m1_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m1_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m1_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ResultExtensions.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
m1_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ResultExtensions.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m1_184 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="444-444"];
m1_12 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="27-27"];
m1_13 [cluster="lambda expression", color=green, community=0, file="ResultExtensions.cs", label=fakeOptions, prediction=5, span="27-27"];
m1_14 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="27-27"];
m1_21 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptions()", span="48-48"];
m1_45 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptions()", span="117-117"];
m1_239 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptions()", span="564-564"];
m1_248 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptions()", span="583-583"];
m1_256 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptions()", span="602-602"];
m1_264 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptions()", span="621-621"];
m1_272 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptions()", span="641-641"];
m1_20 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="48-48"];
m1_27 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="71-71"];
m1_36 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="95-95"];
m1_44 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="117-117"];
m1_51 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="140-140"];
m1_59 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="162-162"];
m1_70 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="181-181"];
m1_79 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="200-200"];
m1_88 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="220-220"];
m1_96 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="239-239"];
m1_105 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="263-263"];
m1_115 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="282-282"];
m1_123 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="301-301"];
m1_131 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="320-320"];
m1_140 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="345-345"];
m1_147 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="368-368"];
m1_155 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="390-390"];
m1_163 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="412-412"];
m1_194 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="467-467"];
m1_204 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="487-487"];
m1_212 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="507-507"];
m1_221 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="527-527"];
m1_229 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="545-545"];
m1_238 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="564-564"];
m1_247 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="583-583"];
m1_255 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="602-602"];
m1_263 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="621-621"];
m1_271 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="641-641"];
m1_279 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="660-660"];
m1_287 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="679-679"];
m1_294 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="698-698"];
m1_22 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="48-48"];
m1_46 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="117-117"];
m1_240 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="564-564"];
m1_249 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="583-583"];
m1_257 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="602-602"];
m1_265 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="621-621"];
m1_273 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="641-641"];
m1_29 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="71-71"];
m1_28 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithDouble()", span="71-71"];
m1_38 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="95-95"];
m1_37 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequence()", span="95-95"];
m1_53 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="140-140"];
m1_52 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
m1_61 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="162-162"];
m1_60 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
m1_72 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="181-181"];
m1_71 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
m1_81 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="200-200"];
m1_80 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
m1_90 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="220-220"];
m1_89 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
m1_98 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="239-239"];
m1_97 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m1_107 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="263-263"];
m1_106 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m1_117 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="282-282"];
m1_116 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m1_125 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="301-301"];
m1_124 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m1_133 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="320-320"];
m1_132 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m1_142 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="345-345"];
m1_141 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithValues()", span="345-345"];
m1_149 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="368-368"];
m1_148 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m1_157 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="390-390"];
m1_156 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m1_165 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="412-412"];
m1_164 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m1_196 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="467-467"];
m1_195 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithSets()", span="467-467"];
m1_206 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="487-487"];
m1_205 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m1_214 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="507-507"];
m1_213 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m1_223 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="527-527"];
m1_222 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m1_231 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="545-545"];
m1_230 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionWithRequired()", span="545-545"];
m1_281 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="660-660"];
m1_280 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionWithRequiredValue()", span="660-660"];
m1_289 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="679-679"];
m1_288 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionWithRequiredValue()", span="679-679"];
m1_296 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="698-698"];
m1_295 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="698-698"];
m1_174 [cluster="lambda expression", file="ResultExtensions.cs", label="new FakeOptionsWithValues()", span="441-441"];
m1_173 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="441-441"];
m1_175 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="441-441"];
m1_176 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="442-444"];
m1_178 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="442-444"];
m1_177 [cluster="lambda expression", file="ResultExtensions.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m1_181 [cluster="lambda expression", file="ResultExtensions.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m1_185 [cluster="lambda expression", file="ResultExtensions.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m1_180 [cluster="lambda expression", file="ResultExtensions.cs", label="Entry lambda expression", span="444-444"];
m1_182 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="444-444"];
m1_186 [cluster="lambda expression", file="ResultExtensions.cs", label="Exit lambda expression", span="444-444"];
m1_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m1_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m1_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m1_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ResultExtensions.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m1_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m1_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m1_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m1_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ResultExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m1_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m1_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m1_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m1_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m1_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m1_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m1_35 [cluster="Unk.SequenceEqual", file="ResultExtensions.cs", label="Entry Unk.SequenceEqual", span=""];
m1_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="ResultExtensions.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m1_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
m1_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="678-682"];
m1_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="ResultExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="685-685"];
m1_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
m1_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
m1_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m1_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m1_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m1_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m1_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m1_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m1_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ResultExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m1_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ResultExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m1_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m1_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ResultExtensions.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m1_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m1_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m1_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m1_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m1_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m1_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m1_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="ResultExtensions.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
m1_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m1_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
m1_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187"];
m1_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
m1_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m1_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m1_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m1_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ResultExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m1_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ResultExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m1_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m1_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
m1_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
m1_297 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m1_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m1_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m1_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
m1_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206"];
m1_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
m1_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m1_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="ResultExtensions.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m1_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m1_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m1_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m1_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m1_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m1_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m1_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m1_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ResultExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m1_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ResultExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m1_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m1_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ResultExtensions.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m1_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
m1_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="ResultExtensions.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
m1_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="ResultExtensions.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m1_270 [cluster="string.Equals(string)", file="ResultExtensions.cs", label="Entry string.Equals(string)", span="0-0"];
m1_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m1_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="ResultExtensions.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m1_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m1_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="ResultExtensions.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m1_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m1_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
m1_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ResultExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
m1_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m1_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m1_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
m1_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ResultExtensions.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="54-54"];
m1_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m1_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
m1_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m1_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m1_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m1_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m1_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m1_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m1_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m1_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m1_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m1_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m1_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m1_282 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", span="4-4"];
m1_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m1_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m1_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m1_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m1_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m1_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m1_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74"];
m1_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ResultExtensions.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77"];
m1_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m1_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m1_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ResultExtensions.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m1_19 [cluster="Unk.Equal", file="ResultExtensions.cs", label="Entry Unk.Equal", span=""];
m1_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ResultExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m1_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ResultExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m1_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ResultExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m1_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ResultExtensions.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m1_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ResultExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m1_104 [cluster="Unk.ShouldBeEquivalentTo", file="ResultExtensions.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ResultExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m1_298 [file="ResultExtensions.cs", label=fakeOptions, span=""];
m1_299 [file="ResultExtensions.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n298 -> n13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
n299 -> n181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n299 -> n185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n1 -> n13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
n2 -> n4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n3 -> n12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n15 -> n17  [color=darkseagreen4, key=1, label=long, style=dashed];
n16 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n47 -> n49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n55 -> n57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n56 -> n59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n64 -> n66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n65 -> n70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n74 -> n76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n75 -> n79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n84 -> n86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n85 -> n88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n92 -> n94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n93 -> n96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n100 -> n102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n101 -> n105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n102 -> n102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n110 -> n112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n111 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n120 -> n123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n127 -> n129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n128 -> n131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n135 -> n137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n136 -> n140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n143 -> n145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n144 -> n147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n151 -> n153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n152 -> n155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n159 -> n161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n160 -> n163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n167 -> n170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n169 -> n173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n169 -> n176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n176 -> n181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n176 -> n185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n177 -> n180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n181 -> n184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n189 -> n191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n190 -> n194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n199 -> n201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n200 -> n204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n208 -> n210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n209 -> n212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n216 -> n218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n217 -> n221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n225 -> n227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n226 -> n229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n234 -> n236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n235 -> n238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n242 -> n244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n243 -> n247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n251 -> n253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n252 -> n255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n259 -> n261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n260 -> n263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n266 -> n268  [color=darkseagreen4, key=1, label=string, style=dashed];
n267 -> n271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n275 -> n277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n276 -> n279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n283 -> n285  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue", style=dashed];
n284 -> n287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n290 -> n292  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
n291 -> n294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_41 -> m0_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_290 -> m0_292  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m0_291 -> m0_294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_159 -> m0_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_160 -> m0_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_235 -> m0_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_234 -> m0_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_276 -> m0_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_275 -> m0_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_151 -> m0_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_152 -> m0_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_143 -> m0_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_144 -> m0_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_243 -> m0_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_242 -> m0_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_55 -> m0_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_56 -> m0_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_266 -> m0_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_267 -> m0_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_209 -> m0_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_208 -> m0_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_31 -> m0_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_32 -> m0_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_1 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_226 -> m0_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_225 -> m0_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_176 -> m0_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_176 -> m0_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_177 -> m0_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_181 -> m0_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_217 -> m0_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_216 -> m0_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_100 -> m0_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_101 -> m0_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_102 -> m0_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_128 -> m0_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_127 -> m0_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_283 -> m0_285  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue", style=dashed];
m0_284 -> m0_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_85 -> m0_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_84 -> m0_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_167 -> m0_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_169 -> m0_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_169 -> m0_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_260 -> m0_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_259 -> m0_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_65 -> m0_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_64 -> m0_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_136 -> m0_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_135 -> m0_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_75 -> m0_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_74 -> m0_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_93 -> m0_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_92 -> m0_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_200 -> m0_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_199 -> m0_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_47 -> m0_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_48 -> m0_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_15 -> m0_17  [color=green, key=1, label=long, style=dashed];
m0_16 -> m0_20  [color=green, key=1, label="lambda expression", style=dashed];
m0_252 -> m0_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_251 -> m0_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_120 -> m0_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_119 -> m0_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_111 -> m0_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_110 -> m0_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_24 -> m0_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_190 -> m0_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_189 -> m0_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_298 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_299 -> m0_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_299 -> m0_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_41 -> m1_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_290 -> m1_292  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m1_291 -> m1_294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_159 -> m1_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_160 -> m1_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_235 -> m1_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_234 -> m1_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_276 -> m1_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_275 -> m1_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_151 -> m1_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m1_152 -> m1_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_143 -> m1_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m1_144 -> m1_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_243 -> m1_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_242 -> m1_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_55 -> m1_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_56 -> m1_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_266 -> m1_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_267 -> m1_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_209 -> m1_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_208 -> m1_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_31 -> m1_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m1_32 -> m1_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_3 -> m1_12  [color=green, key=1, label="lambda expression", style=dashed];
m1_1 -> m1_13  [color=green, key=1, label=fakeOptions, style=dashed];
m1_2 -> m1_4  [color=green, key=1, label=expectedResult, style=dashed];
m1_226 -> m1_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_225 -> m1_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_176 -> m1_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_176 -> m1_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_177 -> m1_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_181 -> m1_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_217 -> m1_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_216 -> m1_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_100 -> m1_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_101 -> m1_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_102 -> m1_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_128 -> m1_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_127 -> m1_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_283 -> m1_285  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue", style=dashed];
m1_284 -> m1_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_85 -> m1_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_84 -> m1_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_167 -> m1_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_169 -> m1_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_169 -> m1_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_260 -> m1_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_259 -> m1_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_65 -> m1_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_64 -> m1_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_136 -> m1_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_135 -> m1_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_75 -> m1_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_74 -> m1_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_93 -> m1_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_92 -> m1_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_200 -> m1_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_199 -> m1_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_47 -> m1_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_48 -> m1_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_15 -> m1_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m1_16 -> m1_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_252 -> m1_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_251 -> m1_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_120 -> m1_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_119 -> m1_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_111 -> m1_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_110 -> m1_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_190 -> m1_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_189 -> m1_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_298 -> m1_13  [color=green, key=1, label=fakeOptions, style=dashed];
m1_299 -> m1_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_299 -> m1_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
}
