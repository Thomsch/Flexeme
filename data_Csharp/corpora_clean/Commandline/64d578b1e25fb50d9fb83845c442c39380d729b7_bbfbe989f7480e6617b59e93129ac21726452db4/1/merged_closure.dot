digraph  {
n0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
n1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22"];
n6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
n3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36"];
n7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
n8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
n9 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n10 [cluster="System.Type.GetProperties()", label="Entry System.Type.GetProperties()", span="0-0"];
n11 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n12 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
n16 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
n4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true))", span="39-42"];
n13 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n14 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
n20 [cluster="lambda expression", label="Entry lambda expression", span="33-33"];
n24 [cluster="lambda expression", label="Entry lambda expression", span="35-35"];
n5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
n15 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n28 [cluster="lambda expression", label="Entry lambda expression", span="40-42"];
n17 [cluster="lambda expression", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27"];
n18 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
n19 [cluster="string.Equals(string, System.StringComparison)", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
n21 [cluster="lambda expression", label="pt.Specification.IsOption()", span="33-33"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="33-33"];
n23 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
n25 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35"];
n26 [cluster="lambda expression", label="Exit lambda expression", span="35-35"];
n27 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
n29 [cluster="lambda expression", label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true", span="40-42"];
n30 [cluster="lambda expression", label="Exit lambda expression", span="40-42"];
n31 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
d9 [cluster="CommandLine.Core.Token.Value(string)", color=green, community=0, label="return new Value(text);", prediction=0, span="26-26"];
d8 [cluster="CommandLine.Core.Token.Value(string)", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
d10 [cluster="CommandLine.Core.Token.Value(string)", label="Exit CommandLine.Core.Token.Value(string)", span="24-24"];
d11 [cluster="CommandLine.Core.Value.Value(string)", label="Entry CommandLine.Core.Value.Value(string)", span="81-81"];
d13 [cluster="CommandLine.Core.Token.Value(string, bool)", color=green, community=0, label="return new Value(text, explicitlyAssigned);", prediction=1, span="31-31"];
d12 [cluster="CommandLine.Core.Token.Value(string, bool)", label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29"];
d14 [cluster="CommandLine.Core.Token.Value(string, bool)", label="Exit CommandLine.Core.Token.Value(string, bool)", span="29-29"];
d15 [cluster="Value.cstr", label="Entry Value.cstr", span=""];
d37 [cluster="CommandLine.Core.Value.Equals(object)", color=green, community=0, label="var other = obj as Value", prediction=2, span="88-88"];
d36 [cluster="CommandLine.Core.Value.Equals(object)", label="Entry CommandLine.Core.Value.Equals(object)", span="86-86"];
d42 [cluster="CommandLine.Core.Value.Equals(CommandLine.Core.Value)", label="Entry CommandLine.Core.Value.Equals(CommandLine.Core.Value)", span="102-102"];
d38 [cluster="CommandLine.Core.Value.Equals(object)", label="other != null", span="89-89"];
d39 [cluster="CommandLine.Core.Value.Equals(object)", color=green, community=0, label="return Equals(other);", prediction=2, span="91-91"];
d40 [cluster="CommandLine.Core.Value.Equals(object)", color=green, community=0, label="return base.Equals(obj);", prediction=2, span="94-94"];
d58 [label="CommandLine.Core.Value", span=""];
d41 [cluster="CommandLine.Core.Value.Equals(object)", label="Exit CommandLine.Core.Value.Equals(object)", span="86-86"];
d24 [cluster="object.Equals(object)", label="Entry object.Equals(object)", span="0-0"];
d35 [cluster="CommandLine.Core.Value.Value(string)", label="Exit CommandLine.Core.Value.Value(string)", span="81-81"];
d49 [cluster="CommandLine.Core.Value.Equals(CommandLine.Core.Value)", label="Exit CommandLine.Core.Value.Equals(CommandLine.Core.Value)", span="102-102"];
d46 [cluster="CommandLine.Core.Value.Equals(CommandLine.Core.Value)", label="other == null", span="104-104"];
d48 [cluster="CommandLine.Core.Value.Equals(CommandLine.Core.Value)", label="return Tag.Equals(other.Tag) && Text.Equals(other.Text);", span="109-109"];
d30 [cluster="CommandLine.Core.Name.Equals(CommandLine.Core.Name)", label="return false;", span="72-72"];
d44 [cluster="CommandLine.Core.Value.GetHashCode()", label="return new { Tag, Text }.GetHashCode();", span="99-99"];
d21 [cluster="CommandLine.Core.Name.Equals(object)", label="return base.Equals(obj);", span="60-60"];
d47 [cluster="CommandLine.Core.Value.Equals(CommandLine.Core.Value)", label="return false;", span="106-106"];
d33 [cluster="System.Enum.Equals(object)", label="Entry System.Enum.Equals(object)", span="0-0"];
d34 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
d23 [cluster="CommandLine.Core.Name.Equals(CommandLine.Core.Name)", label="Entry CommandLine.Core.Name.Equals(CommandLine.Core.Name)", span="68-68"];
d29 [cluster="CommandLine.Core.Name.Equals(CommandLine.Core.Name)", label="other == null", span="70-70"];
d32 [cluster="CommandLine.Core.Name.Equals(CommandLine.Core.Name)", label="Exit CommandLine.Core.Name.Equals(CommandLine.Core.Name)", span="68-68"];
d43 [cluster="CommandLine.Core.Value.GetHashCode()", label="Entry CommandLine.Core.Value.GetHashCode()", span="97-97"];
d45 [cluster="CommandLine.Core.Value.GetHashCode()", label="Exit CommandLine.Core.Value.GetHashCode()", span="97-97"];
d28 [cluster="object.GetHashCode()", label="Entry object.GetHashCode()", span="0-0"];
d57 [label="CommandLine.Core.Name", span=""];
d17 [cluster="CommandLine.Core.Name.Equals(object)", label="Entry CommandLine.Core.Name.Equals(object)", span="52-52"];
d19 [cluster="CommandLine.Core.Name.Equals(object)", label="other != null", span="55-55"];
d22 [cluster="CommandLine.Core.Name.Equals(object)", label="Exit CommandLine.Core.Name.Equals(object)", span="52-52"];
d31 [cluster="CommandLine.Core.Name.Equals(CommandLine.Core.Name)", label="return Tag.Equals(other.Tag) && Text.Equals(other.Text);", span="75-75"];
d20 [cluster="CommandLine.Core.Name.Equals(object)", label="return Equals(other);", span="57-57"];
d18 [cluster="CommandLine.Core.Name.Equals(object)", label="var other = obj as Name", span="54-54"];
d26 [cluster="CommandLine.Core.Name.GetHashCode()", label="return new {Tag, Text}.GetHashCode();", span="65-65"];
d25 [cluster="CommandLine.Core.Name.GetHashCode()", label="Entry CommandLine.Core.Name.GetHashCode()", span="63-63"];
d27 [cluster="CommandLine.Core.Name.GetHashCode()", label="Exit CommandLine.Core.Name.GetHashCode()", span="63-63"];
m0_16 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", color=green, community=0, file="Tokenizer.cs", label="return new Nothing<T>();", prediction=5, span="68-68"];
m0_17 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m0_44 [cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120"];
m0_45 [cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", file="Tokenizer.cs", label="return maybe.Map(selector);", span="123-123"];
m0_46 [cluster="CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Select<TSource, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, TResult>)", span="120-120"];
m0_0 [cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16"];
m0_1 [cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", file="Tokenizer.cs", label="this.tag = tag", span="18-18"];
m0_12 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49"];
m0_13 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="Tokenizer.cs", label="this.value = value", span="52-52"];
m0_14 [cluster="CommandLine.Infrastructure.Just<T>.Just(T)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Just<T>.Just(T)", span="49-49"];
m0_47 [cluster="CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="95-95"];
m0_3 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26"];
m0_4 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", file="Tokenizer.cs", label="return this.Tag == MaybeType.Nothing;", span="28-28"];
m0_5 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26"];
m0_21 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82"];
m0_22 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="Tokenizer.cs", label="return object.Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="84-84"];
m0_23 [cluster="CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.ToMaybe<T>(T)", span="82-82"];
m0_43 [cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m0_29 [cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_65 [cluster="System.ArgumentException.ArgumentException(string)", file="Tokenizer.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m0_48 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126"];
m0_49 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="Tokenizer.cs", label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="131-134"];
m0_50 [cluster="CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CommandLine.Infrastructure.Maybe<TSource>, System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="126-126"];
m0_66 [cluster="CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", span="147-147"];
m0_67 [cluster="CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", color=green, community=0, file="Tokenizer.cs", label="return maybe.Tag == MaybeType.Nothing;", prediction=6, span="149-149"];
m0_68 [cluster="CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.IsNothing<T>(CommandLine.Infrastructure.Maybe<T>)", span="147-147"];
m0_55 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="134-134"];
m0_53 [cluster="lambda expression", file="Tokenizer.cs", label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="132-134"];
m0_52 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="132-134"];
m0_54 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="132-134"];
m0_56 [cluster="lambda expression", file="Tokenizer.cs", label="resultSelector(sourceValue, resultValue)", span="134-134"];
m0_57 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="134-134"];
m0_2 [cluster="CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Maybe<T>.Maybe(CommandLine.Infrastructure.MaybeType)", span="16-16"];
m0_10 [cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42"];
m0_11 [cluster="CommandLine.Infrastructure.Nothing<T>.Nothing()", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Nothing<T>.Nothing()", span="42-42"];
m0_30 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95"];
m0_32 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs", label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="98-100"];
m0_31 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs", label="T1 value1", span="97-97"];
m0_33 [cluster="CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Map<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>)", span="95-95"];
m0_18 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m0_19 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", color=green, community=0, file="Tokenizer.cs", label="return new Just<T>(value);", prediction=7, span="73-73"];
m0_20 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m0_38 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111"];
m0_40 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs", label="maybe.MatchJust(out value)", span="114-114"];
m0_39 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs", label="T value", span="113-113"];
m0_41 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs", label="action(value)", span="116-116"];
m0_42 [cluster="CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Do<T>(CommandLine.Infrastructure.Maybe<T>, System.Action<T>)", span="111-111"];
m0_6 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m0_7 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs", label="value = this.Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="33-35"];
m0_8 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs", label="return this.Tag == MaybeType.Just;", span="36-36"];
m0_9 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m0_24 [cluster="object.Equals(object, object)", file="Tokenizer.cs", label="Entry object.Equals(object, object)", span="0-0"];
m0_51 [cluster="CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
m0_34 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
m0_36 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="106-108"];
m0_35 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs", label="T1 value1", span="105-105"];
m0_37 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
m0_59 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137"];
m0_61 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="maybe.MatchJust(out value)", span="140-140"];
m0_60 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="T value", span="139-139"];
m0_62 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="return value;", span="142-142"];
m0_63 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="144-144"];
m0_64 [cluster="CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.FromJust<T>(CommandLine.Infrastructure.Maybe<T>, System.Exception)", span="137-137"];
m0_25 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
m0_27 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="90-92"];
m0_26 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs", label="T1 value1", span="89-89"];
m0_28 [cluster="CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", file="Tokenizer.cs", label="Exit CommandLine.Infrastructure.MaybeExtensions.Bind<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, CommandLine.Infrastructure.Maybe<T2>>)", span="87-87"];
m0_58 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="Tokenizer.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m0_73 [file="Tokenizer.cs", label="CommandLine.Infrastructure.Just<T>", span=""];
m0_72 [file="Tokenizer.cs", label="CommandLine.Infrastructure.Maybe<T>", span=""];
m0_74 [file="Tokenizer.cs", label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", span=""];
m0_75 [file="Tokenizer.cs", label="System.Func<TSource, TValue, TResult>", span=""];
m0_76 [file="Tokenizer.cs", label=TSource, span=""];
m1_20 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="42-42"];
m1_21 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", file="TokenizerTests.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", span="55-55"];
m1_22 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", file="TokenizerTests.cs", label="var index = -1", span="57-57"];
m1_24 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", file="TokenizerTests.cs", label="index++", span="60-60"];
m1_23 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", file="TokenizerTests.cs", label=source, span="58-58"];
m1_25 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", file="TokenizerTests.cs", label="predicate(item)", span="61-61"];
m1_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TokenizerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="18-18"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="21-22"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="23-24"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="36-36"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="27-33"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="18-18"];
m1_39 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m1_14 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
m1_6 [cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m1_19 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m1_28 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="57-57"];
m1_11 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_44 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m1_38 [cluster="System.Array.CreateInstance(System.Type, int)", file="TokenizerTests.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m1_41 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="81-81"];
m1_42 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", color=green, community=0, file="TokenizerTests.cs", label="return !source.Any();", prediction=8, span="83-83"];
m1_43 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="81-81"];
m1_26 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", color=green, community=0, file="TokenizerTests.cs", label="return index;", prediction=9, span="66-66"];
m1_17 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="33-33"];
m1_16 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="33-33"];
m1_18 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="33-33"];
m1_27 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", file="TokenizerTests.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", span="55-55"];
m1_9 [cluster="CSharpx.Maybe.Nothing<T>()", file="TokenizerTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_32 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="TokenizerTests.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="74-74"];
m1_33 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", color=green, community=0, file="TokenizerTests.cs", label="var array = Array.CreateInstance(type, value.Count())", prediction=10, span="76-76"];
m1_34 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", color=green, community=0, file="TokenizerTests.cs", label="value.ToArray().CopyTo(array, 0)", prediction=11, span="77-77"];
m1_35 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", color=green, community=0, file="TokenizerTests.cs", label="return array;", prediction=10, span="78-78"];
m1_36 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="TokenizerTests.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="74-74"];
m1_29 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", file="TokenizerTests.cs", label=specs, span=""];
m1_30 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", color=green, community=0, file="TokenizerTests.cs", label=specs, prediction=13, span=""];
m1_31 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", file="TokenizerTests.cs", label="Exit CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", span="69-69"];
m1_13 [cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="TokenizerTests.cs", label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202"];
m1_10 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m1_40 [cluster="System.Array.CopyTo(System.Array, int)", file="TokenizerTests.cs", label="Entry System.Array.CopyTo(System.Array, int)", span="0-0"];
m1_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_15 [cluster="Unk.ShouldBeEquivalentTo", file="TokenizerTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
n3 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n4 -> n28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d37 -> d39  [color=green, key=1, label=other, style=dashed];
d36 -> d40  [color=green, key=1, label=object, style=dashed];
d42 -> d48  [color=darkseagreen4, key=1, label="CommandLine.Core.Value", style=dashed];
d58 -> d40  [color=green, key=1, label="CommandLine.Core.Value", style=dashed];
d58 -> d39  [color=green, key=1, label="CommandLine.Core.Value", style=dashed];
d58 -> d44  [color=darkseagreen4, key=1, label="CommandLine.Core.Value", style=dashed];
d58 -> d48  [color=darkseagreen4, key=1, label="CommandLine.Core.Value", style=dashed];
d23 -> d31  [color=darkseagreen4, key=1, label="CommandLine.Core.Name", style=dashed];
d57 -> d21  [color=darkseagreen4, key=1, label="CommandLine.Core.Name", style=dashed];
d57 -> d20  [color=darkseagreen4, key=1, label="CommandLine.Core.Name", style=dashed];
d57 -> d26  [color=darkseagreen4, key=1, label="CommandLine.Core.Name", style=dashed];
d57 -> d31  [color=darkseagreen4, key=1, label="CommandLine.Core.Name", style=dashed];
d17 -> d21  [color=darkseagreen4, key=1, label=object, style=dashed];
d18 -> d20  [color=darkseagreen4, key=1, label=other, style=dashed];
m0_48 -> m0_53  [color=darkseagreen4, key=1, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", style=dashed];
m0_48 -> m0_56  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m0_49 -> m0_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_53 -> m0_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_52 -> m0_56  [color=darkseagreen4, key=1, label=TSource, style=dashed];
m0_30 -> m0_32  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
m0_32 -> m0_32  [color=darkseagreen4, key=1, label=value1, style=dashed];
m0_38 -> m0_40  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m0_38 -> m0_41  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
m0_7 -> m0_9  [color=darkseagreen4, key=1, label="out T", style=dashed];
m0_34 -> m0_36  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
m0_36 -> m0_36  [color=darkseagreen4, key=1, label=value1, style=dashed];
m0_59 -> m0_61  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m0_59 -> m0_63  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m0_25 -> m0_27  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T1>", style=dashed];
m0_27 -> m0_27  [color=darkseagreen4, key=1, label=value1, style=dashed];
m0_72 -> m0_8  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m0_72 -> m0_4  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<T>", style=dashed];
m0_74 -> m0_53  [color=darkseagreen4, key=1, label="System.Func<TSource, CommandLine.Infrastructure.Maybe<TValue>>", style=dashed];
m0_75 -> m0_53  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m0_75 -> m0_56  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
m0_76 -> m0_56  [color=darkseagreen4, key=1, label=TSource, style=dashed];
m1_21 -> m1_24  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m1_21 -> m1_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
m1_21 -> m1_25  [color=darkseagreen4, key=1, label="System.Func<TSource, bool>", style=dashed];
m1_22 -> m1_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
m1_22 -> m1_26  [color=green, key=1, label=index, style=dashed];
m1_22 -> m1_24  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_24 -> m1_26  [color=green, key=1, label=index, style=dashed];
m1_24 -> m1_24  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_23 -> m1_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=item, style=dashed];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m1_2 -> m1_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m1_3 -> m1_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_32 -> m1_34  [color=green, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m1_33 -> m1_35  [color=green, key=1, label=array, style=dashed];
m1_29 -> m1_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m1_30 -> m1_27  [color=darkseagreen4, key=1, label=specs, style=dashed];
}
