digraph  {
m0_9 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m0_11 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="UnParserExtensions.cs", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m0_10 [cluster="System.Collections.Generic.List<T>.List()", file="UnParserExtensions.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_13 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="UnParserExtensions.cs", label="CommandLine.Core.OptionSpecification", span=""];
m0_21 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38"];
m0_22 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="UnParserExtensions.cs", label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="41-42"];
m0_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="UnParserExtensions.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, typeof(IEnumerable<string>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())}", span="43-44"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="UnParserExtensions.cs", label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="56-56"];
m0_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="UnParserExtensions.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="47-53"];
m0_26 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38"];
m0_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="UnParserExtensions.cs", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m0_20 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_16 [cluster="Unk.True", file="UnParserExtensions.cs", label="Entry Unk.True", span=""];
m0_0 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m0_1 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="UnParserExtensions.cs", label="this.shortName = shortName", prediction=0, span="20-20"];
m0_2 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="UnParserExtensions.cs", label="this.longName = longName", prediction=1, span="21-21"];
m0_4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="UnParserExtensions.cs", label="this.setName = setName", prediction=2, span="23-23"];
m0_3 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="UnParserExtensions.cs", label="this.separator = separator", prediction=3, span="22-22"];
m0_5 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="UnParserExtensions.cs", label="this.helpText = helpText", span="24-24"];
m0_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="UnParserExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_27 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="53-53"];
m0_18 [cluster="lambda expression", file="UnParserExtensions.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="29-29"];
m0_17 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="29-29"];
m0_19 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="29-29"];
m0_28 [cluster="lambda expression", file="UnParserExtensions.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="53-53"];
m0_29 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="53-53"];
m0_6 [cluster="CommandLine.Core.Token.Name(string)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m0_7 [cluster="CommandLine.Core.Token.Value(string)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m0_15 [cluster="Unk.SequenceEqual", file="UnParserExtensions.cs", label="Entry Unk.SequenceEqual", span=""];
m0_14 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m0_30 [file="UnParserExtensions.cs", label=specs, span=""];
m0_31 [file="UnParserExtensions.cs", label=specs, span=""];
m1_5 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19"];
m1_6 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="21-26"];
m1_7 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="var converted = values.Select(value => ChangeType(value, type, conversionCulture))", span="28-28"];
m1_8 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToArray(type));", span="30-32"];
m1_9 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19"];
m1_19 [cluster="Unk.Just", file="UnParserExtensionsTests.cs", label="Entry Unk.Just", span=""];
m1_0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m1_1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="return scalar\r\n                ? ChangeType(values.Single(), conversionType, conversionCulture)\r\n                : ChangeType(values, conversionType, conversionCulture);", span="14-16"];
m1_2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m1_58 [cluster="System.Enum.IsDefined(System.Type, object)", file="UnParserExtensionsTests.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m1_13 [cluster="System.ApplicationException.ApplicationException(string)", file="UnParserExtensionsTests.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m1_16 [cluster="Unk.Any", file="UnParserExtensionsTests.cs", label="Entry Unk.Any", span=""];
m1_14 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m1_56 [cluster="System.Enum.Parse(System.Type, string)", file="UnParserExtensionsTests.cs", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
m1_39 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="66-66"];
m1_46 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="UnParserExtensionsTests.cs", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="68-68"];
m1_47 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="66-66"];
m1_40 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="71-71"];
m1_48 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="UnParserExtensionsTests.cs", label="object parsedValue", span="73-73"];
m1_49 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="UnParserExtensionsTests.cs", label="parsedValue = Enum.Parse(conversionType, value)", span="76-76"];
m1_52 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="UnParserExtensionsTests.cs", label="Enum.IsDefined(conversionType, parsedValue)", span="82-82"];
m1_50 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="UnParserExtensionsTests.cs", label=ArgumentException, span="78-78"];
m1_53 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="UnParserExtensionsTests.cs", label="return parsedValue;", span="84-84"];
m1_51 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="UnParserExtensionsTests.cs", label="throw new FormatException();", span="80-80"];
m1_54 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="UnParserExtensionsTests.cs", label="throw new FormatException();", span="86-86"];
m1_55 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="71-71"];
m1_12 [cluster="T.ToMaybe<T>()", file="UnParserExtensionsTests.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m1_27 [cluster="lambda expression", file="UnParserExtensionsTests.cs", label="Entry lambda expression", span="32-32"];
m1_21 [cluster="lambda expression", file="UnParserExtensionsTests.cs", label="ChangeType(value, type, conversionCulture)", span="28-28"];
m1_20 [cluster="lambda expression", file="UnParserExtensionsTests.cs", label="Entry lambda expression", span="28-28"];
m1_23 [cluster="lambda expression", file="UnParserExtensionsTests.cs", label="Entry lambda expression", span="30-30"];
m1_22 [cluster="lambda expression", file="UnParserExtensionsTests.cs", label="Exit lambda expression", span="28-28"];
m1_24 [cluster="lambda expression", file="UnParserExtensionsTests.cs", label="a.MatchNothing()", span="30-30"];
m1_25 [cluster="lambda expression", file="UnParserExtensionsTests.cs", label="Exit lambda expression", span="30-30"];
m1_28 [cluster="lambda expression", file="UnParserExtensionsTests.cs", label="((Just<object>)c).Value", span="32-32"];
m1_29 [cluster="lambda expression", file="UnParserExtensionsTests.cs", label="Exit lambda expression", span="32-32"];
m1_45 [cluster="string.Equals(string, System.StringComparison)", file="UnParserExtensionsTests.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m1_41 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="UnParserExtensionsTests.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m1_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="UnParserExtensionsTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m1_4 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35"];
m1_31 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label=InvalidCastException, span="46-46"];
m1_32 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="return Maybe.Nothing<object>();", span="48-48"];
m1_33 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label=FormatException, span="50-50"];
m1_34 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="return Maybe.Nothing<object>();", span="52-52"];
m1_35 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label=OverflowException, span="54-54"];
m1_36 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="return Maybe.Nothing<object>();", span="56-56"];
m1_37 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35"];
m1_42 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m1_15 [cluster="Unk.Select", file="UnParserExtensionsTests.cs", label="Entry Unk.Select", span=""];
m1_10 [cluster="System.Type.GetGenericArguments()", file="UnParserExtensionsTests.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m1_17 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m1_26 [cluster="Unk.MatchNothing", file="UnParserExtensionsTests.cs", label="Entry Unk.MatchNothing", span=""];
m1_18 [cluster="Unk.ToArray", file="UnParserExtensionsTests.cs", label="Entry Unk.ToArray", span=""];
m1_38 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="UnParserExtensionsTests.cs", label="Entry CommandLine.Core.TypeConverter.MatchBoolString(string)", span="60-60"];
m1_43 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="UnParserExtensionsTests.cs", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                   || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="62-63"];
m1_44 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="UnParserExtensionsTests.cs", label="Exit CommandLine.Core.TypeConverter.MatchBoolString(string)", span="60-60"];
m1_57 [cluster="System.FormatException.FormatException()", file="UnParserExtensionsTests.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m1_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="UnParserExtensionsTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m1_59 [file="UnParserExtensionsTests.cs", label="System.Globalization.CultureInfo", span=""];
m1_60 [file="UnParserExtensionsTests.cs", label=type, span=""];
m0_13 -> m0_6  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m0_13 -> m0_7  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m0_22 -> m0_25  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m0_23 -> m0_28  [color=darkseagreen4, key=1, label=specs, style=dashed];
m0_24 -> m0_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_0 -> m0_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_0 -> m0_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_2 -> m0_18  [color=darkseagreen4, key=1, label=specs, style=dashed];
m0_3 -> m0_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_30 -> m0_18  [color=darkseagreen4, key=1, label=specs, style=dashed];
m0_31 -> m0_28  [color=darkseagreen4, key=1, label=specs, style=dashed];
m1_5 -> m1_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_6 -> m1_21  [color=darkseagreen4, key=1, label=type, style=dashed];
m1_6 -> m1_8  [color=darkseagreen4, key=1, label=type, style=dashed];
m1_7 -> m1_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_8 -> m1_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_8 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_40 -> m1_52  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_49 -> m1_53  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
m1_59 -> m1_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_60 -> m1_21  [color=darkseagreen4, key=1, label=type, style=dashed];
}
