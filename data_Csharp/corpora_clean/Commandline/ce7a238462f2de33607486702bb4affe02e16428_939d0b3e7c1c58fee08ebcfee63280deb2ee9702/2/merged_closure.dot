digraph  {
m0_76 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="7-7"];
m0_86 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="27-27"];
m0_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m0_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''-0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="81-85"];
m0_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="var expectedResult = -.123D", span="78-78"];
m0_36 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="88-88"];
m0_37 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m0_11 [cluster="Unk.True", file="InstanceBuilderTests.cs", label="Entry Unk.True", span=""];
m0_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="256-256"];
m0_124 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", color=green, community=0, file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", prediction=0, span="259-259"];
m0_125 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", color=green, community=1, file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", prediction=1, span="262-266"];
m0_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", color=green, community=0, file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", prediction=0, span="269-269"];
m0_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="256-256"];
m0_118 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m0_132 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="275-275"];
m0_133 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", color=green, community=0, file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", prediction=3, span="278-278"];
m0_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", color=green, community=1, file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", prediction=4, span="281-285"];
m0_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", color=green, community=0, file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", prediction=3, span="288-288"];
m0_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="275-275"];
m0_57 [cluster="Unk.AllProperties", file="InstanceBuilderTests.cs", label="Entry Unk.AllProperties", span=""];
m0_101 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="10-10"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.Equals(result))", span="31-31"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var fakeOptions = new FakeOptions()", span="18-18"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m0_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="237-237"];
m0_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", color=green, community=0, file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", prediction=6, span="240-240"];
m0_115 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", color=green, community=1, file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", prediction=7, span="243-247"];
m0_116 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", color=green, community=0, file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", prediction=6, span="250-250"];
m0_117 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="237-237"];
m0_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
m0_128 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m0_98 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="202-202"];
m0_119 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="244-244"];
m0_120 [cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs", label="new FakeOptionWithRequired()", prediction=9, span="244-244"];
m0_121 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="244-244"];
m0_129 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="263-263"];
m0_130 [cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs", label="new FakeOptions()", prediction=10, span="263-263"];
m0_131 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="263-263"];
m0_138 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="282-282"];
m0_139 [cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs", label="new FakeOptions()", prediction=11, span="282-282"];
m0_140 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="282-282"];
m0_22 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="44-44"];
m0_48 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="101-101"];
m0_147 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="301-301"];
m0_155 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="320-320"];
m0_12 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="25-25"];
m0_21 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="44-44"];
m0_29 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="63-63"];
m0_38 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="82-82"];
m0_47 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="101-101"];
m0_59 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="123-123"];
m0_68 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="148-148"];
m0_77 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="170-170"];
m0_109 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="225-225"];
m0_146 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="301-301"];
m0_154 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="320-320"];
m0_13 [cluster="lambda expression", file="InstanceBuilderTests.cs", label=fakeOptions, span="25-25"];
m0_23 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="44-44"];
m0_49 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="101-101"];
m0_148 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="301-301"];
m0_156 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="320-320"];
m0_14 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="25-25"];
m0_31 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="63-63"];
m0_30 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="63-63"];
m0_40 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="82-82"];
m0_39 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="82-82"];
m0_61 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="123-123"];
m0_60 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="123-123"];
m0_70 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="148-148"];
m0_69 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="148-148"];
m0_79 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="170-170"];
m0_78 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="170-170"];
m0_111 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="225-225"];
m0_110 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSets()", span="225-225"];
m0_88 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="199-199"];
m0_87 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="199-199"];
m0_89 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="199-199"];
m0_90 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="200-202"];
m0_92 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="200-202"];
m0_91 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="201-202"];
m0_95 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="202-202"];
m0_99 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="202-202"];
m0_94 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="202-202"];
m0_96 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="202-202"];
m0_100 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="202-202"];
m0_46 [cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs", label="Entry Unk.SequenceEqual", span=""];
m0_80 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="185-185"];
m0_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="208-208"];
m0_81 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="188-194"];
m0_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="198-205"];
m0_82 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="195-195"];
m0_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="185-185"];
m0_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m0_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-i'', ''10'', ''20'', ''30'', ''40'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="100-104"];
m0_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="107-107"];
m0_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { 10, 20, 30, 40 }", span="97-97"];
m0_45 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m0_149 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="313-313"];
m0_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m0_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m0_150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="316-316"];
m0_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="313-313"];
m0_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
m0_62 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135"];
m0_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="147-151"];
m0_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="138-144"];
m0_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="154-154"];
m0_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135"];
m0_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="14-14"];
m0_32 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="7-7"];
m0_137 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m0_97 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m0_93 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m0_112 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m0_107 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m0_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m0_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="62-66"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="var expectedResult = .123D", span="59-59"];
m0_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="69-69"];
m0_28 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m0_122 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m0_108 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m0_58 [cluster="Unk.EqualTo", file="InstanceBuilderTests.cs", label="Entry Unk.EqualTo", span=""];
m0_56 [cluster="Unk.ShouldHave", file="InstanceBuilderTests.cs", label="Entry Unk.ShouldHave", span=""];
m0_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m0_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37"];
m0_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="43-47"];
m0_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="var expectedResult = -123", span="40-40"];
m0_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.LongValue)", span="50-50"];
m0_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37"];
m0_141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="294-294"];
m0_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m0_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m0_142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="297-297"];
m0_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="294-294"];
m0_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m0_52 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="122-126"];
m0_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="116-119"];
m0_53 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="129-129"];
m0_54 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m0_67 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m0_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m0_20 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m0_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="214-214"];
m0_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="217-221"];
m0_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="224-228"];
m0_105 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="231-231"];
m0_106 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="214-214"];
m0_71 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m0_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="169-173"];
m0_72 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n            {\r\n                LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n            }", span="163-166"];
m0_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="176-176"];
m0_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m0_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m0_157 [file="InstanceBuilderTests.cs", label=fakeOptions, span=""];
m0_158 [file="InstanceBuilderTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m1_1 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29"];
m1_2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m1_19 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152"];
m1_48 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="46-46"];
m1_49 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min);\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="48-60"];
m1_50 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="46-46"];
m1_46 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m1_38 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m1_10 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m1_14 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_47 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m1_61 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137"];
m1_42 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147"];
m1_65 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m1_62 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="56-57"];
m1_4 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22"];
m1_3 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="20-29"];
m1_5 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23"];
m1_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="22-22"];
m1_7 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26"];
m1_6 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="24-24"];
m1_20 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="23-23"];
m1_8 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="28-28"];
m1_9 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="20-29"];
m1_23 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-26"];
m1_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22"];
m1_17 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="22-22"];
m1_21 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)g.Specification).SetName", span="23-23"];
m1_22 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="23-23"];
m1_24 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26"];
m1_25 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-26"];
m1_33 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="var options = specProps.Where(sp => sp.Value.IsNothing() && sp.Specification.Required)", prediction=12, span="36-36"];
m1_32 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="34-43"];
m1_34 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="options.Any()", prediction=13, span="37-37"];
m1_39 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="36-36"];
m1_35 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="return options.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", prediction=12, span="39-40"];
m1_36 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", prediction=15, span="42-42"];
m1_37 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="34-43"];
m1_43 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="39-40"];
m1_40 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="sp.Value.IsNothing() && sp.Specification.Required", prediction=16, span="36-36"];
m1_41 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="36-36"];
m1_44 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", prediction=17, span="39-40"];
m1_45 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="39-40"];
m1_52 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)", span="50-53"];
m1_51 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="48-60"];
m1_53 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="54-54"];
m1_57 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="51-53"];
m1_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="56-57"];
m1_55 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="59-59"];
m1_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="48-60"];
m1_58 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min", span="51-53"];
m1_59 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="51-53"];
m1_63 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="56-57"];
m1_64 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="56-57"];
m1_29 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m1_30 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Value.IsNothing() && sp.Specification.Required);\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", prediction=18, span="34-43"];
m1_31 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m1_28 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m1_13 [cluster="Unk.Select", file="SpecificationPropertyRules.cs", label="Entry Unk.Select", span=""];
m1_60 [cluster="System.Type.ToDescriptor()", file="SpecificationPropertyRules.cs", label="Entry System.Type.ToDescriptor()", span="22-22"];
m1_26 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m1_18 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m1_27 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m1_11 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m1_12 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m2_107 [cluster="string.Split(params char[])", file="Tokenizer.cs", label="Entry string.Split(params char[])", span="0-0"];
m2_16 [cluster="Unk.nameLookup", file="Tokenizer.cs", label="Entry Unk.nameLookup", span=""];
m2_105 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188"];
m2_11 [cluster="string.StartsWith(string, System.StringComparison)", file="Tokenizer.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m2_84 [cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m2_106 [cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m2_38 [cluster="Unk.Any", file="Tokenizer.cs", label="Entry Unk.Any", span=""];
m2_12 [cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
m2_15 [cluster="Unk.IsName", file="Tokenizer.cs", label="Entry Unk.IsName", span=""];
m2_40 [cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_17 [cluster="Unk.Where", file="Tokenizer.cs", label="Entry Unk.Where", span=""];
m2_20 [cluster="Unk.Create", file="Tokenizer.cs", label="Entry Unk.Create", span=""];
m2_85 [cluster="string.Substring(int, int)", file="Tokenizer.cs", label="Entry string.Substring(int, int)", span="0-0"];
m2_86 [cluster="string.String(char, int)", file="Tokenizer.cs", label="Entry string.String(char, int)", span="0-0"];
m2_28 [cluster="Unk.Contains", file="Tokenizer.cs", label="Entry Unk.Contains", span=""];
m2_58 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="43-43"];
m2_22 [cluster="lambda expression", file="Tokenizer.cs", label="errors.Add(e)", span="18-18"];
m2_26 [cluster="lambda expression", color=green, community=0, file="Tokenizer.cs", label="!unkTokens.Contains(t)", prediction=19, span="30-30"];
m2_25 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="30-30"];
m2_21 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="18-18"];
m2_23 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="18-18"];
m2_27 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="30-30"];
m2_45 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="39-39"];
m2_49 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="41-41"];
m2_52 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="42-42"];
m2_55 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="42-42"];
m2_59 [cluster="lambda expression", file="Tokenizer.cs", label="tokens.Concat(values)", span="43-43"];
m2_46 [cluster="lambda expression", file="Tokenizer.cs", label="arg.EqualsOrdinal(''--'')", span="39-39"];
m2_47 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="39-39"];
m2_50 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="41-41"];
m2_51 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="41-41"];
m2_53 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="42-42"];
m2_54 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="42-42"];
m2_56 [cluster="lambda expression", file="Tokenizer.cs", label="Token.Value(t)", span="42-42"];
m2_57 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="42-42"];
m2_60 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="43-43"];
m2_42 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m2_13 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98"];
m2_89 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="value == null", span="102-102"];
m2_95 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="113-113"];
m2_96 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="114-114"];
m2_99 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="119-119"];
m2_101 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(parts[0]);", span="122-122"];
m2_102 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Value(parts[1]);", span="123-123"];
m2_91 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="107-107"];
m2_92 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var text = value.Substring(2)", span="109-109"];
m2_98 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="onError(new BadFormatTokenError(value))", span="118-118"];
m2_90 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''value'');", span="104-104"];
m2_93 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var equalIndex = text.IndexOf('=')", span="110-110"];
m2_100 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var parts = text.Split('=')", span="121-121"];
m2_94 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex <= 0", span="111-111"];
m2_97 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex == 1", span="116-116"];
m2_103 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98"];
m2_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m2_19 [cluster="Unk.Concat", file="Tokenizer.cs", label="Entry Unk.Concat", span=""];
m2_48 [cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs", label="Entry string.EqualsOrdinal(string)", span="34-34"];
m2_39 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m2_104 [cluster="string.IndexOf(char)", file="Tokenizer.cs", label="Entry string.IndexOf(char)", span="0-0"];
m2_43 [cluster="Unk.Select", file="Tokenizer.cs", label="Entry Unk.Select", span=""];
m2_44 [cluster="CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", file="Tokenizer.cs", label="Entry CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", span="69-69"];
m2_0 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m2_1 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="arguments == null", span="15-15"];
m2_5 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="var tokens = from arg in arguments\r\n                         from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new Token[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                         select token", prediction=20, span="20-26"];
m2_6 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="var unkTokens = from t in tokens where t.IsName() && !nameLookup(t.Text) select t", prediction=19, span="28-28"];
m2_2 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''arguments'');", span="15-15"];
m2_3 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="var errors = new List<Error>()", span="17-17"];
m2_4 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Action<Error> onError = e => errors.Add(e)", span="18-18"];
m2_7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="return StatePair.Create(tokens.Where(t => !unkTokens.Contains(t)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", prediction=20, span="30-30"];
m2_8 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m2_29 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m2_30 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="arguments == null", span="37-37"];
m2_32 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="39-39"];
m2_33 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="41-41"];
m2_34 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(t => Token.Value(t))", span="42-42"];
m2_36 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="return tokenizer(arguments);", span="45-45"];
m2_31 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''arguments'');", span="37-37"];
m2_35 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="return tokenizerResult.MapValue(tokens => tokens.Concat(values));", span="43-43"];
m2_37 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m2_24 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m2_83 [cluster="char.IsDigit(char)", file="Tokenizer.cs", label="Entry char.IsDigit(char)", span="0-0"];
m2_10 [cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_18 [cluster="UnknownOptionError.cstr", file="Tokenizer.cs", label="Entry UnknownOptionError.cstr", span=""];
m2_88 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m2_14 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48"];
m2_61 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value == null", span="52-52"];
m2_66 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Value(value);", span="63-63"];
m2_67 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield break;", span="64-64"];
m2_69 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="69-69"];
m2_70 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield break;", span="70-70"];
m2_72 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(first);", span="74-74"];
m2_78 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(n);", span="84-84"];
m2_80 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Value(text.Substring(seen.Count()));", span="93-93"];
m2_63 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="57-57"];
m2_64 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var text = value.Substring(1)", span="59-59"];
m2_68 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value.Length == 2", span="67-67"];
m2_76 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="!seen.Contains(c) && nameLookup(n)", span="81-81"];
m2_62 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''value'');", span="54-54"];
m2_65 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="char.IsDigit(text[0])", span="61-61"];
m2_71 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var first = text.Substring(0, 1)", span="73-73"];
m2_74 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="text.Substring(1)", span="78-78"];
m2_79 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="seen.Count() < text.Length", span="91-91"];
m2_73 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var seen = new List<char> { first[0] }", span="76-76"];
m2_77 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="seen.Add(c)", span="83-83"];
m2_75 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var n = new string(c, 1)", span="80-80"];
m2_81 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48"];
m2_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Tokenizer.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_87 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m2_82 [cluster="string.Substring(int)", file="Tokenizer.cs", label="Entry string.Substring(int)", span="0-0"];
m2_108 [file="Tokenizer.cs", label=errors, span=""];
m2_109 [file="Tokenizer.cs", label=unkTokens, span=""];
m2_110 [file="Tokenizer.cs", label=values, span=""];
m3_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m3_56 [cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="46-46"];
m3_57 [cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                from t in tseq\r\n                select t;", span="50-57"];
m3_58 [cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="46-46"];
m3_16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m3_14 [cluster="Unk.PartitionSequences", file="TokenPartitioner.cs", label="Entry Unk.PartitionSequences", span=""];
m3_83 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="59-59"];
m3_34 [cluster="Unk.IsValue", file="TokenPartitioner.cs", label="Entry Unk.IsValue", span=""];
m3_55 [cluster="CommandLine.Core.Token.IsName()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
m3_11 [cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="37-37"];
m3_48 [cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.Item1 == DescriptorType.Boolean, false)\r\n                   select t;", span="41-43"];
m3_49 [cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="37-37"];
m3_50 [cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m3_12 [cluster="Unk.Where", file="TokenPartitioner.cs", label="Entry Unk.Where", span=""];
m3_19 [cluster="Unk.Create", file="TokenPartitioner.cs", label="Entry Unk.Create", span=""];
m3_13 [cluster="Unk.PartitionScalars", file="TokenPartitioner.cs", label="Entry Unk.PartitionScalars", span=""];
m3_41 [cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", span="88-88"];
m3_108 [cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TokenPartitioner.cs", label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="90-90"];
m3_109 [cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", span="88-88"];
m3_27 [cluster="Unk.Contains", file="TokenPartitioner.cs", label="Entry Unk.Contains", span=""];
m3_93 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m3_105 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="82-82"];
m3_21 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="!switches.Contains(t)", prediction=23, span="21-21"];
m3_20 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="21-21"];
m3_25 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="!scalars.Contains(t)", prediction=24, span="23-23"];
m3_24 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-23"];
m3_29 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="!sequences.Contains(t)", prediction=25, span="25-25"];
m3_28 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="25-25"];
m3_31 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="26-26"];
m3_36 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="!values.Contains(t)", prediction=26, span="27-27"];
m3_35 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="27-27"];
m3_38 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="30-30"];
m3_42 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="31-31"];
m3_45 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="33-33"];
m3_22 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="21-21"];
m3_26 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="23-23"];
m3_30 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="25-25"];
m3_32 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="v.IsValue()", prediction=27, span="26-26"];
m3_33 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="26-26"];
m3_37 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="27-27"];
m3_39 [cluster="lambda expression", file="TokenPartitioner.cs", label="CreateValue(t.Text,''true'')", span="30-30"];
m3_40 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="30-30"];
m3_43 [cluster="lambda expression", file="TokenPartitioner.cs", label="CreateValue(f.Text, s.Text)", span="31-31"];
m3_44 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="31-31"];
m3_46 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Text", span="33-33"];
m3_47 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="33-33"];
m3_52 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="42-42"];
m3_53 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.IsName() && info.Item1 == DescriptorType.Boolean", span="42-42"];
m3_54 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="42-42"];
m3_60 [cluster="lambda expression", file="TokenPartitioner.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="52-55"];
m3_59 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="51-55"];
m3_64 [cluster="lambda expression", file="TokenPartitioner.cs", label="info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }", span="54-54"];
m3_61 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="51-55"];
m3_63 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="53-54"];
m3_65 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="53-54"];
m3_70 [cluster="lambda expression", file="TokenPartitioner.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { } , new Token[] { })\r\n                            : new Token[] {}", span="66-71"];
m3_73 [cluster="lambda expression", file="TokenPartitioner.cs", label="info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { }", span="68-70"];
m3_69 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="65-71"];
m3_81 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Equals(f)", span="69-69"];
m3_71 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="65-71"];
m3_72 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="67-70"];
m3_74 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="67-70"];
m3_80 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="69-69"];
m3_84 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="69-69"];
m3_87 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="69-69"];
m3_82 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="69-69"];
m3_85 [cluster="lambda expression", file="TokenPartitioner.cs", label="v.IsValue()", span="69-69"];
m3_86 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="69-69"];
m3_88 [cluster="lambda expression", file="TokenPartitioner.cs", label=items, span="69-69"];
m3_89 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="69-69"];
m3_95 [cluster="lambda expression", file="TokenPartitioner.cs", label="f.IsName()\r\n                            ? CreateValue(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : CreateValue(string.Empty)", span="81-83"];
m3_94 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="80-83"];
m3_100 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Equals(f)", span="82-82"];
m3_96 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="80-83"];
m3_99 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="82-82"];
m3_102 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="82-82"];
m3_101 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="82-82"];
m3_103 [cluster="lambda expression", file="TokenPartitioner.cs", label="v.IsValue()", span="82-82"];
m3_104 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="82-82"];
m3_106 [cluster="lambda expression", file="TokenPartitioner.cs", label="x.Text", span="82-82"];
m3_107 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="82-82"];
m3_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16"];
m3_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="var switches = PartitionSwitches(tokens, typeLookup)", prediction=23, span="20-20"];
m3_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="var tokensExceptSwitches = tokens.Where(t => !switches.Contains(t))", prediction=29, span="21-21"];
m3_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="var scalars = PartitionScalars(tokensExceptSwitches, typeLookup)", prediction=24, span="22-22"];
m3_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="var sequences = PartitionSequences(tokensExceptSwitchesAndScalars, typeLookup)", prediction=25, span="24-24"];
m3_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="return Tuple.Create(\r\n                    switches.Select(t => CreateValue(t.Text,''true''))\r\n                        .Concat(scalars.Pairwise((f, s) => CreateValue(f.Text, s.Text)))\r\n                        .Concat(SequenceTokensToKeyValuePairEnumerable(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="29-34"];
m3_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="var tokensExceptSwitchesAndScalars = tokensExceptSwitches.Where(t => !scalars.Contains(t))", prediction=32, span="23-23"];
m3_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="var tokensExceptSwitchesAndScalarsAndSeq = tokensExceptSwitchesAndScalars.Where(t => !sequences.Contains(t))", prediction=33, span="25-25"];
m3_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="var values = tokensExceptSwitchesAndScalarsAndSeq.Where(v => v.IsValue())", prediction=26, span="26-26"];
m3_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="var errors = tokensExceptSwitchesAndScalarsAndSeq.Where(t => !values.Contains(t))", prediction=35, span="27-27"];
m3_10 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16"];
m3_78 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m3_75 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m3_17 [cluster="Unk.Concat", file="TokenPartitioner.cs", label="Entry Unk.Concat", span=""];
m3_66 [cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="60-60"];
m3_67 [cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>     \r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { } , new Token[] { })\r\n                            : new Token[] {})\r\n                from t in tseq\r\n                select t;", span="64-73"];
m3_68 [cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="60-60"];
m3_92 [cluster="Unk.Pairwise", file="TokenPartitioner.cs", label="Entry Unk.Pairwise", span=""];
m3_76 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m3_18 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="76-76"];
m3_90 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? CreateValue(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : CreateValue(string.Empty))\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", span="79-85"];
m3_91 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="76-76"];
m3_15 [cluster="Unk.Select", file="TokenPartitioner.cs", label="Entry Unk.Select", span=""];
m3_98 [cluster="Unk.CreateValue", file="TokenPartitioner.cs", label="Entry Unk.CreateValue", span=""];
m3_62 [cluster="CommandLine.Core.Token.IsValue()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.IsValue()", span="77-77"];
m3_110 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m3_77 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="TokenPartitioner.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
m3_97 [cluster="Unk.ToArray", file="TokenPartitioner.cs", label="Entry Unk.ToArray", span=""];
m3_51 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitioner.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103"];
m3_79 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m3_111 [file="TokenPartitioner.cs", label=switches, span=""];
m3_112 [file="TokenPartitioner.cs", label=scalars, span=""];
m3_113 [file="TokenPartitioner.cs", label=sequences, span=""];
m3_114 [file="TokenPartitioner.cs", label=values, span=""];
m3_115 [file="TokenPartitioner.cs", label=t, span=""];
m3_116 [file="TokenPartitioner.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", span=""];
m3_117 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m3_118 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m3_119 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m3_120 [file="TokenPartitioner.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", span=""];
m3_121 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m3_122 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m3_123 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m4_0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m4_1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20"];
m4_2 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="21-25"];
m4_4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Item1.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34"];
m4_3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.GetDescriptorInfo(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31"];
m4_5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m4_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m4_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="16-16"];
m4_13 [cluster="Unk.True", file="TokenPartitionerTests.cs", label="Entry Unk.True", span=""];
m4_17 [cluster="CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m4_12 [cluster="Unk.All", file="TokenPartitionerTests.cs", label="Entry Unk.All", span=""];
m4_22 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m4_15 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.GetDescriptorInfo(name, specs, StringComparer.InvariantCulture)", span="30-30"];
m4_14 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="30-30"];
m4_19 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Item1.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34"];
m4_18 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m4_16 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="30-30"];
m4_20 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m4_23 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34"];
m4_24 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m4_25 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m4_9 [cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m4_11 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16"];
m4_26 [cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m4_21 [cluster="Unk.Any", file="TokenPartitionerTests.cs", label="Entry Unk.Any", span=""];
m4_10 [cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
m4_8 [cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_27 [file="TokenPartitionerTests.cs", label=specs, span=""];
m4_28 [file="TokenPartitionerTests.cs", label=result, span=""];
m4_29 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m0_35 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_36  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_124 -> m0_126  [color=green, key=1, label=expectedResult, style=dashed];
m0_125 -> m0_129  [color=green, key=1, label="lambda expression", style=dashed];
m0_133 -> m0_135  [color=green, key=1, label=expectedResult, style=dashed];
m0_134 -> m0_138  [color=green, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_1 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_114 -> m0_116  [color=green, key=1, label=expectedResult, style=dashed];
m0_115 -> m0_119  [color=green, key=1, label="lambda expression", style=dashed];
m0_90 -> m0_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_90 -> m0_99  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_91 -> m0_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_95 -> m0_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_84  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_83 -> m0_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_83 -> m0_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_43 -> m0_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_44  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_151 -> m0_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_150 -> m0_152  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_64 -> m0_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_63 -> m0_65  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_26 -> m0_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_25 -> m0_27  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_17 -> m0_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_16 -> m0_18  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_143 -> m0_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_142 -> m0_144  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_52 -> m0_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_51 -> m0_53  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_103 -> m0_105  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_104 -> m0_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_73 -> m0_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_72 -> m0_74  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_157 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_158 -> m0_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_158 -> m0_99  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_4 -> m1_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_4 -> m1_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_5 -> m1_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_7 -> m1_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_39  [color=green, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_35  [color=green, key=1, label=options, style=dashed];
m1_35 -> m1_43  [color=green, key=1, label="lambda expression", style=dashed];
m1_52 -> m1_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_52 -> m1_54  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_54 -> m1_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_13 -> m2_91  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_13 -> m2_98  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_92 -> m2_95  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_93 -> m2_97  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
m2_100 -> m2_102  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_5 -> m2_7  [color=green, key=1, label=tokens, style=dashed];
m2_6 -> m2_26  [color=green, key=1, label=unkTokens, style=dashed];
m2_3 -> m2_22  [color=darkseagreen4, key=1, label=errors, style=dashed];
m2_3 -> m2_7  [color=green, key=1, label=errors, style=dashed];
m2_4 -> m2_22  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m2_7 -> m2_25  [color=green, key=1, label="lambda expression", style=dashed];
m2_7 -> m2_7  [color=green, key=1, label=t, style=dashed];
m2_29 -> m2_32  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_29 -> m2_36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_32 -> m2_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_35  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m2_34 -> m2_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_34 -> m2_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_34 -> m2_59  [color=darkseagreen4, key=1, label=values, style=dashed];
m2_35 -> m2_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_14 -> m2_63  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_14 -> m2_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_14 -> m2_76  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m2_64 -> m2_69  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_64 -> m2_74  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_64 -> m2_79  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_64 -> m2_80  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_74 -> m2_76  [color=darkseagreen4, key=1, label=c, style=dashed];
m2_74 -> m2_77  [color=darkseagreen4, key=1, label=c, style=dashed];
m2_73 -> m2_76  [color=darkseagreen4, key=1, label=seen, style=dashed];
m2_73 -> m2_77  [color=darkseagreen4, key=1, label=seen, style=dashed];
m2_73 -> m2_79  [color=darkseagreen4, key=1, label=seen, style=dashed];
m2_73 -> m2_80  [color=darkseagreen4, key=1, label=seen, style=dashed];
m2_75 -> m2_78  [color=darkseagreen4, key=1, label=n, style=dashed];
m2_108 -> m2_22  [color=darkseagreen4, key=1, label=errors, style=dashed];
m2_109 -> m2_26  [color=green, key=1, label=unkTokens, style=dashed];
m2_110 -> m2_59  [color=darkseagreen4, key=1, label=values, style=dashed];
m3_56 -> m3_60  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m3_57 -> m3_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_57 -> m3_57  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m3_48 -> m3_48  [color=darkseagreen4, key=1, label=t, style=dashed];
m3_48 -> m3_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_48 -> m3_53  [color=darkseagreen4, key=1, label=t, style=dashed];
m3_60 -> m3_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_59 -> m3_64  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_70 -> m3_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_73 -> m3_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_73 -> m3_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_73 -> m3_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_69 -> m3_73  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_69 -> m3_81  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_95 -> m3_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_95 -> m3_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_95 -> m3_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_94 -> m3_100  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_1 -> m3_21  [color=green, key=1, label=switches, style=dashed];
m3_1 -> m3_9  [color=green, key=1, label=switches, style=dashed];
m3_2 -> m3_20  [color=green, key=1, label="lambda expression", style=dashed];
m3_3 -> m3_25  [color=green, key=1, label=scalars, style=dashed];
m3_3 -> m3_9  [color=green, key=1, label=scalars, style=dashed];
m3_5 -> m3_29  [color=green, key=1, label=sequences, style=dashed];
m3_5 -> m3_9  [color=green, key=1, label=sequences, style=dashed];
m3_9 -> m3_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_9 -> m3_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_9 -> m3_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_4 -> m3_24  [color=green, key=1, label="lambda expression", style=dashed];
m3_6 -> m3_28  [color=green, key=1, label="lambda expression", style=dashed];
m3_7 -> m3_31  [color=green, key=1, label="lambda expression", style=dashed];
m3_7 -> m3_36  [color=green, key=1, label=values, style=dashed];
m3_7 -> m3_9  [color=green, key=1, label=values, style=dashed];
m3_8 -> m3_35  [color=green, key=1, label="lambda expression", style=dashed];
m3_66 -> m3_70  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_66 -> m3_73  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_67 -> m3_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_67 -> m3_67  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m3_18 -> m3_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_90 -> m3_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_90 -> m3_90  [color=darkseagreen4, key=1, label=t, style=dashed];
m3_111 -> m3_21  [color=green, key=1, label=switches, style=dashed];
m3_112 -> m3_25  [color=green, key=1, label=scalars, style=dashed];
m3_113 -> m3_29  [color=green, key=1, label=sequences, style=dashed];
m3_114 -> m3_36  [color=green, key=1, label=values, style=dashed];
m3_115 -> m3_53  [color=darkseagreen4, key=1, label=t, style=dashed];
m3_116 -> m3_60  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m3_117 -> m3_64  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_118 -> m3_64  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_119 -> m3_70  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_119 -> m3_73  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_120 -> m3_70  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m3_121 -> m3_73  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_121 -> m3_81  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m3_122 -> m3_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_123 -> m3_100  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_1 -> m4_4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m4_2 -> m4_15  [color=darkseagreen4, key=1, label=specs, style=dashed];
m4_4 -> m4_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_3 -> m4_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_3 -> m4_19  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_19 -> m4_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_19 -> m4_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m4_23 -> m4_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m4_27 -> m4_15  [color=darkseagreen4, key=1, label=specs, style=dashed];
m4_28 -> m4_19  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_29 -> m4_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
}
