digraph  {
n298 [label=fakeOptions, span=""];
n299 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
n1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var fakeOptions = new FakeOptions()", span="20-20"];
n2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
n6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
n3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
n13 [cluster="lambda expression", label=fakeOptions, span="27-27"];
n7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
n8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
n4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Assert.True(expectedResult.Equals(result))", span="33-33"];
n9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n12 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
n5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
n10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
n11 [cluster="Unk.True", label="Entry Unk.True", span=""];
n14 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
n15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
n16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
n17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Assert.Equal(expected, result.Value.LongValue)", span="54-54"];
n20 [cluster="lambda expression", label="Entry lambda expression", span="48-48"];
n18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
n19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n21 [cluster="lambda expression", label="new FakeOptions()", span="48-48"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="48-48"];
n23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
n24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74"];
n25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77"];
n27 [cluster="lambda expression", label="Entry lambda expression", span="71-71"];
n26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
n28 [cluster="lambda expression", label="new FakeOptionsWithDouble()", span="71-71"];
n29 [cluster="lambda expression", label="Exit lambda expression", span="71-71"];
n30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
n31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
n32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=red, community=0, label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98"];
n33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101"];
n36 [cluster="lambda expression", label="Entry lambda expression", span="95-95"];
n34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
n35 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
n37 [cluster="lambda expression", label="new FakeOptionsWithSequence()", span="95-95"];
n38 [cluster="lambda expression", label="Exit lambda expression", span="95-95"];
n39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
n40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
n41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120"];
n42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123"];
n44 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
n43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
n45 [cluster="lambda expression", label="new FakeOptions()", span="117-117"];
n46 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
n47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
n48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
n49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
n51 [cluster="lambda expression", label="Entry lambda expression", span="140-140"];
n50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
n52 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
n53 [cluster="lambda expression", label="Exit lambda expression", span="140-140"];
n54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
n55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
n56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
n57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
n59 [cluster="lambda expression", label="Entry lambda expression", span="162-162"];
n58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
n60 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
n61 [cluster="lambda expression", label="Exit lambda expression", span="162-162"];
n62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
n63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
n64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
n65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
n68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
n69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
n66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187"];
n70 [cluster="lambda expression", label="Entry lambda expression", span="181-181"];
n67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
n71 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
n72 [cluster="lambda expression", label="Exit lambda expression", span="181-181"];
n73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
n75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
n78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
n76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206"];
n79 [cluster="lambda expression", label="Entry lambda expression", span="200-200"];
n77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n80 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
n81 [cluster="lambda expression", label="Exit lambda expression", span="200-200"];
n82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
n83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
n84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
n85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
n86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
n88 [cluster="lambda expression", label="Entry lambda expression", span="220-220"];
n87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
n89 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
n90 [cluster="lambda expression", label="Exit lambda expression", span="220-220"];
n91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
n92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
n93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
n94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
n96 [cluster="lambda expression", label="Entry lambda expression", span="239-239"];
n95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
n97 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
n98 [cluster="lambda expression", label="Exit lambda expression", span="239-239"];
n99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
n100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
n101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
n102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
n105 [cluster="lambda expression", label="Entry lambda expression", span="263-263"];
n103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
n104 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
n106 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="263-263"];
n107 [cluster="lambda expression", label="Exit lambda expression", span="263-263"];
n108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
n109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
n110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
n111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
n114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
n112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="282-282"];
n113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
n116 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="282-282"];
n117 [cluster="lambda expression", label="Exit lambda expression", span="282-282"];
n118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
n119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
n120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
n121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
n123 [cluster="lambda expression", label="Entry lambda expression", span="301-301"];
n122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
n124 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="301-301"];
n125 [cluster="lambda expression", label="Exit lambda expression", span="301-301"];
n126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
n127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
n128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
n129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
n131 [cluster="lambda expression", label="Entry lambda expression", span="320-320"];
n130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
n132 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="320-320"];
n133 [cluster="lambda expression", label="Exit lambda expression", span="320-320"];
n134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
n135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
n136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
n139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
n137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
n140 [cluster="lambda expression", label="Entry lambda expression", span="345-345"];
n138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
n141 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="345-345"];
n142 [cluster="lambda expression", label="Exit lambda expression", span="345-345"];
n143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
n144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
n145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
n147 [cluster="lambda expression", label="Entry lambda expression", span="368-368"];
n146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
n148 [cluster="lambda expression", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
n149 [cluster="lambda expression", label="Exit lambda expression", span="368-368"];
n150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
n151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
n152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
n153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
n155 [cluster="lambda expression", label="Entry lambda expression", span="390-390"];
n154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
n156 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
n157 [cluster="lambda expression", label="Exit lambda expression", span="390-390"];
n158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
n159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
n160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
n161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
n163 [cluster="lambda expression", label="Entry lambda expression", span="412-412"];
n162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
n164 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
n165 [cluster="lambda expression", label="Exit lambda expression", span="412-412"];
n166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
n167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
n168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
n170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
n169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
n172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
n173 [cluster="lambda expression", label="Entry lambda expression", span="441-441"];
n176 [cluster="lambda expression", label="Entry lambda expression", span="442-444"];
n171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
n174 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="441-441"];
n175 [cluster="lambda expression", label="Exit lambda expression", span="441-441"];
n177 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
n181 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
n185 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
n178 [cluster="lambda expression", label="Exit lambda expression", span="442-444"];
n179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
n180 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
n182 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
n183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
n184 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
n186 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
n187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
n188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
n189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
n190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
n193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
n191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
n194 [cluster="lambda expression", label="Entry lambda expression", span="467-467"];
n192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
n195 [cluster="lambda expression", label="new FakeOptionsWithSets()", span="467-467"];
n196 [cluster="lambda expression", label="Exit lambda expression", span="467-467"];
n197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
n198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
n199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
n200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
n203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
n201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
n204 [cluster="lambda expression", label="Entry lambda expression", span="487-487"];
n202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
n205 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
n206 [cluster="lambda expression", label="Exit lambda expression", span="487-487"];
n207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
n208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
n209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
n210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
n212 [cluster="lambda expression", label="Entry lambda expression", span="507-507"];
n211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
n213 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
n214 [cluster="lambda expression", label="Exit lambda expression", span="507-507"];
n215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
n216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
n217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
n220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
n218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
n221 [cluster="lambda expression", label="Entry lambda expression", span="527-527"];
n219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
n222 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
n223 [cluster="lambda expression", label="Exit lambda expression", span="527-527"];
n224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
n225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
n226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
n227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
n229 [cluster="lambda expression", label="Entry lambda expression", span="545-545"];
n228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
n230 [cluster="lambda expression", label="new FakeOptionWithRequired()", span="545-545"];
n231 [cluster="lambda expression", label="Exit lambda expression", span="545-545"];
n232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
n233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
n234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
n235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
n236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
n238 [cluster="lambda expression", label="Entry lambda expression", span="564-564"];
n237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
n239 [cluster="lambda expression", label="new FakeOptions()", span="564-564"];
n240 [cluster="lambda expression", label="Exit lambda expression", span="564-564"];
n241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
n242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
n243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
n246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
n244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
n247 [cluster="lambda expression", label="Entry lambda expression", span="583-583"];
n245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
n248 [cluster="lambda expression", label="new FakeOptions()", span="583-583"];
n249 [cluster="lambda expression", label="Exit lambda expression", span="583-583"];
n250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
n251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
n252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
n253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
n255 [cluster="lambda expression", label="Entry lambda expression", span="602-602"];
n254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
n256 [cluster="lambda expression", label="new FakeOptions()", span="602-602"];
n257 [cluster="lambda expression", label="Exit lambda expression", span="602-602"];
n258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
n259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
n260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
n261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
n263 [cluster="lambda expression", label="Entry lambda expression", span="621-621"];
n262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
n264 [cluster="lambda expression", label="new FakeOptions()", span="621-621"];
n265 [cluster="lambda expression", label="Exit lambda expression", span="621-621"];
n266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
n267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
n268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
n271 [cluster="lambda expression", label="Entry lambda expression", span="641-641"];
n269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
n270 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
n272 [cluster="lambda expression", label="new FakeOptions()", span="641-641"];
n273 [cluster="lambda expression", label="Exit lambda expression", span="641-641"];
n274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
n275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
n276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
n277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
n279 [cluster="lambda expression", label="Entry lambda expression", span="660-660"];
n278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
n280 [cluster="lambda expression", label="new FakeOptionWithRequiredValue()", span="660-660"];
n281 [cluster="lambda expression", label="Exit lambda expression", span="660-660"];
n282 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", span="4-4"];
n283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
n284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="678-682"];
n285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="expected.ShouldBeEquivalentTo(result.Value)", span="685-685"];
n287 [cluster="lambda expression", label="Entry lambda expression", span="679-679"];
n286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
n288 [cluster="lambda expression", label="new FakeOptionWithRequiredValue()", span="679-679"];
n289 [cluster="lambda expression", label="Exit lambda expression", span="679-679"];
n290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
n291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="697-701"];
n292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="expected.ShouldBeEquivalentTo(result.Value)", span="704-704"];
n294 [cluster="lambda expression", label="Entry lambda expression", span="698-698"];
n293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
n295 [cluster="lambda expression", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="698-698"];
n296 [cluster="lambda expression", label="Exit lambda expression", span="698-698"];
n297 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m0_47 [cluster="System.Nullable<T>.ToString()", file="Program.cs", label="Entry System.Nullable<T>.ToString()", span="0-0"];
m0_49 [cluster="System.Console.WriteLine()", file="Program.cs", label="Entry System.Console.WriteLine()", span="0-0"];
m0_48 [cluster="System.Console.WriteLine(string, object)", file="Program.cs", label="Entry System.Console.WriteLine(string, object)", span="0-0"];
m0_20 [cluster="System.Environment.Exit(int)", file="Program.cs", label="Entry System.Environment.Exit(int)", span="0-0"];
m0_7 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)", file="Program.cs", label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)", span="254-254"];
m0_59 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string)", file="Program.cs", label="Entry CommandLine.Text.HeadingInfo.WriteMessage(string)", span="124-124"];
m0_4 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="99-99"];
m0_5 [cluster="lambda expression", color=red, community=0, file="Program.cs", label="0: HelpText.DefaultParsingErrorsHandler(this, current)", span="99-99"];
m0_6 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="99-99"];
m0_3 [cluster="CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.HandleParsingErrorsDelegate, bool)", file="Program.cs", label="Entry CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.HandleParsingErrorsDelegate, bool)", span="215-215"];
m0_52 [cluster="System.Enum.ToString()", file="Program.cs", label="Entry System.Enum.ToString()", span="0-0"];
m0_55 [cluster="System.Text.StringBuilder.Remove(int, int)", file="Program.cs", label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0"];
m0_17 [cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="Program.cs", label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="63-63"];
m0_57 [cluster="string.IsNullOrEmpty(string)", file="Program.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m0_51 [cluster="string.ToLowerInvariant()", file="Program.cs", label="Entry string.ToLowerInvariant()", span="0-0"];
m0_58 [cluster="string.Format(string, object)", file="Program.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_18 [cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", file="Program.cs", label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", span="73-73"];
m0_56 [cluster="System.Text.StringBuilder.ToString()", file="Program.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m0_54 [cluster="System.Text.StringBuilder.Append(string)", file="Program.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m0_0 [cluster="SampleApp.Program.Options.GetUsage()", file="Program.cs", label="Entry SampleApp.Program.Options.GetUsage()", span="97-97"];
m0_1 [cluster="SampleApp.Program.Options.GetUsage()", color=red, community=0, file="Program.cs", label="0: return HelpText.AutoBuild(this, (HelpText current) => HelpText.DefaultParsingErrorsHandler(this, current));", span="99-99"];
m0_2 [cluster="SampleApp.Program.Options.GetUsage()", file="Program.cs", label="Exit SampleApp.Program.Options.GetUsage()", span="97-97"];
m0_46 [cluster="System.Console.WriteLine(string)", file="Program.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m0_50 [cluster="bool.ToString()", file="Program.cs", label="Entry bool.ToString()", span="0-0"];
m0_16 [cluster="SampleApp.Program.Options.Options()", file="Program.cs", label="Entry SampleApp.Program.Options.Options()", span="55-55"];
m0_21 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Entry SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", span="174-174"];
m0_22 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="options.VerboseLevel == null", span="176-176"];
m0_24 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(''verbose [on]: {0}'', (options.VerboseLevel < 0 || options.VerboseLevel > 2) ? ''#invalid value#'' : options.VerboseLevel.ToString())", span="179-179"];
m0_26 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(''input file: {0} ...'', options.InputFile)", span="181-181"];
m0_27 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="options.DefinitionFiles", span="182-182"];
m0_29 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(''  start offset: {0}'', options.StartOffset)", span="186-186"];
m0_30 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(''  tabular data computation: {0}'', options.Calculate.ToString().ToLowerInvariant())", span="187-187"];
m0_31 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(''  on errors: {0}'', options.IgnoreErrors ? ''continue'' : ''stop processing'')", span="188-188"];
m0_32 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(''  optimize for: {0}'', options.Optimization.ToString().ToLowerInvariant())", span="189-189"];
m0_33 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="options.AllowedOperators != null", span="190-190"];
m0_36 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="options.AllowedOperators", span="194-194"];
m0_41 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="!string.IsNullOrEmpty(options.OutputFile)", span="202-202"];
m0_42 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="_headingInfo.WriteMessage(string.Format(''writing elaborated data: {0} ...'', options.OutputFile))", span="203-203"];
m0_23 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(''verbose [off]'')", span="177-177"];
m0_25 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine()", span="180-180"];
m0_28 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(''  using definition file: {0}'', defFile)", span="184-184"];
m0_34 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="var builder = new StringBuilder()", span="192-192"];
m0_40 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine()", span="201-201"];
m0_35 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="builder.Append(''  allowed operators: '')", span="193-193"];
m0_37 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="builder.Append(op)", span="196-196"];
m0_38 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="builder.Append('', '')", span="197-197"];
m0_39 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(builder.Remove(builder.Length - 2, 2).ToString())", span="199-199"];
m0_43 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="_headingInfo.WriteMessage(''elaborated data:'')", span="206-206"];
m0_44 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Console.WriteLine(''[...]'')", span="207-207"];
m0_45 [cluster="SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", file="Program.cs", label="Exit SampleApp.Program.DoCoreTask(SampleApp.Program.Options)", span="174-174"];
m0_53 [cluster="System.Text.StringBuilder.StringBuilder()", file="Program.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m0_19 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", file="Program.cs", label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object)", span="87-87"];
m0_8 [cluster="SampleApp.Program.Main(string[])", file="Program.cs", label="Entry SampleApp.Program.Main(string[])", span="160-160"];
m0_9 [cluster="SampleApp.Program.Main(string[])", file="Program.cs", label="var options = new Options()", span="165-165"];
m0_11 [cluster="SampleApp.Program.Main(string[])", file="Program.cs", label="!parser.ParseArguments(args, options)", span="167-167"];
m0_10 [cluster="SampleApp.Program.Main(string[])", file="Program.cs", label="var parser = new CommandLineParser(new CommandLineParserSettings(Console.Error))", span="166-166"];
m0_13 [cluster="SampleApp.Program.Main(string[])", file="Program.cs", label="DoCoreTask(options)", span="170-170"];
m0_12 [cluster="SampleApp.Program.Main(string[])", file="Program.cs", label="Environment.Exit(1)", span="168-168"];
m0_14 [cluster="SampleApp.Program.Main(string[])", file="Program.cs", label="Environment.Exit(0)", span="171-171"];
m0_15 [cluster="SampleApp.Program.Main(string[])", file="Program.cs", label="Exit SampleApp.Program.Main(string[])", span="160-160"];
m0_60 [file="Program.cs", label="SampleApp.Program.Options", span=""];
m1_4 [cluster="lambda expression", file="Program.Options.cs", label="Entry lambda expression", span="93-93"];
m1_5 [cluster="lambda expression", color=green, community=0, file="Program.Options.cs", label="0: HelpText.DefaultParsingErrorsHandler(this, current)", span="93-93"];
m1_6 [cluster="lambda expression", file="Program.Options.cs", label="Exit lambda expression", span="93-93"];
m1_0 [cluster="CommandLine.Demo.Program.Options.GetUsage()", file="Program.Options.cs", label="Entry CommandLine.Demo.Program.Options.GetUsage()", span="91-91"];
m1_1 [cluster="CommandLine.Demo.Program.Options.GetUsage()", color=green, community=0, file="Program.Options.cs", label="0: return HelpText.AutoBuild(this, (HelpText current) => HelpText.DefaultParsingErrorsHandler(this, current));", span="93-93"];
m1_2 [cluster="CommandLine.Demo.Program.Options.GetUsage()", file="Program.Options.cs", label="Exit CommandLine.Demo.Program.Options.GetUsage()", span="91-91"];
m1_3 [cluster="CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.HandleParsingErrorsDelegate, bool)", file="Program.Options.cs", label="Entry CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.HandleParsingErrorsDelegate, bool)", span="215-215"];
m1_7 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)", file="Program.Options.cs", label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)", span="254-254"];
m1_8 [file="Program.Options.cs", label="CommandLine.Demo.Program.Options", span=""];
m5_95 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
m5_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m5_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="VerbsHelpTextFixture.cs", label="var expectedResult = -.123D", span="78-78"];
m5_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''-0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="81-85"];
m5_36 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="VerbsHelpTextFixture.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="88-88"];
m5_37 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m5_11 [cluster="Unk.True", file="VerbsHelpTextFixture.cs", label="Entry Unk.True", span=""];
m5_157 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="337-337"];
m5_158 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="340-340"];
m5_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347"];
m5_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="VerbsHelpTextFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="350-350"];
m5_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="337-337"];
m5_144 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m5_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="356-356"];
m5_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="359-359"];
m5_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="362-366"];
m5_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="369-369"];
m5_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="356-356"];
m5_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="279-279"];
m5_132 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="281-284"];
m5_133 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="286-290"];
m5_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="VerbsHelpTextFixture.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="293-293"];
m5_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="279-279"];
m5_57 [cluster="Unk.AllProperties", file="VerbsHelpTextFixture.cs", label="Entry Unk.AllProperties", span=""];
m5_110 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="10-10"];
m5_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m5_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="VerbsHelpTextFixture.cs", label="var fakeOptions = new FakeOptions()", span="18-18"];
m5_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="VerbsHelpTextFixture.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21"];
m5_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28"];
m5_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="VerbsHelpTextFixture.cs", label="Assert.True(expectedResult.Equals(result))", span="31-31"];
m5_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m5_148 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="318-318"];
m5_149 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="321-321"];
m5_150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="324-328"];
m5_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="VerbsHelpTextFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="331-331"];
m5_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="318-318"];
m5_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
m5_162 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m5_188 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="401-401"];
m5_13 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label=fakeOptions, span="25-25"];
m5_12 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="25-25"];
m5_14 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="25-25"];
m5_21 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="44-44"];
m5_22 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptions()", span="44-44"];
m5_23 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="44-44"];
m5_29 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="63-63"];
m5_30 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionsWithDouble()", span="63-63"];
m5_31 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="63-63"];
m5_38 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="82-82"];
m5_39 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionsWithDouble()", span="82-82"];
m5_40 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="82-82"];
m5_47 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="101-101"];
m5_48 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptions()", span="101-101"];
m5_49 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="101-101"];
m5_59 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="123-123"];
m5_60 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionsWithEnum()", span="123-123"];
m5_61 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="123-123"];
m5_68 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="148-148"];
m5_69 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionsWithValues()", span="148-148"];
m5_70 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="148-148"];
m5_77 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="170-170"];
m5_78 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="170-170"];
m5_79 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="170-170"];
m5_86 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="192-192"];
m5_87 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="192-192"];
m5_88 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="192-192"];
m5_96 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="221-221"];
m5_99 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="222-224"];
m5_97 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionsWithValues()", span="221-221"];
m5_98 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="221-221"];
m5_100 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="223-224"];
m5_104 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="224-224"];
m5_108 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="224-224"];
m5_101 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="222-224"];
m5_103 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="224-224"];
m5_105 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="224-224"];
m5_107 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="224-224"];
m5_109 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="224-224"];
m5_118 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="247-247"];
m5_119 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionsWithSets()", span="247-247"];
m5_120 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="247-247"];
m5_128 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="267-267"];
m5_129 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionWithRequiredAndSet()", span="267-267"];
m5_130 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="267-267"];
m5_136 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="287-287"];
m5_137 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionWithRequiredAndSet()", span="287-287"];
m5_138 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="287-287"];
m5_145 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="307-307"];
m5_146 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionWithRequiredAndSet()", span="307-307"];
m5_147 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="307-307"];
m5_153 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="325-325"];
m5_154 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptionWithRequired()", span="325-325"];
m5_155 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="325-325"];
m5_163 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="344-344"];
m5_164 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptions()", span="344-344"];
m5_165 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="344-344"];
m5_172 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="363-363"];
m5_173 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptions()", span="363-363"];
m5_174 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="363-363"];
m5_180 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Entry lambda expression", span="382-382"];
m5_181 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptions()", span="382-382"];
m5_182 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="382-382"];
m5_189 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="new FakeOptions()", span="401-401"];
m5_190 [cluster="lambda expression", file="VerbsHelpTextFixture.cs", label="Exit lambda expression", span="401-401"];
m5_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="298-298"];
m5_140 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="300-304"];
m5_141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="306-310"];
m5_142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="VerbsHelpTextFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="313-313"];
m5_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="298-298"];
m5_46 [cluster="Unk.SequenceEqual", file="VerbsHelpTextFixture.cs", label="Entry Unk.SequenceEqual", span=""];
m5_89 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="207-207"];
m5_90 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="210-216"];
m5_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="VerbsHelpTextFixture.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="217-217"];
m5_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="VerbsHelpTextFixture.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="230-230"];
m5_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="220-227"];
m5_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="207-207"];
m5_80 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="182-182"];
m5_81 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n                {\r\n                    LongSequence = new[] { 1L, 1234L, 59678L }\r\n                }", span="185-188"];
m5_82 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''--long-seq'', ''1;1234;59678'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="191-195"];
m5_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="VerbsHelpTextFixture.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="198-198"];
m5_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator()", span="182-182"];
m5_183 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="394-394"];
m5_184 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="397-397"];
m5_185 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="400-404"];
m5_186 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="407-407"];
m5_187 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="394-394"];
m5_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
m5_32 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="7-7"];
m5_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="14-14"];
m5_62 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135"];
m5_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="138-144"];
m5_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="147-151"];
m5_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="VerbsHelpTextFixture.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="154-154"];
m5_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135"];
m5_127 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="2-2"];
m5_171 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m5_85 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="7-7"];
m5_106 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m5_102 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m5_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="259-259"];
m5_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="261-264"];
m5_124 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="266-270"];
m5_125 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="VerbsHelpTextFixture.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="273-273"];
m5_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="259-259"];
m5_121 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m5_116 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m5_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="236-236"];
m5_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="239-243"];
m5_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="246-250"];
m5_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="VerbsHelpTextFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="253-253"];
m5_115 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="236-236"];
m5_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m5_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="VerbsHelpTextFixture.cs", label="var expectedResult = .123D", span="59-59"];
m5_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="62-66"];
m5_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="VerbsHelpTextFixture.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="69-69"];
m5_28 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m5_156 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m5_58 [cluster="Unk.EqualTo", file="VerbsHelpTextFixture.cs", label="Entry Unk.EqualTo", span=""];
m5_117 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m5_56 [cluster="Unk.ShouldHave", file="VerbsHelpTextFixture.cs", label="Entry Unk.ShouldHave", span=""];
m5_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m5_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37"];
m5_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="VerbsHelpTextFixture.cs", label="var expectedResult = -123", span="40-40"];
m5_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="43-47"];
m5_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="VerbsHelpTextFixture.cs", label="Assert.Equal(expectedResult, result.Value.LongValue)", span="50-50"];
m5_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37"];
m5_175 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="375-375"];
m5_176 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="378-378"];
m5_177 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="381-385"];
m5_178 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="388-388"];
m5_179 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="375-375"];
m5_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m5_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="116-119"];
m5_52 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="122-126"];
m5_53 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="VerbsHelpTextFixture.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="129-129"];
m5_54 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m5_67 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m5_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m5_20 [cluster="Unk.Equal", file="VerbsHelpTextFixture.cs", label="Entry Unk.Equal", span=""];
m5_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m5_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new[] { 10, 20, 30, 40 }", span="97-97"];
m5_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-i'', ''10'', ''20'', ''30'', ''40'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="100-104"];
m5_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="VerbsHelpTextFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="107-107"];
m5_45 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m5_71 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m5_72 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="VerbsHelpTextFixture.cs", label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="163-166"];
m5_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="VerbsHelpTextFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="169-173"];
m5_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="VerbsHelpTextFixture.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="176-176"];
m5_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="VerbsHelpTextFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m5_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="VerbsHelpTextFixture.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m5_191 [file="VerbsHelpTextFixture.cs", label=fakeOptions, span=""];
m5_192 [file="VerbsHelpTextFixture.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n298 -> n13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
n299 -> n181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n299 -> n185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n6  [key=2, style=dotted];
n1 -> n3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
n1 -> n13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=2, style=dotted];
n2 -> n4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n3 -> n12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n13 -> n14  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n4 -> n11  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n5 -> n0  [color=blue, key=0, style=bold];
n14 -> n12  [color=blue, key=0, style=bold];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [color=darkseagreen4, key=1, label=long, style=dashed];
n16 -> n17  [key=0, style=solid];
n16 -> n9  [key=2, style=dotted];
n16 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n18 -> n15  [color=blue, key=0, style=bold];
n21 -> n22  [key=0, style=solid];
n21 -> n6  [key=2, style=dotted];
n22 -> n20  [color=blue, key=0, style=bold];
n23 -> n24  [key=0, style=solid];
n23 -> n25  [color=darkseagreen4, key=1, label=double, style=dashed];
n24 -> n25  [key=0, style=solid];
n24 -> n9  [key=2, style=dotted];
n24 -> n27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n25 -> n26  [key=0, style=solid];
n25 -> n19  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n26 -> n23  [color=blue, key=0, style=bold];
n28 -> n29  [key=0, style=solid];
n28 -> n30  [key=2, style=dotted];
n29 -> n27  [color=blue, key=0, style=bold];
n31 -> n32  [color=red, key=0, style=solid];
n31 -> n33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n32 -> n33  [color=red, key=0, style=solid];
n32 -> n9  [color=red, key=2, style=dotted];
n32 -> n36  [color=red, key=1, label="lambda expression", style=dashed];
n33 -> n34  [key=0, style=solid];
n33 -> n35  [key=2, style=dotted];
n33 -> n11  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n34 -> n31  [color=blue, key=0, style=bold];
n37 -> n38  [key=0, style=solid];
n37 -> n39  [key=2, style=dotted];
n38 -> n36  [color=blue, key=0, style=bold];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n41 -> n42  [key=0, style=solid];
n41 -> n9  [key=2, style=dotted];
n41 -> n44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n42 -> n43  [key=0, style=solid];
n42 -> n35  [key=2, style=dotted];
n42 -> n11  [key=2, style=dotted];
n44 -> n45  [key=0, style=solid];
n43 -> n40  [color=blue, key=0, style=bold];
n45 -> n46  [key=0, style=solid];
n45 -> n6  [key=2, style=dotted];
n46 -> n44  [color=blue, key=0, style=bold];
n47 -> n48  [key=0, style=solid];
n47 -> n49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n48 -> n49  [key=0, style=solid];
n48 -> n9  [key=2, style=dotted];
n48 -> n51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n49 -> n50  [key=0, style=solid];
n49 -> n35  [key=2, style=dotted];
n49 -> n11  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n50 -> n47  [color=blue, key=0, style=bold];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=2, style=dotted];
n53 -> n51  [color=blue, key=0, style=bold];
n55 -> n56  [key=0, style=solid];
n55 -> n57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n56 -> n57  [key=0, style=solid];
n56 -> n9  [key=2, style=dotted];
n56 -> n59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n57 -> n58  [key=0, style=solid];
n57 -> n35  [key=2, style=dotted];
n57 -> n11  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n58 -> n55  [color=blue, key=0, style=bold];
n60 -> n61  [key=0, style=solid];
n60 -> n62  [key=2, style=dotted];
n61 -> n59  [color=blue, key=0, style=bold];
n63 -> n64  [key=0, style=solid];
n64 -> n65  [key=0, style=solid];
n64 -> n68  [key=2, style=dotted];
n64 -> n69  [key=2, style=dotted];
n64 -> n66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n65 -> n66  [key=0, style=solid];
n65 -> n9  [key=2, style=dotted];
n65 -> n70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n66 -> n67  [key=0, style=solid];
n66 -> n35  [key=2, style=dotted];
n66 -> n11  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n67 -> n63  [color=blue, key=0, style=bold];
n71 -> n72  [key=0, style=solid];
n71 -> n54  [key=2, style=dotted];
n72 -> n70  [color=blue, key=0, style=bold];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n78  [key=2, style=dotted];
n74 -> n76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n75 -> n76  [key=0, style=solid];
n75 -> n9  [key=2, style=dotted];
n75 -> n79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n76 -> n77  [key=0, style=solid];
n76 -> n35  [key=2, style=dotted];
n76 -> n11  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n77 -> n73  [color=blue, key=0, style=bold];
n80 -> n81  [key=0, style=solid];
n80 -> n82  [key=2, style=dotted];
n81 -> n79  [color=blue, key=0, style=bold];
n83 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n78  [key=2, style=dotted];
n84 -> n69  [key=2, style=dotted];
n84 -> n86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n85 -> n86  [key=0, style=solid];
n85 -> n9  [key=2, style=dotted];
n85 -> n88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n86 -> n87  [key=0, style=solid];
n86 -> n35  [key=2, style=dotted];
n86 -> n11  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n87 -> n83  [color=blue, key=0, style=bold];
n89 -> n90  [key=0, style=solid];
n89 -> n62  [key=2, style=dotted];
n90 -> n88  [color=blue, key=0, style=bold];
n91 -> n92  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n92 -> n78  [key=2, style=dotted];
n92 -> n94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n93 -> n94  [key=0, style=solid];
n93 -> n9  [key=2, style=dotted];
n93 -> n96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n94 -> n95  [key=0, style=solid];
n94 -> n35  [key=2, style=dotted];
n94 -> n11  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n95 -> n91  [color=blue, key=0, style=bold];
n97 -> n98  [key=0, style=solid];
n97 -> n99  [key=2, style=dotted];
n98 -> n96  [color=blue, key=0, style=bold];
n100 -> n101  [key=0, style=solid];
n100 -> n102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n101 -> n102  [key=0, style=solid];
n101 -> n9  [key=2, style=dotted];
n101 -> n105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n102 -> n103  [key=0, style=solid];
n102 -> n104  [key=2, style=dotted];
n102 -> n102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n105 -> n106  [key=0, style=solid];
n103 -> n100  [color=blue, key=0, style=bold];
n106 -> n107  [key=0, style=solid];
n106 -> n108  [key=2, style=dotted];
n107 -> n105  [color=blue, key=0, style=bold];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n114  [key=2, style=dotted];
n110 -> n69  [key=2, style=dotted];
n110 -> n112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n111 -> n112  [key=0, style=solid];
n111 -> n9  [key=2, style=dotted];
n111 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n112 -> n113  [key=0, style=solid];
n112 -> n35  [key=2, style=dotted];
n112 -> n11  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n113 -> n109  [color=blue, key=0, style=bold];
n116 -> n117  [key=0, style=solid];
n116 -> n108  [key=2, style=dotted];
n117 -> n115  [color=blue, key=0, style=bold];
n118 -> n119  [key=0, style=solid];
n119 -> n120  [key=0, style=solid];
n119 -> n114  [key=2, style=dotted];
n119 -> n69  [key=2, style=dotted];
n119 -> n121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n120 -> n121  [key=0, style=solid];
n120 -> n9  [key=2, style=dotted];
n120 -> n123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n121 -> n122  [key=0, style=solid];
n121 -> n35  [key=2, style=dotted];
n121 -> n11  [key=2, style=dotted];
n123 -> n124  [key=0, style=solid];
n122 -> n118  [color=blue, key=0, style=bold];
n124 -> n125  [key=0, style=solid];
n124 -> n108  [key=2, style=dotted];
n125 -> n123  [color=blue, key=0, style=bold];
n126 -> n127  [key=0, style=solid];
n127 -> n128  [key=0, style=solid];
n127 -> n114  [key=2, style=dotted];
n127 -> n69  [key=2, style=dotted];
n127 -> n129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n128 -> n129  [key=0, style=solid];
n128 -> n9  [key=2, style=dotted];
n128 -> n131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n129 -> n130  [key=0, style=solid];
n129 -> n35  [key=2, style=dotted];
n129 -> n11  [key=2, style=dotted];
n131 -> n132  [key=0, style=solid];
n130 -> n126  [color=blue, key=0, style=bold];
n132 -> n133  [key=0, style=solid];
n132 -> n108  [key=2, style=dotted];
n133 -> n131  [color=blue, key=0, style=bold];
n134 -> n135  [key=0, style=solid];
n135 -> n136  [key=0, style=solid];
n135 -> n139  [key=2, style=dotted];
n135 -> n137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n136 -> n137  [key=0, style=solid];
n136 -> n9  [key=2, style=dotted];
n136 -> n140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n137 -> n138  [key=0, style=solid];
n137 -> n104  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n138 -> n134  [color=blue, key=0, style=bold];
n141 -> n142  [key=0, style=solid];
n141 -> n139  [key=2, style=dotted];
n142 -> n140  [color=blue, key=0, style=bold];
n143 -> n144  [key=0, style=solid];
n143 -> n145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n144 -> n145  [key=0, style=solid];
n144 -> n9  [key=2, style=dotted];
n144 -> n147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n145 -> n146  [key=0, style=solid];
n145 -> n104  [key=2, style=dotted];
n147 -> n148  [key=0, style=solid];
n146 -> n143  [color=blue, key=0, style=bold];
n148 -> n149  [key=0, style=solid];
n148 -> n150  [key=2, style=dotted];
n149 -> n147  [color=blue, key=0, style=bold];
n151 -> n152  [key=0, style=solid];
n151 -> n153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n152 -> n153  [key=0, style=solid];
n152 -> n9  [key=2, style=dotted];
n152 -> n155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n153 -> n154  [key=0, style=solid];
n153 -> n104  [key=2, style=dotted];
n155 -> n156  [key=0, style=solid];
n154 -> n151  [color=blue, key=0, style=bold];
n156 -> n157  [key=0, style=solid];
n156 -> n158  [key=2, style=dotted];
n157 -> n155  [color=blue, key=0, style=bold];
n159 -> n160  [key=0, style=solid];
n159 -> n161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n160 -> n161  [key=0, style=solid];
n160 -> n9  [key=2, style=dotted];
n160 -> n163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n161 -> n162  [key=0, style=solid];
n161 -> n104  [key=2, style=dotted];
n163 -> n164  [key=0, style=solid];
n162 -> n159  [color=blue, key=0, style=bold];
n164 -> n165  [key=0, style=solid];
n164 -> n158  [key=2, style=dotted];
n165 -> n163  [color=blue, key=0, style=bold];
n166 -> n167  [key=0, style=solid];
n167 -> n168  [key=0, style=solid];
n167 -> n139  [key=2, style=dotted];
n167 -> n170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n168 -> n169  [key=0, style=solid];
n170 -> n171  [key=0, style=solid];
n170 -> n104  [key=2, style=dotted];
n169 -> n170  [key=0, style=solid];
n169 -> n172  [key=2, style=dotted];
n169 -> n173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n169 -> n176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n173 -> n174  [key=0, style=solid];
n176 -> n177  [key=0, style=solid];
n176 -> n181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n176 -> n185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n171 -> n166  [color=blue, key=0, style=bold];
n174 -> n175  [key=0, style=solid];
n174 -> n139  [key=2, style=dotted];
n175 -> n173  [color=blue, key=0, style=bold];
n177 -> n178  [key=0, style=solid];
n177 -> n179  [key=2, style=dotted];
n177 -> n180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n181 -> n182  [key=0, style=solid];
n181 -> n183  [key=2, style=dotted];
n181 -> n184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n185 -> n186  [key=0, style=solid];
n185 -> n187  [key=2, style=dotted];
n178 -> n176  [color=blue, key=0, style=bold];
n180 -> n181  [key=0, style=solid];
n182 -> n180  [color=blue, key=0, style=bold];
n184 -> n185  [key=0, style=solid];
n186 -> n184  [color=blue, key=0, style=bold];
n188 -> n189  [key=0, style=solid];
n189 -> n190  [key=0, style=solid];
n189 -> n193  [key=2, style=dotted];
n189 -> n69  [key=2, style=dotted];
n189 -> n191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n190 -> n191  [key=0, style=solid];
n190 -> n9  [key=2, style=dotted];
n190 -> n194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n191 -> n192  [key=0, style=solid];
n191 -> n35  [key=2, style=dotted];
n191 -> n11  [key=2, style=dotted];
n194 -> n195  [key=0, style=solid];
n192 -> n188  [color=blue, key=0, style=bold];
n195 -> n196  [key=0, style=solid];
n195 -> n197  [key=2, style=dotted];
n196 -> n194  [color=blue, key=0, style=bold];
n198 -> n199  [key=0, style=solid];
n199 -> n200  [key=0, style=solid];
n199 -> n203  [key=2, style=dotted];
n199 -> n201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n200 -> n201  [key=0, style=solid];
n200 -> n9  [key=2, style=dotted];
n200 -> n204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n201 -> n202  [key=0, style=solid];
n201 -> n104  [key=2, style=dotted];
n204 -> n205  [key=0, style=solid];
n202 -> n198  [color=blue, key=0, style=bold];
n205 -> n206  [key=0, style=solid];
n205 -> n203  [key=2, style=dotted];
n206 -> n204  [color=blue, key=0, style=bold];
n207 -> n208  [key=0, style=solid];
n208 -> n209  [key=0, style=solid];
n208 -> n203  [key=2, style=dotted];
n208 -> n210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n209 -> n210  [key=0, style=solid];
n209 -> n9  [key=2, style=dotted];
n209 -> n212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n210 -> n211  [key=0, style=solid];
n210 -> n104  [key=2, style=dotted];
n212 -> n213  [key=0, style=solid];
n211 -> n207  [color=blue, key=0, style=bold];
n213 -> n214  [key=0, style=solid];
n213 -> n203  [key=2, style=dotted];
n214 -> n212  [color=blue, key=0, style=bold];
n215 -> n216  [key=0, style=solid];
n216 -> n217  [key=0, style=solid];
n216 -> n220  [key=2, style=dotted];
n216 -> n69  [key=2, style=dotted];
n216 -> n218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n217 -> n218  [key=0, style=solid];
n217 -> n9  [key=2, style=dotted];
n217 -> n221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n218 -> n219  [key=0, style=solid];
n218 -> n35  [key=2, style=dotted];
n218 -> n11  [key=2, style=dotted];
n221 -> n222  [key=0, style=solid];
n219 -> n215  [color=blue, key=0, style=bold];
n222 -> n223  [key=0, style=solid];
n222 -> n203  [key=2, style=dotted];
n223 -> n221  [color=blue, key=0, style=bold];
n224 -> n225  [key=0, style=solid];
n225 -> n226  [key=0, style=solid];
n225 -> n220  [key=2, style=dotted];
n225 -> n69  [key=2, style=dotted];
n225 -> n227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n226 -> n227  [key=0, style=solid];
n226 -> n9  [key=2, style=dotted];
n226 -> n229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n227 -> n228  [key=0, style=solid];
n227 -> n35  [key=2, style=dotted];
n227 -> n11  [key=2, style=dotted];
n229 -> n230  [key=0, style=solid];
n228 -> n224  [color=blue, key=0, style=bold];
n230 -> n231  [key=0, style=solid];
n230 -> n232  [key=2, style=dotted];
n231 -> n229  [color=blue, key=0, style=bold];
n233 -> n234  [key=0, style=solid];
n234 -> n235  [key=0, style=solid];
n234 -> n78  [key=2, style=dotted];
n234 -> n69  [key=2, style=dotted];
n234 -> n236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n235 -> n236  [key=0, style=solid];
n235 -> n9  [key=2, style=dotted];
n235 -> n238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n236 -> n237  [key=0, style=solid];
n236 -> n35  [key=2, style=dotted];
n236 -> n11  [key=2, style=dotted];
n238 -> n239  [key=0, style=solid];
n237 -> n233  [color=blue, key=0, style=bold];
n239 -> n240  [key=0, style=solid];
n239 -> n6  [key=2, style=dotted];
n240 -> n238  [color=blue, key=0, style=bold];
n241 -> n242  [key=0, style=solid];
n242 -> n243  [key=0, style=solid];
n242 -> n246  [key=2, style=dotted];
n242 -> n244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n243 -> n244  [key=0, style=solid];
n243 -> n9  [key=2, style=dotted];
n243 -> n247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n244 -> n245  [key=0, style=solid];
n244 -> n35  [key=2, style=dotted];
n244 -> n11  [key=2, style=dotted];
n247 -> n248  [key=0, style=solid];
n245 -> n241  [color=blue, key=0, style=bold];
n248 -> n249  [key=0, style=solid];
n248 -> n6  [key=2, style=dotted];
n249 -> n247  [color=blue, key=0, style=bold];
n250 -> n251  [key=0, style=solid];
n251 -> n252  [key=0, style=solid];
n251 -> n246  [key=2, style=dotted];
n251 -> n253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n252 -> n253  [key=0, style=solid];
n252 -> n9  [key=2, style=dotted];
n252 -> n255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n253 -> n254  [key=0, style=solid];
n253 -> n35  [key=2, style=dotted];
n253 -> n11  [key=2, style=dotted];
n255 -> n256  [key=0, style=solid];
n254 -> n250  [color=blue, key=0, style=bold];
n256 -> n257  [key=0, style=solid];
n256 -> n6  [key=2, style=dotted];
n257 -> n255  [color=blue, key=0, style=bold];
n258 -> n259  [key=0, style=solid];
n259 -> n260  [key=0, style=solid];
n259 -> n246  [key=2, style=dotted];
n259 -> n261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n260 -> n261  [key=0, style=solid];
n260 -> n9  [key=2, style=dotted];
n260 -> n263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n261 -> n262  [key=0, style=solid];
n261 -> n35  [key=2, style=dotted];
n261 -> n11  [key=2, style=dotted];
n263 -> n264  [key=0, style=solid];
n262 -> n258  [color=blue, key=0, style=bold];
n264 -> n265  [key=0, style=solid];
n264 -> n6  [key=2, style=dotted];
n265 -> n263  [color=blue, key=0, style=bold];
n266 -> n267  [key=0, style=solid];
n266 -> n268  [color=darkseagreen4, key=1, label=string, style=dashed];
n267 -> n268  [key=0, style=solid];
n267 -> n9  [key=2, style=dotted];
n267 -> n271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n268 -> n269  [key=0, style=solid];
n268 -> n270  [key=2, style=dotted];
n268 -> n11  [key=2, style=dotted];
n271 -> n272  [key=0, style=solid];
n269 -> n266  [color=blue, key=0, style=bold];
n272 -> n273  [key=0, style=solid];
n272 -> n6  [key=2, style=dotted];
n273 -> n271  [color=blue, key=0, style=bold];
n274 -> n275  [key=0, style=solid];
n275 -> n276  [key=0, style=solid];
n275 -> n220  [key=2, style=dotted];
n275 -> n277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n276 -> n277  [key=0, style=solid];
n276 -> n9  [key=2, style=dotted];
n276 -> n279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n277 -> n278  [key=0, style=solid];
n277 -> n35  [key=2, style=dotted];
n277 -> n11  [key=2, style=dotted];
n279 -> n280  [key=0, style=solid];
n278 -> n274  [color=blue, key=0, style=bold];
n280 -> n281  [key=0, style=solid];
n280 -> n282  [key=2, style=dotted];
n281 -> n279  [color=blue, key=0, style=bold];
n283 -> n284  [key=0, style=solid];
n283 -> n285  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue", style=dashed];
n284 -> n285  [key=0, style=solid];
n284 -> n9  [key=2, style=dotted];
n284 -> n287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n285 -> n286  [key=0, style=solid];
n285 -> n104  [key=2, style=dotted];
n287 -> n288  [key=0, style=solid];
n286 -> n283  [color=blue, key=0, style=bold];
n288 -> n289  [key=0, style=solid];
n288 -> n282  [key=2, style=dotted];
n289 -> n287  [color=blue, key=0, style=bold];
n290 -> n291  [key=0, style=solid];
n290 -> n292  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
n291 -> n292  [key=0, style=solid];
n291 -> n9  [key=2, style=dotted];
n291 -> n294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n292 -> n293  [key=0, style=solid];
n292 -> n104  [key=2, style=dotted];
n294 -> n295  [key=0, style=solid];
n293 -> n290  [color=blue, key=0, style=bold];
n295 -> n296  [key=0, style=solid];
n295 -> n297  [key=2, style=dotted];
n296 -> n294  [color=blue, key=0, style=bold];
m0_4 -> m0_5  [color=red, key=0, style=solid];
m0_5 -> m0_6  [color=red, key=0, style=solid];
m0_5 -> m0_7  [color=red, key=2, style=dotted];
m0_6 -> m0_4  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=red, key=0, style=solid];
m0_1 -> m0_2  [color=red, key=0, style=solid];
m0_1 -> m0_3  [color=red, key=2, style=dotted];
m0_1 -> m0_4  [color=red, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_24  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_26  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_27  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_29  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_30  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_31  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_32  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_33  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_36  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_41  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_42  [color=darkseagreen4, key=1, label="SampleApp.Program.Options", style=dashed];
m0_21 -> m0_9  [color=darkorchid, key=3, label="Parameter variable SampleApp.Program.Options options", style=bold];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_24  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_47  [key=2, style=dotted];
m0_24 -> m0_48  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_48  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=0, style=solid];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_48  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_50  [key=2, style=dotted];
m0_30 -> m0_51  [key=2, style=dotted];
m0_30 -> m0_48  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_48  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_52  [key=2, style=dotted];
m0_32 -> m0_51  [key=2, style=dotted];
m0_32 -> m0_48  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_40  [key=0, style=solid];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_39  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [key=0, style=solid];
m0_41 -> m0_57  [key=2, style=dotted];
m0_42 -> m0_45  [key=0, style=solid];
m0_42 -> m0_58  [key=2, style=dotted];
m0_42 -> m0_59  [key=2, style=dotted];
m0_23 -> m0_25  [key=0, style=solid];
m0_23 -> m0_46  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_49  [key=2, style=dotted];
m0_28 -> m0_27  [key=0, style=solid];
m0_28 -> m0_48  [key=2, style=dotted];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_53  [key=2, style=dotted];
m0_34 -> m0_37  [color=darkseagreen4, key=1, label=builder, style=dashed];
m0_34 -> m0_38  [color=darkseagreen4, key=1, label=builder, style=dashed];
m0_34 -> m0_39  [color=darkseagreen4, key=1, label=builder, style=dashed];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_49  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_54  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_54  [key=2, style=dotted];
m0_38 -> m0_36  [key=0, style=solid];
m0_38 -> m0_54  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_55  [key=2, style=dotted];
m0_39 -> m0_56  [key=2, style=dotted];
m0_39 -> m0_46  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_59  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_46  [key=2, style=dotted];
m0_45 -> m0_21  [color=blue, key=0, style=bold];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_16  [key=2, style=dotted];
m0_9 -> m0_11  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_9 -> m0_13  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=0, style=solid];
m0_11 -> m0_19  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_17  [key=2, style=dotted];
m0_10 -> m0_18  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_21  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_20  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_20  [key=2, style=dotted];
m0_15 -> m0_8  [color=blue, key=0, style=bold];
m0_60 -> m0_1  [color=red, key=1, label="SampleApp.Program.Options", style=dashed];
m0_60 -> m0_5  [color=red, key=1, label="SampleApp.Program.Options", style=dashed];
m1_4 -> m1_5  [color=green, key=0, style=solid];
m1_5 -> m1_6  [color=green, key=0, style=solid];
m1_5 -> m1_7  [color=green, key=2, style=dotted];
m1_6 -> m1_4  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> m1_3  [color=green, key=2, style=dotted];
m1_1 -> m1_4  [color=green, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_8 -> m1_1  [color=green, key=1, label="CommandLine.Demo.Program.Options", style=dashed];
m1_8 -> m1_5  [color=green, key=1, label="CommandLine.Demo.Program.Options", style=dashed];
m5_33 -> m5_34  [key=0, style=solid];
m5_34 -> m5_35  [key=0, style=solid];
m5_34 -> m5_36  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_35 -> m5_36  [key=0, style=solid];
m5_35 -> m5_9  [key=2, style=dotted];
m5_35 -> m5_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_36 -> m5_37  [key=0, style=solid];
m5_36 -> m5_20  [key=2, style=dotted];
m5_37 -> m5_33  [color=blue, key=0, style=bold];
m5_157 -> m5_158  [key=0, style=solid];
m5_158 -> m5_159  [key=0, style=solid];
m5_158 -> m5_162  [key=2, style=dotted];
m5_158 -> m5_117  [key=2, style=dotted];
m5_158 -> m5_160  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_159 -> m5_160  [key=0, style=solid];
m5_159 -> m5_9  [key=2, style=dotted];
m5_159 -> m5_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_160 -> m5_161  [key=0, style=solid];
m5_160 -> m5_46  [key=2, style=dotted];
m5_160 -> m5_11  [key=2, style=dotted];
m5_161 -> m5_157  [color=blue, key=0, style=bold];
m5_166 -> m5_167  [key=0, style=solid];
m5_167 -> m5_168  [key=0, style=solid];
m5_167 -> m5_171  [key=2, style=dotted];
m5_167 -> m5_169  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_168 -> m5_169  [key=0, style=solid];
m5_168 -> m5_9  [key=2, style=dotted];
m5_168 -> m5_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_169 -> m5_170  [key=0, style=solid];
m5_169 -> m5_46  [key=2, style=dotted];
m5_169 -> m5_11  [key=2, style=dotted];
m5_170 -> m5_166  [color=blue, key=0, style=bold];
m5_131 -> m5_132  [key=0, style=solid];
m5_132 -> m5_133  [key=0, style=solid];
m5_132 -> m5_127  [key=2, style=dotted];
m5_132 -> m5_134  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_133 -> m5_134  [key=0, style=solid];
m5_133 -> m5_9  [key=2, style=dotted];
m5_133 -> m5_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_134 -> m5_135  [key=0, style=solid];
m5_134 -> m5_56  [key=2, style=dotted];
m5_134 -> m5_57  [key=2, style=dotted];
m5_134 -> m5_58  [key=2, style=dotted];
m5_135 -> m5_131  [color=blue, key=0, style=bold];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_6  [key=2, style=dotted];
m5_1 -> m5_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m5_1 -> m5_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_7  [key=2, style=dotted];
m5_2 -> m5_8  [key=2, style=dotted];
m5_2 -> m5_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_9  [key=2, style=dotted];
m5_3 -> m5_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_10  [key=2, style=dotted];
m5_4 -> m5_11  [key=2, style=dotted];
m5_5 -> m5_0  [color=blue, key=0, style=bold];
m5_148 -> m5_149  [key=0, style=solid];
m5_149 -> m5_150  [key=0, style=solid];
m5_149 -> m5_144  [key=2, style=dotted];
m5_149 -> m5_117  [key=2, style=dotted];
m5_149 -> m5_151  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_150 -> m5_151  [key=0, style=solid];
m5_150 -> m5_9  [key=2, style=dotted];
m5_150 -> m5_153  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_151 -> m5_152  [key=0, style=solid];
m5_151 -> m5_46  [key=2, style=dotted];
m5_151 -> m5_11  [key=2, style=dotted];
m5_152 -> m5_148  [color=blue, key=0, style=bold];
m5_188 -> m5_189  [key=0, style=solid];
m5_13 -> m5_14  [key=0, style=solid];
m5_12 -> m5_13  [key=0, style=solid];
m5_14 -> m5_12  [color=blue, key=0, style=bold];
m5_21 -> m5_22  [key=0, style=solid];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_6  [key=2, style=dotted];
m5_23 -> m5_21  [color=blue, key=0, style=bold];
m5_29 -> m5_30  [key=0, style=solid];
m5_30 -> m5_31  [key=0, style=solid];
m5_30 -> m5_32  [key=2, style=dotted];
m5_31 -> m5_29  [color=blue, key=0, style=bold];
m5_38 -> m5_39  [key=0, style=solid];
m5_39 -> m5_40  [key=0, style=solid];
m5_39 -> m5_32  [key=2, style=dotted];
m5_40 -> m5_38  [color=blue, key=0, style=bold];
m5_47 -> m5_48  [key=0, style=solid];
m5_48 -> m5_49  [key=0, style=solid];
m5_48 -> m5_6  [key=2, style=dotted];
m5_49 -> m5_47  [color=blue, key=0, style=bold];
m5_59 -> m5_60  [key=0, style=solid];
m5_60 -> m5_61  [key=0, style=solid];
m5_60 -> m5_55  [key=2, style=dotted];
m5_61 -> m5_59  [color=blue, key=0, style=bold];
m5_68 -> m5_69  [key=0, style=solid];
m5_69 -> m5_70  [key=0, style=solid];
m5_69 -> m5_67  [key=2, style=dotted];
m5_70 -> m5_68  [color=blue, key=0, style=bold];
m5_77 -> m5_78  [key=0, style=solid];
m5_78 -> m5_79  [key=0, style=solid];
m5_78 -> n150  [key=2, style=dotted];
m5_79 -> m5_77  [color=blue, key=0, style=bold];
m5_86 -> m5_87  [key=0, style=solid];
m5_87 -> m5_88  [key=0, style=solid];
m5_87 -> m5_85  [key=2, style=dotted];
m5_88 -> m5_86  [color=blue, key=0, style=bold];
m5_96 -> m5_97  [key=0, style=solid];
m5_99 -> m5_100  [key=0, style=solid];
m5_99 -> m5_104  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m5_99 -> m5_108  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m5_97 -> m5_98  [key=0, style=solid];
m5_97 -> m5_67  [key=2, style=dotted];
m5_98 -> m5_96  [color=blue, key=0, style=bold];
m5_100 -> m5_101  [key=0, style=solid];
m5_100 -> m5_102  [key=2, style=dotted];
m5_100 -> m5_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_104 -> m5_105  [key=0, style=solid];
m5_104 -> m5_106  [key=2, style=dotted];
m5_104 -> m5_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_108 -> m5_109  [key=0, style=solid];
m5_108 -> m5_110  [key=2, style=dotted];
m5_101 -> m5_99  [color=blue, key=0, style=bold];
m5_103 -> m5_104  [key=0, style=solid];
m5_105 -> m5_103  [color=blue, key=0, style=bold];
m5_107 -> m5_108  [key=0, style=solid];
m5_109 -> m5_107  [color=blue, key=0, style=bold];
m5_118 -> m5_119  [key=0, style=solid];
m5_119 -> m5_120  [key=0, style=solid];
m5_119 -> m5_121  [key=2, style=dotted];
m5_120 -> m5_118  [color=blue, key=0, style=bold];
m5_128 -> m5_129  [key=0, style=solid];
m5_129 -> m5_130  [key=0, style=solid];
m5_129 -> m5_127  [key=2, style=dotted];
m5_130 -> m5_128  [color=blue, key=0, style=bold];
m5_136 -> m5_137  [key=0, style=solid];
m5_137 -> m5_138  [key=0, style=solid];
m5_137 -> m5_127  [key=2, style=dotted];
m5_138 -> m5_136  [color=blue, key=0, style=bold];
m5_145 -> m5_146  [key=0, style=solid];
m5_146 -> m5_147  [key=0, style=solid];
m5_146 -> m5_127  [key=2, style=dotted];
m5_147 -> m5_145  [color=blue, key=0, style=bold];
m5_153 -> m5_154  [key=0, style=solid];
m5_154 -> m5_155  [key=0, style=solid];
m5_154 -> m5_156  [key=2, style=dotted];
m5_155 -> m5_153  [color=blue, key=0, style=bold];
m5_163 -> m5_164  [key=0, style=solid];
m5_164 -> m5_165  [key=0, style=solid];
m5_164 -> m5_6  [key=2, style=dotted];
m5_165 -> m5_163  [color=blue, key=0, style=bold];
m5_172 -> m5_173  [key=0, style=solid];
m5_173 -> m5_174  [key=0, style=solid];
m5_173 -> m5_6  [key=2, style=dotted];
m5_174 -> m5_172  [color=blue, key=0, style=bold];
m5_180 -> m5_181  [key=0, style=solid];
m5_181 -> m5_182  [key=0, style=solid];
m5_181 -> m5_6  [key=2, style=dotted];
m5_182 -> m5_180  [color=blue, key=0, style=bold];
m5_189 -> m5_190  [key=0, style=solid];
m5_189 -> m5_6  [key=2, style=dotted];
m5_190 -> m5_188  [color=blue, key=0, style=bold];
m5_139 -> m5_140  [key=0, style=solid];
m5_140 -> m5_141  [key=0, style=solid];
m5_140 -> m5_144  [key=2, style=dotted];
m5_140 -> m5_117  [key=2, style=dotted];
m5_140 -> m5_142  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_141 -> m5_142  [key=0, style=solid];
m5_141 -> m5_9  [key=2, style=dotted];
m5_141 -> m5_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_142 -> m5_143  [key=0, style=solid];
m5_142 -> m5_46  [key=2, style=dotted];
m5_142 -> m5_11  [key=2, style=dotted];
m5_143 -> m5_139  [color=blue, key=0, style=bold];
m5_89 -> m5_90  [key=0, style=solid];
m5_90 -> m5_91  [key=0, style=solid];
m5_90 -> m5_67  [key=2, style=dotted];
m5_90 -> m5_93  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_91 -> m5_92  [key=0, style=solid];
m5_93 -> m5_94  [key=0, style=solid];
m5_93 -> m5_56  [key=2, style=dotted];
m5_93 -> m5_57  [key=2, style=dotted];
m5_93 -> m5_58  [key=2, style=dotted];
m5_92 -> m5_93  [key=0, style=solid];
m5_92 -> m5_95  [key=2, style=dotted];
m5_92 -> m5_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_92 -> m5_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_94 -> m5_89  [color=blue, key=0, style=bold];
m5_80 -> m5_81  [key=0, style=solid];
m5_81 -> m5_82  [key=0, style=solid];
m5_81 -> m5_85  [key=2, style=dotted];
m5_81 -> m5_83  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_82 -> m5_83  [key=0, style=solid];
m5_82 -> m5_9  [key=2, style=dotted];
m5_82 -> m5_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_83 -> m5_84  [key=0, style=solid];
m5_83 -> m5_56  [key=2, style=dotted];
m5_83 -> m5_57  [key=2, style=dotted];
m5_83 -> m5_58  [key=2, style=dotted];
m5_84 -> m5_80  [color=blue, key=0, style=bold];
m5_183 -> m5_184  [key=0, style=solid];
m5_184 -> m5_185  [key=0, style=solid];
m5_184 -> m5_171  [key=2, style=dotted];
m5_184 -> m5_186  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_185 -> m5_186  [key=0, style=solid];
m5_185 -> m5_9  [key=2, style=dotted];
m5_185 -> m5_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_186 -> m5_187  [key=0, style=solid];
m5_186 -> m5_46  [key=2, style=dotted];
m5_186 -> m5_11  [key=2, style=dotted];
m5_187 -> m5_183  [color=blue, key=0, style=bold];
m5_62 -> m5_63  [key=0, style=solid];
m5_63 -> m5_64  [key=0, style=solid];
m5_63 -> m5_67  [key=2, style=dotted];
m5_63 -> m5_65  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_64 -> m5_65  [key=0, style=solid];
m5_64 -> m5_9  [key=2, style=dotted];
m5_64 -> m5_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_65 -> m5_66  [key=0, style=solid];
m5_65 -> m5_56  [key=2, style=dotted];
m5_65 -> m5_57  [key=2, style=dotted];
m5_65 -> m5_58  [key=2, style=dotted];
m5_66 -> m5_62  [color=blue, key=0, style=bold];
m5_122 -> m5_123  [key=0, style=solid];
m5_123 -> m5_124  [key=0, style=solid];
m5_123 -> m5_127  [key=2, style=dotted];
m5_123 -> m5_125  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_124 -> m5_125  [key=0, style=solid];
m5_124 -> m5_9  [key=2, style=dotted];
m5_124 -> m5_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_125 -> m5_126  [key=0, style=solid];
m5_125 -> m5_56  [key=2, style=dotted];
m5_125 -> m5_57  [key=2, style=dotted];
m5_125 -> m5_58  [key=2, style=dotted];
m5_126 -> m5_122  [color=blue, key=0, style=bold];
m5_111 -> m5_112  [key=0, style=solid];
m5_112 -> m5_113  [key=0, style=solid];
m5_112 -> m5_116  [key=2, style=dotted];
m5_112 -> m5_117  [key=2, style=dotted];
m5_112 -> m5_114  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_113 -> m5_114  [key=0, style=solid];
m5_113 -> m5_9  [key=2, style=dotted];
m5_113 -> m5_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_114 -> m5_115  [key=0, style=solid];
m5_114 -> m5_46  [key=2, style=dotted];
m5_114 -> m5_11  [key=2, style=dotted];
m5_115 -> m5_111  [color=blue, key=0, style=bold];
m5_24 -> m5_25  [key=0, style=solid];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_27  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_26 -> m5_27  [key=0, style=solid];
m5_26 -> m5_9  [key=2, style=dotted];
m5_26 -> m5_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_27 -> m5_28  [key=0, style=solid];
m5_27 -> m5_20  [key=2, style=dotted];
m5_28 -> m5_24  [color=blue, key=0, style=bold];
m5_15 -> m5_16  [key=0, style=solid];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_18  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_9  [key=2, style=dotted];
m5_17 -> m5_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_20  [key=2, style=dotted];
m5_19 -> m5_15  [color=blue, key=0, style=bold];
m5_175 -> m5_176  [key=0, style=solid];
m5_176 -> m5_177  [key=0, style=solid];
m5_176 -> m5_171  [key=2, style=dotted];
m5_176 -> m5_178  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_177 -> m5_178  [key=0, style=solid];
m5_177 -> m5_9  [key=2, style=dotted];
m5_177 -> m5_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_178 -> m5_179  [key=0, style=solid];
m5_178 -> m5_46  [key=2, style=dotted];
m5_178 -> m5_11  [key=2, style=dotted];
m5_179 -> m5_175  [color=blue, key=0, style=bold];
m5_50 -> m5_51  [key=0, style=solid];
m5_51 -> m5_52  [key=0, style=solid];
m5_51 -> m5_55  [key=2, style=dotted];
m5_51 -> m5_53  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_52 -> m5_53  [key=0, style=solid];
m5_52 -> m5_9  [key=2, style=dotted];
m5_52 -> m5_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_53 -> m5_54  [key=0, style=solid];
m5_53 -> m5_56  [key=2, style=dotted];
m5_53 -> m5_57  [key=2, style=dotted];
m5_53 -> m5_58  [key=2, style=dotted];
m5_54 -> m5_50  [color=blue, key=0, style=bold];
m5_41 -> m5_42  [key=0, style=solid];
m5_42 -> m5_43  [key=0, style=solid];
m5_42 -> m5_44  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_43 -> m5_44  [key=0, style=solid];
m5_43 -> m5_9  [key=2, style=dotted];
m5_43 -> m5_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_44 -> m5_45  [key=0, style=solid];
m5_44 -> m5_46  [key=2, style=dotted];
m5_44 -> m5_11  [key=2, style=dotted];
m5_45 -> m5_41  [color=blue, key=0, style=bold];
m5_71 -> m5_72  [key=0, style=solid];
m5_72 -> m5_73  [key=0, style=solid];
m5_72 -> n150  [key=2, style=dotted];
m5_72 -> m5_74  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m5_73 -> m5_74  [key=0, style=solid];
m5_73 -> m5_9  [key=2, style=dotted];
m5_73 -> m5_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_74 -> m5_75  [key=0, style=solid];
m5_74 -> m5_56  [key=2, style=dotted];
m5_74 -> m5_57  [key=2, style=dotted];
m5_74 -> m5_58  [key=2, style=dotted];
m5_75 -> m5_71  [color=blue, key=0, style=bold];
m5_191 -> m5_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m5_192 -> m5_104  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m5_192 -> m5_108  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
}
