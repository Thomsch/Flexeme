digraph  {
m3_76 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="7-7"];
m3_86 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="27-27"];
m3_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m3_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''-0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="81-85"];
m3_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="var expectedResult = -.123D", span="78-78"];
m3_36 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="88-88"];
m3_37 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m3_11 [cluster="Unk.True", file="InstanceBuilderTests.cs", label="Entry Unk.True", span=""];
m3_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="256-256"];
m3_124 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", color=green, community=0, file="InstanceBuilderTests.cs", label="0: var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="259-259"];
m3_125 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", color=green, community=1, file="InstanceBuilderTests.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m3_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", color=green, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="269-269"];
m3_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="256-256"];
m3_118 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m3_132 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="275-275"];
m3_133 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", color=green, community=0, file="InstanceBuilderTests.cs", label="0: var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="278-278"];
m3_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", color=green, community=1, file="InstanceBuilderTests.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m3_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", color=green, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m3_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="275-275"];
m3_57 [cluster="Unk.AllProperties", file="InstanceBuilderTests.cs", label="Entry Unk.AllProperties", span=""];
m3_101 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="10-10"];
m3_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m3_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28"];
m3_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.Equals(result))", span="31-31"];
m3_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var fakeOptions = new FakeOptions()", span="18-18"];
m3_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21"];
m3_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m3_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="237-237"];
m3_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", color=green, community=0, file="InstanceBuilderTests.cs", label="0: var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="240-240"];
m3_115 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", color=green, community=1, file="InstanceBuilderTests.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="243-247"];
m3_116 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", color=green, community=0, file="InstanceBuilderTests.cs", label="0: Assert.True(expectedResult.SequenceEqual(result.Errors))", span="250-250"];
m3_117 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="237-237"];
m3_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
m3_128 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m3_98 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="202-202"];
m3_119 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="244-244"];
m3_120 [cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs", label="0: new FakeOptionWithRequired()", span="244-244"];
m3_121 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="244-244"];
m3_129 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="263-263"];
m3_130 [cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs", label="0: new FakeOptions()", span="263-263"];
m3_131 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="263-263"];
m3_138 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="282-282"];
m3_139 [cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs", label="0: new FakeOptions()", span="282-282"];
m3_140 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="282-282"];
m3_22 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="44-44"];
m3_48 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="101-101"];
m3_147 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="301-301"];
m3_155 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="320-320"];
m3_12 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="25-25"];
m3_21 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="44-44"];
m3_29 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="63-63"];
m3_38 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="82-82"];
m3_47 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="101-101"];
m3_59 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="123-123"];
m3_68 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="148-148"];
m3_77 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="170-170"];
m3_109 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="225-225"];
m3_146 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="301-301"];
m3_154 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="320-320"];
m3_13 [cluster="lambda expression", file="InstanceBuilderTests.cs", label=fakeOptions, span="25-25"];
m3_23 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="44-44"];
m3_49 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="101-101"];
m3_148 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="301-301"];
m3_156 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="320-320"];
m3_14 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="25-25"];
m3_31 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="63-63"];
m3_30 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="63-63"];
m3_40 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="82-82"];
m3_39 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="82-82"];
m3_61 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="123-123"];
m3_60 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="123-123"];
m3_70 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="148-148"];
m3_69 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="148-148"];
m3_79 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="170-170"];
m3_78 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="170-170"];
m3_111 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="225-225"];
m3_110 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSets()", span="225-225"];
m3_88 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="199-199"];
m3_87 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="199-199"];
m3_89 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="199-199"];
m3_90 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="200-202"];
m3_92 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="200-202"];
m3_91 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="201-202"];
m3_95 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="202-202"];
m3_99 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="202-202"];
m3_94 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="202-202"];
m3_96 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="202-202"];
m3_100 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="202-202"];
m3_46 [cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs", label="Entry Unk.SequenceEqual", span=""];
m3_80 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="185-185"];
m3_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="208-208"];
m3_81 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="188-194"];
m3_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="198-205"];
m3_82 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="195-195"];
m3_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="185-185"];
m3_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m3_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-i'', ''10'', ''20'', ''30'', ''40'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="100-104"];
m3_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="107-107"];
m3_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { 10, 20, 30, 40 }", span="97-97"];
m3_45 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m3_149 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="313-313"];
m3_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m3_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m3_150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="316-316"];
m3_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="313-313"];
m3_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
m3_62 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135"];
m3_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="147-151"];
m3_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="138-144"];
m3_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="154-154"];
m3_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135"];
m3_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="14-14"];
m3_32 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="7-7"];
m3_137 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m3_97 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m3_93 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m3_112 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m3_107 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m3_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m3_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="62-66"];
m3_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="var expectedResult = .123D", span="59-59"];
m3_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="69-69"];
m3_28 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m3_122 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m3_108 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m3_58 [cluster="Unk.EqualTo", file="InstanceBuilderTests.cs", label="Entry Unk.EqualTo", span=""];
m3_56 [cluster="Unk.ShouldHave", file="InstanceBuilderTests.cs", label="Entry Unk.ShouldHave", span=""];
m3_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m3_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37"];
m3_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="43-47"];
m3_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="var expectedResult = -123", span="40-40"];
m3_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.LongValue)", span="50-50"];
m3_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37"];
m3_141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="294-294"];
m3_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m3_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m3_142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="297-297"];
m3_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="294-294"];
m3_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m3_52 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="122-126"];
m3_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="116-119"];
m3_53 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="129-129"];
m3_54 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m3_67 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m3_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m3_20 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m3_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="214-214"];
m3_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="217-221"];
m3_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="224-228"];
m3_105 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="231-231"];
m3_106 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="214-214"];
m3_71 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m3_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="169-173"];
m3_72 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n            {\r\n                LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n            }", span="163-166"];
m3_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="176-176"];
m3_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m3_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m3_157 [file="InstanceBuilderTests.cs", label=fakeOptions, span=""];
m3_158 [file="InstanceBuilderTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m4_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapperTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m4_11 [cluster="Unk.Create", file="OptionMapperTests.cs", label="Entry Unk.Create", span=""];
m4_12 [cluster="Unk.Where", file="OptionMapperTests.cs", label="Entry Unk.Where", span=""];
m4_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m4_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", span="15-15"];
m4_10 [cluster="Unk.Single", file="OptionMapperTests.cs", label="Entry Unk.Single", span=""];
m4_14 [cluster="Unk.NotNull", file="OptionMapperTests.cs", label="Entry Unk.NotNull", span=""];
m4_26 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m4_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m4_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22"];
m4_2 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="OptionMapperTests.cs", label="0: var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, -1, -1, Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29"];
m4_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36"];
m4_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true))", span="39-42"];
m4_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m4_27 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="40-42"];
m4_15 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="27-27"];
m4_19 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="33-33"];
m4_23 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="35-35"];
m4_16 [cluster="lambda expression", file="OptionMapperTests.cs", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27"];
m4_17 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="27-27"];
m4_20 [cluster="lambda expression", file="OptionMapperTests.cs", label="pt.Specification.IsOption()", span="33-33"];
m4_21 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="33-33"];
m4_24 [cluster="lambda expression", file="OptionMapperTests.cs", label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35"];
m4_25 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="35-35"];
m4_28 [cluster="lambda expression", file="OptionMapperTests.cs", label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value == true", span="40-42"];
m4_29 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="40-42"];
m4_30 [cluster="string.Equals(string)", file="OptionMapperTests.cs", label="Entry string.Equals(string)", span="0-0"];
m4_18 [cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m4_22 [cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m4_13 [cluster="Unk.MapValues", file="OptionMapperTests.cs", label="Entry Unk.MapValues", span=""];
m4_9 [cluster="System.Type.GetProperties()", file="OptionMapperTests.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m5_0 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", span="15-15"];
m5_1 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs", label="this.shortName = shortName", span="18-18"];
m5_2 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs", label="this.longName = longName", span="19-19"];
m5_3 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs", label="this.setName = setName", span="20-20"];
m5_4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs", label="this.helpText = helpText", span="21-21"];
m5_5 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs", label="this.metaValue = metaValue", span="22-22"];
m5_6 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", span="15-15"];
m5_7 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", span="25-25"];
m5_8 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", color=green, community=0, file="OptionSpecification.cs", label="0: return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                attribute.HelpText,\r\n                attribute.MetaValue);", span="27-37"];
m5_9 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", span="25-25"];
m5_10 [cluster="T.ToMaybe<T>()", file="OptionSpecification.cs", label="Entry T.ToMaybe<T>()", span="82-82"];
m5_11 [file="OptionSpecification.cs", label="CommandLine.Core.OptionSpecification", span=""];
m6_4 [cluster="CommandLine.ParserSettings.~ParserSettings()", file="ParserSettings.cs", label="Entry CommandLine.ParserSettings.~ParserSettings()", span="34-34"];
m6_5 [cluster="CommandLine.ParserSettings.~ParserSettings()", file="ParserSettings.cs", label="Dispose(false)", span="36-36"];
m6_6 [cluster="CommandLine.ParserSettings.~ParserSettings()", file="ParserSettings.cs", label="Exit CommandLine.ParserSettings.~ParserSettings()", span="34-34"];
m6_0 [cluster="CommandLine.ParserSettings.ParserSettings()", file="ParserSettings.cs", label="Entry CommandLine.ParserSettings.ParserSettings()", span="25-25"];
m6_1 [cluster="CommandLine.ParserSettings.ParserSettings()", file="ParserSettings.cs", label="this.caseSensitive = true", span="27-27"];
m6_2 [cluster="CommandLine.ParserSettings.ParserSettings()", file="ParserSettings.cs", label="this.parsingCulture = CultureInfo.InvariantCulture", span="28-28"];
m6_3 [cluster="CommandLine.ParserSettings.ParserSettings()", file="ParserSettings.cs", label="Exit CommandLine.ParserSettings.ParserSettings()", span="25-25"];
m6_7 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs", label="Entry CommandLine.ParserSettings.Dispose(bool)", span="124-124"];
m6_13 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs", label="this.disposed", span="126-126"];
m6_15 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs", label=disposing, span="131-131"];
m6_14 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs", label="return;", span="128-128"];
m6_16 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs", label="HelpWriter != null", span="133-133"];
m6_17 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs", label="this.helpWriter.Dispose()", span="135-135"];
m6_19 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs", label="this.disposed = true", span="139-139"];
m6_18 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs", label="this.helpWriter = null", span="136-136"];
m6_20 [cluster="CommandLine.ParserSettings.Dispose(bool)", file="ParserSettings.cs", label="Exit CommandLine.ParserSettings.Dispose(bool)", span="124-124"];
m6_12 [cluster="System.GC.SuppressFinalize(object)", file="ParserSettings.cs", label="Entry System.GC.SuppressFinalize(object)", span="0-0"];
m6_21 [cluster="System.IO.TextWriter.Dispose()", file="ParserSettings.cs", label="Entry System.IO.TextWriter.Dispose()", span="0-0"];
m6_8 [cluster="CommandLine.ParserSettings.Dispose()", file="ParserSettings.cs", label="Entry CommandLine.ParserSettings.Dispose()", span="117-117"];
m6_9 [cluster="CommandLine.ParserSettings.Dispose()", file="ParserSettings.cs", label="Dispose(true)", span="119-119"];
m6_10 [cluster="CommandLine.ParserSettings.Dispose()", file="ParserSettings.cs", label="GC.SuppressFinalize(this)", span="121-121"];
m6_11 [cluster="CommandLine.ParserSettings.Dispose()", file="ParserSettings.cs", label="Exit CommandLine.ParserSettings.Dispose()", span="117-117"];
m6_22 [file="ParserSettings.cs", label="CommandLine.ParserSettings", span=""];
m7_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m7_22 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="Specification.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m7_26 [cluster="string.ToLowerInvariant()", file="Specification.cs", label="Entry string.ToLowerInvariant()", span="0-0"];
m7_28 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="Specification.cs", label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="17-17"];
m7_25 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", file="Specification.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type)", span="25-25"];
m7_8 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="67-67"];
m7_9 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs", label="0: var attrs = property.GetCustomAttributes(true)", span="69-69"];
m7_12 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs", label="0: var spec = OptionSpecification.FromAttribute(oa.Single(), property.PropertyType)", span="73-73"];
m7_14 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=red, community=0, file="Specification.cs", label="0: return spec.WithLongName(property.Name.ToLowerInvariant());", span="76-76"];
m7_18 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="return ValueSpecification.FromAttribute(va.Single(), property.PropertyType);", span="84-84"];
m7_10 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs", label="0: var oa = attrs.OfType<OptionAttribute>()", span="70-70"];
m7_16 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="var va = attrs.OfType<ValueAttribute>()", span="81-81"];
m7_11 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs", label="0: oa.Count() == 1", span="71-71"];
m7_13 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs", label="0: spec.ShortName.Length == 0 && spec.LongName.Length == 0", span="74-74"];
m7_15 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="return spec;", span="78-78"];
m7_17 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs", label="0: va.Count() == 1", span="82-82"];
m7_19 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="throw new InvalidOperationException();", span="87-87"];
m7_20 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="Exit CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="67-67"];
m7_29 [cluster="System.InvalidOperationException.InvalidOperationException()", file="Specification.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m7_21 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="Specification.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m7_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m7_27 [cluster="CommandLine.Core.OptionSpecification.WithLongName(string)", file="Specification.cs", label="Entry CommandLine.Core.OptionSpecification.WithLongName(string)", span="25-25"];
m7_0 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="Entry CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="27-27"];
m7_1 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.tag = tag", span="29-29"];
m7_2 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.required = required", span="30-30"];
m7_3 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.min = min", span="31-31"];
m7_4 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.max = max", span="32-32"];
m7_5 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.defaultValue = defaultValue", span="33-33"];
m7_6 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.conversionType = conversionType", span="34-34"];
m7_7 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="Exit CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="27-27"];
m7_30 [file="Specification.cs", label="CommandLine.Core.Specification", span=""];
m8_42 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="SpecificationExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m8_15 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="40-40"];
m8_16 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label=guardsLookup, span="42-42"];
m8_17 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="specifications.Any(spec => guard.Item1(spec))", span="44-44"];
m8_19 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="return specifications;", span="50-50"];
m8_18 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="throw new ApplicationException(guard.Item2);", span="46-46"];
m8_20 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="40-40"];
m8_41 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m8_0 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11"];
m8_1 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="specification == null", span="13-13"];
m8_3 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Tag == SpecificationType.Option;", span="15-15"];
m8_2 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="throw new ArgumentNullException(''specification'');", span="13-13"];
m8_4 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11"];
m8_14 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", span="15-15"];
m8_6 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="18-18"];
m8_7 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="specification == null", span="20-20"];
m8_9 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Tag == SpecificationType.Value;", span="22-22"];
m8_8 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="throw new ArgumentNullException(''specification'');", span="20-20"];
m8_10 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="18-18"];
m8_23 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Entry lambda expression", span="44-44"];
m8_24 [cluster="lambda expression", file="SpecificationExtensions.cs", label="guard.Item1(spec)", span="44-44"];
m8_25 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Exit lambda expression", span="44-44"];
m8_27 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="53-53"];
m8_28 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="specification == null", span="55-55"];
m8_30 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="specification.ConversionType.ToDescriptor()", span="57-57"];
m8_34 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="var min = specification.Min", span="62-62"];
m8_35 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="var max = specification.Max", span="63-63"];
m8_29 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="throw new ArgumentNullException(''specification'');", span="55-55"];
m8_31 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="DescriptorType.Scalar", span="59-59"];
m8_33 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="DescriptorType.Sequence", span="61-61"];
m8_32 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return  Maybe.Just(1);", span="60-60"];
m8_36 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="min >= 0 && max >= 0", span="64-64"];
m8_37 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return Maybe.Just(max);", span="66-66"];
m8_38 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return Maybe.Nothing<int>();", span="71-71"];
m8_39 [cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="53-53"];
m8_26 [cluster="System.Func<T, TResult>.Invoke(T)", file="SpecificationExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m8_40 [cluster="System.Type.ToDescriptor()", file="SpecificationExtensions.cs", label="Entry System.Type.ToDescriptor()", span="22-22"];
m8_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SpecificationExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_21 [cluster="Unk.Any", file="SpecificationExtensions.cs", label="Entry Unk.Any", span=""];
m8_11 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="25-25"];
m8_12 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", color=green, community=0, file="SpecificationExtensions.cs", label="0: return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue);", span="27-37"];
m8_13 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="25-25"];
m8_22 [cluster="System.ApplicationException.ApplicationException(string)", file="SpecificationExtensions.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m8_43 [file="SpecificationExtensions.cs", label=guard, span=""];
m9_0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m9_1 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29"];
m9_2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m9_19 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152"];
m9_48 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="46-46"];
m9_49 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min);\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="48-60"];
m9_50 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="46-46"];
m9_46 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m9_38 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m9_10 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m9_14 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m9_47 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m9_61 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137"];
m9_42 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147"];
m9_65 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m9_62 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="56-57"];
m9_4 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22"];
m9_3 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="20-29"];
m9_5 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23"];
m9_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="22-22"];
m9_7 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26"];
m9_6 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="24-24"];
m9_20 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="23-23"];
m9_8 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="28-28"];
m9_9 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="20-29"];
m9_23 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-26"];
m9_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22"];
m9_17 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="22-22"];
m9_21 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)g.Specification).SetName", span="23-23"];
m9_22 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="23-23"];
m9_24 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26"];
m9_25 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-26"];
m9_33 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: var options = specProps.Where(sp => sp.Value.IsNothing() && sp.Specification.Required)", span="36-36"];
m9_32 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="34-43"];
m9_34 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: options.Any()", span="37-37"];
m9_39 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="36-36"];
m9_35 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return options.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="39-40"];
m9_36 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return Enumerable.Empty<Nothing<Error>>();", span="42-42"];
m9_37 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="34-43"];
m9_43 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="39-40"];
m9_40 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsNothing() && sp.Specification.Required", span="36-36"];
m9_41 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="36-36"];
m9_44 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="39-40"];
m9_45 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="39-40"];
m9_52 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)", span="50-53"];
m9_51 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="48-60"];
m9_53 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="54-54"];
m9_57 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="51-53"];
m9_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="56-57"];
m9_55 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="59-59"];
m9_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="48-60"];
m9_58 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min", span="51-53"];
m9_59 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="51-53"];
m9_63 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="56-57"];
m9_64 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="56-57"];
m9_29 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m9_30 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Value.IsNothing() && sp.Specification.Required);\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-43"];
m9_31 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m9_28 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m9_13 [cluster="Unk.Select", file="SpecificationPropertyRules.cs", label="Entry Unk.Select", span=""];
m9_60 [cluster="System.Type.ToDescriptor()", file="SpecificationPropertyRules.cs", label="Entry System.Type.ToDescriptor()", span="22-22"];
m9_26 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m9_18 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m9_27 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m9_11 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m9_12 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m10_103 [cluster="string.Split(params char[])", file="Tokenizer.cs", label="Entry string.Split(params char[])", span="0-0"];
m10_16 [cluster="Unk.nameLookup", file="Tokenizer.cs", label="Entry Unk.nameLookup", span=""];
m10_101 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188"];
m10_11 [cluster="string.StartsWith(string, System.StringComparison)", file="Tokenizer.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m10_80 [cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m10_102 [cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m10_34 [cluster="Unk.Any", file="Tokenizer.cs", label="Entry Unk.Any", span=""];
m10_12 [cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
m10_15 [cluster="Unk.IsName", file="Tokenizer.cs", label="Entry Unk.IsName", span=""];
m10_36 [cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m10_20 [cluster="Unk.Create", file="Tokenizer.cs", label="Entry Unk.Create", span=""];
m10_81 [cluster="string.Substring(int, int)", file="Tokenizer.cs", label="Entry string.Substring(int, int)", span="0-0"];
m10_82 [cluster="string.String(char, int)", file="Tokenizer.cs", label="Entry string.String(char, int)", span="0-0"];
m10_54 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="43-43"];
m10_22 [cluster="lambda expression", file="Tokenizer.cs", label="errors.Add(e)", span="18-18"];
m10_21 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="18-18"];
m10_23 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="18-18"];
m10_41 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="39-39"];
m10_45 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="41-41"];
m10_48 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="42-42"];
m10_51 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="42-42"];
m10_55 [cluster="lambda expression", file="Tokenizer.cs", label="tokens.Concat(values)", span="43-43"];
m10_42 [cluster="lambda expression", file="Tokenizer.cs", label="arg.EqualsOrdinal(''--'')", span="39-39"];
m10_43 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="39-39"];
m10_46 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="41-41"];
m10_47 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="41-41"];
m10_49 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="42-42"];
m10_50 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="42-42"];
m10_52 [cluster="lambda expression", file="Tokenizer.cs", label="Token.Value(t)", span="42-42"];
m10_53 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="42-42"];
m10_56 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="43-43"];
m10_38 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m10_13 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98"];
m10_85 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="value == null", span="102-102"];
m10_91 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="113-113"];
m10_92 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="114-114"];
m10_95 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="119-119"];
m10_97 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(parts[0]);", span="122-122"];
m10_98 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Value(parts[1]);", span="123-123"];
m10_87 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="107-107"];
m10_88 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var text = value.Substring(2)", span="109-109"];
m10_94 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="onError(new BadFormatTokenError(value))", span="118-118"];
m10_86 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''value'');", span="104-104"];
m10_89 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var equalIndex = text.IndexOf('=')", span="110-110"];
m10_96 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var parts = text.Split('=')", span="121-121"];
m10_90 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex <= 0", span="111-111"];
m10_93 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex == 1", span="116-116"];
m10_99 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98"];
m10_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m10_19 [cluster="Unk.Concat", file="Tokenizer.cs", label="Entry Unk.Concat", span=""];
m10_44 [cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs", label="Entry string.EqualsOrdinal(string)", span="34-34"];
m10_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m10_100 [cluster="string.IndexOf(char)", file="Tokenizer.cs", label="Entry string.IndexOf(char)", span="0-0"];
m10_39 [cluster="Unk.Select", file="Tokenizer.cs", label="Entry Unk.Select", span=""];
m10_40 [cluster="CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", file="Tokenizer.cs", label="Entry CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", span="69-69"];
m10_0 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m10_1 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="arguments == null", span="15-15"];
m10_5 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: var tokens = from arg in arguments\r\n                         from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new Token[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                         select token", span="20-26"];
m10_6 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: var unkTokens = from t in tokens where t.IsName() && !nameLookup(t.Text) select t", span="28-28"];
m10_2 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''arguments'');", span="15-15"];
m10_3 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="var errors = new List<Error>()", span="17-17"];
m10_4 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Action<Error> onError = e => errors.Add(e)", span="18-18"];
m10_7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: return StatePair.Create(tokens.Except(unkTokens), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30"];
m10_8 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m10_17 [cluster="Unk.Except", file="Tokenizer.cs", label="Entry Unk.Except", span=""];
m10_25 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m10_26 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="arguments == null", span="37-37"];
m10_28 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="39-39"];
m10_29 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="41-41"];
m10_30 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(t => Token.Value(t))", span="42-42"];
m10_32 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="return tokenizer(arguments);", span="45-45"];
m10_27 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''arguments'');", span="37-37"];
m10_31 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="return tokenizerResult.MapValue(tokens => tokens.Concat(values));", span="43-43"];
m10_33 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m10_24 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m10_79 [cluster="char.IsDigit(char)", file="Tokenizer.cs", label="Entry char.IsDigit(char)", span="0-0"];
m10_10 [cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m10_18 [cluster="UnknownOptionError.cstr", file="Tokenizer.cs", label="Entry UnknownOptionError.cstr", span=""];
m10_84 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m10_14 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48"];
m10_57 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value == null", span="52-52"];
m10_62 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Value(value);", span="63-63"];
m10_63 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield break;", span="64-64"];
m10_65 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="69-69"];
m10_66 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield break;", span="70-70"];
m10_68 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(first);", span="74-74"];
m10_74 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(n);", span="84-84"];
m10_76 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Value(text.Substring(seen.Count()));", span="93-93"];
m10_59 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="57-57"];
m10_60 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var text = value.Substring(1)", span="59-59"];
m10_64 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value.Length == 2", span="67-67"];
m10_72 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="!seen.Contains(c) && nameLookup(n)", span="81-81"];
m10_58 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''value'');", span="54-54"];
m10_61 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="char.IsDigit(text[0])", span="61-61"];
m10_67 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var first = text.Substring(0, 1)", span="73-73"];
m10_70 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="text.Substring(1)", span="78-78"];
m10_75 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="seen.Count() < text.Length", span="91-91"];
m10_69 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var seen = new List<char> { first[0] }", span="76-76"];
m10_73 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="seen.Add(c)", span="83-83"];
m10_71 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var n = new string(c, 1)", span="80-80"];
m10_77 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48"];
m10_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Tokenizer.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m10_83 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m10_78 [cluster="string.Substring(int)", file="Tokenizer.cs", label="Entry string.Substring(int)", span="0-0"];
m10_104 [file="Tokenizer.cs", label=errors, span=""];
m10_105 [file="Tokenizer.cs", label=values, span=""];
m11_13 [cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="46-46"];
m11_44 [cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                from t in tseq\r\n                select t;", span="50-57"];
m11_45 [cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="46-46"];
m11_18 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m11_68 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="59-59"];
m11_43 [cluster="CommandLine.Core.Token.IsName()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
m11_11 [cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="37-37"];
m11_36 [cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.Item1 == DescriptorType.Boolean, false)\r\n                   select t;", span="41-43"];
m11_37 [cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="37-37"];
m11_38 [cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m11_15 [cluster="Unk.Where", file="TokenPartitioner.cs", label="Entry Unk.Where", span=""];
m11_21 [cluster="Unk.Create", file="TokenPartitioner.cs", label="Entry Unk.Create", span=""];
m11_29 [cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", span="88-88"];
m11_93 [cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TokenPartitioner.cs", label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="90-90"];
m11_94 [cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", span="88-88"];
m11_78 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m11_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m11_90 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="82-82"];
m11_22 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="26-26"];
m11_26 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="30-30"];
m11_30 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="31-31"];
m11_33 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="33-33"];
m11_23 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: v.IsValue()", span="26-26"];
m11_24 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="26-26"];
m11_27 [cluster="lambda expression", file="TokenPartitioner.cs", label="CreateValue(t.Text,''true'')", span="30-30"];
m11_28 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="30-30"];
m11_31 [cluster="lambda expression", file="TokenPartitioner.cs", label="CreateValue(f.Text, s.Text)", span="31-31"];
m11_32 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="31-31"];
m11_34 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Text", span="33-33"];
m11_35 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="33-33"];
m11_40 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="42-42"];
m11_41 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.IsName() && info.Item1 == DescriptorType.Boolean", span="42-42"];
m11_42 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="42-42"];
m11_47 [cluster="lambda expression", file="TokenPartitioner.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="52-55"];
m11_46 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="51-55"];
m11_50 [cluster="lambda expression", file="TokenPartitioner.cs", label="info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }", span="54-54"];
m11_48 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="51-55"];
m11_49 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="53-54"];
m11_51 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="53-54"];
m11_55 [cluster="lambda expression", file="TokenPartitioner.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { } , new Token[] { })\r\n                            : new Token[] {}", span="66-71"];
m11_58 [cluster="lambda expression", file="TokenPartitioner.cs", label="info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { }", span="68-70"];
m11_54 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="65-71"];
m11_66 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Equals(f)", span="69-69"];
m11_56 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="65-71"];
m11_57 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="67-70"];
m11_59 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="67-70"];
m11_65 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="69-69"];
m11_69 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="69-69"];
m11_72 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="69-69"];
m11_67 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="69-69"];
m11_70 [cluster="lambda expression", file="TokenPartitioner.cs", label="v.IsValue()", span="69-69"];
m11_71 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="69-69"];
m11_73 [cluster="lambda expression", file="TokenPartitioner.cs", label=items, span="69-69"];
m11_74 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="69-69"];
m11_80 [cluster="lambda expression", file="TokenPartitioner.cs", label="f.IsName()\r\n                            ? CreateValue(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : CreateValue(string.Empty)", span="81-83"];
m11_79 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="80-83"];
m11_85 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Equals(f)", span="82-82"];
m11_81 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="80-83"];
m11_84 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="82-82"];
m11_87 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="82-82"];
m11_86 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="82-82"];
m11_88 [cluster="lambda expression", file="TokenPartitioner.cs", label="v.IsValue()", span="82-82"];
m11_89 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="82-82"];
m11_91 [cluster="lambda expression", file="TokenPartitioner.cs", label="x.Text", span="82-82"];
m11_92 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="82-82"];
m11_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16"];
m11_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var switches = PartitionSwitches(tokens, typeLookup)", span="20-20"];
m11_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var tokensExceptSwitches = tokens.Except(switches)", span="21-21"];
m11_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var scalars = PartitionScalars(tokensExceptSwitches, typeLookup)", span="22-22"];
m11_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var sequences = PartitionSequences(tokensExceptSwitchesAndScalars, typeLookup)", span="24-24"];
m11_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="return Tuple.Create(\r\n                    switches.Select(t => CreateValue(t.Text,''true''))\r\n                        .Concat(scalars.Pairwise((f, s) => CreateValue(f.Text, s.Text)))\r\n                        .Concat(SequenceTokensToKeyValuePairEnumerable(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="29-34"];
m11_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var tokensExceptSwitchesAndScalars = tokensExceptSwitches.Except(scalars)", span="23-23"];
m11_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var tokensExceptSwitchesAndScalarsAndSeq = tokensExceptSwitchesAndScalars.Except(sequences)", span="25-25"];
m11_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var values = tokensExceptSwitchesAndScalarsAndSeq.Where(v => v.IsValue())", span="26-26"];
m11_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var errors = tokensExceptSwitchesAndScalarsAndSeq.Except(values)", span="27-27"];
m11_10 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16"];
m11_63 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m11_60 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m11_19 [cluster="Unk.Concat", file="TokenPartitioner.cs", label="Entry Unk.Concat", span=""];
m11_14 [cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="60-60"];
m11_52 [cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>     \r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { } , new Token[] { })\r\n                            : new Token[] {})\r\n                from t in tseq\r\n                select t;", span="64-73"];
m11_53 [cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="60-60"];
m11_77 [cluster="Unk.Pairwise", file="TokenPartitioner.cs", label="Entry Unk.Pairwise", span=""];
m11_61 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m11_20 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="76-76"];
m11_75 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? CreateValue(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : CreateValue(string.Empty))\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", span="79-85"];
m11_76 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="76-76"];
m11_17 [cluster="Unk.Select", file="TokenPartitioner.cs", label="Entry Unk.Select", span=""];
m11_83 [cluster="Unk.CreateValue", file="TokenPartitioner.cs", label="Entry Unk.CreateValue", span=""];
m11_16 [cluster="Unk.Except", file="TokenPartitioner.cs", label="Entry Unk.Except", span=""];
m11_25 [cluster="CommandLine.Core.Token.IsValue()", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Token.IsValue()", span="77-77"];
m11_95 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m11_62 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="TokenPartitioner.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
m11_82 [cluster="Unk.ToArray", file="TokenPartitioner.cs", label="Entry Unk.ToArray", span=""];
m11_39 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitioner.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103"];
m11_64 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m11_96 [file="TokenPartitioner.cs", label=t, span=""];
m11_97 [file="TokenPartitioner.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", span=""];
m11_98 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m11_99 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m11_100 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m11_101 [file="TokenPartitioner.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", span=""];
m11_102 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m11_103 [file="TokenPartitioner.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m11_104 [file="TokenPartitioner.cs", label="CommandLine.Core.Token", span=""];
m12_0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m12_1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20"];
m12_2 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=green, community=0, file="TokenPartitionerTests.cs", label="0: var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, null, typeof(string), string.Empty, string.Empty),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, null, typeof(IEnumerable<int>), string.Empty, string.Empty)\r\n                }", span="21-25"];
m12_4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Item1.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34"];
m12_3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.GetDescriptorInfo(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31"];
m12_5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m12_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m12_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string)", span="15-15"];
m12_12 [cluster="Unk.True", file="TokenPartitionerTests.cs", label="Entry Unk.True", span=""];
m12_16 [cluster="CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m12_11 [cluster="Unk.All", file="TokenPartitionerTests.cs", label="Entry Unk.All", span=""];
m12_21 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m12_14 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.GetDescriptorInfo(name, specs, StringComparer.InvariantCulture)", span="30-30"];
m12_13 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="30-30"];
m12_18 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Item1.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34"];
m12_17 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m12_15 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="30-30"];
m12_19 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m12_22 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34"];
m12_23 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m12_24 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m12_8 [cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m12_10 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16"];
m12_25 [cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m12_20 [cluster="Unk.Any", file="TokenPartitionerTests.cs", label="Entry Unk.Any", span=""];
m12_9 [cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
m12_26 [file="TokenPartitionerTests.cs", label=specs, span=""];
m12_27 [file="TokenPartitionerTests.cs", label=result, span=""];
m12_28 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m3_33 -> m3_34  [key=0, style=solid];
m3_35 -> m3_9  [key=2, style=dotted];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_34  [color=darkorchid, key=3, label="Local variable double expectedResult", style=bold];
m3_34 -> m3_36  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_20  [key=2, style=dotted];
m3_37 -> m3_33  [color=blue, key=0, style=bold];
m3_123 -> m3_124  [color=green, key=0, style=solid];
m3_124 -> m3_125  [color=green, key=0, style=solid];
m3_124 -> m3_128  [color=green, key=2, style=dotted];
m3_124 -> m3_108  [color=green, key=2, style=dotted];
m3_124 -> m3_126  [color=green, key=1, label=expectedResult, style=dashed];
m3_125 -> m3_126  [color=green, key=0, style=solid];
m3_125 -> m3_9  [color=green, key=2, style=dotted];
m3_125 -> m3_129  [color=green, key=1, label="lambda expression", style=dashed];
m3_126 -> m3_127  [color=green, key=0, style=solid];
m3_126 -> m3_46  [color=green, key=2, style=dotted];
m3_126 -> m3_11  [color=green, key=2, style=dotted];
m3_127 -> m3_123  [color=blue, key=0, style=bold];
m3_132 -> m3_133  [color=green, key=0, style=solid];
m3_133 -> m3_134  [color=green, key=0, style=solid];
m3_133 -> m3_137  [color=green, key=2, style=dotted];
m3_133 -> m3_135  [color=green, key=1, label=expectedResult, style=dashed];
m3_134 -> m3_135  [color=green, key=0, style=solid];
m3_134 -> m3_9  [color=green, key=2, style=dotted];
m3_134 -> m3_138  [color=green, key=1, label="lambda expression", style=dashed];
m3_135 -> m3_136  [color=green, key=0, style=solid];
m3_135 -> m3_46  [color=green, key=2, style=dotted];
m3_135 -> m3_11  [color=green, key=2, style=dotted];
m3_136 -> m3_132  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_3 -> m3_9  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_4 -> m3_11  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_10  [key=2, style=dotted];
m3_1 -> m3_6  [key=2, style=dotted];
m3_1 -> m3_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_2 -> m3_7  [key=2, style=dotted];
m3_2 -> m3_8  [key=2, style=dotted];
m3_5 -> m3_0  [color=blue, key=0, style=bold];
m3_113 -> m3_114  [color=green, key=0, style=solid];
m3_114 -> m3_115  [color=green, key=0, style=solid];
m3_114 -> m3_118  [color=green, key=2, style=dotted];
m3_114 -> m3_108  [color=green, key=2, style=dotted];
m3_114 -> m3_116  [color=green, key=1, label=expectedResult, style=dashed];
m3_115 -> m3_116  [color=green, key=0, style=solid];
m3_115 -> m3_9  [color=green, key=2, style=dotted];
m3_115 -> m3_119  [color=green, key=1, label="lambda expression", style=dashed];
m3_116 -> m3_117  [color=green, key=0, style=solid];
m3_116 -> m3_46  [color=green, key=2, style=dotted];
m3_116 -> m3_11  [color=green, key=2, style=dotted];
m3_117 -> m3_113  [color=blue, key=0, style=bold];
m3_98 -> m3_99  [key=0, style=solid];
m3_119 -> m3_120  [color=green, key=0, style=solid];
m3_120 -> m3_121  [color=green, key=0, style=solid];
m3_120 -> m3_122  [color=green, key=2, style=dotted];
m3_121 -> m3_119  [color=blue, key=0, style=bold];
m3_129 -> m3_130  [color=green, key=0, style=solid];
m3_130 -> m3_131  [color=green, key=0, style=solid];
m3_130 -> m3_6  [color=green, key=2, style=dotted];
m3_131 -> m3_129  [color=blue, key=0, style=bold];
m3_138 -> m3_139  [color=green, key=0, style=solid];
m3_139 -> m3_140  [color=green, key=0, style=solid];
m3_139 -> m3_6  [color=green, key=2, style=dotted];
m3_140 -> m3_138  [color=blue, key=0, style=bold];
m3_22 -> m3_6  [key=2, style=dotted];
m3_22 -> m3_23  [key=0, style=solid];
m3_48 -> m3_6  [key=2, style=dotted];
m3_48 -> m3_49  [key=0, style=solid];
m3_147 -> m3_6  [key=2, style=dotted];
m3_147 -> m3_148  [key=0, style=solid];
m3_155 -> m3_6  [key=2, style=dotted];
m3_155 -> m3_156  [key=0, style=solid];
m3_12 -> m3_13  [key=0, style=solid];
m3_21 -> m3_22  [key=0, style=solid];
m3_29 -> m3_30  [key=0, style=solid];
m3_38 -> m3_39  [key=0, style=solid];
m3_47 -> m3_48  [key=0, style=solid];
m3_59 -> m3_60  [key=0, style=solid];
m3_68 -> m3_69  [key=0, style=solid];
m3_77 -> m3_78  [key=0, style=solid];
m3_109 -> m3_110  [key=0, style=solid];
m3_146 -> m3_147  [key=0, style=solid];
m3_154 -> m3_155  [key=0, style=solid];
m3_13 -> m3_14  [key=0, style=solid];
m3_23 -> m3_21  [color=blue, key=0, style=bold];
m3_49 -> m3_47  [color=blue, key=0, style=bold];
m3_148 -> m3_146  [color=blue, key=0, style=bold];
m3_156 -> m3_154  [color=blue, key=0, style=bold];
m3_14 -> m3_12  [color=blue, key=0, style=bold];
m3_31 -> m3_29  [color=blue, key=0, style=bold];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_32  [key=2, style=dotted];
m3_40 -> m3_38  [color=blue, key=0, style=bold];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_32  [key=2, style=dotted];
m3_61 -> m3_59  [color=blue, key=0, style=bold];
m3_60 -> m3_55  [key=2, style=dotted];
m3_60 -> m3_61  [key=0, style=solid];
m3_70 -> m3_68  [color=blue, key=0, style=bold];
m3_69 -> m3_67  [key=2, style=dotted];
m3_69 -> m3_70  [key=0, style=solid];
m3_79 -> m3_77  [color=blue, key=0, style=bold];
m3_78 -> m3_76  [key=2, style=dotted];
m3_78 -> m3_79  [key=0, style=solid];
m3_111 -> m3_109  [color=blue, key=0, style=bold];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_112  [key=2, style=dotted];
m3_88 -> m3_67  [key=2, style=dotted];
m3_88 -> m3_89  [key=0, style=solid];
m3_87 -> m3_88  [key=0, style=solid];
m3_89 -> m3_87  [color=blue, key=0, style=bold];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_90 -> m3_99  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_92 -> m3_90  [color=blue, key=0, style=bold];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_93  [key=2, style=dotted];
m3_91 -> m3_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_97  [key=2, style=dotted];
m3_95 -> m3_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_99 -> m3_100  [key=0, style=solid];
m3_99 -> m3_101  [key=2, style=dotted];
m3_94 -> m3_95  [key=0, style=solid];
m3_96 -> m3_94  [color=blue, key=0, style=bold];
m3_100 -> m3_98  [color=blue, key=0, style=bold];
m3_80 -> m3_81  [key=0, style=solid];
m3_84 -> m3_56  [key=2, style=dotted];
m3_84 -> m3_57  [key=2, style=dotted];
m3_84 -> m3_58  [key=2, style=dotted];
m3_84 -> m3_85  [key=0, style=solid];
m3_81 -> m3_67  [key=2, style=dotted];
m3_81 -> m3_84  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_81 -> m3_82  [key=0, style=solid];
m3_83 -> m3_84  [key=0, style=solid];
m3_83 -> m3_86  [key=2, style=dotted];
m3_83 -> m3_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_83 -> m3_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_82 -> m3_83  [key=0, style=solid];
m3_85 -> m3_80  [color=blue, key=0, style=bold];
m3_41 -> m3_42  [key=0, style=solid];
m3_43 -> m3_9  [key=2, style=dotted];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_44 -> m3_46  [key=2, style=dotted];
m3_44 -> m3_11  [key=2, style=dotted];
m3_44 -> m3_45  [key=0, style=solid];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_44  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_45 -> m3_41  [color=blue, key=0, style=bold];
m3_149 -> m3_150  [key=0, style=solid];
m3_151 -> m3_9  [key=2, style=dotted];
m3_151 -> m3_152  [key=0, style=solid];
m3_151 -> m3_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_152 -> m3_46  [key=2, style=dotted];
m3_152 -> m3_11  [key=2, style=dotted];
m3_152 -> m3_153  [key=0, style=solid];
m3_150 -> m3_137  [key=2, style=dotted];
m3_150 -> m3_151  [key=0, style=solid];
m3_150 -> m3_152  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_153 -> m3_149  [color=blue, key=0, style=bold];
m3_62 -> m3_63  [key=0, style=solid];
m3_64 -> m3_9  [key=2, style=dotted];
m3_64 -> m3_65  [key=0, style=solid];
m3_64 -> m3_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_67  [key=2, style=dotted];
m3_63 -> m3_65  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_56  [key=2, style=dotted];
m3_65 -> m3_57  [key=2, style=dotted];
m3_65 -> m3_58  [key=2, style=dotted];
m3_66 -> m3_62  [color=blue, key=0, style=bold];
m3_24 -> m3_25  [key=0, style=solid];
m3_26 -> m3_9  [key=2, style=dotted];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_25  [color=darkorchid, key=3, label="Local variable double expectedResult", style=bold];
m3_25 -> m3_27  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_20  [key=2, style=dotted];
m3_28 -> m3_24  [color=blue, key=0, style=bold];
m3_15 -> m3_16  [key=0, style=solid];
m3_17 -> m3_9  [key=2, style=dotted];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_16  [color=darkorchid, key=3, label="Local variable int expectedResult", style=bold];
m3_16 -> m3_18  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_20  [key=2, style=dotted];
m3_19 -> m3_15  [color=blue, key=0, style=bold];
m3_141 -> m3_142  [key=0, style=solid];
m3_143 -> m3_9  [key=2, style=dotted];
m3_143 -> m3_144  [key=0, style=solid];
m3_143 -> m3_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_144 -> m3_46  [key=2, style=dotted];
m3_144 -> m3_11  [key=2, style=dotted];
m3_144 -> m3_145  [key=0, style=solid];
m3_142 -> m3_137  [key=2, style=dotted];
m3_142 -> m3_143  [key=0, style=solid];
m3_142 -> m3_144  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_145 -> m3_141  [color=blue, key=0, style=bold];
m3_50 -> m3_51  [key=0, style=solid];
m3_52 -> m3_9  [key=2, style=dotted];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_55  [key=2, style=dotted];
m3_51 -> m3_53  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_56  [key=2, style=dotted];
m3_53 -> m3_57  [key=2, style=dotted];
m3_53 -> m3_58  [key=2, style=dotted];
m3_54 -> m3_50  [color=blue, key=0, style=bold];
m3_102 -> m3_103  [key=0, style=solid];
m3_103 -> m3_108  [key=2, style=dotted];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_107  [key=2, style=dotted];
m3_103 -> m3_105  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_104 -> m3_9  [key=2, style=dotted];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_105 -> m3_46  [key=2, style=dotted];
m3_105 -> m3_11  [key=2, style=dotted];
m3_105 -> m3_106  [key=0, style=solid];
m3_106 -> m3_102  [color=blue, key=0, style=bold];
m3_71 -> m3_72  [key=0, style=solid];
m3_73 -> m3_9  [key=2, style=dotted];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_76  [key=2, style=dotted];
m3_72 -> m3_74  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_56  [key=2, style=dotted];
m3_74 -> m3_57  [key=2, style=dotted];
m3_74 -> m3_58  [key=2, style=dotted];
m3_75 -> m3_71  [color=blue, key=0, style=bold];
m3_157 -> m3_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m3_158 -> m3_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m3_158 -> m3_99  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [color=green, key=0, style=solid];
m4_1 -> m4_6  [key=2, style=dotted];
m4_1 -> m4_3  [color=darkseagreen4, key=1, label=tokenPartitions, style=dashed];
m4_2 -> m4_3  [color=green, key=0, style=solid];
m4_2 -> m4_7  [color=green, key=2, style=dotted];
m4_2 -> m4_8  [color=green, key=2, style=dotted];
m4_2 -> m4_9  [color=green, key=2, style=dotted];
m4_2 -> m4_10  [color=green, key=2, style=dotted];
m4_2 -> m4_11  [color=green, key=2, style=dotted];
m4_2 -> m4_15  [color=green, key=1, label="lambda expression", style=dashed];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_12  [key=2, style=dotted];
m4_3 -> m4_13  [key=2, style=dotted];
m4_3 -> m4_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_3 -> m4_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_10  [key=2, style=dotted];
m4_4 -> m4_14  [key=2, style=dotted];
m4_4 -> m4_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_5 -> m4_0  [color=blue, key=0, style=bold];
m4_27 -> m4_28  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_19 -> m4_20  [key=0, style=solid];
m4_23 -> m4_24  [key=0, style=solid];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_18  [key=2, style=dotted];
m4_17 -> m4_15  [color=blue, key=0, style=bold];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_22  [key=2, style=dotted];
m4_21 -> m4_19  [color=blue, key=0, style=bold];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_26  [key=2, style=dotted];
m4_25 -> m4_23  [color=blue, key=0, style=bold];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_22  [key=2, style=dotted];
m4_28 -> m4_30  [key=2, style=dotted];
m4_29 -> m4_27  [color=blue, key=0, style=bold];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_1 -> m5_2  [key=0, style=solid];
m5_2 -> m5_3  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid];
m5_4 -> m5_5  [key=0, style=solid];
m5_5 -> m5_6  [key=0, style=solid];
m5_6 -> m5_0  [color=blue, key=0, style=bold];
m5_7 -> m5_8  [color=green, key=0, style=solid];
m5_8 -> m5_9  [color=green, key=0, style=solid];
m5_8 -> m5_0  [color=green, key=2, style=dotted];
m5_8 -> m5_10  [color=green, key=2, style=dotted];
m5_9 -> m5_7  [color=blue, key=0, style=bold];
m5_11 -> m5_1  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m5_11 -> m5_2  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m5_11 -> m5_3  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m5_11 -> m5_4  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m5_11 -> m5_5  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m6_4 -> m6_5  [key=0, style=solid];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_7  [key=2, style=dotted];
m6_6 -> m6_4  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_2 -> m6_3  [key=0, style=solid];
m6_3 -> m6_0  [color=blue, key=0, style=bold];
m6_7 -> m6_13  [key=0, style=solid];
m6_7 -> m6_15  [color=darkseagreen4, key=1, label=bool, style=dashed];
m6_7 -> m6_5  [color=darkorchid, key=3, label="Parameter variable bool disposing", style=bold];
m6_7 -> m6_9  [color=darkorchid, key=3, label="Parameter variable bool disposing", style=bold];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [key=0, style=solid];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_20  [key=0, style=solid];
m6_14 -> m6_20  [key=0, style=solid];
m6_16 -> m6_17  [key=0, style=solid];
m6_16 -> m6_19  [key=0, style=solid];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_21  [key=2, style=dotted];
m6_19 -> m6_20  [key=0, style=solid];
m6_18 -> m6_19  [key=0, style=solid];
m6_20 -> m6_7  [color=blue, key=0, style=bold];
m6_8 -> m6_9  [key=0, style=solid];
m6_9 -> m6_10  [key=0, style=solid];
m6_9 -> m6_7  [key=2, style=dotted];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_12  [key=2, style=dotted];
m6_11 -> m6_8  [color=blue, key=0, style=bold];
m6_22 -> m6_1  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m6_22 -> m6_2  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m6_22 -> m6_5  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m6_22 -> m6_9  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m6_22 -> m6_10  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m6_22 -> m6_13  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m6_22 -> m6_16  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m6_22 -> m6_17  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m6_22 -> m6_18  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m6_22 -> m6_19  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m7_28 -> m7_0  [color=darkorchid, key=3, label="Field variable CommandLine.Core.SpecificationType tag", style=bold];
m7_25 -> m7_0  [color=darkorchid, key=3, label="Field variable System.Type conversionType", style=bold];
m7_8 -> m7_9  [color=green, key=0, style=solid];
m7_8 -> m7_12  [color=red, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m7_8 -> m7_14  [color=red, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m7_8 -> m7_18  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m7_9 -> m7_10  [color=green, key=0, style=solid];
m7_9 -> m7_21  [color=green, key=2, style=dotted];
m7_9 -> m7_16  [color=green, key=1, label=attrs, style=dashed];
m7_12 -> m7_13  [color=green, key=0, style=solid];
m7_12 -> m7_24  [color=green, key=2, style=dotted];
m7_12 -> m7_25  [color=green, key=2, style=dotted];
m7_12 -> m7_14  [color=green, key=1, label=spec, style=dashed];
m7_12 -> m7_15  [color=green, key=1, label=spec, style=dashed];
m7_14 -> m7_20  [color=red, key=0, style=solid];
m7_14 -> m7_26  [color=red, key=2, style=dotted];
m7_14 -> m7_27  [color=red, key=2, style=dotted];
m7_18 -> m7_20  [key=0, style=solid];
m7_18 -> m7_24  [key=2, style=dotted];
m7_18 -> m7_28  [key=2, style=dotted];
m7_10 -> m7_11  [color=green, key=0, style=solid];
m7_10 -> m7_22  [color=green, key=2, style=dotted];
m7_10 -> m7_12  [color=green, key=1, label=oa, style=dashed];
m7_16 -> m7_17  [color=green, key=0, style=solid];
m7_16 -> m7_22  [key=2, style=dotted];
m7_16 -> m7_18  [color=darkseagreen4, key=1, label=va, style=dashed];
m7_11 -> m7_12  [color=green, key=0, style=solid];
m7_11 -> m7_16  [color=green, key=0, style=solid];
m7_11 -> m7_23  [color=green, key=2, style=dotted];
m7_13 -> m7_14  [color=green, key=0, style=solid];
m7_13 -> m7_15  [color=green, key=0, style=solid];
m7_15 -> m7_20  [key=0, style=solid];
m7_17 -> m7_18  [color=green, key=0, style=solid];
m7_17 -> m7_19  [color=green, key=0, style=solid];
m7_17 -> m7_23  [color=green, key=2, style=dotted];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_29  [key=2, style=dotted];
m7_20 -> m7_8  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_2  [color=darkseagreen4, key=1, label=bool, style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_0 -> m7_4  [color=darkseagreen4, key=1, label=int, style=dashed];
m7_0 -> m7_5  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<object>", style=dashed];
m7_0 -> m7_6  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m7_1 -> m7_2  [key=0, style=solid];
m7_2 -> m7_3  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid];
m7_4 -> m7_5  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_6 -> m7_7  [key=0, style=solid];
m7_7 -> m7_0  [color=blue, key=0, style=bold];
m7_30 -> m7_1  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m7_30 -> m7_2  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m7_30 -> m7_3  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m7_30 -> m7_4  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m7_30 -> m7_5  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m7_30 -> m7_6  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_15 -> m8_16  [key=0, style=solid];
m8_15 -> m8_17  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m8_15 -> m8_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m8_15 -> m8_15  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Core.Specification> ThrowingValidate", style=bold];
m8_16 -> m8_17  [key=0, style=solid];
m8_16 -> m8_19  [key=0, style=solid];
m8_16 -> m8_24  [color=darkseagreen4, key=1, label=guard, style=dashed];
m8_16 -> m8_18  [color=darkseagreen4, key=1, label=guard, style=dashed];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_16  [key=0, style=solid];
m8_17 -> m8_21  [key=2, style=dotted];
m8_17 -> m8_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_19 -> m8_20  [key=0, style=solid];
m8_18 -> m8_20  [key=0, style=solid];
m8_18 -> m8_22  [key=2, style=dotted];
m8_20 -> m8_15  [color=blue, key=0, style=bold];
m8_0 -> m8_1  [key=0, style=solid];
m8_0 -> m8_3  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_3  [key=0, style=solid];
m8_3 -> m8_4  [key=0, style=solid];
m8_2 -> m8_4  [key=0, style=solid];
m8_2 -> m8_5  [key=2, style=dotted];
m8_4 -> m8_0  [color=blue, key=0, style=bold];
m8_6 -> m8_7  [key=0, style=solid];
m8_6 -> m8_9  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_9  [key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid];
m8_8 -> m8_10  [key=0, style=solid];
m8_8 -> m8_5  [key=2, style=dotted];
m8_10 -> m8_6  [color=blue, key=0, style=bold];
m8_23 -> m8_24  [key=0, style=solid];
m8_24 -> m8_25  [key=0, style=solid];
m8_24 -> m8_26  [key=2, style=dotted];
m8_25 -> m8_23  [color=blue, key=0, style=bold];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> m8_30  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_27 -> m8_34  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_27 -> m8_35  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_30  [key=0, style=solid];
m8_30 -> m8_31  [key=0, style=solid];
m8_30 -> m8_33  [key=0, style=solid];
m8_30 -> m8_40  [key=2, style=dotted];
m8_34 -> m8_35  [key=0, style=solid];
m8_34 -> m8_36  [color=darkseagreen4, key=1, label=min, style=dashed];
m8_35 -> m8_36  [key=0, style=solid];
m8_35 -> m8_37  [color=darkseagreen4, key=1, label=max, style=dashed];
m8_29 -> m8_39  [key=0, style=solid];
m8_29 -> m8_5  [key=2, style=dotted];
m8_31 -> m8_32  [key=0, style=solid];
m8_33 -> m8_34  [key=0, style=solid];
m8_32 -> m8_39  [key=0, style=solid];
m8_32 -> m8_41  [key=2, style=dotted];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_38  [key=0, style=solid];
m8_37 -> m8_39  [key=0, style=solid];
m8_37 -> m8_41  [key=2, style=dotted];
m8_38 -> m8_39  [key=0, style=solid];
m8_38 -> m8_42  [key=2, style=dotted];
m8_39 -> m8_27  [color=blue, key=0, style=bold];
m8_11 -> m8_12  [color=green, key=0, style=solid];
m8_12 -> m8_13  [color=green, key=0, style=solid];
m8_12 -> m8_14  [color=green, key=2, style=dotted];
m8_13 -> m8_11  [color=blue, key=0, style=bold];
m8_43 -> m8_24  [color=darkseagreen4, key=1, label=guard, style=dashed];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m9_2 -> m9_0  [color=blue, key=0, style=bold];
m9_48 -> m9_49  [key=0, style=solid];
m9_49 -> m9_50  [key=0, style=solid];
m9_49 -> m9_52  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m9_50 -> m9_48  [color=blue, key=0, style=bold];
m9_62 -> m9_63  [key=0, style=solid];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_10  [key=2, style=dotted];
m9_4 -> m9_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_4 -> m9_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_3 -> m9_4  [key=0, style=solid];
m9_5 -> m9_6  [key=0, style=solid];
m9_5 -> m9_11  [key=2, style=dotted];
m9_5 -> m9_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_15 -> m9_16  [key=0, style=solid];
m9_7 -> m9_9  [key=0, style=solid];
m9_7 -> m9_13  [key=2, style=dotted];
m9_7 -> m9_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_6 -> m9_7  [key=0, style=solid];
m9_6 -> m9_8  [key=0, style=solid];
m9_6 -> m9_12  [key=2, style=dotted];
m9_20 -> m9_21  [key=0, style=solid];
m9_8 -> m9_9  [key=0, style=solid];
m9_8 -> m9_14  [key=2, style=dotted];
m9_9 -> m9_3  [color=blue, key=0, style=bold];
m9_23 -> m9_24  [key=0, style=solid];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_18  [key=2, style=dotted];
m9_16 -> m9_19  [key=2, style=dotted];
m9_17 -> m9_15  [color=blue, key=0, style=bold];
m9_21 -> m9_22  [key=0, style=solid];
m9_22 -> m9_20  [color=blue, key=0, style=bold];
m9_24 -> m9_25  [key=0, style=solid];
m9_24 -> m9_26  [key=2, style=dotted];
m9_24 -> m9_27  [key=2, style=dotted];
m9_24 -> m9_28  [key=2, style=dotted];
m9_25 -> m9_23  [color=blue, key=0, style=bold];
m9_33 -> m9_34  [color=green, key=0, style=solid];
m9_33 -> m9_10  [color=green, key=2, style=dotted];
m9_33 -> m9_39  [color=green, key=1, label="lambda expression", style=dashed];
m9_33 -> m9_35  [color=green, key=1, label=options, style=dashed];
m9_32 -> m9_33  [color=green, key=0, style=solid];
m9_34 -> m9_35  [color=green, key=0, style=solid];
m9_34 -> m9_36  [color=green, key=0, style=solid];
m9_34 -> m9_38  [color=green, key=2, style=dotted];
m9_39 -> m9_40  [color=green, key=0, style=solid];
m9_35 -> m9_37  [color=green, key=0, style=solid];
m9_35 -> m9_13  [color=green, key=2, style=dotted];
m9_35 -> m9_43  [color=green, key=1, label="lambda expression", style=dashed];
m9_36 -> m9_37  [color=green, key=0, style=solid];
m9_36 -> m9_14  [color=green, key=2, style=dotted];
m9_36 -> m9_56  [color=green, key=0, style=solid];
m9_37 -> m9_32  [color=blue, key=0, style=bold];
m9_43 -> m9_44  [color=green, key=0, style=solid];
m9_40 -> m9_41  [color=green, key=0, style=solid];
m9_40 -> m9_42  [color=green, key=2, style=dotted];
m9_41 -> m9_39  [color=blue, key=0, style=bold];
m9_44 -> m9_45  [color=green, key=0, style=solid];
m9_44 -> m9_46  [color=green, key=2, style=dotted];
m9_44 -> m9_47  [color=green, key=2, style=dotted];
m9_44 -> m9_28  [color=green, key=2, style=dotted];
m9_45 -> m9_43  [color=blue, key=0, style=bold];
m9_52 -> m9_53  [key=0, style=solid];
m9_52 -> m9_10  [key=2, style=dotted];
m9_52 -> m9_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_52 -> m9_54  [color=darkseagreen4, key=1, label=options, style=dashed];
m9_51 -> m9_52  [key=0, style=solid];
m9_53 -> m9_54  [key=0, style=solid];
m9_53 -> m9_55  [key=0, style=solid];
m9_53 -> m9_38  [key=2, style=dotted];
m9_53 -> m9_36  [color=green, key=0, style=solid];
m9_57 -> m9_58  [key=0, style=solid];
m9_54 -> m9_56  [key=0, style=solid];
m9_54 -> m9_13  [key=2, style=dotted];
m9_54 -> m9_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_55 -> m9_56  [key=0, style=solid];
m9_55 -> m9_14  [key=2, style=dotted];
m9_56 -> m9_51  [color=blue, key=0, style=bold];
m9_58 -> m9_59  [key=0, style=solid];
m9_58 -> m9_60  [key=2, style=dotted];
m9_58 -> m9_19  [key=2, style=dotted];
m9_58 -> m9_61  [key=2, style=dotted];
m9_59 -> m9_57  [color=blue, key=0, style=bold];
m9_63 -> m9_64  [key=0, style=solid];
m9_63 -> m9_65  [key=2, style=dotted];
m9_63 -> m9_47  [key=2, style=dotted];
m9_63 -> m9_28  [key=2, style=dotted];
m9_64 -> m9_62  [color=blue, key=0, style=bold];
m9_29 -> m9_30  [color=green, key=0, style=solid];
m9_30 -> m9_31  [color=green, key=0, style=solid];
m9_30 -> m9_33  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m9_31 -> m9_29  [color=blue, key=0, style=bold];
m10_54 -> m10_55  [key=0, style=solid];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_24  [key=2, style=dotted];
m10_21 -> m10_22  [key=0, style=solid];
m10_23 -> m10_21  [color=blue, key=0, style=bold];
m10_41 -> m10_42  [key=0, style=solid];
m10_45 -> m10_46  [key=0, style=solid];
m10_48 -> m10_49  [key=0, style=solid];
m10_51 -> m10_52  [key=0, style=solid];
m10_55 -> m10_56  [key=0, style=solid];
m10_55 -> m10_19  [key=2, style=dotted];
m10_42 -> m10_43  [key=0, style=solid];
m10_42 -> m10_44  [key=2, style=dotted];
m10_43 -> m10_41  [color=blue, key=0, style=bold];
m10_46 -> m10_47  [key=0, style=solid];
m10_46 -> m10_44  [key=2, style=dotted];
m10_47 -> m10_45  [color=blue, key=0, style=bold];
m10_49 -> m10_50  [key=0, style=solid];
m10_49 -> m10_44  [key=2, style=dotted];
m10_50 -> m10_48  [color=blue, key=0, style=bold];
m10_52 -> m10_53  [key=0, style=solid];
m10_52 -> m10_12  [key=2, style=dotted];
m10_53 -> m10_51  [color=blue, key=0, style=bold];
m10_56 -> m10_54  [color=blue, key=0, style=bold];
m10_13 -> m10_85  [key=0, style=solid];
m10_13 -> m10_91  [color=crimson, key=0, style=bold];
m10_13 -> m10_92  [color=crimson, key=0, style=bold];
m10_13 -> m10_95  [color=crimson, key=0, style=bold];
m10_13 -> m10_97  [color=crimson, key=0, style=bold];
m10_13 -> m10_98  [color=crimson, key=0, style=bold];
m10_13 -> m10_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_13 -> m10_88  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_13 -> m10_94  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_85 -> m10_86  [key=0, style=solid];
m10_85 -> m10_87  [key=0, style=solid];
m10_91 -> m10_92  [key=0, style=solid];
m10_91 -> m10_80  [key=2, style=dotted];
m10_92 -> m10_93  [key=0, style=solid];
m10_95 -> m10_96  [key=0, style=solid];
m10_97 -> m10_98  [key=0, style=solid];
m10_97 -> m10_80  [key=2, style=dotted];
m10_98 -> m10_99  [key=0, style=solid];
m10_98 -> m10_12  [key=2, style=dotted];
m10_87 -> m10_88  [key=0, style=solid];
m10_87 -> m10_99  [key=0, style=solid];
m10_87 -> m10_11  [key=2, style=dotted];
m10_88 -> m10_89  [key=0, style=solid];
m10_88 -> m10_78  [key=2, style=dotted];
m10_88 -> m10_91  [color=darkseagreen4, key=1, label=text, style=dashed];
m10_88 -> m10_96  [color=darkseagreen4, key=1, label=text, style=dashed];
m10_94 -> m10_95  [key=0, style=solid];
m10_94 -> m10_101  [key=2, style=dotted];
m10_94 -> m10_102  [key=2, style=dotted];
m10_86 -> m10_99  [key=0, style=solid];
m10_86 -> m10_9  [key=2, style=dotted];
m10_89 -> m10_90  [key=0, style=solid];
m10_89 -> m10_100  [key=2, style=dotted];
m10_89 -> m10_93  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
m10_96 -> m10_97  [key=0, style=solid];
m10_96 -> m10_103  [key=2, style=dotted];
m10_96 -> m10_98  [color=darkseagreen4, key=1, label=parts, style=dashed];
m10_90 -> m10_91  [key=0, style=solid];
m10_90 -> m10_93  [key=0, style=solid];
m10_93 -> m10_94  [key=0, style=solid];
m10_93 -> m10_96  [key=0, style=solid];
m10_99 -> m10_13  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_5  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_0 -> m10_6  [color=green, key=1, label="System.Func<string, bool>", style=dashed];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=0, style=solid];
m10_5 -> m10_6  [color=green, key=0, style=solid];
m10_5 -> m10_11  [color=green, key=2, style=dotted];
m10_5 -> m10_12  [color=green, key=2, style=dotted];
m10_5 -> m10_13  [color=green, key=2, style=dotted];
m10_5 -> m10_14  [color=green, key=2, style=dotted];
m10_5 -> m10_5  [color=green, key=1, label=arg, style=dashed];
m10_5 -> m10_7  [color=green, key=1, label=tokens, style=dashed];
m10_6 -> m10_7  [color=green, key=0, style=solid];
m10_6 -> m10_15  [color=green, key=2, style=dotted];
m10_6 -> m10_16  [color=green, key=2, style=dotted];
m10_6 -> m10_6  [color=green, key=1, label=t, style=dashed];
m10_2 -> m10_8  [key=0, style=solid];
m10_2 -> m10_9  [key=2, style=dotted];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_10  [key=2, style=dotted];
m10_3 -> m10_22  [color=darkseagreen4, key=1, label=errors, style=dashed];
m10_3 -> m10_7  [color=green, key=1, label=errors, style=dashed];
m10_4 -> m10_5  [color=green, key=0, style=solid];
m10_4 -> m10_22  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m10_4 -> m10_4  [color=darkorchid, key=3, label="Local variable System.Action<CommandLine.Error> onError", style=bold];
m10_7 -> m10_8  [color=green, key=0, style=solid];
m10_7 -> m10_17  [color=green, key=2, style=dotted];
m10_7 -> m10_18  [color=green, key=2, style=dotted];
m10_7 -> m10_19  [color=green, key=2, style=dotted];
m10_7 -> m10_20  [color=green, key=2, style=dotted];
m10_7 -> m10_7  [color=green, key=1, label=t, style=dashed];
m10_8 -> m10_0  [color=blue, key=0, style=bold];
m10_25 -> m10_26  [key=0, style=solid];
m10_25 -> m10_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_25 -> m10_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_25 -> m10_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_25 -> m10_32  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_26 -> m10_27  [key=0, style=solid];
m10_26 -> m10_28  [key=0, style=solid];
m10_28 -> m10_29  [key=0, style=solid];
m10_28 -> m10_32  [key=0, style=solid];
m10_28 -> m10_34  [key=2, style=dotted];
m10_28 -> m10_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_29 -> m10_30  [key=0, style=solid];
m10_29 -> m10_35  [key=2, style=dotted];
m10_29 -> m10_36  [key=2, style=dotted];
m10_29 -> m10_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_29 -> m10_31  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m10_30 -> m10_31  [key=0, style=solid];
m10_30 -> m10_37  [key=2, style=dotted];
m10_30 -> m10_38  [key=2, style=dotted];
m10_30 -> m10_39  [key=2, style=dotted];
m10_30 -> m10_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_30 -> m10_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_30 -> m10_55  [color=darkseagreen4, key=1, label=values, style=dashed];
m10_32 -> m10_33  [key=0, style=solid];
m10_32 -> m10_36  [key=2, style=dotted];
m10_27 -> m10_33  [key=0, style=solid];
m10_27 -> m10_9  [key=2, style=dotted];
m10_31 -> m10_33  [key=0, style=solid];
m10_31 -> m10_40  [key=2, style=dotted];
m10_31 -> m10_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_33 -> m10_25  [color=blue, key=0, style=bold];
m10_14 -> m10_57  [key=0, style=solid];
m10_14 -> m10_62  [color=crimson, key=0, style=bold];
m10_14 -> m10_63  [color=crimson, key=0, style=bold];
m10_14 -> m10_65  [color=crimson, key=0, style=bold];
m10_14 -> m10_66  [color=crimson, key=0, style=bold];
m10_14 -> m10_68  [color=crimson, key=0, style=bold];
m10_14 -> m10_74  [color=crimson, key=0, style=bold];
m10_14 -> m10_76  [color=crimson, key=0, style=bold];
m10_14 -> m10_59  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_14 -> m10_60  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_14 -> m10_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m10_14 -> m10_72  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m10_57 -> m10_58  [key=0, style=solid];
m10_57 -> m10_59  [key=0, style=solid];
m10_62 -> m10_63  [key=0, style=solid];
m10_62 -> m10_12  [key=2, style=dotted];
m10_63 -> m10_64  [key=0, style=solid];
m10_65 -> m10_66  [key=0, style=solid];
m10_65 -> m10_80  [key=2, style=dotted];
m10_66 -> m10_67  [key=0, style=solid];
m10_68 -> m10_69  [key=0, style=solid];
m10_68 -> m10_80  [key=2, style=dotted];
m10_74 -> m10_70  [key=0, style=solid];
m10_74 -> m10_80  [key=2, style=dotted];
m10_76 -> m10_77  [key=0, style=solid];
m10_76 -> m10_84  [key=2, style=dotted];
m10_76 -> m10_78  [key=2, style=dotted];
m10_76 -> m10_12  [key=2, style=dotted];
m10_59 -> m10_60  [key=0, style=solid];
m10_59 -> m10_77  [key=0, style=solid];
m10_60 -> m10_61  [key=0, style=solid];
m10_60 -> m10_78  [key=2, style=dotted];
m10_60 -> m10_65  [color=darkseagreen4, key=1, label=text, style=dashed];
m10_60 -> m10_67  [color=darkseagreen4, key=1, label=text, style=dashed];
m10_60 -> m10_70  [color=darkseagreen4, key=1, label=text, style=dashed];
m10_60 -> m10_75  [color=darkseagreen4, key=1, label=text, style=dashed];
m10_60 -> m10_76  [color=darkseagreen4, key=1, label=text, style=dashed];
m10_64 -> m10_65  [key=0, style=solid];
m10_64 -> m10_67  [key=0, style=solid];
m10_72 -> m10_73  [key=0, style=solid];
m10_72 -> m10_75  [key=0, style=solid];
m10_72 -> m10_83  [key=2, style=dotted];
m10_72 -> m10_36  [key=2, style=dotted];
m10_58 -> m10_77  [key=0, style=solid];
m10_58 -> m10_9  [key=2, style=dotted];
m10_61 -> m10_62  [key=0, style=solid];
m10_61 -> m10_64  [key=0, style=solid];
m10_61 -> m10_79  [key=2, style=dotted];
m10_67 -> m10_68  [key=0, style=solid];
m10_67 -> m10_81  [key=2, style=dotted];
m10_67 -> m10_69  [color=darkseagreen4, key=1, label=first, style=dashed];
m10_70 -> m10_71  [key=0, style=solid];
m10_70 -> m10_75  [key=0, style=solid];
m10_70 -> m10_78  [key=2, style=dotted];
m10_70 -> m10_72  [color=darkseagreen4, key=1, label=c, style=dashed];
m10_70 -> m10_73  [color=darkseagreen4, key=1, label=c, style=dashed];
m10_75 -> m10_76  [key=0, style=solid];
m10_75 -> m10_77  [key=0, style=solid];
m10_75 -> m10_84  [key=2, style=dotted];
m10_69 -> m10_70  [key=0, style=solid];
m10_69 -> m10_10  [key=2, style=dotted];
m10_69 -> m10_72  [color=darkseagreen4, key=1, label=seen, style=dashed];
m10_69 -> m10_73  [color=darkseagreen4, key=1, label=seen, style=dashed];
m10_69 -> m10_75  [color=darkseagreen4, key=1, label=seen, style=dashed];
m10_69 -> m10_76  [color=darkseagreen4, key=1, label=seen, style=dashed];
m10_73 -> m10_74  [key=0, style=solid];
m10_73 -> m10_24  [key=2, style=dotted];
m10_71 -> m10_72  [key=0, style=solid];
m10_71 -> m10_82  [key=2, style=dotted];
m10_71 -> m10_74  [color=darkseagreen4, key=1, label=n, style=dashed];
m10_77 -> m10_14  [color=blue, key=0, style=bold];
m10_104 -> m10_22  [color=darkseagreen4, key=1, label=errors, style=dashed];
m10_105 -> m10_55  [color=darkseagreen4, key=1, label=values, style=dashed];
m11_13 -> m11_44  [key=0, style=solid];
m11_13 -> m11_47  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m11_44 -> m11_45  [key=0, style=solid];
m11_44 -> m11_18  [key=2, style=dotted];
m11_44 -> m11_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_44 -> m11_44  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m11_45 -> m11_13  [color=blue, key=0, style=bold];
m11_11 -> m11_36  [key=0, style=solid];
m11_36 -> m11_37  [key=0, style=solid];
m11_36 -> m11_38  [key=2, style=dotted];
m11_36 -> m11_39  [key=2, style=dotted];
m11_36 -> m11_36  [color=darkseagreen4, key=1, label=t, style=dashed];
m11_36 -> m11_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_36 -> m11_41  [color=darkseagreen4, key=1, label=t, style=dashed];
m11_37 -> m11_11  [color=blue, key=0, style=bold];
m11_29 -> m11_93  [key=0, style=solid];
m11_29 -> m11_9  [color=darkorchid, key=3, label="Parameter variable string[] values", style=bold];
m11_93 -> m11_94  [key=0, style=solid];
m11_93 -> m11_95  [key=2, style=dotted];
m11_94 -> m11_29  [color=blue, key=0, style=bold];
m11_90 -> m11_91  [key=0, style=solid];
m11_22 -> m11_23  [color=green, key=0, style=solid];
m11_26 -> m11_27  [key=0, style=solid];
m11_30 -> m11_31  [key=0, style=solid];
m11_33 -> m11_34  [key=0, style=solid];
m11_23 -> m11_24  [color=green, key=0, style=solid];
m11_23 -> m11_25  [color=green, key=2, style=dotted];
m11_24 -> m11_22  [color=blue, key=0, style=bold];
m11_27 -> m11_28  [key=0, style=solid];
m11_27 -> m11_29  [key=2, style=dotted];
m11_28 -> m11_26  [color=blue, key=0, style=bold];
m11_31 -> m11_32  [key=0, style=solid];
m11_31 -> m11_29  [key=2, style=dotted];
m11_32 -> m11_30  [color=blue, key=0, style=bold];
m11_34 -> m11_35  [key=0, style=solid];
m11_35 -> m11_33  [color=blue, key=0, style=bold];
m11_40 -> m11_41  [key=0, style=solid];
m11_41 -> m11_42  [key=0, style=solid];
m11_41 -> m11_43  [key=2, style=dotted];
m11_42 -> m11_40  [color=blue, key=0, style=bold];
m11_47 -> m11_48  [key=0, style=solid];
m11_47 -> m11_43  [key=2, style=dotted];
m11_47 -> m11_25  [key=2, style=dotted];
m11_47 -> m11_38  [key=2, style=dotted];
m11_47 -> m11_39  [key=2, style=dotted];
m11_47 -> m11_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_46 -> m11_47  [key=0, style=solid];
m11_46 -> m11_50  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_50 -> m11_51  [key=0, style=solid];
m11_48 -> m11_46  [color=blue, key=0, style=bold];
m11_49 -> m11_50  [key=0, style=solid];
m11_51 -> m11_49  [color=blue, key=0, style=bold];
m11_55 -> m11_56  [key=0, style=solid];
m11_55 -> m11_43  [key=2, style=dotted];
m11_55 -> m11_25  [key=2, style=dotted];
m11_55 -> m11_38  [key=2, style=dotted];
m11_55 -> m11_39  [key=2, style=dotted];
m11_55 -> m11_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_58 -> m11_59  [key=0, style=solid];
m11_58 -> m11_60  [key=2, style=dotted];
m11_58 -> m11_61  [key=2, style=dotted];
m11_58 -> m11_62  [key=2, style=dotted];
m11_58 -> m11_63  [key=2, style=dotted];
m11_58 -> m11_64  [key=2, style=dotted];
m11_58 -> m11_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_58 -> m11_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_58 -> m11_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_54 -> m11_55  [key=0, style=solid];
m11_54 -> m11_58  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_54 -> m11_66  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_66 -> m11_67  [key=0, style=solid];
m11_66 -> m11_68  [key=2, style=dotted];
m11_56 -> m11_54  [color=blue, key=0, style=bold];
m11_57 -> m11_58  [key=0, style=solid];
m11_59 -> m11_57  [color=blue, key=0, style=bold];
m11_65 -> m11_66  [key=0, style=solid];
m11_69 -> m11_70  [key=0, style=solid];
m11_72 -> m11_73  [key=0, style=solid];
m11_67 -> m11_65  [color=blue, key=0, style=bold];
m11_70 -> m11_71  [key=0, style=solid];
m11_70 -> m11_25  [key=2, style=dotted];
m11_71 -> m11_69  [color=blue, key=0, style=bold];
m11_73 -> m11_74  [key=0, style=solid];
m11_74 -> m11_72  [color=blue, key=0, style=bold];
m11_80 -> m11_81  [key=0, style=solid];
m11_80 -> m11_43  [key=2, style=dotted];
m11_80 -> m11_60  [key=2, style=dotted];
m11_80 -> m11_61  [key=2, style=dotted];
m11_80 -> m11_17  [key=2, style=dotted];
m11_80 -> m11_82  [key=2, style=dotted];
m11_80 -> m11_83  [key=2, style=dotted];
m11_80 -> m11_29  [key=2, style=dotted];
m11_80 -> m11_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_80 -> m11_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_80 -> m11_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_79 -> m11_80  [key=0, style=solid];
m11_79 -> m11_85  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_85 -> m11_86  [key=0, style=solid];
m11_85 -> m11_68  [key=2, style=dotted];
m11_81 -> m11_79  [color=blue, key=0, style=bold];
m11_84 -> m11_85  [key=0, style=solid];
m11_87 -> m11_88  [key=0, style=solid];
m11_86 -> m11_84  [color=blue, key=0, style=bold];
m11_88 -> m11_89  [key=0, style=solid];
m11_88 -> m11_25  [key=2, style=dotted];
m11_89 -> m11_87  [color=blue, key=0, style=bold];
m11_91 -> m11_92  [key=0, style=solid];
m11_92 -> m11_90  [color=blue, key=0, style=bold];
m11_0 -> m11_1  [color=green, key=0, style=solid];
m11_0 -> m11_2  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m11_0 -> m11_3  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m11_0 -> m11_5  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m11_1 -> m11_2  [color=green, key=0, style=solid];
m11_1 -> m11_11  [color=green, key=2, style=dotted];
m11_1 -> m11_9  [color=green, key=1, label=switches, style=dashed];
m11_2 -> m11_3  [color=green, key=0, style=solid];
m11_2 -> m11_12  [color=green, key=2, style=dotted];
m11_2 -> m11_4  [color=green, key=1, label=tokensExceptSwitches, style=dashed];
m11_3 -> m11_4  [color=green, key=0, style=solid];
m11_3 -> m11_13  [color=green, key=2, style=dotted];
m11_3 -> m11_9  [color=green, key=1, label=scalars, style=dashed];
m11_5 -> m11_6  [color=green, key=0, style=solid];
m11_5 -> m11_14  [color=green, key=2, style=dotted];
m11_5 -> m11_9  [color=green, key=1, label=sequences, style=dashed];
m11_9 -> m11_10  [key=0, style=solid];
m11_9 -> m11_17  [key=2, style=dotted];
m11_9 -> m11_18  [key=2, style=dotted];
m11_9 -> m11_19  [key=2, style=dotted];
m11_9 -> m11_20  [key=2, style=dotted];
m11_9 -> m11_21  [key=2, style=dotted];
m11_9 -> m11_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_9 -> m11_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_9 -> m11_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_4 -> m11_5  [color=green, key=0, style=solid];
m11_4 -> m11_12  [color=green, key=2, style=dotted];
m11_4 -> m11_6  [color=green, key=1, label=tokensExceptSwitchesAndScalars, style=dashed];
m11_6 -> m11_7  [color=green, key=0, style=solid];
m11_6 -> m11_12  [color=green, key=2, style=dotted];
m11_6 -> m11_8  [color=green, key=1, label=tokensExceptSwitchesAndScalarsAndSeq, style=dashed];
m11_7 -> m11_8  [color=green, key=0, style=solid];
m11_7 -> m11_15  [color=green, key=2, style=dotted];
m11_7 -> m11_22  [color=green, key=1, label="lambda expression", style=dashed];
m11_7 -> m11_9  [color=green, key=1, label=values, style=dashed];
m11_8 -> m11_9  [color=green, key=0, style=solid];
m11_8 -> m11_16  [color=green, key=2, style=dotted];
m11_10 -> m11_0  [color=blue, key=0, style=bold];
m11_14 -> m11_52  [key=0, style=solid];
m11_14 -> m11_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m11_14 -> m11_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m11_52 -> m11_53  [key=0, style=solid];
m11_52 -> m11_18  [key=2, style=dotted];
m11_52 -> m11_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_52 -> m11_52  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m11_53 -> m11_14  [color=blue, key=0, style=bold];
m11_20 -> m11_75  [key=0, style=solid];
m11_20 -> m11_80  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m11_75 -> m11_76  [key=0, style=solid];
m11_75 -> m11_77  [key=2, style=dotted];
m11_75 -> m11_78  [key=2, style=dotted];
m11_75 -> m11_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_75 -> m11_75  [color=darkseagreen4, key=1, label=t, style=dashed];
m11_76 -> m11_20  [color=blue, key=0, style=bold];
m11_25 -> m11_5  [color=green, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<CommandLine.Core.Token> tokens", style=bold];
m11_96 -> m11_41  [color=darkseagreen4, key=1, label=t, style=dashed];
m11_97 -> m11_47  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m11_98 -> m11_50  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_99 -> m11_50  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_100 -> m11_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m11_100 -> m11_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m11_101 -> m11_55  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m11_102 -> m11_58  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_102 -> m11_66  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_103 -> m11_80  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m11_104 -> m11_85  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [color=green, key=0, style=solid];
m12_1 -> m12_6  [key=2, style=dotted];
m12_1 -> m12_4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m12_2 -> m12_3  [color=green, key=0, style=solid];
m12_2 -> m12_7  [color=green, key=2, style=dotted];
m12_2 -> m12_14  [color=green, key=1, label=specs, style=dashed];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_11  [key=2, style=dotted];
m12_4 -> m12_12  [key=2, style=dotted];
m12_4 -> m12_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_8  [key=2, style=dotted];
m12_3 -> m12_9  [key=2, style=dotted];
m12_3 -> m12_10  [key=2, style=dotted];
m12_3 -> m12_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_3 -> m12_18  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_5 -> m12_0  [color=blue, key=0, style=bold];
m12_21 -> m12_22  [key=0, style=solid];
m12_14 -> m12_15  [key=0, style=solid];
m12_14 -> m12_16  [key=2, style=dotted];
m12_13 -> m12_14  [key=0, style=solid];
m12_18 -> m12_19  [key=0, style=solid];
m12_18 -> m12_20  [key=2, style=dotted];
m12_18 -> m12_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_18 -> m12_22  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m12_17 -> m12_18  [key=0, style=solid];
m12_15 -> m12_13  [color=blue, key=0, style=bold];
m12_19 -> m12_17  [color=blue, key=0, style=bold];
m12_22 -> m12_23  [key=0, style=solid];
m12_22 -> m12_24  [key=2, style=dotted];
m12_22 -> m12_25  [key=2, style=dotted];
m12_22 -> m12_22  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m12_23 -> m12_21  [color=blue, key=0, style=bold];
m12_26 -> m12_14  [color=darkseagreen4, key=1, label=specs, style=dashed];
m12_27 -> m12_18  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_28 -> m12_22  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
}
