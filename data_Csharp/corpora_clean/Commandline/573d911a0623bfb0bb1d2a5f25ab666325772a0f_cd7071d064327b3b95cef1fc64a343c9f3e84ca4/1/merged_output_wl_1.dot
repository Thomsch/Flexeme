digraph  {
n82 [label="System.StringComparer", span=""];
n83 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n84 [label="System.StringComparer", span=""];
n85 [label=firstArg, span=""];
n86 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n87 [label="System.StringComparer", span=""];
n88 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
n89 [label=string, span=""];
n90 [label="System.StringComparer", span=""];
n0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
n1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-30"];
n5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23"];
n12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23"];
n6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-24"];
n16 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="24-24"];
n2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
n3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="21-26"];
n9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="23-23"];
n7 [cluster="lambda expression", label="return explodedTokens;", span="25-25"];
n10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
n15 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
n8 [cluster="lambda expression", label="Exit lambda expression", span="21-26"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="23-23"];
n14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
n18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
n19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="arguments.Empty()", span="40-40"];
n20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, label="0: return MakeNotParsed(new NullInstance().GetType(), types, new NoVerbSelectedError());", span="42-42"];
n21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var firstArg = arguments.First()", span="45-45"];
n22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-49"];
n40 [cluster="lambda expression", label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="48-49"];
n23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var verbs = Verb.SelectFromTypes(types)", span="51-51"];
n24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, label="0: return preprocCompare(''help'')\r\n                ? MakeNotParsed(new NullInstance().GetType(), types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(new NullInstance().GetType(), types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="53-59"];
n26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
n31 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
n32 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
n25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
n33 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n27 [cluster="CommandLine.NullInstance.NullInstance()", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
n28 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n34 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
n35 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
n36 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
n30 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
n37 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
n38 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
n29 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
n39 [cluster="lambda expression", label="Entry lambda expression", span="47-49"];
n41 [cluster="lambda expression", label="Exit lambda expression", span="47-49"];
n42 [cluster="System.StringComparer.Equals(string, string)", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
n43 [cluster="string.Concat(string, string)", label="Entry string.Concat(string, string)", span="0-0"];
n44 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, label="0: return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(new NullInstance().GetType(), verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="69-78"];
n53 [cluster="lambda expression", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="69-69"];
n56 [cluster="lambda expression", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="73-73"];
n61 [cluster="lambda expression", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="73-73"];
n45 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="62-62"];
n46 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n47 [cluster="Unk.>", label="Entry Unk.>", span=""];
n48 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
n49 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n50 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
n51 [cluster="Unk.MakeNotParsed", label="Entry Unk.MakeNotParsed", span=""];
n52 [cluster="lambda expression", label="Entry lambda expression", span="69-69"];
n55 [cluster="lambda expression", label="Entry lambda expression", span="72-73"];
n63 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
n54 [cluster="lambda expression", label="Exit lambda expression", span="69-69"];
n57 [cluster="lambda expression", label="Exit lambda expression", span="72-73"];
n58 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n59 [cluster="Unk.AutoDefault", label="Entry Unk.AutoDefault", span=""];
n60 [cluster="lambda expression", label="Entry lambda expression", span="73-73"];
n62 [cluster="lambda expression", label="Exit lambda expression", span="73-73"];
n64 [cluster="lambda expression", color=red, community=0, label="0: v.Item2", span="78-78"];
n65 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
n66 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92"];
n73 [cluster="lambda expression", label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87"];
n67 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
n68 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
n69 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
n70 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
n71 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n72 [cluster="lambda expression", label="Entry lambda expression", span="87-87"];
n75 [cluster="lambda expression", label="Entry lambda expression", span="90-90"];
n74 [cluster="lambda expression", label="Exit lambda expression", span="87-87"];
n76 [cluster="lambda expression", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90"];
n77 [cluster="lambda expression", label="Exit lambda expression", span="90-90"];
n78 [cluster="HelpVerbRequestedError.cstr", label="Entry HelpVerbRequestedError.cstr", span=""];
n79 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", color=red, community=0, label="0: return new NotParsed<object>(typeInfo, types, errors);", span="98-98"];
n80 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
n81 [cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="152-152"];
d20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: return MakeNotParsed(types, new NoVerbSelectedError());", span="42-42"];
d3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
d28 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
d24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="53-59"];
d34 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
d42 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="69-78"];
d46 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
d62 [cluster="lambda expression", color=green, community=0, label="0: v.Item2", span="78-78"];
d77 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", color=green, community=0, label="0: return new NotParsed<object>(typeof(NullInstance), types, errors);", span="97-97"];
d78 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
n82 -> n5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n82 -> n12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n82 -> n6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n82 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n83 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n83 -> n16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n84 -> n40  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n85 -> n40  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
n86 -> n53  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n86 -> n56  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n86 -> n61  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n87 -> n53  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n87 -> n56  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n87 -> n61  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n88 -> n56  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
n89 -> n73  [color=darkseagreen4, key=1, label=string, style=dashed];
n90 -> n73  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
n0 -> d3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n1 -> n1  [color=darkorchid, key=3, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> ", style=bold];
n1 -> d3  [key=2, style=dotted];
n5 -> n6  [key=0, style=solid];
n5 -> n9  [key=2, style=dotted];
n5 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n10  [key=2, style=dotted];
n6 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n3 -> n19  [key=0, style=solid];
n3 -> n20  [color=red, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
n3 -> n21  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n3 -> n22  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n40  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n23  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
n3 -> n24  [color=red, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
n3 -> n30  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
n4 -> n5  [key=0, style=solid];
n4 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n4 -> n6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n4 -> n16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n11 -> n12  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n8 -> n4  [color=blue, key=0, style=bold];
n13 -> n11  [color=blue, key=0, style=bold];
n17 -> n15  [color=blue, key=0, style=bold];
n19 -> n20  [color=red, key=0, style=solid];
n19 -> n21  [key=0, style=solid];
n19 -> n26  [key=2, style=dotted];
n19 -> d20  [color=green, key=0, style=solid];
n20 -> n25  [color=red, key=0, style=solid];
n20 -> n27  [color=red, key=2, style=dotted];
n20 -> n28  [color=red, key=2, style=dotted];
n20 -> n29  [color=red, key=2, style=dotted];
n20 -> n30  [color=red, key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n31  [key=2, style=dotted];
n21 -> n40  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
n22 -> n23  [key=0, style=solid];
n22 -> n40  [color=darkseagreen4, key=1, label=string, style=dashed];
n22 -> n24  [color=red, key=1, label=preprocCompare, style=dashed];
n22 -> n22  [color=darkorchid, key=3, label="Local variable System.Func<string, bool> preprocCompare", style=bold];
n22 -> d24  [color=green, key=1, label=preprocCompare, style=dashed];
n40 -> n41  [key=0, style=solid];
n40 -> n42  [key=2, style=dotted];
n40 -> n43  [key=2, style=dotted];
n23 -> n24  [color=red, key=0, style=solid];
n23 -> n32  [key=2, style=dotted];
n23 -> d24  [color=green, key=0, style=solid];
n24 -> n25  [color=red, key=0, style=solid];
n24 -> n33  [color=red, key=2, style=dotted];
n24 -> n27  [color=red, key=2, style=dotted];
n24 -> n28  [color=red, key=2, style=dotted];
n24 -> n34  [color=red, key=2, style=dotted];
n24 -> n35  [color=red, key=2, style=dotted];
n24 -> n36  [color=red, key=2, style=dotted];
n24 -> n30  [color=red, key=2, style=dotted];
n24 -> n37  [color=red, key=2, style=dotted];
n24 -> n38  [color=red, key=2, style=dotted];
n25 -> n3  [color=blue, key=0, style=bold];
n25 -> d3  [color=blue, key=0, style=bold];
n36 -> n66  [key=0, style=solid];
n36 -> n73  [color=darkseagreen4, key=1, label=string, style=dashed];
n30 -> n79  [color=red, key=0, style=solid];
n30 -> n48  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types", style=bold];
n30 -> n36  [color=darkorchid, key=3, label="Parameter variable CommandLine.Error[] errors", style=bold];
n38 -> n44  [color=red, key=0, style=solid];
n38 -> n53  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n38 -> n56  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
n38 -> n61  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n38 -> d42  [color=green, key=0, style=solid];
n39 -> n40  [key=0, style=solid];
n41 -> n39  [color=blue, key=0, style=bold];
n44 -> n45  [color=red, key=0, style=solid];
n44 -> n46  [color=red, key=2, style=dotted];
n44 -> n47  [color=red, key=2, style=dotted];
n44 -> n34  [color=red, key=2, style=dotted];
n44 -> n48  [color=red, key=2, style=dotted];
n44 -> n27  [color=red, key=2, style=dotted];
n44 -> n28  [color=red, key=2, style=dotted];
n44 -> n49  [color=red, key=2, style=dotted];
n44 -> n50  [color=red, key=2, style=dotted];
n44 -> n31  [color=red, key=2, style=dotted];
n44 -> n51  [color=red, key=2, style=dotted];
n44 -> n52  [color=red, key=1, label="lambda expression", style=dashed];
n44 -> n55  [color=red, key=1, label="lambda expression", style=dashed];
n44 -> n63  [color=red, key=1, label="lambda expression", style=dashed];
n53 -> n54  [key=0, style=solid];
n53 -> n31  [key=2, style=dotted];
n53 -> n42  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n56 -> n58  [key=2, style=dotted];
n56 -> n59  [key=2, style=dotted];
n56 -> n60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n61 -> n62  [key=0, style=solid];
n61 -> n31  [key=2, style=dotted];
n61 -> n42  [key=2, style=dotted];
n45 -> n38  [color=blue, key=0, style=bold];
n52 -> n53  [key=0, style=solid];
n55 -> n56  [key=0, style=solid];
n63 -> n64  [color=red, key=0, style=solid];
n63 -> d62  [color=green, key=0, style=solid];
n54 -> n52  [color=blue, key=0, style=bold];
n57 -> n55  [color=blue, key=0, style=bold];
n60 -> n61  [key=0, style=solid];
n62 -> n60  [color=blue, key=0, style=bold];
n64 -> n65  [color=red, key=0, style=solid];
n65 -> n63  [color=blue, key=0, style=bold];
n66 -> n67  [key=0, style=solid];
n66 -> n68  [key=2, style=dotted];
n66 -> n69  [key=2, style=dotted];
n66 -> n70  [key=2, style=dotted];
n66 -> n71  [key=2, style=dotted];
n66 -> n72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n66 -> n75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n73 -> n74  [key=0, style=solid];
n73 -> n42  [key=2, style=dotted];
n67 -> n36  [color=blue, key=0, style=bold];
n67 -> d34  [color=blue, key=0, style=bold];
n72 -> n73  [key=0, style=solid];
n75 -> n76  [key=0, style=solid];
n74 -> n72  [color=blue, key=0, style=bold];
n76 -> n77  [key=0, style=solid];
n76 -> n78  [key=2, style=dotted];
n77 -> n75  [color=blue, key=0, style=bold];
n79 -> n80  [color=red, key=0, style=solid];
n79 -> n81  [color=red, key=2, style=dotted];
n80 -> n30  [color=blue, key=0, style=bold];
d20 -> n25  [color=green, key=0, style=solid];
d20 -> n29  [color=green, key=2, style=dotted];
d20 -> d28  [color=green, key=2, style=dotted];
d3 -> d20  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
d3 -> d24  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
d3 -> n19  [key=0, style=solid];
d3 -> n21  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> n22  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> n40  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> n23  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
d3 -> d28  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
d28 -> d77  [color=green, key=0, style=solid];
d28 -> d46  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types", style=bold];
d28 -> d34  [color=darkorchid, key=3, label="Parameter variable CommandLine.Error[] errors", style=bold];
d24 -> n25  [color=green, key=0, style=solid];
d24 -> n33  [color=green, key=2, style=dotted];
d24 -> n34  [color=green, key=2, style=dotted];
d24 -> n35  [color=green, key=2, style=dotted];
d24 -> d34  [color=green, key=2, style=dotted];
d24 -> d28  [color=green, key=2, style=dotted];
d24 -> n37  [color=green, key=2, style=dotted];
d24 -> n38  [color=green, key=2, style=dotted];
d34 -> n66  [key=0, style=solid];
d34 -> n73  [color=darkseagreen4, key=1, label=string, style=dashed];
d42 -> n45  [color=green, key=0, style=solid];
d42 -> n46  [color=green, key=2, style=dotted];
d42 -> n47  [color=green, key=2, style=dotted];
d42 -> n34  [color=green, key=2, style=dotted];
d42 -> d46  [color=green, key=2, style=dotted];
d42 -> n49  [color=green, key=2, style=dotted];
d42 -> n50  [color=green, key=2, style=dotted];
d42 -> n31  [color=green, key=2, style=dotted];
d42 -> n51  [color=green, key=2, style=dotted];
d42 -> n52  [color=green, key=1, label="lambda expression", style=dashed];
d42 -> n55  [color=green, key=1, label="lambda expression", style=dashed];
d42 -> n63  [color=green, key=1, label="lambda expression", style=dashed];
d62 -> n65  [color=green, key=0, style=solid];
d77 -> d78  [color=green, key=0, style=solid];
d77 -> n81  [color=green, key=2, style=dotted];
d78 -> d28  [color=blue, key=0, style=bold];
}
