digraph  {
m0_38 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate", file="InstanceBuilder.cs"];
m0_54 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="38-38", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="InstanceBuilder.cs"];
m0_3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_19 [label="var instance = factory()", span="40-40", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_22 [label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="49-49", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_24 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="57-57", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_26 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer))", span="61-63", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_27 [label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="65-69", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_28 [label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="71-74", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_29 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         NameInfo.FromOptionSpecification(optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))))", span="76-78", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_20 [label="var specProps = instance.GetType().GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="42-43", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_23 [label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    instance,\r\n                    new[] { new HelpRequestedError() });", span="51-54", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_31 [label="instance = instance\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsJust(),\r\n                    sp => sp.Value.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                    sp => sp.Specification.DefaultValue.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing(),\r\n                    sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="82-93", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="InstanceBuilder.cs"];
m0_21 [label="var optionSpecs = (from pt in specProps select pt.Specification)\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="45-47", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_25 [label="var tokens = tokenizerResult.Value", span="59-59", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_33 [label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="98-105", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_30 [label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="80-80", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_32 [label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup)\r\n                .OfType<Just<Error>>().Select(e => e.Value)", span="95-96", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_34 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="InstanceBuilder.cs"];
m0_79 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="InstanceBuilder.cs"];
m0_46 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="InstanceBuilder.cs"];
m0_72 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_83 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="InstanceBuilder.cs"];
m0_99 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26", cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", file="InstanceBuilder.cs"];
m0_49 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilder.cs"];
m0_58 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="InstanceBuilder.cs"];
m0_87 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="InstanceBuilder.cs"];
m0_64 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="InstanceBuilder.cs"];
m0_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m0_91 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs"];
m0_42 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="InstanceBuilder.cs"];
m0_37 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="12-12", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="InstanceBuilder.cs"];
m0_51 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="InstanceBuilder.cs"];
m0_35 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs"];
m0_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs"];
m0_36 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="InstanceBuilder.cs"];
m0_106 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="22-22", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer))", span="23-25", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_16 [label="NameLookup.WithSeparator(name, optionSpecs, nameComparer)", span="25-25", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_4 [label="Entry lambda expression", span="20-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_11 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_7 [label="return explodedTokens;", span="26-26", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_15 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_8 [label="Exit lambda expression", span="20-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_13 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_17 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_66 [label="TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer)", span="63-63", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_70 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="68-68", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_74 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="74-74", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_77 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="78-78", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_59 [label="Entry lambda expression", span="42-43", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_65 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_69 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_73 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_76 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_80 [label="Entry lambda expression", span="84-84", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_84 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_88 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_92 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_95 [label="Entry lambda expression", span="90-92", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_100 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_60 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="42-43", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_61 [label="Exit lambda expression", span="42-43", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_67 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_71 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_75 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_78 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_81 [label="sp.Value.IsJust()", span="84-84", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_82 [label="Exit lambda expression", span="84-84", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_85 [label="sp.Value.FromJust()", span="85-85", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_86 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_89 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="87-87", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_90 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_93 [label="sp.Specification.DefaultValue.FromJust()", span="88-88", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_94 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_96 [label="sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing()", span="90-92", cluster="lambda expression", color=red, community=0, file="InstanceBuilder.cs"];
m0_97 [label="Exit lambda expression", span="90-92", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_101 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="93-93", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_102 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_107 [label="e.Value", span="96-96", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_108 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_41 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceBuilder.cs"];
m0_44 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs"];
m0_50 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs"];
m0_57 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="InstanceBuilder.cs"];
m0_104 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="InstanceBuilder.cs"];
m0_18 [label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m0_56 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="InstanceBuilder.cs"];
m0_98 [label="Entry System.Type.ToDescriptorKind()", span="22-22", cluster="System.Type.ToDescriptorKind()", file="InstanceBuilder.cs"];
m0_105 [label="Entry System.Type.CreateEmptyArray()", span="81-81", cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs"];
m0_103 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="InstanceBuilder.cs"];
m0_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilder.cs"];
m0_62 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="67-67", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs"];
m0_47 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs"];
m0_55 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", file="InstanceBuilder.cs"];
m0_63 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="InstanceBuilder.cs"];
m0_39 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs"];
m0_68 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m0_43 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilder.cs"];
m0_52 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="InstanceBuilder.cs"];
m0_45 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilder.cs"];
m0_53 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs"];
m0_48 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="InstanceBuilder.cs"];
m0_0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-30", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_109 [label="System.StringComparer", span="", file="InstanceBuilder.cs"];
m0_110 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceBuilder.cs"];
m0_111 [label="System.StringComparer", span="", file="InstanceBuilder.cs"];
m0_112 [label=optionSpecs, span="", file="InstanceBuilder.cs"];
m0_113 [label="System.Globalization.CultureInfo", span="", file="InstanceBuilder.cs"];
m0_114 [label=token, span="", file="InstanceBuilder.cs"];
m1_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NameLookupTests.cs"];
m1_6 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NameLookupTests.cs"];
m1_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="NameLookupTests.cs"];
m1_10 [label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, typeof(IEnumerable<string>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())}", span="18-19", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=green, community=0, file="NameLookupTests.cs"];
m1_1 [label="var expected = Maybe.Just(''.'')", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_3 [label="var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_4 [label="expected.ShouldBeEquivalentTo(result)", span="25-25", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs"];
m1_11 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs"];
m2_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapperTests.cs"];
m2_12 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="OptionMapperTests.cs"];
m2_13 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="OptionMapperTests.cs"];
m2_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs"];
m2_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m2_11 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="OptionMapperTests.cs"];
m2_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="OptionMapperTests.cs"];
m2_27 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=red, community=0, file="OptionMapperTests.cs"];
m2_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_4 [label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="39-42", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m2_28 [label="Entry lambda expression", span="40-42", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_16 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_20 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_24 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_18 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_21 [label="pt.Specification.IsOption()", span="33-33", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_22 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_25 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_26 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_29 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="40-42", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_30 [label="Exit lambda expression", span="40-42", cluster="lambda expression", file="OptionMapperTests.cs"];
m2_31 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="OptionMapperTests.cs"];
m2_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs"];
m2_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs"];
m2_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="OptionMapperTests.cs"];
m2_10 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="OptionMapperTests.cs"];
m2_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs"];
m3_25 [label="Entry CSharpx.Maybe.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="142-142", cluster="CSharpx.Maybe.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="OptionSpecification.cs"];
m3_26 [label="T1 value1", span="144-144", cluster="CSharpx.Maybe.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="OptionSpecification.cs"];
m3_27 [label="return maybe.MatchJust(out value1) ? func(value1) : Maybe.Nothing<T2>();", span="145-145", cluster="CSharpx.Maybe.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="OptionSpecification.cs"];
m3_28 [label="Exit CSharpx.Maybe.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="142-142", cluster="CSharpx.Maybe.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="OptionSpecification.cs"];
m3_47 [label="Entry Unk.Just", span="", cluster="Unk.Just", file="OptionSpecification.cs"];
m3_65 [label="Entry CSharpx.Maybe<System.Tuple<T1, T2>>.MatchJust<T1, T2>(out T1, out T2)", span="230-230", cluster="CSharpx.Maybe<System.Tuple<T1, T2>>.MatchJust<T1, T2>(out T1, out T2)", file="OptionSpecification.cs"];
m3_146 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="OptionSpecification.cs"];
m3_55 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="OptionSpecification.cs"];
m3_12 [label="Entry CSharpx.Just<T>.Just(T)", span="89-89", cluster="CSharpx.Just<T>.Just(T)", file="OptionSpecification.cs"];
m3_13 [label="this.value = value", span="92-92", cluster="CSharpx.Just<T>.Just(T)", file="OptionSpecification.cs"];
m3_14 [label="Exit CSharpx.Just<T>.Just(T)", span="89-89", cluster="CSharpx.Just<T>.Just(T)", file="OptionSpecification.cs"];
m3_29 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="OptionSpecification.cs"];
m3_48 [label="Entry CSharpx.MaybeExtensions.Match<T>(CSharpx.Maybe<T>, System.Action<T>, System.Action)", span="201-201", cluster="CSharpx.MaybeExtensions.Match<T>(CSharpx.Maybe<T>, System.Action<T>, System.Action)", file="OptionSpecification.cs"];
m3_49 [label="T value", span="203-203", cluster="CSharpx.MaybeExtensions.Match<T>(CSharpx.Maybe<T>, System.Action<T>, System.Action)", file="OptionSpecification.cs"];
m3_50 [label="maybe.MatchJust(out value)", span="204-204", cluster="CSharpx.MaybeExtensions.Match<T>(CSharpx.Maybe<T>, System.Action<T>, System.Action)", file="OptionSpecification.cs"];
m3_51 [label="ifJust(value)", span="206-206", cluster="CSharpx.MaybeExtensions.Match<T>(CSharpx.Maybe<T>, System.Action<T>, System.Action)", file="OptionSpecification.cs"];
m3_53 [label="ifNothing()", span="209-209", cluster="CSharpx.MaybeExtensions.Match<T>(CSharpx.Maybe<T>, System.Action<T>, System.Action)", file="OptionSpecification.cs"];
m3_52 [label="return;", span="207-207", cluster="CSharpx.MaybeExtensions.Match<T>(CSharpx.Maybe<T>, System.Action<T>, System.Action)", file="OptionSpecification.cs"];
m3_54 [label="Exit CSharpx.MaybeExtensions.Match<T>(CSharpx.Maybe<T>, System.Action<T>, System.Action)", span="201-201", cluster="CSharpx.MaybeExtensions.Match<T>(CSharpx.Maybe<T>, System.Action<T>, System.Action)", file="OptionSpecification.cs"];
m3_130 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="OptionSpecification.cs"];
m3_92 [label="Entry CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)", span="257-257", cluster="CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)", file="OptionSpecification.cs"];
m3_145 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="OptionSpecification.cs"];
m3_86 [label="Entry CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="274-274", cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", file="OptionSpecification.cs"];
m3_87 [label="return Maybe.Map(maybe, selector);", span="278-278", cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", file="OptionSpecification.cs"];
m3_88 [label="Exit CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="274-274", cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", file="OptionSpecification.cs"];
m3_135 [label="Entry CSharpx.MaybeExtensions.MapValueOrDefault<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.MaybeExtensions.MapValueOrDefault<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", file="OptionSpecification.cs"];
m3_136 [label="T1 value1", span="379-379", cluster="CSharpx.MaybeExtensions.MapValueOrDefault<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", file="OptionSpecification.cs"];
m3_137 [label="return maybe.MatchJust(out value1) ? func(value1) : noneValue;", span="380-380", cluster="CSharpx.MaybeExtensions.MapValueOrDefault<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", file="OptionSpecification.cs"];
m3_138 [label="Exit CSharpx.MaybeExtensions.MapValueOrDefault<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.MaybeExtensions.MapValueOrDefault<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", file="OptionSpecification.cs"];
m3_96 [label="Entry CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="265-265", cluster="CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", file="OptionSpecification.cs"];
m3_66 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="OptionSpecification.cs"];
m3_18 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="OptionSpecification.cs"];
m3_19 [label="return new Just<T>(value);", span="126-126", cluster="CSharpx.Maybe.Just<T>(T)", file="OptionSpecification.cs"];
m3_20 [label="Exit CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="OptionSpecification.cs"];
m3_41 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="OptionSpecification.cs"];
m3_42 [label="Entry CSharpx.Maybe.OfEither<TLeft, TRight>(Either<TLeft, TRight>)", span="178-178", cluster="CSharpx.Maybe.OfEither<TLeft, TRight>(Either<TLeft, TRight>)", file="OptionSpecification.cs"];
m3_43 [label="either.Tag == EitherType.Right", span="180-180", cluster="CSharpx.Maybe.OfEither<TLeft, TRight>(Either<TLeft, TRight>)", file="OptionSpecification.cs"];
m3_44 [label="return Maybe.Just(((Right<TLeft, TRight>)either).Value);", span="182-182", cluster="CSharpx.Maybe.OfEither<TLeft, TRight>(Either<TLeft, TRight>)", file="OptionSpecification.cs"];
m3_45 [label="return Maybe.Nothing<TRight>();", span="184-184", cluster="CSharpx.Maybe.OfEither<TLeft, TRight>(Either<TLeft, TRight>)", file="OptionSpecification.cs"];
m3_46 [label="Exit CSharpx.Maybe.OfEither<TLeft, TRight>(Either<TLeft, TRight>)", span="178-178", cluster="CSharpx.Maybe.OfEither<TLeft, TRight>(Either<TLeft, TRight>)", file="OptionSpecification.cs"];
m3_97 [label="Entry lambda expression", span="292-292", cluster="lambda expression", file="OptionSpecification.cs"];
m3_94 [label="valueSelector(sourceValue)\n                            .Map(resultValue => resultSelector(sourceValue, resultValue))", span="291-292", cluster="lambda expression", file="OptionSpecification.cs"];
m3_98 [label="resultSelector(sourceValue, resultValue)", span="292-292", cluster="lambda expression", file="OptionSpecification.cs"];
m3_93 [label="Entry lambda expression", span="290-292", cluster="lambda expression", file="OptionSpecification.cs"];
m3_95 [label="Exit lambda expression", span="290-292", cluster="lambda expression", file="OptionSpecification.cs"];
m3_99 [label="Exit lambda expression", span="292-292", cluster="lambda expression", file="OptionSpecification.cs"];
m3_139 [label="Entry CSharpx.MaybeExtensions.ToEnumerable<T>(CSharpx.Maybe<T>)", span="386-386", cluster="CSharpx.MaybeExtensions.ToEnumerable<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_140 [label="T value", span="388-388", cluster="CSharpx.MaybeExtensions.ToEnumerable<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_141 [label="maybe.MatchJust(out value)", span="389-389", cluster="CSharpx.MaybeExtensions.ToEnumerable<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_142 [label="return Enumerable.Empty<T>().Concat(new[] { value });", span="391-391", cluster="CSharpx.MaybeExtensions.ToEnumerable<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_143 [label="return Enumerable.Empty<T>();", span="393-393", cluster="CSharpx.MaybeExtensions.ToEnumerable<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_144 [label="Exit CSharpx.MaybeExtensions.ToEnumerable<T>(CSharpx.Maybe<T>)", span="386-386", cluster="CSharpx.MaybeExtensions.ToEnumerable<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_112 [label="Entry CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="326-326", cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_113 [label="return maybe.Tag == MaybeType.Just;", span="328-328", cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_114 [label="Exit CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="326-326", cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_131 [label="Entry CSharpx.MaybeExtensions.GetValueOrDefault<T>(CSharpx.Maybe<T>, T)", span="368-368", cluster="CSharpx.MaybeExtensions.GetValueOrDefault<T>(CSharpx.Maybe<T>, T)", file="OptionSpecification.cs"];
m3_132 [label="T value", span="370-370", cluster="CSharpx.MaybeExtensions.GetValueOrDefault<T>(CSharpx.Maybe<T>, T)", file="OptionSpecification.cs"];
m3_133 [label="return maybe.MatchJust(out value) ? value : noneValue;", span="371-371", cluster="CSharpx.MaybeExtensions.GetValueOrDefault<T>(CSharpx.Maybe<T>, T)", file="OptionSpecification.cs"];
m3_134 [label="Exit CSharpx.MaybeExtensions.GetValueOrDefault<T>(CSharpx.Maybe<T>, T)", span="368-368", cluster="CSharpx.MaybeExtensions.GetValueOrDefault<T>(CSharpx.Maybe<T>, T)", file="OptionSpecification.cs"];
m3_80 [label="Entry CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="257-257", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="OptionSpecification.cs"];
m3_81 [label="return Maybe.Bind(maybe, func);", span="259-259", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="OptionSpecification.cs"];
m3_82 [label="Exit CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="257-257", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", file="OptionSpecification.cs"];
m3_30 [label="Entry CSharpx.Maybe.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="153-153", cluster="CSharpx.Maybe.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="OptionSpecification.cs"];
m3_31 [label="T1 value1", span="155-155", cluster="CSharpx.Maybe.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="OptionSpecification.cs"];
m3_32 [label="return maybe.MatchJust(out value1) ? Maybe.Just(func(value1)) : Maybe.Nothing<T2>();", span="156-156", cluster="CSharpx.Maybe.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="OptionSpecification.cs"];
m3_33 [label="Exit CSharpx.Maybe.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="153-153", cluster="CSharpx.Maybe.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="OptionSpecification.cs"];
m3_115 [label="Entry CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="334-334", cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_116 [label="return maybe.Tag == MaybeType.Nothing;", span="336-336", cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_117 [label="Exit CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="334-334", cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_124 [label="Entry CSharpx.MaybeExtensions.FromJustOrFail<T>(CSharpx.Maybe<T>, System.Exception)", span="355-355", cluster="CSharpx.MaybeExtensions.FromJustOrFail<T>(CSharpx.Maybe<T>, System.Exception)", file="OptionSpecification.cs"];
m3_125 [label="T value", span="357-357", cluster="CSharpx.MaybeExtensions.FromJustOrFail<T>(CSharpx.Maybe<T>, System.Exception)", file="OptionSpecification.cs"];
m3_126 [label="maybe.MatchJust(out value)", span="358-358", cluster="CSharpx.MaybeExtensions.FromJustOrFail<T>(CSharpx.Maybe<T>, System.Exception)", file="OptionSpecification.cs"];
m3_128 [label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="362-362", cluster="CSharpx.MaybeExtensions.FromJustOrFail<T>(CSharpx.Maybe<T>, System.Exception)", file="OptionSpecification.cs"];
m3_127 [label="return value;", span="360-360", cluster="CSharpx.MaybeExtensions.FromJustOrFail<T>(CSharpx.Maybe<T>, System.Exception)", file="OptionSpecification.cs"];
m3_129 [label="Exit CSharpx.MaybeExtensions.FromJustOrFail<T>(CSharpx.Maybe<T>, System.Exception)", span="355-355", cluster="CSharpx.MaybeExtensions.FromJustOrFail<T>(CSharpx.Maybe<T>, System.Exception)", file="OptionSpecification.cs"];
m3_21 [label="Entry CSharpx.Maybe.Return<T>(T)", span="134-134", cluster="CSharpx.Maybe.Return<T>(T)", file="OptionSpecification.cs"];
m3_22 [label="return Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="136-136", cluster="CSharpx.Maybe.Return<T>(T)", file="OptionSpecification.cs"];
m3_23 [label="Exit CSharpx.Maybe.Return<T>(T)", span="134-134", cluster="CSharpx.Maybe.Return<T>(T)", file="OptionSpecification.cs"];
m3_118 [label="Entry CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>)", span="342-342", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_119 [label="T value", span="344-344", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_120 [label="maybe.MatchJust(out value)", span="345-345", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_121 [label="return value;", span="347-347", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_122 [label="return default(T);", span="349-349", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_123 [label="Exit CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>)", span="342-342", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>)", file="OptionSpecification.cs"];
m3_15 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="OptionSpecification.cs"];
m3_16 [label="return new Nothing<T>();", span="118-118", cluster="CSharpx.Maybe.Nothing<T>()", file="OptionSpecification.cs"];
m3_17 [label="Exit CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="OptionSpecification.cs"];
m3_7 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()", file="OptionSpecification.cs"];
m3_8 [label="return Tag == MaybeType.Nothing;", span="59-59", cluster="CSharpx.Maybe<T>.MatchNothing()", file="OptionSpecification.cs"];
m3_9 [label="Exit CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()", file="OptionSpecification.cs"];
m3_24 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)", file="OptionSpecification.cs"];
m3_10 [label="Entry CSharpx.Nothing<T>.Nothing()", span="73-73", cluster="CSharpx.Nothing<T>.Nothing()", file="OptionSpecification.cs"];
m3_11 [label="Exit CSharpx.Nothing<T>.Nothing()", span="73-73", cluster="CSharpx.Nothing<T>.Nothing()", file="OptionSpecification.cs"];
m3_101 [label="Entry CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="300-300", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", file="OptionSpecification.cs"];
m3_102 [label="T value", span="302-302", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", file="OptionSpecification.cs"];
m3_103 [label="maybe.MatchJust(out value)", span="303-303", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", file="OptionSpecification.cs"];
m3_104 [label="action(value)", span="305-305", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", file="OptionSpecification.cs"];
m3_105 [label="Exit CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="300-300", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", file="OptionSpecification.cs"];
m3_89 [label="Entry CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="284-284", cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="OptionSpecification.cs"];
m3_90 [label="return maybe\n                .Bind(sourceValue =>\n                        valueSelector(sourceValue)\n                            .Map(resultValue => resultSelector(sourceValue, resultValue)));", span="289-292", cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="OptionSpecification.cs"];
m3_91 [label="Exit CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="284-284", cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", file="OptionSpecification.cs"];
m3_106 [label="Entry CSharpx.MaybeExtensions.Do<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>)", span="312-312", cluster="CSharpx.MaybeExtensions.Do<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>)", file="OptionSpecification.cs"];
m3_107 [label="T1 value1", span="314-314", cluster="CSharpx.MaybeExtensions.Do<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>)", file="OptionSpecification.cs"];
m3_109 [label="maybe.MatchJust(out value1, out value2)", span="316-316", cluster="CSharpx.MaybeExtensions.Do<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>)", file="OptionSpecification.cs"];
m3_110 [label="action(value1, value2)", span="318-318", cluster="CSharpx.MaybeExtensions.Do<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>)", file="OptionSpecification.cs"];
m3_108 [label="T2 value2", span="315-315", cluster="CSharpx.MaybeExtensions.Do<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>)", file="OptionSpecification.cs"];
m3_111 [label="Exit CSharpx.MaybeExtensions.Do<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>)", span="312-312", cluster="CSharpx.MaybeExtensions.Do<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>)", file="OptionSpecification.cs"];
m3_0 [label="Entry CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="34-34", cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", file="OptionSpecification.cs"];
m3_1 [label="this.tag = tag", span="36-36", cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", file="OptionSpecification.cs"];
m3_2 [label="Exit CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="34-34", cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", file="OptionSpecification.cs"];
m3_67 [label="Entry CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", span="230-230", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_68 [label="Tuple<T1, T2> value", span="232-232", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_69 [label="maybe.MatchJust(out value)", span="233-233", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_70 [label="value1 = value.Item1", span="235-235", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_73 [label="value1 = default(T1)", span="239-239", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_71 [label="value2 = value.Item2", span="236-236", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_72 [label="return true;", span="237-237", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_74 [label="value2 = default(T2)", span="240-240", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_75 [label="return false;", span="241-241", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_76 [label="Exit CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", span="230-230", cluster="CSharpx.MaybeExtensions.MatchJust<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, out T1, out T2)", file="OptionSpecification.cs"];
m3_77 [label="Entry CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="249-249", cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", file="OptionSpecification.cs"];
m3_78 [label="return Maybe.Return(value);", span="251-251", cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", file="OptionSpecification.cs"];
m3_79 [label="Exit CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="249-249", cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", file="OptionSpecification.cs"];
m3_56 [label="Entry System.Action.Invoke()", span="0-0", cluster="System.Action.Invoke()", file="OptionSpecification.cs"];
m3_34 [label="Entry CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", span="163-163", cluster="CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", file="OptionSpecification.cs"];
m3_35 [label="T1 value1", span="165-165", cluster="CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", file="OptionSpecification.cs"];
m3_37 [label="first.MatchJust(out value1) && second.MatchJust(out value2)", span="167-167", cluster="CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", file="OptionSpecification.cs"];
m3_36 [label="T2 value2", span="166-166", cluster="CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", file="OptionSpecification.cs"];
m3_38 [label="return Maybe.Just(Tuple.Create(value1, value2));", span="169-169", cluster="CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", file="OptionSpecification.cs"];
m3_39 [label="return Maybe.Nothing<Tuple<T1, T2>>();", span="171-171", cluster="CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", file="OptionSpecification.cs"];
m3_40 [label="Exit CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", span="163-163", cluster="CSharpx.Maybe.Merge<T1, T2>(CSharpx.Maybe<T1>, CSharpx.Maybe<T2>)", file="OptionSpecification.cs"];
m3_100 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="OptionSpecification.cs"];
m3_57 [label="Entry CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", span="215-215", cluster="CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", file="OptionSpecification.cs"];
m3_58 [label="T1 value1", span="217-217", cluster="CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", file="OptionSpecification.cs"];
m3_60 [label="maybe.MatchJust(out value1, out value2)", span="219-219", cluster="CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", file="OptionSpecification.cs"];
m3_61 [label="ifJust(value1, value2)", span="221-221", cluster="CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", file="OptionSpecification.cs"];
m3_63 [label="ifNothing()", span="224-224", cluster="CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", file="OptionSpecification.cs"];
m3_59 [label="T2 value2", span="218-218", cluster="CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", file="OptionSpecification.cs"];
m3_62 [label="return;", span="222-222", cluster="CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", file="OptionSpecification.cs"];
m3_64 [label="Exit CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", span="215-215", cluster="CSharpx.MaybeExtensions.Match<T1, T2>(CSharpx.Maybe<System.Tuple<T1, T2>>, System.Action<T1, T2>, System.Action)", file="OptionSpecification.cs"];
m3_83 [label="Entry CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="265-265", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="OptionSpecification.cs"];
m3_84 [label="return Maybe.Map(maybe, func);", span="267-267", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="OptionSpecification.cs"];
m3_85 [label="Exit CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="265-265", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", file="OptionSpecification.cs"];
m3_3 [label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="48-48", cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="OptionSpecification.cs"];
m3_4 [label="value = Tag == MaybeType.Just ? ((Just<T>)this).Value : default(T)", span="50-50", cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="OptionSpecification.cs"];
m3_5 [label="return Tag == MaybeType.Just;", span="51-51", cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="OptionSpecification.cs"];
m3_6 [label="Exit CSharpx.Maybe<T>.MatchJust(out T)", span="48-48", cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="OptionSpecification.cs"];
m3_147 [label="CSharpx.Maybe<T>", span="", file="OptionSpecification.cs"];
m3_148 [label="CSharpx.Just<T>", span="", file="OptionSpecification.cs"];
m3_149 [label="System.Func<TSource, CSharpx.Maybe<TValue>>", span="", file="OptionSpecification.cs"];
m3_150 [label="System.Func<TSource, TValue, TResult>", span="", file="OptionSpecification.cs"];
m3_151 [label=TSource, span="", file="OptionSpecification.cs"];
m5_0 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs"];
m5_1 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-22", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=red, community=0, file="Scalar.cs"];
m5_2 [label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs"];
m5_3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Scalar.cs"];
m5_11 [label="Entry lambda expression", span="18-19", cluster="lambda expression", file="Scalar.cs"];
m5_5 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="17-20", cluster="lambda expression", color=red, community=0, file="Scalar.cs"];
m5_4 [label="Entry lambda expression", span="16-20", cluster="lambda expression", file="Scalar.cs"];
m5_12 [label="info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }", span="19-19", cluster="lambda expression", color=red, community=0, file="Scalar.cs"];
m5_6 [label="Exit lambda expression", span="16-20", cluster="lambda expression", file="Scalar.cs"];
m5_13 [label="Exit lambda expression", span="18-19", cluster="lambda expression", file="Scalar.cs"];
m5_10 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Scalar.cs"];
m5_7 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="Scalar.cs"];
m5_8 [label="Entry CommandLine.Core.Token.IsValue()", span="73-73", cluster="CommandLine.Core.Token.IsValue()", file="Scalar.cs"];
m5_9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Scalar.cs"];
m5_14 [label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span="", file="Scalar.cs"];
m5_15 [label="CommandLine.Core.Token", span="", file="Scalar.cs"];
m5_16 [label="CommandLine.Core.Token", span="", file="Scalar.cs"];
m6_11 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ScalarTests.cs"];
m6_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="ScalarTests.cs"];
m6_5 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="ScalarTests.cs"];
m6_13 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ScalarTests.cs"];
m6_14 [label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs"];
m6_15 [label="var expected = new [] { Token.Name(''str''), Token.Value(''strvalue'') }", span="30-30", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs"];
m6_16 [label="var result = Scalar.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", color=red, community=0, file="ScalarTests.cs"];
m6_17 [label="expected.ShouldAllBeEquivalentTo(result)", span="43-43", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs"];
m6_18 [label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs"];
m6_0 [label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs"];
m6_1 [label="var expected = new Token[] { }", span="15-15", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs"];
m6_2 [label="var result = Scalar.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", color=red, community=0, file="ScalarTests.cs"];
m6_3 [label="expected.ShouldAllBeEquivalentTo(result)", span="24-24", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs"];
m6_4 [label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs"];
m6_6 [label="Entry Unk.ShouldAllBeEquivalentTo", span="", cluster="Unk.ShouldAllBeEquivalentTo", file="ScalarTests.cs"];
m6_21 [label="Entry lambda expression", span="38-41", cluster="lambda expression", file="ScalarTests.cs"];
m6_7 [label="Entry lambda expression", span="19-22", cluster="lambda expression", file="ScalarTests.cs"];
m6_8 [label="new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22", cluster="lambda expression", color=red, community=0, file="ScalarTests.cs"];
m6_9 [label="Exit lambda expression", span="19-22", cluster="lambda expression", file="ScalarTests.cs"];
m6_22 [label="new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41", cluster="lambda expression", color=red, community=0, file="ScalarTests.cs"];
m6_23 [label="Exit lambda expression", span="38-41", cluster="lambda expression", file="ScalarTests.cs"];
m6_12 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="ScalarTests.cs"];
m6_19 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="ScalarTests.cs"];
m6_20 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="ScalarTests.cs"];
m7_20 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="Sequence.cs"];
m7_29 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Sequence.cs"];
m7_24 [label="Entry CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="80-80", cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="Sequence.cs"];
m7_25 [label="var array = Array.CreateInstance(type, value.Count())", span="82-82", cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="Sequence.cs"];
m7_26 [label="value.ToArray().CopyTo(array, 0)", span="83-83", cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="Sequence.cs"];
m7_27 [label="return array;", span="84-84", cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="Sequence.cs"];
m7_28 [label="Exit CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="80-80", cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="Sequence.cs"];
m7_8 [label="Entry System.Collections.Generic.IEnumerable<TSource>.PairwiseImpl<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="32-32", cluster="System.Collections.Generic.IEnumerable<TSource>.PairwiseImpl<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_19 [label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0", cluster="System.Collections.IEnumerator.MoveNext()", file="Sequence.cs"];
m7_30 [label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0", cluster="System.Array.CreateInstance(System.Type, int)", file="Sequence.cs"];
m7_18 [label="Entry System.Collections.Generic.IEnumerable<T>.GetEnumerator()", span="0-0", cluster="System.Collections.Generic.IEnumerable<T>.GetEnumerator()", file="Sequence.cs"];
m7_31 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="Sequence.cs"];
m7_32 [label="Entry System.Array.CopyTo(System.Array, int)", span="0-0", cluster="System.Array.CopyTo(System.Array, int)", file="Sequence.cs"];
m7_33 [label="Entry CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="87-87", cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Sequence.cs"];
m7_34 [label="return !source.Any();", span="89-89", cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Sequence.cs"];
m7_35 [label="Exit CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="87-87", cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Sequence.cs"];
m7_36 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Sequence.cs"];
m7_7 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Sequence.cs"];
m7_21 [label="Entry CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", span="75-75", cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", file="Sequence.cs"];
m7_22 [label="return value;", span="77-77", cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", file="Sequence.cs"];
m7_23 [label="Exit CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", span="75-75", cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.List<T>)", file="Sequence.cs"];
m7_9 [label="Entry CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="32-32", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_10 [label="var enumerator = source.GetEnumerator()", span="34-34", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_15 [label="yield return selector(left, right);", span="43-43", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_11 [label="enumerator.MoveNext()", span="36-36", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_12 [label="var left = enumerator.Current", span="38-38", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_13 [label="enumerator.MoveNext()", span="40-40", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_14 [label="var right = enumerator.Current", span="42-42", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_16 [label="left = right", span="44-44", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_17 [label="Exit CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="32-32", cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_0 [label="Entry CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="24-24", cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_1 [label="source == null", span="26-26", cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_3 [label="selector == null", span="27-27", cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_5 [label="return source.PairwiseImpl(selector);", span="29-29", cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_2 [label="throw new ArgumentNullException(''source'');", span="26-26", cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_4 [label="throw new ArgumentNullException(''selector'');", span="27-27", cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m7_6 [label="Exit CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="24-24", cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m9_22 [label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36", cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="Specification.cs"];
m9_24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Specification.cs"];
m9_35 [label="Entry Unk.Take", span="", cluster="Unk.Take", file="Specification.cs"];
m9_3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Specification.cs"];
m9_15 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Specification.cs"];
m9_25 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="Specification.cs"];
m9_4 [label="Entry lambda expression", span="16-22", cluster="lambda expression", file="Specification.cs"];
m9_5 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="17-22", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m9_6 [label="Exit lambda expression", span="16-22", cluster="lambda expression", file="Specification.cs"];
m9_11 [label="Entry lambda expression", span="18-21", cluster="lambda expression", file="Specification.cs"];
m9_12 [label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }", span="19-21", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m9_13 [label="Exit lambda expression", span="18-21", cluster="lambda expression", file="Specification.cs"];
m9_29 [label="Entry lambda expression", span="33-35", cluster="lambda expression", file="Specification.cs"];
m9_39 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="Specification.cs"];
m9_30 [label="info.MaxItems.Return(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()))", span="33-35", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m9_31 [label="Exit lambda expression", span="33-35", cluster="lambda expression", file="Specification.cs"];
m9_32 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="Specification.cs"];
m9_36 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="Specification.cs"];
m9_37 [label="v.IsValue()", span="35-35", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m9_38 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="Specification.cs"];
m9_40 [label="v.IsValue()", span="36-36", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m9_41 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="Specification.cs"];
m9_26 [label="t.Equals(nameToken)", span="29-29", cluster="lambda expression", file="Specification.cs"];
m9_33 [label="tokens.Skip(nameIndex + 1).Take(n)", span="34-34", cluster="lambda expression", file="Specification.cs"];
m9_34 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="Specification.cs"];
m9_27 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="Specification.cs"];
m9_10 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="Specification.cs"];
m9_28 [label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="Specification.cs"];
m9_23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Specification.cs"];
m9_16 [label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Specification.cs"];
m9_19 [label="return info.NextValue.Return(\r\n                    _ => info.MaxItems.Return(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue())),\r\n                    tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()));", span="32-36", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", color=green, community=0, file="Specification.cs"];
m9_17 [label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Specification.cs"];
m9_18 [label="nameIndex >= 0", span="30-30", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Specification.cs"];
m9_20 [label="return new Token[] { };", span="38-38", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Specification.cs"];
m9_21 [label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="Specification.cs"];
m9_7 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="Specification.cs"];
m9_8 [label="Entry CommandLine.Core.Token.IsValue()", span="73-73", cluster="CommandLine.Core.Token.IsValue()", file="Specification.cs"];
m9_9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Specification.cs"];
m9_14 [label="Entry Unk.OfSequence", span="", cluster="Unk.OfSequence", file="Specification.cs"];
m9_0 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", file="Specification.cs"];
m9_1 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-24", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Specification.cs"];
m9_2 [label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", file="Specification.cs"];
m9_42 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="Specification.cs"];
m9_43 [label="System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>", span="", file="Specification.cs"];
m9_44 [label="CommandLine.Core.Token", span="", file="Specification.cs"];
m9_46 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="Specification.cs"];
m9_47 [label="CommandLine.Core.TypeDescriptor", span="", file="Specification.cs"];
m9_48 [label=nameIndex, span="", file="Specification.cs"];
m9_45 [label="CommandLine.Core.Token", span="", file="Specification.cs"];
m10_0 [label="Entry CommandLine.BaseAttribute.BaseAttribute()", span="20-20", cluster="CommandLine.BaseAttribute.BaseAttribute()", file="SpecificationExtensions.cs"];
m10_1 [label="min = -1", span="22-22", cluster="CommandLine.BaseAttribute.BaseAttribute()", file="SpecificationExtensions.cs"];
m10_2 [label="max = -1", span="23-23", cluster="CommandLine.BaseAttribute.BaseAttribute()", file="SpecificationExtensions.cs"];
m10_3 [label="helpText = string.Empty", span="24-24", cluster="CommandLine.BaseAttribute.BaseAttribute()", file="SpecificationExtensions.cs"];
m10_4 [label="metaValue = string.Empty", span="25-25", cluster="CommandLine.BaseAttribute.BaseAttribute()", file="SpecificationExtensions.cs"];
m10_5 [label="Exit CommandLine.BaseAttribute.BaseAttribute()", span="20-20", cluster="CommandLine.BaseAttribute.BaseAttribute()", file="SpecificationExtensions.cs"];
m10_6 [label="CommandLine.BaseAttribute", span="", file="SpecificationExtensions.cs"];
m11_6 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationGuards.cs"];
m11_9 [label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="17-17", cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="SpecificationGuards.cs"];
m11_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationGuards.cs"];
m11_0 [label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="SpecificationGuards.cs"];
m11_1 [label="var expected = Maybe.Just(''.'')", span="20-20", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="SpecificationGuards.cs"];
m11_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, '.', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="21-22", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=red, community=0, file="SpecificationGuards.cs"];
m11_4 [label="expected.ShouldBeEquivalentTo(result)", span="28-28", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="SpecificationGuards.cs"];
m11_3 [label="var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="25-25", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="SpecificationGuards.cs"];
m11_5 [label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="17-17", cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="SpecificationGuards.cs"];
m11_10 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="SpecificationGuards.cs"];
m11_8 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SpecificationGuards.cs"];
m12_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="28-28", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_37 [label="Entry System.Type.GetInterfaces()", span="0-0", cluster="System.Type.GetInterfaces()", file="SpecificationPropertyExtensions.cs"];
m12_84 [label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="128-128", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_85 [label="Func<bool> isMutable = () => {\r\n                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite);\r\n                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any();\r\n                return props || fields;\r\n            }", span="130-134", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_86 [label="return type != typeof(object) ? isMutable() : true;", span="135-135", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_87 [label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="128-128", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_94 [label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetFields(System.Reflection.BindingFlags)", file="SpecificationPropertyExtensions.cs"];
m12_7 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="SpecificationPropertyExtensions.cs"];
m12_119 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="SpecificationPropertyExtensions.cs"];
m12_27 [label="type.SafeGetInterfaces()", span="45-45", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="SpecificationPropertyExtensions.cs"];
m12_66 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SpecificationPropertyExtensions.cs"];
m12_75 [label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="119-119", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_76 [label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="121-124", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_77 [label="return e.Compile()();", span="125-125", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_78 [label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="119-119", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_8 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()", file="SpecificationPropertyExtensions.cs"];
m12_36 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyExtensions.cs"];
m12_13 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="SpecificationPropertyExtensions.cs"];
m12_45 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SpecificationPropertyExtensions.cs"];
m12_52 [label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="86-86", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_53 [label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="88-88", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_54 [label="property.SetValue(instance, value, null)", span="92-92", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_63 [label="return instance;", span="111-111", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_56 [label="fail(e)", span="96-96", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_58 [label="fail(e)", span="100-100", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_60 [label="fail(e)", span="104-104", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_62 [label="fail(e)", span="108-108", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_55 [label=TargetException, span="94-94", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_57 [label=TargetParameterCountException, span="98-98", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_59 [label=MethodAccessException, span="102-102", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_61 [label=TargetInvocationException, span="106-106", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_64 [label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="86-86", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="SpecificationPropertyExtensions.cs"];
m12_12 [label="Exit lambda expression", span="18-18", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_38 [label="Entry CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="60-60", cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_39 [label="return type == typeof(bool)\r\n                       ? TargetType.Switch\r\n                       : type == typeof(string)\r\n                             ? TargetType.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? TargetType.Sequence\r\n                                   : TargetType.Scalar;", span="62-68", cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_40 [label="Exit CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="60-60", cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_95 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="SpecificationPropertyExtensions.cs"];
m12_70 [label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0", cluster="System.ApplicationException.ApplicationException(string, System.Exception)", file="SpecificationPropertyExtensions.cs"];
m12_11 [label="x.GetProperties()", span="18-18", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_18 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_32 [label="Entry System.Type.SafeGetInterfaces()", span="55-55", cluster="System.Type.SafeGetInterfaces()", file="SpecificationPropertyExtensions.cs"];
m12_22 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_4 [label="Assert.NotNull(((Ok<IEnumerable<SpecificationProperty>, Error>)result).Value.Success.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="40-43", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationPropertyExtensions.cs"];
m12_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="SpecificationPropertyExtensions.cs"];
m12_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", color=red, community=0, file="SpecificationPropertyExtensions.cs"];
m12_16 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyExtensions.cs"];
m12_28 [label="yield return @interface;", span="47-47", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_10 [label="Entry lambda expression", span="18-18", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="SpecificationPropertyExtensions.cs"];
m12_20 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_21 [label="pt.Specification.IsOption()", span="34-34", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_48 [label="specProp.Property.SetValue(current, selector(specProp))", span="81-81", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_49 [label="return instance;", span="82-82", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_47 [label="Entry lambda expression", span="79-83", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_50 [label="Exit lambda expression", span="79-83", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_68 [label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="88-88", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_67 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_69 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_89 [label="var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="131-131", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_90 [label="var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="132-132", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_88 [label="Entry lambda expression", span="130-134", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_96 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_91 [label="return props || fields;", span="133-133", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_92 [label="Exit lambda expression", span="130-134", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_97 [label="p.CanWrite", span="131-131", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_98 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_121 [label="Entry lambda expression", span="158-158", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_122 [label="pi.PropertyType", span="158-158", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_123 [label="Exit lambda expression", span="158-158", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m12_24 [label="type == null", span="40-40", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_26 [label="yield return type;", span="44-44", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_25 [label="yield break;", span="42-42", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_29 [label="FlattenHierarchy(type.BaseType)", span="49-49", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_30 [label="yield return @interface;", span="51-51", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_65 [label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="SpecificationPropertyExtensions.cs"];
m12_74 [label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0", cluster="System.Array.CreateInstance(System.Type, int)", file="SpecificationPropertyExtensions.cs"];
m12_80 [label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0", cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_79 [label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0", cluster="System.Linq.Expressions.Expression.Default(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_83 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="SpecificationPropertyExtensions.cs"];
m12_120 [label="Entry CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", span="50-50", cluster="CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", file="SpecificationPropertyExtensions.cs"];
m12_41 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_99 [label="Entry CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="138-138", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_100 [label="type == typeof(string)", span="140-140", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_102 [label="type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>)", span="144-144", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_103 [label="return type.GetGenericArguments()[0].CreateEmptyArray();", span="146-146", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_104 [label="return type.GetDefaultValue();", span="148-148", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_101 [label="return string.Empty;", span="142-142", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_105 [label="Exit CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="138-138", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationPropertyExtensions.cs"];
m12_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="20-23", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationPropertyExtensions.cs"];
m12_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), string.Empty, string.Empty, new List<string>(), typeof(bool), TargetType.Switch), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="24-30", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationPropertyExtensions.cs", color=green, community=0];
m12_81 [label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0", cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="SpecificationPropertyExtensions.cs"];
m12_106 [label="Entry System.Type.GetGenericTypeDefinition()", span="0-0", cluster="System.Type.GetGenericTypeDefinition()", file="SpecificationPropertyExtensions.cs"];
m12_110 [label="Entry CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="151-151", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_111 [label="type.IsMutable()", span="153-153", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_112 [label="return Activator.CreateInstance(type);", span="155-155", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_113 [label="var ctorTypes = type.GetSpecifications(pi => pi.PropertyType).ToArray()", span="158-158", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_114 [label="return ReflectionHelper.CreateDefaultImmutableInstance(type, ctorTypes);", span="160-160", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_115 [label="Exit CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="151-151", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_33 [label="Entry CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="55-55", cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_34 [label="return type == null ? Enumerable.Empty<Type>() : type.GetInterfaces();", span="57-57", cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_35 [label="Exit CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="55-55", cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_108 [label="Entry System.Type.CreateEmptyArray()", span="114-114", cluster="System.Type.CreateEmptyArray()", file="SpecificationPropertyExtensions.cs"];
m12_109 [label="Entry System.Type.GetDefaultValue()", span="119-119", cluster="System.Type.GetDefaultValue()", file="SpecificationPropertyExtensions.cs"];
m12_107 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="SpecificationPropertyExtensions.cs"];
m12_118 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="SpecificationPropertyExtensions.cs"];
m12_117 [label="Entry System.Activator.CreateInstance(System.Type)", span="0-0", cluster="System.Activator.CreateInstance(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_93 [label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetProperties(System.Reflection.BindingFlags)", file="SpecificationPropertyExtensions.cs"];
m12_31 [label="Exit CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="38-38", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationPropertyExtensions.cs"];
m12_23 [label="Entry CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="38-38", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_116 [label="Entry System.Type.IsMutable()", span="128-128", cluster="System.Type.IsMutable()", file="SpecificationPropertyExtensions.cs"];
m12_46 [label="Entry Unk.Aggregate", span="", cluster="Unk.Aggregate", file="SpecificationPropertyExtensions.cs"];
m12_71 [label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="114-114", cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_72 [label="return Array.CreateInstance(type, 0);", span="116-116", cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_73 [label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="114-114", cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="SpecificationPropertyExtensions.cs"];
m12_42 [label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="SpecificationPropertyExtensions.cs"];
m12_43 [label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="77-83", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="SpecificationPropertyExtensions.cs"];
m12_44 [label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="SpecificationPropertyExtensions.cs"];
m12_51 [label="Entry Unk.SetValue", span="", cluster="Unk.SetValue", file="SpecificationPropertyExtensions.cs"];
m12_3 [label="Entry System.Type.FlattenHierarchy()", span="38-38", cluster="System.Type.FlattenHierarchy()", file="SpecificationPropertyExtensions.cs"];
m12_82 [label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0", cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="SpecificationPropertyExtensions.cs"];
m12_124 [label="System.Func<CommandLine.Core.SpecificationProperty, object>", span="", file="SpecificationPropertyExtensions.cs"];
m12_125 [label=T, span="", file="SpecificationPropertyExtensions.cs"];
m12_126 [label="System.Type", span="", file="SpecificationPropertyExtensions.cs"];
m14_0 [label="Entry CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="11-11", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Switch.cs"];
m14_1 [label="this.index = index", span="14-14", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Switch.cs"];
m14_2 [label="Exit CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="11-11", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Switch.cs"];
m14_3 [label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="17-17", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="Switch.cs"];
m14_4 [label="return new ValueSpecification(\r\n                attribute.Index,\r\n                attribute.Required,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType);", span="19-25", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="Switch.cs"];
m14_5 [label="Exit CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="17-17", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="Switch.cs"];
m14_6 [label="Entry T.ToMaybe<T>()", span="82-82", cluster="T.ToMaybe<T>()", file="Switch.cs"];
m14_7 [label="CommandLine.Core.ValueSpecification", span="", file="Switch.cs"];
m15_11 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="SwitchTests.cs"];
m15_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="SwitchTests.cs"];
m15_13 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SwitchTests.cs"];
m15_14 [label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs"];
m15_15 [label="var expected = new [] { Token.Name(''x'') }", span="30-30", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs"];
m15_16 [label="var result = Switch.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", color=red, community=0, file="SwitchTests.cs"];
m15_17 [label="expected.ShouldAllBeEquivalentTo(result)", span="43-43", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs"];
m15_18 [label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs"];
m15_6 [label="Entry Unk.ShouldAllBeEquivalentTo", span="", cluster="Unk.ShouldAllBeEquivalentTo", file="SwitchTests.cs"];
m15_21 [label="Entry lambda expression", span="38-41", cluster="lambda expression", file="SwitchTests.cs"];
m15_7 [label="Entry lambda expression", span="19-22", cluster="lambda expression", file="SwitchTests.cs"];
m15_8 [label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22", cluster="lambda expression", color=red, community=0, file="SwitchTests.cs"];
m15_9 [label="Exit lambda expression", span="19-22", cluster="lambda expression", file="SwitchTests.cs"];
m15_22 [label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41", cluster="lambda expression", color=red, community=0, file="SwitchTests.cs"];
m15_23 [label="Exit lambda expression", span="38-41", cluster="lambda expression", file="SwitchTests.cs"];
m15_12 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="SwitchTests.cs"];
m15_19 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="SwitchTests.cs"];
m15_5 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="SwitchTests.cs"];
m15_20 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="SwitchTests.cs"];
m15_0 [label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs"];
m15_1 [label="var expected = new Token[] { }", span="15-15", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs"];
m15_2 [label="var result = Switch.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", color=red, community=0, file="SwitchTests.cs"];
m15_3 [label="expected.ShouldAllBeEquivalentTo(result)", span="24-24", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs"];
m15_4 [label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs"];
m16_9 [label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs"];
m16_11 [label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs"];
m16_13 [label="CommandLine.Core.OptionSpecification", span="", cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenizerTests.cs"];
m16_21 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_23 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, typeof(IEnumerable<string>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())}", span="43-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="TokenizerTests.cs"];
m16_22 [label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="41-42", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_24 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="47-53", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_25 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="56-56", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_26 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_8 [label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs"];
m16_20 [label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs"];
m16_16 [label="Entry Unk.True", span="", cluster="Unk.True", file="TokenizerTests.cs"];
m16_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs"];
m16_0 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs"];
m16_2 [label="this.longName = longName", span="21-21", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="TokenizerTests.cs"];
m16_1 [label="this.shortName = shortName", span="20-20", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs", color=red, community=0];
m16_3 [label="this.separator = separator", span="22-22", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs"];
m16_4 [label="this.setName = setName", span="23-23", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs"];
m16_5 [label="this.helpText = helpText", span="24-24", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs"];
m16_6 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs"];
m16_7 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs"];
m16_27 [label="Entry lambda expression", span="53-53", cluster="lambda expression", file="TokenizerTests.cs"];
m16_18 [label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m16_28 [label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="53-53", cluster="lambda expression", file="TokenizerTests.cs"];
m16_17 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m16_19 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m16_29 [label="Exit lambda expression", span="53-53", cluster="lambda expression", file="TokenizerTests.cs"];
m16_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs"];
m16_14 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TokenizerTests.cs"];
m16_15 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TokenizerTests.cs"];
m16_30 [label=specs, span="", file="TokenizerTests.cs"];
m16_31 [label=specs, span="", file="TokenizerTests.cs"];
m18_9 [label="Exit Humanizer.Tests.Localisation.es.NumberToWordsTests.ToOrdinalWords(int, string, Humanizer.GrammaticalGender)", span="56-56", cluster="Humanizer.Tests.Localisation.es.NumberToWordsTests.ToOrdinalWords(int, string, Humanizer.GrammaticalGender)", file="TypeDescriptor.cs"];
m18_0 [label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="20-20", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_1 [label="this.tag = tag", span="22-22", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_5 [label="maximumItems == null", span="38-38", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_7 [label="return new TypeDescriptor(tag, maximumItems);", span="40-40", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_8 [label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_4 [label="Exit Humanizer.Tests.Localisation.es.NumberToWordsTests.ToWords(int, string)", span="45-45", cluster="Humanizer.Tests.Localisation.es.NumberToWordsTests.ToWords(int, string)", file="TypeDescriptor.cs"];
m18_6 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="TypeDescriptor.cs"];
m18_2 [label="this.maximumItems = maximumItems", span="23-23", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", color=green, community=0];
m18_3 [label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="20-20", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_10 [label="CommandLine.Core.TypeDescriptor", span="", cluster="int.ToOrdinalWords(Humanizer.GrammaticalGender)", file="TypeDescriptor.cs"];
m19_6 [label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="TypeLookup.cs"];
m19_7 [label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.TargetType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", span="22-35", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", color=green, community=0, file="TypeLookup.cs"];
m19_8 [label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="TypeLookup.cs"];
m19_9 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="TypeLookup.cs"];
m21_10 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="ValueSpecification.cs"];
m21_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="ValueSpecification.cs"];
m21_20 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_23 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="49-55", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_21 [label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch''), }", span="43-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_22 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, ',', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="45-46", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_24 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="58-58", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_25 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_19 [label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="17-17", cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ValueSpecification.cs"];
m21_15 [label="Entry Unk.True", span="", cluster="Unk.True", file="ValueSpecification.cs"];
m21_0 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="16-16", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_3 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="25-31", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=green, community=0, file="ValueSpecification.cs"];
m21_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, ',', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="21-22", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_4 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="34-34", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_1 [label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch''), }", span="19-20", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_5 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="16-16", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ValueSpecification.cs"];
m21_26 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="ValueSpecification.cs"];
m21_16 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="ValueSpecification.cs"];
m21_17 [label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="31-31", cluster="lambda expression", file="ValueSpecification.cs"];
m21_18 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="ValueSpecification.cs"];
m21_27 [label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="55-55", cluster="lambda expression", file="ValueSpecification.cs"];
m21_28 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="ValueSpecification.cs"];
m21_6 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="ValueSpecification.cs"];
m21_8 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="ValueSpecification.cs"];
m21_13 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="48-48", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="ValueSpecification.cs"];
m21_11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="ValueSpecification.cs"];
m21_7 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="ValueSpecification.cs"];
m21_14 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="ValueSpecification.cs"];
m21_12 [label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="58-58", cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ValueSpecification.cs"];
m21_29 [label=specs, span="", file="ValueSpecification.cs"];
m21_30 [label=specs, span="", file="ValueSpecification.cs"];
m0_54 -> m0_18  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo parsingCulture"];
m0_3 -> m0_19  [key=0, style=solid];
m0_3 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_3 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m0_3 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_3 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_3 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_3 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_35  [key=2, style=dotted];
m0_19 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_19 -> m0_31  [key=1, style=dashed, color=red, label=instance];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_24  [key=0, style=solid];
m0_22 -> m0_40  [key=2, style=dotted];
m0_22 -> m0_41  [key=2, style=dotted];
m0_22 -> m0_42  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_45  [key=2, style=dotted];
m0_24 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_46  [key=2, style=dotted];
m0_26 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_26 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m0_26 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_47  [key=2, style=dotted];
m0_27 -> m0_48  [key=2, style=dotted];
m0_27 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_27 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_27 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m0_27 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_49  [key=2, style=dotted];
m0_28 -> m0_48  [key=2, style=dotted];
m0_28 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_28 -> m0_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_28 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m0_28 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_50  [key=2, style=dotted];
m0_29 -> m0_51  [key=2, style=dotted];
m0_29 -> m0_52  [key=2, style=dotted];
m0_29 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=token];
m0_29 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_29 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=token];
m0_29 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_36  [key=2, style=dotted];
m0_20 -> m0_37  [key=2, style=dotted];
m0_20 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_20 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_20 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_23 -> m0_34  [key=0, style=solid];
m0_23 -> m0_43  [key=2, style=dotted];
m0_23 -> m0_44  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid, color=red];
m0_31 -> m0_54  [key=2, style=dotted, color=red];
m0_31 -> m0_31  [key=1, style=dashed, color=red, label=instance];
m0_31 -> m0_80  [key=1, style=dashed, color=red, label="lambda expression"];
m0_31 -> m0_84  [key=1, style=dashed, color=red, label="lambda expression"];
m0_31 -> m0_88  [key=1, style=dashed, color=red, label="lambda expression"];
m0_31 -> m0_92  [key=1, style=dashed, color=red, label="lambda expression"];
m0_31 -> m0_95  [key=1, style=dashed, color=red, label="lambda expression"];
m0_31 -> m0_100  [key=1, style=dashed, color=red, label="lambda expression"];
m0_31 -> m0_33  [key=1, style=dashed, color=red, label=instance];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_38  [key=2, style=dotted];
m0_21 -> m0_39  [key=2, style=dotted];
m0_21 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_21 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_21 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_21 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_21 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_25 -> m0_26  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_57  [key=2, style=dotted];
m0_33 -> m0_58  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid, color=red];
m0_30 -> m0_53  [key=2, style=dotted];
m0_30 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_55  [key=2, style=dotted];
m0_32 -> m0_39  [key=2, style=dotted];
m0_32 -> m0_56  [key=2, style=dotted];
m0_32 -> m0_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_34 -> m0_3  [key=0, style=bold, color=blue];
m0_106 -> m0_107  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_10  [key=2, style=dotted];
m0_6 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_11 -> m0_12  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_8 -> m0_4  [key=0, style=bold, color=blue];
m0_13 -> m0_11  [key=0, style=bold, color=blue];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_68  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_72  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_72  [key=2, style=dotted];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_79  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_73 -> m0_74  [key=0, style=solid];
m0_76 -> m0_77  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_88 -> m0_89  [key=0, style=solid];
m0_92 -> m0_93  [key=0, style=solid];
m0_95 -> m0_96  [key=0, style=solid, color=red];
m0_100 -> m0_101  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=2, style=dotted];
m0_60 -> m0_63  [key=2, style=dotted];
m0_60 -> m0_64  [key=2, style=dotted];
m0_61 -> m0_59  [key=0, style=bold, color=blue];
m0_67 -> m0_65  [key=0, style=bold, color=blue];
m0_71 -> m0_69  [key=0, style=bold, color=blue];
m0_75 -> m0_73  [key=0, style=bold, color=blue];
m0_78 -> m0_76  [key=0, style=bold, color=blue];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_83  [key=2, style=dotted];
m0_82 -> m0_80  [key=0, style=bold, color=blue];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_87  [key=2, style=dotted];
m0_86 -> m0_84  [key=0, style=bold, color=blue];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_91  [key=2, style=dotted];
m0_89 -> m0_83  [key=2, style=dotted];
m0_90 -> m0_88  [key=0, style=bold, color=blue];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_87  [key=2, style=dotted];
m0_94 -> m0_92  [key=0, style=bold, color=blue];
m0_96 -> m0_97  [key=0, style=solid, color=red];
m0_96 -> m0_91  [key=2, style=dotted, color=red];
m0_96 -> m0_98  [key=2, style=dotted, color=red];
m0_96 -> m0_99  [key=2, style=dotted, color=red];
m0_97 -> m0_95  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_103  [key=2, style=dotted];
m0_101 -> m0_104  [key=2, style=dotted];
m0_101 -> m0_105  [key=2, style=dotted];
m0_102 -> m0_100  [key=0, style=bold, color=blue];
m0_107 -> m0_108  [key=0, style=solid];
m0_108 -> m0_106  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> Build"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_1  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> "];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_109 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_109 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_109 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_109 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_110 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_110 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_111 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_111 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_112 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_113 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_113 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_114 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=token];
m1_0 -> m1_1  [key=0, style=solid];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_2 -> m1_7  [key=2, style=dotted, color=green];
m1_2 -> m1_8  [key=2, style=dotted, color=green];
m1_2 -> m1_9  [key=2, style=dotted, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expected];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_10  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid, color=red];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=tokenPartitions];
m2_2 -> m2_3  [key=0, style=solid, color=red];
m2_2 -> m2_7  [key=2, style=dotted, color=red];
m2_2 -> m2_8  [key=2, style=dotted, color=red];
m2_2 -> m2_9  [key=2, style=dotted, color=red];
m2_2 -> m2_10  [key=2, style=dotted, color=red];
m2_2 -> m2_11  [key=2, style=dotted, color=red];
m2_2 -> m2_12  [key=2, style=dotted, color=red];
m2_2 -> m2_16  [key=1, style=dashed, color=red, label="lambda expression"];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_13  [key=2, style=dotted];
m2_3 -> m2_14  [key=2, style=dotted];
m2_3 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_3 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_11  [key=2, style=dotted];
m2_4 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_28 -> m2_29  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_20 -> m2_21  [key=0, style=solid];
m2_24 -> m2_25  [key=0, style=solid];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_19  [key=2, style=dotted];
m2_18 -> m2_16  [key=0, style=bold, color=blue];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_23  [key=2, style=dotted];
m2_22 -> m2_20  [key=0, style=bold, color=blue];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_27  [key=2, style=dotted];
m2_26 -> m2_24  [key=0, style=bold, color=blue];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_23  [key=2, style=dotted];
m2_29 -> m2_31  [key=2, style=dotted];
m2_30 -> m2_28  [key=0, style=bold, color=blue];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
m3_26 -> m3_27  [key=0, style=solid];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_3  [key=2, style=dotted];
m3_27 -> m3_29  [key=2, style=dotted];
m3_27 -> m3_15  [key=2, style=dotted];
m3_27 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label=value1];
m3_28 -> m3_25  [key=0, style=bold, color=blue];
m3_12 -> m3_13  [key=0, style=solid];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_12  [key=0, style=bold, color=blue];
m3_48 -> m3_49  [key=0, style=solid];
m3_48 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_48 -> m3_51  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T>"];
m3_48 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="System.Action"];
m3_49 -> m3_50  [key=0, style=solid];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_53  [key=0, style=solid];
m3_50 -> m3_3  [key=2, style=dotted];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_55  [key=2, style=dotted];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_56  [key=2, style=dotted];
m3_52 -> m3_54  [key=0, style=solid];
m3_54 -> m3_48  [key=0, style=bold, color=blue];
m3_86 -> m3_87  [key=0, style=solid];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_30  [key=2, style=dotted];
m3_88 -> m3_86  [key=0, style=bold, color=blue];
m3_135 -> m3_136  [key=0, style=solid];
m3_135 -> m3_137  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
m3_136 -> m3_137  [key=0, style=solid];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_3  [key=2, style=dotted];
m3_137 -> m3_29  [key=2, style=dotted];
m3_137 -> m3_137  [key=1, style=dashed, color=darkseagreen4, label=value1];
m3_138 -> m3_135  [key=0, style=bold, color=blue];
m3_18 -> m3_19  [key=0, style=solid];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_12  [key=2, style=dotted];
m3_20 -> m3_18  [key=0, style=bold, color=blue];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_44  [key=1, style=dashed, color=darkseagreen4, label="Either<TLeft, TRight>"];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_45  [key=0, style=solid];
m3_44 -> m3_46  [key=0, style=solid];
m3_44 -> m3_47  [key=2, style=dotted];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_15  [key=2, style=dotted];
m3_46 -> m3_42  [key=0, style=bold, color=blue];
m3_97 -> m3_98  [key=0, style=solid];
m3_94 -> m3_95  [key=0, style=solid];
m3_94 -> m3_29  [key=2, style=dotted];
m3_94 -> m3_96  [key=2, style=dotted];
m3_94 -> m3_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_100  [key=2, style=dotted];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label=TSource];
m3_95 -> m3_93  [key=0, style=bold, color=blue];
m3_99 -> m3_97  [key=0, style=bold, color=blue];
m3_139 -> m3_140  [key=0, style=solid];
m3_139 -> m3_141  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_140 -> m3_141  [key=0, style=solid];
m3_141 -> m3_142  [key=0, style=solid];
m3_141 -> m3_143  [key=0, style=solid];
m3_141 -> m3_3  [key=2, style=dotted];
m3_142 -> m3_144  [key=0, style=solid];
m3_142 -> m3_145  [key=2, style=dotted];
m3_142 -> m3_146  [key=2, style=dotted];
m3_143 -> m3_144  [key=0, style=solid];
m3_143 -> m3_145  [key=2, style=dotted];
m3_144 -> m3_139  [key=0, style=bold, color=blue];
m3_112 -> m3_113  [key=0, style=solid];
m3_113 -> m3_114  [key=0, style=solid];
m3_114 -> m3_112  [key=0, style=bold, color=blue];
m3_131 -> m3_132  [key=0, style=solid];
m3_131 -> m3_133  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_132 -> m3_133  [key=0, style=solid];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_3  [key=2, style=dotted];
m3_133 -> m3_133  [key=1, style=dashed, color=darkseagreen4, label=value];
m3_134 -> m3_131  [key=0, style=bold, color=blue];
m3_80 -> m3_81  [key=0, style=solid];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_25  [key=2, style=dotted];
m3_82 -> m3_80  [key=0, style=bold, color=blue];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
m3_31 -> m3_32  [key=0, style=solid];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_3  [key=2, style=dotted];
m3_32 -> m3_29  [key=2, style=dotted];
m3_32 -> m3_18  [key=2, style=dotted];
m3_32 -> m3_15  [key=2, style=dotted];
m3_32 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label=value1];
m3_33 -> m3_30  [key=0, style=bold, color=blue];
m3_115 -> m3_116  [key=0, style=solid];
m3_116 -> m3_117  [key=0, style=solid];
m3_117 -> m3_115  [key=0, style=bold, color=blue];
m3_124 -> m3_125  [key=0, style=solid];
m3_124 -> m3_126  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_124 -> m3_128  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
m3_125 -> m3_126  [key=0, style=solid];
m3_126 -> m3_127  [key=0, style=solid];
m3_126 -> m3_128  [key=0, style=solid];
m3_126 -> m3_3  [key=2, style=dotted];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_130  [key=2, style=dotted];
m3_127 -> m3_129  [key=0, style=solid];
m3_129 -> m3_124  [key=0, style=bold, color=blue];
m3_21 -> m3_22  [key=0, style=solid];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_24  [key=2, style=dotted];
m3_22 -> m3_15  [key=2, style=dotted];
m3_22 -> m3_18  [key=2, style=dotted];
m3_23 -> m3_21  [key=0, style=bold, color=blue];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_120  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_119 -> m3_120  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_122  [key=0, style=solid];
m3_120 -> m3_3  [key=2, style=dotted];
m3_121 -> m3_123  [key=0, style=solid];
m3_122 -> m3_123  [key=0, style=solid];
m3_123 -> m3_118  [key=0, style=bold, color=blue];
m3_15 -> m3_16  [key=0, style=solid];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_10  [key=2, style=dotted];
m3_17 -> m3_15  [key=0, style=bold, color=blue];
m3_7 -> m3_8  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_9 -> m3_7  [key=0, style=bold, color=blue];
m3_10 -> m3_11  [key=0, style=solid];
m3_11 -> m3_10  [key=0, style=bold, color=blue];
m3_101 -> m3_102  [key=0, style=solid];
m3_101 -> m3_103  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_101 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T>"];
m3_102 -> m3_103  [key=0, style=solid];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_105  [key=0, style=solid];
m3_103 -> m3_3  [key=2, style=dotted];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_55  [key=2, style=dotted];
m3_105 -> m3_101  [key=0, style=bold, color=blue];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CSharpx.Maybe<TValue>>"];
m3_89 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_92  [key=2, style=dotted];
m3_90 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_91 -> m3_89  [key=0, style=bold, color=blue];
m3_106 -> m3_107  [key=0, style=solid];
m3_106 -> m3_109  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Tuple<T1, T2>>"];
m3_106 -> m3_110  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T1, T2>"];
m3_107 -> m3_108  [key=0, style=solid];
m3_109 -> m3_110  [key=0, style=solid];
m3_109 -> m3_111  [key=0, style=solid];
m3_109 -> m3_65  [key=2, style=dotted];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_66  [key=2, style=dotted];
m3_108 -> m3_109  [key=0, style=solid];
m3_111 -> m3_106  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_69  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Tuple<T1, T2>>"];
m3_68 -> m3_69  [key=0, style=solid];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_73  [key=0, style=solid];
m3_69 -> m3_3  [key=2, style=dotted];
m3_69 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label=value];
m3_70 -> m3_71  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label="out T1"];
m3_71 -> m3_72  [key=0, style=solid];
m3_72 -> m3_76  [key=0, style=solid];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label="out T2"];
m3_75 -> m3_76  [key=0, style=solid];
m3_76 -> m3_67  [key=0, style=bold, color=blue];
m3_77 -> m3_78  [key=0, style=solid];
m3_78 -> m3_79  [key=0, style=solid];
m3_78 -> m3_21  [key=2, style=dotted];
m3_79 -> m3_77  [key=0, style=bold, color=blue];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
m3_35 -> m3_36  [key=0, style=solid];
m3_37 -> m3_38  [key=0, style=solid];
m3_37 -> m3_39  [key=0, style=solid];
m3_37 -> m3_3  [key=2, style=dotted];
m3_36 -> m3_37  [key=0, style=solid];
m3_38 -> m3_40  [key=0, style=solid];
m3_38 -> m3_41  [key=2, style=dotted];
m3_38 -> m3_18  [key=2, style=dotted];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_15  [key=2, style=dotted];
m3_40 -> m3_34  [key=0, style=bold, color=blue];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_60  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Tuple<T1, T2>>"];
m3_57 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T1, T2>"];
m3_57 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label="System.Action"];
m3_58 -> m3_59  [key=0, style=solid];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_63  [key=0, style=solid];
m3_60 -> m3_65  [key=2, style=dotted];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_66  [key=2, style=dotted];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_56  [key=2, style=dotted];
m3_59 -> m3_60  [key=0, style=solid];
m3_62 -> m3_64  [key=0, style=solid];
m3_64 -> m3_57  [key=0, style=bold, color=blue];
m3_83 -> m3_84  [key=0, style=solid];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_30  [key=2, style=dotted];
m3_85 -> m3_83  [key=0, style=bold, color=blue];
m3_3 -> m3_4  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="out T"];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_3  [key=0, style=bold, color=blue];
m3_147 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_147 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_147 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_147 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
m3_148 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Just<T>"];
m3_149 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CSharpx.Maybe<TValue>>"];
m3_150 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
m3_150 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
m3_151 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label=TSource];
m5_0 -> m5_1  [key=0, style=solid, color=red];
m5_0 -> m5_5  [key=1, style=dashed, color=red, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m5_1 -> m5_2  [key=0, style=solid, color=red];
m5_1 -> m5_3  [key=2, style=dotted, color=red];
m5_1 -> m5_4  [key=1, style=dashed, color=red, label="lambda expression"];
m5_1 -> m5_1  [key=1, style=dashed, color=red, label=tseq];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m5_11 -> m5_12  [key=0, style=solid, color=red];
m5_5 -> m5_6  [key=0, style=solid, color=red];
m5_5 -> m5_7  [key=2, style=dotted, color=red];
m5_5 -> m5_8  [key=2, style=dotted, color=red];
m5_5 -> m5_9  [key=2, style=dotted, color=red];
m5_5 -> m5_10  [key=2, style=dotted, color=red];
m5_5 -> m5_11  [key=1, style=dashed, color=red, label="lambda expression"];
m5_4 -> m5_5  [key=0, style=solid, color=red];
m5_4 -> m5_12  [key=1, style=dashed, color=red, label="CommandLine.Core.Token"];
m5_12 -> m5_13  [key=0, style=solid, color=red];
m5_6 -> m5_4  [key=0, style=bold, color=blue];
m5_13 -> m5_11  [key=0, style=bold, color=blue];
m5_14 -> m5_5  [key=1, style=dashed, color=red, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m5_15 -> m5_12  [key=1, style=dashed, color=red, label="CommandLine.Core.Token"];
m5_16 -> m5_12  [key=1, style=dashed, color=red, label="CommandLine.Core.Token"];
m6_14 -> m6_15  [key=0, style=solid];
m6_15 -> m6_16  [key=0, style=solid, color=red];
m6_15 -> m6_19  [key=2, style=dotted];
m6_15 -> m6_20  [key=2, style=dotted];
m6_15 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label=expected];
m6_16 -> m6_17  [key=0, style=solid, color=red];
m6_16 -> m6_19  [key=2, style=dotted, color=red];
m6_16 -> m6_20  [key=2, style=dotted, color=red];
m6_16 -> m6_5  [key=2, style=dotted, color=red];
m6_16 -> m6_21  [key=1, style=dashed, color=red, label="lambda expression"];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_6  [key=2, style=dotted];
m6_18 -> m6_14  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid, color=red];
m6_1 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label=expected];
m6_2 -> m6_3  [key=0, style=solid, color=red];
m6_2 -> m6_5  [key=2, style=dotted, color=red];
m6_2 -> m6_7  [key=1, style=dashed, color=red, label="lambda expression"];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_6  [key=2, style=dotted];
m6_4 -> m6_0  [key=0, style=bold, color=blue];
m6_21 -> m6_22  [key=0, style=solid, color=red];
m6_7 -> m6_8  [key=0, style=solid, color=red];
m6_8 -> m6_9  [key=0, style=solid, color=red];
m6_8 -> m6_10  [key=2, style=dotted, color=red];
m6_8 -> m6_11  [key=2, style=dotted, color=red];
m6_8 -> m6_12  [key=2, style=dotted, color=red];
m6_8 -> m6_13  [key=2, style=dotted, color=red];
m6_9 -> m6_7  [key=0, style=bold, color=blue];
m6_22 -> m6_23  [key=0, style=solid, color=red];
m6_22 -> m6_10  [key=2, style=dotted, color=red];
m6_22 -> m6_11  [key=2, style=dotted, color=red];
m6_22 -> m6_12  [key=2, style=dotted, color=red];
m6_22 -> m6_13  [key=2, style=dotted, color=red];
m6_23 -> m6_21  [key=0, style=bold, color=blue];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_26  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m7_25 -> m7_26  [key=0, style=solid];
m7_25 -> m7_29  [key=2, style=dotted];
m7_25 -> m7_30  [key=2, style=dotted];
m7_25 -> m7_27  [key=1, style=dashed, color=darkseagreen4, label=array];
m7_26 -> m7_27  [key=0, style=solid];
m7_26 -> m7_31  [key=2, style=dotted];
m7_26 -> m7_32  [key=2, style=dotted];
m7_27 -> m7_28  [key=0, style=solid];
m7_28 -> m7_24  [key=0, style=bold, color=blue];
m7_33 -> m7_34  [key=0, style=solid];
m7_34 -> m7_35  [key=0, style=solid];
m7_34 -> m7_36  [key=2, style=dotted];
m7_35 -> m7_33  [key=0, style=bold, color=blue];
m7_21 -> m7_22  [key=0, style=solid];
m7_22 -> m7_23  [key=0, style=solid];
m7_23 -> m7_21  [key=0, style=bold, color=blue];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_15  [key=0, style=bold, color=crimson];
m7_10 -> m7_11  [key=0, style=solid];
m7_10 -> m7_18  [key=2, style=dotted];
m7_10 -> m7_12  [key=1, style=dashed, color=darkseagreen4, label=enumerator];
m7_10 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label=enumerator];
m7_10 -> m7_14  [key=1, style=dashed, color=darkseagreen4, label=enumerator];
m7_15 -> m7_16  [key=0, style=solid];
m7_15 -> m7_20  [key=2, style=dotted];
m7_11 -> m7_12  [key=0, style=solid];
m7_11 -> m7_17  [key=0, style=solid];
m7_11 -> m7_19  [key=2, style=dotted];
m7_12 -> m7_13  [key=0, style=solid];
m7_12 -> m7_15  [key=1, style=dashed, color=darkseagreen4, label=left];
m7_13 -> m7_14  [key=0, style=solid];
m7_13 -> m7_17  [key=0, style=solid];
m7_13 -> m7_19  [key=2, style=dotted];
m7_14 -> m7_15  [key=0, style=solid];
m7_14 -> m7_16  [key=1, style=dashed, color=darkseagreen4, label=right];
m7_16 -> m7_13  [key=0, style=solid];
m7_17 -> m7_9  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TSource, TResult>"];
m7_0 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<TSource>"];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_5  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_8  [key=2, style=dotted];
m7_2 -> m7_6  [key=0, style=solid];
m7_2 -> m7_7  [key=2, style=dotted];
m7_4 -> m7_6  [key=0, style=solid];
m7_4 -> m7_7  [key=2, style=dotted];
m7_6 -> m7_0  [key=0, style=bold, color=blue];
m9_25 -> m9_26  [key=0, style=solid];
m9_4 -> m9_5  [key=0, style=solid, color=green];
m9_4 -> m9_12  [key=1, style=dashed, color=green, label="CommandLine.Core.Token"];
m9_5 -> m9_6  [key=0, style=solid, color=green];
m9_5 -> m9_7  [key=2, style=dotted, color=green];
m9_5 -> m9_8  [key=2, style=dotted, color=green];
m9_5 -> m9_9  [key=2, style=dotted, color=green];
m9_5 -> m9_10  [key=2, style=dotted, color=green];
m9_5 -> m9_11  [key=1, style=dashed, color=green, label="lambda expression"];
m9_6 -> m9_4  [key=0, style=bold, color=blue];
m9_11 -> m9_12  [key=0, style=solid, color=green];
m9_12 -> m9_13  [key=0, style=solid, color=green];
m9_12 -> m9_14  [key=2, style=dotted, color=green];
m9_12 -> m9_15  [key=2, style=dotted, color=green];
m9_13 -> m9_11  [key=0, style=bold, color=blue];
m9_29 -> m9_30  [key=0, style=solid, color=green];
m9_39 -> m9_40  [key=0, style=solid, color=green];
m9_30 -> m9_31  [key=0, style=solid, color=green];
m9_30 -> m9_23  [key=2, style=dotted, color=green];
m9_30 -> m9_24  [key=2, style=dotted, color=green];
m9_30 -> m9_10  [key=2, style=dotted, color=green];
m9_30 -> m9_32  [key=1, style=dashed, color=green, label="lambda expression"];
m9_30 -> m9_36  [key=1, style=dashed, color=green, label="lambda expression"];
m9_31 -> m9_29  [key=0, style=bold, color=blue];
m9_32 -> m9_33  [key=0, style=solid];
m9_36 -> m9_37  [key=0, style=solid, color=green];
m9_37 -> m9_38  [key=0, style=solid, color=green];
m9_37 -> m9_8  [key=2, style=dotted, color=green];
m9_38 -> m9_36  [key=0, style=bold, color=blue];
m9_40 -> m9_41  [key=0, style=solid, color=green];
m9_40 -> m9_8  [key=2, style=dotted, color=green];
m9_41 -> m9_39  [key=0, style=bold, color=blue];
m9_26 -> m9_27  [key=0, style=solid];
m9_26 -> m9_28  [key=2, style=dotted];
m9_33 -> m9_23  [key=2, style=dotted];
m9_33 -> m9_34  [key=0, style=solid];
m9_33 -> m9_35  [key=2, style=dotted];
m9_34 -> m9_32  [key=0, style=bold, color=blue];
m9_27 -> m9_25  [key=0, style=bold, color=blue];
m9_16 -> m9_19  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m9_16 -> m9_30  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m9_16 -> m9_33  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m9_19 -> m9_19  [key=3, color=green, style=bold, label="Field variable CommandLine.Core.TargetType targetType"];
m9_19 -> m9_21  [key=0, style=solid, color=green];
m9_19 -> m9_23  [key=2, style=dotted, color=green];
m9_19 -> m9_24  [key=2, style=dotted, color=green];
m9_19 -> m9_10  [key=2, style=dotted, color=green];
m9_19 -> m9_29  [key=1, style=dashed, color=green, label="lambda expression"];
m9_19 -> m9_39  [key=1, style=dashed, color=green, label="lambda expression"];
m9_17 -> m9_19  [key=1, style=dashed, color=green, label=nameIndex];
m9_17 -> m9_30  [key=1, style=dashed, color=green, label=nameIndex];
m9_17 -> m9_18  [key=0, style=solid];
m9_17 -> m9_22  [key=2, style=dotted];
m9_17 -> m9_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_17 -> m9_33  [key=1, style=dashed, color=darkseagreen4, label=nameIndex];
m9_18 -> m9_19  [key=0, style=solid, color=green];
m9_18 -> m9_20  [key=0, style=solid];
m9_20 -> m9_21  [key=0, style=solid];
m9_21 -> m9_16  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid, color=green];
m9_0 -> m9_5  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m9_0 -> m9_12  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m9_1 -> m9_1  [key=1, style=dashed, color=green, label=tseq];
m9_1 -> m9_2  [key=0, style=solid, color=green];
m9_1 -> m9_3  [key=2, style=dotted, color=green];
m9_1 -> m9_4  [key=1, style=dashed, color=green, label="lambda expression"];
m9_1 -> m9_19  [key=3, color=green, style=bold, label="Field variable CommandLine.Core.SpecificationType tag"];
m9_2 -> m9_0  [key=0, style=bold, color=blue];
m9_42 -> m9_5  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m9_42 -> m9_12  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m9_43 -> m9_5  [key=1, style=dashed, color=green, label="System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>"];
m9_44 -> m9_12  [key=1, style=dashed, color=green, label="CommandLine.Core.Token"];
m9_46 -> m9_30  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m9_46 -> m9_33  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m9_47 -> m9_30  [key=1, style=dashed, color=green, label="CommandLine.Core.TypeDescriptor"];
m9_48 -> m9_30  [key=1, style=dashed, color=green, label=nameIndex];
m9_48 -> m9_33  [key=1, style=dashed, color=darkseagreen4, label=nameIndex];
m9_45 -> m9_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_2 -> m10_3  [key=0, style=solid];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_0  [key=3, color=darkorchid, style=bold, label="Property variable CommandLine.NameStyleFormat NameStyleFormat"];
m10_4 -> m10_5  [key=0, style=solid];
m10_5 -> m10_0  [key=0, style=bold, color=blue];
m10_6 -> m10_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
m10_6 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
m10_6 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
m10_6 -> m10_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.BaseAttribute"];
m11_0 -> m11_1  [key=0, style=solid];
m11_1 -> m11_2  [key=0, style=solid, color=red];
m11_1 -> m11_6  [key=2, style=dotted];
m11_1 -> m11_4  [key=1, style=dashed, color=darkseagreen4, label=expected];
m11_2 -> m11_3  [key=0, style=solid, color=red];
m11_2 -> m11_7  [key=2, style=dotted, color=red];
m11_2 -> m11_8  [key=2, style=dotted, color=red];
m11_4 -> m11_5  [key=0, style=solid];
m11_4 -> m11_10  [key=2, style=dotted];
m11_3 -> m11_4  [key=0, style=solid];
m11_3 -> m11_9  [key=2, style=dotted];
m11_5 -> m11_0  [key=0, style=bold, color=blue];
m12_17 -> m12_18  [key=0, style=solid];
m12_17 -> m12_19  [key=2, style=dotted];
m12_84 -> m12_85  [key=0, style=solid];
m12_84 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_84 -> m12_90  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_84 -> m12_86  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_85 -> m12_86  [key=0, style=solid];
m12_86 -> m12_87  [key=0, style=solid];
m12_86 -> m12_83  [key=2, style=dotted];
m12_87 -> m12_84  [key=0, style=bold, color=blue];
m12_27 -> m12_28  [key=0, style=solid];
m12_27 -> m12_29  [key=0, style=solid];
m12_27 -> m12_32  [key=2, style=dotted];
m12_75 -> m12_76  [key=0, style=solid];
m12_76 -> m12_77  [key=0, style=solid];
m12_76 -> m12_79  [key=2, style=dotted];
m12_76 -> m12_80  [key=2, style=dotted];
m12_76 -> m12_81  [key=2, style=dotted];
m12_77 -> m12_78  [key=0, style=solid];
m12_77 -> m12_82  [key=2, style=dotted];
m12_77 -> m12_83  [key=2, style=dotted];
m12_78 -> m12_75  [key=0, style=bold, color=blue];
m12_52 -> m12_53  [key=0, style=solid];
m12_52 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m12_52 -> m12_63  [key=1, style=dashed, color=darkseagreen4, label=T];
m12_53 -> m12_54  [key=0, style=solid];
m12_53 -> m12_68  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
m12_53 -> m12_56  [key=1, style=dashed, color=darkseagreen4, label=fail];
m12_53 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=fail];
m12_53 -> m12_60  [key=1, style=dashed, color=darkseagreen4, label=fail];
m12_53 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label=fail];
m12_54 -> m12_55  [key=0, style=solid];
m12_54 -> m12_57  [key=0, style=solid];
m12_54 -> m12_59  [key=0, style=solid];
m12_54 -> m12_61  [key=0, style=solid];
m12_54 -> m12_63  [key=0, style=solid];
m12_54 -> m12_65  [key=2, style=dotted];
m12_63 -> m12_64  [key=0, style=solid];
m12_56 -> m12_63  [key=0, style=solid];
m12_56 -> m12_66  [key=2, style=dotted];
m12_58 -> m12_63  [key=0, style=solid];
m12_58 -> m12_66  [key=2, style=dotted];
m12_60 -> m12_63  [key=0, style=solid];
m12_60 -> m12_66  [key=2, style=dotted];
m12_62 -> m12_63  [key=0, style=solid];
m12_62 -> m12_66  [key=2, style=dotted];
m12_55 -> m12_56  [key=0, style=solid];
m12_57 -> m12_58  [key=0, style=solid];
m12_59 -> m12_60  [key=0, style=solid];
m12_61 -> m12_62  [key=0, style=solid];
m12_64 -> m12_52  [key=0, style=bold, color=blue];
m12_12 -> m12_10  [key=0, style=bold, color=blue];
m12_38 -> m12_39  [key=0, style=solid];
m12_39 -> m12_40  [key=0, style=solid];
m12_39 -> m12_41  [key=2, style=dotted];
m12_40 -> m12_38  [key=0, style=bold, color=blue];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_13  [key=2, style=dotted];
m12_18 -> m12_16  [key=0, style=bold, color=blue];
m12_22 -> m12_20  [key=0, style=bold, color=blue];
m12_4 -> m12_11  [key=2, style=dotted];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_15  [key=2, style=dotted];
m12_4 -> m12_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_14 -> m12_15  [key=0, style=solid, color=red];
m12_15 -> m12_16  [key=0, style=solid, color=red];
m12_15 -> m12_3  [key=2, style=dotted, color=red];
m12_15 -> m12_4  [key=2, style=dotted, color=red];
m12_15 -> m12_17  [key=2, style=dotted, color=red];
m12_15 -> m12_18  [key=2, style=dotted, color=red];
m12_15 -> m12_19  [key=1, style=dashed, color=red, label="lambda expression"];
m12_15 -> m12_15  [key=1, style=dashed, color=red, label=attr];
m12_16 -> m12_14  [key=0, style=bold, color=blue];
m12_16 -> m12_17  [key=0, style=solid];
m12_28 -> m12_29  [key=0, style=solid];
m12_28 -> m12_27  [key=0, style=solid];
m12_10 -> m12_11  [key=0, style=solid];
m12_19 -> m12_20  [key=0, style=solid];
m12_20 -> m12_21  [key=0, style=solid];
m12_20 -> m12_22  [key=2, style=dotted];
m12_21 -> m12_19  [key=0, style=bold, color=blue];
m12_21 -> m12_22  [key=0, style=solid];
m12_21 -> m12_23  [key=2, style=dotted];
m12_48 -> m12_49  [key=0, style=solid];
m12_48 -> m12_9  [key=2, style=dotted];
m12_48 -> m12_51  [key=2, style=dotted];
m12_49 -> m12_50  [key=0, style=solid];
m12_47 -> m12_48  [key=0, style=solid];
m12_50 -> m12_47  [key=0, style=bold, color=blue];
m12_68 -> m12_69  [key=0, style=solid];
m12_68 -> m12_70  [key=2, style=dotted];
m12_67 -> m12_68  [key=0, style=solid];
m12_69 -> m12_67  [key=0, style=bold, color=blue];
m12_89 -> m12_90  [key=0, style=solid];
m12_89 -> m12_93  [key=2, style=dotted];
m12_89 -> m12_7  [key=2, style=dotted];
m12_89 -> m12_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_89 -> m12_91  [key=1, style=dashed, color=darkseagreen4, label=props];
m12_90 -> m12_91  [key=0, style=solid];
m12_90 -> m12_94  [key=2, style=dotted];
m12_90 -> m12_95  [key=2, style=dotted];
m12_88 -> m12_89  [key=0, style=solid];
m12_96 -> m12_97  [key=0, style=solid];
m12_91 -> m12_92  [key=0, style=solid];
m12_92 -> m12_88  [key=0, style=bold, color=blue];
m12_97 -> m12_98  [key=0, style=solid];
m12_98 -> m12_96  [key=0, style=bold, color=blue];
m12_121 -> m12_122  [key=0, style=solid];
m12_122 -> m12_123  [key=0, style=solid];
m12_123 -> m12_121  [key=0, style=bold, color=blue];
m12_24 -> m12_25  [key=0, style=solid];
m12_24 -> m12_26  [key=0, style=solid];
m12_26 -> m12_24  [key=0, style=bold, color=blue];
m12_26 -> m12_27  [key=0, style=solid];
m12_25 -> m12_26  [key=0, style=solid];
m12_25 -> m12_27  [key=2, style=dotted];
m12_29 -> m12_30  [key=0, style=solid];
m12_29 -> m12_23  [key=2, style=dotted];
m12_29 -> m12_31  [key=2, style=dotted];
m12_30 -> m12_28  [key=0, style=bold, color=blue];
m12_30 -> m12_29  [key=0, style=solid];
m12_99 -> m12_100  [key=0, style=solid];
m12_99 -> m12_102  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_99 -> m12_103  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_99 -> m12_104  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_100 -> m12_101  [key=0, style=solid];
m12_100 -> m12_102  [key=0, style=solid];
m12_102 -> m12_103  [key=0, style=solid];
m12_102 -> m12_104  [key=0, style=solid];
m12_102 -> m12_106  [key=2, style=dotted];
m12_103 -> m12_105  [key=0, style=solid];
m12_103 -> m12_107  [key=2, style=dotted];
m12_103 -> m12_108  [key=2, style=dotted];
m12_104 -> m12_105  [key=0, style=solid];
m12_104 -> m12_109  [key=2, style=dotted];
m12_101 -> m12_105  [key=0, style=solid];
m12_105 -> m12_99  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid, color=green];
m12_1 -> m12_3  [key=2, style=dotted];
m12_1 -> m12_4  [key=2, style=dotted];
m12_1 -> m12_5  [key=2, style=dotted];
m12_1 -> m12_6  [key=2, style=dotted];
m12_1 -> m12_7  [key=2, style=dotted];
m12_1 -> m12_8  [key=2, style=dotted];
m12_1 -> m12_9  [key=2, style=dotted];
m12_1 -> m12_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_1 -> m12_1  [key=1, style=dashed, color=darkseagreen4, label=pi];
m12_2 -> m12_0  [key=0, style=bold, color=blue];
m12_2 -> m12_3  [key=0, style=solid, color=green];
m12_2 -> m12_7  [key=2, style=dotted, color=green];
m12_2 -> m12_8  [key=2, style=dotted, color=green];
m12_2 -> m12_9  [key=2, style=dotted, color=green];
m12_2 -> m12_13  [key=2, style=dotted, color=green];
m12_2 -> m12_11  [key=2, style=dotted, color=green];
m12_2 -> m12_12  [key=2, style=dotted, color=green];
m12_2 -> m12_16  [key=1, style=dashed, color=green, label="lambda expression"];
m12_110 -> m12_111  [key=0, style=solid];
m12_110 -> m12_112  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_110 -> m12_113  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_110 -> m12_114  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_111 -> m12_112  [key=0, style=solid];
m12_111 -> m12_113  [key=0, style=solid];
m12_111 -> m12_116  [key=2, style=dotted];
m12_112 -> m12_115  [key=0, style=solid];
m12_112 -> m12_117  [key=2, style=dotted];
m12_113 -> m12_114  [key=0, style=solid];
m12_113 -> m12_118  [key=2, style=dotted];
m12_113 -> m12_119  [key=2, style=dotted];
m12_113 -> m12_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_114 -> m12_115  [key=0, style=solid];
m12_114 -> m12_120  [key=2, style=dotted];
m12_115 -> m12_110  [key=0, style=bold, color=blue];
m12_33 -> m12_34  [key=0, style=solid];
m12_34 -> m12_35  [key=0, style=solid];
m12_34 -> m12_36  [key=2, style=dotted];
m12_34 -> m12_37  [key=2, style=dotted];
m12_35 -> m12_33  [key=0, style=bold, color=blue];
m12_31 -> m12_23  [key=0, style=bold, color=blue];
m12_5 -> m12_0  [key=0, style=bold, color=blue];
m12_23 -> m12_24  [key=0, style=solid];
m12_23 -> m12_25  [key=0, style=bold, color=crimson];
m12_23 -> m12_26  [key=0, style=bold, color=crimson];
m12_23 -> m12_28  [key=0, style=bold, color=crimson];
m12_23 -> m12_30  [key=0, style=bold, color=crimson];
m12_23 -> m12_27  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_23 -> m12_29  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_71 -> m12_72  [key=0, style=solid];
m12_72 -> m12_73  [key=0, style=solid];
m12_72 -> m12_74  [key=2, style=dotted];
m12_73 -> m12_71  [key=0, style=bold, color=blue];
m12_42 -> m12_43  [key=0, style=solid];
m12_42 -> m12_48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Core.SpecificationProperty, object>"];
m12_42 -> m12_49  [key=1, style=dashed, color=darkseagreen4, label=T];
m12_43 -> m12_44  [key=0, style=solid];
m12_43 -> m12_45  [key=2, style=dotted];
m12_43 -> m12_46  [key=2, style=dotted];
m12_43 -> m12_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_44 -> m12_42  [key=0, style=bold, color=blue];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_13  [key=2, style=dotted];
m12_3 -> m12_14  [key=2, style=dotted];
m12_3 -> m12_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_3 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_124 -> m12_48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Core.SpecificationProperty, object>"];
m12_125 -> m12_49  [key=1, style=dashed, color=darkseagreen4, label=T];
m12_126 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m12_126 -> m12_90  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_2 -> m14_0  [key=0, style=bold, color=blue];
m14_3 -> m14_4  [key=0, style=solid];
m14_4 -> m14_5  [key=0, style=solid];
m14_4 -> m14_0  [key=2, style=dotted];
m14_4 -> m14_6  [key=2, style=dotted];
m14_5 -> m14_3  [key=0, style=bold, color=blue];
m14_7 -> m14_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
m15_14 -> m15_15  [key=0, style=solid];
m15_15 -> m15_16  [key=0, style=solid, color=red];
m15_15 -> m15_19  [key=2, style=dotted];
m15_15 -> m15_17  [key=1, style=dashed, color=darkseagreen4, label=expected];
m15_16 -> m15_17  [key=0, style=solid, color=red];
m15_16 -> m15_19  [key=2, style=dotted, color=red];
m15_16 -> m15_20  [key=2, style=dotted, color=red];
m15_16 -> m15_5  [key=2, style=dotted, color=red];
m15_16 -> m15_21  [key=1, style=dashed, color=red, label="lambda expression"];
m15_17 -> m15_18  [key=0, style=solid];
m15_17 -> m15_6  [key=2, style=dotted];
m15_18 -> m15_14  [key=0, style=bold, color=blue];
m15_21 -> m15_22  [key=0, style=solid, color=red];
m15_7 -> m15_8  [key=0, style=solid, color=red];
m15_8 -> m15_9  [key=0, style=solid, color=red];
m15_8 -> m15_10  [key=2, style=dotted, color=red];
m15_8 -> m15_11  [key=2, style=dotted, color=red];
m15_8 -> m15_12  [key=2, style=dotted, color=red];
m15_8 -> m15_13  [key=2, style=dotted, color=red];
m15_9 -> m15_7  [key=0, style=bold, color=blue];
m15_22 -> m15_23  [key=0, style=solid, color=red];
m15_22 -> m15_10  [key=2, style=dotted, color=red];
m15_22 -> m15_11  [key=2, style=dotted, color=red];
m15_22 -> m15_12  [key=2, style=dotted, color=red];
m15_22 -> m15_13  [key=2, style=dotted, color=red];
m15_23 -> m15_21  [key=0, style=bold, color=blue];
m15_0 -> m15_1  [key=0, style=solid];
m15_1 -> m15_2  [key=0, style=solid, color=red];
m15_1 -> m15_3  [key=1, style=dashed, color=darkseagreen4, label=expected];
m15_2 -> m15_3  [key=0, style=solid, color=red];
m15_2 -> m15_5  [key=2, style=dotted, color=red];
m15_2 -> m15_7  [key=1, style=dashed, color=red, label="lambda expression"];
m15_3 -> m15_4  [key=0, style=solid];
m15_3 -> m15_6  [key=2, style=dotted];
m15_4 -> m15_0  [key=0, style=bold, color=blue];
m16_9 -> m16_10  [key=0, style=solid];
m16_11 -> m16_9  [key=0, style=bold, color=blue];
m16_13 -> m16_1  [key=1, style=dashed, color=red, label="CommandLine.Core.OptionSpecification"];
m16_13 -> m16_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m16_13 -> m16_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m16_13 -> m16_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m16_13 -> m16_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m16_13 -> m16_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m16_13 -> m16_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m16_21 -> m16_22  [key=0, style=solid];
m16_23 -> m16_24  [key=0, style=solid, color=green];
m16_23 -> m16_8  [key=2, style=dotted, color=green];
m16_23 -> m16_9  [key=2, style=dotted, color=green];
m16_23 -> m16_10  [key=2, style=dotted, color=green];
m16_23 -> m16_28  [key=1, style=dashed, color=green, label=specs];
m16_22 -> m16_23  [key=0, style=solid, color=green];
m16_22 -> m16_6  [key=2, style=dotted];
m16_22 -> m16_7  [key=2, style=dotted];
m16_22 -> m16_25  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m16_24 -> m16_25  [key=0, style=solid];
m16_24 -> m16_11  [key=2, style=dotted];
m16_24 -> m16_6  [key=2, style=dotted];
m16_24 -> m16_7  [key=2, style=dotted];
m16_24 -> m16_12  [key=2, style=dotted];
m16_24 -> m16_13  [key=2, style=dotted];
m16_24 -> m16_14  [key=2, style=dotted];
m16_24 -> m16_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_25 -> m16_26  [key=0, style=solid];
m16_25 -> m16_15  [key=2, style=dotted];
m16_25 -> m16_16  [key=2, style=dotted];
m16_26 -> m16_21  [key=0, style=bold, color=blue];
m16_8 -> m16_0  [key=0, style=bold, color=blue];
m16_0 -> m16_1  [key=0, style=solid, color=red];
m16_0 -> m16_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_0 -> m16_3  [key=1, style=dashed, color=darkseagreen4, label=char];
m16_0 -> m16_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_0 -> m16_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_0 -> m16_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_0 -> m16_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m16_2 -> m16_3  [key=0, style=solid, color=green];
m16_2 -> m16_8  [key=2, style=dotted, color=green];
m16_2 -> m16_9  [key=2, style=dotted, color=green];
m16_2 -> m16_10  [key=2, style=dotted, color=green];
m16_2 -> m16_18  [key=1, style=dashed, color=green, label=specs];
m16_1 -> m16_2  [key=0, style=solid, color=red];
m16_1 -> m16_6  [key=2, style=dotted];
m16_1 -> m16_7  [key=2, style=dotted];
m16_1 -> m16_4  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m16_3 -> m16_4  [key=0, style=solid];
m16_3 -> m16_11  [key=2, style=dotted];
m16_3 -> m16_6  [key=2, style=dotted];
m16_3 -> m16_7  [key=2, style=dotted];
m16_3 -> m16_12  [key=2, style=dotted];
m16_3 -> m16_13  [key=2, style=dotted];
m16_3 -> m16_14  [key=2, style=dotted];
m16_3 -> m16_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_4 -> m16_5  [key=0, style=solid];
m16_4 -> m16_15  [key=2, style=dotted];
m16_4 -> m16_16  [key=2, style=dotted];
m16_5 -> m16_0  [key=0, style=bold, color=blue];
m16_5 -> m16_6  [key=0, style=solid];
m16_6 -> m16_7  [key=0, style=solid];
m16_7 -> m16_8  [key=0, style=solid];
m16_27 -> m16_28  [key=0, style=solid];
m16_18 -> m16_19  [key=0, style=solid];
m16_18 -> m16_20  [key=2, style=dotted];
m16_28 -> m16_29  [key=0, style=solid];
m16_28 -> m16_20  [key=2, style=dotted];
m16_17 -> m16_18  [key=0, style=solid];
m16_19 -> m16_17  [key=0, style=bold, color=blue];
m16_29 -> m16_27  [key=0, style=bold, color=blue];
m16_10 -> m16_11  [key=0, style=solid];
m16_10 -> m16_0  [key=2, style=dotted];
m16_10 -> m16_12  [key=2, style=dotted];
m16_30 -> m16_18  [key=1, style=dashed, color=darkseagreen4, label=specs];
m16_31 -> m16_28  [key=1, style=dashed, color=darkseagreen4, label=specs];
m18_9 -> m18_7  [key=0, style=bold, color=blue];
m18_0 -> m18_1  [key=0, style=solid];
m18_0 -> m18_2  [key=1, style=dashed, color=green, label="CommandLine.Infrastructure.Maybe<int>"];
m18_1 -> m18_0  [key=0, style=bold, color=blue];
m18_1 -> m18_2  [key=0, style=solid, color=green];
m18_5 -> m18_7  [key=0, style=solid];
m18_5 -> m18_6  [key=0, style=solid];
m18_7 -> m18_8  [key=0, style=solid];
m18_7 -> m18_0  [key=2, style=dotted];
m18_8 -> m18_9  [key=0, style=solid];
m18_8 -> m18_10  [key=2, style=dotted];
m18_8 -> m18_6  [key=2, style=dotted];
m18_8 -> m18_4  [key=0, style=bold, color=blue];
m18_4 -> m18_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptorKind"];
m18_4 -> m18_5  [key=0, style=solid];
m18_4 -> m18_2  [key=0, style=bold, color=blue];
m18_6 -> m18_8  [key=0, style=solid];
m18_6 -> m18_9  [key=2, style=dotted];
m18_2 -> m18_3  [key=0, style=solid, color=green];
m18_3 -> m18_4  [key=0, style=solid];
m18_3 -> m18_5  [key=2, style=dotted];
m18_3 -> m18_6  [key=2, style=dotted];
m18_3 -> m18_0  [key=0, style=bold, color=blue];
m18_10 -> m18_2  [key=1, style=dashed, color=green, label="CommandLine.Core.TypeDescriptor"];
m18_10 -> m18_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m19_6 -> m19_7  [key=0, style=solid, color=green];
m19_7 -> m19_8  [key=0, style=solid, color=green];
m19_7 -> m19_9  [key=2, style=dotted, color=green];
m19_8 -> m19_6  [key=0, style=bold, color=blue];
m21_20 -> m21_21  [key=0, style=solid];
m21_23 -> m21_10  [key=2, style=dotted];
m21_23 -> m21_6  [key=2, style=dotted];
m21_23 -> m21_7  [key=2, style=dotted];
m21_23 -> m21_11  [key=2, style=dotted];
m21_23 -> m21_12  [key=2, style=dotted];
m21_23 -> m21_13  [key=2, style=dotted];
m21_23 -> m21_24  [key=0, style=solid];
m21_23 -> m21_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_21 -> m21_6  [key=2, style=dotted];
m21_21 -> m21_7  [key=2, style=dotted];
m21_21 -> m21_22  [key=0, style=solid];
m21_21 -> m21_24  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m21_22 -> m21_8  [key=2, style=dotted];
m21_22 -> m21_9  [key=2, style=dotted];
m21_22 -> m21_23  [key=0, style=solid];
m21_22 -> m21_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
m21_24 -> m21_14  [key=2, style=dotted];
m21_24 -> m21_15  [key=2, style=dotted];
m21_24 -> m21_25  [key=0, style=solid];
m21_25 -> m21_20  [key=0, style=bold, color=blue];
m21_0 -> m21_1  [key=0, style=solid];
m21_3 -> m21_4  [key=0, style=solid, color=green];
m21_3 -> m21_10  [key=2, style=dotted, color=green];
m21_3 -> m21_6  [key=2, style=dotted, color=green];
m21_3 -> m21_7  [key=2, style=dotted, color=green];
m21_3 -> m21_11  [key=2, style=dotted, color=green];
m21_3 -> m21_12  [key=2, style=dotted, color=green];
m21_3 -> m21_13  [key=2, style=dotted, color=green];
m21_3 -> m21_16  [key=1, style=dashed, color=green, label="lambda expression"];
m21_2 -> m21_3  [key=0, style=solid, color=green];
m21_2 -> m21_8  [key=2, style=dotted];
m21_2 -> m21_9  [key=2, style=dotted];
m21_2 -> m21_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m21_4 -> m21_5  [key=0, style=solid];
m21_4 -> m21_14  [key=2, style=dotted];
m21_4 -> m21_15  [key=2, style=dotted];
m21_1 -> m21_2  [key=0, style=solid];
m21_1 -> m21_4  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m21_1 -> m21_6  [key=2, style=dotted];
m21_1 -> m21_7  [key=2, style=dotted];
m21_5 -> m21_0  [key=0, style=bold, color=blue];
m21_26 -> m21_27  [key=0, style=solid];
m21_16 -> m21_17  [key=0, style=solid];
m21_17 -> m21_18  [key=0, style=solid];
m21_17 -> m21_19  [key=2, style=dotted];
m21_18 -> m21_16  [key=0, style=bold, color=blue];
m21_27 -> m21_19  [key=2, style=dotted];
m21_27 -> m21_28  [key=0, style=solid];
m21_28 -> m21_26  [key=0, style=bold, color=blue];
m21_29 -> m21_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m21_30 -> m21_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
}
