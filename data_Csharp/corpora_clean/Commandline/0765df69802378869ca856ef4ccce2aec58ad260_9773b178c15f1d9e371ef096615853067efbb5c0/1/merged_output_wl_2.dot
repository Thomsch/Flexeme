digraph  {
n0 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityTests()", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityTests()", span="7-7"];
n1 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityTests()", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityTests()", span="7-7"];
n2 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="24-24"];
n3 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", label="Assert.Equal(expected, word.ToQuantity(quatity))", span="26-26"];
n4 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="24-24"];
n5 [cluster="string.ToQuantity(int, Humanizer.ShowQuantityAs)", label="Entry string.ToQuantity(int, Humanizer.ShowQuantityAs)", span="25-25"];
n6 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n7 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="41-41"];
n8 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.None))", span="43-43"];
n9 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="41-41"];
n10 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="58-58"];
n11 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Numeric))", span="61-61"];
n12 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="58-58"];
n13 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="77-77"];
n14 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Words))", span="79-79"];
n15 [cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="77-77"];
d152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", color=green, community=0, label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="391-395"];
d151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386"];
d153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="398-398"];
d9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
d155 [cluster="lambda expression", label="Entry lambda expression", span="392-392"];
d156 [cluster="lambda expression", color=green, community=0, label="0: new FakeOptionsWithSequenceAndSeparator()", span="392-392"];
d157 [cluster="lambda expression", label="Exit lambda expression", span="392-392"];
d158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
d154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386"];
d104 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
d3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="28-32"];
d16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="49-53"];
d24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="72-76"];
d32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="96-100"];
d41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="118-122"];
d48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="141-145"];
d56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="163-167"];
d65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="182-186"];
d75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="201-205"];
d85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="221-225"];
d93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="240-244"];
d101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="264-268"];
d111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="283-287"];
d120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="302-306"];
d128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="321-325"];
d136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="346-350"];
d144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="369-373"];
d160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="413-417"];
d190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="468-472"];
d200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="488-492"];
d209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="508-512"];
d217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="528-532"];
d226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="546-550"];
d235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="565-569"];
d243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="584-588"];
d252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="603-607"];
d260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="622-626"];
d267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="642-646"];
d276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="661-665"];
d284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="683-687"];
d292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="702-706"];
d300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="724-728"];
d308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="746-750"];
d315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="766-770"];
d326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="790-794"];
d335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="813-817"];
d342 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="832-836"];
d164 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="414-414"];
d102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="271-271"];
d137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="353-353"];
d145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="376-376"];
d161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="420-420"];
d170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="452-452"];
d201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="495-495"];
d210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="515-515"];
d285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="690-690"];
d301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="731-731"];
d309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="753-753"];
d317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="775-775"];
d318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="777-777"];
d328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="799-799"];
d329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="801-801"];
d336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="expected.ShouldBeEquivalentTo(result.Value)", span="820-820"];
d343 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="expected.ShouldBeEquivalentTo(result.Value)", span="839-839"];
d1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var fakeOptions = new FakeOptions()", span="22-22"];
d2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="23-25"];
d4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Assert.True(expectedResult.Equals(result))", span="35-35"];
d12 [cluster="lambda expression", label="Entry lambda expression", span="29-29"];
d15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44"];
d17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Assert.Equal(expected, result.Value.LongValue)", span="56-56"];
d20 [cluster="lambda expression", label="Entry lambda expression", span="50-50"];
d23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67"];
d25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Assert.Equal(expected, result.Value.DoubleValue)", span="79-79"];
d27 [cluster="lambda expression", label="Entry lambda expression", span="73-73"];
d31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="91-91"];
d33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="103-103"];
d36 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
d40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113"];
d42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="125-125"];
d44 [cluster="lambda expression", label="Entry lambda expression", span="119-119"];
d47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136"];
d49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="148-148"];
d51 [cluster="lambda expression", label="Entry lambda expression", span="142-142"];
d55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158"];
d57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="170-170"];
d59 [cluster="lambda expression", label="Entry lambda expression", span="164-164"];
d64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="179-179"];
d66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="189-189"];
d70 [cluster="lambda expression", label="Entry lambda expression", span="183-183"];
d74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="198-198"];
d76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="208-208"];
d79 [cluster="lambda expression", label="Entry lambda expression", span="202-202"];
d84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="218-218"];
d86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="228-228"];
d88 [cluster="lambda expression", label="Entry lambda expression", span="222-222"];
d92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="237-237"];
d94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="247-247"];
d96 [cluster="lambda expression", label="Entry lambda expression", span="241-241"];
d100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259"];
d105 [cluster="lambda expression", label="Entry lambda expression", span="265-265"];
d110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="280-280"];
d112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="290-290"];
d115 [cluster="lambda expression", label="Entry lambda expression", span="284-284"];
d119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="299-299"];
d121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="309-309"];
d123 [cluster="lambda expression", label="Entry lambda expression", span="303-303"];
d127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="318-318"];
d129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="328-328"];
d131 [cluster="lambda expression", label="Entry lambda expression", span="322-322"];
d135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="337-343"];
d140 [cluster="lambda expression", label="Entry lambda expression", span="347-347"];
d143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364"];
d147 [cluster="lambda expression", label="Entry lambda expression", span="370-370"];
d159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408"];
d163 [cluster="lambda expression", label="Entry lambda expression", span="414-414"];
d189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="461-465"];
d191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="475-475"];
d194 [cluster="lambda expression", label="Entry lambda expression", span="469-469"];
d199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="483-486"];
d204 [cluster="lambda expression", label="Entry lambda expression", span="489-489"];
d208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="503-506"];
d212 [cluster="lambda expression", label="Entry lambda expression", span="509-509"];
d216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="522-526"];
d218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="535-535"];
d221 [cluster="lambda expression", label="Entry lambda expression", span="529-529"];
d225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="543-543"];
d227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="553-553"];
d229 [cluster="lambda expression", label="Entry lambda expression", span="547-547"];
d234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="562-562"];
d236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="572-572"];
d238 [cluster="lambda expression", label="Entry lambda expression", span="566-566"];
d242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="581-581"];
d244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="591-591"];
d247 [cluster="lambda expression", label="Entry lambda expression", span="585-585"];
d251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="600-600"];
d253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="610-610"];
d255 [cluster="lambda expression", label="Entry lambda expression", span="604-604"];
d259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="619-619"];
d261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="629-629"];
d263 [cluster="lambda expression", label="Entry lambda expression", span="623-623"];
d266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637"];
d268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Assert.True(expected.Equals(result.Value.StringValue))", span="649-649"];
d271 [cluster="lambda expression", label="Entry lambda expression", span="643-643"];
d275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="658-658"];
d277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="668-668"];
d279 [cluster="lambda expression", label="Entry lambda expression", span="662-662"];
d283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678"];
d287 [cluster="lambda expression", label="Entry lambda expression", span="684-684"];
d291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="699-699"];
d293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="709-709"];
d295 [cluster="lambda expression", label="Entry lambda expression", span="703-703"];
d299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719"];
d303 [cluster="lambda expression", label="Entry lambda expression", span="725-725"];
d307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741"];
d311 [cluster="lambda expression", label="Entry lambda expression", span="747-747"];
d314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="761-761"];
d316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="result.Value.FileName != null", span="773-773"];
d321 [cluster="lambda expression", label="Entry lambda expression", span="767-767"];
d325 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="785-785"];
d327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="result.Value.Offset != null", span="797-797"];
d331 [cluster="lambda expression", label="Entry lambda expression", span="791-791"];
d334 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="808-808"];
d338 [cluster="lambda expression", label="Entry lambda expression", span="814-814"];
d341 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="827-827"];
d345 [cluster="lambda expression", label="Entry lambda expression", span="833-833"];
d165 [cluster="lambda expression", label="Exit lambda expression", span="414-414"];
d103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259"];
d138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334"];
d146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364"];
d162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408"];
d167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="432-438"];
d169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="442-449"];
d171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429"];
d202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481"];
d211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501"];
d286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678"];
d302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719"];
d310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741"];
d319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="761-761"];
d320 [cluster="Unk.get_IsSome", label="Entry Unk.get_IsSome", span=""];
d330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="785-785"];
d337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="808-808"];
d344 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="827-827"];
d0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19"];
d6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
d13 [cluster="lambda expression", label=fakeOptions, span="29-29"];
d7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
d8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
d5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19"];
d10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
d11 [cluster="Unk.True", label="Entry Unk.True", span=""];
d14 [cluster="lambda expression", label="Exit lambda expression", span="29-29"];
d18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44"];
d19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d22 [cluster="lambda expression", label="Exit lambda expression", span="50-50"];
d21 [cluster="lambda expression", label="new FakeOptions()", span="50-50"];
d26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67"];
d29 [cluster="lambda expression", label="Exit lambda expression", span="73-73"];
d28 [cluster="lambda expression", label="new FakeOptionsWithDouble()", span="73-73"];
d34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="91-91"];
d35 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
d38 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
d37 [cluster="lambda expression", label="new FakeOptionsWithSequence()", span="97-97"];
d43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113"];
d46 [cluster="lambda expression", label="Exit lambda expression", span="119-119"];
d45 [cluster="lambda expression", label="new FakeOptions()", span="119-119"];
d50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136"];
d53 [cluster="lambda expression", label="Exit lambda expression", span="142-142"];
d52 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="142-142"];
d58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158"];
d61 [cluster="lambda expression", label="Exit lambda expression", span="164-164"];
d60 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="164-164"];
d63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176"];
d68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
d69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
d67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176"];
d72 [cluster="lambda expression", label="Exit lambda expression", span="183-183"];
d71 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="183-183"];
d73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195"];
d78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
d77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195"];
d81 [cluster="lambda expression", label="Exit lambda expression", span="202-202"];
d80 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="202-202"];
d83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215"];
d87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215"];
d90 [cluster="lambda expression", label="Exit lambda expression", span="222-222"];
d89 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="222-222"];
d91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234"];
d95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234"];
d98 [cluster="lambda expression", label="Exit lambda expression", span="241-241"];
d97 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="241-241"];
d107 [cluster="lambda expression", label="Exit lambda expression", span="265-265"];
d106 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="265-265"];
d109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277"];
d114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
d113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277"];
d117 [cluster="lambda expression", label="Exit lambda expression", span="284-284"];
d116 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="284-284"];
d118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296"];
d122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296"];
d125 [cluster="lambda expression", label="Exit lambda expression", span="303-303"];
d124 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="303-303"];
d126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315"];
d130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315"];
d133 [cluster="lambda expression", label="Exit lambda expression", span="322-322"];
d132 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="322-322"];
d134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334"];
d139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
d142 [cluster="lambda expression", label="Exit lambda expression", span="347-347"];
d141 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="347-347"];
d149 [cluster="lambda expression", label="Exit lambda expression", span="370-370"];
d148 [cluster="lambda expression", label="new FakeOptionsWithSequenceWithoutRange()", span="370-370"];
d188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458"];
d193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
d192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458"];
d196 [cluster="lambda expression", label="Exit lambda expression", span="469-469"];
d195 [cluster="lambda expression", label="new FakeOptionsWithSets()", span="469-469"];
d198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481"];
d203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
d206 [cluster="lambda expression", label="Exit lambda expression", span="489-489"];
d205 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="489-489"];
d207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501"];
d214 [cluster="lambda expression", label="Exit lambda expression", span="509-509"];
d213 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="509-509"];
d215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520"];
d220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
d219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520"];
d223 [cluster="lambda expression", label="Exit lambda expression", span="529-529"];
d222 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="529-529"];
d224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540"];
d228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540"];
d231 [cluster="lambda expression", label="Exit lambda expression", span="547-547"];
d230 [cluster="lambda expression", label="new FakeOptionWithRequired()", span="547-547"];
d233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559"];
d237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559"];
d240 [cluster="lambda expression", label="Exit lambda expression", span="566-566"];
d239 [cluster="lambda expression", label="new FakeOptions()", span="566-566"];
d241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578"];
d246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
d245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578"];
d249 [cluster="lambda expression", label="Exit lambda expression", span="585-585"];
d248 [cluster="lambda expression", label="new FakeOptions()", span="585-585"];
d250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597"];
d254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597"];
d257 [cluster="lambda expression", label="Exit lambda expression", span="604-604"];
d256 [cluster="lambda expression", label="new FakeOptions()", span="604-604"];
d258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616"];
d262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616"];
d265 [cluster="lambda expression", label="Exit lambda expression", span="623-623"];
d264 [cluster="lambda expression", label="new FakeOptions()", span="623-623"];
d269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637"];
d270 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
d273 [cluster="lambda expression", label="Exit lambda expression", span="643-643"];
d272 [cluster="lambda expression", label="new FakeOptions()", span="643-643"];
d274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655"];
d278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655"];
d281 [cluster="lambda expression", label="Exit lambda expression", span="662-662"];
d280 [cluster="lambda expression", label="new FakeOptionsWithRequiredValue()", span="662-662"];
d289 [cluster="lambda expression", label="Exit lambda expression", span="684-684"];
d288 [cluster="lambda expression", label="new FakeOptions()", span="684-684"];
d290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696"];
d294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696"];
d297 [cluster="lambda expression", label="Exit lambda expression", span="703-703"];
d296 [cluster="lambda expression", label="new FakeOptionsWithSequenceMinMaxEqual()", span="703-703"];
d305 [cluster="lambda expression", label="Exit lambda expression", span="725-725"];
d304 [cluster="lambda expression", label="new FakeOptionsWithNullables()", span="725-725"];
d313 [cluster="lambda expression", label="Exit lambda expression", span="747-747"];
d312 [cluster="lambda expression", label="new FakeOptionsWithNullables()", span="747-747"];
d323 [cluster="lambda expression", label="Exit lambda expression", span="767-767"];
d322 [cluster="lambda expression", label="new FakeOptionsWithFSharpOption()", span="767-767"];
d333 [cluster="lambda expression", label="Exit lambda expression", span="791-791"];
d332 [cluster="lambda expression", label="new FakeOptionsWithFSharpOption()", span="791-791"];
d340 [cluster="lambda expression", label="Exit lambda expression", span="814-814"];
d339 [cluster="lambda expression", label="new FakeOptionsWithRequiredValue()", span="814-814"];
d347 [cluster="lambda expression", label="Exit lambda expression", span="833-833"];
d346 [cluster="lambda expression", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="833-833"];
d166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429"];
d168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="439-439"];
d172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
d173 [cluster="lambda expression", label="Entry lambda expression", span="443-443"];
d176 [cluster="lambda expression", label="Entry lambda expression", span="444-446"];
d349 [label=fakeOptions, span=""];
d30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
d39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
d54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
d62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
d82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
d99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
d108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
d174 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="443-443"];
d150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
d197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
d232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
d282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
d298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
d306 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
d324 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
d348 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
d175 [cluster="lambda expression", label="Exit lambda expression", span="443-443"];
d178 [cluster="lambda expression", label="Exit lambda expression", span="444-446"];
d177 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="445-446"];
d181 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="446-446"];
d185 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="446-446"];
d179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
d180 [cluster="lambda expression", label="Entry lambda expression", span="446-446"];
d350 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d182 [cluster="lambda expression", label="Exit lambda expression", span="446-446"];
d183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
d184 [cluster="lambda expression", label="Entry lambda expression", span="446-446"];
d186 [cluster="lambda expression", label="Exit lambda expression", span="446-446"];
d187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_351 [cluster="CommandLine.Tests.Fakes.Secert_Verb.Secert_Verb()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Secert_Verb.Secert_Verb()", span="96-96"];
m0_0 [cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="ParserTests.cs", label="Entry Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", span="14-14"];
m0_4 [cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.ConvertToOrdinal(int)", file="ParserTests.cs", label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.ConvertToOrdinal(int)", span="76-76"];
m0_1 [cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="ParserTests.cs", label="return new EnglishNumberToWordsConverter().ConvertToOrdinal(number);", span="16-16"];
m0_3 [cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", file="ParserTests.cs", label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", span="5-5"];
m0_5 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="ParserTests.cs", label="Assert.True(text.Length > 0)", span="27-27"];
m0_2 [cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="ParserTests.cs", label="Exit Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", span="14-14"];
m0_6 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="16-16"];
m0_198 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="353-353"];
m0_206 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", color=green, community=0, file="ParserTests.cs", label="0: lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="368-368"];
m0_204 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="365-365"];
m0_205 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="367-367"];
m0_207 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="374-374"];
m0_202 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="var result = help.ToString()", span="361-361"];
m0_203 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="364-364"];
m0_208 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="375-375"];
m0_209 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="376-376"];
m0_210 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="377-377"];
m0_211 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="378-378"];
m0_212 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="379-379"];
m0_213 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="lines[8].ShouldBeEquivalentTo(''version    Display version information.'')", span="380-380"];
m0_199 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="var help = new StringWriter()", span="356-356"];
m0_201 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="360-360"];
m0_200 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="357-357"];
m0_214 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="353-353"];
m0_281 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="488-488"];
m0_288 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", color=green, community=0, file="ParserTests.cs", label="0: lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="503-503"];
m0_286 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="500-500"];
m0_287 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="502-502"];
m0_289 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="509-509"];
m0_290 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''Option 'badoption' is unknown.'')", span="510-510"];
m0_291 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="511-511"];
m0_292 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''Basic cloning:'')", span="512-512"];
m0_293 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''git clone https://github.com/gsscoder/csharpx'')", span="513-513"];
m0_294 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''Cloning quietly:'')", span="514-514"];
m0_295 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[8].ShouldBeEquivalentTo(''git clone --quiet https://github.com/gsscoder/railwaysharp'')", span="515-515"];
m0_296 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[9].ShouldBeEquivalentTo(''Cloning without hard links:'')", span="516-516"];
m0_297 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[10].ShouldBeEquivalentTo(''git clone --no-hardlinks https://github.com/gsscoder/csharpx'')", span="517-517"];
m0_298 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[11].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="518-518"];
m0_299 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[12].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="519-519"];
m0_300 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[13].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="520-520"];
m0_301 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[14].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="521-521"];
m0_302 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[15].ShouldBeEquivalentTo(''--version         Display version information.'')", span="522-522"];
m0_303 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="lines[16].ShouldBeEquivalentTo(''URLS (pos. 0)     A list of url(s) to clone.'')", span="523-523"];
m0_285 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="var result = help.ToString()", span="497-497"];
m0_282 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="var help = new StringWriter()", span="491-491"];
m0_284 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb_With_Usage_Attribute, Commit_Verb_With_Usage_Attribute, Clone_Verb_With_Usage_Attribute>(\r\n                new[] { ''clone'', ''--badoption=@bad?value'' })", span="495-496"];
m0_283 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="492-492"];
m0_304 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="488-488"];
m0_86 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", span="155-155"];
m0_91 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs", label="((Parsed<Options_With_Switches>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="166-166"];
m0_88 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs", label="var expectedOptions = new Options_With_Switches()", span="159-159"];
m0_90 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs", label="var result = sut.ParseArguments<Options_With_Switches>(args)", span="163-163"];
m0_87 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs", label="var args = new[] {''-''}", span="158-158"];
m0_89 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs", label="var sut = new Parser()", span="160-160"];
m0_92 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", span="155-155"];
m0_104 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="205-205"];
m0_109 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="218-218"];
m0_105 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="var expectedOptions = new Commit_Verb() { Message = message }", span="208-208"];
m0_107 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="var result = sut.ParseArguments(\r\n                args,\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="212-214"];
m0_108 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="Assert.IsType<Commit_Verb>(((Parsed<object>)result).Value)", span="217-217"];
m0_106 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="var sut = new Parser()", span="209-209"];
m0_110 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="205-205"];
m0_137 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="281-281"];
m0_142 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="292-292"];
m0_141 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="291-291"];
m0_138 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="var expectedError = new HelpRequestedError()", span="284-284"];
m0_140 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="288-288"];
m0_139 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="var sut = new Parser()", span="285-285"];
m0_143 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="281-281"];
m0_406 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="678-678"];
m0_409 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="689-689"];
m0_408 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="var result = sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(arguments)", span="686-686"];
m0_410 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="690-690"];
m0_407 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="683-683"];
m0_411 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="678-678"];
m0_453 [cluster="Unk.BeTrue", file="ParserTests.cs", label="Entry Unk.BeTrue", span=""];
m0_67 [cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6"];
m0_341 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", span="587-587"];
m0_349 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="602-602"];
m0_346 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="599-599"];
m0_347 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="result.GetType().Should().Be<Parsed<object>>()", span="600-600"];
m0_348 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="result.TypeInfo.Current.Should().Be<Secert_Verb>()", span="601-601"];
m0_342 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="var expectedOptions = new Secert_Verb { Force = true, SecertOption = null}", span="590-590"];
m0_345 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="var result = sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { ''secert'', ''--force'' })", span="595-595"];
m0_343 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="var help = new StringWriter()", span="591-591"];
m0_344 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="592-592"];
m0_350 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", span="587-587"];
m0_444 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="ParserTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="340-340"];
m0_154 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="297-297"];
m0_159 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="308-308"];
m0_158 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="var result = help.ToString()", span="305-305"];
m0_155 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="var help = new StringWriter()", span="300-300"];
m0_157 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="304-304"];
m0_156 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="301-301"];
m0_160 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="297-297"];
m0_8 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="ParserTests.cs", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="37-37"];
m0_61 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112"];
m0_65 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="((Parsed<Simple_Options_With_Values>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="130-130"];
m0_62 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="var expectedOptions = new Simple_Options_With_Values\r\n                                  {\r\n                                      StringValue = ''astring'',\r\n                                      LongValue = 20L,\r\n                                      StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                                      IntValue = 30\r\n                                  }", span="115-121"];
m0_64 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="var result =\r\n                sut.ParseArguments<Simple_Options_With_Values>(\r\n                    new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="125-127"];
m0_63 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="var sut = new Parser(with => with.EnableDashDash = true)", span="122-122"];
m0_66 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112"];
m0_271 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="472-472"];
m0_276 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="483-483"];
m0_275 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="var result = help.ToString()", span="480-480"];
m0_272 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="var help = new StringWriter()", span="475-475"];
m0_274 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''commit'', ''--help'' })", span="479-479"];
m0_273 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="476-476"];
m0_277 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="472-472"];
m0_146 [cluster="Unk.ContainSingle", file="ParserTests.cs", label="Entry Unk.ContainSingle", span=""];
m0_478 [cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Null_default()", span="790-790"];
m0_480 [cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="ParserTests.cs", label="parser.ParseArguments<NullDefaultCommandLineArguments>(''''.Split())\r\n                .WithParsed(r =>\r\n                {\r\n                    Assert.Equal(null, r.User);\r\n                })", span="793-797"];
m0_479 [cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="ParserTests.cs", label="Parser parser = new Parser()", span="792-792"];
m0_481 [cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Null_default()", span="790-790"];
m0_60 [cluster="Unk.>", file="ParserTests.cs", label="Entry Unk.>", span=""];
m0_35 [cluster="CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", file="ParserTests.cs", label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", span="46-46"];
m0_393 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="659-659"];
m0_396 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="670-670"];
m0_395 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="var result = sut.ParseArguments<Simple_Options>(arguments)", span="667-667"];
m0_397 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="671-671"];
m0_394 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="664-664"];
m0_398 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="659-659"];
m0_78 [cluster="CommandLine.Tests.Fakes.Add_Verb.Add_Verb()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Add_Verb.Add_Verb()", span="7-7"];
m0_22 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="ParserTests.cs", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="146-146"];
m0_115 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="223-223"];
m0_118 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="Assert.IsType<NotParsed<object>>(result)", span="234-234"];
m0_117 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="229-231"];
m0_116 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="var sut = Parser.Default", span="226-226"];
m0_119 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="223-223"];
m0_190 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="ParserTests.cs", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
m0_120 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="239-239"];
m0_125 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="261-261"];
m0_121 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="242-251"];
m0_123 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="var result =\r\n                sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="255-257"];
m0_124 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="260-260"];
m0_122 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="var sut = new Parser()", span="252-252"];
m0_126 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="239-239"];
m0_71 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135"];
m0_76 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="150-150"];
m0_72 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs", label="var expectedOptions = new Add_Verb { Patch = true, FileName = ''--strange-fn'' }", span="138-138"];
m0_74 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs", label="var result = sut.ParseArguments(\r\n                new[] { ''add'', ''-p'', ''--'', ''--strange-fn'' },\r\n                typeof(Add_Verb),\r\n                typeof(Commit_Verb),\r\n                typeof(Clone_Verb))", span="142-146"];
m0_75 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs", label="Assert.IsType<Add_Verb>(((Parsed<object>)result).Value)", span="149-149"];
m0_73 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs", label="var sut = new Parser(with => with.EnableDashDash = true)", span="139-139"];
m0_77 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135"];
m0_55 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", span="98-98"];
m0_58 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs", label="Assert.IsType<NotParsed<Options_With_Switches>>(result)", span="107-107"];
m0_57 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs", label="var result = sut.ParseArguments<Options_With_Switches>(new[] { ''-i'', ''-i'', ''-o'', ''file'' })", span="104-104"];
m0_56 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs", label="var sut = Parser.Default", span="101-101"];
m0_59 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", span="98-98"];
m0_161 [cluster="Unk.BeGreaterThan", file="ParserTests.cs", label="Entry Unk.BeGreaterThan", span=""];
m0_7 [cluster="System.IO.StringWriter.StringWriter()", file="ParserTests.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m0_165 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="313-313"];
m0_170 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="((NotParsed<Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="324-324"];
m0_169 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="323-323"];
m0_166 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="var expectedError = new VersionRequestedError()", span="316-316"];
m0_168 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="320-320"];
m0_167 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="var sut = new Parser()", span="317-317"];
m0_171 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="313-313"];
m0_136 [cluster="CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13"];
m0_438 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="730-730"];
m0_442 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs", label="((NotParsed<Options_With_SetName_That_Ends_With_Previous_SetName>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="745-745"];
m0_439 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''somethingelese''), string.Empty)\r\n                }", span="733-737"];
m0_441 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs", label="var result = sut.ParseArguments<Options_With_SetName_That_Ends_With_Previous_SetName>(\r\n                new[] { ''--weburl'', ''value'', ''--somethingelse'', ''othervalue'' })", span="741-742"];
m0_440 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs", label="var sut = new Parser()", span="738-738"];
m0_443 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="730-730"];
m0_463 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", span="761-761"];
m0_467 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="result.MapResult(_ => true, _ => false).Should().BeTrue()", span="767-767"];
m0_466 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="var result = sut.ParseArguments<Simple_Options>(sameValues)", span="765-765"];
m0_464 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="var sameValues = new[] { ''--stringvalue=test1'', ''--shortandlong=test2'' }", span="763-763"];
m0_465 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="var sut = new Parser(parserSettings => { parserSettings.IgnoreUnknownArguments = true; })", span="764-764"];
m0_468 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", span="761-761"];
m0_48 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", span="83-83"];
m0_52 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs", label="((Parsed<Options_With_Switches>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="93-93"];
m0_49 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs", label="var expectedOptions = new Options_With_Switches { OutputFile = outputFile }", span="86-86"];
m0_51 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs", label="var result = sut.ParseArguments<Options_With_Switches>(args)", span="90-90"];
m0_50 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs", label="var sut = new Parser()", span="87-87"];
m0_53 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", span="83-83"];
m0_172 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="ParserTests.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="468-468"];
m0_46 [cluster="CommandLine.Parser.Parser()", file="ParserTests.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m0_512 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", span="837-837"];
m0_514 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="ParserTests.cs", label="parser.ParseArguments<Options_With_Shuffled_Index_Values>(\r\n                new[] { ''zero'', ''one'', ''two'' })\r\n                .WithNotParsed(errors => { throw new InvalidOperationException(''Must be parsed.''); })\r\n                .WithParsed(args =>\r\n                {\r\n                    Assert.Equal(''zero'', args.Arg0);\r\n                    Assert.Equal(''one'', args.Arg1);\r\n                    Assert.Equal(''two'', args.Arg2);\r\n                })", span="840-848"];
m0_513 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="ParserTests.cs", label="var parser = Parser.Default", span="839-839"];
m0_515 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", span="837-837"];
m0_218 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="385-385"];
m0_225 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", color=green, community=0, file="ParserTests.cs", label="0: lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="399-399"];
m0_223 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="396-396"];
m0_224 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="398-398"];
m0_226 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="405-405"];
m0_227 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="406-406"];
m0_228 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="407-407"];
m0_229 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="408-408"];
m0_230 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="409-409"];
m0_222 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="var result = help.ToString()", span="393-393"];
m0_219 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="var help = new StringWriter()", span="388-388"];
m0_221 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''--help'' })", span="392-392"];
m0_220 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="389-389"];
m0_231 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="385-385"];
m0_469 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="764-764"];
m0_404 [cluster="lambda expression", file="ParserTests.cs", label="opts.ShouldBeEquivalentTo(expected)", span="671-671"];
m0_416 [cluster="lambda expression", file="ParserTests.cs", label="opts.ShouldBeEquivalentTo(expected)", span="690-690"];
m0_82 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="150-150"];
m0_101 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="196-196"];
m0_112 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="218-218"];
m0_127 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="261-261"];
m0_356 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="602-602"];
m0_372 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="621-621"];
m0_403 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="671-671"];
m0_405 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="671-671"];
m0_415 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="690-690"];
m0_417 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="690-690"];
m0_216 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="357-357"];
m0_150 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="292-292"];
m0_147 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="291-291"];
m0_176 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="324-324"];
m0_173 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="323-323"];
m0_195 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="342-342"];
m0_248 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="429-429"];
m0_457 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="757-757"];
m0_460 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="757-757"];
m0_472 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="767-767"];
m0_475 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="767-767"];
m0_84 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="150-150"];
m0_83 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="150-150"];
m0_103 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="196-196"];
m0_102 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="196-196"];
m0_114 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="218-218"];
m0_113 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="218-218"];
m0_129 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="261-261"];
m0_128 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="261-261"];
m0_358 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="602-602"];
m0_357 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="602-602"];
m0_374 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="621-621"];
m0_373 [cluster="lambda expression", file="ParserTests.cs", label="o.RespectingRuntimeTypes()", span="621-621"];
m0_233 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="389-389"];
m0_269 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="444-444"];
m0_306 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="492-492"];
m0_324 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="533-533"];
m0_339 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="563-563"];
m0_391 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="630-630"];
m0_436 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="700-700"];
m0_215 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="357-357"];
m0_217 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="357-357"];
m0_151 [cluster="lambda expression", file="ParserTests.cs", label="e.Equals(expectedError)", span="292-292"];
m0_152 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="292-292"];
m0_149 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="291-291"];
m0_148 [cluster="lambda expression", file="ParserTests.cs", label="x == 1", span="291-291"];
m0_177 [cluster="lambda expression", file="ParserTests.cs", label="e.Equals(expectedError)", span="324-324"];
m0_178 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="324-324"];
m0_175 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="323-323"];
m0_174 [cluster="lambda expression", file="ParserTests.cs", label="x == 1", span="323-323"];
m0_197 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="342-342"];
m0_196 [cluster="lambda expression", file="ParserTests.cs", label="x == 1", span="342-342"];
m0_250 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="429-429"];
m0_249 [cluster="lambda expression", file="ParserTests.cs", label="x == 1", span="429-429"];
m0_459 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="757-757"];
m0_458 [cluster="lambda expression", file="ParserTests.cs", label=true, span="757-757"];
m0_462 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="757-757"];
m0_461 [cluster="lambda expression", file="ParserTests.cs", label=false, span="757-757"];
m0_474 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="767-767"];
m0_473 [cluster="lambda expression", file="ParserTests.cs", label=true, span="767-767"];
m0_477 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="767-767"];
m0_476 [cluster="lambda expression", file="ParserTests.cs", label=false, span="767-767"];
m0_69 [cluster="lambda expression", file="ParserTests.cs", label="with.EnableDashDash = true", span="122-122"];
m0_80 [cluster="lambda expression", file="ParserTests.cs", label="with.EnableDashDash = true", span="139-139"];
m0_354 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="592-592"];
m0_370 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="612-612"];
m0_401 [cluster="lambda expression", file="ParserTests.cs", label="config.IgnoreUnknownArguments = true", span="664-664"];
m0_413 [cluster="lambda expression", file="ParserTests.cs", label="config.IgnoreUnknownArguments = true", span="683-683"];
m0_232 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="389-389"];
m0_234 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="389-389"];
m0_268 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="444-444"];
m0_270 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="444-444"];
m0_305 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="492-492"];
m0_307 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="492-492"];
m0_323 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="533-533"];
m0_325 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="533-533"];
m0_338 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="563-563"];
m0_340 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="563-563"];
m0_390 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="630-630"];
m0_392 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="630-630"];
m0_435 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="700-700"];
m0_437 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="700-700"];
m0_13 [cluster="lambda expression", file="ParserTests.cs", label="with.HelpWriter = writer", span="20-20"];
m0_26 [cluster="lambda expression", file="ParserTests.cs", label="with.HelpWriter = writer", span="36-36"];
m0_37 [cluster="lambda expression", file="ParserTests.cs", label="with.HelpWriter = writer", span="52-52"];
m0_163 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="301-301"];
m0_193 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="333-333"];
m0_246 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="420-420"];
m0_279 [cluster="lambda expression", file="ParserTests.cs", label="config.HelpWriter = help", span="476-476"];
m0_505 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="828-828"];
m0_508 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="829-833"];
m0_455 [cluster="lambda expression", file="ParserTests.cs", label="parserSettings.IgnoreUnknownArguments = true", span="754-754"];
m0_470 [cluster="lambda expression", file="ParserTests.cs", label="parserSettings.IgnoreUnknownArguments = true", span="764-764"];
m0_483 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="794-797"];
m0_492 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="812-812"];
m0_496 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="813-817"];
m0_516 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="842-842"];
m0_519 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="843-848"];
m0_68 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="122-122"];
m0_70 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="122-122"];
m0_79 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="139-139"];
m0_81 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="139-139"];
m0_353 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="592-592"];
m0_355 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="592-592"];
m0_369 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="612-612"];
m0_371 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="612-612"];
m0_400 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="664-664"];
m0_402 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="664-664"];
m0_412 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="683-683"];
m0_414 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="683-683"];
m0_12 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="20-20"];
m0_14 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="20-20"];
m0_25 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="36-36"];
m0_27 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="36-36"];
m0_36 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="52-52"];
m0_38 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="52-52"];
m0_162 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="301-301"];
m0_164 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="301-301"];
m0_192 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="333-333"];
m0_194 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="333-333"];
m0_245 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="420-420"];
m0_247 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="420-420"];
m0_278 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="476-476"];
m0_280 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="476-476"];
m0_507 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="828-828"];
m0_506 [cluster="lambda expression", file="ParserTests.cs", label="throw new InvalidOperationException(''Must be parsed.'');", span="828-828"];
m0_511 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="829-833"];
m0_509 [cluster="lambda expression", file="ParserTests.cs", label="Assert.Equal(''arg'', args.OptValue)", span="831-831"];
m0_510 [cluster="lambda expression", file="ParserTests.cs", label="Assert.Equal(''arg'', args.PosValue)", span="832-832"];
m0_454 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="754-754"];
m0_456 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="754-754"];
m0_471 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="764-764"];
m0_485 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="794-797"];
m0_484 [cluster="lambda expression", file="ParserTests.cs", label="Assert.Equal(null, r.User)", span="796-796"];
m0_494 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="812-812"];
m0_493 [cluster="lambda expression", file="ParserTests.cs", label="throw new InvalidOperationException(''Must be parsed.'');", span="812-812"];
m0_499 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="813-817"];
m0_497 [cluster="lambda expression", file="ParserTests.cs", label="Assert.Equal(''arg'', args.OptValue)", span="815-815"];
m0_498 [cluster="lambda expression", file="ParserTests.cs", label="Assert.Equal(''arg'', args.PosValue)", span="816-816"];
m0_518 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="842-842"];
m0_517 [cluster="lambda expression", file="ParserTests.cs", label="throw new InvalidOperationException(''Must be parsed.'');", span="842-842"];
m0_520 [cluster="lambda expression", file="ParserTests.cs", label="Assert.Equal(''zero'', args.Arg0)", span="845-845"];
m0_521 [cluster="lambda expression", file="ParserTests.cs", label="Assert.Equal(''one'', args.Arg1)", span="846-846"];
m0_522 [cluster="lambda expression", file="ParserTests.cs", label="Assert.Equal(''two'', args.Arg2)", span="847-847"];
m0_523 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="843-848"];
m0_352 [cluster="object.GetType()", file="ParserTests.cs", label="Entry object.GetType()", span="0-0"];
m0_251 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="440-440"];
m0_258 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", color=green, community=0, file="ParserTests.cs", label="0: lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="454-454"];
m0_256 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="451-451"];
m0_257 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="453-453"];
m0_259 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="460-460"];
m0_260 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''Option: 'weburl' is not compatible with: 'ftpurl'.'')", span="461-461"];
m0_261 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''Option: 'ftpurl' is not compatible with: 'weburl'.'')", span="462-462"];
m0_262 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''--weburl     Required.'')", span="463-463"];
m0_263 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''--ftpurl     Required.'')", span="464-464"];
m0_264 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''-a'')", span="465-465"];
m0_265 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[8].ShouldBeEquivalentTo(''--help       Display this help screen.'')", span="466-466"];
m0_266 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="lines[9].ShouldBeEquivalentTo(''--version    Display version information.'')", span="467-467"];
m0_255 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="var result = help.ToString()", span="448-448"];
m0_252 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="var help = new StringWriter()", span="443-443"];
m0_254 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="sut.ParseArguments<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(new[] { ''--weburl=value.com'', ''--ftpurl=value.org'' })", span="447-447"];
m0_253 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="444-444"];
m0_267 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="440-440"];
m0_100 [cluster="CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()", span="36-36"];
m0_28 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48"];
m0_33 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="text.Should().NotBeEmpty()", span="59-59"];
m0_32 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="var text = writer.ToString()", span="58-58"];
m0_29 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="var writer = new StringWriter()", span="51-51"];
m0_31 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="55-55"];
m0_30 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="52-52"];
m0_34 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48"];
m0_23 [cluster="Unk.Should", file="ParserTests.cs", label="Entry Unk.Should", span=""];
m0_487 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", span="807-807"];
m0_489 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="ParserTests.cs", label="parser.ParseArguments<Options_With_Option_And_Value_Of_String_Type>(\r\n                new[] { ''arg'', ''-o'', ''arg'' })\r\n                .WithNotParsed(errors => { throw new InvalidOperationException(''Must be parsed.''); })\r\n                .WithParsed(args =>\r\n                {\r\n                    Assert.Equal(''arg'', args.OptValue);\r\n                    Assert.Equal(''arg'', args.PosValue);\r\n                })", span="810-817"];
m0_488 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="ParserTests.cs", label="var parser = Parser.Default", span="809-809"];
m0_490 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", span="807-807"];
m0_153 [cluster="Unk.Equals", file="ParserTests.cs", label="Entry Unk.Equals", span=""];
m0_24 [cluster="Unk.NotBeEmpty", file="ParserTests.cs", label="Entry Unk.NotBeEmpty", span=""];
m0_85 [cluster="Unk.RespectingRuntimeTypes", file="ParserTests.cs", label="Entry Unk.RespectingRuntimeTypes", span=""];
m0_452 [cluster="CommandLine.ParserResult<TSource>.MapResult<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", file="ParserTests.cs", label="Entry CommandLine.ParserResult<TSource>.MapResult<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", span="77-77"];
m0_10 [cluster="System.IO.StringWriter.ToString()", file="ParserTests.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m0_191 [cluster="Unk.StartWithEquivalent", file="ParserTests.cs", label="Entry Unk.StartWithEquivalent", span=""];
m0_500 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", span="821-821"];
m0_503 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs", label="result\r\n                .WithNotParsed(errors => { throw new InvalidOperationException(''Must be parsed.''); })\r\n                .WithParsed<Verb_With_Option_And_Value_Of_String_Type>(args =>\r\n                {\r\n                    Assert.Equal(''arg'', args.OptValue);\r\n                    Assert.Equal(''arg'', args.PosValue);\r\n                })", span="827-833"];
m0_502 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs", label="var result = parser.ParseArguments(\r\n                new[] { ''test'', ''arg'', ''-o'', ''arg'' }, \r\n                typeof(Verb_With_Option_And_Value_Of_String_Type))", span="824-826"];
m0_501 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs", label="var parser = Parser.Default", span="823-823"];
m0_504 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", span="821-821"];
m0_145 [cluster="Unk.HaveCount", file="ParserTests.cs", label="Entry Unk.HaveCount", span=""];
m0_308 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", span="529-529"];
m0_315 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", color=green, community=0, file="ParserTests.cs", label="0: lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="543-543"];
m0_313 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="540-540"];
m0_314 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="542-542"];
m0_316 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="549-549"];
m0_317 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="550-550"];
m0_318 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="551-551"];
m0_319 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="552-552"];
m0_320 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="553-553"];
m0_312 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="var result = help.ToString()", span="537-537"];
m0_309 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="var help = new StringWriter()", span="532-532"];
m0_311 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { })", span="536-536"];
m0_310 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="533-533"];
m0_321 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", span="529-529"];
m0_39 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options()", span="64-64"];
m0_43 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs", label="((Parsed<Simple_Options>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="74-74"];
m0_40 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs", label="var expectedOptions = new Simple_Options { StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 } }", span="67-67"];
m0_42 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs", label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="71-71"];
m0_41 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs", label="var sut = new Parser()", span="68-68"];
m0_44 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options()", span="64-64"];
m0_179 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="329-329"];
m0_185 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="341-341"];
m0_184 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="340-340"];
m0_186 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="lines.Should().HaveCount(x => x == 1)", span="342-342"];
m0_187 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="344-344"];
m0_183 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="var result = help.ToString()", span="337-337"];
m0_180 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="var help = new StringWriter()", span="332-332"];
m0_182 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="336-336"];
m0_181 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="333-333"];
m0_188 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="329-329"];
m0_418 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="696-696"];
m0_425 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", color=green, community=0, file="ParserTests.cs", label="0: lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="711-711"];
m0_423 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="708-708"];
m0_424 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="710-710"];
m0_426 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="717-717"];
m0_427 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''Option 'bad-arg' is unknown.'')", span="718-718"];
m0_428 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="719-719"];
m0_429 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="720-720"];
m0_430 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="721-721"];
m0_431 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="722-722"];
m0_432 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[8].ShouldBeEquivalentTo(''--version         Display version information.'')", span="723-723"];
m0_433 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="lines[9].ShouldBeEquivalentTo(''value pos. 0'')", span="724-724"];
m0_422 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="var result = help.ToString()", span="705-705"];
m0_419 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="var help = new StringWriter()", span="699-699"];
m0_421 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''clone'', ''--bad-arg'', ''--help'' })", span="703-704"];
m0_420 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="700-700"];
m0_434 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="696-696"];
m0_491 [cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserTests.cs", label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="58-58"];
m0_130 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="266-266"];
m0_134 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="((Parsed<Immutable_Simple_Options>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="276-276"];
m0_131 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="var expectedOptions = new Immutable_Simple_Options(''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="269-269"];
m0_133 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="273-273"];
m0_132 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="var sut = new Parser()", span="270-270"];
m0_135 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="266-266"];
m0_15 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32"];
m0_20 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="text.Should().NotBeEmpty()", span="43-43"];
m0_19 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="var text = writer.ToString()", span="42-42"];
m0_16 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="var writer = new StringWriter()", span="35-35"];
m0_18 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="sut.ParseArguments(new string[] { }, typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="39-39"];
m0_17 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="36-36"];
m0_21 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32"];
m0_495 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ParserTests.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m0_375 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="626-626"];
m0_382 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", color=green, community=0, file="ParserTests.cs", label="0: lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="641-641"];
m0_380 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="638-638"];
m0_381 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="640-640"];
m0_383 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="647-647"];
m0_384 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="648-648"];
m0_385 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="649-649"];
m0_386 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[5].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="650-650"];
m0_387 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[6].ShouldBeEquivalentTo(''--version         Display version information.'')", span="651-651"];
m0_388 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="lines[7].ShouldBeEquivalentTo(''value pos. 0'')", span="652-652"];
m0_379 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="var result = help.ToString()", span="635-635"];
m0_376 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="var help = new StringWriter()", span="629-629"];
m0_378 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''help'', ''clone'', ''extra-arg'' })", span="633-634"];
m0_377 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="630-630"];
m0_389 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="626-626"];
m0_189 [cluster="string.ToNotEmptyLines()", file="ParserTests.cs", label="Entry string.ToNotEmptyLines()", span="10-10"];
m0_326 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", span="559-559"];
m0_333 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", color=green, community=0, file="ParserTests.cs", label="0: lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="573-573"];
m0_331 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="570-570"];
m0_332 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="572-572"];
m0_334 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="lines[2].ShouldBeEquivalentTo(''-f, --force    Allow adding otherwise ignored files.'')", span="579-579"];
m0_335 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="lines[3].ShouldBeEquivalentTo(''--help         Display this help screen.'')", span="580-580"];
m0_336 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="lines[4].ShouldBeEquivalentTo(''--version      Display version information.'')", span="581-581"];
m0_330 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="var result = help.ToString()", span="567-567"];
m0_327 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="var help = new StringWriter()", span="562-562"];
m0_329 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { ''secert'', ''--help'' })", span="566-566"];
m0_328 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="563-563"];
m0_337 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", span="559-559"];
m0_445 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="ParserTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m0_111 [cluster="CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", span="22-22"];
m0_359 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", span="607-607"];
m0_367 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="621-621"];
m0_364 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="618-618"];
m0_365 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="result.GetType().Should().Be<Parsed<object>>()", span="619-619"];
m0_366 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="result.TypeInfo.Current.Should().Be<Secert_Verb>()", span="620-620"];
m0_360 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="var expectedOptions = new Secert_Verb { Force = true, SecertOption = ''shhh'' }", span="610-610"];
m0_363 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="var result = sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { ''secert'', ''--force'', ''--secert-option'', ''shhh'' })", span="615-615"];
m0_361 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="var help = new StringWriter()", span="611-611"];
m0_362 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="612-612"];
m0_368 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", span="607-607"];
m0_446 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", span="751-751"];
m0_450 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="result.MapResult(_ => true, _ => false).Should().BeTrue()", span="757-757"];
m0_449 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="var result = sut.ParseArguments<Simple_Options>(sameValues)", span="755-755"];
m0_447 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="var sameValues = new[] { ''--stringvalue=test'', ''--shortandlong=test'' }", span="753-753"];
m0_448 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="var sut = new Parser(parserSettings => { parserSettings.IgnoreUnknownArguments = true; })", span="754-754"];
m0_451 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", span="751-751"];
m0_54 [cluster="CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", span="4-4"];
m0_399 [cluster="Unk.WithParsed", file="ParserTests.cs", label="Entry Unk.WithParsed", span=""];
m0_9 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="ParserTests.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m0_93 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="171-171"];
m0_98 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="196-196"];
m0_94 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="174-183"];
m0_96 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="var result =\r\n                sut.ParseArguments(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                    typeof(Add_Verb),\r\n                    typeof(Commit_Verb),\r\n                    typeof(Clone_Verb))", span="187-192"];
m0_97 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="195-195"];
m0_95 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="var sut = new Parser()", span="184-184"];
m0_99 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="171-171"];
m0_235 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="416-416"];
m0_241 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="428-428"];
m0_240 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="result.Length.Should().BeGreaterThan(0)", span="427-427"];
m0_242 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="lines.Should().HaveCount(x => x == 1)", span="429-429"];
m0_243 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="431-431"];
m0_239 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="var result = help.ToString()", span="424-424"];
m0_236 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="var help = new StringWriter()", span="419-419"];
m0_238 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { command })", span="423-423"];
m0_237 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="420-420"];
m0_244 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="416-416"];
m0_45 [cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", file="ParserTests.cs", label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6"];
m0_322 [cluster="CommandLine.Parser.ParseArguments<T1, T2>(System.Collections.Generic.IEnumerable<string>)", file="ParserTests.cs", label="Entry CommandLine.Parser.ParseArguments<T1, T2>(System.Collections.Generic.IEnumerable<string>)", span="25-25"];
m0_144 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ParserTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="404-404"];
m0_482 [cluster="string.Split(params char[])", file="ParserTests.cs", label="Entry string.Split(params char[])", span="0-0"];
m0_486 [cluster="Unk.Equal", file="ParserTests.cs", label="Entry Unk.Equal", span=""];
m0_47 [cluster="Unk.ShouldBeEquivalentTo", file="ParserTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_542 [file="ParserTests.cs", label="CommandLine.Tests.Fakes.Simple_Options", span=""];
m0_543 [file="ParserTests.cs", label="CommandLine.Tests.Fakes.Commit_Verb", span=""];
m0_531 [file="ParserTests.cs", label=help, span=""];
m0_532 [file="ParserTests.cs", label=help, span=""];
m0_534 [file="ParserTests.cs", label=help, span=""];
m0_536 [file="ParserTests.cs", label=help, span=""];
m0_537 [file="ParserTests.cs", label=help, span=""];
m0_538 [file="ParserTests.cs", label=help, span=""];
m0_541 [file="ParserTests.cs", label=help, span=""];
m0_544 [file="ParserTests.cs", label=help, span=""];
m0_527 [file="ParserTests.cs", label=expectedError, span=""];
m0_529 [file="ParserTests.cs", label=expectedError, span=""];
m0_539 [file="ParserTests.cs", label=help, span=""];
m0_540 [file="ParserTests.cs", label=help, span=""];
m0_524 [file="ParserTests.cs", label=writer, span=""];
m0_525 [file="ParserTests.cs", label=writer, span=""];
m0_526 [file="ParserTests.cs", label=writer, span=""];
m0_528 [file="ParserTests.cs", label=help, span=""];
m0_530 [file="ParserTests.cs", label=help, span=""];
m0_533 [file="ParserTests.cs", label=help, span=""];
m0_535 [file="ParserTests.cs", label=help, span=""];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [color=blue, key=0, style=bold];
n2 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=2, style=dotted];
n3 -> n6  [key=2, style=dotted];
n4 -> n2  [color=blue, key=0, style=bold];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n5  [key=2, style=dotted];
n8 -> n6  [key=2, style=dotted];
n9 -> n7  [color=blue, key=0, style=bold];
n10 -> n11  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n5  [key=2, style=dotted];
n11 -> n6  [key=2, style=dotted];
n12 -> n10  [color=blue, key=0, style=bold];
n13 -> n14  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n14 -> n5  [key=2, style=dotted];
n14 -> n6  [key=2, style=dotted];
n15 -> n13  [color=blue, key=0, style=bold];
d152 -> d153  [color=green, key=0, style=solid];
d152 -> d9  [color=green, key=2, style=dotted];
d152 -> d155  [color=green, key=1, label="lambda expression", style=dashed];
d151 -> d152  [color=green, key=0, style=solid];
d151 -> d153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
d153 -> d154  [key=0, style=solid];
d153 -> d104  [key=2, style=dotted];
d155 -> d156  [color=green, key=0, style=solid];
d156 -> d157  [color=green, key=0, style=solid];
d156 -> d158  [color=green, key=2, style=dotted];
d157 -> d155  [color=blue, key=0, style=bold];
d154 -> d151  [color=blue, key=0, style=bold];
d3 -> d9  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d16 -> d9  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d16 -> d20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d24 -> d9  [key=2, style=dotted];
d24 -> d24  [color=darkorchid, key=3, label="Field variable int? VerboseLevel", style=bold];
d24 -> d25  [key=0, style=solid];
d24 -> d27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d32 -> d9  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d32 -> d36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d41 -> d9  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d41 -> d44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d48 -> d9  [key=2, style=dotted];
d48 -> d49  [key=0, style=solid];
d48 -> d51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d56 -> d9  [key=2, style=dotted];
d56 -> d57  [key=0, style=solid];
d56 -> d59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d65 -> d9  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d65 -> d70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d75 -> d9  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d75 -> d79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d85 -> d9  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d85 -> d88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d93 -> d9  [key=2, style=dotted];
d93 -> d94  [key=0, style=solid];
d93 -> d96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d101 -> d9  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d101 -> d105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d111 -> d9  [key=2, style=dotted];
d111 -> d111  [color=darkorchid, key=3, label="Local variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string> fakeMutExclRenderer", style=bold];
d111 -> d112  [key=0, style=solid];
d111 -> d115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d120 -> d9  [key=2, style=dotted];
d120 -> d121  [key=0, style=solid];
d120 -> d123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d128 -> d9  [key=2, style=dotted];
d128 -> d129  [key=0, style=solid];
d128 -> d131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d136 -> d9  [key=2, style=dotted];
d136 -> d137  [key=0, style=solid];
d136 -> d140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d144 -> d9  [key=2, style=dotted];
d144 -> d145  [key=0, style=solid];
d144 -> d147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d160 -> d9  [key=2, style=dotted];
d160 -> d161  [key=0, style=solid];
d160 -> d163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d190 -> d9  [key=2, style=dotted];
d190 -> d191  [key=0, style=solid];
d190 -> d194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d200 -> d9  [key=2, style=dotted];
d200 -> d201  [key=0, style=solid];
d200 -> d204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d209 -> d9  [key=2, style=dotted];
d209 -> d210  [key=0, style=solid];
d209 -> d212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d217 -> d9  [key=2, style=dotted];
d217 -> d218  [key=0, style=solid];
d217 -> d221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d226 -> d9  [key=2, style=dotted];
d226 -> d227  [key=0, style=solid];
d226 -> d229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d235 -> d9  [key=2, style=dotted];
d235 -> d236  [key=0, style=solid];
d235 -> d238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d243 -> d9  [key=2, style=dotted];
d243 -> d244  [key=0, style=solid];
d243 -> d247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d252 -> d9  [key=2, style=dotted];
d252 -> d252  [color=darkorchid, key=3, label="Local variable string expectedVersion", style=bold];
d252 -> d253  [key=0, style=solid];
d252 -> d255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d260 -> d9  [key=2, style=dotted];
d260 -> d261  [key=0, style=solid];
d260 -> d263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d267 -> d9  [key=2, style=dotted];
d267 -> d267  [color=darkorchid, key=3, label="method methodReturn CommandLine.Text.HelpText ", style=bold];
d267 -> d268  [key=0, style=solid];
d267 -> d271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d276 -> d9  [key=2, style=dotted];
d276 -> d277  [key=0, style=solid];
d276 -> d279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d284 -> d9  [key=2, style=dotted];
d284 -> d285  [key=0, style=solid];
d284 -> d287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d292 -> d9  [key=2, style=dotted];
d292 -> d293  [key=0, style=solid];
d292 -> d295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d300 -> d9  [key=2, style=dotted];
d300 -> d301  [key=0, style=solid];
d300 -> d303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d308 -> d9  [key=2, style=dotted];
d308 -> d309  [key=0, style=solid];
d308 -> d311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d315 -> d9  [key=2, style=dotted];
d315 -> d316  [key=0, style=solid];
d315 -> d321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d315 -> d317  [color=darkseagreen4, key=1, label=result, style=dashed];
d315 -> d318  [color=darkseagreen4, key=1, label=result, style=dashed];
d326 -> d9  [key=2, style=dotted];
d326 -> d327  [key=0, style=solid];
d326 -> d331  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d326 -> d328  [color=darkseagreen4, key=1, label=result, style=dashed];
d326 -> d329  [color=darkseagreen4, key=1, label=result, style=dashed];
d335 -> d9  [key=2, style=dotted];
d335 -> d336  [key=0, style=solid];
d335 -> d338  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d342 -> d9  [key=2, style=dotted];
d342 -> d343  [key=0, style=solid];
d342 -> d345  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d164 -> d158  [key=2, style=dotted];
d164 -> d165  [key=0, style=solid];
d102 -> d104  [key=2, style=dotted];
d102 -> d102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
d102 -> d103  [key=0, style=solid];
d137 -> d104  [key=2, style=dotted];
d137 -> d138  [key=0, style=solid];
d145 -> d104  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d161 -> d104  [key=2, style=dotted];
d161 -> d162  [key=0, style=solid];
d170 -> d104  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d201 -> d104  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d210 -> d104  [key=2, style=dotted];
d210 -> d211  [key=0, style=solid];
d285 -> d104  [key=2, style=dotted];
d285 -> d286  [key=0, style=solid];
d301 -> d104  [key=2, style=dotted];
d301 -> d302  [key=0, style=solid];
d309 -> d104  [key=2, style=dotted];
d309 -> d310  [key=0, style=solid];
d317 -> d104  [key=2, style=dotted];
d317 -> d318  [key=0, style=solid];
d318 -> d104  [key=2, style=dotted];
d318 -> d319  [key=0, style=solid];
d318 -> d320  [key=2, style=dotted];
d328 -> d104  [key=2, style=dotted];
d328 -> d329  [key=0, style=solid];
d329 -> d104  [key=2, style=dotted];
d329 -> d330  [key=0, style=solid];
d329 -> d320  [key=2, style=dotted];
d336 -> d104  [key=2, style=dotted];
d336 -> d337  [key=0, style=solid];
d343 -> d104  [key=2, style=dotted];
d343 -> d344  [key=0, style=solid];
d1 -> d3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [key=2, style=dotted];
d1 -> d13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d2 -> d3  [key=0, style=solid];
d2 -> d7  [key=2, style=dotted];
d2 -> d8  [key=2, style=dotted];
d2 -> d4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d4 -> d5  [key=0, style=solid];
d4 -> d10  [key=2, style=dotted];
d4 -> d11  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [color=darkseagreen4, key=1, label=long, style=dashed];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d23 -> d24  [key=0, style=solid];
d23 -> d25  [color=darkseagreen4, key=1, label=double, style=dashed];
d25 -> d26  [key=0, style=solid];
d25 -> d19  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d31 -> d32  [key=0, style=solid];
d31 -> d33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d33 -> d34  [key=0, style=solid];
d33 -> d35  [key=2, style=dotted];
d33 -> d11  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d40 -> d42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d42 -> d43  [key=0, style=solid];
d42 -> d35  [key=2, style=dotted];
d42 -> d11  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d49 -> d50  [key=0, style=solid];
d49 -> d35  [key=2, style=dotted];
d49 -> d11  [key=2, style=dotted];
d51 -> d52  [key=0, style=solid];
d55 -> d56  [key=0, style=solid];
d55 -> d57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d57 -> d58  [key=0, style=solid];
d57 -> d35  [key=2, style=dotted];
d57 -> d11  [key=2, style=dotted];
d59 -> d60  [key=0, style=solid];
d64 -> d65  [key=0, style=solid];
d64 -> d68  [key=2, style=dotted];
d64 -> d69  [key=2, style=dotted];
d64 -> d66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d66 -> d67  [key=0, style=solid];
d66 -> d35  [key=2, style=dotted];
d66 -> d11  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d74 -> d75  [key=0, style=solid];
d74 -> d78  [key=2, style=dotted];
d74 -> d76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d76 -> d77  [key=0, style=solid];
d76 -> d35  [key=2, style=dotted];
d76 -> d11  [key=2, style=dotted];
d79 -> d80  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
d84 -> d78  [key=2, style=dotted];
d84 -> d69  [key=2, style=dotted];
d84 -> d86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d86 -> d87  [key=0, style=solid];
d86 -> d35  [key=2, style=dotted];
d86 -> d11  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d92 -> d93  [key=0, style=solid];
d92 -> d78  [key=2, style=dotted];
d92 -> d94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d94 -> d95  [key=0, style=solid];
d94 -> d35  [key=2, style=dotted];
d94 -> d11  [key=2, style=dotted];
d96 -> d97  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d100 -> d102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
d105 -> d106  [key=0, style=solid];
d110 -> d111  [key=0, style=solid];
d110 -> d114  [key=2, style=dotted];
d110 -> d69  [key=2, style=dotted];
d110 -> d112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d112 -> d113  [key=0, style=solid];
d112 -> d35  [key=2, style=dotted];
d112 -> d11  [key=2, style=dotted];
d115 -> d116  [key=0, style=solid];
d119 -> d120  [key=0, style=solid];
d119 -> d114  [key=2, style=dotted];
d119 -> d69  [key=2, style=dotted];
d119 -> d121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d121 -> d122  [key=0, style=solid];
d121 -> d35  [key=2, style=dotted];
d121 -> d11  [key=2, style=dotted];
d123 -> d124  [key=0, style=solid];
d127 -> d128  [key=0, style=solid];
d127 -> d114  [key=2, style=dotted];
d127 -> d69  [key=2, style=dotted];
d127 -> d129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d129 -> d130  [key=0, style=solid];
d129 -> d35  [key=2, style=dotted];
d129 -> d11  [key=2, style=dotted];
d131 -> d132  [key=0, style=solid];
d135 -> d136  [key=0, style=solid];
d135 -> d137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d135 -> d139  [key=2, style=dotted];
d140 -> d141  [key=0, style=solid];
d143 -> d144  [key=0, style=solid];
d143 -> d145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
d147 -> d148  [key=0, style=solid];
d159 -> d160  [key=0, style=solid];
d159 -> d161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d163 -> d164  [key=0, style=solid];
d189 -> d190  [key=0, style=solid];
d189 -> d193  [key=2, style=dotted];
d189 -> d69  [key=2, style=dotted];
d189 -> d191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d191 -> d192  [key=0, style=solid];
d191 -> d35  [key=2, style=dotted];
d191 -> d11  [key=2, style=dotted];
d194 -> d195  [key=0, style=solid];
d199 -> d200  [key=0, style=solid];
d199 -> d201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d199 -> d203  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d208 -> d209  [key=0, style=solid];
d208 -> d210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d208 -> d203  [key=2, style=dotted];
d212 -> d213  [key=0, style=solid];
d216 -> d217  [key=0, style=solid];
d216 -> d220  [key=2, style=dotted];
d216 -> d69  [key=2, style=dotted];
d216 -> d218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d218 -> d219  [key=0, style=solid];
d218 -> d35  [key=2, style=dotted];
d218 -> d11  [key=2, style=dotted];
d221 -> d222  [key=0, style=solid];
d225 -> d226  [key=0, style=solid];
d225 -> d220  [key=2, style=dotted];
d225 -> d69  [key=2, style=dotted];
d225 -> d227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d227 -> d228  [key=0, style=solid];
d227 -> d35  [key=2, style=dotted];
d227 -> d11  [key=2, style=dotted];
d229 -> d230  [key=0, style=solid];
d234 -> d235  [key=0, style=solid];
d234 -> d78  [key=2, style=dotted];
d234 -> d69  [key=2, style=dotted];
d234 -> d236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d236 -> d237  [key=0, style=solid];
d236 -> d35  [key=2, style=dotted];
d236 -> d11  [key=2, style=dotted];
d238 -> d239  [key=0, style=solid];
d242 -> d243  [key=0, style=solid];
d242 -> d246  [key=2, style=dotted];
d242 -> d244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d244 -> d245  [key=0, style=solid];
d244 -> d35  [key=2, style=dotted];
d244 -> d11  [key=2, style=dotted];
d247 -> d248  [key=0, style=solid];
d251 -> d252  [key=0, style=solid];
d251 -> d246  [key=2, style=dotted];
d251 -> d253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d253 -> d254  [key=0, style=solid];
d253 -> d35  [key=2, style=dotted];
d253 -> d11  [key=2, style=dotted];
d255 -> d256  [key=0, style=solid];
d259 -> d260  [key=0, style=solid];
d259 -> d246  [key=2, style=dotted];
d259 -> d261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d261 -> d262  [key=0, style=solid];
d261 -> d35  [key=2, style=dotted];
d261 -> d11  [key=2, style=dotted];
d263 -> d264  [key=0, style=solid];
d266 -> d267  [key=0, style=solid];
d266 -> d268  [color=darkseagreen4, key=1, label=string, style=dashed];
d268 -> d269  [key=0, style=solid];
d268 -> d270  [key=2, style=dotted];
d268 -> d11  [key=2, style=dotted];
d271 -> d272  [key=0, style=solid];
d275 -> d276  [key=0, style=solid];
d275 -> d220  [key=2, style=dotted];
d275 -> d277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d277 -> d278  [key=0, style=solid];
d277 -> d35  [key=2, style=dotted];
d277 -> d11  [key=2, style=dotted];
d279 -> d280  [key=0, style=solid];
d283 -> d284  [key=0, style=solid];
d283 -> d285  [color=darkseagreen4, key=1, label=string, style=dashed];
d287 -> d288  [key=0, style=solid];
d291 -> d292  [key=0, style=solid];
d291 -> d78  [key=2, style=dotted];
d291 -> d293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d293 -> d294  [key=0, style=solid];
d293 -> d35  [key=2, style=dotted];
d293 -> d11  [key=2, style=dotted];
d295 -> d296  [key=0, style=solid];
d299 -> d300  [key=0, style=solid];
d299 -> d301  [color=darkseagreen4, key=1, label="int?", style=dashed];
d303 -> d304  [key=0, style=solid];
d307 -> d308  [key=0, style=solid];
d307 -> d309  [color=darkseagreen4, key=1, label="long?", style=dashed];
d311 -> d312  [key=0, style=solid];
d314 -> d315  [key=0, style=solid];
d314 -> d317  [color=darkseagreen4, key=1, label=string, style=dashed];
d314 -> d318  [color=darkseagreen4, key=1, label=bool, style=dashed];
d316 -> d317  [key=0, style=solid];
d316 -> d318  [key=0, style=solid];
d321 -> d322  [key=0, style=solid];
d325 -> d326  [key=0, style=solid];
d325 -> d328  [color=darkseagreen4, key=1, label=int, style=dashed];
d325 -> d329  [color=darkseagreen4, key=1, label=bool, style=dashed];
d327 -> d328  [key=0, style=solid];
d327 -> d329  [key=0, style=solid];
d331 -> d332  [key=0, style=solid];
d334 -> d335  [key=0, style=solid];
d334 -> d336  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
d338 -> d339  [key=0, style=solid];
d341 -> d342  [key=0, style=solid];
d341 -> d343  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
d345 -> d346  [key=0, style=solid];
d165 -> d163  [color=blue, key=0, style=bold];
d103 -> d100  [color=blue, key=0, style=bold];
d138 -> d134  [color=blue, key=0, style=bold];
d146 -> d143  [color=blue, key=0, style=bold];
d162 -> d159  [color=blue, key=0, style=bold];
d167 -> d170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d167 -> d168  [key=0, style=solid];
d167 -> d139  [key=2, style=dotted];
d169 -> d170  [key=0, style=solid];
d169 -> d172  [key=2, style=dotted];
d169 -> d173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d169 -> d176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d171 -> d166  [color=blue, key=0, style=bold];
d202 -> d198  [color=blue, key=0, style=bold];
d211 -> d207  [color=blue, key=0, style=bold];
d286 -> d283  [color=blue, key=0, style=bold];
d302 -> d299  [color=blue, key=0, style=bold];
d310 -> d307  [color=blue, key=0, style=bold];
d319 -> d314  [color=blue, key=0, style=bold];
d330 -> d325  [color=blue, key=0, style=bold];
d337 -> d334  [color=blue, key=0, style=bold];
d344 -> d341  [color=blue, key=0, style=bold];
d0 -> d1  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d5 -> d0  [color=blue, key=0, style=bold];
d14 -> d12  [color=blue, key=0, style=bold];
d18 -> d15  [color=blue, key=0, style=bold];
d22 -> d20  [color=blue, key=0, style=bold];
d21 -> d6  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d26 -> d23  [color=blue, key=0, style=bold];
d29 -> d27  [color=blue, key=0, style=bold];
d28 -> d29  [key=0, style=solid];
d28 -> d30  [key=2, style=dotted];
d34 -> d31  [color=blue, key=0, style=bold];
d38 -> d36  [color=blue, key=0, style=bold];
d37 -> d38  [key=0, style=solid];
d37 -> d39  [key=2, style=dotted];
d43 -> d40  [color=blue, key=0, style=bold];
d46 -> d44  [color=blue, key=0, style=bold];
d45 -> d6  [key=2, style=dotted];
d45 -> d46  [key=0, style=solid];
d50 -> d47  [color=blue, key=0, style=bold];
d53 -> d51  [color=blue, key=0, style=bold];
d52 -> d53  [key=0, style=solid];
d52 -> d54  [key=2, style=dotted];
d58 -> d55  [color=blue, key=0, style=bold];
d61 -> d59  [color=blue, key=0, style=bold];
d60 -> d61  [key=0, style=solid];
d60 -> d62  [key=2, style=dotted];
d63 -> d64  [key=0, style=solid];
d67 -> d63  [color=blue, key=0, style=bold];
d72 -> d70  [color=blue, key=0, style=bold];
d71 -> d72  [key=0, style=solid];
d71 -> d54  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d77 -> d73  [color=blue, key=0, style=bold];
d81 -> d79  [color=blue, key=0, style=bold];
d80 -> d81  [key=0, style=solid];
d80 -> d82  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d87 -> d83  [color=blue, key=0, style=bold];
d90 -> d88  [color=blue, key=0, style=bold];
d89 -> d90  [key=0, style=solid];
d89 -> d62  [key=2, style=dotted];
d91 -> d92  [key=0, style=solid];
d95 -> d91  [color=blue, key=0, style=bold];
d98 -> d96  [color=blue, key=0, style=bold];
d97 -> d98  [key=0, style=solid];
d97 -> d99  [key=2, style=dotted];
d107 -> d105  [color=blue, key=0, style=bold];
d106 -> d107  [key=0, style=solid];
d106 -> d108  [key=2, style=dotted];
d109 -> d110  [key=0, style=solid];
d113 -> d109  [color=blue, key=0, style=bold];
d117 -> d115  [color=blue, key=0, style=bold];
d116 -> d117  [key=0, style=solid];
d116 -> d108  [key=2, style=dotted];
d118 -> d119  [key=0, style=solid];
d122 -> d118  [color=blue, key=0, style=bold];
d125 -> d123  [color=blue, key=0, style=bold];
d124 -> d125  [key=0, style=solid];
d124 -> d108  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d130 -> d126  [color=blue, key=0, style=bold];
d133 -> d131  [color=blue, key=0, style=bold];
d132 -> d133  [key=0, style=solid];
d132 -> d108  [key=2, style=dotted];
d134 -> d135  [key=0, style=solid];
d142 -> d140  [color=blue, key=0, style=bold];
d141 -> d139  [key=2, style=dotted];
d141 -> d142  [key=0, style=solid];
d149 -> d147  [color=blue, key=0, style=bold];
d148 -> d149  [key=0, style=solid];
d148 -> d150  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d192 -> d188  [color=blue, key=0, style=bold];
d196 -> d194  [color=blue, key=0, style=bold];
d195 -> d196  [key=0, style=solid];
d195 -> d197  [key=2, style=dotted];
d198 -> d199  [key=0, style=solid];
d206 -> d204  [color=blue, key=0, style=bold];
d205 -> d203  [key=2, style=dotted];
d205 -> d206  [key=0, style=solid];
d207 -> d208  [key=0, style=solid];
d214 -> d212  [color=blue, key=0, style=bold];
d213 -> d203  [key=2, style=dotted];
d213 -> d214  [key=0, style=solid];
d215 -> d216  [key=0, style=solid];
d219 -> d215  [color=blue, key=0, style=bold];
d223 -> d221  [color=blue, key=0, style=bold];
d222 -> d203  [key=2, style=dotted];
d222 -> d223  [key=0, style=solid];
d224 -> d225  [key=0, style=solid];
d228 -> d224  [color=blue, key=0, style=bold];
d231 -> d229  [color=blue, key=0, style=bold];
d230 -> d231  [key=0, style=solid];
d230 -> d232  [key=2, style=dotted];
d233 -> d234  [key=0, style=solid];
d237 -> d233  [color=blue, key=0, style=bold];
d240 -> d238  [color=blue, key=0, style=bold];
d239 -> d6  [key=2, style=dotted];
d239 -> d240  [key=0, style=solid];
d241 -> d242  [key=0, style=solid];
d245 -> d241  [color=blue, key=0, style=bold];
d249 -> d247  [color=blue, key=0, style=bold];
d248 -> d6  [key=2, style=dotted];
d248 -> d249  [key=0, style=solid];
d250 -> d251  [key=0, style=solid];
d254 -> d250  [color=blue, key=0, style=bold];
d257 -> d255  [color=blue, key=0, style=bold];
d256 -> d6  [key=2, style=dotted];
d256 -> d257  [key=0, style=solid];
d258 -> d259  [key=0, style=solid];
d262 -> d258  [color=blue, key=0, style=bold];
d265 -> d263  [color=blue, key=0, style=bold];
d264 -> d6  [key=2, style=dotted];
d264 -> d265  [key=0, style=solid];
d269 -> d266  [color=blue, key=0, style=bold];
d273 -> d271  [color=blue, key=0, style=bold];
d272 -> d6  [key=2, style=dotted];
d272 -> d273  [key=0, style=solid];
d274 -> d275  [key=0, style=solid];
d278 -> d274  [color=blue, key=0, style=bold];
d281 -> d279  [color=blue, key=0, style=bold];
d280 -> d281  [key=0, style=solid];
d280 -> d282  [key=2, style=dotted];
d289 -> d287  [color=blue, key=0, style=bold];
d288 -> d6  [key=2, style=dotted];
d288 -> d289  [key=0, style=solid];
d290 -> d291  [key=0, style=solid];
d294 -> d290  [color=blue, key=0, style=bold];
d297 -> d295  [color=blue, key=0, style=bold];
d296 -> d297  [key=0, style=solid];
d296 -> d298  [key=2, style=dotted];
d305 -> d303  [color=blue, key=0, style=bold];
d304 -> d305  [key=0, style=solid];
d304 -> d306  [key=2, style=dotted];
d313 -> d311  [color=blue, key=0, style=bold];
d312 -> d313  [key=0, style=solid];
d312 -> d306  [key=2, style=dotted];
d323 -> d321  [color=blue, key=0, style=bold];
d322 -> d323  [key=0, style=solid];
d322 -> d324  [key=2, style=dotted];
d333 -> d331  [color=blue, key=0, style=bold];
d332 -> d333  [key=0, style=solid];
d332 -> d324  [key=2, style=dotted];
d340 -> d338  [color=blue, key=0, style=bold];
d339 -> d340  [key=0, style=solid];
d339 -> d282  [key=2, style=dotted];
d347 -> d345  [color=blue, key=0, style=bold];
d346 -> d347  [key=0, style=solid];
d346 -> d348  [key=2, style=dotted];
d166 -> d167  [key=0, style=solid];
d168 -> d169  [key=0, style=solid];
d173 -> d174  [key=0, style=solid];
d176 -> d177  [key=0, style=solid];
d176 -> d181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d176 -> d185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d349 -> d13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d174 -> d139  [key=2, style=dotted];
d174 -> d175  [key=0, style=solid];
d175 -> d173  [color=blue, key=0, style=bold];
d178 -> d176  [color=blue, key=0, style=bold];
d177 -> d178  [key=0, style=solid];
d177 -> d179  [key=2, style=dotted];
d177 -> d180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d181 -> d182  [key=0, style=solid];
d181 -> d183  [key=2, style=dotted];
d181 -> d184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d185 -> d186  [key=0, style=solid];
d185 -> d187  [key=2, style=dotted];
d180 -> d181  [key=0, style=solid];
d350 -> d181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d350 -> d185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d182 -> d180  [color=blue, key=0, style=bold];
d184 -> d185  [key=0, style=solid];
d186 -> d184  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_1 -> m0_7  [key=2, style=dotted];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_1 -> m0_3  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> d11  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_13  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_6 -> m0_0  [color=blue, key=0, style=bold];
m0_198 -> m0_199  [key=0, style=solid];
m0_206 -> m0_207  [color=green, key=0, style=solid];
m0_206 -> m0_47  [color=green, key=2, style=dotted];
m0_204 -> m0_206  [color=green, key=1, label=lines, style=dashed];
m0_204 -> m0_205  [key=0, style=solid];
m0_204 -> m0_189  [key=2, style=dotted];
m0_204 -> m0_190  [key=2, style=dotted];
m0_204 -> m0_207  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_204 -> m0_208  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_204 -> m0_209  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_204 -> m0_210  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_204 -> m0_211  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_204 -> m0_212  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_204 -> m0_213  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_205 -> m0_206  [color=green, key=0, style=solid];
m0_205 -> m0_23  [key=2, style=dotted];
m0_205 -> m0_191  [key=2, style=dotted];
m0_207 -> m0_208  [key=0, style=solid];
m0_207 -> m0_47  [key=2, style=dotted];
m0_202 -> m0_204  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_10  [key=2, style=dotted];
m0_203 -> m0_204  [key=0, style=solid];
m0_203 -> m0_23  [key=2, style=dotted];
m0_203 -> m0_161  [key=2, style=dotted];
m0_208 -> m0_47  [key=2, style=dotted];
m0_208 -> m0_209  [key=0, style=solid];
m0_209 -> m0_47  [key=2, style=dotted];
m0_209 -> m0_210  [key=0, style=solid];
m0_210 -> m0_47  [key=2, style=dotted];
m0_210 -> m0_211  [key=0, style=solid];
m0_211 -> m0_47  [key=2, style=dotted];
m0_211 -> m0_212  [key=0, style=solid];
m0_212 -> m0_47  [key=2, style=dotted];
m0_212 -> m0_213  [key=0, style=solid];
m0_213 -> m0_47  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_199 -> m0_202  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_7  [key=2, style=dotted];
m0_199 -> m0_216  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_35  [key=2, style=dotted];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_8  [key=2, style=dotted];
m0_200 -> m0_216  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_214 -> m0_198  [color=blue, key=0, style=bold];
m0_281 -> m0_282  [key=0, style=solid];
m0_288 -> m0_289  [color=green, key=0, style=solid];
m0_288 -> m0_47  [color=green, key=2, style=dotted];
m0_286 -> m0_288  [color=green, key=1, label=lines, style=dashed];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_189  [key=2, style=dotted];
m0_286 -> m0_190  [key=2, style=dotted];
m0_286 -> m0_289  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_290  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_291  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_292  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_293  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_294  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_295  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_296  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_297  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_298  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_299  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_300  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_301  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_302  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_286 -> m0_303  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_287 -> m0_288  [color=green, key=0, style=solid];
m0_287 -> m0_23  [key=2, style=dotted];
m0_287 -> m0_191  [key=2, style=dotted];
m0_289 -> m0_47  [key=2, style=dotted];
m0_289 -> m0_290  [key=0, style=solid];
m0_290 -> m0_47  [key=2, style=dotted];
m0_290 -> m0_291  [key=0, style=solid];
m0_291 -> m0_47  [key=2, style=dotted];
m0_291 -> m0_292  [key=0, style=solid];
m0_292 -> m0_47  [key=2, style=dotted];
m0_292 -> m0_293  [key=0, style=solid];
m0_293 -> m0_47  [key=2, style=dotted];
m0_293 -> m0_294  [key=0, style=solid];
m0_294 -> m0_47  [key=2, style=dotted];
m0_294 -> m0_295  [key=0, style=solid];
m0_295 -> m0_47  [key=2, style=dotted];
m0_295 -> m0_296  [key=0, style=solid];
m0_296 -> m0_47  [key=2, style=dotted];
m0_296 -> m0_297  [key=0, style=solid];
m0_297 -> m0_47  [key=2, style=dotted];
m0_297 -> m0_298  [key=0, style=solid];
m0_298 -> m0_47  [key=2, style=dotted];
m0_298 -> m0_299  [key=0, style=solid];
m0_299 -> m0_47  [key=2, style=dotted];
m0_299 -> m0_300  [key=0, style=solid];
m0_300 -> m0_47  [key=2, style=dotted];
m0_300 -> m0_301  [key=0, style=solid];
m0_301 -> m0_47  [key=2, style=dotted];
m0_301 -> m0_302  [key=0, style=solid];
m0_302 -> m0_47  [key=2, style=dotted];
m0_302 -> m0_303  [key=0, style=solid];
m0_303 -> m0_47  [key=2, style=dotted];
m0_303 -> m0_304  [key=0, style=solid];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_10  [key=2, style=dotted];
m0_282 -> m0_285  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_282 -> m0_283  [key=0, style=solid];
m0_282 -> m0_7  [key=2, style=dotted];
m0_282 -> m0_306  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_35  [key=2, style=dotted];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_8  [key=2, style=dotted];
m0_283 -> m0_306  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_304 -> m0_281  [color=blue, key=0, style=bold];
m0_86 -> m0_87  [key=0, style=solid];
m0_91 -> m0_47  [key=2, style=dotted];
m0_91 -> m0_92  [key=0, style=solid];
m0_88 -> m0_91  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_54  [key=2, style=dotted];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_9  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_90  [color=darkseagreen4, key=1, label=args, style=dashed];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_46  [key=2, style=dotted];
m0_92 -> m0_86  [color=blue, key=0, style=bold];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_107  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_109 -> m0_47  [key=2, style=dotted];
m0_109 -> m0_110  [key=0, style=solid];
m0_109 -> m0_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_105 -> m0_109  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_111  [key=2, style=dotted];
m0_107 -> m0_109  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_22  [key=2, style=dotted];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_60  [key=2, style=dotted];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_46  [key=2, style=dotted];
m0_110 -> m0_104  [color=blue, key=0, style=bold];
m0_137 -> m0_138  [key=0, style=solid];
m0_142 -> m0_23  [key=2, style=dotted];
m0_142 -> m0_143  [key=0, style=solid];
m0_142 -> m0_146  [key=2, style=dotted];
m0_142 -> m0_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_141 -> m0_23  [key=2, style=dotted];
m0_141 -> m0_142  [key=0, style=solid];
m0_141 -> m0_145  [key=2, style=dotted];
m0_141 -> m0_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_138 -> m0_142  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_144  [key=2, style=dotted];
m0_138 -> m0_151  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_140 -> m0_142  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_9  [key=2, style=dotted];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_46  [key=2, style=dotted];
m0_143 -> m0_137  [color=blue, key=0, style=bold];
m0_406 -> m0_416  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Commit_Verb", style=dashed];
m0_406 -> m0_407  [key=0, style=solid];
m0_406 -> m0_408  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_406 -> m0_410  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Commit_Verb", style=dashed];
m0_409 -> m0_47  [key=2, style=dotted];
m0_409 -> m0_410  [key=0, style=solid];
m0_408 -> m0_409  [key=0, style=solid];
m0_408 -> m0_35  [key=2, style=dotted];
m0_408 -> m0_410  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_410 -> m0_415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_399  [key=2, style=dotted];
m0_407 -> m0_408  [key=0, style=solid];
m0_407 -> m0_8  [key=2, style=dotted];
m0_407 -> m0_413  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_411 -> m0_406  [color=blue, key=0, style=bold];
m0_341 -> m0_342  [key=0, style=solid];
m0_349 -> m0_47  [key=2, style=dotted];
m0_349 -> m0_350  [key=0, style=solid];
m0_349 -> m0_356  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_346 -> m0_47  [key=2, style=dotted];
m0_346 -> m0_347  [key=0, style=solid];
m0_347 -> m0_23  [key=2, style=dotted];
m0_347 -> m0_348  [key=0, style=solid];
m0_347 -> m0_352  [key=2, style=dotted];
m0_347 -> m0_60  [key=2, style=dotted];
m0_348 -> m0_23  [key=2, style=dotted];
m0_348 -> m0_349  [key=0, style=solid];
m0_348 -> m0_60  [key=2, style=dotted];
m0_342 -> m0_349  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_342 -> m0_343  [key=0, style=solid];
m0_342 -> m0_351  [key=2, style=dotted];
m0_345 -> m0_349  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_345 -> m0_346  [key=0, style=solid];
m0_345 -> m0_347  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_345 -> m0_348  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_345 -> m0_322  [key=2, style=dotted];
m0_343 -> m0_7  [key=2, style=dotted];
m0_343 -> m0_344  [key=0, style=solid];
m0_343 -> m0_354  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_8  [key=2, style=dotted];
m0_344 -> m0_354  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_350 -> m0_341  [color=blue, key=0, style=bold];
m0_154 -> m0_155  [key=0, style=solid];
m0_159 -> m0_23  [key=2, style=dotted];
m0_159 -> m0_161  [key=2, style=dotted];
m0_159 -> m0_160  [key=0, style=solid];
m0_158 -> m0_10  [key=2, style=dotted];
m0_158 -> m0_159  [key=0, style=solid];
m0_155 -> m0_7  [key=2, style=dotted];
m0_155 -> m0_158  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_163  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_9  [key=2, style=dotted];
m0_156 -> m0_8  [key=2, style=dotted];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_163  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_160 -> m0_154  [color=blue, key=0, style=bold];
m0_61 -> m0_62  [key=0, style=solid];
m0_65 -> m0_47  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_62 -> m0_65  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_67  [key=2, style=dotted];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_9  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_8  [key=2, style=dotted];
m0_63 -> m0_69  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_66 -> m0_61  [color=blue, key=0, style=bold];
m0_271 -> m0_272  [key=0, style=solid];
m0_276 -> m0_23  [key=2, style=dotted];
m0_276 -> m0_161  [key=2, style=dotted];
m0_276 -> m0_277  [key=0, style=solid];
m0_275 -> m0_10  [key=2, style=dotted];
m0_275 -> m0_276  [key=0, style=solid];
m0_272 -> m0_7  [key=2, style=dotted];
m0_272 -> m0_275  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_272 -> m0_273  [key=0, style=solid];
m0_272 -> m0_279  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_274 -> m0_35  [key=2, style=dotted];
m0_274 -> m0_275  [key=0, style=solid];
m0_273 -> m0_8  [key=2, style=dotted];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_279  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_277 -> m0_271  [color=blue, key=0, style=bold];
m0_478 -> m0_479  [key=0, style=solid];
m0_480 -> m0_9  [key=2, style=dotted];
m0_480 -> m0_399  [key=2, style=dotted];
m0_480 -> m0_481  [key=0, style=solid];
m0_480 -> m0_482  [key=2, style=dotted];
m0_480 -> m0_483  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_479 -> m0_46  [key=2, style=dotted];
m0_479 -> m0_480  [key=0, style=solid];
m0_481 -> m0_478  [color=blue, key=0, style=bold];
m0_393 -> m0_404  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Simple_Options", style=dashed];
m0_393 -> m0_394  [key=0, style=solid];
m0_393 -> m0_395  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_393 -> m0_397  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Simple_Options", style=dashed];
m0_396 -> m0_47  [key=2, style=dotted];
m0_396 -> m0_397  [key=0, style=solid];
m0_395 -> m0_396  [key=0, style=solid];
m0_395 -> m0_9  [key=2, style=dotted];
m0_395 -> m0_397  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_397 -> m0_403  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_397 -> m0_398  [key=0, style=solid];
m0_397 -> m0_399  [key=2, style=dotted];
m0_394 -> m0_395  [key=0, style=solid];
m0_394 -> m0_8  [key=2, style=dotted];
m0_394 -> m0_401  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_398 -> m0_393  [color=blue, key=0, style=bold];
m0_115 -> m0_116  [key=0, style=solid];
m0_118 -> m0_60  [key=2, style=dotted];
m0_118 -> m0_119  [key=0, style=solid];
m0_117 -> m0_22  [key=2, style=dotted];
m0_117 -> m0_118  [key=0, style=solid];
m0_116 -> m0_117  [key=0, style=solid];
m0_119 -> m0_115  [color=blue, key=0, style=bold];
m0_120 -> m0_121  [key=0, style=solid];
m0_125 -> m0_47  [key=2, style=dotted];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_121 -> m0_125  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_100  [key=2, style=dotted];
m0_123 -> m0_125  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_35  [key=2, style=dotted];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_60  [key=2, style=dotted];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_46  [key=2, style=dotted];
m0_126 -> m0_120  [color=blue, key=0, style=bold];
m0_71 -> m0_72  [key=0, style=solid];
m0_76 -> m0_47  [key=2, style=dotted];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_72 -> m0_76  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_78  [key=2, style=dotted];
m0_74 -> m0_76  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_22  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_60  [key=2, style=dotted];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_8  [key=2, style=dotted];
m0_73 -> m0_80  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_77 -> m0_71  [color=blue, key=0, style=bold];
m0_55 -> m0_56  [key=0, style=solid];
m0_58 -> m0_60  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_57 -> m0_9  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_56 -> m0_57  [key=0, style=solid];
m0_59 -> m0_55  [color=blue, key=0, style=bold];
m0_165 -> m0_166  [key=0, style=solid];
m0_170 -> m0_23  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_146  [key=2, style=dotted];
m0_170 -> m0_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_169 -> m0_23  [key=2, style=dotted];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_145  [key=2, style=dotted];
m0_169 -> m0_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_166 -> m0_170  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_172  [key=2, style=dotted];
m0_166 -> m0_177  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_168 -> m0_170  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_9  [key=2, style=dotted];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_46  [key=2, style=dotted];
m0_171 -> m0_165  [color=blue, key=0, style=bold];
m0_438 -> m0_439  [key=0, style=solid];
m0_442 -> m0_47  [key=2, style=dotted];
m0_442 -> m0_443  [key=0, style=solid];
m0_439 -> m0_442  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_439 -> m0_440  [key=0, style=solid];
m0_439 -> m0_444  [key=2, style=dotted];
m0_439 -> m0_445  [key=2, style=dotted];
m0_441 -> m0_442  [key=0, style=solid];
m0_441 -> m0_9  [key=2, style=dotted];
m0_440 -> m0_441  [key=0, style=solid];
m0_440 -> m0_46  [key=2, style=dotted];
m0_443 -> m0_438  [color=blue, key=0, style=bold];
m0_463 -> m0_464  [key=0, style=solid];
m0_467 -> m0_23  [key=2, style=dotted];
m0_467 -> m0_468  [key=0, style=solid];
m0_467 -> m0_452  [key=2, style=dotted];
m0_467 -> m0_453  [key=2, style=dotted];
m0_467 -> m0_472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_467 -> m0_475  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_466 -> m0_467  [key=0, style=solid];
m0_466 -> m0_9  [key=2, style=dotted];
m0_464 -> m0_466  [color=darkseagreen4, key=1, label=sameValues, style=dashed];
m0_464 -> m0_465  [key=0, style=solid];
m0_465 -> m0_466  [key=0, style=solid];
m0_465 -> m0_8  [key=2, style=dotted];
m0_465 -> m0_470  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_468 -> m0_463  [color=blue, key=0, style=bold];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_51  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_52 -> m0_47  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_49 -> m0_52  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_54  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_9  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_46  [key=2, style=dotted];
m0_53 -> m0_48  [color=blue, key=0, style=bold];
m0_512 -> m0_513  [key=0, style=solid];
m0_514 -> m0_9  [key=2, style=dotted];
m0_514 -> m0_399  [key=2, style=dotted];
m0_514 -> m0_515  [key=0, style=solid];
m0_514 -> m0_491  [key=2, style=dotted];
m0_514 -> m0_516  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_514 -> m0_519  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_513 -> m0_514  [key=0, style=solid];
m0_515 -> m0_512  [color=blue, key=0, style=bold];
m0_218 -> m0_219  [key=0, style=solid];
m0_225 -> m0_226  [color=green, key=0, style=solid];
m0_225 -> m0_47  [color=green, key=2, style=dotted];
m0_223 -> m0_225  [color=green, key=1, label=lines, style=dashed];
m0_223 -> m0_224  [key=0, style=solid];
m0_223 -> m0_189  [key=2, style=dotted];
m0_223 -> m0_190  [key=2, style=dotted];
m0_223 -> m0_226  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_223 -> m0_227  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_223 -> m0_228  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_223 -> m0_229  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_223 -> m0_230  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_224 -> m0_225  [color=green, key=0, style=solid];
m0_224 -> m0_23  [key=2, style=dotted];
m0_224 -> m0_191  [key=2, style=dotted];
m0_226 -> m0_47  [key=2, style=dotted];
m0_226 -> m0_227  [key=0, style=solid];
m0_227 -> m0_47  [key=2, style=dotted];
m0_227 -> m0_228  [key=0, style=solid];
m0_228 -> m0_47  [key=2, style=dotted];
m0_228 -> m0_229  [key=0, style=solid];
m0_229 -> m0_47  [key=2, style=dotted];
m0_229 -> m0_230  [key=0, style=solid];
m0_230 -> m0_47  [key=2, style=dotted];
m0_230 -> m0_231  [key=0, style=solid];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_10  [key=2, style=dotted];
m0_219 -> m0_222  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_7  [key=2, style=dotted];
m0_219 -> m0_233  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_35  [key=2, style=dotted];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_8  [key=2, style=dotted];
m0_220 -> m0_233  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_231 -> m0_218  [color=blue, key=0, style=bold];
m0_469 -> m0_470  [key=0, style=solid];
m0_404 -> m0_47  [key=2, style=dotted];
m0_404 -> m0_405  [key=0, style=solid];
m0_416 -> m0_47  [key=2, style=dotted];
m0_416 -> m0_417  [key=0, style=solid];
m0_82 -> m0_83  [key=0, style=solid];
m0_101 -> m0_102  [key=0, style=solid];
m0_112 -> m0_113  [key=0, style=solid];
m0_127 -> m0_128  [key=0, style=solid];
m0_356 -> m0_357  [key=0, style=solid];
m0_372 -> m0_373  [key=0, style=solid];
m0_403 -> m0_404  [key=0, style=solid];
m0_405 -> m0_403  [color=blue, key=0, style=bold];
m0_415 -> m0_416  [key=0, style=solid];
m0_417 -> m0_415  [color=blue, key=0, style=bold];
m0_216 -> m0_217  [key=0, style=solid];
m0_150 -> m0_151  [key=0, style=solid];
m0_147 -> m0_148  [key=0, style=solid];
m0_176 -> m0_177  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_195 -> m0_196  [key=0, style=solid];
m0_248 -> m0_249  [key=0, style=solid];
m0_457 -> m0_458  [key=0, style=solid];
m0_460 -> m0_461  [key=0, style=solid];
m0_472 -> m0_473  [key=0, style=solid];
m0_475 -> m0_476  [key=0, style=solid];
m0_84 -> m0_82  [color=blue, key=0, style=bold];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_85  [key=2, style=dotted];
m0_103 -> m0_101  [color=blue, key=0, style=bold];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_85  [key=2, style=dotted];
m0_114 -> m0_112  [color=blue, key=0, style=bold];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_85  [key=2, style=dotted];
m0_129 -> m0_127  [color=blue, key=0, style=bold];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_85  [key=2, style=dotted];
m0_358 -> m0_356  [color=blue, key=0, style=bold];
m0_357 -> m0_358  [key=0, style=solid];
m0_357 -> m0_85  [key=2, style=dotted];
m0_374 -> m0_372  [color=blue, key=0, style=bold];
m0_373 -> m0_374  [key=0, style=solid];
m0_373 -> m0_85  [key=2, style=dotted];
m0_233 -> m0_234  [key=0, style=solid];
m0_269 -> m0_270  [key=0, style=solid];
m0_306 -> m0_307  [key=0, style=solid];
m0_324 -> m0_325  [key=0, style=solid];
m0_339 -> m0_340  [key=0, style=solid];
m0_391 -> m0_392  [key=0, style=solid];
m0_436 -> m0_437  [key=0, style=solid];
m0_215 -> m0_216  [key=0, style=solid];
m0_217 -> m0_215  [color=blue, key=0, style=bold];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_153  [key=2, style=dotted];
m0_152 -> m0_150  [color=blue, key=0, style=bold];
m0_149 -> m0_147  [color=blue, key=0, style=bold];
m0_148 -> m0_149  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_153  [key=2, style=dotted];
m0_178 -> m0_176  [color=blue, key=0, style=bold];
m0_175 -> m0_173  [color=blue, key=0, style=bold];
m0_174 -> m0_175  [key=0, style=solid];
m0_197 -> m0_195  [color=blue, key=0, style=bold];
m0_196 -> m0_197  [key=0, style=solid];
m0_250 -> m0_248  [color=blue, key=0, style=bold];
m0_249 -> m0_250  [key=0, style=solid];
m0_459 -> m0_457  [color=blue, key=0, style=bold];
m0_458 -> m0_459  [key=0, style=solid];
m0_462 -> m0_460  [color=blue, key=0, style=bold];
m0_461 -> m0_462  [key=0, style=solid];
m0_474 -> m0_472  [color=blue, key=0, style=bold];
m0_473 -> m0_474  [key=0, style=solid];
m0_477 -> m0_475  [color=blue, key=0, style=bold];
m0_476 -> m0_477  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_354 -> m0_355  [key=0, style=solid];
m0_370 -> m0_371  [key=0, style=solid];
m0_401 -> m0_402  [key=0, style=solid];
m0_413 -> m0_414  [key=0, style=solid];
m0_232 -> m0_233  [key=0, style=solid];
m0_234 -> m0_232  [color=blue, key=0, style=bold];
m0_268 -> m0_269  [key=0, style=solid];
m0_270 -> m0_268  [color=blue, key=0, style=bold];
m0_305 -> m0_306  [key=0, style=solid];
m0_307 -> m0_305  [color=blue, key=0, style=bold];
m0_323 -> m0_324  [key=0, style=solid];
m0_325 -> m0_323  [color=blue, key=0, style=bold];
m0_338 -> m0_339  [key=0, style=solid];
m0_340 -> m0_338  [color=blue, key=0, style=bold];
m0_390 -> m0_391  [key=0, style=solid];
m0_392 -> m0_390  [color=blue, key=0, style=bold];
m0_435 -> m0_436  [key=0, style=solid];
m0_437 -> m0_435  [color=blue, key=0, style=bold];
m0_13 -> m0_14  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_163 -> m0_164  [key=0, style=solid];
m0_193 -> m0_194  [key=0, style=solid];
m0_246 -> m0_247  [key=0, style=solid];
m0_279 -> m0_280  [key=0, style=solid];
m0_505 -> m0_506  [key=0, style=solid];
m0_508 -> m0_509  [key=0, style=solid];
m0_508 -> m0_510  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Verb_With_Option_And_Value_Of_String_Type", style=dashed];
m0_455 -> m0_456  [key=0, style=solid];
m0_470 -> m0_471  [key=0, style=solid];
m0_483 -> m0_484  [key=0, style=solid];
m0_492 -> m0_493  [key=0, style=solid];
m0_496 -> m0_497  [key=0, style=solid];
m0_496 -> m0_498  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Option_And_Value_Of_String_Type", style=dashed];
m0_516 -> m0_517  [key=0, style=solid];
m0_519 -> m0_520  [key=0, style=solid];
m0_519 -> m0_521  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Shuffled_Index_Values", style=dashed];
m0_519 -> m0_522  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Shuffled_Index_Values", style=dashed];
m0_68 -> m0_69  [key=0, style=solid];
m0_70 -> m0_68  [color=blue, key=0, style=bold];
m0_79 -> m0_80  [key=0, style=solid];
m0_81 -> m0_79  [color=blue, key=0, style=bold];
m0_353 -> m0_354  [key=0, style=solid];
m0_355 -> m0_353  [color=blue, key=0, style=bold];
m0_369 -> m0_370  [key=0, style=solid];
m0_371 -> m0_369  [color=blue, key=0, style=bold];
m0_400 -> m0_401  [key=0, style=solid];
m0_402 -> m0_400  [color=blue, key=0, style=bold];
m0_412 -> m0_413  [key=0, style=solid];
m0_414 -> m0_412  [color=blue, key=0, style=bold];
m0_12 -> m0_13  [key=0, style=solid];
m0_14 -> m0_12  [color=blue, key=0, style=bold];
m0_25 -> m0_26  [key=0, style=solid];
m0_27 -> m0_25  [color=blue, key=0, style=bold];
m0_36 -> m0_37  [key=0, style=solid];
m0_38 -> m0_36  [color=blue, key=0, style=bold];
m0_162 -> m0_163  [key=0, style=solid];
m0_164 -> m0_162  [color=blue, key=0, style=bold];
m0_192 -> m0_193  [key=0, style=solid];
m0_194 -> m0_192  [color=blue, key=0, style=bold];
m0_245 -> m0_246  [key=0, style=solid];
m0_247 -> m0_245  [color=blue, key=0, style=bold];
m0_278 -> m0_279  [key=0, style=solid];
m0_280 -> m0_278  [color=blue, key=0, style=bold];
m0_507 -> m0_505  [color=blue, key=0, style=bold];
m0_506 -> m0_507  [key=0, style=solid];
m0_506 -> m0_495  [key=2, style=dotted];
m0_511 -> m0_508  [color=blue, key=0, style=bold];
m0_509 -> m0_510  [key=0, style=solid];
m0_509 -> m0_486  [key=2, style=dotted];
m0_510 -> m0_511  [key=0, style=solid];
m0_510 -> m0_486  [key=2, style=dotted];
m0_454 -> m0_455  [key=0, style=solid];
m0_456 -> m0_454  [color=blue, key=0, style=bold];
m0_471 -> m0_469  [color=blue, key=0, style=bold];
m0_485 -> m0_483  [color=blue, key=0, style=bold];
m0_484 -> m0_485  [key=0, style=solid];
m0_484 -> m0_486  [key=2, style=dotted];
m0_494 -> m0_492  [color=blue, key=0, style=bold];
m0_493 -> m0_494  [key=0, style=solid];
m0_493 -> m0_495  [key=2, style=dotted];
m0_499 -> m0_496  [color=blue, key=0, style=bold];
m0_497 -> m0_498  [key=0, style=solid];
m0_497 -> m0_486  [key=2, style=dotted];
m0_498 -> m0_499  [key=0, style=solid];
m0_498 -> m0_486  [key=2, style=dotted];
m0_518 -> m0_516  [color=blue, key=0, style=bold];
m0_517 -> m0_518  [key=0, style=solid];
m0_517 -> m0_495  [key=2, style=dotted];
m0_520 -> m0_521  [key=0, style=solid];
m0_520 -> m0_486  [key=2, style=dotted];
m0_521 -> m0_522  [key=0, style=solid];
m0_521 -> m0_486  [key=2, style=dotted];
m0_522 -> m0_523  [key=0, style=solid];
m0_522 -> m0_486  [key=2, style=dotted];
m0_523 -> m0_519  [color=blue, key=0, style=bold];
m0_251 -> m0_252  [key=0, style=solid];
m0_258 -> m0_259  [color=green, key=0, style=solid];
m0_258 -> m0_47  [color=green, key=2, style=dotted];
m0_256 -> m0_258  [color=green, key=1, label=lines, style=dashed];
m0_256 -> m0_257  [key=0, style=solid];
m0_256 -> m0_189  [key=2, style=dotted];
m0_256 -> m0_190  [key=2, style=dotted];
m0_256 -> m0_259  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_256 -> m0_260  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_256 -> m0_261  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_256 -> m0_262  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_256 -> m0_263  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_256 -> m0_264  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_256 -> m0_265  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_256 -> m0_266  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_257 -> m0_258  [color=green, key=0, style=solid];
m0_257 -> m0_23  [key=2, style=dotted];
m0_257 -> m0_191  [key=2, style=dotted];
m0_259 -> m0_47  [key=2, style=dotted];
m0_259 -> m0_260  [key=0, style=solid];
m0_260 -> m0_47  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_261 -> m0_47  [key=2, style=dotted];
m0_261 -> m0_262  [key=0, style=solid];
m0_262 -> m0_47  [key=2, style=dotted];
m0_262 -> m0_263  [key=0, style=solid];
m0_263 -> m0_47  [key=2, style=dotted];
m0_263 -> m0_264  [key=0, style=solid];
m0_264 -> m0_47  [key=2, style=dotted];
m0_264 -> m0_265  [key=0, style=solid];
m0_265 -> m0_47  [key=2, style=dotted];
m0_265 -> m0_266  [key=0, style=solid];
m0_266 -> m0_47  [key=2, style=dotted];
m0_266 -> m0_267  [key=0, style=solid];
m0_255 -> m0_256  [key=0, style=solid];
m0_255 -> m0_10  [key=2, style=dotted];
m0_252 -> m0_255  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_7  [key=2, style=dotted];
m0_252 -> m0_269  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_9  [key=2, style=dotted];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_8  [key=2, style=dotted];
m0_253 -> m0_269  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_267 -> m0_251  [color=blue, key=0, style=bold];
m0_28 -> m0_29  [key=0, style=solid];
m0_33 -> m0_23  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_24  [key=2, style=dotted];
m0_32 -> m0_10  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_29 -> m0_7  [key=2, style=dotted];
m0_29 -> m0_32  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_37  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_31 -> m0_35  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_30 -> m0_8  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_37  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_34 -> m0_28  [color=blue, key=0, style=bold];
m0_487 -> m0_488  [key=0, style=solid];
m0_489 -> m0_9  [key=2, style=dotted];
m0_489 -> m0_399  [key=2, style=dotted];
m0_489 -> m0_490  [key=0, style=solid];
m0_489 -> m0_491  [key=2, style=dotted];
m0_489 -> m0_492  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_489 -> m0_496  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_488 -> m0_489  [key=0, style=solid];
m0_490 -> m0_487  [color=blue, key=0, style=bold];
m0_500 -> m0_501  [key=0, style=solid];
m0_503 -> m0_60  [key=2, style=dotted];
m0_503 -> m0_504  [key=0, style=solid];
m0_503 -> m0_491  [key=2, style=dotted];
m0_503 -> m0_505  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_503 -> m0_508  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_502 -> m0_22  [key=2, style=dotted];
m0_502 -> m0_503  [key=0, style=solid];
m0_501 -> m0_502  [key=0, style=solid];
m0_504 -> m0_500  [color=blue, key=0, style=bold];
m0_308 -> m0_309  [key=0, style=solid];
m0_315 -> m0_316  [color=green, key=0, style=solid];
m0_315 -> m0_47  [color=green, key=2, style=dotted];
m0_313 -> m0_315  [color=green, key=1, label=lines, style=dashed];
m0_313 -> m0_314  [key=0, style=solid];
m0_313 -> m0_189  [key=2, style=dotted];
m0_313 -> m0_190  [key=2, style=dotted];
m0_313 -> m0_316  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_313 -> m0_317  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_313 -> m0_318  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_313 -> m0_319  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_313 -> m0_320  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_314 -> m0_315  [color=green, key=0, style=solid];
m0_314 -> m0_23  [key=2, style=dotted];
m0_314 -> m0_191  [key=2, style=dotted];
m0_316 -> m0_47  [key=2, style=dotted];
m0_316 -> m0_317  [key=0, style=solid];
m0_317 -> m0_47  [key=2, style=dotted];
m0_317 -> m0_318  [key=0, style=solid];
m0_318 -> m0_47  [key=2, style=dotted];
m0_318 -> m0_319  [key=0, style=solid];
m0_319 -> m0_47  [key=2, style=dotted];
m0_319 -> m0_320  [key=0, style=solid];
m0_320 -> m0_47  [key=2, style=dotted];
m0_320 -> m0_321  [key=0, style=solid];
m0_312 -> m0_313  [key=0, style=solid];
m0_312 -> m0_10  [key=2, style=dotted];
m0_309 -> m0_312  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_7  [key=2, style=dotted];
m0_309 -> m0_324  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_311 -> m0_312  [key=0, style=solid];
m0_311 -> m0_322  [key=2, style=dotted];
m0_310 -> m0_311  [key=0, style=solid];
m0_310 -> m0_8  [key=2, style=dotted];
m0_310 -> m0_324  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_321 -> m0_308  [color=blue, key=0, style=bold];
m0_39 -> m0_40  [key=0, style=solid];
m0_43 -> m0_47  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_40 -> m0_43  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_45  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_9  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_46  [key=2, style=dotted];
m0_44 -> m0_39  [color=blue, key=0, style=bold];
m0_179 -> m0_180  [key=0, style=solid];
m0_185 -> m0_189  [key=2, style=dotted];
m0_185 -> m0_190  [key=2, style=dotted];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_187  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_184 -> m0_23  [key=2, style=dotted];
m0_184 -> m0_161  [key=2, style=dotted];
m0_184 -> m0_185  [key=0, style=solid];
m0_186 -> m0_23  [key=2, style=dotted];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_145  [key=2, style=dotted];
m0_186 -> m0_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_187 -> m0_23  [key=2, style=dotted];
m0_187 -> m0_191  [key=2, style=dotted];
m0_187 -> m0_188  [key=0, style=solid];
m0_183 -> m0_10  [key=2, style=dotted];
m0_183 -> m0_185  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_183 -> m0_184  [key=0, style=solid];
m0_180 -> m0_7  [key=2, style=dotted];
m0_180 -> m0_183  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_193  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_9  [key=2, style=dotted];
m0_181 -> m0_8  [key=2, style=dotted];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_193  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_188 -> m0_179  [color=blue, key=0, style=bold];
m0_418 -> m0_419  [key=0, style=solid];
m0_425 -> m0_426  [color=green, key=0, style=solid];
m0_425 -> m0_47  [color=green, key=2, style=dotted];
m0_423 -> m0_425  [color=green, key=1, label=lines, style=dashed];
m0_423 -> m0_424  [key=0, style=solid];
m0_423 -> m0_189  [key=2, style=dotted];
m0_423 -> m0_190  [key=2, style=dotted];
m0_423 -> m0_426  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_423 -> m0_427  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_423 -> m0_428  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_423 -> m0_429  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_423 -> m0_430  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_423 -> m0_431  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_423 -> m0_432  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_423 -> m0_433  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_424 -> m0_425  [color=green, key=0, style=solid];
m0_424 -> m0_23  [key=2, style=dotted];
m0_424 -> m0_191  [key=2, style=dotted];
m0_426 -> m0_47  [key=2, style=dotted];
m0_426 -> m0_427  [key=0, style=solid];
m0_427 -> m0_47  [key=2, style=dotted];
m0_427 -> m0_428  [key=0, style=solid];
m0_428 -> m0_47  [key=2, style=dotted];
m0_428 -> m0_429  [key=0, style=solid];
m0_429 -> m0_47  [key=2, style=dotted];
m0_429 -> m0_430  [key=0, style=solid];
m0_430 -> m0_47  [key=2, style=dotted];
m0_430 -> m0_431  [key=0, style=solid];
m0_431 -> m0_47  [key=2, style=dotted];
m0_431 -> m0_432  [key=0, style=solid];
m0_432 -> m0_47  [key=2, style=dotted];
m0_432 -> m0_433  [key=0, style=solid];
m0_433 -> m0_47  [key=2, style=dotted];
m0_433 -> m0_434  [key=0, style=solid];
m0_422 -> m0_423  [key=0, style=solid];
m0_422 -> m0_10  [key=2, style=dotted];
m0_419 -> m0_422  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_419 -> m0_420  [key=0, style=solid];
m0_419 -> m0_7  [key=2, style=dotted];
m0_419 -> m0_436  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_421 -> m0_422  [key=0, style=solid];
m0_421 -> m0_35  [key=2, style=dotted];
m0_420 -> m0_421  [key=0, style=solid];
m0_420 -> m0_8  [key=2, style=dotted];
m0_420 -> m0_436  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_434 -> m0_418  [color=blue, key=0, style=bold];
m0_130 -> m0_131  [key=0, style=solid];
m0_134 -> m0_47  [key=2, style=dotted];
m0_134 -> m0_135  [key=0, style=solid];
m0_131 -> m0_134  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_136  [key=2, style=dotted];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_9  [key=2, style=dotted];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_46  [key=2, style=dotted];
m0_135 -> m0_130  [color=blue, key=0, style=bold];
m0_15 -> m0_16  [key=0, style=solid];
m0_20 -> m0_23  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_24  [key=2, style=dotted];
m0_19 -> m0_10  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_16 -> m0_7  [key=2, style=dotted];
m0_16 -> m0_19  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_22  [key=2, style=dotted];
m0_17 -> m0_8  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_26  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_21 -> m0_15  [color=blue, key=0, style=bold];
m0_375 -> m0_376  [key=0, style=solid];
m0_382 -> m0_383  [color=green, key=0, style=solid];
m0_382 -> m0_47  [color=green, key=2, style=dotted];
m0_380 -> m0_382  [color=green, key=1, label=lines, style=dashed];
m0_380 -> m0_381  [key=0, style=solid];
m0_380 -> m0_189  [key=2, style=dotted];
m0_380 -> m0_190  [key=2, style=dotted];
m0_380 -> m0_383  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_380 -> m0_384  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_380 -> m0_385  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_380 -> m0_386  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_380 -> m0_387  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_380 -> m0_388  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_381 -> m0_382  [color=green, key=0, style=solid];
m0_381 -> m0_23  [key=2, style=dotted];
m0_381 -> m0_191  [key=2, style=dotted];
m0_383 -> m0_47  [key=2, style=dotted];
m0_383 -> m0_384  [key=0, style=solid];
m0_384 -> m0_47  [key=2, style=dotted];
m0_384 -> m0_385  [key=0, style=solid];
m0_385 -> m0_47  [key=2, style=dotted];
m0_385 -> m0_386  [key=0, style=solid];
m0_386 -> m0_47  [key=2, style=dotted];
m0_386 -> m0_387  [key=0, style=solid];
m0_387 -> m0_47  [key=2, style=dotted];
m0_387 -> m0_388  [key=0, style=solid];
m0_388 -> m0_47  [key=2, style=dotted];
m0_388 -> m0_389  [key=0, style=solid];
m0_379 -> m0_380  [key=0, style=solid];
m0_379 -> m0_10  [key=2, style=dotted];
m0_376 -> m0_379  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_376 -> m0_377  [key=0, style=solid];
m0_376 -> m0_7  [key=2, style=dotted];
m0_376 -> m0_391  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_35  [key=2, style=dotted];
m0_377 -> m0_378  [key=0, style=solid];
m0_377 -> m0_8  [key=2, style=dotted];
m0_377 -> m0_391  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_389 -> m0_375  [color=blue, key=0, style=bold];
m0_326 -> m0_327  [key=0, style=solid];
m0_333 -> m0_334  [color=green, key=0, style=solid];
m0_333 -> m0_47  [color=green, key=2, style=dotted];
m0_331 -> m0_333  [color=green, key=1, label=lines, style=dashed];
m0_331 -> m0_332  [key=0, style=solid];
m0_331 -> m0_189  [key=2, style=dotted];
m0_331 -> m0_190  [key=2, style=dotted];
m0_331 -> m0_334  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_331 -> m0_335  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_331 -> m0_336  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_332 -> m0_333  [color=green, key=0, style=solid];
m0_332 -> m0_23  [key=2, style=dotted];
m0_332 -> m0_191  [key=2, style=dotted];
m0_334 -> m0_47  [key=2, style=dotted];
m0_334 -> m0_335  [key=0, style=solid];
m0_335 -> m0_47  [key=2, style=dotted];
m0_335 -> m0_336  [key=0, style=solid];
m0_336 -> m0_47  [key=2, style=dotted];
m0_336 -> m0_337  [key=0, style=solid];
m0_330 -> m0_331  [key=0, style=solid];
m0_330 -> m0_10  [key=2, style=dotted];
m0_327 -> m0_330  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_7  [key=2, style=dotted];
m0_327 -> m0_339  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_322  [key=2, style=dotted];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_8  [key=2, style=dotted];
m0_328 -> m0_339  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_337 -> m0_326  [color=blue, key=0, style=bold];
m0_359 -> m0_360  [key=0, style=solid];
m0_367 -> m0_47  [key=2, style=dotted];
m0_367 -> m0_368  [key=0, style=solid];
m0_367 -> m0_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_364 -> m0_47  [key=2, style=dotted];
m0_364 -> m0_365  [key=0, style=solid];
m0_365 -> m0_23  [key=2, style=dotted];
m0_365 -> m0_366  [key=0, style=solid];
m0_365 -> m0_352  [key=2, style=dotted];
m0_365 -> m0_60  [key=2, style=dotted];
m0_366 -> m0_23  [key=2, style=dotted];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_60  [key=2, style=dotted];
m0_360 -> m0_367  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_360 -> m0_361  [key=0, style=solid];
m0_360 -> m0_351  [key=2, style=dotted];
m0_363 -> m0_367  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_365  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_363 -> m0_366  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_363 -> m0_322  [key=2, style=dotted];
m0_361 -> m0_7  [key=2, style=dotted];
m0_361 -> m0_362  [key=0, style=solid];
m0_361 -> m0_370  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_362 -> m0_363  [key=0, style=solid];
m0_362 -> m0_8  [key=2, style=dotted];
m0_362 -> m0_370  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_368 -> m0_359  [color=blue, key=0, style=bold];
m0_446 -> m0_447  [key=0, style=solid];
m0_450 -> m0_23  [key=2, style=dotted];
m0_450 -> m0_451  [key=0, style=solid];
m0_450 -> m0_452  [key=2, style=dotted];
m0_450 -> m0_453  [key=2, style=dotted];
m0_450 -> m0_457  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_450 -> m0_460  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_449 -> m0_450  [key=0, style=solid];
m0_449 -> m0_9  [key=2, style=dotted];
m0_447 -> m0_449  [color=darkseagreen4, key=1, label=sameValues, style=dashed];
m0_447 -> m0_448  [key=0, style=solid];
m0_448 -> m0_449  [key=0, style=solid];
m0_448 -> m0_8  [key=2, style=dotted];
m0_448 -> m0_455  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_451 -> m0_446  [color=blue, key=0, style=bold];
m0_93 -> m0_94  [key=0, style=solid];
m0_98 -> m0_47  [key=2, style=dotted];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_94 -> m0_98  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_100  [key=2, style=dotted];
m0_96 -> m0_98  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_22  [key=2, style=dotted];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_60  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_46  [key=2, style=dotted];
m0_99 -> m0_93  [color=blue, key=0, style=bold];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_238  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_241 -> m0_189  [key=2, style=dotted];
m0_241 -> m0_190  [key=2, style=dotted];
m0_241 -> m0_242  [key=0, style=solid];
m0_241 -> m0_243  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_240 -> m0_23  [key=2, style=dotted];
m0_240 -> m0_161  [key=2, style=dotted];
m0_240 -> m0_241  [key=0, style=solid];
m0_242 -> m0_23  [key=2, style=dotted];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_145  [key=2, style=dotted];
m0_242 -> m0_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_243 -> m0_23  [key=2, style=dotted];
m0_243 -> m0_191  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_239 -> m0_10  [key=2, style=dotted];
m0_239 -> m0_241  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_239 -> m0_240  [key=0, style=solid];
m0_236 -> m0_7  [key=2, style=dotted];
m0_236 -> m0_239  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_246  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_238 -> m0_35  [key=2, style=dotted];
m0_238 -> m0_239  [key=0, style=solid];
m0_237 -> m0_8  [key=2, style=dotted];
m0_237 -> m0_238  [key=0, style=solid];
m0_237 -> m0_246  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_244 -> m0_235  [color=blue, key=0, style=bold];
m0_542 -> m0_404  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Simple_Options", style=dashed];
m0_543 -> m0_416  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Commit_Verb", style=dashed];
m0_531 -> m0_216  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_532 -> m0_233  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_534 -> m0_269  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_536 -> m0_306  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_537 -> m0_324  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_538 -> m0_339  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_541 -> m0_391  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_544 -> m0_436  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_527 -> m0_151  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_529 -> m0_177  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_539 -> m0_354  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_540 -> m0_370  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_524 -> m0_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_525 -> m0_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_526 -> m0_37  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_528 -> m0_163  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_530 -> m0_193  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_533 -> m0_246  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_535 -> m0_279  [color=darkseagreen4, key=1, label=help, style=dashed];
}
