digraph  {
n298 [label=fakeOptions, span=""];
n299 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
n1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var fakeOptions = new FakeOptions()", span="20-20"];
n2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
n6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
n3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
n13 [cluster="lambda expression", label=fakeOptions, span="27-27"];
n7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
n8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
n4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Assert.True(expectedResult.Equals(result))", span="33-33"];
n9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n12 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
n5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
n10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
n11 [cluster="Unk.True", label="Entry Unk.True", span=""];
n14 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
n15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
n16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
n17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Assert.Equal(expected, result.Value.LongValue)", span="54-54"];
n20 [cluster="lambda expression", label="Entry lambda expression", span="48-48"];
n18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
n19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n21 [cluster="lambda expression", label="new FakeOptions()", span="48-48"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="48-48"];
n23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
n27 [cluster="lambda expression", label="Entry lambda expression", span="71-71"];
n26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
n29 [cluster="lambda expression", label="Exit lambda expression", span="71-71"];
n30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
n31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
n36 [cluster="lambda expression", label="Entry lambda expression", span="95-95"];
n34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
n35 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
n38 [cluster="lambda expression", label="Exit lambda expression", span="95-95"];
n39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
n40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
n44 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
n43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
n46 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
n47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
n49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
n51 [cluster="lambda expression", label="Entry lambda expression", span="140-140"];
n50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
n52 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
n53 [cluster="lambda expression", label="Exit lambda expression", span="140-140"];
n54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
n55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
n56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
n57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
n59 [cluster="lambda expression", label="Entry lambda expression", span="162-162"];
n58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
n60 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
n61 [cluster="lambda expression", label="Exit lambda expression", span="162-162"];
n62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
n63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
n64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
n65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
n68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
n69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
n66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187"];
n70 [cluster="lambda expression", label="Entry lambda expression", span="181-181"];
n67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
n71 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
n72 [cluster="lambda expression", label="Exit lambda expression", span="181-181"];
n73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
n75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
n78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
n76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206"];
n79 [cluster="lambda expression", label="Entry lambda expression", span="200-200"];
n77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n80 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
n81 [cluster="lambda expression", label="Exit lambda expression", span="200-200"];
n82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
n83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
n84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
n85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
n86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
n88 [cluster="lambda expression", label="Entry lambda expression", span="220-220"];
n87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
n89 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
n90 [cluster="lambda expression", label="Exit lambda expression", span="220-220"];
n91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
n92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
n93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
n94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
n96 [cluster="lambda expression", label="Entry lambda expression", span="239-239"];
n95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
n97 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
n98 [cluster="lambda expression", label="Exit lambda expression", span="239-239"];
n99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
n100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
n101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
n102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
n105 [cluster="lambda expression", label="Entry lambda expression", span="263-263"];
n103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
n104 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
n106 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="263-263"];
n107 [cluster="lambda expression", label="Exit lambda expression", span="263-263"];
n108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
n109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
n110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
n111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
n114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
n112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="282-282"];
n113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
n116 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="282-282"];
n117 [cluster="lambda expression", label="Exit lambda expression", span="282-282"];
n118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
n119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
n120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
n121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
n123 [cluster="lambda expression", label="Entry lambda expression", span="301-301"];
n122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
n124 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="301-301"];
n125 [cluster="lambda expression", label="Exit lambda expression", span="301-301"];
n126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
n127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
n128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
n129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
n131 [cluster="lambda expression", label="Entry lambda expression", span="320-320"];
n130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
n132 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="320-320"];
n133 [cluster="lambda expression", label="Exit lambda expression", span="320-320"];
n134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
n135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
n136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
n139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
n137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
n140 [cluster="lambda expression", label="Entry lambda expression", span="345-345"];
n138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
n141 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="345-345"];
n142 [cluster="lambda expression", label="Exit lambda expression", span="345-345"];
n143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
n144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
n145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
n147 [cluster="lambda expression", label="Entry lambda expression", span="368-368"];
n146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
n148 [cluster="lambda expression", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
n149 [cluster="lambda expression", label="Exit lambda expression", span="368-368"];
n150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
n151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
n152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
n153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
n155 [cluster="lambda expression", label="Entry lambda expression", span="390-390"];
n154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
n156 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
n157 [cluster="lambda expression", label="Exit lambda expression", span="390-390"];
n158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
n159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
n160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
n161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
n163 [cluster="lambda expression", label="Entry lambda expression", span="412-412"];
n162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
n164 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
n165 [cluster="lambda expression", label="Exit lambda expression", span="412-412"];
n166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
n167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
n168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
n170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
n169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
n172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
n173 [cluster="lambda expression", label="Entry lambda expression", span="441-441"];
n176 [cluster="lambda expression", label="Entry lambda expression", span="442-444"];
n171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
n174 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="441-441"];
n175 [cluster="lambda expression", label="Exit lambda expression", span="441-441"];
n177 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
n181 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
n185 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
n178 [cluster="lambda expression", label="Exit lambda expression", span="442-444"];
n179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
n180 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
n182 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
n183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
n184 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
n186 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
n187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
n188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
n189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
n190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
n193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
n191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
n194 [cluster="lambda expression", label="Entry lambda expression", span="467-467"];
n192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
n195 [cluster="lambda expression", label="new FakeOptionsWithSets()", span="467-467"];
n196 [cluster="lambda expression", label="Exit lambda expression", span="467-467"];
n197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
n198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
n199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
n200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
n203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
n201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
n204 [cluster="lambda expression", label="Entry lambda expression", span="487-487"];
n202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
n205 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
n206 [cluster="lambda expression", label="Exit lambda expression", span="487-487"];
n207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
n208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
n209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
n210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
n212 [cluster="lambda expression", label="Entry lambda expression", span="507-507"];
n211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
n213 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
n214 [cluster="lambda expression", label="Exit lambda expression", span="507-507"];
n215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
n216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
n217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
n220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
n218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
n221 [cluster="lambda expression", label="Entry lambda expression", span="527-527"];
n219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
n222 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
n223 [cluster="lambda expression", label="Exit lambda expression", span="527-527"];
n224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
n225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
n226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
n227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
n229 [cluster="lambda expression", label="Entry lambda expression", span="545-545"];
n228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
n230 [cluster="lambda expression", label="new FakeOptionWithRequired()", span="545-545"];
n231 [cluster="lambda expression", label="Exit lambda expression", span="545-545"];
n232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
n233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
n234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
n235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
n236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
n238 [cluster="lambda expression", label="Entry lambda expression", span="564-564"];
n237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
n239 [cluster="lambda expression", label="new FakeOptions()", span="564-564"];
n240 [cluster="lambda expression", label="Exit lambda expression", span="564-564"];
n241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
n242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
n243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
n246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
n244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
n247 [cluster="lambda expression", label="Entry lambda expression", span="583-583"];
n245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
n248 [cluster="lambda expression", label="new FakeOptions()", span="583-583"];
n249 [cluster="lambda expression", label="Exit lambda expression", span="583-583"];
n250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
n251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
n252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
n253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
n255 [cluster="lambda expression", label="Entry lambda expression", span="602-602"];
n254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
n256 [cluster="lambda expression", label="new FakeOptions()", span="602-602"];
n257 [cluster="lambda expression", label="Exit lambda expression", span="602-602"];
n258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
n259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
n260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
n261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
n263 [cluster="lambda expression", label="Entry lambda expression", span="621-621"];
n262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
n264 [cluster="lambda expression", label="new FakeOptions()", span="621-621"];
n265 [cluster="lambda expression", label="Exit lambda expression", span="621-621"];
n266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
n267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
n268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
n271 [cluster="lambda expression", label="Entry lambda expression", span="641-641"];
n269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
n270 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
n272 [cluster="lambda expression", label="new FakeOptions()", span="641-641"];
n273 [cluster="lambda expression", label="Exit lambda expression", span="641-641"];
n274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
n275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
n276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
n277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
n279 [cluster="lambda expression", label="Entry lambda expression", span="660-660"];
n278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
n280 [cluster="lambda expression", label="new FakeOptionWithRequiredValue()", span="660-660"];
n281 [cluster="lambda expression", label="Exit lambda expression", span="660-660"];
n282 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", span="4-4"];
n283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
n284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="678-682"];
n285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="expected.ShouldBeEquivalentTo(result.Value)", span="685-685"];
n287 [cluster="lambda expression", label="Entry lambda expression", span="679-679"];
n286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673"];
n288 [cluster="lambda expression", label="new FakeOptionWithRequiredValue()", span="679-679"];
n289 [cluster="lambda expression", label="Exit lambda expression", span="679-679"];
n290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
n291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="697-701"];
n292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="expected.ShouldBeEquivalentTo(result.Value)", span="704-704"];
n294 [cluster="lambda expression", label="Entry lambda expression", span="698-698"];
n293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692"];
n295 [cluster="lambda expression", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="698-698"];
n296 [cluster="lambda expression", label="Exit lambda expression", span="698-698"];
n297 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m1_7 [cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", file="TypeConverter.cs", label="Entry CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", span="1335-1335"];
m1_0 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs", label="Entry CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40"];
m1_1 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", color=green, community=0, file="TypeConverter.cs", label="var ae = new StringArrayEnumerator(new string[] { ''--optarr'', ''one'', ''two'', ''--plain'', ''3'' })", prediction=0, span="42-42"];
m1_2 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs", label="ae.MoveNext()", span="44-44"];
m1_3 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs", label="var items = ArgumentParser.PublicWrapperOfGetNextInputValues(ae)", span="46-46"];
m1_5 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs", label="ae.Current.Should().Equal(''two'')", span="49-49"];
m1_4 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs", label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'' }, items)", span="48-48"];
m1_6 [cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs", label="Exit CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40"];
m1_10 [cluster="Unk.ElementsShouldBeEqual", file="TypeConverter.cs", label="Entry Unk.ElementsShouldBeEqual", span=""];
m1_9 [cluster="Unk.PublicWrapperOfGetNextInputValues", file="TypeConverter.cs", label="Entry Unk.PublicWrapperOfGetNextInputValues", span=""];
m1_8 [cluster="CommandLine.StringArrayEnumerator.MoveNext()", file="TypeConverter.cs", label="Entry CommandLine.StringArrayEnumerator.MoveNext()", span="1390-1390"];
m1_11 [cluster="Unk.Should", file="TypeConverter.cs", label="Entry Unk.Should", span=""];
m1_13 [file="TypeConverter.cs", label="CommandLine.Tests.ArgumentParserFixture", span=""];
n298 -> n13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
n299 -> n181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n299 -> n185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n1 -> n13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
n2 -> n4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n3 -> n12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n15 -> n17  [color=darkseagreen4, key=1, label=long, style=dashed];
n16 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n47 -> n49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n55 -> n57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n56 -> n59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n64 -> n66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n65 -> n70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n74 -> n76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n75 -> n79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n84 -> n86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n85 -> n88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n92 -> n94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n93 -> n96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n100 -> n102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n101 -> n105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n102 -> n102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n110 -> n112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n111 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n120 -> n123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n127 -> n129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n128 -> n131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n135 -> n137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n136 -> n140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n143 -> n145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n144 -> n147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n151 -> n153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n152 -> n155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n159 -> n161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n160 -> n163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n167 -> n170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n169 -> n173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n169 -> n176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n176 -> n181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n176 -> n185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n177 -> n180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n181 -> n184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n189 -> n191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n190 -> n194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n199 -> n201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n200 -> n204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n208 -> n210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n209 -> n212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n216 -> n218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n217 -> n221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n225 -> n227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n226 -> n229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n234 -> n236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n235 -> n238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n242 -> n244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n243 -> n247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n251 -> n253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n252 -> n255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n259 -> n261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n260 -> n263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n266 -> n268  [color=darkseagreen4, key=1, label=string, style=dashed];
n267 -> n271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n275 -> n277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n276 -> n279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n283 -> n285  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue", style=dashed];
n284 -> n287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n290 -> n292  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
n291 -> n294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_1 -> m1_5  [color=green, key=1, label=ae, style=dashed];
m1_13 -> m1_4  [color=darkseagreen4, key=1, label="CommandLine.Tests.ArgumentParserFixture", style=dashed];
}
