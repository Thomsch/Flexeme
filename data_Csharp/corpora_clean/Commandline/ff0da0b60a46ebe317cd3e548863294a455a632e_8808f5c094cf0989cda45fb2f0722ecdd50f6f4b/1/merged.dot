digraph  {
n298 [label=fakeOptions, span=""];
n299 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n1 [label="var fakeOptions = new FakeOptions()", span="20-20", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
n3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n13 [label=fakeOptions, span="27-27", cluster="lambda expression"];
n7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
n8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n4 [label="Assert.True(expectedResult.Equals(result))", span="33-33", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n12 [label="Entry lambda expression", span="27-27", cluster="lambda expression"];
n5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)"];
n11 [label="Entry Unk.True", span="", cluster="Unk.True"];
n14 [label="Exit lambda expression", span="27-27", cluster="lambda expression"];
n15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n17 [label="Assert.Equal(expected, result.Value.LongValue)", span="54-54", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n20 [label="Entry lambda expression", span="48-48", cluster="lambda expression"];
n18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n21 [label="new FakeOptions()", span="48-48", cluster="lambda expression"];
n22 [label="Exit lambda expression", span="48-48", cluster="lambda expression"];
n23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", color=red, community=0];
n25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", color=red, community=0];
n27 [label="Entry lambda expression", span="71-71", cluster="lambda expression"];
n26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n28 [label="new FakeOptionsWithDouble()", span="71-71", cluster="lambda expression", color=red, community=0];
n29 [label="Exit lambda expression", span="71-71", cluster="lambda expression"];
n30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()"];
n31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n32 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=red, community=0];
n33 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=red, community=0];
n36 [label="Entry lambda expression", span="95-95", cluster="lambda expression"];
n34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
n37 [label="new FakeOptionsWithSequence()", span="95-95", cluster="lambda expression", color=red, community=0];
n38 [label="Exit lambda expression", span="95-95", cluster="lambda expression"];
n39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()"];
n40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", color=red, community=0];
n42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", color=red, community=0];
n44 [label="Entry lambda expression", span="117-117", cluster="lambda expression"];
n43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n45 [label="new FakeOptions()", span="117-117", cluster="lambda expression", color=red, community=0];
n46 [label="Exit lambda expression", span="117-117", cluster="lambda expression"];
n47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", color=red, community=0];
n49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n51 [label="Entry lambda expression", span="140-140", cluster="lambda expression"];
n50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140", cluster="lambda expression"];
n53 [label="Exit lambda expression", span="140-140", cluster="lambda expression"];
n54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()"];
n55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n59 [label="Entry lambda expression", span="162-162", cluster="lambda expression"];
n58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162", cluster="lambda expression"];
n61 [label="Exit lambda expression", span="162-162", cluster="lambda expression"];
n62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()"];
n63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
n69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
n66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n70 [label="Entry lambda expression", span="181-181", cluster="lambda expression"];
n67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181", cluster="lambda expression"];
n72 [label="Exit lambda expression", span="181-181", cluster="lambda expression"];
n73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
n76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n79 [label="Entry lambda expression", span="200-200", cluster="lambda expression"];
n77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200", cluster="lambda expression"];
n81 [label="Exit lambda expression", span="200-200", cluster="lambda expression"];
n82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()"];
n83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n88 [label="Entry lambda expression", span="220-220", cluster="lambda expression"];
n87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220", cluster="lambda expression"];
n90 [label="Exit lambda expression", span="220-220", cluster="lambda expression"];
n91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n96 [label="Entry lambda expression", span="239-239", cluster="lambda expression"];
n95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239", cluster="lambda expression"];
n98 [label="Exit lambda expression", span="239-239", cluster="lambda expression"];
n99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()"];
n100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n105 [label="Entry lambda expression", span="263-263", cluster="lambda expression"];
n103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
n106 [label="new FakeOptionsWithEnum()", span="263-263", cluster="lambda expression"];
n107 [label="Exit lambda expression", span="263-263", cluster="lambda expression"];
n108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()"];
n109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n110 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n114 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
n112 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n115 [label="Entry lambda expression", span="282-282", cluster="lambda expression"];
n113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n116 [label="new FakeOptionsWithEnum()", span="282-282", cluster="lambda expression"];
n117 [label="Exit lambda expression", span="282-282", cluster="lambda expression"];
n118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n119 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n120 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n121 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n123 [label="Entry lambda expression", span="301-301", cluster="lambda expression"];
n122 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n124 [label="new FakeOptionsWithEnum()", span="301-301", cluster="lambda expression"];
n125 [label="Exit lambda expression", span="301-301", cluster="lambda expression"];
n126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n127 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n128 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n129 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n131 [label="Entry lambda expression", span="320-320", cluster="lambda expression"];
n130 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n132 [label="new FakeOptionsWithEnum()", span="320-320", cluster="lambda expression"];
n133 [label="Exit lambda expression", span="320-320", cluster="lambda expression"];
n134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n135 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n136 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n139 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()"];
n137 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n140 [label="Entry lambda expression", span="345-345", cluster="lambda expression"];
n138 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n141 [label="new FakeOptionsWithValues()", span="345-345", cluster="lambda expression"];
n142 [label="Exit lambda expression", span="345-345", cluster="lambda expression"];
n143 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n145 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n147 [label="Entry lambda expression", span="368-368", cluster="lambda expression"];
n146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n148 [label="new FakeOptionsWithSequenceWithoutRange()", span="368-368", cluster="lambda expression"];
n149 [label="Exit lambda expression", span="368-368", cluster="lambda expression"];
n150 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()"];
n151 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n152 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n153 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n155 [label="Entry lambda expression", span="390-390", cluster="lambda expression"];
n154 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n156 [label="new FakeOptionsWithSequenceAndSeparator()", span="390-390", cluster="lambda expression"];
n157 [label="Exit lambda expression", span="390-390", cluster="lambda expression"];
n158 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()"];
n159 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n160 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n161 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n163 [label="Entry lambda expression", span="412-412", cluster="lambda expression"];
n162 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n164 [label="new FakeOptionsWithSequenceAndSeparator()", span="412-412", cluster="lambda expression"];
n165 [label="Exit lambda expression", span="412-412", cluster="lambda expression"];
n166 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n167 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n168 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n170 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n169 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n172 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n173 [label="Entry lambda expression", span="441-441", cluster="lambda expression"];
n176 [label="Entry lambda expression", span="442-444", cluster="lambda expression"];
n171 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n174 [label="new FakeOptionsWithValues()", span="441-441", cluster="lambda expression"];
n175 [label="Exit lambda expression", span="441-441", cluster="lambda expression"];
n177 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444", cluster="lambda expression"];
n181 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444", cluster="lambda expression"];
n185 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444", cluster="lambda expression"];
n178 [label="Exit lambda expression", span="442-444", cluster="lambda expression"];
n179 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
n180 [label="Entry lambda expression", span="444-444", cluster="lambda expression"];
n182 [label="Exit lambda expression", span="444-444", cluster="lambda expression"];
n183 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n184 [label="Entry lambda expression", span="444-444", cluster="lambda expression"];
n186 [label="Exit lambda expression", span="444-444", cluster="lambda expression"];
n187 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n188 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n189 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n190 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n193 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
n191 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n194 [label="Entry lambda expression", span="467-467", cluster="lambda expression"];
n192 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n195 [label="new FakeOptionsWithSets()", span="467-467", cluster="lambda expression"];
n196 [label="Exit lambda expression", span="467-467", cluster="lambda expression"];
n197 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()"];
n198 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n199 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n200 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n203 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()"];
n201 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n204 [label="Entry lambda expression", span="487-487", cluster="lambda expression"];
n202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n205 [label="new FakeOptionWithRequiredAndSet()", span="487-487", cluster="lambda expression"];
n206 [label="Exit lambda expression", span="487-487", cluster="lambda expression"];
n207 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n208 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n209 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n210 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n212 [label="Entry lambda expression", span="507-507", cluster="lambda expression"];
n211 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n213 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression"];
n214 [label="Exit lambda expression", span="507-507", cluster="lambda expression"];
n215 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n216 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n217 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n220 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
n218 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n221 [label="Entry lambda expression", span="527-527", cluster="lambda expression"];
n219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n222 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression"];
n223 [label="Exit lambda expression", span="527-527", cluster="lambda expression"];
n224 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n225 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n226 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n227 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n229 [label="Entry lambda expression", span="545-545", cluster="lambda expression"];
n228 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n230 [label="new FakeOptionWithRequired()", span="545-545", cluster="lambda expression"];
n231 [label="Exit lambda expression", span="545-545", cluster="lambda expression"];
n232 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()"];
n233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n234 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n238 [label="Entry lambda expression", span="564-564", cluster="lambda expression"];
n237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n239 [label="new FakeOptions()", span="564-564", cluster="lambda expression"];
n240 [label="Exit lambda expression", span="564-564", cluster="lambda expression"];
n241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n242 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n243 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n246 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
n244 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n247 [label="Entry lambda expression", span="583-583", cluster="lambda expression"];
n245 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n248 [label="new FakeOptions()", span="583-583", cluster="lambda expression"];
n249 [label="Exit lambda expression", span="583-583", cluster="lambda expression"];
n250 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n251 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n252 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n253 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n255 [label="Entry lambda expression", span="602-602", cluster="lambda expression"];
n254 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n256 [label="new FakeOptions()", span="602-602", cluster="lambda expression"];
n257 [label="Exit lambda expression", span="602-602", cluster="lambda expression"];
n258 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n259 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n260 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n261 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n263 [label="Entry lambda expression", span="621-621", cluster="lambda expression"];
n262 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n264 [label="new FakeOptions()", span="621-621", cluster="lambda expression"];
n265 [label="Exit lambda expression", span="621-621", cluster="lambda expression"];
n266 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n267 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n268 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n271 [label="Entry lambda expression", span="641-641", cluster="lambda expression"];
n269 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n270 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)"];
n272 [label="new FakeOptions()", span="641-641", cluster="lambda expression"];
n273 [label="Exit lambda expression", span="641-641", cluster="lambda expression"];
n274 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n275 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n276 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n277 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n279 [label="Entry lambda expression", span="660-660", cluster="lambda expression"];
n278 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n280 [label="new FakeOptionWithRequiredValue()", span="660-660", cluster="lambda expression"];
n281 [label="Exit lambda expression", span="660-660", cluster="lambda expression"];
n282 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue.FakeOptionWithRequiredValue()"];
n283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)"];
n284 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="678-682", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)"];
n285 [label="expected.ShouldBeEquivalentTo(result.Value)", span="685-685", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)"];
n287 [label="Entry lambda expression", span="679-679", cluster="lambda expression"];
n286 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)", span="673-673", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionWithRequiredValue)"];
n288 [label="new FakeOptionWithRequiredValue()", span="679-679", cluster="lambda expression"];
n289 [label="Exit lambda expression", span="679-679", cluster="lambda expression"];
n290 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
n291 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="697-701", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
n292 [label="expected.ShouldBeEquivalentTo(result.Value)", span="704-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
n294 [label="Entry lambda expression", span="698-698", cluster="lambda expression"];
n293 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="692-692", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
n295 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="698-698", cluster="lambda expression"];
n296 [label="Exit lambda expression", span="698-698", cluster="lambda expression"];
n297 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()"];
m1_7 [label="Entry CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", span="1335-1335", cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", file="TypeConverter.cs"];
m1_0 [label="Entry CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs"];
m1_1 [label="var ae = new StringArrayEnumerator(new string[] { ''--optarr'', ''one'', ''two'', ''--plain'', ''3'' })", span="42-42", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", color=green, community=0, file="TypeConverter.cs"];
m1_2 [label="ae.MoveNext()", span="44-44", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs"];
m1_3 [label="var items = ArgumentParser.PublicWrapperOfGetNextInputValues(ae)", span="46-46", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs"];
m1_5 [label="ae.Current.Should().Equal(''two'')", span="49-49", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs"];
m1_4 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'' }, items)", span="48-48", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs"];
m1_6 [label="Exit CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", file="TypeConverter.cs"];
m1_10 [label="Entry Unk.ElementsShouldBeEqual", span="", cluster="Unk.ElementsShouldBeEqual", file="TypeConverter.cs"];
m1_9 [label="Entry Unk.PublicWrapperOfGetNextInputValues", span="", cluster="Unk.PublicWrapperOfGetNextInputValues", file="TypeConverter.cs"];
m1_8 [label="Entry CommandLine.StringArrayEnumerator.MoveNext()", span="1390-1390", cluster="CommandLine.StringArrayEnumerator.MoveNext()", file="TypeConverter.cs"];
m1_11 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="TypeConverter.cs"];
m1_13 [label="CommandLine.Tests.ArgumentParserFixture", span="", file="TypeConverter.cs"];
n298 -> n13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
n299 -> n181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n299 -> n185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n6  [key=2, style=dotted];
n1 -> n3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
n1 -> n13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
n2 -> n3  [key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=2, style=dotted];
n2 -> n4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n3 -> n12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n13 -> n14  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n4 -> n11  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n5 -> n0  [key=0, style=bold, color=blue];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=1, style=dashed, color=darkseagreen4, label=long];
n16 -> n17  [key=0, style=solid];
n16 -> n9  [key=2, style=dotted];
n16 -> n20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n18 -> n15  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n21 -> n6  [key=2, style=dotted];
n22 -> n20  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid, color=red];
n23 -> n25  [key=1, style=dashed, color=red, label=double];
n24 -> n25  [key=0, style=solid, color=red];
n24 -> n9  [key=2, style=dotted, color=red];
n24 -> n27  [key=1, style=dashed, color=red, label="lambda expression"];
n25 -> n26  [key=0, style=solid, color=red];
n25 -> n19  [key=2, style=dotted, color=red];
n27 -> n28  [key=0, style=solid, color=red];
n26 -> n23  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid, color=red];
n28 -> n30  [key=2, style=dotted, color=red];
n29 -> n27  [key=0, style=bold, color=blue];
n31 -> n32  [key=0, style=solid, color=red];
n31 -> n33  [key=1, style=dashed, color=red, label="int[]"];
n32 -> n33  [key=0, style=solid, color=red];
n32 -> n9  [key=2, style=dotted, color=red];
n32 -> n36  [key=1, style=dashed, color=red, label="lambda expression"];
n33 -> n34  [key=0, style=solid, color=red];
n33 -> n35  [key=2, style=dotted, color=red];
n33 -> n11  [key=2, style=dotted, color=red];
n36 -> n37  [key=0, style=solid, color=red];
n34 -> n31  [key=0, style=bold, color=blue];
n37 -> n38  [key=0, style=solid, color=red];
n37 -> n39  [key=2, style=dotted, color=red];
n38 -> n36  [key=0, style=bold, color=blue];
n40 -> n41  [key=0, style=solid, color=red];
n40 -> n42  [key=1, style=dashed, color=red, label="int[]"];
n41 -> n42  [key=0, style=solid, color=red];
n41 -> n9  [key=2, style=dotted, color=red];
n41 -> n44  [key=1, style=dashed, color=red, label="lambda expression"];
n42 -> n43  [key=0, style=solid, color=red];
n42 -> n35  [key=2, style=dotted, color=red];
n42 -> n11  [key=2, style=dotted, color=red];
n44 -> n45  [key=0, style=solid, color=red];
n43 -> n40  [key=0, style=bold, color=blue];
n45 -> n46  [key=0, style=solid, color=red];
n45 -> n6  [key=2, style=dotted, color=red];
n46 -> n44  [key=0, style=bold, color=blue];
n47 -> n48  [key=0, style=solid, color=red];
n47 -> n49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n48 -> n49  [key=0, style=solid, color=red];
n48 -> n9  [key=2, style=dotted, color=red];
n48 -> n51  [key=1, style=dashed, color=red, label="lambda expression"];
n49 -> n50  [key=0, style=solid];
n49 -> n35  [key=2, style=dotted];
n49 -> n11  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n50 -> n47  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=2, style=dotted];
n53 -> n51  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n55 -> n57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n56 -> n57  [key=0, style=solid];
n56 -> n9  [key=2, style=dotted];
n56 -> n59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n57 -> n58  [key=0, style=solid];
n57 -> n35  [key=2, style=dotted];
n57 -> n11  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n58 -> n55  [key=0, style=bold, color=blue];
n60 -> n61  [key=0, style=solid];
n60 -> n62  [key=2, style=dotted];
n61 -> n59  [key=0, style=bold, color=blue];
n63 -> n64  [key=0, style=solid];
n64 -> n65  [key=0, style=solid];
n64 -> n68  [key=2, style=dotted];
n64 -> n69  [key=2, style=dotted];
n64 -> n66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n65 -> n66  [key=0, style=solid];
n65 -> n9  [key=2, style=dotted];
n65 -> n70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n66 -> n67  [key=0, style=solid];
n66 -> n35  [key=2, style=dotted];
n66 -> n11  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n67 -> n63  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n71 -> n54  [key=2, style=dotted];
n72 -> n70  [key=0, style=bold, color=blue];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n78  [key=2, style=dotted];
n74 -> n76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n75 -> n76  [key=0, style=solid];
n75 -> n9  [key=2, style=dotted];
n75 -> n79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n76 -> n77  [key=0, style=solid];
n76 -> n35  [key=2, style=dotted];
n76 -> n11  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n77 -> n73  [key=0, style=bold, color=blue];
n80 -> n81  [key=0, style=solid];
n80 -> n82  [key=2, style=dotted];
n81 -> n79  [key=0, style=bold, color=blue];
n83 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n78  [key=2, style=dotted];
n84 -> n69  [key=2, style=dotted];
n84 -> n86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n85 -> n86  [key=0, style=solid];
n85 -> n9  [key=2, style=dotted];
n85 -> n88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n86 -> n87  [key=0, style=solid];
n86 -> n35  [key=2, style=dotted];
n86 -> n11  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n87 -> n83  [key=0, style=bold, color=blue];
n89 -> n90  [key=0, style=solid];
n89 -> n62  [key=2, style=dotted];
n90 -> n88  [key=0, style=bold, color=blue];
n91 -> n92  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n92 -> n78  [key=2, style=dotted];
n92 -> n94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n93 -> n94  [key=0, style=solid];
n93 -> n9  [key=2, style=dotted];
n93 -> n96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n94 -> n95  [key=0, style=solid];
n94 -> n35  [key=2, style=dotted];
n94 -> n11  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n95 -> n91  [key=0, style=bold, color=blue];
n97 -> n98  [key=0, style=solid];
n97 -> n99  [key=2, style=dotted];
n98 -> n96  [key=0, style=bold, color=blue];
n100 -> n101  [key=0, style=solid];
n100 -> n102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
n101 -> n102  [key=0, style=solid];
n101 -> n9  [key=2, style=dotted];
n101 -> n105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n102 -> n103  [key=0, style=solid];
n102 -> n104  [key=2, style=dotted];
n102 -> n102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
n105 -> n106  [key=0, style=solid];
n103 -> n100  [key=0, style=bold, color=blue];
n106 -> n107  [key=0, style=solid];
n106 -> n108  [key=2, style=dotted];
n107 -> n105  [key=0, style=bold, color=blue];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n114  [key=2, style=dotted];
n110 -> n69  [key=2, style=dotted];
n110 -> n112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n111 -> n112  [key=0, style=solid];
n111 -> n9  [key=2, style=dotted];
n111 -> n115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n112 -> n113  [key=0, style=solid];
n112 -> n35  [key=2, style=dotted];
n112 -> n11  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n113 -> n109  [key=0, style=bold, color=blue];
n116 -> n117  [key=0, style=solid];
n116 -> n108  [key=2, style=dotted];
n117 -> n115  [key=0, style=bold, color=blue];
n118 -> n119  [key=0, style=solid];
n119 -> n120  [key=0, style=solid];
n119 -> n114  [key=2, style=dotted];
n119 -> n69  [key=2, style=dotted];
n119 -> n121  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n120 -> n121  [key=0, style=solid];
n120 -> n9  [key=2, style=dotted];
n120 -> n123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n121 -> n122  [key=0, style=solid];
n121 -> n35  [key=2, style=dotted];
n121 -> n11  [key=2, style=dotted];
n123 -> n124  [key=0, style=solid];
n122 -> n118  [key=0, style=bold, color=blue];
n124 -> n125  [key=0, style=solid];
n124 -> n108  [key=2, style=dotted];
n125 -> n123  [key=0, style=bold, color=blue];
n126 -> n127  [key=0, style=solid];
n127 -> n128  [key=0, style=solid];
n127 -> n114  [key=2, style=dotted];
n127 -> n69  [key=2, style=dotted];
n127 -> n129  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n128 -> n129  [key=0, style=solid];
n128 -> n9  [key=2, style=dotted];
n128 -> n131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n129 -> n130  [key=0, style=solid];
n129 -> n35  [key=2, style=dotted];
n129 -> n11  [key=2, style=dotted];
n131 -> n132  [key=0, style=solid];
n130 -> n126  [key=0, style=bold, color=blue];
n132 -> n133  [key=0, style=solid];
n132 -> n108  [key=2, style=dotted];
n133 -> n131  [key=0, style=bold, color=blue];
n134 -> n135  [key=0, style=solid];
n135 -> n136  [key=0, style=solid];
n135 -> n139  [key=2, style=dotted];
n135 -> n137  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n136 -> n137  [key=0, style=solid];
n136 -> n9  [key=2, style=dotted];
n136 -> n140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n137 -> n138  [key=0, style=solid];
n137 -> n104  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n138 -> n134  [key=0, style=bold, color=blue];
n141 -> n142  [key=0, style=solid];
n141 -> n139  [key=2, style=dotted];
n142 -> n140  [key=0, style=bold, color=blue];
n143 -> n144  [key=0, style=solid];
n143 -> n145  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
n144 -> n145  [key=0, style=solid];
n144 -> n9  [key=2, style=dotted];
n144 -> n147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n145 -> n146  [key=0, style=solid];
n145 -> n104  [key=2, style=dotted];
n147 -> n148  [key=0, style=solid];
n146 -> n143  [key=0, style=bold, color=blue];
n148 -> n149  [key=0, style=solid];
n148 -> n150  [key=2, style=dotted];
n149 -> n147  [key=0, style=bold, color=blue];
n151 -> n152  [key=0, style=solid];
n151 -> n153  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
n152 -> n153  [key=0, style=solid];
n152 -> n9  [key=2, style=dotted];
n152 -> n155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n153 -> n154  [key=0, style=solid];
n153 -> n104  [key=2, style=dotted];
n155 -> n156  [key=0, style=solid];
n154 -> n151  [key=0, style=bold, color=blue];
n156 -> n157  [key=0, style=solid];
n156 -> n158  [key=2, style=dotted];
n157 -> n155  [key=0, style=bold, color=blue];
n159 -> n160  [key=0, style=solid];
n159 -> n161  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n160 -> n161  [key=0, style=solid];
n160 -> n9  [key=2, style=dotted];
n160 -> n163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n161 -> n162  [key=0, style=solid];
n161 -> n104  [key=2, style=dotted];
n163 -> n164  [key=0, style=solid];
n162 -> n159  [key=0, style=bold, color=blue];
n164 -> n165  [key=0, style=solid];
n164 -> n158  [key=2, style=dotted];
n165 -> n163  [key=0, style=bold, color=blue];
n166 -> n167  [key=0, style=solid];
n167 -> n168  [key=0, style=solid];
n167 -> n139  [key=2, style=dotted];
n167 -> n170  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n168 -> n169  [key=0, style=solid];
n170 -> n171  [key=0, style=solid];
n170 -> n104  [key=2, style=dotted];
n169 -> n170  [key=0, style=solid];
n169 -> n172  [key=2, style=dotted];
n169 -> n173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n169 -> n176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n173 -> n174  [key=0, style=solid];
n176 -> n177  [key=0, style=solid];
n176 -> n181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n176 -> n185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n171 -> n166  [key=0, style=bold, color=blue];
n174 -> n175  [key=0, style=solid];
n174 -> n139  [key=2, style=dotted];
n175 -> n173  [key=0, style=bold, color=blue];
n177 -> n178  [key=0, style=solid];
n177 -> n179  [key=2, style=dotted];
n177 -> n180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n181 -> n182  [key=0, style=solid];
n181 -> n183  [key=2, style=dotted];
n181 -> n184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n185 -> n186  [key=0, style=solid];
n185 -> n187  [key=2, style=dotted];
n178 -> n176  [key=0, style=bold, color=blue];
n180 -> n181  [key=0, style=solid];
n182 -> n180  [key=0, style=bold, color=blue];
n184 -> n185  [key=0, style=solid];
n186 -> n184  [key=0, style=bold, color=blue];
n188 -> n189  [key=0, style=solid];
n189 -> n190  [key=0, style=solid];
n189 -> n193  [key=2, style=dotted];
n189 -> n69  [key=2, style=dotted];
n189 -> n191  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n190 -> n191  [key=0, style=solid];
n190 -> n9  [key=2, style=dotted];
n190 -> n194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n191 -> n192  [key=0, style=solid];
n191 -> n35  [key=2, style=dotted];
n191 -> n11  [key=2, style=dotted];
n194 -> n195  [key=0, style=solid];
n192 -> n188  [key=0, style=bold, color=blue];
n195 -> n196  [key=0, style=solid];
n195 -> n197  [key=2, style=dotted];
n196 -> n194  [key=0, style=bold, color=blue];
n198 -> n199  [key=0, style=solid];
n199 -> n200  [key=0, style=solid];
n199 -> n203  [key=2, style=dotted];
n199 -> n201  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n200 -> n201  [key=0, style=solid];
n200 -> n9  [key=2, style=dotted];
n200 -> n204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n201 -> n202  [key=0, style=solid];
n201 -> n104  [key=2, style=dotted];
n204 -> n205  [key=0, style=solid];
n202 -> n198  [key=0, style=bold, color=blue];
n205 -> n206  [key=0, style=solid];
n205 -> n203  [key=2, style=dotted];
n206 -> n204  [key=0, style=bold, color=blue];
n207 -> n208  [key=0, style=solid];
n208 -> n209  [key=0, style=solid];
n208 -> n203  [key=2, style=dotted];
n208 -> n210  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n209 -> n210  [key=0, style=solid];
n209 -> n9  [key=2, style=dotted];
n209 -> n212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n210 -> n211  [key=0, style=solid];
n210 -> n104  [key=2, style=dotted];
n212 -> n213  [key=0, style=solid];
n211 -> n207  [key=0, style=bold, color=blue];
n213 -> n214  [key=0, style=solid];
n213 -> n203  [key=2, style=dotted];
n214 -> n212  [key=0, style=bold, color=blue];
n215 -> n216  [key=0, style=solid];
n216 -> n217  [key=0, style=solid];
n216 -> n220  [key=2, style=dotted];
n216 -> n69  [key=2, style=dotted];
n216 -> n218  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n217 -> n218  [key=0, style=solid];
n217 -> n9  [key=2, style=dotted];
n217 -> n221  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n218 -> n219  [key=0, style=solid];
n218 -> n35  [key=2, style=dotted];
n218 -> n11  [key=2, style=dotted];
n221 -> n222  [key=0, style=solid];
n219 -> n215  [key=0, style=bold, color=blue];
n222 -> n223  [key=0, style=solid];
n222 -> n203  [key=2, style=dotted];
n223 -> n221  [key=0, style=bold, color=blue];
n224 -> n225  [key=0, style=solid];
n225 -> n226  [key=0, style=solid];
n225 -> n220  [key=2, style=dotted];
n225 -> n69  [key=2, style=dotted];
n225 -> n227  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n226 -> n227  [key=0, style=solid];
n226 -> n9  [key=2, style=dotted];
n226 -> n229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n227 -> n228  [key=0, style=solid];
n227 -> n35  [key=2, style=dotted];
n227 -> n11  [key=2, style=dotted];
n229 -> n230  [key=0, style=solid];
n228 -> n224  [key=0, style=bold, color=blue];
n230 -> n231  [key=0, style=solid];
n230 -> n232  [key=2, style=dotted];
n231 -> n229  [key=0, style=bold, color=blue];
n233 -> n234  [key=0, style=solid];
n234 -> n235  [key=0, style=solid];
n234 -> n78  [key=2, style=dotted];
n234 -> n69  [key=2, style=dotted];
n234 -> n236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n235 -> n236  [key=0, style=solid];
n235 -> n9  [key=2, style=dotted];
n235 -> n238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n236 -> n237  [key=0, style=solid];
n236 -> n35  [key=2, style=dotted];
n236 -> n11  [key=2, style=dotted];
n238 -> n239  [key=0, style=solid];
n237 -> n233  [key=0, style=bold, color=blue];
n239 -> n240  [key=0, style=solid];
n239 -> n6  [key=2, style=dotted];
n240 -> n238  [key=0, style=bold, color=blue];
n241 -> n242  [key=0, style=solid];
n242 -> n243  [key=0, style=solid];
n242 -> n246  [key=2, style=dotted];
n242 -> n244  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n243 -> n244  [key=0, style=solid];
n243 -> n9  [key=2, style=dotted];
n243 -> n247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n244 -> n245  [key=0, style=solid];
n244 -> n35  [key=2, style=dotted];
n244 -> n11  [key=2, style=dotted];
n247 -> n248  [key=0, style=solid];
n245 -> n241  [key=0, style=bold, color=blue];
n248 -> n249  [key=0, style=solid];
n248 -> n6  [key=2, style=dotted];
n249 -> n247  [key=0, style=bold, color=blue];
n250 -> n251  [key=0, style=solid];
n251 -> n252  [key=0, style=solid];
n251 -> n246  [key=2, style=dotted];
n251 -> n253  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n252 -> n253  [key=0, style=solid];
n252 -> n9  [key=2, style=dotted];
n252 -> n255  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n253 -> n254  [key=0, style=solid];
n253 -> n35  [key=2, style=dotted];
n253 -> n11  [key=2, style=dotted];
n255 -> n256  [key=0, style=solid];
n254 -> n250  [key=0, style=bold, color=blue];
n256 -> n257  [key=0, style=solid];
n256 -> n6  [key=2, style=dotted];
n257 -> n255  [key=0, style=bold, color=blue];
n258 -> n259  [key=0, style=solid];
n259 -> n260  [key=0, style=solid];
n259 -> n246  [key=2, style=dotted];
n259 -> n261  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n260 -> n261  [key=0, style=solid];
n260 -> n9  [key=2, style=dotted];
n260 -> n263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n261 -> n262  [key=0, style=solid];
n261 -> n35  [key=2, style=dotted];
n261 -> n11  [key=2, style=dotted];
n263 -> n264  [key=0, style=solid];
n262 -> n258  [key=0, style=bold, color=blue];
n264 -> n265  [key=0, style=solid];
n264 -> n6  [key=2, style=dotted];
n265 -> n263  [key=0, style=bold, color=blue];
n266 -> n267  [key=0, style=solid];
n266 -> n268  [key=1, style=dashed, color=darkseagreen4, label=string];
n267 -> n268  [key=0, style=solid];
n267 -> n9  [key=2, style=dotted];
n267 -> n271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n268 -> n269  [key=0, style=solid];
n268 -> n270  [key=2, style=dotted];
n268 -> n11  [key=2, style=dotted];
n271 -> n272  [key=0, style=solid];
n269 -> n266  [key=0, style=bold, color=blue];
n272 -> n273  [key=0, style=solid];
n272 -> n6  [key=2, style=dotted];
n273 -> n271  [key=0, style=bold, color=blue];
n274 -> n275  [key=0, style=solid];
n275 -> n276  [key=0, style=solid];
n275 -> n220  [key=2, style=dotted];
n275 -> n277  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n276 -> n277  [key=0, style=solid];
n276 -> n9  [key=2, style=dotted];
n276 -> n279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n277 -> n278  [key=0, style=solid];
n277 -> n35  [key=2, style=dotted];
n277 -> n11  [key=2, style=dotted];
n279 -> n280  [key=0, style=solid];
n278 -> n274  [key=0, style=bold, color=blue];
n280 -> n281  [key=0, style=solid];
n280 -> n282  [key=2, style=dotted];
n281 -> n279  [key=0, style=bold, color=blue];
n283 -> n284  [key=0, style=solid];
n283 -> n285  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionWithRequiredValue"];
n284 -> n285  [key=0, style=solid];
n284 -> n9  [key=2, style=dotted];
n284 -> n287  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n285 -> n286  [key=0, style=solid];
n285 -> n104  [key=2, style=dotted];
n287 -> n288  [key=0, style=solid];
n286 -> n283  [key=0, style=bold, color=blue];
n288 -> n289  [key=0, style=solid];
n288 -> n282  [key=2, style=dotted];
n289 -> n287  [key=0, style=bold, color=blue];
n290 -> n291  [key=0, style=solid];
n290 -> n292  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
n291 -> n292  [key=0, style=solid];
n291 -> n9  [key=2, style=dotted];
n291 -> n294  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n292 -> n293  [key=0, style=solid];
n292 -> n104  [key=2, style=dotted];
n294 -> n295  [key=0, style=solid];
n293 -> n290  [key=0, style=bold, color=blue];
n295 -> n296  [key=0, style=solid];
n295 -> n297  [key=2, style=dotted];
n296 -> n294  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_7  [key=2, style=dotted, color=green];
m1_1 -> m1_3  [key=1, style=dashed, color=green, label=ae];
m1_1 -> m1_5  [key=1, style=dashed, color=green, label=ae];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_8  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_11  [key=2, style=dotted];
m1_5 -> n19  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_10  [key=2, style=dotted];
m1_6 -> m1_0  [key=0, style=bold, color=blue];
m1_13 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ArgumentParserFixture"];
}
