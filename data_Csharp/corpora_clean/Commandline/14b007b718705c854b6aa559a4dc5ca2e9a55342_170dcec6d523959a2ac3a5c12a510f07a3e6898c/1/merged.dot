digraph  {
n77 [label="CSharpx.Maybe<T>", span=""];
n78 [label="CSharpx.Just<T>", span=""];
n79 [label="System.Func<TSource, CSharpx.Maybe<TValue>>", span=""];
n80 [label="System.Func<TSource, TValue, TResult>", span=""];
n81 [label=TSource, span=""];
n0 [label="Entry CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19", cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)"];
n1 [label="this.tag = tag", span="21-21", cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)"];
n2 [label="Exit CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19", cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)"];
n3 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29", cluster="CSharpx.Maybe<T>.MatchNothing()"];
n4 [label="return Tag == MaybeType.Nothing;", span="31-31", cluster="CSharpx.Maybe<T>.MatchNothing()"];
n5 [label="Exit CSharpx.Maybe<T>.MatchNothing()", span="29-29", cluster="CSharpx.Maybe<T>.MatchNothing()"];
n6 [label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="34-34", cluster="CSharpx.Maybe<T>.MatchJust(out T)"];
n7 [label="value = Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="36-38", cluster="CSharpx.Maybe<T>.MatchJust(out T)"];
n8 [label="return Tag == MaybeType.Just;", span="39-39", cluster="CSharpx.Maybe<T>.MatchJust(out T)"];
n9 [label="Exit CSharpx.Maybe<T>.MatchJust(out T)", span="34-34", cluster="CSharpx.Maybe<T>.MatchJust(out T)"];
n10 [label="Entry CSharpx.Nothing<T>.Nothing()", span="48-48", cluster="CSharpx.Nothing<T>.Nothing()"];
n11 [label="Exit CSharpx.Nothing<T>.Nothing()", span="48-48", cluster="CSharpx.Nothing<T>.Nothing()"];
n12 [label="Entry CSharpx.Just<T>.Just(T)", span="58-58", cluster="CSharpx.Just<T>.Just(T)"];
n13 [label="this.value = value", span="61-61", cluster="CSharpx.Just<T>.Just(T)"];
n14 [label="Exit CSharpx.Just<T>.Just(T)", span="58-58", cluster="CSharpx.Just<T>.Just(T)"];
n15 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()"];
n16 [label="return new Nothing<T>();", span="77-77", cluster="CSharpx.Maybe.Nothing<T>()"];
n17 [label="Exit CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()"];
n18 [label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80", cluster="CSharpx.Maybe.Just<T>(T)"];
n19 [label="return new Just<T>(value);", span="82-82", cluster="CSharpx.Maybe.Just<T>(T)"];
n20 [label="Exit CSharpx.Maybe.Just<T>(T)", span="80-80", cluster="CSharpx.Maybe.Just<T>(T)"];
n21 [label="Entry CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n22 [label="either.Tag == Either2Type.Either1Of2", span="91-91", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n23 [label="return new Just<T1>(((Either1Of2<T1, T2>)either).Value);", span="93-93", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n24 [label="return new Nothing<T1>();", span="95-95", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n25 [label="Exit CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89", cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)"];
n26 [label="Entry CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105", cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)"];
n27 [label="return Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="107-107", cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)"];
n28 [label="Exit CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105", cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)"];
n29 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)"];
n30 [label="Entry CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)"];
n31 [label="T1 value1", span="112-112", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)"];
n32 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="113-115", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)"];
n33 [label="Exit CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110", cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)"];
n34 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n35 [label="Entry CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)"];
n36 [label="T1 value1", span="120-120", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)"];
n37 [label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="121-123", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)"];
n38 [label="Exit CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118", cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)"];
n39 [label="Entry CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126", cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)"];
n40 [label="T1 value1", span="128-128", cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)"];
n41 [label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="129-131", cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)"];
n42 [label="Exit CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126", cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)"];
n43 [label="Entry CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="134-134", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n44 [label="T value", span="136-136", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n45 [label="maybe.MatchJust(out value)", span="137-137", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n46 [label="action(value)", span="139-139", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n47 [label="Exit CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="134-134", cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)"];
n48 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n49 [label="Entry CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="143-143", cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)"];
n50 [label="return maybe.Map(selector);", span="146-146", cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)"];
n51 [label="Exit CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="143-143", cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)"];
n52 [label="Entry CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="118-118", cluster="CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)"];
n53 [label="Entry CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149", cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)"];
n54 [label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="154-157", cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)"];
n58 [label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="155-157", cluster="lambda expression"];
n61 [label="resultSelector(sourceValue, resultValue)", span="157-157", cluster="lambda expression"];
n55 [label="Exit CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149", cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)"];
n56 [label="Entry CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110", cluster="CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)"];
n57 [label="Entry lambda expression", span="155-157", cluster="lambda expression"];
n59 [label="Exit lambda expression", span="155-157", cluster="lambda expression"];
n60 [label="Entry lambda expression", span="157-157", cluster="lambda expression"];
n62 [label="Exit lambda expression", span="157-157", cluster="lambda expression"];
n63 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
n64 [label="Entry CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n65 [label="T value", span="162-162", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n66 [label="maybe.MatchJust(out value)", span="163-163", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n68 [label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="167-167", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n67 [label="return value;", span="165-165", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n69 [label="Exit CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160", cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)"];
n70 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)"];
n71 [label="Entry CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170", cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)"];
n72 [label="return maybe.Tag == MaybeType.Nothing;", span="172-172", cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)"];
n73 [label="Exit CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170", cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)"];
n74 [label="Entry CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175", cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)"];
n75 [label="return maybe.Tag == MaybeType.Just;", span="177-177", cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)"];
n76 [label="Exit CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175", cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)"];
m0_57 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="InstanceBuilder.cs"];
m0_80 [label="Entry NotParsed<T>.cstr", span="", cluster="NotParsed<T>.cstr", file="InstanceBuilder.cs"];
m0_48 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate", file="InstanceBuilder.cs"];
m0_67 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="InstanceBuilder.cs"];
m0_115 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="InstanceBuilder.cs"];
m0_53 [label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142", cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs"];
m0_3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_43 [label="var allErrors = tokenizerResult.Messages()\r\n                .Concat(missingValueErrors)\r\n                .Concat(optionSpecProps.Messages())\r\n                .Concat(valueSpecProps.Messages())\r\n                .Concat(validationErrors)", span="125-129", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs"];
m0_28 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_31 [label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="76-80", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_32 [label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="82-85", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_33 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="87-89", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_42 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="122-123", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_44 [label="return allErrors.Any()\r\n                ? (ParserResult<T>)new NotParsed<T>(instance, allErrors)\r\n                : (ParserResult<T>)new Parsed<T>(instance);", span="131-133", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_24 [label="arguments.Any()", span="59-59", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_26 [label="preprocessorErrors.Any()", span="62-62", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_29 [label="var tokens = tokenizerResult.SucceededWith()", span="70-70", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_30 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_34 [label="var specPropsWithValue = optionSpecProps.SucceededWith()\r\n                .Concat(valueSpecProps.SucceededWith())", span="91-92", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_38 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="98-109", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_41 [label="instance = (T)ctor.Invoke(values)", span="119-119", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_19 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="42-42", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_23 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_25 [label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_37 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="97-97", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_21 [label="var specs = from pt in specProps select pt.Specification", span="47-47", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_27 [label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_39 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="113-113", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_35 [label="T instance", span="94-94", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_40 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="114-118", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_36 [label="typeInfo.IsMutable()", span="95-95", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_45 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_86 [label="Entry Unk.GetType", span="", cluster="Unk.GetType", file="InstanceBuilder.cs"];
m0_70 [label="Entry Unk.GetParameters", span="", cluster="Unk.GetParameters", file="InstanceBuilder.cs"];
m0_108 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="InstanceBuilder.cs"];
m0_97 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceBuilder.cs"];
m0_79 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="InstanceBuilder.cs"];
m0_18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m0_60 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilder.cs"];
m0_76 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs"];
m0_77 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Messages<TSuccess, TMessage>()", span="10-10", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Messages<TSuccess, TMessage>()", file="InstanceBuilder.cs"];
m0_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m0_69 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor", file="InstanceBuilder.cs"];
m0_62 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="InstanceBuilder.cs"];
m0_74 [label="Entry Unk.Invoke", span="", cluster="Unk.Invoke", file="InstanceBuilder.cs"];
m0_50 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs"];
m0_54 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs"];
m0_75 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="InstanceBuilder.cs"];
m0_15 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_105 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_109 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_112 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_113 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_94 [label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-57", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_102 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="74-74", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_106 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_110 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="85-85", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_101 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_87 [label="Entry lambda expression", span="44-45", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_107 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_111 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_114 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_119 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_123 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_127 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_131 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_134 [label="Entry lambda expression", span="106-108", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_138 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_4 [label="Entry lambda expression", span="22-29", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_82 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_93 [label="Entry lambda expression", span="53-57", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_95 [label="Exit lambda expression", span="53-57", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_98 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_103 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_116 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_89 [label="Exit lambda expression", span="44-45", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_88 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_144 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_147 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_121 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_120 [label="sp.Value.IsJust()", span="100-100", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_125 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_124 [label="sp.Value.FromJust()", span="101-101", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_129 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_128 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="103-103", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_133 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_132 [label="sp.Specification.DefaultValue.FromJust()", span="104-104", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_136 [label="Exit lambda expression", span="106-108", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_135 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="106-108", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_140 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_139 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="109-109", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_11 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_7 [label="return explodedTokens;", span="28-28", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_17 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_8 [label="Exit lambda expression", span="22-29", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_84 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_83 [label="f().GetType()", span="42-42", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_100 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_99 [label="f()", span="55-55", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_118 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_117 [label="f()", span="97-97", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_146 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_145 [label=v, span="116-116", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_148 [label=d, span="117-117", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_149 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_52 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs"];
m0_0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-32", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs"];
m0_61 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs"];
m0_78 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="InstanceBuilder.cs"];
m0_81 [label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72", cluster="CommandLine.Parsed<T>.Parsed(T)", file="InstanceBuilder.cs"];
m0_47 [label="Entry Unk.GetSpecifications", span="", cluster="Unk.GetSpecifications", file="InstanceBuilder.cs"];
m0_73 [label="Entry Unk.CreateDefaultForImmutable", span="", cluster="Unk.CreateDefaultForImmutable", file="InstanceBuilder.cs"];
m0_142 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="InstanceBuilder.cs"];
m0_143 [label="Entry System.Type.CreateEmptyArray()", span="114-114", cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs"];
m0_72 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="InstanceBuilder.cs"];
m0_141 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="InstanceBuilder.cs"];
m0_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilder.cs"];
m0_46 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="InstanceBuilder.cs"];
m0_104 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs"];
m0_90 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs"];
m0_66 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="InstanceBuilder.cs"];
m0_56 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="InstanceBuilder.cs"];
m0_58 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs"];
m0_126 [label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342", cluster="CSharpx.Maybe<T>.FromJust<T>()", file="InstanceBuilder.cs"];
m0_130 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334", cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs"];
m0_137 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()", file="InstanceBuilder.cs"];
m0_85 [label="Entry Unk.f", span="", cluster="Unk.f", file="InstanceBuilder.cs"];
m0_96 [label="Entry System.Type.IsMutable()", span="128-128", cluster="System.Type.IsMutable()", file="InstanceBuilder.cs"];
m0_92 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="InstanceBuilder.cs"];
m0_71 [label="Entry Unk.ToLower", span="", cluster="Unk.ToLower", file="InstanceBuilder.cs"];
m0_49 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs"];
m0_51 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="InstanceBuilder.cs"];
m0_65 [label="Entry Unk.IsMutable", span="", cluster="Unk.IsMutable", file="InstanceBuilder.cs"];
m0_68 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="InstanceBuilder.cs"];
m0_122 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="InstanceBuilder.cs"];
m0_63 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="InstanceBuilder.cs"];
m0_55 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilder.cs"];
m0_64 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs"];
m0_59 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="InstanceBuilder.cs"];
m0_154 [label="System.StringComparer", span="", file="InstanceBuilder.cs"];
m0_157 [label=token, span="", file="InstanceBuilder.cs"];
m0_152 [label="CSharpx.Maybe<System.Func<T>>", span="", file="InstanceBuilder.cs"];
m0_153 [label=specProps, span="", file="InstanceBuilder.cs"];
m0_155 [label=optionSpecs, span="", file="InstanceBuilder.cs"];
m0_156 [label="System.Globalization.CultureInfo", span="", file="InstanceBuilder.cs"];
m0_150 [label="System.StringComparer", span="", file="InstanceBuilder.cs"];
m0_151 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceBuilder.cs"];
m2_0 [label="Entry CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="10-10", cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m2_1 [label="result.Tag == ResultType.Ok", span="12-12", cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", color=green, community=0];
m2_2 [label="var ok = (Ok<TSuccess, TMessage>)result", span="14-14", cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m2_4 [label="var bad = (Bad<TSuccess, TMessage>)result", span="17-17", cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=red, community=0, file="ResultExtensions.cs"];
m2_3 [label="return ok.Value.Messages;", span="15-15", cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m2_5 [label="return bad.Messages;", span="18-18", cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", color=red, community=0, file="ResultExtensions.cs"];
m2_6 [label="Exit CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="10-10", cluster="CommandLine.Infrastructure.ResultExtensions.Messages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs"];
m3_62 [label="Entry Unk.Just", span="", cluster="Unk.Just", file="ValueMapper.cs"];
m3_38 [label="Entry Unk.Empty", span="", cluster="Unk.Empty", file="ValueMapper.cs"];
m3_32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs"];
m3_0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="14-14", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="19-19", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_2 [label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="21-25", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="14-14", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_50 [label="Entry Unk.converter", span="", cluster="Unk.converter", file="ValueMapper.cs"];
m3_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="ValueMapper.cs"];
m3_4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="28-28", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_17 [label="specProps.Empty()", span="33-33", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_18 [label="yield break;", span="35-35", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_22 [label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="41-42", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_23 [label="yield break;", span="43-43", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_26 [label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="51-53", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_27 [label="yield break;", span="54-54", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_28 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="57-62", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_30 [label="yield return value;", span="66-66", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_19 [label="var pt = specProps.First()", span="37-37", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_20 [label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="38-38", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_24 [label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="46-46", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_25 [label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="47-49", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_29 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="64-64", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_21 [label="taken.Empty()", span="39-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_31 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="28-28", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="ValueMapper.cs"];
m3_34 [label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="70-70", cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs"];
m3_58 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs"];
m3_45 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing", file="ValueMapper.cs"];
m3_37 [label="Entry Unk.Take", span="", cluster="Unk.Take", file="ValueMapper.cs"];
m3_43 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="ValueMapper.cs"];
m3_47 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs"];
m3_40 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs"];
m3_48 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs"];
m3_59 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="ValueMapper.cs"];
m3_8 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="ValueMapper.cs"];
m3_11 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m3_14 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m3_9 [label="pe.Item1", span="22-22", cluster="lambda expression", file="ValueMapper.cs"];
m3_10 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="ValueMapper.cs"];
m3_12 [label="pe.Item2", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m3_13 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="ValueMapper.cs"];
m3_15 [label="e.Value", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m3_16 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="ValueMapper.cs"];
m3_60 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="60-60", cluster="lambda expression", file="ValueMapper.cs"];
m3_52 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="ValueMapper.cs"];
m3_55 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="ValueMapper.cs"];
m3_53 [label=n, span="38-38", cluster="lambda expression", file="ValueMapper.cs"];
m3_54 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="ValueMapper.cs"];
m3_56 [label="s.Specification.IsValue()", span="46-46", cluster="lambda expression", file="ValueMapper.cs"];
m3_57 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="ValueMapper.cs"];
m3_61 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="ValueMapper.cs"];
m3_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs"];
m3_41 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs"];
m3_75 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="86-86", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_76 [label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="88-90", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_77 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="86-86", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_5 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ValueMapper.cs"];
m3_51 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs"];
m3_39 [label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="86-86", cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="ValueMapper.cs"];
m3_36 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="ValueMapper.cs"];
m3_74 [label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342", cluster="CSharpx.Maybe<T>.FromJust<T>()", file="ValueMapper.cs"];
m3_64 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="ValueMapper.cs"];
m3_63 [label="Entry Unk.WithValue", span="", cluster="Unk.WithValue", file="ValueMapper.cs"];
m3_35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs"];
m3_65 [label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="70-70", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_66 [label="specification.TargetType", span="72-72", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_70 [label="specification.Max.IsJust()", span="77-77", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_71 [label="return Maybe.Just(specification.Max.FromJust());", span="79-79", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_67 [label="TargetType.Scalar", span="74-74", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_69 [label="TargetType.Sequence", span="76-76", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_68 [label="return Maybe.Just(1);", span="75-75", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_72 [label="return Maybe.Nothing<int>();", span="83-83", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_73 [label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="70-70", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs"];
m3_42 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="ValueMapper.cs"];
m3_44 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="ValueMapper.cs"];
m3_46 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="ValueMapper.cs"];
m3_7 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="ValueMapper.cs"];
m3_78 [label=pt, span="", file="ValueMapper.cs"];
n77 -> n1  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n77 -> n4  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n77 -> n7  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n77 -> n8  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n78 -> n13  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Just<T>"];
n79 -> n58  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CSharpx.Maybe<TValue>>"];
n80 -> n58  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
n80 -> n61  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
n81 -> n61  [key=1, style=dashed, color=darkseagreen4, label=TSource];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n0  [key=0, style=bold, color=blue];
n3 -> n4  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n5 -> n3  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=1, style=dashed, color=darkseagreen4, label="out T"];
n8 -> n9  [key=0, style=solid];
n9 -> n6  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n11 -> n10  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n10  [key=2, style=dotted];
n17 -> n15  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n12  [key=2, style=dotted];
n20 -> n18  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Either<T1, T2>"];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [key=0, style=solid];
n23 -> n25  [key=0, style=solid];
n23 -> n12  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n10  [key=2, style=dotted];
n25 -> n21  [key=0, style=bold, color=blue];
n26 -> n27  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=2, style=dotted];
n27 -> n15  [key=2, style=dotted];
n27 -> n18  [key=2, style=dotted];
n28 -> n26  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n6  [key=2, style=dotted];
n32 -> n34  [key=2, style=dotted];
n32 -> n15  [key=2, style=dotted];
n32 -> n32  [key=1, style=dashed, color=darkseagreen4, label=value1];
n33 -> n30  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
n36 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n6  [key=2, style=dotted];
n37 -> n34  [key=2, style=dotted];
n37 -> n18  [key=2, style=dotted];
n37 -> n15  [key=2, style=dotted];
n37 -> n37  [key=1, style=dashed, color=darkseagreen4, label=value1];
n38 -> n35  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T1>"];
n40 -> n41  [key=0, style=solid];
n41 -> n42  [key=0, style=solid];
n41 -> n6  [key=2, style=dotted];
n41 -> n34  [key=2, style=dotted];
n41 -> n41  [key=1, style=dashed, color=darkseagreen4, label=value1];
n42 -> n39  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n43 -> n46  [key=1, style=dashed, color=darkseagreen4, label="System.Action<T>"];
n44 -> n45  [key=0, style=solid];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=0, style=solid];
n45 -> n6  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n46 -> n48  [key=2, style=dotted];
n47 -> n43  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n52  [key=2, style=dotted];
n51 -> n49  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid];
n53 -> n58  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, CSharpx.Maybe<TValue>>"];
n53 -> n61  [key=1, style=dashed, color=darkseagreen4, label="System.Func<TSource, TValue, TResult>"];
n54 -> n55  [key=0, style=solid];
n54 -> n56  [key=2, style=dotted];
n54 -> n57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n58 -> n59  [key=0, style=solid];
n58 -> n34  [key=2, style=dotted];
n58 -> n52  [key=2, style=dotted];
n58 -> n60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=2, style=dotted];
n55 -> n53  [key=0, style=bold, color=blue];
n57 -> n58  [key=0, style=solid];
n57 -> n61  [key=1, style=dashed, color=darkseagreen4, label=TSource];
n59 -> n57  [key=0, style=bold, color=blue];
n60 -> n61  [key=0, style=solid];
n62 -> n60  [key=0, style=bold, color=blue];
n64 -> n65  [key=0, style=solid];
n64 -> n66  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<T>"];
n64 -> n68  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
n65 -> n66  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n68  [key=0, style=solid];
n66 -> n6  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n68 -> n70  [key=2, style=dotted];
n67 -> n69  [key=0, style=solid];
n69 -> n64  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n73 -> n71  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid];
n75 -> n76  [key=0, style=solid];
n76 -> n74  [key=0, style=bold, color=blue];
m0_3 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m0_3 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_3 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_19  [key=0, style=solid];
m0_3 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_3 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_3 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_3 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_3 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_106  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_3 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_3 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_3 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_43 -> m0_44  [key=0, style=solid, color=green];
m0_43 -> m0_77  [key=2, style=dotted, color=green];
m0_43 -> m0_78  [key=2, style=dotted, color=green];
m0_28 -> m0_43  [key=1, style=dashed, color=green, label=tokenizerResult];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_55  [key=2, style=dotted];
m0_31 -> m0_43  [key=1, style=dashed, color=green, label=optionSpecProps];
m0_31 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_58  [key=2, style=dotted];
m0_31 -> m0_59  [key=2, style=dotted];
m0_31 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_31 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m0_32 -> m0_43  [key=1, style=dashed, color=green, label=valueSpecProps];
m0_32 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_60  [key=2, style=dotted];
m0_32 -> m0_59  [key=2, style=dotted];
m0_32 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_32 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m0_33 -> m0_43  [key=1, style=dashed, color=green, label=missingValueErrors];
m0_33 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=token];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_61  [key=2, style=dotted];
m0_33 -> m0_62  [key=2, style=dotted];
m0_33 -> m0_63  [key=2, style=dotted];
m0_33 -> m0_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_33 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label=token];
m0_42 -> m0_43  [key=0, style=solid, color=green];
m0_42 -> m0_75  [key=2, style=dotted];
m0_42 -> m0_76  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_79  [key=2, style=dotted];
m0_44 -> m0_80  [key=2, style=dotted];
m0_44 -> m0_81  [key=2, style=dotted];
m0_24 -> m0_28  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_50  [key=2, style=dotted];
m0_22 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_22 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_48  [key=2, style=dotted];
m0_22 -> m0_49  [key=2, style=dotted];
m0_22 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_22 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_26 -> m0_28  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_50  [key=2, style=dotted];
m0_29 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_56  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m0_30 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m0_30 -> m0_57  [key=2, style=dotted];
m0_30 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_20 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_20 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_47  [key=2, style=dotted];
m0_20 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_20 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_20 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_20 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_34 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_56  [key=2, style=dotted];
m0_34 -> m0_64  [key=2, style=dotted];
m0_34 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_34 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m0_38 -> m0_42  [key=0, style=solid];
m0_38 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_38 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_38 -> m0_67  [key=2, style=dotted];
m0_38 -> m0_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label=instance];
m0_41 -> m0_74  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_46  [key=2, style=dotted];
m0_19 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_19 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_19 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_23  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
m0_23 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_51  [key=2, style=dotted];
m0_25 -> m0_52  [key=2, style=dotted];
m0_25 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=preprocessorErrors];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_66  [key=2, style=dotted];
m0_37 -> m0_46  [key=2, style=dotted];
m0_37 -> m0_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_27 -> m0_45  [key=0, style=solid];
m0_27 -> m0_53  [key=2, style=dotted];
m0_27 -> m0_54  [key=2, style=dotted];
m0_39 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m0_39 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=sp];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_68  [key=2, style=dotted];
m0_39 -> m0_69  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=prms];
m0_40 -> m0_70  [key=2, style=dotted];
m0_40 -> m0_71  [key=2, style=dotted];
m0_40 -> m0_72  [key=2, style=dotted];
m0_40 -> m0_73  [key=2, style=dotted];
m0_40 -> m0_46  [key=2, style=dotted];
m0_40 -> m0_68  [key=2, style=dotted];
m0_40 -> m0_144  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_40 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_39  [key=0, style=solid];
m0_36 -> m0_65  [key=2, style=dotted];
m0_45 -> m0_3  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_109 -> m0_110  [key=0, style=solid];
m0_112 -> m0_113  [key=0, style=solid];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_115  [key=2, style=dotted];
m0_94 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=p];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_96  [key=2, style=dotted];
m0_94 -> m0_66  [key=2, style=dotted];
m0_94 -> m0_46  [key=2, style=dotted];
m0_94 -> m0_68  [key=2, style=dotted];
m0_94 -> m0_97  [key=2, style=dotted];
m0_94 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_104  [key=2, style=dotted];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_108  [key=2, style=dotted];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_108  [key=2, style=dotted];
m0_101 -> m0_102  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_107 -> m0_105  [key=0, style=bold, color=blue];
m0_111 -> m0_109  [key=0, style=bold, color=blue];
m0_114 -> m0_112  [key=0, style=bold, color=blue];
m0_119 -> m0_120  [key=0, style=solid];
m0_123 -> m0_124  [key=0, style=solid];
m0_127 -> m0_128  [key=0, style=solid];
m0_131 -> m0_132  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_138 -> m0_139  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_10  [key=2, style=dotted];
m0_6 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_4 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_82 -> m0_83  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_95 -> m0_93  [key=0, style=bold, color=blue];
m0_98 -> m0_99  [key=0, style=solid];
m0_103 -> m0_101  [key=0, style=bold, color=blue];
m0_116 -> m0_117  [key=0, style=solid];
m0_89 -> m0_87  [key=0, style=bold, color=blue];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_90  [key=2, style=dotted];
m0_88 -> n15  [key=2, style=dotted];
m0_88 -> m0_92  [key=2, style=dotted];
m0_144 -> m0_145  [key=0, style=solid];
m0_147 -> m0_148  [key=0, style=solid];
m0_121 -> m0_119  [key=0, style=bold, color=blue];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_122  [key=2, style=dotted];
m0_125 -> m0_123  [key=0, style=bold, color=blue];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_126  [key=2, style=dotted];
m0_129 -> m0_127  [key=0, style=bold, color=blue];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_130  [key=2, style=dotted];
m0_128 -> m0_122  [key=2, style=dotted];
m0_133 -> m0_131  [key=0, style=bold, color=blue];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_126  [key=2, style=dotted];
m0_136 -> m0_134  [key=0, style=bold, color=blue];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_130  [key=2, style=dotted];
m0_135 -> m0_137  [key=2, style=dotted];
m0_140 -> m0_138  [key=0, style=bold, color=blue];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_141  [key=2, style=dotted];
m0_139 -> m0_142  [key=2, style=dotted];
m0_139 -> m0_143  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_13 -> m0_11  [key=0, style=bold, color=blue];
m0_7 -> m0_8  [key=0, style=solid];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_8 -> m0_4  [key=0, style=bold, color=blue];
m0_84 -> m0_82  [key=0, style=bold, color=blue];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_85  [key=2, style=dotted];
m0_83 -> m0_86  [key=2, style=dotted];
m0_100 -> m0_98  [key=0, style=bold, color=blue];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_85  [key=2, style=dotted];
m0_118 -> m0_116  [key=0, style=bold, color=blue];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_85  [key=2, style=dotted];
m0_146 -> m0_144  [key=0, style=bold, color=blue];
m0_145 -> m0_146  [key=0, style=solid];
m0_148 -> m0_149  [key=0, style=solid];
m0_149 -> m0_147  [key=0, style=bold, color=blue];
m0_0 -> m0_3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> Build"];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_0 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_1  [key=3, color=darkorchid, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> "];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_154 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_154 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_157 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label=token];
m0_152 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m0_153 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m0_155 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m0_156 -> m0_106  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_156 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m0_150 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_150 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_150 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_150 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_151 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_151 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m2_0 -> m2_4  [key=1, style=dashed, color=red, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>"];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_4  [key=0, style=solid, color=green];
m2_2 -> m2_3  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid, color=red];
m2_3 -> m2_6  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid, color=red];
m2_6 -> m2_0  [key=0, style=bold, color=blue];
m3_32 -> m3_32  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>> converter"];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_5  [key=2, style=dotted];
m3_2 -> m3_6  [key=2, style=dotted];
m3_2 -> m3_7  [key=2, style=dotted];
m3_2 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_2 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_2 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_3 -> m3_0  [key=0, style=bold, color=blue];
m3_4 -> m3_17  [key=0, style=solid];
m3_4 -> m3_18  [key=0, style=bold, color=crimson];
m3_4 -> m3_22  [key=0, style=bold, color=crimson];
m3_4 -> m3_23  [key=0, style=bold, color=crimson];
m3_4 -> m3_26  [key=0, style=bold, color=crimson];
m3_4 -> m3_27  [key=0, style=bold, color=crimson];
m3_4 -> m3_28  [key=0, style=bold, color=crimson];
m3_4 -> m3_30  [key=0, style=bold, color=crimson];
m3_4 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m3_4 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_4 -> m3_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m3_4 -> m3_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_4 -> m3_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_19  [key=0, style=solid];
m3_17 -> m3_32  [key=2, style=dotted];
m3_18 -> m3_19  [key=0, style=solid];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_39  [key=2, style=dotted];
m3_22 -> m3_40  [key=2, style=dotted];
m3_23 -> m3_24  [key=0, style=solid];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_48  [key=2, style=dotted];
m3_26 -> n18  [key=2, style=dotted];
m3_26 -> m3_40  [key=2, style=dotted];
m3_27 -> m3_28  [key=0, style=solid];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_50  [key=2, style=dotted];
m3_28 -> m3_51  [key=2, style=dotted];
m3_28 -> n18  [key=2, style=dotted];
m3_28 -> m3_40  [key=2, style=dotted];
m3_28 -> m3_36  [key=2, style=dotted];
m3_28 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_30 -> m3_29  [key=0, style=solid];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_33  [key=2, style=dotted];
m3_19 -> m3_22  [key=1, style=dashed, color=darkseagreen4, label=pt];
m3_19 -> m3_25  [key=1, style=dashed, color=darkseagreen4, label=pt];
m3_19 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label=pt];
m3_19 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label=pt];
m3_19 -> m3_60  [key=1, style=dashed, color=darkseagreen4, label=pt];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_34  [key=2, style=dotted];
m3_20 -> m3_35  [key=2, style=dotted];
m3_20 -> m3_36  [key=2, style=dotted];
m3_20 -> m3_37  [key=2, style=dotted];
m3_20 -> m3_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_20 -> m3_25  [key=1, style=dashed, color=darkseagreen4, label=taken];
m3_20 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label=taken];
m3_20 -> m3_29  [key=1, style=dashed, color=darkseagreen4, label=taken];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_41  [key=2, style=dotted];
m3_24 -> m3_42  [key=2, style=dotted];
m3_24 -> m3_43  [key=2, style=dotted];
m3_24 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_28  [key=0, style=solid];
m3_25 -> m3_44  [key=2, style=dotted];
m3_25 -> m3_45  [key=2, style=dotted];
m3_25 -> m3_46  [key=2, style=dotted];
m3_25 -> m3_41  [key=2, style=dotted];
m3_25 -> m3_47  [key=2, style=dotted];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_31  [key=0, style=solid];
m3_29 -> m3_41  [key=2, style=dotted];
m3_29 -> m3_46  [key=2, style=dotted];
m3_29 -> m3_4  [key=2, style=dotted];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_24  [key=0, style=solid];
m3_21 -> m3_38  [key=2, style=dotted];
m3_31 -> m3_4  [key=0, style=bold, color=blue];
m3_59 -> m3_60  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_9 -> m3_10  [key=0, style=solid];
m3_10 -> m3_8  [key=0, style=bold, color=blue];
m3_12 -> m3_13  [key=0, style=solid];
m3_13 -> m3_11  [key=0, style=bold, color=blue];
m3_15 -> m3_16  [key=0, style=solid];
m3_16 -> m3_14  [key=0, style=bold, color=blue];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_62  [key=2, style=dotted];
m3_60 -> m3_63  [key=2, style=dotted];
m3_60 -> m3_64  [key=2, style=dotted];
m3_60 -> m3_40  [key=2, style=dotted];
m3_52 -> m3_53  [key=0, style=solid];
m3_55 -> m3_56  [key=0, style=solid];
m3_53 -> m3_54  [key=0, style=solid];
m3_54 -> m3_52  [key=0, style=bold, color=blue];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_58  [key=2, style=dotted];
m3_57 -> m3_55  [key=0, style=bold, color=blue];
m3_61 -> m3_59  [key=0, style=bold, color=blue];
m3_75 -> m3_76  [key=0, style=solid];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_44  [key=2, style=dotted];
m3_76 -> m3_48  [key=2, style=dotted];
m3_76 -> n18  [key=2, style=dotted];
m3_76 -> m3_64  [key=2, style=dotted];
m3_77 -> m3_75  [key=0, style=bold, color=blue];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_70  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m3_65 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m3_66 -> m3_67  [key=0, style=solid];
m3_66 -> m3_69  [key=0, style=solid];
m3_70 -> m3_71  [key=0, style=solid];
m3_70 -> m3_72  [key=0, style=solid];
m3_70 -> m3_44  [key=2, style=dotted];
m3_71 -> m3_73  [key=0, style=solid];
m3_71 -> m3_74  [key=2, style=dotted];
m3_71 -> n18  [key=2, style=dotted];
m3_67 -> m3_68  [key=0, style=solid];
m3_69 -> m3_70  [key=0, style=solid];
m3_68 -> m3_73  [key=0, style=solid];
m3_68 -> n18  [key=2, style=dotted];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_64  [key=2, style=dotted];
m3_73 -> m3_65  [key=0, style=bold, color=blue];
m3_78 -> m3_60  [key=1, style=dashed, color=darkseagreen4, label=pt];
}
