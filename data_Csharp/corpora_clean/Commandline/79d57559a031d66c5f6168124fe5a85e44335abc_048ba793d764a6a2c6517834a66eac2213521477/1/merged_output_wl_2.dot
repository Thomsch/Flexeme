digraph  {
m0_54 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="InstanceBuilder.cs", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="38-38"];
m0_38 [cluster="Unk.ThrowingValidate", file="InstanceBuilder.cs", label="Entry Unk.ThrowingValidate", span=""];
m0_3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m0_31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs", label="0: instance = instance\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsJust(),\r\n                    sp => sp.Value.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                    sp => sp.Specification.DefaultValue.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing(),\r\n                    sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="82-93"];
m0_19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var instance = factory()", span="40-40"];
m0_30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="80-80"];
m0_32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup)\r\n                .OfType<Just<Error>>().Select(e => e.Value)", span="95-96"];
m0_33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="98-105"];
m0_20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specProps = instance.GetType().GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="42-43"];
m0_23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    instance,\r\n                    new[] { new HelpRequestedError() });", span="51-54"];
m0_27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="65-69"];
m0_28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="71-74"];
m0_29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         NameInfo.FromOptionSpecification(optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))))", span="76-78"];
m0_24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="57-57"];
m0_22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="49-49"];
m0_26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer))", span="61-63"];
m0_21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var optionSpecs = (from pt in specProps select pt.Specification)\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="45-47"];
m0_25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var tokens = tokenizerResult.Value", span="59-59"];
m0_34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m0_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m0_80 [cluster="string.MatchName(string, string, System.StringComparer)", file="InstanceBuilder.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m0_46 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_73 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m0_84 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="InstanceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m0_100 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", file="InstanceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26"];
m0_49 [cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m0_59 [cluster="Unk.Create", file="InstanceBuilder.cs", label="Entry Unk.Create", span=""];
m0_88 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="InstanceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m0_65 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21"];
m0_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_92 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m0_51 [cluster="Unk.Single", file="InstanceBuilder.cs", label="Entry Unk.Single", span=""];
m0_37 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="InstanceBuilder.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
m0_44 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m0_35 [cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_36 [cluster="object.GetType()", file="InstanceBuilder.cs", label="Entry object.GetType()", span="0-0"];
m0_11 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="22-22"];
m0_81 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="84-84"];
m0_85 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="85-85"];
m0_89 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="87-87"];
m0_93 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="88-88"];
m0_96 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="90-92"];
m0_101 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="93-93"];
m0_97 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing()", span="90-92"];
m0_98 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="90-92"];
m0_107 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="96-96"];
m0_83 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="84-84"];
m0_82 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsJust()", span="84-84"];
m0_87 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="85-85"];
m0_86 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.FromJust()", span="85-85"];
m0_91 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="87-87"];
m0_90 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="87-87"];
m0_95 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="88-88"];
m0_94 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Specification.DefaultValue.FromJust()", span="88-88"];
m0_103 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="93-93"];
m0_102 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="93-93"];
m0_67 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer)", span="63-63"];
m0_71 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="68-68"];
m0_75 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="74-74"];
m0_78 [cluster="lambda expression", file="InstanceBuilder.cs", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="78-78"];
m0_60 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="42-43"];
m0_70 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="68-68"];
m0_74 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="74-74"];
m0_77 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="78-78"];
m0_109 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="96-96"];
m0_108 [cluster="lambda expression", file="InstanceBuilder.cs", label="e.Value", span="96-96"];
m0_16 [cluster="lambda expression", file="InstanceBuilder.cs", label="NameLookup.WithSeparator(name, optionSpecs, nameComparer)", span="25-25"];
m0_5 [cluster="lambda expression", file="InstanceBuilder.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="22-22"];
m0_12 [cluster="lambda expression", file="InstanceBuilder.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22"];
m0_6 [cluster="lambda expression", file="InstanceBuilder.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer))", span="23-25"];
m0_4 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="20-27"];
m0_66 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="63-63"];
m0_68 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="63-63"];
m0_72 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="68-68"];
m0_76 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="74-74"];
m0_79 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="78-78"];
m0_62 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="42-43"];
m0_61 [cluster="lambda expression", file="InstanceBuilder.cs", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="42-43"];
m0_15 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="25-25"];
m0_17 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="25-25"];
m0_13 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="22-22"];
m0_7 [cluster="lambda expression", file="InstanceBuilder.cs", label="return explodedTokens;", span="26-26"];
m0_8 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="20-27"];
m0_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_42 [cluster="System.StringComparer.Equals(string, string)", file="InstanceBuilder.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m0_50 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m0_58 [cluster="Unk.Concat", file="InstanceBuilder.cs", label="Entry Unk.Concat", span=""];
m0_105 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_57 [cluster="Unk.Select", file="InstanceBuilder.cs", label="Entry Unk.Select", span=""];
m0_18 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_106 [cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs", label="Entry System.Type.CreateEmptyArray()", span="81-81"];
m0_104 [cluster="System.Type.GetGenericArguments()", file="InstanceBuilder.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m0_63 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82"];
m0_47 [cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m0_56 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="40-40"];
m0_64 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="InstanceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m0_52 [cluster="Unk.FromOptionSpecification", file="InstanceBuilder.cs", label="Entry Unk.FromOptionSpecification", span=""];
m0_39 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m0_69 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m0_55 [cluster="Unk.SetProperties", file="InstanceBuilder.cs", label="Entry Unk.SetProperties", span=""];
m0_43 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilder.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m0_99 [cluster="Unk.ToDescriptorKind", file="InstanceBuilder.cs", label="Entry Unk.ToDescriptorKind", span=""];
m0_45 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilder.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m0_53 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_48 [cluster="Unk.MapValues", file="InstanceBuilder.cs", label="Entry Unk.MapValues", span=""];
m0_0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m0_1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-30"];
m0_2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m0_112 [file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m0_113 [file="InstanceBuilder.cs", label=optionSpecs, span=""];
m0_114 [file="InstanceBuilder.cs", label="System.Globalization.CultureInfo", span=""];
m0_115 [file="InstanceBuilder.cs", label=token, span=""];
m0_110 [file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m0_111 [file="InstanceBuilder.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_142 [cluster="CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", span="199-199"];
m1_143 [cluster="CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", file="OptionMapper.cs", label="return type.InvokeMember(\r\n                name,\r\n                BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Instance,\r\n                null,\r\n                target,\r\n                new object[] { });", span="201-206"];
m1_144 [cluster="CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", span="199-199"];
m1_17 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="22-23"];
m1_44 [cluster="System.Type.GetInterfaces()", file="OptionMapper.cs", label="CommandLine.Core.SpecificationProperty", span=""];
m1_91 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="139-139"];
m1_92 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="OptionMapper.cs", label="Func<bool> isMutable = () => {\r\n                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite);\r\n                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any();\r\n                return props || fields;\r\n            }", span="141-145"];
m1_93 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="OptionMapper.cs", label="return type != typeof(object) ? isMutable() : true;", span="146-146"];
m1_94 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="139-139"];
m1_148 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="OptionMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m1_101 [cluster="System.Type.GetFields(System.Reflection.BindingFlags)", file="OptionMapper.cs", label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0"];
m1_22 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)", file="OptionMapper.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)", span="0-0"];
m1_31 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="OptionMapper.cs", label="type == null", span="51-51"];
m1_18 [cluster="Unk.ToMaybe", file="OptionMapper.cs", label="Entry Unk.ToMaybe", span=""];
m1_126 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="OptionMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m1_145 [cluster="CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", span="209-209"];
m1_146 [cluster="CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", file="OptionMapper.cs", label="return\r\n                type.IsValueType ||\r\n                type.IsPrimitive ||\r\n                new [] { \r\n                    typeof(string),\r\n                    typeof(decimal),\r\n                    typeof(DateTime),\r\n                    typeof(DateTimeOffset),\r\n                    typeof(TimeSpan),\r\n                    typeof(Guid)\r\n                }.Contains(type) ||\r\n                Convert.GetTypeCode(type) != TypeCode.Object;", span="211-222"];
m1_147 [cluster="CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", span="209-209"];
m1_13 [cluster="System.Type.GetProperties()", file="OptionMapper.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m1_23 [cluster="CommandLine.Core.ReflectionExtensions.GetUsageData(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetUsageData(System.Type)", span="38-38"];
m1_27 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="41-41"];
m1_5 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="OptionMapper.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m1_6 [cluster="Unk.Create", file="OptionMapper.cs", label="Entry Unk.Create", span=""];
m1_73 [cluster="System.Action<T>.Invoke(T)", file="OptionMapper.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_82 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="130-130"];
m1_83 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="OptionMapper.cs", label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="132-135"];
m1_84 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="OptionMapper.cs", label="return e.Compile()();", span="136-136"];
m1_85 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="130-130"];
m1_7 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="20-34"];
m1_8 [cluster="lambda expression", color=green, community=0, file="OptionMapper.cs", label="0: options.SingleOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))", span="21-34"];
m1_131 [cluster="CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", span="174-174"];
m1_132 [cluster="CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", file="OptionMapper.cs", label="return TypeInfo.Create(type);", span="176-176"];
m1_133 [cluster="CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", span="174-174"];
m1_43 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="OptionMapper.cs", label="System.StringComparer", span=""];
m1_26 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m1_52 [cluster="Unk.Where", file="OptionMapper.cs", label="Entry Unk.Where", span=""];
m1_59 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="97-97"];
m1_60 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="99-99"];
m1_61 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label="property.SetValue(instance, value, null)", span="103-103"];
m1_70 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label="return instance;", span="122-122"];
m1_63 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label="fail(e)", span="107-107"];
m1_65 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label="fail(e)", span="111-111"];
m1_67 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label="fail(e)", span="115-115"];
m1_69 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label="fail(e)", span="119-119"];
m1_62 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label=TargetException, span="105-105"];
m1_64 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label=TargetParameterCountException, span="109-109"];
m1_66 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label=MethodAccessException, span="113-113"];
m1_68 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label=TargetInvocationException, span="117-117"];
m1_71 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="97-97"];
m1_45 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="71-71"];
m1_46 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="OptionMapper.cs", label="return type == typeof(bool)\r\n                       ? TargetType.Switch\r\n                       : type == typeof(string)\r\n                             ? TargetType.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? TargetType.Sequence\r\n                                   : TargetType.Scalar;", span="73-79"];
m1_47 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="71-71"];
m1_102 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="OptionMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m1_77 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", file="OptionMapper.cs", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
m1_39 [cluster="lambda expression", file="OptionMapper.cs", label="se.Value", span="38-38"];
m1_4 [cluster="Unk.Select", file="OptionMapper.cs", label="Entry Unk.Select", span=""];
m1_14 [cluster="Unk.Return", file="OptionMapper.cs", label="Entry Unk.Return", span=""];
m1_15 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="22-23"];
m1_16 [cluster="lambda expression", file="OptionMapper.cs", label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", span="23-23"];
m1_9 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="20-34"];
m1_38 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="49-49"];
m1_10 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="18-18"];
m1_11 [cluster="lambda expression", file="OptionMapper.cs", label="x.GetProperties()", span="18-18"];
m1_12 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m1_19 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="31-31"];
m1_20 [cluster="lambda expression", color=green, community=0, file="OptionMapper.cs", label="0: converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification)))))", span="26-33"];
m1_21 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="31-31"];
m1_28 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="27-30"];
m1_29 [cluster="lambda expression", file="OptionMapper.cs", label="Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>())", span="28-30"];
m1_55 [cluster="lambda expression", file="OptionMapper.cs", label="specProp.Property.SetValue(current, selector(specProp))", span="92-92"];
m1_56 [cluster="lambda expression", file="OptionMapper.cs", label="return instance;", span="93-93"];
m1_54 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="90-94"];
m1_57 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="90-94"];
m1_75 [cluster="lambda expression", file="OptionMapper.cs", label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="99-99"];
m1_74 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="99-99"];
m1_76 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="99-99"];
m1_96 [cluster="lambda expression", file="OptionMapper.cs", label="var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="142-142"];
m1_97 [cluster="lambda expression", file="OptionMapper.cs", label="var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="143-143"];
m1_95 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="141-145"];
m1_103 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="142-142"];
m1_98 [cluster="lambda expression", file="OptionMapper.cs", label="return props || fields;", span="144-144"];
m1_99 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="141-145"];
m1_104 [cluster="lambda expression", file="OptionMapper.cs", label="p.CanWrite", span="142-142"];
m1_105 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="142-142"];
m1_128 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="169-169"];
m1_129 [cluster="lambda expression", file="OptionMapper.cs", label="pi.PropertyType", span="169-169"];
m1_130 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="169-169"];
m1_32 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="OptionMapper.cs", label="yield break;", span="53-53"];
m1_35 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="OptionMapper.cs", label="yield return @interface;", span="58-58"];
m1_30 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="49-49"];
m1_34 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="OptionMapper.cs", label="type.SafeGetInterfaces()", span="56-56"];
m1_33 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="OptionMapper.cs", label="yield return type;", span="55-55"];
m1_37 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="OptionMapper.cs", label="yield return @interface;", span="62-62"];
m1_36 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="OptionMapper.cs", label="FlattenHierarchy(type.BaseType)", span="60-60"];
m1_40 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="66-66"];
m1_72 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="OptionMapper.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m1_81 [cluster="System.Array.CreateInstance(System.Type, int)", file="OptionMapper.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m1_87 [cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="OptionMapper.cs", label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0"];
m1_86 [cluster="System.Linq.Expressions.Expression.Default(System.Type)", file="OptionMapper.cs", label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0"];
m1_90 [cluster="System.Func<TResult>.Invoke()", file="OptionMapper.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m1_127 [cluster="CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", file="OptionMapper.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", span="50-50"];
m1_48 [cluster="System.Type.IsAssignableFrom(System.Type)", file="OptionMapper.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m1_106 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="149-149"];
m1_107 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="OptionMapper.cs", label="type == typeof(string)", span="151-151"];
m1_109 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="OptionMapper.cs", label="type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>)", span="155-155"];
m1_110 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="OptionMapper.cs", label="return type.GetGenericArguments()[0].CreateEmptyArray();", span="157-157"];
m1_111 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="OptionMapper.cs", label="return type.GetDefaultValue();", span="159-159"];
m1_108 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="OptionMapper.cs", label="return string.Empty;", span="153-153"];
m1_112 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="149-149"];
m1_134 [cluster="CommandLine.TypeInfo.Create(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29"];
m1_24 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="OptionMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m1_25 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="OptionMapper.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m1_0 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs", label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", span="13-13"];
m1_1 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", color=green, community=0, file="OptionMapper.cs", label="0: var sequencesAndErrors = propertyTuples\r\n                .Select(pt =>\r\n                    options.SingleOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))\r\n                )", span="19-35"];
m1_2 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs", label="return StatePair.Create(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="36-38"];
m1_88 [cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="OptionMapper.cs", label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0"];
m1_113 [cluster="System.Type.GetGenericTypeDefinition()", file="OptionMapper.cs", label="Entry System.Type.GetGenericTypeDefinition()", span="0-0"];
m1_117 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="162-162"];
m1_118 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="OptionMapper.cs", label="type.IsMutable()", span="164-164"];
m1_119 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="OptionMapper.cs", label="return Activator.CreateInstance(type);", span="166-166"];
m1_120 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="OptionMapper.cs", label="var ctorTypes = type.GetSpecifications(pi => pi.PropertyType).ToArray()", span="169-169"];
m1_121 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="OptionMapper.cs", label="return ReflectionHelper.CreateDefaultImmutableInstance(type, ctorTypes);", span="171-171"];
m1_122 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="162-162"];
m1_139 [cluster="CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", span="189-189"];
m1_140 [cluster="CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", file="OptionMapper.cs", label="return type.InvokeMember(\r\n                name,\r\n                BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new object[] { });", span="191-196"];
m1_141 [cluster="CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", span="189-189"];
m1_149 [cluster="System.Convert.GetTypeCode(object)", file="OptionMapper.cs", label="Entry System.Convert.GetTypeCode(object)", span="0-0"];
m1_41 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="OptionMapper.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
m1_42 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="OptionMapper.cs", label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", span=""];
m1_115 [cluster="System.Type.CreateEmptyArray()", file="OptionMapper.cs", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
m1_116 [cluster="System.Type.GetDefaultValue()", file="OptionMapper.cs", label="Entry System.Type.GetDefaultValue()", span="130-130"];
m1_114 [cluster="System.Type.GetGenericArguments()", file="OptionMapper.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m1_3 [cluster="System.Type.FlattenHierarchy()", file="OptionMapper.cs", label="Entry System.Type.FlattenHierarchy()", span="49-49"];
m1_125 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="OptionMapper.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m1_124 [cluster="System.Activator.CreateInstance(System.Type)", file="OptionMapper.cs", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
m1_100 [cluster="System.Type.GetProperties(System.Reflection.BindingFlags)", file="OptionMapper.cs", label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0"];
m1_123 [cluster="System.Type.IsMutable()", file="OptionMapper.cs", label="Entry System.Type.IsMutable()", span="139-139"];
m1_53 [cluster="Unk.Aggregate", file="OptionMapper.cs", label="Entry Unk.Aggregate", span=""];
m1_78 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="125-125"];
m1_79 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="OptionMapper.cs", label="return Array.CreateInstance(type, 0);", span="127-127"];
m1_80 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="125-125"];
m1_49 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
m1_50 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="OptionMapper.cs", label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="88-94"];
m1_51 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
m1_58 [cluster="Unk.SetValue", file="OptionMapper.cs", label="Entry Unk.SetValue", span=""];
m1_138 [cluster="System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", file="OptionMapper.cs", label="Entry System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", span="0-0"];
m1_135 [cluster="CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", file="OptionMapper.cs", label="Entry CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", span="179-179"];
m1_136 [cluster="CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", file="OptionMapper.cs", label="return type.InvokeMember(\r\n                name,\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                args);", span="181-186"];
m1_137 [cluster="CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", file="OptionMapper.cs", label="Exit CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", span="179-179"];
m1_89 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="OptionMapper.cs", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
m1_150 [file="OptionMapper.cs", label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
m1_151 [file="OptionMapper.cs", label=T, span=""];
m1_152 [file="OptionMapper.cs", label="System.Type", span=""];
m2_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapperTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m2_12 [cluster="Unk.Create", file="OptionMapperTests.cs", label="Entry Unk.Create", span=""];
m2_13 [cluster="Unk.Where", file="OptionMapperTests.cs", label="Entry Unk.Where", span=""];
m2_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m2_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m2_11 [cluster="Unk.Single", file="OptionMapperTests.cs", label="Entry Unk.Single", span=""];
m2_15 [cluster="Unk.NotNull", file="OptionMapperTests.cs", label="Entry Unk.NotNull", span=""];
m2_27 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m2_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m2_2 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="OptionMapperTests.cs", label="0: var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), typeof(bool), TargetType.Boolean, string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29"];
m2_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22"];
m2_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36"];
m2_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="39-42"];
m2_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m2_28 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="40-42"];
m2_16 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="27-27"];
m2_20 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="33-33"];
m2_24 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="35-35"];
m2_18 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="27-27"];
m2_17 [cluster="lambda expression", file="OptionMapperTests.cs", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27"];
m2_22 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="33-33"];
m2_21 [cluster="lambda expression", file="OptionMapperTests.cs", label="pt.Specification.IsOption()", span="33-33"];
m2_26 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="35-35"];
m2_25 [cluster="lambda expression", file="OptionMapperTests.cs", label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35"];
m2_29 [cluster="lambda expression", file="OptionMapperTests.cs", label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="40-42"];
m2_30 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="40-42"];
m2_31 [cluster="string.Equals(string)", file="OptionMapperTests.cs", label="Entry string.Equals(string)", span="0-0"];
m2_19 [cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m2_23 [cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m2_14 [cluster="Unk.MapValues", file="OptionMapperTests.cs", label="Entry Unk.MapValues", span=""];
m2_10 [cluster="System.Type.GetProperties()", file="OptionMapperTests.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m2_9 [cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_12 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m3_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m3_0 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m3_1 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.shortName = shortName", span="20-20"];
m3_2 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.longName = longName", span="21-21"];
m3_3 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.separator = separator", span="22-22"];
m3_4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.setName = setName", span="23-23"];
m3_5 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.helpText = helpText", span="24-24"];
m3_6 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.metaValue = metaValue", span="25-25"];
m3_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.enumValues = enumValues", span="26-26"];
m3_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m3_14 [cluster="T.ToMaybe<T>()", file="OptionSpecification.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m3_9 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m3_10 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Min),\r\n                attribute.Max == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Max),\r\n                attribute.Separator,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                attribute.HelpText,\r\n                attribute.MetaValue,\r\n                enumValues);", span="31-43"];
m3_11 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m3_15 [file="OptionSpecification.cs", label="CommandLine.Core.OptionSpecification", span=""];
m5_0 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m5_1 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=red, community=0, file="Scalar.cs", label="0: return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-22"];
m5_2 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs", label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m5_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Scalar.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m5_11 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="18-19"];
m5_5 [cluster="lambda expression", color=red, community=0, file="Scalar.cs", label="0: f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="17-20"];
m5_4 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="16-20"];
m5_12 [cluster="lambda expression", color=red, community=0, file="Scalar.cs", label="2: info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }", span="19-19"];
m5_6 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="16-20"];
m5_13 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="18-19"];
m5_10 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Scalar.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m5_7 [cluster="CommandLine.Core.Token.IsName()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m5_8 [cluster="CommandLine.Core.Token.IsValue()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
m5_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="Scalar.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m5_14 [file="Scalar.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m5_15 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m5_16 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m6_11 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ScalarTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m6_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="ScalarTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m6_5 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="ScalarTests.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m6_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ScalarTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m6_14 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs", label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28"];
m6_16 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", color=green, community=0, file="ScalarTests.cs", label="0: var result = Scalar.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41"];
m6_15 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs", label="var expected = new [] { Token.Name(''str''), Token.Value(''strvalue'') }", span="30-30"];
m6_17 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="43-43"];
m6_18 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs", label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28"];
m6_0 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs", label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13"];
m6_2 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", color=green, community=0, file="ScalarTests.cs", label="0: var result = Scalar.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22"];
m6_1 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs", label="var expected = new Token[] { }", span="15-15"];
m6_3 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
m6_4 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs", label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13"];
m6_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="ScalarTests.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="29-29"];
m6_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="ScalarTests.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m6_21 [cluster="lambda expression", file="ScalarTests.cs", label="Entry lambda expression", span="38-41"];
m6_7 [cluster="lambda expression", file="ScalarTests.cs", label="Entry lambda expression", span="19-22"];
m6_8 [cluster="lambda expression", color=green, community=0, file="ScalarTests.cs", label="0: new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22"];
m6_9 [cluster="lambda expression", file="ScalarTests.cs", label="Exit lambda expression", span="19-22"];
m6_22 [cluster="lambda expression", color=green, community=0, file="ScalarTests.cs", label="0: new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41"];
m6_23 [cluster="lambda expression", file="ScalarTests.cs", label="Exit lambda expression", span="38-41"];
m6_19 [cluster="CommandLine.Core.Token.Name(string)", file="ScalarTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m6_20 [cluster="CommandLine.Core.Token.Value(string)", file="ScalarTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m8_34 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SequenceTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m8_35 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="SequenceTests.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="27-27"];
m8_3 [cluster="CommandLine.Core.Specification.EmptySpecification.EmptySpecification()", file="SequenceTests.cs", label="Entry CommandLine.Core.Specification.EmptySpecification.EmptySpecification()", span="143-143"];
m8_40 [cluster="CommandLine.Core.Specification.EmptySpecification.EmptySpecification()", file="SequenceTests.cs", label="Exit CommandLine.Core.Specification.EmptySpecification.EmptySpecification()", span="143-143"];
m8_30 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="SequenceTests.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m8_4 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="Entry CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="41-41"];
m8_5 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.tag = tag", span="45-45"];
m8_6 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.required = required", span="46-46"];
m8_7 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.min = min", span="47-47"];
m8_8 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.max = max", span="48-48"];
m8_9 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.defaultValue = defaultValue", span="49-49"];
m8_10 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.conversionType = conversionType", span="50-50"];
m8_11 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.targetType = targetType", span="51-51"];
m8_12 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.helpText = helpText", span="52-52"];
m8_13 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.metaValue = metaValue", span="53-53"];
m8_14 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="this.enumValues = enumValues", span="54-54"];
m8_15 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SequenceTests.cs", label="Exit CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="41-41"];
m8_31 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="SequenceTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m8_0 [cluster="lambda expression", file="SequenceTests.cs", label="Entry lambda expression", span="39-39"];
m8_1 [cluster="lambda expression", file="SequenceTests.cs", label="new EmptySpecification()", span="39-39"];
m8_2 [cluster="lambda expression", file="SequenceTests.cs", label="Exit lambda expression", span="39-39"];
m8_38 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="SequenceTests.cs", label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="22-22"];
m8_36 [cluster="string.ToLowerInvariant()", file="SequenceTests.cs", label="Entry string.ToLowerInvariant()", span="0-0"];
m8_33 [cluster="System.Enum.GetNames(System.Type)", file="SequenceTests.cs", label="Entry System.Enum.GetNames(System.Type)", span="0-0"];
m8_16 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="107-107"];
m8_17 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="var attrs = property.GetCustomAttributes(true)", span="109-109"];
m8_20 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="var spec = OptionSpecification.FromAttribute(oa.Single(), property.PropertyType,\r\n                    property.PropertyType.IsEnum\r\n                        ? Enum.GetNames(property.PropertyType)\r\n                        : Enumerable.Empty<string>())", span="113-116"];
m8_22 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="return spec.WithLongName(property.Name.ToLowerInvariant());", span="119-119"];
m8_26 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="return ValueSpecification.FromAttribute(va.Single(), property.PropertyType,\r\n                    property.PropertyType.IsEnum\r\n                        ? Enum.GetNames(property.PropertyType)\r\n                        : Enumerable.Empty<string>());", span="127-130"];
m8_18 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="var oa = attrs.OfType<OptionAttribute>()", span="110-110"];
m8_24 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="var va = attrs.OfType<ValueAttribute>()", span="124-124"];
m8_19 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="oa.Count() == 1", span="111-111"];
m8_21 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="spec.ShortName.Length == 0 && spec.LongName.Length == 0", span="117-117"];
m8_23 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="return spec;", span="121-121"];
m8_25 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="va.Count() == 1", span="125-125"];
m8_27 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="throw new InvalidOperationException();", span="133-133"];
m8_28 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="SequenceTests.cs", label="Exit CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="107-107"];
m8_29 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="SequenceTests.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m8_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="SequenceTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m8_37 [cluster="CommandLine.Core.OptionSpecification.WithLongName(string)", file="SequenceTests.cs", label="Entry CommandLine.Core.OptionSpecification.WithLongName(string)", span="20-20"];
m8_39 [cluster="System.InvalidOperationException.InvalidOperationException()", file="SequenceTests.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m8_41 [file="SequenceTests.cs", label="CommandLine.Core.Specification", span=""];
m9_7 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="Specification.cs", label="Entry CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="38-38"];
m9_8 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="Specification.cs", label="var notParsed = result as NotParsed<T>", span="40-40"];
m9_10 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="Specification.cs", label="action(notParsed.Errors)", span="43-43"];
m9_11 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="Specification.cs", label="return result;", span="45-45"];
m9_9 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="Specification.cs", label="notParsed != null", span="41-41"];
m9_12 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="Specification.cs", label="Exit CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="38-38"];
m9_0 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="Specification.cs", label="Entry CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", span="20-20"];
m9_1 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="Specification.cs", label="var parsed = result as Parsed<T>", span="22-22"];
m9_3 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="Specification.cs", label="action(parsed.Value)", span="25-25"];
m9_4 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", color=red, community=0, file="Specification.cs", label="1: return result;", span="27-27"];
m9_2 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="Specification.cs", label="parsed != null", span="23-23"];
m9_5 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="Specification.cs", label="Exit CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", span="20-20"];
m9_6 [cluster="System.Action<T>.Invoke(T)", file="Specification.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m10_10 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="37-37"];
m10_11 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label=guardsLookup, span="39-39"];
m10_12 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="specifications.Any(spec => guard.Item1(spec))", span="41-41"];
m10_14 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="return specifications;", span="47-47"];
m10_13 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="throw new ApplicationException(guard.Item2);", span="43-43"];
m10_15 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="37-37"];
m10_30 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="SpecificationExtensions.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m10_22 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="50-50"];
m10_23 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="int min", span="52-52"];
m10_25 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="specification.Min.MatchJust(out min) && specification.Max.MatchJust(out max)", span="54-54"];
m10_26 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="return predicate(min, max);", span="56-56"];
m10_24 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="int max", span="53-53"];
m10_27 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="return false;", span="58-58"];
m10_28 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="50-50"];
m10_0 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="10-10"];
m10_1 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Tag == SpecificationType.Option;", span="12-12"];
m10_2 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="10-10"];
m10_9 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m10_29 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="SpecificationExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31"];
m10_3 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="15-15"];
m10_4 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Tag == SpecificationType.Value;", span="17-17"];
m10_5 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="15-15"];
m10_18 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Entry lambda expression", span="41-41"];
m10_19 [cluster="lambda expression", file="SpecificationExtensions.cs", label="guard.Item1(spec)", span="41-41"];
m10_20 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Exit lambda expression", span="41-41"];
m10_37 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="71-71"];
m10_38 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="int max", span="73-73"];
m10_39 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="specification.Max.MatchJust(out max)", span="74-74"];
m10_40 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return predicate(max);", span="76-76"];
m10_41 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return false;", span="78-78"];
m10_42 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="71-71"];
m10_31 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="61-61"];
m10_32 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="int min", span="63-63"];
m10_33 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="specification.Min.MatchJust(out min)", span="64-64"];
m10_34 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return predicate(min);", span="66-66"];
m10_35 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return false;", span="68-68"];
m10_36 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="61-61"];
m10_17 [cluster="System.ApplicationException.ApplicationException(string)", file="SpecificationExtensions.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m10_16 [cluster="Unk.Any", file="SpecificationExtensions.cs", label="Entry Unk.Any", span=""];
m10_6 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20"];
m10_7 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", span="22-34"];
m10_8 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20"];
m10_21 [cluster="System.Func<T, TResult>.Invoke(T)", file="SpecificationExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m10_43 [file="SpecificationExtensions.cs", label=guard, span=""];
m11_31 [cluster="CommandLine.Core.Specification.HavingMin(System.Func<int, bool>)", file="SpecificationGuards.cs", label="Entry CommandLine.Core.Specification.HavingMin(System.Func<int, bool>)", span="61-61"];
m11_6 [cluster="Unk.ToDescriptorKind", file="SpecificationGuards.cs", label="Entry Unk.ToDescriptorKind", span=""];
m11_14 [cluster="CommandLine.Core.Specification.HavingRange(System.Func<int, int, bool>)", file="SpecificationGuards.cs", label="Entry CommandLine.Core.Specification.HavingRange(System.Func<int, int, bool>)", span="50-50"];
m11_8 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="25-25"];
m11_9 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", color=green, community=0, file="SpecificationGuards.cs", label="0: return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && spec.HavingRange((min, max) => min > max);", span="27-28"];
m11_10 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="SpecificationGuards.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="25-25"];
m11_36 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="40-40"];
m11_4 [cluster="lambda expression", color=green, community=0, file="SpecificationGuards.cs", label="0: spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar\r\n                && (spec.Min.IsJust() || spec.Max.IsJust())", span="21-22"];
m11_3 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="21-22"];
m11_5 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="21-22"];
m11_12 [cluster="lambda expression", color=green, community=0, file="SpecificationGuards.cs", label="0: spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && spec.HavingRange((min, max) => min > max)", span="27-28"];
m11_11 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="27-28"];
m11_13 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="27-28"];
m11_15 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="28-28"];
m11_16 [cluster="lambda expression", file="SpecificationGuards.cs", label="min > max", span="28-28"];
m11_17 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="28-28"];
m11_22 [cluster="lambda expression", file="SpecificationGuards.cs", label="spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1", span="33-33"];
m11_21 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="33-33"];
m11_23 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="33-33"];
m11_29 [cluster="lambda expression", color=green, community=0, file="SpecificationGuards.cs", label="0: spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && (spec.HavingMin(min => min == 0)\r\n                || spec.HavingMax(max => max == 0))", span="38-40"];
m11_28 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="38-40"];
m11_30 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="38-40"];
m11_33 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="39-39"];
m11_34 [cluster="lambda expression", file="SpecificationGuards.cs", label="min == 0", span="39-39"];
m11_35 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="39-39"];
m11_37 [cluster="lambda expression", file="SpecificationGuards.cs", label="max == 0", span="40-40"];
m11_38 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="40-40"];
m11_7 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationGuards.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m11_18 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="31-31"];
m11_19 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="SpecificationGuards.cs", label="return spec => spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1;", span="33-33"];
m11_20 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="SpecificationGuards.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="31-31"];
m11_24 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m11_0 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="19-19"];
m11_1 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", color=green, community=0, file="SpecificationGuards.cs", label="0: return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar\r\n                && (spec.Min.IsJust() || spec.Max.IsJust());", span="21-22"];
m11_2 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="SpecificationGuards.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="19-19"];
m11_25 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithZeroRange()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithZeroRange()", span="36-36"];
m11_26 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithZeroRange()", color=green, community=0, file="SpecificationGuards.cs", label="0: return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && (spec.HavingMin(min => min == 0)\r\n                || spec.HavingMax(max => max == 0));", span="38-40"];
m11_27 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithZeroRange()", file="SpecificationGuards.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithZeroRange()", span="36-36"];
m11_32 [cluster="CommandLine.Core.Specification.HavingMax(System.Func<int, bool>)", file="SpecificationGuards.cs", label="Entry CommandLine.Core.Specification.HavingMax(System.Func<int, bool>)", span="71-71"];
m13_48 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m13_0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m13_1 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-34"];
m13_2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m13_70 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="65-65"];
m13_71 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="67-83"];
m13_72 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="65-65"];
m13_68 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m13_44 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m13_63 [cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m13_10 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m13_14 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m13_58 [cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs", label="Entry Unk.IsNothing", span=""];
m13_69 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m13_83 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m13_64 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m13_87 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m13_65 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="58-59"];
m13_74 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="69-76"];
m13_73 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="67-83"];
m13_75 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="77-77"];
m13_79 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="70-75"];
m13_76 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="79-80"];
m13_80 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="70-75"];
m13_81 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="70-75"];
m13_78 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="67-83"];
m13_77 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="82-82"];
m13_4 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="22-25"];
m13_36 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="List<string> setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", span="41-45"];
m13_37 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", span="47-56"];
m13_84 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="79-80"];
m13_46 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", span="43-44"];
m13_38 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="requiredButEmpty.Any()", span="57-57"];
m13_3 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="20-34"];
m13_5 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="26-26"];
m13_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="23-23"];
m13_19 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="24-25"];
m13_7 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s => Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="29-31"];
m13_35 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="39-62"];
m13_45 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="43-44"];
m13_49 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="45-45"];
m13_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="50-52"];
m13_52 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="49-49"];
m13_55 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="50-52"];
m13_60 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="54-56"];
m13_39 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="58-59"];
m13_86 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="79-80"];
m13_85 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="79-80"];
m13_47 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="43-44"];
m13_8 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="33-33"];
m13_40 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="61-61"];
m13_9 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="20-34"];
m13_6 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="27-27"];
m13_23 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-26"];
m13_17 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="23-23"];
m13_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption()", span="23-23"];
m13_21 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="24-25"];
m13_20 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="24-25"];
m13_26 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="29-31"];
m13_41 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="39-62"];
m13_51 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="45-45"];
m13_50 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)s.Specification).SetName", span="45-45"];
m13_57 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="50-52"];
m13_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="49-49"];
m13_53 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption()", span="49-49"];
m13_62 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="54-56"];
m13_61 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="54-56"];
m13_25 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-26"];
m13_24 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)g.Specification).SetName", span="26-26"];
m13_28 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="29-31"];
m13_27 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="29-31"];
m13_66 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="58-59"];
m13_67 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="58-59"];
m13_43 [cluster="Unk.Concat", file="SpecificationPropertyRules.cs", label="Entry Unk.Concat", span=""];
m13_32 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="37-37"];
m13_33 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="39-62"];
m13_34 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="37-37"];
m13_31 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m13_13 [cluster="Unk.Select", file="SpecificationPropertyRules.cs", label="Entry Unk.Select", span=""];
m13_22 [cluster="Unk.IsJust", file="SpecificationPropertyRules.cs", label="Entry Unk.IsJust", span=""];
m13_42 [cluster="Unk.ToList", file="SpecificationPropertyRules.cs", label="Entry Unk.ToList", span=""];
m13_29 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m13_18 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m13_30 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m13_11 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m13_12 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m13_82 [cluster="Unk.ToDescriptorKind", file="SpecificationPropertyRules.cs", label="Entry Unk.ToDescriptorKind", span=""];
m13_59 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m13_88 [file="SpecificationPropertyRules.cs", label=setsWithTrue, span=""];
m14_4 [cluster="CommandLine.Parser.FormatCommandLine<T>(T)", file="Switch.cs", label="Entry CommandLine.Parser.FormatCommandLine<T>(T)", span="57-57"];
m14_20 [cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", file="Switch.cs", label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="71-71"];
m14_3 [cluster="CommandLine.Parser.Parser()", file="Switch.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m14_12 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="Switch.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", span="45-45"];
m14_13 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="Switch.cs", label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="47-49"];
m14_14 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="Switch.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", span="45-45"];
m14_15 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", file="Switch.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", span="53-53"];
m14_16 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", file="Switch.cs", label="var options = new FakeOptionsWithSwitches { InputFile = ''input.bin'', HumanReadable = true, IgnoreWarnings = true }", span="55-55"];
m14_17 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", file="Switch.cs", label="new Parser()\r\n                .FormatCommandLine(options, config => config.GroupSwitches = true)\r\n                .ShouldBeEquivalentTo(''-hi --input input.bin'')", span="56-58"];
m14_18 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", file="Switch.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", span="53-53"];
m14_9 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="Switch.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", span="36-36"];
m14_10 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="Switch.cs", label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="38-40"];
m14_11 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="Switch.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", span="36-36"];
m14_21 [cluster="lambda expression", file="Switch.cs", label="Entry lambda expression", span="57-57"];
m14_22 [cluster="lambda expression", file="Switch.cs", label="config.GroupSwitches = true", span="57-57"];
m14_23 [cluster="lambda expression", file="Switch.cs", label="Exit lambda expression", span="57-57"];
m14_19 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", file="Switch.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", span="4-4"];
m14_6 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="Switch.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="27-27"];
m14_7 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="Switch.cs", label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="29-31"];
m14_8 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="Switch.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="27-27"];
m14_0 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="Switch.cs", label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="18-18"];
m14_1 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="Switch.cs", label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", span="20-22"];
m14_2 [cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="Switch.cs", label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="18-18"];
m14_5 [cluster="Unk.ShouldBeEquivalentTo", file="Switch.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m15_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="SwitchTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36"];
m15_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="SwitchTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m15_35 [cluster="Unk.Take", file="SwitchTests.cs", label="Entry Unk.Take", span=""];
m15_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="SwitchTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m15_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="SwitchTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m15_36 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="35-35"];
m15_5 [cluster="lambda expression", color=red, community=0, file="SwitchTests.cs", label="0: f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="17-22"];
m15_12 [cluster="lambda expression", color=red, community=0, file="SwitchTests.cs", label="0: info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }", span="19-21"];
m15_4 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="16-22"];
m15_6 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="16-22"];
m15_11 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="18-21"];
m15_13 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="18-21"];
m15_26 [cluster="lambda expression", file="SwitchTests.cs", label="t.Equals(nameToken)", span="29-29"];
m15_30 [cluster="lambda expression", file="SwitchTests.cs", label="info.MaxItems.Return(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()))", span="33-35"];
m15_33 [cluster="lambda expression", file="SwitchTests.cs", label="tokens.Skip(nameIndex + 1).Take(n)", span="34-34"];
m15_25 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="29-29"];
m15_29 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="33-35"];
m15_39 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="36-36"];
m15_27 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="29-29"];
m15_31 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="33-35"];
m15_32 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="34-34"];
m15_34 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="34-34"];
m15_37 [cluster="lambda expression", file="SwitchTests.cs", label="v.IsValue()", span="35-35"];
m15_38 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="35-35"];
m15_40 [cluster="lambda expression", file="SwitchTests.cs", label="v.IsValue()", span="36-36"];
m15_41 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="36-36"];
m15_10 [cluster="Unk.Return", file="SwitchTests.cs", label="Entry Unk.Return", span=""];
m15_28 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="SwitchTests.cs", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55"];
m15_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="SwitchTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m15_16 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="SwitchTests.cs", label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
m15_17 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="SwitchTests.cs", label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29"];
m15_19 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="SwitchTests.cs", label="return info.NextValue.Return(\r\n                    _ => info.MaxItems.Return(\r\n                            n => tokens.Skip(nameIndex + 1).Take(n),\r\n                                 tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue())),\r\n                    tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()));", span="32-36"];
m15_18 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="SwitchTests.cs", label="nameIndex >= 0", span="30-30"];
m15_20 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="SwitchTests.cs", label="return new Token[] { };", span="38-38"];
m15_21 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="SwitchTests.cs", label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
m15_7 [cluster="CommandLine.Core.Token.IsName()", file="SwitchTests.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m15_8 [cluster="CommandLine.Core.Token.IsValue()", file="SwitchTests.cs", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
m15_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="SwitchTests.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m15_14 [cluster="Unk.OfSequence", file="SwitchTests.cs", label="Entry Unk.OfSequence", span=""];
m15_0 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", file="SwitchTests.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m15_1 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", color=red, community=0, file="SwitchTests.cs", label="0: return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-24"];
m15_2 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", file="SwitchTests.cs", label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m15_42 [file="SwitchTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m15_43 [file="SwitchTests.cs", label="System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m15_44 [file="SwitchTests.cs", label="CommandLine.Core.Token", span=""];
m15_45 [file="SwitchTests.cs", label="CommandLine.Core.Token", span=""];
m15_46 [file="SwitchTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m15_47 [file="SwitchTests.cs", label="CommandLine.Core.TypeDescriptor", span=""];
m15_48 [file="SwitchTests.cs", label=nameIndex, span=""];
m16_31 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", span="49-49"];
m16_33 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="TokenizerTests.cs", label="Parser.Default.ParseArguments<FakeOptions>(new[] { ''-i'', ''aaa'' })\r\n                .WithParsed(opts => expected = opts.StringValue)\r\n                .WithNotParsed(_ => expected = ''changed'')", span="52-54"];
m16_34 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="TokenizerTests.cs", label="''changed''.ShouldBeEquivalentTo(expected)", span="56-56"];
m16_32 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="TokenizerTests.cs", label="var expected = ''a default''", span="51-51"];
m16_35 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_not_parsed()", span="49-49"];
m16_11 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", span="28-28"];
m16_13 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="TokenizerTests.cs", label="Parser.Default.ParseArguments<FakeOptions>(new[] { ''-i'', ''aaa'' })\r\n                .WithNotParsed(_ => expected = ''changed'')", span="31-32"];
m16_14 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="TokenizerTests.cs", label="''changed''.ShouldBeEquivalentTo(expected)", span="34-34"];
m16_12 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="TokenizerTests.cs", label="var expected = ''a default''", span="30-30"];
m16_15 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_not_parsed_lambda_when_not_parsed()", span="28-28"];
m16_5 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="84-84"];
m16_0 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", span="18-18"];
m16_1 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", color=green, community=0, file="TokenizerTests.cs", label="0: var expected = string.Empty", span="20-20"];
m16_2 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", file="TokenizerTests.cs", label="Parser.Default.ParseArguments<FakeOptions>(new[] { ''--stringvalue'', ''value'' })\r\n                .WithParsed(opts => expected = opts.StringValue)", span="21-22"];
m16_3 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", file="TokenizerTests.cs", label="''value''.ShouldBeEquivalentTo(expected)", span="24-24"];
m16_4 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_parsed_lambda_when_parsed()", span="18-18"];
m16_6 [cluster="CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", file="TokenizerTests.cs", label="Entry CommandLine.ParserResult<T>.WithParsed<T>(System.Action<T>)", span="20-20"];
m16_20 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", span="38-38"];
m16_22 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="TokenizerTests.cs", label="Parser.Default.ParseArguments<FakeOptions>(new[] { ''--stringvalue'', ''value'' })\r\n                .WithParsed(opts => expected = opts.StringValue)\r\n                .WithNotParsed(_ => expected = ''changed'')", span="41-43"];
m16_23 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="TokenizerTests.cs", label="''value''.ShouldBeEquivalentTo(expected)", span="45-45"];
m16_21 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="TokenizerTests.cs", label="var expected = string.Empty", span="40-40"];
m16_24 [cluster="CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.ParserResultExtensionsTests.Invoker_proper_lambda_when_parsed()", span="38-38"];
m16_39 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="54-54"];
m16_8 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="22-22"];
m16_10 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="22-22"];
m16_9 [cluster="lambda expression", file="TokenizerTests.cs", label="expected = opts.StringValue", span="22-22"];
m16_17 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="32-32"];
m16_25 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="42-42"];
m16_28 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="43-43"];
m16_36 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="53-53"];
m16_19 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="32-32"];
m16_18 [cluster="lambda expression", file="TokenizerTests.cs", label="expected = ''changed''", span="32-32"];
m16_27 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="42-42"];
m16_26 [cluster="lambda expression", file="TokenizerTests.cs", label="expected = opts.StringValue", span="42-42"];
m16_30 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="43-43"];
m16_29 [cluster="lambda expression", file="TokenizerTests.cs", label="expected = ''changed''", span="43-43"];
m16_38 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="53-53"];
m16_37 [cluster="lambda expression", file="TokenizerTests.cs", label="expected = opts.StringValue", span="53-53"];
m16_40 [cluster="lambda expression", file="TokenizerTests.cs", label="expected = ''changed''", span="54-54"];
m16_41 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="54-54"];
m16_16 [cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="TokenizerTests.cs", label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="38-38"];
m16_7 [cluster="Unk.ShouldBeEquivalentTo", file="TokenizerTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m17_0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m17_2 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=green, community=0, file="TokenPartitionerTests.cs", label="0: var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, typeof(string), TargetType.Scalar, string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, typeof(IEnumerable<int>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())\r\n                }", span="21-25"];
m17_1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20"];
m17_3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31"];
m17_4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34"];
m17_5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m17_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m17_10 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m17_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m17_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m17_13 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m17_15 [cluster="Unk.True", file="TokenPartitionerTests.cs", label="Entry Unk.True", span=""];
m17_19 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
m17_41 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m17_17 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="30-30"];
m17_36 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="56-56"];
m17_16 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="30-30"];
m17_21 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34"];
m17_18 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="30-30"];
m17_35 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="56-56"];
m17_39 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="60-60"];
m17_37 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="56-56"];
m17_20 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m17_22 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m17_24 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m17_25 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34"];
m17_38 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m17_40 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m17_42 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="60-60"];
m17_26 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m17_43 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m17_14 [cluster="Unk.All", file="TokenPartitionerTests.cs", label="Entry Unk.All", span=""];
m17_27 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m17_11 [cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m17_28 [cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m17_23 [cluster="Unk.Any", file="TokenPartitionerTests.cs", label="Entry Unk.Any", span=""];
m17_12 [cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m17_29 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m17_31 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=green, community=0, file="TokenPartitionerTests.cs", label="0: var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, typeof(string), TargetType.Scalar, string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, typeof(IEnumerable<int>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())\r\n                }", span="47-51"];
m17_30 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="43-46"];
m17_32 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="54-57"];
m17_33 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="60-60"];
m17_34 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m17_9 [cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m17_44 [file="TokenPartitionerTests.cs", label=specs, span=""];
m17_47 [file="TokenPartitionerTests.cs", label=specs, span=""];
m17_45 [file="TokenPartitionerTests.cs", label=result, span=""];
m17_48 [file="TokenPartitionerTests.cs", label=result, span=""];
m17_46 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m17_49 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m18_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m18_4 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="29-29"];
m18_7 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="return new TypeDescriptor(tag, maximumItems);", span="33-33"];
m18_5 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="maximumItems == null", span="31-31"];
m18_6 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="throw new ArgumentNullException(''maximumItems'');", span="31-31"];
m18_8 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="29-29"];
m18_0 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="13-13"];
m18_2 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", color=green, community=0, file="TypeDescriptor.cs", label="2: this.maxItems = maxItems", span="16-16"];
m18_1 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="this.tag = tag", span="15-15"];
m18_3 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="13-13"];
m18_10 [file="TypeDescriptor.cs", label="CommandLine.Core.TypeDescriptor", span=""];
m19_10 [cluster="string.MatchName(string, string, System.StringComparer)", file="TypeLookup.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m19_12 [cluster="lambda expression", color=green, community=0, file="TypeLookup.cs", label="1: TypeDescriptor.Create(s.TargetType, s.Max)", span="20-20"];
m19_4 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13"];
m19_14 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28"];
m19_15 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="TypeLookup.cs", label=string, span=""];
m19_16 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="TypeLookup.cs", label="System.StringComparer", span=""];
m19_17 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="TypeLookup.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="43-43"];
m19_18 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28"];
m19_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="TypeLookup.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m19_13 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="20-20"];
m19_5 [cluster="Unk.Partition", file="TypeLookup.cs", label="Entry Unk.Partition", span=""];
m19_11 [cluster="Unk.>", file="TypeLookup.cs", label="Entry Unk.>", span=""];
m19_7 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="19-22"];
m19_8 [cluster="lambda expression", color=red, community=0, file="TypeLookup.cs", label="1: name.MatchName(a.ShortName, a.LongName, comparer)", span="17-17"];
m19_9 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="19-22"];
m19_21 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="38-41"];
m19_22 [cluster="lambda expression", file="TypeLookup.cs", label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Switch, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41"];
m19_23 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="38-41"];
m19_0 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13"];
m19_1 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", color=green, community=0, file="TypeLookup.cs", label="0: var expected = new Token[] { }", span="15-15"];
m19_2 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", color=red, community=0, file="TypeLookup.cs", label="0: var result = Switch.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Switch, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22"];
m19_3 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="TypeLookup.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
m19_19 [cluster="CommandLine.Core.Token.Name(string)", file="TypeLookup.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m19_20 [cluster="CommandLine.Core.Token.Value(string)", file="TypeLookup.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m20_0 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="10-10"];
m20_1 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="ValueSpecification.cs", label="this.index = index", span="13-13"];
m20_2 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="10-10"];
m20_6 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ValueSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m20_7 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ValueSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m20_8 [cluster="T.ToMaybe<T>()", file="ValueSpecification.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m20_3 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="16-16"];
m20_4 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", color=red, community=0, file="ValueSpecification.cs", label="0: return new ValueSpecification(\r\n                attribute.Index,\r\n                attribute.Required,\r\n                attribute.Min == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Min),\r\n                attribute.Max == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Max),\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType);", span="18-24"];
m20_5 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="16-16"];
m20_9 [file="ValueSpecification.cs", label="CommandLine.Core.ValueSpecification", span=""];
m0_54 -> m0_18  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo parsingCulture", style=bold];
m0_3 -> m0_19  [key=0, style=solid];
m0_3 -> m0_22  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_3 -> m0_24  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
m0_3 -> m0_26  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_67  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_27  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_71  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_28  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_75  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_29  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_78  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_31 -> m0_31  [color=green, key=1, label=instance, style=dashed];
m0_31 -> m0_32  [color=green, key=0, style=solid];
m0_31 -> m0_54  [color=green, key=2, style=dotted];
m0_31 -> m0_55  [color=green, key=2, style=dotted];
m0_31 -> m0_81  [color=green, key=1, label="lambda expression", style=dashed];
m0_31 -> m0_85  [color=green, key=1, label="lambda expression", style=dashed];
m0_31 -> m0_89  [color=green, key=1, label="lambda expression", style=dashed];
m0_31 -> m0_93  [color=green, key=1, label="lambda expression", style=dashed];
m0_31 -> m0_96  [color=green, key=1, label="lambda expression", style=dashed];
m0_31 -> m0_101  [color=green, key=1, label="lambda expression", style=dashed];
m0_31 -> m0_33  [color=green, key=1, label=instance, style=dashed];
m0_19 -> m0_31  [color=green, key=1, label=instance, style=dashed];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_35  [key=2, style=dotted];
m0_19 -> m0_23  [color=darkseagreen4, key=1, label=instance, style=dashed];
m0_30 -> m0_31  [color=green, key=0, style=solid];
m0_30 -> m0_53  [key=2, style=dotted];
m0_30 -> m0_32  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_56  [key=2, style=dotted];
m0_32 -> m0_39  [key=2, style=dotted];
m0_32 -> m0_57  [key=2, style=dotted];
m0_32 -> m0_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_58  [key=2, style=dotted];
m0_33 -> m0_59  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_36  [key=2, style=dotted];
m0_20 -> m0_37  [key=2, style=dotted];
m0_20 -> m0_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_27  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m0_20 -> m0_28  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m0_23 -> m0_34  [key=0, style=solid];
m0_23 -> m0_43  [key=2, style=dotted];
m0_23 -> m0_44  [key=2, style=dotted];
m0_27 -> m0_30  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
m0_27 -> m0_33  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
m0_27 -> m0_27  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_47  [key=2, style=dotted];
m0_27 -> m0_48  [key=2, style=dotted];
m0_27 -> m0_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_28 -> m0_30  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
m0_28 -> m0_33  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
m0_28 -> m0_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_49  [key=2, style=dotted];
m0_28 -> m0_48  [key=2, style=dotted];
m0_28 -> m0_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_33  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
m0_29 -> m0_29  [color=darkseagreen4, key=1, label=token, style=dashed];
m0_29 -> m0_50  [key=2, style=dotted];
m0_29 -> m0_51  [key=2, style=dotted];
m0_29 -> m0_52  [key=2, style=dotted];
m0_29 -> m0_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_29 -> m0_78  [color=darkseagreen4, key=1, label=token, style=dashed];
m0_24 -> m0_33  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_45  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_24  [key=0, style=solid];
m0_22 -> m0_40  [key=2, style=dotted];
m0_22 -> m0_41  [key=2, style=dotted];
m0_22 -> m0_42  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_28  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m0_26 -> m0_29  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m0_26 -> m0_46  [key=2, style=dotted];
m0_26 -> m0_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_21 -> m0_29  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_21 -> m0_39  [key=2, style=dotted];
m0_21 -> m0_24  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_26  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_21 -> m0_67  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_21 -> m0_21  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_21 -> m0_38  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_34 -> m0_3  [color=blue, key=0, style=bold];
m0_11 -> m0_12  [key=0, style=solid];
m0_81 -> m0_82  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid];
m0_89 -> m0_90  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_96 -> m0_97  [color=green, key=0, style=solid];
m0_101 -> m0_102  [key=0, style=solid];
m0_97 -> m0_98  [color=green, key=0, style=solid];
m0_97 -> m0_92  [color=green, key=2, style=dotted];
m0_97 -> m0_99  [color=green, key=2, style=dotted];
m0_97 -> m0_100  [color=green, key=2, style=dotted];
m0_98 -> m0_96  [color=blue, key=0, style=bold];
m0_107 -> m0_108  [key=0, style=solid];
m0_83 -> m0_81  [color=blue, key=0, style=bold];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_84  [key=2, style=dotted];
m0_87 -> m0_85  [color=blue, key=0, style=bold];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_88  [key=2, style=dotted];
m0_91 -> m0_89  [color=blue, key=0, style=bold];
m0_90 -> m0_92  [key=2, style=dotted];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_84  [key=2, style=dotted];
m0_95 -> m0_93  [color=blue, key=0, style=bold];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_88  [key=2, style=dotted];
m0_103 -> m0_101  [color=blue, key=0, style=bold];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_104  [key=2, style=dotted];
m0_102 -> m0_105  [key=2, style=dotted];
m0_102 -> m0_106  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_69  [key=2, style=dotted];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_73  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_73  [key=2, style=dotted];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_80  [key=2, style=dotted];
m0_60 -> m0_61  [key=0, style=solid];
m0_70 -> m0_71  [key=0, style=solid];
m0_74 -> m0_75  [key=0, style=solid];
m0_77 -> m0_78  [key=0, style=solid];
m0_109 -> m0_107  [color=blue, key=0, style=bold];
m0_108 -> m0_109  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_10  [key=2, style=dotted];
m0_6 -> m0_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_66 -> m0_67  [key=0, style=solid];
m0_68 -> m0_66  [color=blue, key=0, style=bold];
m0_72 -> m0_70  [color=blue, key=0, style=bold];
m0_76 -> m0_74  [color=blue, key=0, style=bold];
m0_79 -> m0_77  [color=blue, key=0, style=bold];
m0_62 -> m0_60  [color=blue, key=0, style=bold];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=2, style=dotted];
m0_61 -> m0_64  [key=2, style=dotted];
m0_61 -> m0_65  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_17 -> m0_15  [color=blue, key=0, style=bold];
m0_13 -> m0_11  [color=blue, key=0, style=bold];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_4  [color=blue, key=0, style=bold];
m0_0 -> m0_3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_1  [color=darkorchid, key=3, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> ", style=bold];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_112 -> m0_67  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_112 -> m0_78  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_113 -> m0_67  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_114 -> m0_71  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_114 -> m0_75  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_115 -> m0_78  [color=darkseagreen4, key=1, label=token, style=dashed];
m0_110 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_110 -> m0_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_110 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_110 -> m0_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_111 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_111 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_142 -> m1_143  [key=0, style=solid];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_138  [key=2, style=dotted];
m1_144 -> m1_142  [color=blue, key=0, style=bold];
m1_17 -> m1_15  [color=blue, key=0, style=bold];
m1_44 -> m1_20  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_44 -> m1_16  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_44 -> m1_29  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_91 -> m1_92  [key=0, style=solid];
m1_91 -> m1_96  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_91 -> m1_97  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_91 -> m1_93  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_92  [color=darkorchid, key=3, label="Local variable System.Func<bool> isMutable", style=bold];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_90  [key=2, style=dotted];
m1_94 -> m1_91  [color=blue, key=0, style=bold];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_33  [key=0, style=solid];
m1_145 -> m1_146  [key=0, style=solid];
m1_146 -> m1_147  [key=0, style=solid];
m1_146 -> m1_148  [key=2, style=dotted];
m1_146 -> m1_149  [key=2, style=dotted];
m1_147 -> m1_145  [color=blue, key=0, style=bold];
m1_23 -> m1_24  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_82 -> m1_83  [key=0, style=solid];
m1_83 -> m1_84  [key=0, style=solid];
m1_83 -> m1_86  [key=2, style=dotted];
m1_83 -> m1_87  [key=2, style=dotted];
m1_83 -> m1_88  [key=2, style=dotted];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_89  [key=2, style=dotted];
m1_84 -> m1_90  [key=2, style=dotted];
m1_85 -> m1_82  [color=blue, key=0, style=bold];
m1_7 -> m1_8  [color=green, key=0, style=solid];
m1_7 -> m1_20  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_7 -> m1_16  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_7 -> m1_29  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_8 -> m1_9  [color=green, key=0, style=solid];
m1_8 -> m1_17  [color=green, key=2, style=dotted];
m1_8 -> m1_18  [color=green, key=2, style=dotted];
m1_8 -> m1_12  [color=green, key=2, style=dotted];
m1_8 -> m1_13  [color=green, key=2, style=dotted];
m1_8 -> m1_14  [color=green, key=2, style=dotted];
m1_8 -> m1_15  [color=green, key=1, label="lambda expression", style=dashed];
m1_8 -> m1_19  [color=green, key=1, label="lambda expression", style=dashed];
m1_131 -> m1_132  [key=0, style=solid];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_134  [key=2, style=dotted];
m1_133 -> m1_131  [color=blue, key=0, style=bold];
m1_43 -> m1_8  [color=green, key=1, label="System.StringComparer", style=dashed];
m1_43 -> m1_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_61  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m1_59 -> m1_70  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_59 -> m1_59  [color=darkorchid, key=3, label="method methodReturn T SetValue", style=bold];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_75  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m1_60 -> m1_63  [color=darkseagreen4, key=1, label=fail, style=dashed];
m1_60 -> m1_65  [color=darkseagreen4, key=1, label=fail, style=dashed];
m1_60 -> m1_67  [color=darkseagreen4, key=1, label=fail, style=dashed];
m1_60 -> m1_69  [color=darkseagreen4, key=1, label=fail, style=dashed];
m1_60 -> m1_60  [color=darkorchid, key=3, label="Local variable System.Action<System.Exception> fail", style=bold];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_64  [key=0, style=solid];
m1_61 -> m1_66  [key=0, style=solid];
m1_61 -> m1_68  [key=0, style=solid];
m1_61 -> m1_70  [key=0, style=solid];
m1_61 -> m1_72  [key=2, style=dotted];
m1_70 -> m1_71  [key=0, style=solid];
m1_63 -> m1_70  [key=0, style=solid];
m1_63 -> m1_73  [key=2, style=dotted];
m1_65 -> m1_70  [key=0, style=solid];
m1_65 -> m1_73  [key=2, style=dotted];
m1_67 -> m1_70  [key=0, style=solid];
m1_67 -> m1_73  [key=2, style=dotted];
m1_69 -> m1_70  [key=0, style=solid];
m1_69 -> m1_73  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid];
m1_64 -> m1_65  [key=0, style=solid];
m1_66 -> m1_67  [key=0, style=solid];
m1_68 -> m1_69  [key=0, style=solid];
m1_71 -> m1_59  [color=blue, key=0, style=bold];
m1_45 -> m1_46  [key=0, style=solid];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_48  [key=2, style=dotted];
m1_47 -> m1_45  [color=blue, key=0, style=bold];
m1_39 -> m1_40  [key=0, style=solid];
m1_14 -> m1_15  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_3  [key=2, style=dotted];
m1_15 -> m1_4  [key=2, style=dotted];
m1_15 -> m1_17  [key=2, style=dotted];
m1_15 -> m1_18  [key=2, style=dotted];
m1_15 -> m1_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_15 -> m1_15  [color=darkseagreen4, key=1, label=attr, style=dashed];
m1_16 -> m1_14  [color=blue, key=0, style=bold];
m1_16 -> m1_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=2, style=dotted];
m1_9 -> m1_7  [color=blue, key=0, style=bold];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_30  [color=blue, key=0, style=bold];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_13  [key=2, style=dotted];
m1_12 -> m1_10  [color=blue, key=0, style=bold];
m1_19 -> m1_20  [color=green, key=0, style=solid];
m1_20 -> m1_21  [color=green, key=0, style=solid];
m1_20 -> m1_22  [color=green, key=2, style=dotted];
m1_20 -> m1_23  [color=green, key=2, style=dotted];
m1_20 -> m1_24  [color=green, key=2, style=dotted];
m1_20 -> m1_25  [color=green, key=2, style=dotted];
m1_20 -> m1_26  [color=green, key=2, style=dotted];
m1_20 -> m1_13  [color=green, key=2, style=dotted];
m1_20 -> m1_27  [color=green, key=2, style=dotted];
m1_20 -> m1_28  [color=green, key=1, label="lambda expression", style=dashed];
m1_21 -> m1_19  [color=blue, key=0, style=bold];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_13  [key=2, style=dotted];
m1_29 -> m1_27  [color=blue, key=0, style=bold];
m1_29 -> m1_12  [key=2, style=dotted];
m1_29 -> m1_13  [key=2, style=dotted];
m1_29 -> m1_26  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_31  [key=2, style=dotted];
m1_55 -> m1_56  [key=0, style=solid];
m1_55 -> m1_9  [key=2, style=dotted];
m1_55 -> m1_58  [key=2, style=dotted];
m1_56 -> m1_57  [key=0, style=solid];
m1_54 -> m1_55  [key=0, style=solid];
m1_57 -> m1_54  [color=blue, key=0, style=bold];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_77  [key=2, style=dotted];
m1_74 -> m1_75  [key=0, style=solid];
m1_76 -> m1_74  [color=blue, key=0, style=bold];
m1_96 -> m1_97  [key=0, style=solid];
m1_96 -> m1_100  [key=2, style=dotted];
m1_96 -> m1_7  [key=2, style=dotted];
m1_96 -> m1_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_96 -> m1_98  [color=darkseagreen4, key=1, label=props, style=dashed];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_101  [key=2, style=dotted];
m1_97 -> m1_102  [key=2, style=dotted];
m1_95 -> m1_96  [key=0, style=solid];
m1_103 -> m1_104  [key=0, style=solid];
m1_98 -> m1_99  [key=0, style=solid];
m1_99 -> m1_95  [color=blue, key=0, style=bold];
m1_104 -> m1_105  [key=0, style=solid];
m1_105 -> m1_103  [color=blue, key=0, style=bold];
m1_128 -> m1_129  [key=0, style=solid];
m1_129 -> m1_130  [key=0, style=solid];
m1_130 -> m1_128  [color=blue, key=0, style=bold];
m1_32 -> m1_33  [key=0, style=solid];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_34  [key=0, style=solid];
m1_30 -> m1_28  [color=blue, key=0, style=bold];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_32  [color=crimson, key=0, style=bold];
m1_30 -> m1_33  [color=crimson, key=0, style=bold];
m1_30 -> m1_35  [color=crimson, key=0, style=bold];
m1_30 -> m1_37  [color=crimson, key=0, style=bold];
m1_30 -> m1_34  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_30 -> m1_36  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_34 -> m1_32  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_36  [key=0, style=solid];
m1_34 -> m1_39  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_37 -> m1_35  [color=blue, key=0, style=bold];
m1_37 -> m1_36  [key=0, style=solid];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_38  [key=0, style=solid];
m1_36 -> m1_30  [key=2, style=dotted];
m1_40 -> m1_38  [color=blue, key=0, style=bold];
m1_40 -> m1_41  [key=0, style=solid];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_109  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_106 -> m1_110  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_106 -> m1_111  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_106 -> m1_78  [color=darkorchid, key=3, label="method methodReturn object CreateDefaultForImmutable", style=bold];
m1_106 -> m1_82  [color=darkorchid, key=3, label="method methodReturn object CreateDefaultForImmutable", style=bold];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_109  [key=0, style=solid];
m1_109 -> m1_110  [key=0, style=solid];
m1_109 -> m1_111  [key=0, style=solid];
m1_109 -> m1_113  [key=2, style=dotted];
m1_110 -> m1_112  [key=0, style=solid];
m1_110 -> m1_114  [key=2, style=dotted];
m1_110 -> m1_115  [key=2, style=dotted];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_116  [key=2, style=dotted];
m1_108 -> m1_112  [key=0, style=solid];
m1_112 -> m1_106  [color=blue, key=0, style=bold];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_3  [key=2, style=dotted];
m1_24 -> m1_4  [key=2, style=dotted];
m1_24 -> m1_5  [key=2, style=dotted];
m1_24 -> m1_6  [key=2, style=dotted];
m1_24 -> m1_7  [key=2, style=dotted];
m1_24 -> m1_8  [key=2, style=dotted];
m1_24 -> m1_26  [key=2, style=dotted];
m1_24 -> m1_17  [key=2, style=dotted];
m1_24 -> m1_18  [key=2, style=dotted];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_24 -> m1_24  [color=darkseagreen4, key=1, label=pi, style=dashed];
m1_25 -> m1_23  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_0 -> m1_120  [color=darkorchid, key=3, label="Parameter variable System.Func<System.Reflection.PropertyInfo, T> selector", style=bold];
m1_0 -> m1_8  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m1_0 -> m1_20  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", style=dashed];
m1_0 -> m1_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [color=green, key=2, style=dotted];
m1_1 -> m1_5  [key=2, style=dotted];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_7  [key=2, style=dotted];
m1_1 -> m1_8  [key=2, style=dotted];
m1_1 -> m1_9  [key=2, style=dotted];
m1_1 -> m1_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_1 -> m1_1  [color=darkseagreen4, key=1, label=pi, style=dashed];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_4  [key=2, style=dotted];
m1_2 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_117 -> m1_118  [key=0, style=solid];
m1_117 -> m1_119  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_117 -> m1_120  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_117 -> m1_121  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_118 -> m1_119  [key=0, style=solid];
m1_118 -> m1_120  [key=0, style=solid];
m1_118 -> m1_123  [key=2, style=dotted];
m1_119 -> m1_122  [key=0, style=solid];
m1_119 -> m1_124  [key=2, style=dotted];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_125  [key=2, style=dotted];
m1_120 -> m1_126  [key=2, style=dotted];
m1_120 -> m1_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_127  [key=2, style=dotted];
m1_122 -> m1_117  [color=blue, key=0, style=bold];
m1_139 -> m1_140  [key=0, style=solid];
m1_140 -> m1_141  [key=0, style=solid];
m1_140 -> m1_138  [key=2, style=dotted];
m1_141 -> m1_139  [color=blue, key=0, style=bold];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [key=2, style=dotted];
m1_41 -> m1_44  [key=2, style=dotted];
m1_41 -> m1_8  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m1_42 -> m1_40  [color=blue, key=0, style=bold];
m1_42 -> m1_8  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", style=dashed];
m1_42 -> m1_20  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", style=dashed];
m1_3 -> m1_0  [color=blue, key=0, style=bold];
m1_78 -> m1_79  [key=0, style=solid];
m1_79 -> m1_80  [key=0, style=solid];
m1_79 -> m1_81  [key=2, style=dotted];
m1_80 -> m1_78  [color=blue, key=0, style=bold];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_55  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m1_49 -> m1_56  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_52  [key=2, style=dotted];
m1_50 -> m1_53  [key=2, style=dotted];
m1_50 -> m1_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_51 -> m1_49  [color=blue, key=0, style=bold];
m1_135 -> m1_136  [key=0, style=solid];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_138  [key=2, style=dotted];
m1_137 -> m1_135  [color=blue, key=0, style=bold];
m1_150 -> m1_55  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m1_151 -> m1_56  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_152 -> m1_96  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_152 -> m1_97  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_0 -> m2_1  [key=0, style=solid];
m2_2 -> m2_3  [color=green, key=0, style=solid];
m2_2 -> m2_7  [color=green, key=2, style=dotted];
m2_2 -> m2_8  [color=green, key=2, style=dotted];
m2_2 -> m2_9  [color=green, key=2, style=dotted];
m2_2 -> m2_10  [color=green, key=2, style=dotted];
m2_2 -> m2_11  [color=green, key=2, style=dotted];
m2_2 -> m2_12  [color=green, key=2, style=dotted];
m2_2 -> m2_16  [color=green, key=1, label="lambda expression", style=dashed];
m2_1 -> m2_2  [color=green, key=0, style=solid];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_3  [color=darkseagreen4, key=1, label=tokenPartitions, style=dashed];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_13  [key=2, style=dotted];
m2_3 -> m2_14  [key=2, style=dotted];
m2_3 -> m2_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_3 -> m2_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_4 -> m2_11  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_5 -> m2_0  [color=blue, key=0, style=bold];
m2_28 -> m2_29  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_20 -> m2_21  [key=0, style=solid];
m2_24 -> m2_25  [key=0, style=solid];
m2_18 -> m2_16  [color=blue, key=0, style=bold];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_19  [key=2, style=dotted];
m2_22 -> m2_20  [color=blue, key=0, style=bold];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_23  [key=2, style=dotted];
m2_26 -> m2_24  [color=blue, key=0, style=bold];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_27  [key=2, style=dotted];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_23  [key=2, style=dotted];
m2_29 -> m2_31  [key=2, style=dotted];
m2_30 -> m2_28  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label=char, style=dashed];
m3_0 -> m3_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_0 -> m3_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_0 -> m3_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_0 -> m3_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_8 -> m3_0  [color=blue, key=0, style=bold];
m3_9 -> m3_10  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_0  [key=2, style=dotted];
m3_10 -> m3_12  [key=2, style=dotted];
m3_10 -> m3_13  [key=2, style=dotted];
m3_10 -> m3_14  [key=2, style=dotted];
m3_11 -> m3_9  [color=blue, key=0, style=bold];
m3_15 -> m3_1  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m3_15 -> m3_2  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m3_15 -> m3_3  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m3_15 -> m3_4  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m3_15 -> m3_5  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m3_15 -> m3_6  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m3_15 -> m3_7  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m5_0 -> m5_1  [color=red, key=0, style=solid];
m5_0 -> m5_5  [color=red, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m5_1 -> m5_2  [color=red, key=0, style=solid];
m5_1 -> m5_3  [color=red, key=2, style=dotted];
m5_1 -> m5_4  [color=red, key=1, label="lambda expression", style=dashed];
m5_1 -> m5_1  [color=red, key=1, label=tseq, style=dashed];
m5_2 -> m5_0  [color=blue, key=0, style=bold];
m5_11 -> m5_12  [color=red, key=0, style=solid];
m5_5 -> m5_6  [color=red, key=0, style=solid];
m5_5 -> m5_7  [color=red, key=2, style=dotted];
m5_5 -> m5_8  [color=red, key=2, style=dotted];
m5_5 -> m5_9  [color=red, key=2, style=dotted];
m5_5 -> m5_10  [color=red, key=2, style=dotted];
m5_5 -> m5_11  [color=red, key=1, label="lambda expression", style=dashed];
m5_4 -> m5_5  [color=red, key=0, style=solid];
m5_4 -> m5_12  [color=red, key=1, label="CommandLine.Core.Token", style=dashed];
m5_12 -> m5_13  [color=red, key=0, style=solid];
m5_6 -> m5_4  [color=blue, key=0, style=bold];
m5_13 -> m5_11  [color=blue, key=0, style=bold];
m5_14 -> m5_5  [color=red, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m5_15 -> m5_12  [color=red, key=1, label="CommandLine.Core.Token", style=dashed];
m5_16 -> m5_12  [color=red, key=1, label="CommandLine.Core.Token", style=dashed];
m6_14 -> m6_15  [key=0, style=solid];
m6_16 -> m6_17  [color=green, key=0, style=solid];
m6_16 -> m6_19  [color=green, key=2, style=dotted];
m6_16 -> m6_20  [color=green, key=2, style=dotted];
m6_16 -> m6_5  [color=green, key=2, style=dotted];
m6_16 -> m6_21  [color=green, key=1, label="lambda expression", style=dashed];
m6_15 -> m6_16  [color=green, key=0, style=solid];
m6_15 -> m6_19  [key=2, style=dotted];
m6_15 -> m6_20  [key=2, style=dotted];
m6_15 -> m6_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_6  [key=2, style=dotted];
m6_18 -> m6_14  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [key=0, style=solid];
m6_2 -> m6_3  [color=green, key=0, style=solid];
m6_2 -> m6_5  [color=green, key=2, style=dotted];
m6_2 -> m6_7  [color=green, key=1, label="lambda expression", style=dashed];
m6_1 -> m6_2  [color=green, key=0, style=solid];
m6_1 -> m6_3  [color=darkseagreen4, key=1, label=expected, style=dashed];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_6  [key=2, style=dotted];
m6_4 -> m6_0  [color=blue, key=0, style=bold];
m6_21 -> m6_22  [color=green, key=0, style=solid];
m6_7 -> m6_8  [color=green, key=0, style=solid];
m6_8 -> m6_9  [color=green, key=0, style=solid];
m6_8 -> m6_10  [color=green, key=2, style=dotted];
m6_8 -> m6_11  [color=green, key=2, style=dotted];
m6_8 -> m6_12  [color=green, key=2, style=dotted];
m6_8 -> m6_13  [color=green, key=2, style=dotted];
m6_9 -> m6_7  [color=blue, key=0, style=bold];
m6_22 -> m6_23  [color=green, key=0, style=solid];
m6_22 -> m6_10  [color=green, key=2, style=dotted];
m6_22 -> m6_11  [color=green, key=2, style=dotted];
m6_22 -> m6_12  [color=green, key=2, style=dotted];
m6_22 -> m6_13  [color=green, key=2, style=dotted];
m6_23 -> m6_21  [color=blue, key=0, style=bold];
m8_3 -> m8_40  [key=0, style=solid];
m8_40 -> m8_3  [color=blue, key=0, style=bold];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_6  [color=darkseagreen4, key=1, label=bool, style=dashed];
m8_4 -> m8_7  [color=darkseagreen4, key=1, label="CSharpx.Maybe<int>", style=dashed];
m8_4 -> m8_8  [color=darkseagreen4, key=1, label="CSharpx.Maybe<int>", style=dashed];
m8_4 -> m8_9  [color=darkseagreen4, key=1, label="CSharpx.Maybe<object>", style=dashed];
m8_4 -> m8_10  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m8_4 -> m8_11  [color=darkseagreen4, key=1, label="CommandLine.Core.TargetType", style=dashed];
m8_4 -> m8_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_4 -> m8_13  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_4 -> m8_14  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m8_5 -> m8_6  [key=0, style=solid];
m8_6 -> m8_7  [key=0, style=solid];
m8_7 -> m8_8  [key=0, style=solid];
m8_8 -> m8_9  [key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid];
m8_10 -> m8_11  [key=0, style=solid];
m8_11 -> m8_12  [key=0, style=solid];
m8_12 -> m8_13  [key=0, style=solid];
m8_13 -> m8_14  [key=0, style=solid];
m8_14 -> m8_15  [key=0, style=solid];
m8_15 -> m8_4  [color=blue, key=0, style=bold];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_3  [key=2, style=dotted];
m8_2 -> m8_0  [color=blue, key=0, style=bold];
m8_16 -> m8_17  [key=0, style=solid];
m8_16 -> m8_20  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m8_16 -> m8_22  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m8_16 -> m8_26  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_29  [key=2, style=dotted];
m8_17 -> m8_24  [color=darkseagreen4, key=1, label=attrs, style=dashed];
m8_20 -> m8_21  [key=0, style=solid];
m8_20 -> m8_32  [key=2, style=dotted];
m8_20 -> m8_33  [key=2, style=dotted];
m8_20 -> m8_34  [key=2, style=dotted];
m8_20 -> m8_35  [key=2, style=dotted];
m8_20 -> m8_22  [color=darkseagreen4, key=1, label=spec, style=dashed];
m8_20 -> m8_23  [color=darkseagreen4, key=1, label=spec, style=dashed];
m8_22 -> m8_28  [key=0, style=solid];
m8_22 -> m8_36  [key=2, style=dotted];
m8_22 -> m8_37  [key=2, style=dotted];
m8_26 -> m8_28  [key=0, style=solid];
m8_26 -> m8_32  [key=2, style=dotted];
m8_26 -> m8_33  [key=2, style=dotted];
m8_26 -> m8_34  [key=2, style=dotted];
m8_26 -> m8_38  [key=2, style=dotted];
m8_18 -> m8_19  [key=0, style=solid];
m8_18 -> m8_30  [key=2, style=dotted];
m8_18 -> m8_20  [color=darkseagreen4, key=1, label=oa, style=dashed];
m8_24 -> m8_25  [key=0, style=solid];
m8_24 -> m8_30  [key=2, style=dotted];
m8_24 -> m8_26  [color=darkseagreen4, key=1, label=va, style=dashed];
m8_19 -> m8_20  [key=0, style=solid];
m8_19 -> m8_24  [key=0, style=solid];
m8_19 -> m8_31  [key=2, style=dotted];
m8_21 -> m8_22  [key=0, style=solid];
m8_21 -> m8_23  [key=0, style=solid];
m8_23 -> m8_28  [key=0, style=solid];
m8_25 -> m8_26  [key=0, style=solid];
m8_25 -> m8_27  [key=0, style=solid];
m8_25 -> m8_31  [key=2, style=dotted];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> m8_39  [key=2, style=dotted];
m8_28 -> m8_16  [color=blue, key=0, style=bold];
m8_41 -> m8_5  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_41 -> m8_6  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_41 -> m8_7  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_41 -> m8_8  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_41 -> m8_9  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_41 -> m8_10  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_41 -> m8_11  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_41 -> m8_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_41 -> m8_13  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m8_41 -> m8_14  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m9_7 -> m9_8  [key=0, style=solid];
m9_7 -> m9_10  [color=darkseagreen4, key=1, label="System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>", style=dashed];
m9_7 -> m9_11  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m9_7 -> m9_7  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> WithNotParsed", style=bold];
m9_8 -> m9_9  [key=0, style=solid];
m9_8 -> m9_10  [color=darkseagreen4, key=1, label=notParsed, style=dashed];
m9_10 -> m9_11  [key=0, style=solid];
m9_10 -> m9_6  [key=2, style=dotted];
m9_11 -> m9_12  [key=0, style=solid];
m9_9 -> m9_10  [key=0, style=solid];
m9_9 -> m9_11  [key=0, style=solid];
m9_12 -> m9_7  [color=blue, key=0, style=bold];
m9_0 -> m9_1  [key=0, style=solid];
m9_0 -> m9_3  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
m9_0 -> m9_4  [color=red, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m9_0 -> m9_0  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> WithParsed", style=bold];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_3  [color=darkseagreen4, key=1, label=parsed, style=dashed];
m9_3 -> m9_4  [color=red, key=0, style=solid];
m9_3 -> m9_6  [key=2, style=dotted];
m9_4 -> m9_5  [color=red, key=0, style=solid];
m9_2 -> m9_3  [key=0, style=solid];
m9_2 -> m9_4  [color=red, key=0, style=solid];
m9_5 -> m9_0  [color=blue, key=0, style=bold];
m10_10 -> m10_11  [key=0, style=solid];
m10_10 -> m10_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m10_10 -> m10_14  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m10_10 -> m10_10  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Core.Specification> ThrowingValidate", style=bold];
m10_11 -> m10_12  [key=0, style=solid];
m10_11 -> m10_14  [key=0, style=solid];
m10_11 -> m10_19  [color=darkseagreen4, key=1, label=guard, style=dashed];
m10_11 -> m10_13  [color=darkseagreen4, key=1, label=guard, style=dashed];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_11  [key=0, style=solid];
m10_12 -> m10_16  [key=2, style=dotted];
m10_12 -> m10_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_14 -> m10_15  [key=0, style=solid];
m10_13 -> m10_15  [key=0, style=solid];
m10_13 -> m10_17  [key=2, style=dotted];
m10_15 -> m10_10  [color=blue, key=0, style=bold];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_25  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m10_22 -> m10_26  [color=darkseagreen4, key=1, label="System.Func<int, int, bool>", style=dashed];
m10_22 -> m10_27  [color=darkorchid, key=3, label="method methodReturn bool HavingRange", style=bold];
m10_23 -> m10_24  [key=0, style=solid];
m10_25 -> m10_26  [key=0, style=solid];
m10_25 -> m10_27  [key=0, style=solid];
m10_25 -> m10_29  [key=2, style=dotted];
m10_26 -> m10_28  [key=0, style=solid];
m10_26 -> m10_30  [key=2, style=dotted];
m10_24 -> m10_25  [key=0, style=solid];
m10_27 -> m10_28  [key=0, style=solid];
m10_28 -> m10_22  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_2 -> m10_0  [color=blue, key=0, style=bold];
m10_3 -> m10_4  [key=0, style=solid];
m10_4 -> m10_5  [key=0, style=solid];
m10_5 -> m10_3  [color=blue, key=0, style=bold];
m10_18 -> m10_19  [key=0, style=solid];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_21  [key=2, style=dotted];
m10_20 -> m10_18  [color=blue, key=0, style=bold];
m10_37 -> m10_38  [key=0, style=solid];
m10_37 -> m10_39  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m10_37 -> m10_40  [color=darkseagreen4, key=1, label="System.Func<int, bool>", style=dashed];
m10_37 -> m10_27  [color=darkorchid, key=3, label="method methodReturn bool HavingMax", style=bold];
m10_38 -> m10_39  [key=0, style=solid];
m10_39 -> m10_40  [key=0, style=solid];
m10_39 -> m10_41  [key=0, style=solid];
m10_39 -> m10_29  [key=2, style=dotted];
m10_40 -> m10_42  [key=0, style=solid];
m10_40 -> m10_21  [key=2, style=dotted];
m10_41 -> m10_42  [key=0, style=solid];
m10_42 -> m10_37  [color=blue, key=0, style=bold];
m10_31 -> m10_32  [key=0, style=solid];
m10_31 -> m10_33  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m10_31 -> m10_34  [color=darkseagreen4, key=1, label="System.Func<int, bool>", style=dashed];
m10_31 -> m10_27  [color=darkorchid, key=3, label="method methodReturn bool HavingMin", style=bold];
m10_32 -> m10_33  [key=0, style=solid];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_35  [key=0, style=solid];
m10_33 -> m10_29  [key=2, style=dotted];
m10_34 -> m10_36  [key=0, style=solid];
m10_34 -> m10_21  [key=2, style=dotted];
m10_35 -> m10_36  [key=0, style=solid];
m10_36 -> m10_31  [color=blue, key=0, style=bold];
m10_6 -> m10_7  [key=0, style=solid];
m10_7 -> m10_8  [key=0, style=solid];
m10_7 -> m10_9  [key=2, style=dotted];
m10_8 -> m10_6  [color=blue, key=0, style=bold];
m10_43 -> m10_19  [color=darkseagreen4, key=1, label=guard, style=dashed];
m11_8 -> m11_9  [color=green, key=0, style=solid];
m11_9 -> m11_10  [color=green, key=0, style=solid];
m11_9 -> m11_12  [color=green, key=1, label="CommandLine.Core.Specification", style=dashed];
m11_10 -> m11_8  [color=blue, key=0, style=bold];
m11_36 -> m11_37  [key=0, style=solid];
m11_4 -> m11_5  [color=green, key=0, style=solid];
m11_4 -> m11_6  [color=green, key=2, style=dotted];
m11_4 -> m11_7  [color=green, key=2, style=dotted];
m11_3 -> m11_4  [color=green, key=0, style=solid];
m11_5 -> m11_3  [color=blue, key=0, style=bold];
m11_12 -> m11_13  [color=green, key=0, style=solid];
m11_12 -> m11_6  [color=green, key=2, style=dotted];
m11_12 -> m11_14  [color=green, key=2, style=dotted];
m11_12 -> m11_15  [color=green, key=1, label="lambda expression", style=dashed];
m11_11 -> m11_12  [color=green, key=0, style=solid];
m11_13 -> m11_11  [color=blue, key=0, style=bold];
m11_15 -> m11_16  [key=0, style=solid];
m11_16 -> m11_17  [key=0, style=solid];
m11_17 -> m11_15  [color=blue, key=0, style=bold];
m11_22 -> m11_23  [key=0, style=solid];
m11_22 -> m11_24  [key=2, style=dotted];
m11_21 -> m11_22  [key=0, style=solid];
m11_23 -> m11_21  [color=blue, key=0, style=bold];
m11_29 -> m11_30  [color=green, key=0, style=solid];
m11_29 -> m11_6  [color=green, key=2, style=dotted];
m11_29 -> m11_31  [color=green, key=2, style=dotted];
m11_29 -> m11_32  [color=green, key=2, style=dotted];
m11_29 -> m11_33  [color=green, key=1, label="lambda expression", style=dashed];
m11_29 -> m11_36  [color=green, key=1, label="lambda expression", style=dashed];
m11_28 -> m11_29  [color=green, key=0, style=solid];
m11_30 -> m11_28  [color=blue, key=0, style=bold];
m11_33 -> m11_34  [key=0, style=solid];
m11_34 -> m11_35  [key=0, style=solid];
m11_35 -> m11_33  [color=blue, key=0, style=bold];
m11_37 -> m11_38  [key=0, style=solid];
m11_38 -> m11_36  [color=blue, key=0, style=bold];
m11_18 -> m11_19  [key=0, style=solid];
m11_19 -> m11_20  [key=0, style=solid];
m11_19 -> m11_22  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m11_20 -> m11_18  [color=blue, key=0, style=bold];
m11_0 -> m11_1  [color=green, key=0, style=solid];
m11_1 -> m11_2  [color=green, key=0, style=solid];
m11_1 -> m11_4  [color=green, key=1, label="CommandLine.Core.Specification", style=dashed];
m11_2 -> m11_0  [color=blue, key=0, style=bold];
m11_25 -> m11_26  [color=green, key=0, style=solid];
m11_26 -> m11_27  [color=green, key=0, style=solid];
m11_26 -> m11_29  [color=green, key=1, label="CommandLine.Core.Specification", style=dashed];
m11_27 -> m11_25  [color=blue, key=0, style=bold];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m13_1 -> m13_2  [key=0, style=solid];
m13_2 -> m13_0  [color=blue, key=0, style=bold];
m13_70 -> m13_71  [color=green, key=0, style=solid];
m13_71 -> m13_72  [color=green, key=0, style=solid];
m13_71 -> m13_74  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m13_72 -> m13_70  [color=blue, key=0, style=bold];
m13_65 -> m13_66  [key=0, style=solid];
m13_74 -> m13_75  [color=green, key=0, style=solid];
m13_74 -> m13_10  [color=green, key=2, style=dotted];
m13_74 -> m13_79  [color=green, key=1, label="lambda expression", style=dashed];
m13_74 -> m13_76  [color=green, key=1, label=options, style=dashed];
m13_73 -> m13_74  [color=green, key=0, style=solid];
m13_75 -> m13_76  [key=0, style=solid];
m13_75 -> m13_77  [key=0, style=solid];
m13_75 -> m13_44  [key=2, style=dotted];
m13_79 -> m13_80  [color=green, key=0, style=solid];
m13_76 -> m13_78  [key=0, style=solid];
m13_76 -> m13_13  [key=2, style=dotted];
m13_76 -> m13_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_80 -> m13_81  [color=green, key=0, style=solid];
m13_80 -> m13_82  [color=green, key=2, style=dotted];
m13_80 -> m13_48  [color=green, key=2, style=dotted];
m13_80 -> m13_83  [color=green, key=2, style=dotted];
m13_81 -> m13_79  [color=blue, key=0, style=bold];
m13_78 -> m13_73  [color=blue, key=0, style=bold];
m13_77 -> m13_78  [key=0, style=solid];
m13_77 -> m13_14  [key=2, style=dotted];
m13_4 -> m13_10  [key=2, style=dotted];
m13_4 -> m13_5  [key=0, style=solid];
m13_4 -> m13_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_4 -> m13_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_4 -> m13_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m13_36 -> m13_10  [key=2, style=dotted];
m13_36 -> m13_37  [key=0, style=solid];
m13_36 -> m13_13  [key=2, style=dotted];
m13_36 -> m13_42  [key=2, style=dotted];
m13_36 -> m13_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_36 -> m13_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_36 -> m13_56  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m13_37 -> m13_10  [key=2, style=dotted];
m13_37 -> m13_38  [key=0, style=solid];
m13_37 -> m13_43  [key=2, style=dotted];
m13_37 -> m13_42  [key=2, style=dotted];
m13_37 -> m13_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_37 -> m13_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_37 -> m13_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_37 -> m13_39  [color=darkseagreen4, key=1, label=requiredButEmpty, style=dashed];
m13_84 -> m13_85  [key=0, style=solid];
m13_46 -> m13_48  [key=2, style=dotted];
m13_46 -> m13_47  [key=0, style=solid];
m13_46 -> m13_18  [key=2, style=dotted];
m13_38 -> m13_44  [key=2, style=dotted];
m13_38 -> m13_39  [key=0, style=solid];
m13_38 -> m13_40  [key=0, style=solid];
m13_3 -> m13_4  [key=0, style=solid];
m13_5 -> m13_6  [key=0, style=solid];
m13_5 -> m13_11  [key=2, style=dotted];
m13_5 -> m13_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_15 -> m13_16  [key=0, style=solid];
m13_19 -> m13_20  [key=0, style=solid];
m13_7 -> m13_13  [key=2, style=dotted];
m13_7 -> m13_9  [key=0, style=solid];
m13_7 -> m13_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_35 -> m13_36  [key=0, style=solid];
m13_35 -> m13_37  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m13_45 -> m13_46  [key=0, style=solid];
m13_49 -> m13_50  [key=0, style=solid];
m13_56 -> m13_57  [key=0, style=solid];
m13_56 -> m13_58  [key=2, style=dotted];
m13_56 -> m13_59  [key=2, style=dotted];
m13_52 -> m13_53  [key=0, style=solid];
m13_55 -> m13_56  [key=0, style=solid];
m13_60 -> m13_61  [key=0, style=solid];
m13_39 -> m13_13  [key=2, style=dotted];
m13_39 -> m13_41  [key=0, style=solid];
m13_39 -> m13_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_86 -> m13_84  [color=blue, key=0, style=bold];
m13_85 -> m13_86  [key=0, style=solid];
m13_85 -> m13_87  [key=2, style=dotted];
m13_85 -> m13_69  [key=2, style=dotted];
m13_85 -> m13_31  [key=2, style=dotted];
m13_47 -> m13_45  [color=blue, key=0, style=bold];
m13_8 -> m13_14  [key=2, style=dotted];
m13_8 -> m13_9  [key=0, style=solid];
m13_40 -> m13_14  [key=2, style=dotted];
m13_40 -> m13_41  [key=0, style=solid];
m13_9 -> m13_3  [color=blue, key=0, style=bold];
m13_6 -> m13_7  [key=0, style=solid];
m13_6 -> m13_8  [key=0, style=solid];
m13_6 -> m13_12  [key=2, style=dotted];
m13_23 -> m13_24  [key=0, style=solid];
m13_17 -> m13_15  [color=blue, key=0, style=bold];
m13_16 -> m13_18  [key=2, style=dotted];
m13_16 -> m13_17  [key=0, style=solid];
m13_21 -> m13_19  [color=blue, key=0, style=bold];
m13_20 -> m13_21  [key=0, style=solid];
m13_20 -> m13_22  [key=2, style=dotted];
m13_26 -> m13_27  [key=0, style=solid];
m13_41 -> m13_35  [color=blue, key=0, style=bold];
m13_51 -> m13_49  [color=blue, key=0, style=bold];
m13_50 -> m13_51  [key=0, style=solid];
m13_57 -> m13_55  [color=blue, key=0, style=bold];
m13_54 -> m13_52  [color=blue, key=0, style=bold];
m13_53 -> m13_18  [key=2, style=dotted];
m13_53 -> m13_54  [key=0, style=solid];
m13_62 -> m13_60  [color=blue, key=0, style=bold];
m13_61 -> m13_62  [key=0, style=solid];
m13_61 -> m13_63  [key=2, style=dotted];
m13_61 -> m13_64  [key=2, style=dotted];
m13_25 -> m13_23  [color=blue, key=0, style=bold];
m13_24 -> m13_25  [key=0, style=solid];
m13_28 -> m13_26  [color=blue, key=0, style=bold];
m13_27 -> m13_31  [key=2, style=dotted];
m13_27 -> m13_28  [key=0, style=solid];
m13_27 -> m13_29  [key=2, style=dotted];
m13_27 -> m13_30  [key=2, style=dotted];
m13_66 -> m13_69  [key=2, style=dotted];
m13_66 -> m13_31  [key=2, style=dotted];
m13_66 -> m13_67  [key=0, style=solid];
m13_66 -> m13_68  [key=2, style=dotted];
m13_67 -> m13_65  [color=blue, key=0, style=bold];
m13_32 -> m13_33  [key=0, style=solid];
m13_33 -> m13_36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m13_33 -> m13_37  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m13_33 -> m13_34  [key=0, style=solid];
m13_34 -> m13_32  [color=blue, key=0, style=bold];
m13_88 -> m13_56  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m14_12 -> m14_13  [key=0, style=solid];
m14_13 -> m14_14  [key=0, style=solid];
m14_13 -> m14_3  [key=2, style=dotted];
m14_13 -> m14_4  [key=2, style=dotted];
m14_13 -> m14_5  [key=2, style=dotted];
m14_14 -> m14_12  [color=blue, key=0, style=bold];
m14_15 -> m14_16  [key=0, style=solid];
m14_16 -> m14_17  [key=0, style=solid];
m14_16 -> m14_19  [key=2, style=dotted];
m14_17 -> m14_18  [key=0, style=solid];
m14_17 -> m14_3  [key=2, style=dotted];
m14_17 -> m14_20  [key=2, style=dotted];
m14_17 -> m14_5  [key=2, style=dotted];
m14_17 -> m14_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_18 -> m14_15  [color=blue, key=0, style=bold];
m14_9 -> m14_10  [key=0, style=solid];
m14_10 -> m14_11  [key=0, style=solid];
m14_10 -> m14_3  [key=2, style=dotted];
m14_10 -> m14_4  [key=2, style=dotted];
m14_10 -> m14_5  [key=2, style=dotted];
m14_11 -> m14_9  [color=blue, key=0, style=bold];
m14_21 -> m14_22  [key=0, style=solid];
m14_22 -> m14_23  [key=0, style=solid];
m14_23 -> m14_21  [color=blue, key=0, style=bold];
m14_6 -> m14_7  [key=0, style=solid];
m14_7 -> m14_8  [key=0, style=solid];
m14_7 -> m14_3  [key=2, style=dotted];
m14_7 -> m14_4  [key=2, style=dotted];
m14_7 -> m14_5  [key=2, style=dotted];
m14_8 -> m14_6  [color=blue, key=0, style=bold];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_1 -> m14_3  [key=2, style=dotted];
m14_1 -> m14_4  [key=2, style=dotted];
m14_1 -> m14_5  [key=2, style=dotted];
m14_2 -> m14_0  [color=blue, key=0, style=bold];
m15_36 -> m15_37  [key=0, style=solid];
m15_5 -> m15_6  [color=red, key=0, style=solid];
m15_5 -> m15_7  [color=red, key=2, style=dotted];
m15_5 -> m15_8  [color=red, key=2, style=dotted];
m15_5 -> m15_9  [color=red, key=2, style=dotted];
m15_5 -> m15_10  [color=red, key=2, style=dotted];
m15_5 -> m15_11  [color=red, key=1, label="lambda expression", style=dashed];
m15_12 -> m15_13  [color=red, key=0, style=solid];
m15_12 -> m15_14  [color=red, key=2, style=dotted];
m15_12 -> m15_15  [color=red, key=2, style=dotted];
m15_4 -> m15_5  [color=red, key=0, style=solid];
m15_4 -> m15_12  [color=red, key=1, label="CommandLine.Core.Token", style=dashed];
m15_6 -> m15_4  [color=blue, key=0, style=bold];
m15_11 -> m15_12  [color=red, key=0, style=solid];
m15_13 -> m15_11  [color=blue, key=0, style=bold];
m15_26 -> m15_27  [key=0, style=solid];
m15_26 -> m15_28  [key=2, style=dotted];
m15_30 -> m15_31  [key=0, style=solid];
m15_30 -> m15_23  [key=2, style=dotted];
m15_30 -> m15_24  [key=2, style=dotted];
m15_30 -> m15_10  [key=2, style=dotted];
m15_30 -> m15_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_30 -> m15_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_33 -> m15_34  [key=0, style=solid];
m15_33 -> m15_23  [key=2, style=dotted];
m15_33 -> m15_35  [key=2, style=dotted];
m15_25 -> m15_26  [key=0, style=solid];
m15_29 -> m15_30  [key=0, style=solid];
m15_39 -> m15_40  [key=0, style=solid];
m15_27 -> m15_25  [color=blue, key=0, style=bold];
m15_31 -> m15_29  [color=blue, key=0, style=bold];
m15_32 -> m15_33  [key=0, style=solid];
m15_34 -> m15_32  [color=blue, key=0, style=bold];
m15_37 -> m15_38  [key=0, style=solid];
m15_37 -> m15_8  [key=2, style=dotted];
m15_38 -> m15_36  [color=blue, key=0, style=bold];
m15_40 -> m15_41  [key=0, style=solid];
m15_40 -> m15_8  [key=2, style=dotted];
m15_41 -> m15_39  [color=blue, key=0, style=bold];
m15_16 -> m15_17  [key=0, style=solid];
m15_16 -> m15_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m15_16 -> m15_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m15_16 -> m15_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m15_16 -> m15_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m15_17 -> m15_18  [key=0, style=solid];
m15_17 -> m15_22  [key=2, style=dotted];
m15_17 -> m15_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_17 -> m15_19  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m15_17 -> m15_30  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m15_17 -> m15_33  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m15_19 -> m15_21  [key=0, style=solid];
m15_19 -> m15_23  [key=2, style=dotted];
m15_19 -> m15_24  [key=2, style=dotted];
m15_19 -> m15_10  [key=2, style=dotted];
m15_19 -> m15_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_19 -> m15_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_18 -> m15_19  [key=0, style=solid];
m15_18 -> m15_20  [key=0, style=solid];
m15_20 -> m15_21  [key=0, style=solid];
m15_21 -> m15_16  [color=blue, key=0, style=bold];
m15_0 -> m15_1  [color=red, key=0, style=solid];
m15_0 -> m15_5  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m15_0 -> m15_12  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m15_1 -> m15_2  [color=red, key=0, style=solid];
m15_1 -> m15_3  [color=red, key=2, style=dotted];
m15_1 -> m15_4  [color=red, key=1, label="lambda expression", style=dashed];
m15_1 -> m15_1  [color=red, key=1, label=tseq, style=dashed];
m15_2 -> m15_0  [color=blue, key=0, style=bold];
m15_42 -> m15_5  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m15_42 -> m15_12  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m15_43 -> m15_5  [color=red, key=1, label="System.Func<string, Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m15_44 -> m15_12  [color=red, key=1, label="CommandLine.Core.Token", style=dashed];
m15_45 -> m15_26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m15_46 -> m15_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m15_46 -> m15_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m15_47 -> m15_30  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m15_48 -> m15_30  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m15_48 -> m15_33  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
m16_31 -> m16_32  [key=0, style=solid];
m16_33 -> m16_5  [key=2, style=dotted];
m16_33 -> m16_6  [key=2, style=dotted];
m16_33 -> m16_34  [key=0, style=solid];
m16_33 -> m16_16  [key=2, style=dotted];
m16_33 -> m16_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_33 -> m16_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_34 -> m16_7  [key=2, style=dotted];
m16_34 -> m16_35  [key=0, style=solid];
m16_32 -> m16_33  [key=0, style=solid];
m16_35 -> m16_31  [color=blue, key=0, style=bold];
m16_11 -> m16_12  [key=0, style=solid];
m16_13 -> m16_5  [key=2, style=dotted];
m16_13 -> m16_14  [key=0, style=solid];
m16_13 -> m16_16  [key=2, style=dotted];
m16_13 -> m16_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_14 -> m16_7  [key=2, style=dotted];
m16_14 -> m16_15  [key=0, style=solid];
m16_12 -> m16_13  [key=0, style=solid];
m16_15 -> m16_11  [color=blue, key=0, style=bold];
m16_0 -> m16_1  [color=green, key=0, style=solid];
m16_1 -> m16_2  [color=green, key=0, style=solid];
m16_2 -> m16_3  [key=0, style=solid];
m16_2 -> m16_5  [key=2, style=dotted];
m16_2 -> m16_6  [key=2, style=dotted];
m16_2 -> m16_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_3 -> m16_4  [key=0, style=solid];
m16_3 -> m16_7  [key=2, style=dotted];
m16_4 -> m16_0  [color=blue, key=0, style=bold];
m16_20 -> m16_21  [key=0, style=solid];
m16_22 -> m16_5  [key=2, style=dotted];
m16_22 -> m16_6  [key=2, style=dotted];
m16_22 -> m16_23  [key=0, style=solid];
m16_22 -> m16_16  [key=2, style=dotted];
m16_22 -> m16_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_22 -> m16_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_23 -> m16_7  [key=2, style=dotted];
m16_23 -> m16_24  [key=0, style=solid];
m16_21 -> m16_22  [key=0, style=solid];
m16_24 -> m16_20  [color=blue, key=0, style=bold];
m16_39 -> m16_40  [key=0, style=solid];
m16_8 -> m16_9  [key=0, style=solid];
m16_10 -> m16_8  [color=blue, key=0, style=bold];
m16_9 -> m16_10  [key=0, style=solid];
m16_17 -> m16_18  [key=0, style=solid];
m16_25 -> m16_26  [key=0, style=solid];
m16_28 -> m16_29  [key=0, style=solid];
m16_36 -> m16_37  [key=0, style=solid];
m16_19 -> m16_17  [color=blue, key=0, style=bold];
m16_18 -> m16_19  [key=0, style=solid];
m16_27 -> m16_25  [color=blue, key=0, style=bold];
m16_26 -> m16_27  [key=0, style=solid];
m16_30 -> m16_28  [color=blue, key=0, style=bold];
m16_29 -> m16_30  [key=0, style=solid];
m16_38 -> m16_36  [color=blue, key=0, style=bold];
m16_37 -> m16_38  [key=0, style=solid];
m16_40 -> m16_41  [key=0, style=solid];
m16_41 -> m16_39  [color=blue, key=0, style=bold];
m17_0 -> m17_1  [key=0, style=solid];
m17_2 -> m17_3  [color=green, key=0, style=solid];
m17_2 -> m17_7  [color=green, key=2, style=dotted];
m17_2 -> m17_8  [color=green, key=2, style=dotted];
m17_2 -> m17_9  [color=green, key=2, style=dotted];
m17_2 -> m17_10  [color=green, key=2, style=dotted];
m17_2 -> m17_17  [color=green, key=1, label=specs, style=dashed];
m17_1 -> m17_2  [color=green, key=0, style=solid];
m17_1 -> m17_6  [key=2, style=dotted];
m17_1 -> m17_4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m17_3 -> m17_4  [key=0, style=solid];
m17_3 -> m17_11  [key=2, style=dotted];
m17_3 -> m17_12  [key=2, style=dotted];
m17_3 -> m17_13  [key=2, style=dotted];
m17_3 -> m17_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_3 -> m17_21  [color=darkseagreen4, key=1, label=result, style=dashed];
m17_4 -> m17_5  [key=0, style=solid];
m17_4 -> m17_14  [key=2, style=dotted];
m17_4 -> m17_15  [key=2, style=dotted];
m17_4 -> m17_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_5 -> m17_0  [color=blue, key=0, style=bold];
m17_41 -> m17_42  [key=0, style=solid];
m17_17 -> m17_18  [key=0, style=solid];
m17_17 -> m17_19  [key=2, style=dotted];
m17_36 -> m17_37  [key=0, style=solid];
m17_36 -> m17_19  [key=2, style=dotted];
m17_16 -> m17_17  [key=0, style=solid];
m17_21 -> m17_22  [key=0, style=solid];
m17_21 -> m17_23  [key=2, style=dotted];
m17_21 -> m17_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_21 -> m17_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m17_18 -> m17_16  [color=blue, key=0, style=bold];
m17_35 -> m17_36  [key=0, style=solid];
m17_39 -> m17_40  [key=0, style=solid];
m17_39 -> m17_23  [key=2, style=dotted];
m17_39 -> m17_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_39 -> m17_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m17_37 -> m17_35  [color=blue, key=0, style=bold];
m17_20 -> m17_21  [key=0, style=solid];
m17_22 -> m17_20  [color=blue, key=0, style=bold];
m17_24 -> m17_25  [key=0, style=solid];
m17_25 -> m17_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m17_25 -> m17_26  [key=0, style=solid];
m17_25 -> m17_27  [key=2, style=dotted];
m17_25 -> m17_28  [key=2, style=dotted];
m17_38 -> m17_39  [key=0, style=solid];
m17_40 -> m17_38  [color=blue, key=0, style=bold];
m17_42 -> m17_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m17_42 -> m17_43  [key=0, style=solid];
m17_42 -> m17_27  [key=2, style=dotted];
m17_42 -> m17_28  [key=2, style=dotted];
m17_26 -> m17_24  [color=blue, key=0, style=bold];
m17_43 -> m17_41  [color=blue, key=0, style=bold];
m17_29 -> m17_30  [key=0, style=solid];
m17_31 -> m17_32  [color=green, key=0, style=solid];
m17_31 -> m17_7  [color=green, key=2, style=dotted];
m17_31 -> m17_8  [color=green, key=2, style=dotted];
m17_31 -> m17_9  [color=green, key=2, style=dotted];
m17_31 -> m17_10  [color=green, key=2, style=dotted];
m17_31 -> m17_36  [color=green, key=1, label=specs, style=dashed];
m17_30 -> m17_31  [color=green, key=0, style=solid];
m17_30 -> m17_6  [key=2, style=dotted];
m17_30 -> m17_33  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m17_32 -> m17_33  [key=0, style=solid];
m17_32 -> m17_11  [key=2, style=dotted];
m17_32 -> m17_12  [key=2, style=dotted];
m17_32 -> m17_13  [key=2, style=dotted];
m17_32 -> m17_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_32 -> m17_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m17_33 -> m17_34  [key=0, style=solid];
m17_33 -> m17_14  [key=2, style=dotted];
m17_33 -> m17_15  [key=2, style=dotted];
m17_33 -> m17_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_34 -> m17_29  [color=blue, key=0, style=bold];
m17_44 -> m17_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m17_47 -> m17_36  [color=darkseagreen4, key=1, label=specs, style=dashed];
m17_45 -> m17_21  [color=darkseagreen4, key=1, label=result, style=dashed];
m17_48 -> m17_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m17_46 -> m17_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m17_49 -> m17_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m18_4 -> m18_7  [color=darkseagreen4, key=1, label="CommandLine.Core.TargetType", style=dashed];
m18_4 -> m18_5  [key=0, style=solid];
m18_7 -> m18_0  [key=2, style=dotted];
m18_7 -> m18_8  [key=0, style=solid];
m18_5 -> m18_7  [key=0, style=solid];
m18_5 -> m18_6  [key=0, style=solid];
m18_6 -> m18_8  [key=0, style=solid];
m18_6 -> m18_9  [key=2, style=dotted];
m18_8 -> m18_4  [color=blue, key=0, style=bold];
m18_0 -> m18_2  [color=green, key=1, label="CommandLine.Infrastructure.Maybe<int>", style=dashed];
m18_0 -> m18_1  [key=0, style=solid];
m18_2 -> m18_3  [color=green, key=0, style=solid];
m18_1 -> m18_2  [color=green, key=0, style=solid];
m18_3 -> m18_0  [color=blue, key=0, style=bold];
m18_10 -> m18_2  [color=green, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m18_10 -> m18_1  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m19_12 -> m19_13  [color=green, key=0, style=solid];
m19_12 -> m19_12  [color=green, key=2, style=dotted];
m19_4 -> m19_0  [color=blue, key=0, style=bold];
m19_14 -> m19_15  [key=0, style=solid];
m19_15 -> m19_16  [key=0, style=solid];
m19_15 -> m19_19  [key=2, style=dotted];
m19_15 -> m19_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m19_15 -> m19_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_16 -> m19_17  [key=0, style=solid];
m19_16 -> m19_19  [key=2, style=dotted];
m19_16 -> m19_20  [key=2, style=dotted];
m19_16 -> m19_5  [key=2, style=dotted];
m19_16 -> m19_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_16 -> m19_8  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m19_17 -> m19_18  [key=0, style=solid];
m19_17 -> m19_6  [key=2, style=dotted];
m19_18 -> m19_14  [color=blue, key=0, style=bold];
m19_13 -> m19_11  [color=blue, key=0, style=bold];
m19_11 -> m19_12  [color=green, key=0, style=solid];
m19_7 -> m19_8  [color=red, key=0, style=solid];
m19_8 -> m19_9  [color=red, key=0, style=solid];
m19_8 -> m19_10  [color=red, key=2, style=dotted];
m19_8 -> m19_11  [color=red, key=2, style=dotted];
m19_8 -> m19_12  [color=red, key=2, style=dotted];
m19_8 -> m19_13  [color=red, key=2, style=dotted];
m19_9 -> m19_7  [color=blue, key=0, style=bold];
m19_21 -> m19_22  [key=0, style=solid];
m19_22 -> m19_23  [key=0, style=solid];
m19_22 -> m19_10  [key=2, style=dotted];
m19_22 -> m19_11  [key=2, style=dotted];
m19_22 -> m19_12  [key=2, style=dotted];
m19_22 -> m19_13  [key=2, style=dotted];
m19_23 -> m19_21  [color=blue, key=0, style=bold];
m19_0 -> m19_1  [color=green, key=0, style=solid];
m19_0 -> m19_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_1 -> m19_2  [color=red, key=0, style=solid];
m19_1 -> m19_4  [color=green, key=2, style=dotted];
m19_1 -> m19_5  [color=green, key=2, style=dotted];
m19_1 -> m19_6  [color=green, key=2, style=dotted];
m19_1 -> m19_7  [color=green, key=1, label="lambda expression", style=dashed];
m19_1 -> m19_11  [color=green, key=1, label="lambda expression", style=dashed];
m19_1 -> m19_3  [color=darkseagreen4, key=1, label=expected, style=dashed];
m19_2 -> m19_3  [color=red, key=0, style=solid];
m19_2 -> m19_5  [color=red, key=2, style=dotted];
m19_2 -> m19_7  [color=red, key=1, label="lambda expression", style=dashed];
m19_3 -> m19_0  [color=blue, key=0, style=bold];
m19_3 -> m19_4  [key=0, style=solid];
m19_3 -> m19_6  [key=2, style=dotted];
m20_0 -> m20_1  [key=0, style=solid];
m20_1 -> m20_2  [key=0, style=solid];
m20_2 -> m20_0  [color=blue, key=0, style=bold];
m20_3 -> m20_4  [color=red, key=0, style=solid];
m20_4 -> m20_5  [color=red, key=0, style=solid];
m20_4 -> m20_0  [color=red, key=2, style=dotted];
m20_4 -> m20_6  [color=red, key=2, style=dotted];
m20_4 -> m20_7  [color=red, key=2, style=dotted];
m20_4 -> m20_8  [color=red, key=2, style=dotted];
m20_5 -> m20_3  [color=blue, key=0, style=bold];
m20_9 -> m20_1  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
}
