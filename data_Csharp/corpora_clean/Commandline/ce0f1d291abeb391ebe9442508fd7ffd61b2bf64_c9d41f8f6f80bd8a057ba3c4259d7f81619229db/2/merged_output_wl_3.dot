digraph  {
n101 [label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo", span=""];
n102 [label="CommandLine.Internal.OptionMap", span=""];
n0 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", span="45-45"];
n1 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", span="45-45"];
n2 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", span="47-47"];
n3 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", label="BadOption = option", span="49-49"];
n4 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", span="47-47"];
n5 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="54-54"];
n6 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", label="++_count", span="54-54"];
n7 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="54-54"];
n8 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="Entry CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="62-62"];
n9 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="_settings = settings", span="67-67"];
n11 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="_names = new Dictionary<string, string>(capacity, comparer)", span="71-71"];
n12 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="_map = new Dictionary<string, OptionInfo>(capacity * 2, comparer)", span="72-72"];
n14 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="_mutuallyExclusiveSetMap = new Dictionary<string, MutuallyExclusiveInfo>(capacity, StringComparer.OrdinalIgnoreCase)", span="75-75"];
n10 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="IEqualityComparer<string> comparer =\r\n                _settings.CaseSensitive ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase", span="69-70"];
n16 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
n13 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="_settings.MutuallyExclusive", span="73-73"];
n15 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", label="Exit CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="62-62"];
n17 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="Entry CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", span="79-79"];
n18 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="var list = ReflectionUtil.RetrievePropertyList<BaseOptionAttribute>(target)", span="81-81"];
n21 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="var map = new OptionMap(list.Count, settings)", span="86-86"];
n25 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="map.RawOptions = target", span="94-94"];
n19 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="list == null", span="82-82"];
n28 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", label="Entry CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="43-43"];
n22 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label=list, span="87-87"];
n20 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="return null;", span="84-84"];
n24 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="map[pair.Right.UniqueName] = new OptionInfo(pair.Right, pair.Left)", span="91-91"];
n26 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="return map;", span="95-95"];
n23 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="pair.Left != null && pair.Right != null", span="89-89"];
n29 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", label="Entry CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", span="43-43"];
n27 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", label="Exit CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", span="79-79"];
n30 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label="Entry CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", span="98-98"];
n31 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label="var map = new OptionMap(verbs.Count, settings)", span="101-101"];
n32 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label=verbs, span="102-102"];
n34 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label="!optionInfo.HasParameterLessCtor && verb.Left.GetValue(target, null) == null", span="109-109"];
n37 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label="map.RawOptions = target", span="116-116"];
n36 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label="map[verb.Right.UniqueName] = optionInfo", span="114-114"];
n38 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label="return map;", span="117-117"];
n33 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label="var optionInfo = new OptionInfo(verb.Right, verb.Left)\r\n                {\r\n                    HasParameterLessCtor = verb.Left.PropertyType.GetConstructor(Type.EmptyTypes) != null\r\n\r\n                }", span="104-108"];
n35 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label="throw new CommandLineParserException(''Type {0} must have a parameterless constructor or'' +\r\n                        '' be already initialized to be used as a verb command.''.FormatInvariant(verb.Left.PropertyType));", span="111-112"];
n40 [cluster="System.Type.GetConstructor(System.Type[])", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
n41 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
n39 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", label="Exit CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", span="98-98"];
n42 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string)", span="52-52"];
n43 [cluster="string.FormatInvariant(params object[])", label="Entry string.FormatInvariant(params object[])", span="58-58"];
n44 [cluster="CommandLine.Internal.OptionMap.EnforceRules()", label="Entry CommandLine.Internal.OptionMap.EnforceRules()", span="153-153"];
n45 [cluster="CommandLine.Internal.OptionMap.EnforceRules()", label="return EnforceMutuallyExclusiveMap() && EnforceRequiredRule();", span="155-155"];
n46 [cluster="CommandLine.Internal.OptionMap.EnforceRules()", label="Exit CommandLine.Internal.OptionMap.EnforceRules()", span="153-153"];
n47 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="Entry CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", span="180-180"];
n48 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", label="Entry CommandLine.Internal.OptionMap.EnforceRequiredRule()", span="166-166"];
n49 [cluster="CommandLine.Internal.OptionMap.SetDefaults()", label="Entry CommandLine.Internal.OptionMap.SetDefaults()", span="158-158"];
n50 [cluster="CommandLine.Internal.OptionMap.SetDefaults()", label="_map.Values", span="160-160"];
n51 [cluster="CommandLine.Internal.OptionMap.SetDefaults()", label="option.SetDefault(RawOptions)", span="162-162"];
n52 [cluster="CommandLine.Internal.OptionMap.SetDefaults()", label="Exit CommandLine.Internal.OptionMap.SetDefaults()", span="158-158"];
n53 [cluster="CommandLine.Internal.OptionInfo.SetDefault(object)", label="Entry CommandLine.Internal.OptionInfo.SetDefault(object)", span="160-160"];
n54 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", label="bool requiredRulesAllMet = true", span="168-168"];
n55 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", label="_map.Values", span="169-169"];
n59 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", label="return requiredRulesAllMet;", span="177-177"];
n56 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", label="option.Required && !option.IsDefined", span="171-171"];
n57 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", label="SetParserStateIfNeeded(RawOptions, option, true, null)", span="173-173"];
n58 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", label="requiredRulesAllMet = false", span="174-174"];
n61 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="Entry CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", span="214-214"];
n60 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", label="Exit CommandLine.Internal.OptionMap.EnforceRequiredRule()", span="166-166"];
n62 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="!_settings.MutuallyExclusive", span="182-182"];
n63 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="return true;", span="184-184"];
n64 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="_map.Values", span="186-186"];
n65 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="option.IsDefined && option.MutuallyExclusiveSet != null", span="188-188"];
n67 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="_mutuallyExclusiveSetMap.Values", span="193-193"];
n66 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="BuildMutuallyExclusiveMap(option)", span="190-190"];
n73 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", label="Entry CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", span="204-204"];
n68 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="info.Occurrence > 1", span="195-195"];
n71 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="return true;", span="201-201"];
n69 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="SetParserStateIfNeeded(RawOptions, info.BadOption, null, true)", span="197-197"];
n70 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="return false;", span="198-198"];
n72 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", label="Exit CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", span="180-180"];
n74 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", label="var setName = option.MutuallyExclusiveSet", span="206-206"];
n76 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", label="_mutuallyExclusiveSetMap.Add(setName, new MutuallyExclusiveInfo(option))", span="209-209"];
n75 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", label="!_mutuallyExclusiveSetMap.ContainsKey(setName)", span="207-207"];
n77 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", label="_mutuallyExclusiveSetMap[setName].IncrementOccurrence()", span="211-211"];
n79 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
n80 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
n78 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", label="Exit CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", span="204-204"];
n81 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="var list = ReflectionUtil.RetrievePropertyList<ParserStateAttribute>(options)", span="216-216"];
n85 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="property.GetValue(options, null) == null", span="223-223"];
n86 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="property.SetValue(options, new CommandLine.ParserState(), null)", span="225-225"];
n87 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="var parserState = (IParserState)property.GetValue(options, null)", span="227-227"];
n90 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="var error = new ParsingError\r\n                {\r\n                    BadOption =\r\n                        {\r\n                            ShortName = option.ShortName,\r\n                            LongName = option.LongName\r\n                        }\r\n                }", span="232-239"];
n91 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="required != null", span="240-240"];
n92 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="error.ViolatesRequired = required.Value", span="240-240"];
n93 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="mutualExclusiveness != null", span="241-241"];
n94 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="error.ViolatesMutualExclusiveness = mutualExclusiveness.Value", span="241-241"];
n82 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="list.Count == 0", span="217-217"];
n84 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="var property = list[0].Left", span="221-221"];
n83 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="return;", span="219-219"];
n97 [cluster="CommandLine.ParserState.ParserState()", label="Entry CommandLine.ParserState.ParserState()", span="47-47"];
n98 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
n88 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="parserState == null", span="228-228"];
n95 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="parserState.Errors.Add(error)", span="242-242"];
n89 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="return;", span="230-230"];
n99 [cluster="CommandLine.ParsingError.ParsingError()", label="Entry CommandLine.ParsingError.ParsingError()", span="47-47"];
n96 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", label="Exit CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", span="214-214"];
n100 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m0_75 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115"];
m0_76 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=1, file="ReflectionExtensions.cs", label="2: Func<bool> isMutable = () => {\r\n                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite);\r\n                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any();\r\n                return props || fields;\r\n            }", span="117-121"];
m0_77 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=0, file="ReflectionExtensions.cs", label="0: return type != typeof(object) ? isMutable() : true;", span="122-122"];
m0_78 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115"];
m0_85 [cluster="System.Type.GetFields(System.Reflection.BindingFlags)", file="ReflectionExtensions.cs", label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0"];
m0_110 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m0_6 [cluster="Unk.>", file="ReflectionExtensions.cs", label="Entry Unk.>", span=""];
m0_66 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106"];
m0_68 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="return e.Compile()();", span="112-112"];
m0_67 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="108-111"];
m0_69 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106"];
m0_7 [cluster="Unk.Any", file="ReflectionExtensions.cs", label="Entry Unk.Any", span=""];
m0_8 [cluster="Unk.First", file="ReflectionExtensions.cs", label="Entry Unk.First", span=""];
m0_36 [cluster="Unk.Where", file="ReflectionExtensions.cs", label="Entry Unk.Where", span=""];
m0_109 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m0_86 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_74 [cluster="System.Func<TResult>.Invoke()", file="ReflectionExtensions.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_4 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
m0_38 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="66-70"];
m0_80 [cluster="lambda expression", color=green, community=0, file="ReflectionExtensions.cs", label="0: var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="118-118"];
m0_79 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="117-121"];
m0_81 [cluster="lambda expression", color=green, community=0, file="ReflectionExtensions.cs", label="0: var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="119-119"];
m0_87 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="118-118"];
m0_82 [cluster="lambda expression", color=green, community=0, file="ReflectionExtensions.cs", label="1: return props || fields;", span="120-120"];
m0_83 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="117-121"];
m0_88 [cluster="lambda expression", color=green, community=0, file="ReflectionExtensions.cs", label="1: p.CanWrite", span="118-118"];
m0_89 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="118-118"];
m0_10 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="16-16"];
m0_39 [cluster="lambda expression", file="ReflectionExtensions.cs", label="specProp.Property.SetValue(current, selector(specProp))", span="68-68"];
m0_12 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="16-16"];
m0_11 [cluster="lambda expression", file="ReflectionExtensions.cs", label="x.GetProperties()", span="16-16"];
m0_112 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="145-145"];
m0_40 [cluster="lambda expression", file="ReflectionExtensions.cs", label="return instance;", span="69-69"];
m0_114 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="145-145"];
m0_113 [cluster="lambda expression", file="ReflectionExtensions.cs", label="pi.PropertyType", span="145-145"];
m0_41 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="66-70"];
m0_9 [cluster="Unk.selector", file="ReflectionExtensions.cs", label="Entry Unk.selector", span=""];
m0_71 [cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0"];
m0_111 [cluster="CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", file="ReflectionExtensions.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", span="50-50"];
m0_65 [cluster="System.Array.CreateInstance(System.Type, int)", file="ReflectionExtensions.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m0_70 [cluster="System.Linq.Expressions.Expression.Default(System.Type)", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0"];
m0_90 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="125-125"];
m0_91 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="type == typeof(string)", span="127-127"];
m0_93 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>)", span="131-131"];
m0_94 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="return type.GetGenericArguments()[0].CreateEmptyArray();", span="133-133"];
m0_95 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="return type.GetDefaultValue();", span="135-135"];
m0_92 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="return string.Empty;", span="129-129"];
m0_96 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="125-125"];
m0_13 [cluster="System.Type.GetProperties()", file="ReflectionExtensions.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m0_0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m0_1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="return from pi in type.FlattenHierarchy().SelectMany(x => x.GetProperties())\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                       attrs.OfType<OptionAttribute>().Any() ||\r\n                       attrs.OfType<ValueAttribute>().Any()\r\n                   group pi by pi.Name into g\r\n                   select selector(g.First());", span="16-22"];
m0_2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m0_72 [cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0"];
m0_97 [cluster="System.Type.GetGenericTypeDefinition()", file="ReflectionExtensions.cs", label="Entry System.Type.GetGenericTypeDefinition()", span="0-0"];
m0_101 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="138-138"];
m0_104 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="var ctorTypes = type.GetSpecifications(pi => pi.PropertyType).ToArray()", span="145-145"];
m0_102 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="type.IsMutable()", span="140-140"];
m0_105 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="return ReflectionHelper.CreateDefaultImmutableInstance(type, ctorTypes);", span="147-147"];
m0_103 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="return Activator.CreateInstance(type);", span="142-142"];
m0_106 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="138-138"];
m0_99 [cluster="System.Type.CreateEmptyArray()", file="ReflectionExtensions.cs", label="Entry System.Type.CreateEmptyArray()", span="101-101"];
m0_100 [cluster="System.Type.GetDefaultValue()", file="ReflectionExtensions.cs", label="Entry System.Type.GetDefaultValue()", span="106-106"];
m0_98 [cluster="System.Type.GetGenericArguments()", file="ReflectionExtensions.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_108 [cluster="System.Activator.CreateInstance(System.Type)", file="ReflectionExtensions.cs", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
m0_84 [cluster="System.Type.GetProperties(System.Reflection.BindingFlags)", file="ReflectionExtensions.cs", label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0"];
m0_5 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="ReflectionExtensions.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m0_107 [cluster="System.Type.IsMutable()", file="ReflectionExtensions.cs", label="Entry System.Type.IsMutable()", span="115-115"];
m0_37 [cluster="Unk.Aggregate", file="ReflectionExtensions.cs", label="Entry Unk.Aggregate", span=""];
m0_62 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101"];
m0_63 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs", label="return Array.CreateInstance(type, 0);", span="103-103"];
m0_64 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101"];
m0_33 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58"];
m0_34 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs", label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="64-70"];
m0_35 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58"];
m0_42 [cluster="Unk.SetValue", file="ReflectionExtensions.cs", label="Entry Unk.SetValue", span=""];
m0_3 [cluster="System.Type.FlattenHierarchy()", file="ReflectionExtensions.cs", label="Entry System.Type.FlattenHierarchy()", span="25-25"];
m0_73 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
m0_117 [file="ReflectionExtensions.cs", label="System.Type", span=""];
m0_115 [file="ReflectionExtensions.cs", label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
m0_116 [file="ReflectionExtensions.cs", label=T, span=""];
m1_39 [cluster="string.JoinTo(params string[])", file="SentenceBuilder.cs", label="Entry string.JoinTo(params string[])", span="45-45"];
m1_16 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="97-132"];
m1_19 [cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs", label="0: return ''Token '''.JoinTo(((BadFormatTokenError)error).Token, ''' is not recognized.'');", span="102-102"];
m1_18 [cluster="lambda expression", file="SentenceBuilder.cs", label="ErrorType.BadFormatTokenError", span="101-101"];
m1_21 [cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs", label="0: return ''Option '''.JoinTo(((MissingValueOptionError)error).NameInfo.NameText,\r\n                                        ''' has no value.'');", span="104-105"];
m1_20 [cluster="lambda expression", file="SentenceBuilder.cs", label="ErrorType.MissingValueOptionError", span="103-103"];
m1_23 [cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs", label="0: return ''Option '''.JoinTo(((UnknownOptionError)error).Token, ''' is unknown.'');", span="107-107"];
m1_22 [cluster="lambda expression", file="SentenceBuilder.cs", label="ErrorType.UnknownOptionError", span="106-106"];
m1_34 [cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs", label="0: return ''Verb '''.JoinTo(((BadVerbSelectedError)error).Token, ''' is not recognized.'');", span="127-127"];
m1_33 [cluster="lambda expression", file="SentenceBuilder.cs", label="ErrorType.BadVerbSelectedError", span="126-126"];
m1_26 [cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs", label="0: return errMisssing.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A required value not bound to option name is missing.''\r\n                                               : ''Required option '''.JoinTo(errMisssing.NameInfo.NameText, ''' is missing.'');", span="110-112"];
m1_25 [cluster="lambda expression", file="SentenceBuilder.cs", label="var errMisssing = ((MissingRequiredOptionError)error)", span="109-109"];
m1_29 [cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs", label="0: return badFormat.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A value not bound to option name is defined with a bad format.''\r\n                                               : ''Option '''.JoinTo(badFormat.NameInfo.NameText, ''' is defined with a bad format.'');", span="117-119"];
m1_28 [cluster="lambda expression", file="SentenceBuilder.cs", label="var badFormat = ((BadFormatConversionError)error)", span="116-116"];
m1_32 [cluster="lambda expression", color=green, community=0, file="SentenceBuilder.cs", label="0: return seqOutRange.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A sequence value not bound to option name is defined with few items than required.''\r\n                                               : ''A sequence option '''.JoinTo(seqOutRange.NameInfo.NameText,\r\n                                                    ''' is defined with few items than required.'');", span="122-125"];
m1_31 [cluster="lambda expression", file="SentenceBuilder.cs", label="var seqOutRange = ((SequenceOutOfRangeError)error)", span="121-121"];
m1_17 [cluster="lambda expression", file="SentenceBuilder.cs", label="error.Tag", span="99-99"];
m1_36 [cluster="lambda expression", file="SentenceBuilder.cs", label="return ''No verb selected.'';", span="129-129"];
m1_38 [cluster="lambda expression", file="SentenceBuilder.cs", label="throw new InvalidOperationException();", span="131-131"];
m1_24 [cluster="lambda expression", file="SentenceBuilder.cs", label="ErrorType.MissingRequiredOptionError", span="108-108"];
m1_27 [cluster="lambda expression", file="SentenceBuilder.cs", label="ErrorType.BadFormatConversionError", span="115-115"];
m1_30 [cluster="lambda expression", file="SentenceBuilder.cs", label="ErrorType.SequenceOutOfRangeError", span="120-120"];
m1_35 [cluster="lambda expression", file="SentenceBuilder.cs", label="ErrorType.NoVerbSelectedError", span="128-128"];
m1_37 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="97-132"];
m1_40 [cluster="System.InvalidOperationException.InvalidOperationException()", file="SentenceBuilder.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m2_8 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", file="StringExtensions.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", span="68-68"];
m2_9 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", file="StringExtensions.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", span="68-68"];
m2_2 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", file="StringExtensions.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", span="29-29"];
m2_3 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", file="StringExtensions.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", span="29-29"];
m2_6 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", file="StringExtensions.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", span="54-54"];
m2_7 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", file="StringExtensions.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", span="54-54"];
m2_0 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", file="StringExtensions.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", span="18-18"];
m2_1 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", file="StringExtensions.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", span="18-18"];
m2_4 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", file="StringExtensions.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", span="41-41"];
m2_5 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", file="StringExtensions.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", span="41-41"];
n101 -> n3  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo", style=dashed];
n101 -> n6  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo", style=dashed];
n102 -> n9  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n10  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n11  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n12  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n13  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n14  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n45  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n50  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n51  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n55  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n57  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n62  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n64  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n66  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n67  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n69  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n75  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n76  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n102 -> n77  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [color=blue, key=0, style=bold];
n2 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n4 -> n2  [color=blue, key=0, style=bold];
n5 -> n6  [key=0, style=solid];
n6 -> n7  [key=0, style=solid];
n7 -> n5  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [color=darkseagreen4, key=1, label=int, style=dashed];
n8 -> n12  [color=darkseagreen4, key=1, label=int, style=dashed];
n8 -> n14  [color=darkseagreen4, key=1, label=int, style=dashed];
n9 -> n10  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n16  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n12 -> n16  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n10 -> n12  [color=darkseagreen4, key=1, label=comparer, style=dashed];
n13 -> n14  [key=0, style=solid];
n13 -> n15  [key=0, style=solid];
n15 -> n8  [color=blue, key=0, style=bold];
n17 -> n18  [key=0, style=solid];
n17 -> n21  [color=darkseagreen4, key=1, label="CommandLine.CommandLineParserSettings", style=dashed];
n17 -> n25  [color=darkseagreen4, key=1, label=object, style=dashed];
n18 -> n19  [key=0, style=solid];
n18 -> n28  [key=2, style=dotted];
n18 -> n21  [color=darkseagreen4, key=1, label=list, style=dashed];
n18 -> n22  [color=darkseagreen4, key=1, label=list, style=dashed];
n21 -> n22  [key=0, style=solid];
n21 -> n8  [key=2, style=dotted];
n21 -> n24  [color=darkseagreen4, key=1, label=map, style=dashed];
n21 -> n25  [color=darkseagreen4, key=1, label=map, style=dashed];
n21 -> n26  [color=darkseagreen4, key=1, label=map, style=dashed];
n25 -> n26  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n21  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n25  [key=0, style=solid];
n22 -> n24  [color=darkseagreen4, key=1, label=pair, style=dashed];
n20 -> n27  [key=0, style=solid];
n24 -> n22  [key=0, style=solid];
n24 -> n29  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n22  [key=0, style=solid];
n27 -> n17  [color=blue, key=0, style=bold];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>", style=dashed];
n30 -> n34  [color=darkseagreen4, key=1, label=object, style=dashed];
n30 -> n37  [color=darkseagreen4, key=1, label=object, style=dashed];
n31 -> n32  [key=0, style=solid];
n31 -> n8  [key=2, style=dotted];
n31 -> n36  [color=darkseagreen4, key=1, label=map, style=dashed];
n31 -> n37  [color=darkseagreen4, key=1, label=map, style=dashed];
n31 -> n38  [color=darkseagreen4, key=1, label=map, style=dashed];
n32 -> n33  [key=0, style=solid];
n32 -> n37  [key=0, style=solid];
n32 -> n34  [color=darkseagreen4, key=1, label=verb, style=dashed];
n32 -> n35  [color=darkseagreen4, key=1, label=verb, style=dashed];
n32 -> n36  [color=darkseagreen4, key=1, label=verb, style=dashed];
n34 -> n35  [key=0, style=solid];
n34 -> n36  [key=0, style=solid];
n34 -> n41  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n36 -> n32  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n33 -> n29  [key=2, style=dotted];
n33 -> n40  [key=2, style=dotted];
n33 -> n36  [color=darkseagreen4, key=1, label=optionInfo, style=dashed];
n35 -> n39  [key=0, style=solid];
n35 -> n42  [key=2, style=dotted];
n35 -> n43  [key=2, style=dotted];
n39 -> n30  [color=blue, key=0, style=bold];
n44 -> n45  [key=0, style=solid];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=2, style=dotted];
n45 -> n48  [key=2, style=dotted];
n46 -> n44  [color=blue, key=0, style=bold];
n47 -> n62  [key=0, style=solid];
n48 -> n54  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n52  [key=0, style=solid];
n51 -> n50  [key=0, style=solid];
n51 -> n53  [key=2, style=dotted];
n52 -> n49  [color=blue, key=0, style=bold];
n54 -> n55  [key=0, style=solid];
n54 -> n59  [color=darkseagreen4, key=1, label=requiredRulesAllMet, style=dashed];
n55 -> n56  [key=0, style=solid];
n55 -> n59  [key=0, style=solid];
n55 -> n57  [color=darkseagreen4, key=1, label=option, style=dashed];
n59 -> n60  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n55  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n57 -> n61  [key=2, style=dotted];
n58 -> n55  [key=0, style=solid];
n58 -> n59  [color=darkseagreen4, key=1, label=requiredRulesAllMet, style=dashed];
n61 -> n81  [key=0, style=solid];
n61 -> n85  [color=darkseagreen4, key=1, label=object, style=dashed];
n61 -> n86  [color=darkseagreen4, key=1, label=object, style=dashed];
n61 -> n87  [color=darkseagreen4, key=1, label=object, style=dashed];
n61 -> n90  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
n61 -> n91  [color=darkseagreen4, key=1, label="bool?", style=dashed];
n61 -> n92  [color=darkseagreen4, key=1, label="bool?", style=dashed];
n61 -> n93  [color=darkseagreen4, key=1, label="bool?", style=dashed];
n61 -> n94  [color=darkseagreen4, key=1, label="bool?", style=dashed];
n60 -> n48  [color=blue, key=0, style=bold];
n62 -> n63  [key=0, style=solid];
n62 -> n64  [key=0, style=solid];
n63 -> n72  [key=0, style=solid];
n64 -> n65  [key=0, style=solid];
n64 -> n67  [key=0, style=solid];
n64 -> n66  [color=darkseagreen4, key=1, label=option, style=dashed];
n65 -> n66  [key=0, style=solid];
n65 -> n64  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n71  [key=0, style=solid];
n67 -> n69  [color=darkseagreen4, key=1, label=info, style=dashed];
n66 -> n64  [key=0, style=solid];
n66 -> n73  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n76  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
n68 -> n69  [key=0, style=solid];
n68 -> n67  [key=0, style=solid];
n71 -> n72  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n61  [key=2, style=dotted];
n70 -> n72  [key=0, style=solid];
n72 -> n47  [color=blue, key=0, style=bold];
n74 -> n75  [key=0, style=solid];
n74 -> n76  [color=darkseagreen4, key=1, label=setName, style=dashed];
n74 -> n77  [color=darkseagreen4, key=1, label=setName, style=dashed];
n76 -> n77  [key=0, style=solid];
n76 -> n2  [key=2, style=dotted];
n76 -> n80  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n77  [key=0, style=solid];
n75 -> n79  [key=2, style=dotted];
n77 -> n78  [key=0, style=solid];
n77 -> n5  [key=2, style=dotted];
n78 -> n73  [color=blue, key=0, style=bold];
n81 -> n82  [key=0, style=solid];
n81 -> n28  [key=2, style=dotted];
n81 -> n84  [color=darkseagreen4, key=1, label=list, style=dashed];
n85 -> n86  [key=0, style=solid];
n85 -> n87  [key=0, style=solid];
n85 -> n41  [key=2, style=dotted];
n86 -> n87  [key=0, style=solid];
n86 -> n97  [key=2, style=dotted];
n86 -> n98  [key=2, style=dotted];
n87 -> n88  [key=0, style=solid];
n87 -> n41  [key=2, style=dotted];
n87 -> n95  [color=darkseagreen4, key=1, label=parserState, style=dashed];
n90 -> n91  [key=0, style=solid];
n90 -> n99  [key=2, style=dotted];
n90 -> n92  [color=darkseagreen4, key=1, label=error, style=dashed];
n90 -> n94  [color=darkseagreen4, key=1, label=error, style=dashed];
n90 -> n95  [color=darkseagreen4, key=1, label=error, style=dashed];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n93 -> n94  [key=0, style=solid];
n93 -> n95  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n82 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n86  [color=darkseagreen4, key=1, label=property, style=dashed];
n84 -> n87  [color=darkseagreen4, key=1, label=property, style=dashed];
n83 -> n96  [key=0, style=solid];
n88 -> n89  [key=0, style=solid];
n88 -> n90  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n95 -> n100  [key=2, style=dotted];
n89 -> n96  [key=0, style=solid];
n96 -> n61  [color=blue, key=0, style=bold];
m0_75 -> m0_76  [color=green, key=0, style=solid];
m0_75 -> m0_80  [color=green, key=1, label="System.Type", style=dashed];
m0_75 -> m0_81  [color=green, key=1, label="System.Type", style=dashed];
m0_75 -> m0_77  [color=green, key=1, label="System.Type", style=dashed];
m0_76 -> m0_76  [color=green, key=3, label="Local variable System.Func<bool> isMutable", style=bold];
m0_76 -> m0_77  [color=green, key=0, style=solid];
m0_77 -> m0_78  [color=green, key=0, style=solid];
m0_77 -> m0_74  [color=green, key=2, style=dotted];
m0_78 -> m0_75  [color=blue, key=0, style=bold];
m0_66 -> m0_67  [key=0, style=solid];
m0_68 -> m0_74  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_73  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_70  [key=2, style=dotted];
m0_67 -> m0_71  [key=2, style=dotted];
m0_67 -> m0_72  [key=2, style=dotted];
m0_69 -> m0_66  [color=blue, key=0, style=bold];
m0_38 -> m0_39  [key=0, style=solid];
m0_80 -> m0_81  [color=green, key=0, style=solid];
m0_80 -> m0_84  [color=green, key=2, style=dotted];
m0_80 -> m0_7  [color=green, key=2, style=dotted];
m0_80 -> m0_87  [color=green, key=1, label="lambda expression", style=dashed];
m0_80 -> m0_82  [color=green, key=1, label=props, style=dashed];
m0_79 -> m0_80  [color=green, key=0, style=solid];
m0_81 -> m0_82  [color=green, key=0, style=solid];
m0_81 -> m0_85  [color=green, key=2, style=dotted];
m0_81 -> m0_86  [color=green, key=2, style=dotted];
m0_87 -> m0_88  [color=green, key=0, style=solid];
m0_82 -> m0_83  [color=green, key=0, style=solid];
m0_83 -> m0_79  [color=blue, key=0, style=bold];
m0_88 -> m0_89  [color=green, key=0, style=solid];
m0_89 -> m0_87  [color=blue, key=0, style=bold];
m0_10 -> m0_11  [key=0, style=solid];
m0_39 -> m0_9  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_42  [key=2, style=dotted];
m0_12 -> m0_10  [color=blue, key=0, style=bold];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=2, style=dotted];
m0_112 -> m0_113  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_114 -> m0_112  [color=blue, key=0, style=bold];
m0_113 -> m0_114  [key=0, style=solid];
m0_41 -> m0_38  [color=blue, key=0, style=bold];
m0_90 -> m0_66  [color=darkorchid, key=3, label="method methodReturn object CreateDefaultForImmutable", style=bold];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_93  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_90 -> m0_94  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_90 -> m0_95  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_90 -> m0_62  [color=darkorchid, key=3, label="method methodReturn object CreateDefaultForImmutable", style=bold];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_95  [key=0, style=solid];
m0_93 -> m0_97  [key=2, style=dotted];
m0_94 -> m0_96  [key=0, style=solid];
m0_94 -> m0_98  [key=2, style=dotted];
m0_94 -> m0_99  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_100  [key=2, style=dotted];
m0_92 -> m0_96  [key=0, style=solid];
m0_96 -> m0_90  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_104  [color=darkorchid, key=3, label="Parameter variable System.Func<System.Reflection.PropertyInfo, T> selector", style=bold];
m0_1 -> m0_7  [key=2, style=dotted];
m0_1 -> m0_1  [color=darkseagreen4, key=1, label=pi, style=dashed];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_8  [key=2, style=dotted];
m0_1 -> m0_9  [key=2, style=dotted];
m0_1 -> m0_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_101 -> m0_104  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_103  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_101 -> m0_105  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_109  [key=2, style=dotted];
m0_104 -> m0_110  [key=2, style=dotted];
m0_104 -> m0_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_102 -> m0_104  [key=0, style=solid];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_107  [key=2, style=dotted];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_111  [key=2, style=dotted];
m0_103 -> m0_106  [key=0, style=solid];
m0_103 -> m0_108  [key=2, style=dotted];
m0_106 -> m0_101  [color=blue, key=0, style=bold];
m0_62 -> m0_63  [key=0, style=solid];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_65  [key=2, style=dotted];
m0_64 -> m0_62  [color=blue, key=0, style=bold];
m0_33 -> m0_39  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_40  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_34 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_37  [key=2, style=dotted];
m0_35 -> m0_33  [color=blue, key=0, style=bold];
m0_117 -> m0_80  [color=green, key=1, label="System.Type", style=dashed];
m0_117 -> m0_81  [color=green, key=1, label="System.Type", style=dashed];
m0_115 -> m0_39  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m0_116 -> m0_40  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_16 -> m1_19  [color=green, key=1, label="CommandLine.Error", style=dashed];
m1_16 -> m1_21  [color=green, key=1, label="CommandLine.Error", style=dashed];
m1_16 -> m1_23  [color=green, key=1, label="CommandLine.Error", style=dashed];
m1_16 -> m1_34  [color=green, key=1, label="CommandLine.Error", style=dashed];
m1_16 -> m1_16  [color=darkorchid, key=3, label="method methodReturn string ", style=bold];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_25  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_16 -> m1_28  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_16 -> m1_31  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_19 -> m1_37  [color=green, key=0, style=solid];
m1_19 -> m1_39  [color=green, key=2, style=dotted];
m1_18 -> m1_19  [color=green, key=0, style=solid];
m1_21 -> m1_37  [color=green, key=0, style=solid];
m1_21 -> m1_39  [color=green, key=2, style=dotted];
m1_20 -> m1_21  [color=green, key=0, style=solid];
m1_23 -> m1_37  [color=green, key=0, style=solid];
m1_23 -> m1_39  [color=green, key=2, style=dotted];
m1_22 -> m1_23  [color=green, key=0, style=solid];
m1_34 -> m1_37  [color=green, key=0, style=solid];
m1_34 -> m1_39  [color=green, key=2, style=dotted];
m1_33 -> m1_34  [color=green, key=0, style=solid];
m1_26 -> m1_37  [color=green, key=0, style=solid];
m1_26 -> m1_39  [color=green, key=2, style=dotted];
m1_25 -> m1_26  [color=green, key=0, style=solid];
m1_29 -> m1_37  [color=green, key=0, style=solid];
m1_29 -> m1_39  [color=green, key=2, style=dotted];
m1_28 -> m1_29  [color=green, key=0, style=solid];
m1_32 -> m1_37  [color=green, key=0, style=solid];
m1_32 -> m1_39  [color=green, key=2, style=dotted];
m1_31 -> m1_32  [color=green, key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_20  [key=0, style=solid];
m1_17 -> m1_22  [key=0, style=solid];
m1_17 -> m1_33  [key=0, style=solid];
m1_17 -> m1_24  [key=0, style=solid];
m1_17 -> m1_27  [key=0, style=solid];
m1_17 -> m1_30  [key=0, style=solid];
m1_17 -> m1_35  [key=0, style=solid];
m1_36 -> m1_37  [key=0, style=solid];
m1_38 -> m1_37  [key=0, style=solid];
m1_38 -> m1_40  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_35 -> m1_36  [key=0, style=solid];
m1_37 -> m1_16  [color=blue, key=0, style=bold];
m2_8 -> m2_9  [key=0, style=solid];
m2_9 -> m2_8  [color=blue, key=0, style=bold];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_2  [color=blue, key=0, style=bold];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_6  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [color=blue, key=0, style=bold];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_4  [color=blue, key=0, style=bold];
}
