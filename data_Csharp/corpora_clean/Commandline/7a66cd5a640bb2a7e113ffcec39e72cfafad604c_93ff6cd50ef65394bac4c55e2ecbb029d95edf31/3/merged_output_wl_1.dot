digraph  {
n102 [label="System.StringComparer", span=""];
n103 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n104 [label="System.StringComparer", span=""];
n105 [label=optionSpecs, span=""];
n106 [label="System.Globalization.CultureInfo", span=""];
n107 [label=token, span=""];
n0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, label="0: return InstanceBuilder.Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer)),\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-24"];
n5 [cluster="lambda expression", color=red, community=0, label="0: Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="21-21"];
n9 [cluster="lambda expression", color=red, community=0, label="0: NameLookup.Contains(name, optionSpecs, nameComparer)", span="21-21"];
n2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="27-27"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="20-21"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="20-21"];
n7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
n8 [cluster="lambda expression", label="Entry lambda expression", span="21-21"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="21-21"];
n11 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="10-10"];
n12 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var instance = factory()", span="34-34"];
n13 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="36-36"];
n17 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="51-51"];
n19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.GetDescriptorInfo(name, optionSpecs, nameComparer))", span="55-57"];
n59 [cluster="lambda expression", label="TypeLookup.GetDescriptorInfo(name, optionSpecs, nameComparer)", span="57-57"];
n20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Item1,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="59-63"];
n63 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="62-62"];
n21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Item2,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="65-68"];
n67 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="68-68"];
n22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var missingValueErrors = from token in partitions.Item3\r\n                                     select new MissingValueOptionError(\r\n                                         NameInfo.FromOptionSpecification(optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))))", span="70-72"];
n70 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="72-72"];
n28 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n14 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    instance,\r\n                    new[] { new HelpRequestedError() });", span="38-41"];
n15 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specProps = instance.GetType().GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45"];
n24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = instance\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsJust(),\r\n                    sp => sp.Value.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                    sp => sp.Specification.DefaultValue.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing(),\r\n                    sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="76-87"];
n29 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n30 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
n31 [cluster="System.StringComparer.Equals(string, string)", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
n16 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecs = (from pt in specProps select pt.Specification)\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="47-49"];
n34 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n35 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
n52 [cluster="lambda expression", label="Entry lambda expression", span="44-45"];
n36 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
n37 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
n18 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokens = tokenizerResult.Value", span="53-53"];
n38 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="92-99"];
n39 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16"];
n58 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
n40 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
n41 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
n62 [cluster="lambda expression", label="Entry lambda expression", span="62-62"];
n23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="74-74"];
n42 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="18-18"];
n66 [cluster="lambda expression", label="Entry lambda expression", span="68-68"];
n43 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
n44 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n45 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
n69 [cluster="lambda expression", label="Entry lambda expression", span="72-72"];
n46 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup)\r\n                .OfType<Just<Error>>().Select(e => e.Value)", span="89-90"];
n47 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="42-42"];
n73 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
n77 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
n81 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
n85 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
n88 [cluster="lambda expression", label="Entry lambda expression", span="84-86"];
n93 [cluster="lambda expression", label="Entry lambda expression", span="87-87"];
n48 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="44-44"];
n49 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n99 [cluster="lambda expression", label="Entry lambda expression", span="90-90"];
n27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="27-27"];
n32 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
n33 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
n50 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
n51 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
n53 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45"];
n54 [cluster="lambda expression", label="Exit lambda expression", span="44-45"];
n55 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="74-74"];
n56 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
n57 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21"];
n60 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
n61 [cluster="CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n64 [cluster="lambda expression", label="Exit lambda expression", span="62-62"];
n65 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
n68 [cluster="lambda expression", label="Exit lambda expression", span="68-68"];
n71 [cluster="lambda expression", label="Exit lambda expression", span="72-72"];
n72 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
n74 [cluster="lambda expression", label="sp.Value.IsJust()", span="78-78"];
n75 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
n76 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152"];
n78 [cluster="lambda expression", label="sp.Value.FromJust()", span="79-79"];
n79 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
n80 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137"];
n82 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="81-81"];
n83 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
n84 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147"];
n86 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="82-82"];
n87 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
n89 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing()", span="84-86"];
n90 [cluster="lambda expression", label="Exit lambda expression", span="84-86"];
n91 [cluster="System.Type.ToDescriptor()", label="Entry System.Type.ToDescriptor()", span="22-22"];
n92 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26"];
n94 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="87-87"];
n95 [cluster="lambda expression", label="Exit lambda expression", span="87-87"];
n96 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n97 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n98 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="83-83"];
n100 [cluster="lambda expression", label="e.Value", span="90-90"];
n101 [cluster="lambda expression", label="Exit lambda expression", span="90-90"];
d1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: return InstanceBuilder.Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        return Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer));\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-29"];
d3 [cluster="Unk.Build", label="Entry Unk.Build", span=""];
d5 [cluster="lambda expression", color=green, community=0, label="0: var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="22-22"];
d6 [cluster="lambda expression", color=green, community=2, label="0: return Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer));", span="23-25"];
d11 [cluster="lambda expression", color=green, community=0, label="0: NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22"];
d9 [cluster="Unk.ExplodeOptionList", label="Entry Unk.ExplodeOptionList", span=""];
d14 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
d15 [cluster="lambda expression", color=green, community=0, label="0: NameLookup.WithSeparator(name, optionSpecs, nameComparer)", span="25-25"];
d16 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
d17 [cluster="Unk.WithSeparator", label="Entry Unk.WithSeparator", span=""];
m0_76 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="7-7"];
m0_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m0_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="var expectedResult = -.123D", span="78-78"];
m0_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''-0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="81-85"];
m0_36 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="88-88"];
m0_37 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_double_value()", span="75-75"];
m0_11 [cluster="Unk.True", file="InstanceBuilderTests.cs", label="Entry Unk.True", span=""];
m0_157 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="337-337"];
m0_158 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="340-340"];
m0_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347"];
m0_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="350-350"];
m0_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="337-337"];
m0_144 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m0_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="356-356"];
m0_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="359-359"];
m0_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="362-366"];
m0_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="369-369"];
m0_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="356-356"];
m0_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="279-279"];
m0_132 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="281-284"];
m0_133 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="286-290"];
m0_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="293-293"];
m0_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="279-279"];
m0_57 [cluster="Unk.AllProperties", file="InstanceBuilderTests.cs", label="Entry Unk.AllProperties", span=""];
m0_110 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="10-10"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var fakeOptions = new FakeOptions()", span="18-18"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.Equals(result))", span="31-31"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
m0_148 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="318-318"];
m0_149 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="321-321"];
m0_150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="324-328"];
m0_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="331-331"];
m0_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="318-318"];
m0_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
m0_162 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m0_188 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="401-401"];
m0_13 [cluster="lambda expression", file="InstanceBuilderTests.cs", label=fakeOptions, span="25-25"];
m0_12 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="25-25"];
m0_14 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="25-25"];
m0_21 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="44-44"];
m0_22 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="44-44"];
m0_23 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="44-44"];
m0_29 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="63-63"];
m0_30 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="63-63"];
m0_31 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="63-63"];
m0_38 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="82-82"];
m0_39 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithDouble()", span="82-82"];
m0_40 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="82-82"];
m0_47 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="101-101"];
m0_48 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="101-101"];
m0_49 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="101-101"];
m0_59 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="123-123"];
m0_60 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithEnum()", span="123-123"];
m0_61 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="123-123"];
m0_68 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="148-148"];
m0_69 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="148-148"];
m0_70 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="148-148"];
m0_77 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="170-170"];
m0_78 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="170-170"];
m0_79 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="170-170"];
m0_86 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="192-192"];
m0_87 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="192-192"];
m0_88 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="192-192"];
m0_96 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="221-221"];
m0_99 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="222-224"];
m0_97 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithValues()", span="221-221"];
m0_98 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="221-221"];
m0_100 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="223-224"];
m0_104 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="224-224"];
m0_108 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="224-224"];
m0_101 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="222-224"];
m0_103 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="224-224"];
m0_105 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="224-224"];
m0_107 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="224-224"];
m0_109 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="224-224"];
m0_118 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="247-247"];
m0_119 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionsWithSets()", span="247-247"];
m0_120 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="247-247"];
m0_128 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="267-267"];
m0_129 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="267-267"];
m0_130 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="267-267"];
m0_136 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="287-287"];
m0_137 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="287-287"];
m0_138 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="287-287"];
m0_145 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="307-307"];
m0_146 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequiredAndSet()", span="307-307"];
m0_147 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="307-307"];
m0_153 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="325-325"];
m0_154 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptionWithRequired()", span="325-325"];
m0_155 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="325-325"];
m0_163 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="344-344"];
m0_164 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="344-344"];
m0_165 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="344-344"];
m0_172 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="363-363"];
m0_173 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="363-363"];
m0_174 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="363-363"];
m0_180 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="382-382"];
m0_181 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="382-382"];
m0_182 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="382-382"];
m0_189 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="new FakeOptions()", span="401-401"];
m0_190 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="401-401"];
m0_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="298-298"];
m0_140 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="300-304"];
m0_141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="306-310"];
m0_142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="313-313"];
m0_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="298-298"];
m0_46 [cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs", label="Entry Unk.SequenceEqual", span=""];
m0_89 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="207-207"];
m0_90 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="210-216"];
m0_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="217-217"];
m0_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="230-230"];
m0_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="220-227"];
m0_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="207-207"];
m0_183 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="394-394"];
m0_184 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="397-397"];
m0_185 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="400-404"];
m0_186 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="407-407"];
m0_187 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="394-394"];
m0_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
m0_32 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="7-7"];
m0_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="14-14"];
m0_62 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135"];
m0_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="138-144"];
m0_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="147-151"];
m0_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="154-154"];
m0_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="135-135"];
m0_127 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="2-2"];
m0_171 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m0_85 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="7-7"];
m0_106 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m0_102 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m0_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="259-259"];
m0_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="261-264"];
m0_124 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="266-270"];
m0_125 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="273-273"];
m0_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="259-259"];
m0_121 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m0_80 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="182-182"];
m0_81 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithSequenceAndSeparator\r\n                {\r\n                    StringSequence = new[] { ''abc'',''1234'',''xyz@aaa.com'' }\r\n                }", span="185-188"];
m0_82 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", color=green, community=0, file="InstanceBuilderTests.cs", label="0: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                new[] { ''--string-seq'', ''abc;1234;xyz@aaa.com'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="191-195"];
m0_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="198-198"];
m0_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator()", span="182-182"];
m0_116 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m0_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="236-236"];
m0_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="239-243"];
m0_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="246-250"];
m0_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="253-253"];
m0_115 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="236-236"];
m0_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="var expectedResult = .123D", span="59-59"];
m0_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                new[] { ''0.123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="62-66"];
m0_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.DoubleValue)", span="69-69"];
m0_28 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value()", span="56-56"];
m0_156 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m0_58 [cluster="Unk.EqualTo", file="InstanceBuilderTests.cs", label="Entry Unk.EqualTo", span=""];
m0_117 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m0_56 [cluster="Unk.ShouldHave", file="InstanceBuilderTests.cs", label="Entry Unk.ShouldHave", span=""];
m0_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m0_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37"];
m0_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="var expectedResult = -123", span="40-40"];
m0_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-123'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="43-47"];
m0_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="Assert.Equal(expectedResult, result.Value.LongValue)", span="50-50"];
m0_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_int_value()", span="37-37"];
m0_175 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="375-375"];
m0_176 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="378-378"];
m0_177 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="381-385"];
m0_178 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="388-388"];
m0_179 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="375-375"];
m0_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m0_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithEnum\r\n                {\r\n                    Colors = Colors.Green\r\n                }", span="116-119"];
m0_52 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Green'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="122-126"];
m0_53 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="129-129"];
m0_54 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value()", span="113-113"];
m0_67 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m0_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m0_20 [cluster="Unk.Equal", file="InstanceBuilderTests.cs", label="Entry Unk.Equal", span=""];
m0_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m0_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="var expectedResult = new[] { 10, 20, 30, 40 }", span="97-97"];
m0_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-i'', ''10'', ''20'', ''30'', ''40'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="100-104"];
m0_44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Assert.True(expectedResult.SequenceEqual(result.Value.IntSequence))", span="107-107"];
m0_45 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range()", span="94-94"];
m0_71 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m0_72 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var expectedResult = new FakeOptionsWithSequenceWithoutRange\r\n                {\r\n                    LongSequence = new[] { 1L, 2L, 3L, 4L, 5L, 6L }\r\n                }", span="163-166"];
m0_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                new[] { ''1'', ''2'', ''3'', ''4'', ''5'', ''6'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="169-173"];
m0_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="expectedResult.ShouldHave().AllProperties().EqualTo(result.Value)", span="176-176"];
m0_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", file="InstanceBuilderTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints()", span="160-160"];
m0_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m0_191 [file="InstanceBuilderTests.cs", label=fakeOptions, span=""];
m0_192 [file="InstanceBuilderTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_1 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="name == null", span="12-12"];
m1_3 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="return specifications.Any(a => name.MatchName(a.ShortName, a.LongName, comparer));", span="14-14"];
m1_2 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="throw new ArgumentNullException(''name'');", span="12-12"];
m1_4 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Exit CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="10-10"];
m1_10 [cluster="string.MatchName(string, string, System.StringComparer)", file="NameLookup.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m1_7 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="14-14"];
m1_8 [cluster="lambda expression", file="NameLookup.cs", label="name.MatchName(a.ShortName, a.LongName, comparer)", span="14-14"];
m1_9 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="14-14"];
m1_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="NameLookup.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_6 [cluster="Unk.Any", file="NameLookup.cs", label="Entry Unk.Any", span=""];
m1_11 [file="NameLookup.cs", label=string, span=""];
m1_12 [file="NameLookup.cs", label="System.StringComparer", span=""];
m2_108 [cluster="string.Split(params char[])", file="Tokenizer.cs", label="Entry string.Split(params char[])", span="0-0"];
m2_17 [cluster="Unk.nameLookup", file="Tokenizer.cs", label="Entry Unk.nameLookup", span=""];
m2_106 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188"];
m2_11 [cluster="string.StartsWith(string, System.StringComparison)", file="Tokenizer.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m2_85 [cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m2_107 [cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m2_82 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48"];
m2_39 [cluster="Unk.Any", file="Tokenizer.cs", label="Entry Unk.Any", span=""];
m2_12 [cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
m2_16 [cluster="Unk.IsName", file="Tokenizer.cs", label="Entry Unk.IsName", span=""];
m2_41 [cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_18 [cluster="Unk.Where", file="Tokenizer.cs", label="Entry Unk.Where", span=""];
m2_86 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="66-66"];
m2_87 [cluster="lambda expression", color=green, community=0, file="Tokenizer.cs", label="0: Token.Value(str)", span="66-66"];
m2_29 [cluster="Unk.Contains", file="Tokenizer.cs", label="Entry Unk.Contains", span=""];
m2_70 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="69-69"];
m2_73 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Name(first);", span="74-74"];
m2_23 [cluster="lambda expression", file="Tokenizer.cs", label="errors.Add(e)", span="18-18"];
m2_27 [cluster="lambda expression", file="Tokenizer.cs", label="!unkTokens.Contains(x)", span="30-30"];
m2_26 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="30-30"];
m2_22 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="18-18"];
m2_24 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="18-18"];
m2_28 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="30-30"];
m2_46 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="39-39"];
m2_50 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="41-41"];
m2_53 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="42-42"];
m2_56 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="42-42"];
m2_60 [cluster="lambda expression", file="Tokenizer.cs", label="tokens.Concat(values)", span="43-43"];
m2_59 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="43-43"];
m2_47 [cluster="lambda expression", file="Tokenizer.cs", label="arg.EqualsOrdinal(''--'')", span="39-39"];
m2_48 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="39-39"];
m2_51 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="41-41"];
m2_52 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="41-41"];
m2_54 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="42-42"];
m2_55 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="42-42"];
m2_57 [cluster="lambda expression", file="Tokenizer.cs", label="Token.Value(t)", span="42-42"];
m2_58 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="42-42"];
m2_61 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="43-43"];
m2_75 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="text.Substring(1)", span="78-78"];
m2_77 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: !seen.Contains(c) && nameLookup(n)", span="81-81"];
m2_76 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: var n = new string(c, 1)", span="80-80"];
m2_78 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: seen.Add(c)", span="83-83"];
m2_80 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: seen.Count() < text.Length", span="91-91"];
m2_89 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m2_79 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: yield return Token.Name(n);", span="84-84"];
m2_81 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield return Token.Value(text.Substring(seen.Count()));", span="93-93"];
m2_88 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m2_90 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", color=green, community=0, file="Tokenizer.cs", label="0: value == null", span="102-102"];
m2_91 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''value'');", span="104-104"];
m2_43 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m2_13 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98"];
m2_96 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="113-113"];
m2_97 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="114-114"];
m2_100 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="119-119"];
m2_102 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(parts[0]);", span="122-122"];
m2_103 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Value(parts[1]);", span="123-123"];
m2_92 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="107-107"];
m2_93 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var text = value.Substring(2)", span="109-109"];
m2_99 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="onError(new BadFormatTokenError(value))", span="118-118"];
m2_94 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var equalIndex = text.IndexOf('=')", span="110-110"];
m2_101 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var parts = text.Split('=')", span="121-121"];
m2_95 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex <= 0", span="111-111"];
m2_98 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex == 1", span="116-116"];
m2_104 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="98-98"];
m2_42 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m2_20 [cluster="Unk.Concat", file="Tokenizer.cs", label="Entry Unk.Concat", span=""];
m2_49 [cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs", label="Entry string.EqualsOrdinal(string)", span="34-34"];
m2_72 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="var first = text.Substring(0, 1)", span="73-73"];
m2_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m2_105 [cluster="string.IndexOf(char)", file="Tokenizer.cs", label="Entry string.IndexOf(char)", span="0-0"];
m2_44 [cluster="Unk.Select", file="Tokenizer.cs", label="Entry Unk.Select", span=""];
m2_45 [cluster="CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", file="Tokenizer.cs", label="Entry CommandLine.Core.StatePair<T1>.MapValue<T1, T2>(System.Func<T1, T2>)", span="69-69"];
m2_0 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m2_1 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="arguments == null", span="15-15"];
m2_5 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new Token[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token).ToList()", span="20-26"];
m2_6 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="var unkTokens = (from t in tokens where t.IsName() && !nameLookup(t.Text) select t).ToList()", span="28-28"];
m2_2 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''arguments'');", span="15-15"];
m2_3 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="var errors = new List<Error>()", span="17-17"];
m2_4 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Action<Error> onError = e => errors.Add(e)", span="18-18"];
m2_7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="return StatePair.Create(tokens.Where(x=>!unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30"];
m2_8 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m2_30 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m2_31 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="arguments == null", span="37-37"];
m2_33 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="39-39"];
m2_34 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="41-41"];
m2_35 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(t => Token.Value(t))", span="42-42"];
m2_37 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="return tokenizer(arguments);", span="45-45"];
m2_32 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="throw new ArgumentNullException(''arguments'');", span="37-37"];
m2_36 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="return tokenizerResult.MapValue(tokens => tokens.Concat(values));", span="43-43"];
m2_38 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="33-33"];
m2_83 [cluster="string.Substring(int)", file="Tokenizer.cs", label="Entry string.Substring(int)", span="0-0"];
m2_15 [cluster="Unk.ToList", file="Tokenizer.cs", label="Entry Unk.ToList", span=""];
m2_25 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m2_84 [cluster="System.Convert.ToChar(string)", file="Tokenizer.cs", label="Entry System.Convert.ToChar(string)", span="0-0"];
m2_10 [cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_62 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value == null", span="52-52"];
m2_63 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: throw new ArgumentNullException(''value'');", span="54-54"];
m2_64 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: value.Length > 1 || value[0] == '-' || value[1] != '-'", span="57-57"];
m2_65 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: var text = value.Substring(1)", span="59-59"];
m2_66 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: char.IsDigit(text[0])", span="61-61"];
m2_67 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=1, file="Tokenizer.cs", label="0: yield return Token.Value(value);", span="63-63"];
m2_68 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", color=green, community=0, file="Tokenizer.cs", label="0: yield break;", span="64-64"];
m2_69 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="value.Length == 2", span="67-67"];
m2_19 [cluster="UnknownOptionError.cstr", file="Tokenizer.cs", label="Entry UnknownOptionError.cstr", span=""];
m2_14 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="48-48"];
m2_71 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="Tokenizer.cs", label="yield break;", span="70-70"];
m2_74 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="Tokenizer.cs", label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61"];
m2_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Tokenizer.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_109 [file="Tokenizer.cs", label=errors, span=""];
m2_110 [file="Tokenizer.cs", label=unkTokens, span=""];
m2_111 [file="Tokenizer.cs", label=values, span=""];
m2_140 [file="Tokenizer.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>", span=""];
m3_10 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m3_12 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="61-61"];
m3_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, string, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, string, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="16-16"];
m3_15 [cluster="Unk.True", file="TokenizerTests.cs", label="Entry Unk.True", span=""];
m3_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", span="16-16"];
m3_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", color=green, community=1, file="TokenizerTests.cs", label="0: var expectedTokens = new[] { Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc'')}", span="19-20"];
m3_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", color=green, community=1, file="TokenizerTests.cs", label="0: var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, '','', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="21-22"];
m3_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", color=green, community=0, file="TokenizerTests.cs", label="0: Assert.True(expectedTokens.SequenceEqual(result.Value))", span="34-34"];
m3_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", color=green, community=1, file="TokenizerTests.cs", label="0: var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="25-30"];
m3_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_returns_sequence()", span="16-16"];
m3_16 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="30-30"];
m3_17 [cluster="lambda expression", color=green, community=0, file="TokenizerTests.cs", label="0: NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="30-30"];
m3_18 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="30-30"];
m3_19 [cluster="Unk.WithSeparator", file="TokenizerTests.cs", label="Entry Unk.WithSeparator", span=""];
m3_6 [cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m3_14 [cluster="Unk.SequenceEqual", file="TokenizerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m3_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m3_7 [cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="26-26"];
m3_9 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_20 [file="TokenizerTests.cs", label=specs, span=""];
n102 -> n5  [color=red, key=1, label="System.StringComparer", style=dashed];
n102 -> n9  [color=red, key=1, label="System.StringComparer", style=dashed];
n102 -> d5  [color=green, key=1, label="System.StringComparer", style=dashed];
n102 -> d11  [color=green, key=1, label="System.StringComparer", style=dashed];
n102 -> d6  [color=green, key=1, label="System.StringComparer", style=dashed];
n102 -> d15  [color=green, key=1, label="System.StringComparer", style=dashed];
n103 -> n9  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n103 -> d11  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n103 -> d15  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n104 -> n59  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n104 -> n70  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n105 -> n59  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n106 -> n63  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n106 -> n67  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n107 -> n70  [color=darkseagreen4, key=1, label=token, style=dashed];
n0 -> n1  [color=red, key=0, style=solid];
n0 -> n5  [color=red, key=1, label="System.StringComparer", style=dashed];
n0 -> n9  [color=red, key=1, label="System.StringComparer", style=dashed];
n0 -> n3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
n0 -> d1  [color=green, key=0, style=solid];
n0 -> d5  [color=green, key=1, label="System.StringComparer", style=dashed];
n0 -> d11  [color=green, key=1, label="System.StringComparer", style=dashed];
n0 -> d6  [color=green, key=1, label="System.StringComparer", style=dashed];
n0 -> d15  [color=green, key=1, label="System.StringComparer", style=dashed];
n1 -> n2  [color=red, key=0, style=solid];
n1 -> n3  [color=red, key=2, style=dotted];
n1 -> n4  [color=red, key=1, label="lambda expression", style=dashed];
n5 -> n6  [color=red, key=0, style=solid];
n5 -> n7  [color=red, key=2, style=dotted];
n5 -> n8  [color=red, key=1, label="lambda expression", style=dashed];
n9 -> n10  [color=red, key=0, style=solid];
n9 -> n11  [color=red, key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n3 -> n12  [key=0, style=solid];
n3 -> n13  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n3 -> n17  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
n3 -> n19  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n59  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n20  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n63  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n67  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n22  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n70  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n4 -> n5  [color=red, key=0, style=solid];
n4 -> n9  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n4 -> d5  [color=green, key=0, style=solid];
n4 -> d11  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n4 -> d6  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n4 -> d15  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n6 -> n4  [color=blue, key=0, style=bold];
n8 -> n9  [color=red, key=0, style=solid];
n8 -> d11  [color=green, key=0, style=solid];
n10 -> n8  [color=blue, key=0, style=bold];
n12 -> n13  [key=0, style=solid];
n12 -> n28  [key=2, style=dotted];
n12 -> n14  [color=darkseagreen4, key=1, label=instance, style=dashed];
n12 -> n15  [color=darkseagreen4, key=1, label=instance, style=dashed];
n12 -> n24  [color=darkseagreen4, key=1, label=instance, style=dashed];
n13 -> n14  [key=0, style=solid];
n13 -> n15  [key=0, style=solid];
n13 -> n29  [key=2, style=dotted];
n13 -> n30  [key=2, style=dotted];
n13 -> n31  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n38  [key=2, style=dotted];
n17 -> n26  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
n19 -> n20  [key=0, style=solid];
n19 -> n39  [key=2, style=dotted];
n19 -> n58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n19 -> n21  [color=darkseagreen4, key=1, label=partitions, style=dashed];
n19 -> n22  [color=darkseagreen4, key=1, label=partitions, style=dashed];
n59 -> n60  [key=0, style=solid];
n59 -> n61  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n40  [key=2, style=dotted];
n20 -> n41  [key=2, style=dotted];
n20 -> n20  [color=darkseagreen4, key=1, label=pt, style=dashed];
n20 -> n62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n23  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
n20 -> n26  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
n63 -> n64  [key=0, style=solid];
n63 -> n65  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n42  [key=2, style=dotted];
n21 -> n41  [key=2, style=dotted];
n21 -> n21  [color=darkseagreen4, key=1, label=pt, style=dashed];
n21 -> n66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n21 -> n23  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
n21 -> n26  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
n67 -> n68  [key=0, style=solid];
n67 -> n65  [key=2, style=dotted];
n22 -> n23  [key=0, style=solid];
n22 -> n43  [key=2, style=dotted];
n22 -> n44  [key=2, style=dotted];
n22 -> n45  [key=2, style=dotted];
n22 -> n22  [color=darkseagreen4, key=1, label=token, style=dashed];
n22 -> n69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n22 -> n70  [color=darkseagreen4, key=1, label=token, style=dashed];
n22 -> n26  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
n70 -> n71  [key=0, style=solid];
n70 -> n72  [key=2, style=dotted];
n14 -> n27  [key=0, style=solid];
n14 -> n32  [key=2, style=dotted];
n14 -> n33  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n15 -> n34  [key=2, style=dotted];
n15 -> n35  [key=2, style=dotted];
n15 -> n52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n15 -> n20  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n15 -> n21  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n24 -> n25  [key=0, style=solid];
n24 -> n47  [key=2, style=dotted];
n24 -> n24  [color=darkseagreen4, key=1, label=instance, style=dashed];
n24 -> n73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n24 -> n77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n24 -> n81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n24 -> n85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n24 -> n88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n24 -> n93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n24 -> n26  [color=darkseagreen4, key=1, label=instance, style=dashed];
n16 -> n17  [key=0, style=solid];
n16 -> n36  [key=2, style=dotted];
n16 -> n37  [key=2, style=dotted];
n16 -> n16  [color=darkseagreen4, key=1, label=pt, style=dashed];
n16 -> n19  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n16 -> n59  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n16 -> n22  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n52 -> n53  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n50  [key=2, style=dotted];
n26 -> n51  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n46  [key=2, style=dotted];
n23 -> n25  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n66 -> n67  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n48  [key=2, style=dotted];
n25 -> n37  [key=2, style=dotted];
n25 -> n49  [key=2, style=dotted];
n25 -> n99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n73 -> n74  [key=0, style=solid];
n77 -> n78  [key=0, style=solid];
n81 -> n82  [key=0, style=solid];
n85 -> n86  [key=0, style=solid];
n88 -> n89  [key=0, style=solid];
n93 -> n94  [key=0, style=solid];
n99 -> n100  [key=0, style=solid];
n27 -> n3  [color=blue, key=0, style=bold];
n53 -> n54  [key=0, style=solid];
n53 -> n55  [key=2, style=dotted];
n53 -> n56  [key=2, style=dotted];
n53 -> n57  [key=2, style=dotted];
n54 -> n52  [color=blue, key=0, style=bold];
n60 -> n58  [color=blue, key=0, style=bold];
n64 -> n62  [color=blue, key=0, style=bold];
n68 -> n66  [color=blue, key=0, style=bold];
n71 -> n69  [color=blue, key=0, style=bold];
n74 -> n75  [key=0, style=solid];
n74 -> n76  [key=2, style=dotted];
n75 -> n73  [color=blue, key=0, style=bold];
n78 -> n79  [key=0, style=solid];
n78 -> n80  [key=2, style=dotted];
n79 -> n77  [color=blue, key=0, style=bold];
n82 -> n83  [key=0, style=solid];
n82 -> n84  [key=2, style=dotted];
n82 -> n76  [key=2, style=dotted];
n83 -> n81  [color=blue, key=0, style=bold];
n86 -> n87  [key=0, style=solid];
n86 -> n80  [key=2, style=dotted];
n87 -> n85  [color=blue, key=0, style=bold];
n89 -> n90  [key=0, style=solid];
n89 -> n84  [key=2, style=dotted];
n89 -> n91  [key=2, style=dotted];
n89 -> n92  [key=2, style=dotted];
n90 -> n88  [color=blue, key=0, style=bold];
n94 -> n95  [key=0, style=solid];
n94 -> n96  [key=2, style=dotted];
n94 -> n97  [key=2, style=dotted];
n94 -> n98  [key=2, style=dotted];
n95 -> n93  [color=blue, key=0, style=bold];
n100 -> n101  [key=0, style=solid];
n101 -> n99  [color=blue, key=0, style=bold];
d1 -> n2  [color=green, key=0, style=solid];
d1 -> d3  [color=green, key=2, style=dotted];
d1 -> n4  [color=green, key=1, label="lambda expression", style=dashed];
d5 -> d6  [color=green, key=0, style=solid];
d5 -> n7  [color=green, key=2, style=dotted];
d5 -> n8  [color=green, key=1, label="lambda expression", style=dashed];
d6 -> n6  [color=green, key=0, style=solid];
d6 -> d9  [color=green, key=2, style=dotted];
d6 -> d14  [color=green, key=1, label="lambda expression", style=dashed];
d11 -> n10  [color=green, key=0, style=solid];
d11 -> n11  [color=green, key=2, style=dotted];
d14 -> d15  [color=green, key=0, style=solid];
d15 -> d16  [color=green, key=0, style=solid];
d15 -> d17  [color=green, key=2, style=dotted];
d16 -> d14  [color=blue, key=0, style=bold];
m0_33 -> m0_34  [key=0, style=solid];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_34 -> m0_34  [color=darkorchid, key=3, label="Local variable double expectedResult", style=bold];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_9  [key=2, style=dotted];
m0_35 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_20  [key=2, style=dotted];
m0_37 -> m0_33  [color=blue, key=0, style=bold];
m0_157 -> m0_158  [key=0, style=solid];
m0_158 -> m0_159  [key=0, style=solid];
m0_158 -> m0_162  [key=2, style=dotted];
m0_158 -> m0_117  [key=2, style=dotted];
m0_158 -> m0_160  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_9  [key=2, style=dotted];
m0_159 -> m0_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_46  [key=2, style=dotted];
m0_160 -> m0_11  [key=2, style=dotted];
m0_161 -> m0_157  [color=blue, key=0, style=bold];
m0_166 -> m0_167  [key=0, style=solid];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_171  [key=2, style=dotted];
m0_167 -> m0_169  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_9  [key=2, style=dotted];
m0_168 -> m0_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_46  [key=2, style=dotted];
m0_169 -> m0_11  [key=2, style=dotted];
m0_170 -> m0_166  [color=blue, key=0, style=bold];
m0_131 -> m0_132  [key=0, style=solid];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_127  [key=2, style=dotted];
m0_132 -> m0_134  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_9  [key=2, style=dotted];
m0_133 -> m0_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_56  [key=2, style=dotted];
m0_134 -> m0_57  [key=2, style=dotted];
m0_134 -> m0_58  [key=2, style=dotted];
m0_135 -> m0_131  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_1 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_0  [color=blue, key=0, style=bold];
m0_148 -> m0_149  [key=0, style=solid];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_144  [key=2, style=dotted];
m0_149 -> m0_117  [key=2, style=dotted];
m0_149 -> m0_151  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_9  [key=2, style=dotted];
m0_150 -> m0_153  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_46  [key=2, style=dotted];
m0_151 -> m0_11  [key=2, style=dotted];
m0_152 -> m0_148  [color=blue, key=0, style=bold];
m0_188 -> m0_189  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_14 -> m0_12  [color=blue, key=0, style=bold];
m0_21 -> m0_22  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_6  [key=2, style=dotted];
m0_23 -> m0_21  [color=blue, key=0, style=bold];
m0_29 -> m0_30  [key=0, style=solid];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_32  [key=2, style=dotted];
m0_31 -> m0_29  [color=blue, key=0, style=bold];
m0_38 -> m0_39  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_32  [key=2, style=dotted];
m0_40 -> m0_38  [color=blue, key=0, style=bold];
m0_47 -> m0_48  [key=0, style=solid];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_6  [key=2, style=dotted];
m0_49 -> m0_47  [color=blue, key=0, style=bold];
m0_59 -> m0_60  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_55  [key=2, style=dotted];
m0_61 -> m0_59  [color=blue, key=0, style=bold];
m0_68 -> m0_69  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_67  [key=2, style=dotted];
m0_70 -> m0_68  [color=blue, key=0, style=bold];
m0_77 -> m0_78  [key=0, style=solid];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_76  [key=2, style=dotted];
m0_79 -> m0_77  [color=blue, key=0, style=bold];
m0_86 -> m0_87  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_85  [key=2, style=dotted];
m0_88 -> m0_86  [color=blue, key=0, style=bold];
m0_96 -> m0_97  [key=0, style=solid];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_104  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_99 -> m0_108  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_67  [key=2, style=dotted];
m0_98 -> m0_96  [color=blue, key=0, style=bold];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_102  [key=2, style=dotted];
m0_100 -> m0_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_106  [key=2, style=dotted];
m0_104 -> m0_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_110  [key=2, style=dotted];
m0_101 -> m0_99  [color=blue, key=0, style=bold];
m0_103 -> m0_104  [key=0, style=solid];
m0_105 -> m0_103  [color=blue, key=0, style=bold];
m0_107 -> m0_108  [key=0, style=solid];
m0_109 -> m0_107  [color=blue, key=0, style=bold];
m0_118 -> m0_119  [key=0, style=solid];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_121  [key=2, style=dotted];
m0_120 -> m0_118  [color=blue, key=0, style=bold];
m0_128 -> m0_129  [key=0, style=solid];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_127  [key=2, style=dotted];
m0_130 -> m0_128  [color=blue, key=0, style=bold];
m0_136 -> m0_137  [key=0, style=solid];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_127  [key=2, style=dotted];
m0_138 -> m0_136  [color=blue, key=0, style=bold];
m0_145 -> m0_146  [key=0, style=solid];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_127  [key=2, style=dotted];
m0_147 -> m0_145  [color=blue, key=0, style=bold];
m0_153 -> m0_154  [key=0, style=solid];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_156  [key=2, style=dotted];
m0_155 -> m0_153  [color=blue, key=0, style=bold];
m0_163 -> m0_164  [key=0, style=solid];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_6  [key=2, style=dotted];
m0_165 -> m0_163  [color=blue, key=0, style=bold];
m0_172 -> m0_173  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_173 -> m0_6  [key=2, style=dotted];
m0_174 -> m0_172  [color=blue, key=0, style=bold];
m0_180 -> m0_181  [key=0, style=solid];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_6  [key=2, style=dotted];
m0_182 -> m0_180  [color=blue, key=0, style=bold];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_6  [key=2, style=dotted];
m0_190 -> m0_188  [color=blue, key=0, style=bold];
m0_139 -> m0_140  [key=0, style=solid];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_144  [key=2, style=dotted];
m0_140 -> m0_117  [key=2, style=dotted];
m0_140 -> m0_142  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_141 -> m0_142  [key=0, style=solid];
m0_141 -> m0_9  [key=2, style=dotted];
m0_141 -> m0_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_142 -> m0_143  [key=0, style=solid];
m0_142 -> m0_46  [key=2, style=dotted];
m0_142 -> m0_11  [key=2, style=dotted];
m0_143 -> m0_139  [color=blue, key=0, style=bold];
m0_89 -> m0_90  [key=0, style=solid];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_67  [key=2, style=dotted];
m0_90 -> m0_93  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_91 -> m0_92  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_56  [key=2, style=dotted];
m0_93 -> m0_57  [key=2, style=dotted];
m0_93 -> m0_58  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> n3  [key=2, style=dotted];
m0_92 -> m0_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_92 -> m0_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_94 -> m0_89  [color=blue, key=0, style=bold];
m0_183 -> m0_184  [key=0, style=solid];
m0_184 -> m0_185  [key=0, style=solid];
m0_184 -> m0_171  [key=2, style=dotted];
m0_184 -> m0_186  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_9  [key=2, style=dotted];
m0_185 -> m0_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_46  [key=2, style=dotted];
m0_186 -> m0_11  [key=2, style=dotted];
m0_187 -> m0_183  [color=blue, key=0, style=bold];
m0_62 -> m0_63  [key=0, style=solid];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_67  [key=2, style=dotted];
m0_63 -> m0_65  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_9  [key=2, style=dotted];
m0_64 -> m0_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_56  [key=2, style=dotted];
m0_65 -> m0_57  [key=2, style=dotted];
m0_65 -> m0_58  [key=2, style=dotted];
m0_66 -> m0_62  [color=blue, key=0, style=bold];
m0_122 -> m0_123  [key=0, style=solid];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_127  [key=2, style=dotted];
m0_123 -> m0_125  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_9  [key=2, style=dotted];
m0_124 -> m0_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_56  [key=2, style=dotted];
m0_125 -> m0_57  [key=2, style=dotted];
m0_125 -> m0_58  [key=2, style=dotted];
m0_126 -> m0_122  [color=blue, key=0, style=bold];
m0_80 -> m0_81  [key=0, style=solid];
m0_81 -> m0_82  [color=green, key=0, style=solid];
m0_81 -> m0_85  [key=2, style=dotted];
m0_81 -> m0_83  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_82 -> m0_83  [color=green, key=0, style=solid];
m0_82 -> m0_9  [color=green, key=2, style=dotted];
m0_82 -> m0_86  [color=green, key=1, label="lambda expression", style=dashed];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_56  [key=2, style=dotted];
m0_83 -> m0_57  [key=2, style=dotted];
m0_83 -> m0_58  [key=2, style=dotted];
m0_84 -> m0_80  [color=blue, key=0, style=bold];
m0_111 -> m0_112  [key=0, style=solid];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_116  [key=2, style=dotted];
m0_112 -> m0_117  [key=2, style=dotted];
m0_112 -> m0_114  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_9  [key=2, style=dotted];
m0_113 -> m0_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_46  [key=2, style=dotted];
m0_114 -> m0_11  [key=2, style=dotted];
m0_115 -> m0_111  [color=blue, key=0, style=bold];
m0_24 -> m0_25  [key=0, style=solid];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_25 -> m0_25  [color=darkorchid, key=3, label="Local variable double expectedResult", style=bold];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_9  [key=2, style=dotted];
m0_26 -> m0_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_20  [key=2, style=dotted];
m0_28 -> m0_24  [color=blue, key=0, style=bold];
m0_15 -> m0_16  [key=0, style=solid];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_16 -> m0_16  [color=darkorchid, key=3, label="Local variable int expectedResult", style=bold];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_9  [key=2, style=dotted];
m0_17 -> m0_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=2, style=dotted];
m0_19 -> m0_15  [color=blue, key=0, style=bold];
m0_175 -> m0_176  [key=0, style=solid];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_171  [key=2, style=dotted];
m0_176 -> m0_178  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_9  [key=2, style=dotted];
m0_177 -> m0_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_46  [key=2, style=dotted];
m0_178 -> m0_11  [key=2, style=dotted];
m0_179 -> m0_175  [color=blue, key=0, style=bold];
m0_50 -> m0_51  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_55  [key=2, style=dotted];
m0_51 -> m0_53  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_9  [key=2, style=dotted];
m0_52 -> m0_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_56  [key=2, style=dotted];
m0_53 -> m0_57  [key=2, style=dotted];
m0_53 -> m0_58  [key=2, style=dotted];
m0_54 -> m0_50  [color=blue, key=0, style=bold];
m0_41 -> m0_42  [key=0, style=solid];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_44  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_9  [key=2, style=dotted];
m0_43 -> m0_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_46  [key=2, style=dotted];
m0_44 -> m0_11  [key=2, style=dotted];
m0_45 -> m0_41  [color=blue, key=0, style=bold];
m0_71 -> m0_72  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_76  [key=2, style=dotted];
m0_72 -> m0_74  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_9  [key=2, style=dotted];
m0_73 -> m0_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_56  [key=2, style=dotted];
m0_74 -> m0_57  [key=2, style=dotted];
m0_74 -> m0_58  [key=2, style=dotted];
m0_75 -> m0_71  [color=blue, key=0, style=bold];
m0_191 -> m0_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m0_192 -> m0_104  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_192 -> m0_108  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_6  [key=2, style=dotted];
m1_3 -> m1_7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_4  [key=0, style=solid];
m1_2 -> m1_5  [key=2, style=dotted];
m1_4 -> n11  [color=blue, key=0, style=bold];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_10  [key=2, style=dotted];
m1_9 -> m1_7  [color=blue, key=0, style=bold];
m1_11 -> m1_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_12 -> m1_8  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m2_82 -> m2_14  [color=blue, key=0, style=bold];
m2_86 -> m2_87  [color=green, key=0, style=solid];
m2_87 -> m2_88  [color=green, key=0, style=solid];
m2_87 -> m2_12  [color=green, key=2, style=dotted];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_85  [key=2, style=dotted];
m2_73 -> m2_74  [key=0, style=solid];
m2_73 -> m2_85  [key=2, style=dotted];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_25  [key=2, style=dotted];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_29  [key=2, style=dotted];
m2_26 -> m2_27  [key=0, style=solid];
m2_22 -> m2_23  [key=0, style=solid];
m2_24 -> m2_22  [color=blue, key=0, style=bold];
m2_28 -> m2_26  [color=blue, key=0, style=bold];
m2_46 -> m2_47  [key=0, style=solid];
m2_50 -> m2_51  [key=0, style=solid];
m2_53 -> m2_54  [key=0, style=solid];
m2_56 -> m2_57  [key=0, style=solid];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_20  [key=2, style=dotted];
m2_59 -> m2_60  [key=0, style=solid];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_49  [key=2, style=dotted];
m2_48 -> m2_46  [color=blue, key=0, style=bold];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_49  [key=2, style=dotted];
m2_52 -> m2_50  [color=blue, key=0, style=bold];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_49  [key=2, style=dotted];
m2_55 -> m2_53  [color=blue, key=0, style=bold];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_12  [key=2, style=dotted];
m2_58 -> m2_56  [color=blue, key=0, style=bold];
m2_61 -> m2_59  [color=blue, key=0, style=bold];
m2_75 -> m2_77  [color=darkseagreen4, key=1, label=c, style=dashed];
m2_75 -> m2_76  [color=green, key=0, style=solid];
m2_75 -> m2_78  [color=darkseagreen4, key=1, label=c, style=dashed];
m2_75 -> m2_79  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m2_75 -> m2_80  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m2_75 -> m2_83  [key=2, style=dotted];
m2_77 -> m2_78  [color=green, key=0, style=solid];
m2_77 -> m2_80  [color=green, key=0, style=solid];
m2_77 -> m2_82  [color=green, key=2, style=dotted];
m2_77 -> m2_41  [color=green, key=2, style=dotted];
m2_77 -> m2_83  [color=green, key=2, style=dotted];
m2_77 -> m2_88  [key=2, style=dotted];
m2_76 -> m2_77  [color=green, key=0, style=solid];
m2_76 -> m2_87  [key=2, style=dotted];
m2_76 -> m2_79  [color=darkseagreen4, key=1, label=n, style=dashed];
m2_78 -> m2_79  [color=green, key=0, style=solid];
m2_78 -> m2_84  [color=green, key=2, style=dotted];
m2_78 -> m2_108  [color=green, key=2, style=dotted];
m2_78 -> m2_25  [key=2, style=dotted];
m2_80 -> m2_81  [color=green, key=0, style=solid];
m2_80 -> m2_82  [key=0, style=solid];
m2_80 -> m2_89  [key=2, style=dotted];
m2_89 -> m2_90  [color=green, key=0, style=solid];
m2_79 -> m2_81  [color=green, key=0, style=solid];
m2_79 -> m2_44  [color=green, key=2, style=dotted];
m2_79 -> m2_20  [color=green, key=2, style=dotted];
m2_79 -> m2_86  [color=green, key=1, label="lambda expression", style=dashed];
m2_79 -> m2_75  [key=0, style=solid];
m2_79 -> m2_85  [key=2, style=dotted];
m2_81 -> m2_75  [color=blue, key=0, style=bold];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_89  [key=2, style=dotted];
m2_81 -> m2_83  [key=2, style=dotted];
m2_81 -> m2_12  [key=2, style=dotted];
m2_88 -> m2_86  [color=blue, key=0, style=bold];
m2_90 -> m2_91  [color=green, key=0, style=solid];
m2_90 -> m2_92  [key=0, style=solid];
m2_91 -> m2_89  [color=blue, key=0, style=bold];
m2_91 -> m2_104  [key=0, style=solid];
m2_91 -> m2_9  [key=2, style=dotted];
m2_13 -> m2_90  [key=0, style=solid];
m2_13 -> m2_96  [color=crimson, key=0, style=bold];
m2_13 -> m2_97  [color=crimson, key=0, style=bold];
m2_13 -> m2_100  [color=crimson, key=0, style=bold];
m2_13 -> m2_102  [color=crimson, key=0, style=bold];
m2_13 -> m2_103  [color=crimson, key=0, style=bold];
m2_13 -> m2_92  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_13 -> m2_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_13 -> m2_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_85  [key=2, style=dotted];
m2_97 -> m2_98  [key=0, style=solid];
m2_100 -> m2_101  [key=0, style=solid];
m2_102 -> m2_103  [key=0, style=solid];
m2_102 -> m2_85  [key=2, style=dotted];
m2_103 -> m2_104  [key=0, style=solid];
m2_103 -> m2_12  [key=2, style=dotted];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_104  [key=0, style=solid];
m2_92 -> m2_11  [key=2, style=dotted];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_83  [key=2, style=dotted];
m2_93 -> m2_96  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_93 -> m2_101  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_99 -> m2_100  [key=0, style=solid];
m2_99 -> m2_106  [key=2, style=dotted];
m2_99 -> m2_107  [key=2, style=dotted];
m2_94 -> m2_95  [key=0, style=solid];
m2_94 -> m2_105  [key=2, style=dotted];
m2_94 -> m2_98  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
m2_101 -> m2_102  [key=0, style=solid];
m2_101 -> m2_108  [key=2, style=dotted];
m2_101 -> m2_103  [color=darkseagreen4, key=1, label=parts, style=dashed];
m2_95 -> m2_96  [key=0, style=solid];
m2_95 -> m2_98  [key=0, style=solid];
m2_98 -> m2_99  [key=0, style=solid];
m2_98 -> m2_101  [key=0, style=solid];
m2_104 -> m2_13  [color=blue, key=0, style=bold];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_86  [key=2, style=dotted];
m2_72 -> m2_74  [color=darkseagreen4, key=1, label=first, style=dashed];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_0 -> m2_6  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_11  [key=2, style=dotted];
m2_5 -> m2_12  [key=2, style=dotted];
m2_5 -> m2_13  [key=2, style=dotted];
m2_5 -> m2_14  [key=2, style=dotted];
m2_5 -> m2_15  [key=2, style=dotted];
m2_5 -> m2_5  [color=darkseagreen4, key=1, label=arg, style=dashed];
m2_5 -> m2_7  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_16  [key=2, style=dotted];
m2_6 -> m2_17  [key=2, style=dotted];
m2_6 -> m2_15  [key=2, style=dotted];
m2_6 -> m2_6  [color=darkseagreen4, key=1, label=t, style=dashed];
m2_6 -> m2_27  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
m2_2 -> m2_8  [key=0, style=solid];
m2_2 -> m2_9  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_10  [key=2, style=dotted];
m2_3 -> m2_23  [color=darkseagreen4, key=1, label=errors, style=dashed];
m2_3 -> m2_7  [color=darkseagreen4, key=1, label=errors, style=dashed];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_23  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m2_4 -> m2_4  [color=darkorchid, key=3, label="Local variable System.Action<CommandLine.Error> onError", style=bold];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_18  [key=2, style=dotted];
m2_7 -> m2_19  [key=2, style=dotted];
m2_7 -> m2_20  [key=2, style=dotted];
m2_7 -> n51  [key=2, style=dotted];
m2_7 -> m2_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_7 -> m2_7  [color=darkseagreen4, key=1, label=t, style=dashed];
m2_8 -> m2_0  [color=blue, key=0, style=bold];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_30 -> m2_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_30 -> m2_35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_30 -> m2_37  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_33  [key=0, style=solid];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_37  [key=0, style=solid];
m2_33 -> m2_39  [key=2, style=dotted];
m2_33 -> m2_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_40  [key=2, style=dotted];
m2_34 -> m2_41  [key=2, style=dotted];
m2_34 -> m2_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_34 -> m2_36  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_42  [key=2, style=dotted];
m2_35 -> m2_43  [key=2, style=dotted];
m2_35 -> m2_44  [key=2, style=dotted];
m2_35 -> m2_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_35 -> m2_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_35 -> m2_60  [color=darkseagreen4, key=1, label=values, style=dashed];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_41  [key=2, style=dotted];
m2_32 -> m2_38  [key=0, style=solid];
m2_32 -> m2_9  [key=2, style=dotted];
m2_36 -> m2_38  [key=0, style=solid];
m2_36 -> m2_45  [key=2, style=dotted];
m2_36 -> m2_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_38 -> m2_30  [color=blue, key=0, style=bold];
m2_62 -> m2_63  [color=green, key=0, style=solid];
m2_62 -> m2_65  [color=green, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
m2_62 -> m2_66  [color=green, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
m2_62 -> m2_67  [color=green, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
m2_62 -> m2_77  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>", style=dashed];
m2_62 -> m2_68  [color=green, key=1, label="CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>", style=dashed];
m2_62 -> m2_64  [key=0, style=solid];
m2_63 -> m2_64  [color=green, key=0, style=solid];
m2_63 -> m2_65  [color=green, key=0, style=solid];
m2_63 -> m2_82  [key=0, style=solid];
m2_63 -> m2_9  [key=2, style=dotted];
m2_64 -> m2_69  [color=green, key=0, style=solid];
m2_64 -> m2_9  [color=green, key=2, style=dotted];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_82  [key=0, style=solid];
m2_65 -> m2_66  [color=green, key=0, style=solid];
m2_65 -> m2_67  [color=green, key=0, style=solid];
m2_65 -> m2_70  [color=green, key=2, style=dotted];
m2_65 -> m2_89  [color=green, key=2, style=dotted];
m2_65 -> m2_83  [key=2, style=dotted];
m2_65 -> m2_72  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_65 -> m2_75  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_65 -> m2_80  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_65 -> m2_81  [color=darkseagreen4, key=1, label=text, style=dashed];
m2_66 -> m2_69  [color=green, key=0, style=solid];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_84  [key=2, style=dotted];
m2_67 -> m2_68  [color=green, key=0, style=solid];
m2_67 -> m2_72  [color=green, key=2, style=dotted];
m2_67 -> m2_75  [color=green, key=1, label="lambda expression", style=dashed];
m2_67 -> m2_12  [key=2, style=dotted];
m2_68 -> m2_69  [color=green, key=0, style=solid];
m2_68 -> m2_73  [color=green, key=2, style=dotted];
m2_68 -> m2_74  [color=green, key=2, style=dotted];
m2_68 -> m2_89  [color=green, key=1, label="lambda expression", style=dashed];
m2_69 -> m2_62  [color=blue, key=0, style=bold];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_72  [key=0, style=solid];
m2_14 -> m2_62  [key=0, style=solid];
m2_14 -> m2_67  [color=crimson, key=0, style=bold];
m2_14 -> m2_68  [color=crimson, key=0, style=bold];
m2_14 -> m2_70  [color=crimson, key=0, style=bold];
m2_14 -> m2_71  [color=crimson, key=0, style=bold];
m2_14 -> m2_73  [color=crimson, key=0, style=bold];
m2_14 -> m2_79  [color=crimson, key=0, style=bold];
m2_14 -> m2_81  [color=crimson, key=0, style=bold];
m2_14 -> m2_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_14 -> m2_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_14 -> m2_69  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_14 -> m2_77  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m2_71 -> m2_72  [key=0, style=solid];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_10  [key=2, style=dotted];
m2_74 -> m2_77  [color=darkseagreen4, key=1, label=seen, style=dashed];
m2_74 -> m2_78  [color=darkseagreen4, key=1, label=seen, style=dashed];
m2_74 -> m2_80  [color=darkseagreen4, key=1, label=seen, style=dashed];
m2_74 -> m2_81  [color=darkseagreen4, key=1, label=seen, style=dashed];
m2_109 -> m2_23  [color=darkseagreen4, key=1, label=errors, style=dashed];
m2_110 -> m2_27  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
m2_111 -> m2_60  [color=darkseagreen4, key=1, label=values, style=dashed];
m2_140 -> m2_77  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<string>>", style=dashed];
m3_0 -> m3_1  [color=green, key=0, style=solid];
m3_1 -> m3_2  [color=green, key=0, style=solid];
m3_1 -> m3_6  [color=green, key=2, style=dotted];
m3_1 -> m3_7  [color=green, key=2, style=dotted];
m3_1 -> m3_4  [color=green, key=1, label=expectedTokens, style=dashed];
m3_2 -> m3_3  [color=green, key=0, style=solid];
m3_2 -> m3_8  [color=green, key=2, style=dotted];
m3_2 -> m3_9  [color=green, key=2, style=dotted];
m3_2 -> m3_17  [color=green, key=1, label=specs, style=dashed];
m3_4 -> m3_5  [color=green, key=0, style=solid];
m3_4 -> m3_14  [color=green, key=2, style=dotted];
m3_4 -> m3_15  [color=green, key=2, style=dotted];
m3_3 -> m3_4  [color=green, key=0, style=solid];
m3_3 -> m3_10  [color=green, key=2, style=dotted];
m3_3 -> m3_6  [color=green, key=2, style=dotted];
m3_3 -> m3_7  [color=green, key=2, style=dotted];
m3_3 -> m3_11  [color=green, key=2, style=dotted];
m3_3 -> m3_12  [color=green, key=2, style=dotted];
m3_3 -> d9  [color=green, key=2, style=dotted];
m3_3 -> m3_16  [color=green, key=1, label="lambda expression", style=dashed];
m3_5 -> m3_0  [color=blue, key=0, style=bold];
m3_16 -> m3_17  [color=green, key=0, style=solid];
m3_17 -> m3_18  [color=green, key=0, style=solid];
m3_17 -> m3_19  [color=green, key=2, style=dotted];
m3_18 -> m3_16  [color=blue, key=0, style=bold];
m3_20 -> m3_17  [color=green, key=1, label=specs, style=dashed];
}
