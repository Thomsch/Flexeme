digraph  {
n111 [label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
n112 [label=T, span=""];
n0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
n1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", label="return from pi in type.FlattenHierarchy().SelectMany(x => x.GetProperties())\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                       attrs.OfType<OptionAttribute>().Any() ||\r\n                       attrs.OfType<ValueAttribute>().Any()\r\n                   group pi by pi.Name into g\r\n                   select selector(g.First());", span="16-22"];
n2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
n3 [cluster="System.Type.FlattenHierarchy()", label="Entry System.Type.FlattenHierarchy()", span="25-25"];
n4 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
n5 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
n6 [cluster="Unk.>", label="Entry Unk.>", span=""];
n7 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n8 [cluster="Unk.First", label="Entry Unk.First", span=""];
n9 [cluster="Unk.selector", label="Entry Unk.selector", span=""];
n10 [cluster="lambda expression", label="Entry lambda expression", span="16-16"];
n11 [cluster="lambda expression", label="x.GetProperties()", span="16-16"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="16-16"];
n13 [cluster="System.Type.GetProperties()", label="Entry System.Type.GetProperties()", span="0-0"];
n14 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="25-25"];
n15 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="type == null", span="27-27"];
n16 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="yield break;", span="29-29"];
n17 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="yield return type;", span="31-31"];
n19 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="yield return @interface;", span="34-34"];
n21 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="yield return @interface;", span="38-38"];
n18 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="type.SafeGetInterfaces()", span="32-32"];
n20 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="FlattenHierarchy(type.BaseType)", span="36-36"];
n23 [cluster="System.Type.SafeGetInterfaces()", label="Entry System.Type.SafeGetInterfaces()", span="42-42"];
n22 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="25-25"];
n24 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="42-42"];
n25 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", label="return type == null ? Enumerable.Empty<Type>() : type.GetInterfaces();", span="44-44"];
n26 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="42-42"];
n27 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n28 [cluster="System.Type.GetInterfaces()", label="Entry System.Type.GetInterfaces()", span="0-0"];
n29 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="47-47"];
n30 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", label="return type == typeof(bool)\r\n                       ? TargetType.Switch\r\n                       : type == typeof(string)\r\n                             ? TargetType.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? TargetType.Sequence\r\n                                   : TargetType.Scalar;", span="49-55"];
n31 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="47-47"];
n32 [cluster="System.Type.IsAssignableFrom(System.Type)", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
n33 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58"];
n34 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="64-70"];
n39 [cluster="lambda expression", label="specProp.Property.SetValue(current, selector(specProp))", span="68-68"];
n40 [cluster="lambda expression", label="return instance;", span="69-69"];
n35 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58"];
n36 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n37 [cluster="Unk.Aggregate", label="Entry Unk.Aggregate", span=""];
n38 [cluster="lambda expression", label="Entry lambda expression", span="66-70"];
n42 [cluster="Unk.SetValue", label="Entry Unk.SetValue", span=""];
n41 [cluster="lambda expression", label="Exit lambda expression", span="66-70"];
n43 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="73-73"];
n44 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="75-75"];
n45 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="property.SetValue(instance, value, null)", span="79-79"];
n54 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="return instance;", span="98-98"];
n59 [cluster="lambda expression", label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="75-75"];
n47 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="83-83"];
n49 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="87-87"];
n51 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="91-91"];
n53 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="95-95"];
n46 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=TargetException, span="81-81"];
n48 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=TargetParameterCountException, span="85-85"];
n50 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=MethodAccessException, span="89-89"];
n52 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=TargetInvocationException, span="93-93"];
n56 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
n57 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n55 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="73-73"];
n58 [cluster="lambda expression", label="Entry lambda expression", span="75-75"];
n60 [cluster="lambda expression", label="Exit lambda expression", span="75-75"];
n61 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
n62 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101"];
n63 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="return Array.CreateInstance(type, 0);", span="103-103"];
n64 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101"];
n65 [cluster="System.Array.CreateInstance(System.Type, int)", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
n66 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106"];
n67 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="108-111"];
n68 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", label="return e.Compile()();", span="112-112"];
n70 [cluster="System.Linq.Expressions.Expression.Default(System.Type)", label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0"];
n71 [cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0"];
n72 [cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0"];
n69 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106"];
n73 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
n74 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n75 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115"];
n80 [cluster="System.Type.GetProperties(System.Reflection.BindingFlags)", label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0"];
n83 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
n81 [cluster="System.Type.GetFields(System.Reflection.BindingFlags)", label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0"];
n82 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n79 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115"];
n85 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
n86 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="122-122"];
n87 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="type == typeof(string)", span="124-124"];
n89 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>)", span="128-128"];
n90 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="return type.GetGenericArguments()[0].CreateEmptyArray();", span="130-130"];
n91 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="return type.GetDefaultValue();", span="132-132"];
n88 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="return string.Empty;", span="126-126"];
n93 [cluster="System.Type.GetGenericTypeDefinition()", label="Entry System.Type.GetGenericTypeDefinition()", span="0-0"];
n92 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="122-122"];
n94 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n95 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="101-101"];
n96 [cluster="System.Type.GetDefaultValue()", label="Entry System.Type.GetDefaultValue()", span="106-106"];
n97 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="135-135"];
n98 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="type.IsMutable()", span="137-137"];
n99 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="return Activator.CreateInstance(type);", span="139-139"];
n100 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="var ctorTypes = type.GetSpecifications(pi => pi.PropertyType).ToArray()", span="142-142"];
n101 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="return ReflectionHelper.CreateDefaultImmutableInstance(type, ctorTypes);", span="144-144"];
n103 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="115-115"];
n105 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
n106 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
n108 [cluster="lambda expression", label="Entry lambda expression", span="142-142"];
n102 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="135-135"];
n104 [cluster="System.Activator.CreateInstance(System.Type)", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
n107 [cluster="CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", label="Entry CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", span="50-50"];
n109 [cluster="lambda expression", label="pi.PropertyType", span="142-142"];
n110 [cluster="lambda expression", label="Exit lambda expression", span="142-142"];
d76 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=0, label="Func<bool> isMutable = () => {\r\n                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite);\r\n                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any();\r\n                return props || fields;\r\n            }", prediction=0, span="117-121"];
d77 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=0, label="return type != typeof(object) ? isMutable() : true;", prediction=1, span="122-122"];
d80 [cluster="lambda expression", color=green, community=0, label="var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", prediction=2, span="118-118"];
d117 [label="System.Type", span=""];
d81 [cluster="lambda expression", color=green, community=0, label="var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", prediction=3, span="119-119"];
d87 [cluster="lambda expression", label="Entry lambda expression", span="118-118"];
d82 [cluster="lambda expression", color=green, community=0, label="return props || fields;", prediction=2, span="120-120"];
d88 [cluster="lambda expression", color=green, community=0, label="p.CanWrite", prediction=5, span="118-118"];
d89 [cluster="lambda expression", label="Exit lambda expression", span="118-118"];
n111 -> n39  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
n112 -> n40  [color=darkseagreen4, key=1, label=T, style=dashed];
n1 -> n10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n14 -> n18  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n14 -> n20  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n33 -> n39  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
n33 -> n40  [color=darkseagreen4, key=1, label=T, style=dashed];
n34 -> n38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n45  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
n43 -> n54  [color=darkseagreen4, key=1, label=T, style=dashed];
n44 -> n59  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
n44 -> n47  [color=darkseagreen4, key=1, label=fail, style=dashed];
n44 -> n49  [color=darkseagreen4, key=1, label=fail, style=dashed];
n44 -> n51  [color=darkseagreen4, key=1, label=fail, style=dashed];
n44 -> n53  [color=darkseagreen4, key=1, label=fail, style=dashed];
n75 -> d77  [color=green, key=1, label="System.Type", style=dashed];
n86 -> n89  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n86 -> n90  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n86 -> n91  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n97 -> n99  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n97 -> n101  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n100 -> n108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d80 -> d87  [color=green, key=1, label="lambda expression", style=dashed];
d80 -> d82  [color=green, key=1, label=props, style=dashed];
}
