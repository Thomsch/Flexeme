digraph  {
n111 [label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
n112 [label=T, span=""];
n0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
n1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", label="return from pi in type.FlattenHierarchy().SelectMany(x => x.GetProperties())\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                       attrs.OfType<OptionAttribute>().Any() ||\r\n                       attrs.OfType<ValueAttribute>().Any()\r\n                   group pi by pi.Name into g\r\n                   select selector(g.First());", span="16-22"];
n2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
n3 [cluster="System.Type.FlattenHierarchy()", label="Entry System.Type.FlattenHierarchy()", span="25-25"];
n4 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
n5 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
n6 [cluster="Unk.>", label="Entry Unk.>", span=""];
n7 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n8 [cluster="Unk.First", label="Entry Unk.First", span=""];
n9 [cluster="Unk.selector", label="Entry Unk.selector", span=""];
n10 [cluster="lambda expression", label="Entry lambda expression", span="16-16"];
n11 [cluster="lambda expression", label="x.GetProperties()", span="16-16"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="16-16"];
n13 [cluster="System.Type.GetProperties()", label="Entry System.Type.GetProperties()", span="0-0"];
n14 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="25-25"];
n15 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="type == null", span="27-27"];
n16 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="yield break;", span="29-29"];
n17 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="yield return type;", span="31-31"];
n19 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="yield return @interface;", span="34-34"];
n21 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="yield return @interface;", span="38-38"];
n18 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="type.SafeGetInterfaces()", span="32-32"];
n20 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="FlattenHierarchy(type.BaseType)", span="36-36"];
n23 [cluster="System.Type.SafeGetInterfaces()", label="Entry System.Type.SafeGetInterfaces()", span="42-42"];
n22 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="25-25"];
n24 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="42-42"];
n25 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", label="return type == null ? Enumerable.Empty<Type>() : type.GetInterfaces();", span="44-44"];
n26 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="42-42"];
n27 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n28 [cluster="System.Type.GetInterfaces()", label="Entry System.Type.GetInterfaces()", span="0-0"];
n29 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="47-47"];
n30 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", label="return type == typeof(bool)\r\n                       ? TargetType.Switch\r\n                       : type == typeof(string)\r\n                             ? TargetType.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? TargetType.Sequence\r\n                                   : TargetType.Scalar;", span="49-55"];
n31 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="47-47"];
n32 [cluster="System.Type.IsAssignableFrom(System.Type)", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
n33 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58"];
n34 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="64-70"];
n39 [cluster="lambda expression", label="specProp.Property.SetValue(current, selector(specProp))", span="68-68"];
n40 [cluster="lambda expression", label="return instance;", span="69-69"];
n35 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58"];
n36 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n37 [cluster="Unk.Aggregate", label="Entry Unk.Aggregate", span=""];
n38 [cluster="lambda expression", label="Entry lambda expression", span="66-70"];
n42 [cluster="Unk.SetValue", label="Entry Unk.SetValue", span=""];
n41 [cluster="lambda expression", label="Exit lambda expression", span="66-70"];
n43 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="73-73"];
n44 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="75-75"];
n45 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="property.SetValue(instance, value, null)", span="79-79"];
n54 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="return instance;", span="98-98"];
n59 [cluster="lambda expression", label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="75-75"];
n47 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="83-83"];
n49 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="87-87"];
n51 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="91-91"];
n53 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="fail(e)", span="95-95"];
n46 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=TargetException, span="81-81"];
n48 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=TargetParameterCountException, span="85-85"];
n50 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=MethodAccessException, span="89-89"];
n52 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label=TargetInvocationException, span="93-93"];
n56 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
n57 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n55 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="73-73"];
n58 [cluster="lambda expression", label="Entry lambda expression", span="75-75"];
n60 [cluster="lambda expression", label="Exit lambda expression", span="75-75"];
n61 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
n62 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101"];
n63 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="return Array.CreateInstance(type, 0);", span="103-103"];
n64 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101"];
n65 [cluster="System.Array.CreateInstance(System.Type, int)", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
n66 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106"];
n67 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="108-111"];
n68 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", label="return e.Compile()();", span="112-112"];
n70 [cluster="System.Linq.Expressions.Expression.Default(System.Type)", label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0"];
n71 [cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0"];
n72 [cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0"];
n69 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106"];
n73 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
n74 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n75 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115"];
n76 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=red, community=0, label="0: var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="117-117"];
n77 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=red, community=0, label="0: var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="118-118"];
n80 [cluster="System.Type.GetProperties(System.Reflection.BindingFlags)", label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0"];
n83 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
n78 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=red, community=0, label="0: return props || fields;", span="119-119"];
n81 [cluster="System.Type.GetFields(System.Reflection.BindingFlags)", label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0"];
n82 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n79 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115"];
n84 [cluster="lambda expression", color=red, community=0, label="0: p.CanWrite", span="117-117"];
n85 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
n86 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="122-122"];
n87 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="type == typeof(string)", span="124-124"];
n89 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>)", span="128-128"];
n90 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="return type.GetGenericArguments()[0].CreateEmptyArray();", span="130-130"];
n91 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="return type.GetDefaultValue();", span="132-132"];
n88 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="return string.Empty;", span="126-126"];
n93 [cluster="System.Type.GetGenericTypeDefinition()", label="Entry System.Type.GetGenericTypeDefinition()", span="0-0"];
n92 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="122-122"];
n94 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n95 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="101-101"];
n96 [cluster="System.Type.GetDefaultValue()", label="Entry System.Type.GetDefaultValue()", span="106-106"];
n97 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="Entry CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="135-135"];
n98 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="type.IsMutable()", span="137-137"];
n99 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="return Activator.CreateInstance(type);", span="139-139"];
n100 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="var ctorTypes = type.GetSpecifications(pi => pi.PropertyType).ToArray()", span="142-142"];
n101 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="return ReflectionHelper.CreateDefaultImmutableInstance(type, ctorTypes);", span="144-144"];
n103 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="115-115"];
n105 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
n106 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
n108 [cluster="lambda expression", label="Entry lambda expression", span="142-142"];
n102 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", label="Exit CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="135-135"];
n104 [cluster="System.Activator.CreateInstance(System.Type)", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
n107 [cluster="CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", label="Entry CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", span="50-50"];
n109 [cluster="lambda expression", label="pi.PropertyType", span="142-142"];
n110 [cluster="lambda expression", label="Exit lambda expression", span="142-142"];
d76 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=0, label="3: Func<bool> isMutable = () => {\r\n                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite);\r\n                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any();\r\n                return props || fields;\r\n            }", span="117-121"];
d77 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=0, label="0: return type != typeof(object) ? isMutable() : true;", span="122-122"];
d80 [cluster="lambda expression", color=green, community=0, label="0: var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="118-118"];
d117 [label="System.Type", span=""];
d81 [cluster="lambda expression", color=green, community=0, label="0: var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="119-119"];
d87 [cluster="lambda expression", label="Entry lambda expression", span="118-118"];
d82 [cluster="lambda expression", color=green, community=0, label="2: return props || fields;", span="120-120"];
d88 [cluster="lambda expression", color=green, community=0, label="1: p.CanWrite", span="118-118"];
d89 [cluster="lambda expression", label="Exit lambda expression", span="118-118"];
n111 -> n39  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
n112 -> n40  [color=darkseagreen4, key=1, label=T, style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n100  [color=darkorchid, key=3, label="Parameter variable System.Func<System.Reflection.PropertyInfo, T> selector", style=bold];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n1 -> n6  [key=2, style=dotted];
n1 -> n7  [key=2, style=dotted];
n1 -> n8  [key=2, style=dotted];
n1 -> n9  [key=2, style=dotted];
n1 -> n10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n1 -> n1  [color=darkseagreen4, key=1, label=pi, style=dashed];
n2 -> n0  [color=blue, key=0, style=bold];
n10 -> n11  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n13  [key=2, style=dotted];
n12 -> n10  [color=blue, key=0, style=bold];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [color=crimson, key=0, style=bold];
n14 -> n17  [color=crimson, key=0, style=bold];
n14 -> n19  [color=crimson, key=0, style=bold];
n14 -> n21  [color=crimson, key=0, style=bold];
n14 -> n18  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n14 -> n20  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n19 -> n18  [key=0, style=solid];
n21 -> n20  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=0, style=solid];
n18 -> n23  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [key=0, style=solid];
n20 -> n14  [key=2, style=dotted];
n22 -> n14  [color=blue, key=0, style=bold];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=2, style=dotted];
n25 -> n28  [key=2, style=dotted];
n26 -> n24  [color=blue, key=0, style=bold];
n29 -> n30  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=2, style=dotted];
n31 -> n29  [color=blue, key=0, style=bold];
n33 -> n34  [key=0, style=solid];
n33 -> n39  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
n33 -> n40  [color=darkseagreen4, key=1, label=T, style=dashed];
n34 -> n35  [key=0, style=solid];
n34 -> n36  [key=2, style=dotted];
n34 -> n37  [key=2, style=dotted];
n34 -> n38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n39 -> n40  [key=0, style=solid];
n39 -> n9  [key=2, style=dotted];
n39 -> n42  [key=2, style=dotted];
n40 -> n41  [key=0, style=solid];
n35 -> n33  [color=blue, key=0, style=bold];
n38 -> n39  [key=0, style=solid];
n41 -> n38  [color=blue, key=0, style=bold];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
n43 -> n54  [color=darkseagreen4, key=1, label=T, style=dashed];
n43 -> n43  [color=darkorchid, key=3, label="method methodReturn T SetValue", style=bold];
n44 -> n45  [key=0, style=solid];
n44 -> n59  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
n44 -> n47  [color=darkseagreen4, key=1, label=fail, style=dashed];
n44 -> n49  [color=darkseagreen4, key=1, label=fail, style=dashed];
n44 -> n51  [color=darkseagreen4, key=1, label=fail, style=dashed];
n44 -> n53  [color=darkseagreen4, key=1, label=fail, style=dashed];
n44 -> n44  [color=darkorchid, key=3, label="Local variable System.Action<System.Exception> fail", style=bold];
n45 -> n46  [key=0, style=solid];
n45 -> n48  [key=0, style=solid];
n45 -> n50  [key=0, style=solid];
n45 -> n52  [key=0, style=solid];
n45 -> n54  [key=0, style=solid];
n45 -> n56  [key=2, style=dotted];
n54 -> n55  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n61  [key=2, style=dotted];
n47 -> n54  [key=0, style=solid];
n47 -> n57  [key=2, style=dotted];
n49 -> n54  [key=0, style=solid];
n49 -> n57  [key=2, style=dotted];
n51 -> n54  [key=0, style=solid];
n51 -> n57  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n57  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n48 -> n49  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n55 -> n43  [color=blue, key=0, style=bold];
n58 -> n59  [key=0, style=solid];
n60 -> n58  [color=blue, key=0, style=bold];
n62 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n65  [key=2, style=dotted];
n64 -> n62  [color=blue, key=0, style=bold];
n66 -> n67  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n70  [key=2, style=dotted];
n67 -> n71  [key=2, style=dotted];
n67 -> n72  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n68 -> n73  [key=2, style=dotted];
n68 -> n74  [key=2, style=dotted];
n69 -> n66  [color=blue, key=0, style=bold];
n75 -> n76  [color=red, key=0, style=solid];
n75 -> n77  [color=red, key=1, label="System.Type", style=dashed];
n75 -> d76  [color=green, key=0, style=solid];
n75 -> d80  [color=green, key=1, label="System.Type", style=dashed];
n75 -> d81  [color=green, key=1, label="System.Type", style=dashed];
n75 -> d77  [color=green, key=1, label="System.Type", style=dashed];
n76 -> n77  [color=red, key=0, style=solid];
n76 -> n80  [color=red, key=2, style=dotted];
n76 -> n7  [color=red, key=2, style=dotted];
n76 -> n83  [color=red, key=1, label="lambda expression", style=dashed];
n76 -> n78  [color=red, key=1, label=props, style=dashed];
n77 -> n78  [color=red, key=0, style=solid];
n77 -> n81  [color=red, key=2, style=dotted];
n77 -> n82  [color=red, key=2, style=dotted];
n83 -> n84  [color=red, key=0, style=solid];
n83 -> d80  [color=green, key=0, style=solid];
n78 -> n79  [color=red, key=0, style=solid];
n79 -> n75  [color=blue, key=0, style=bold];
n84 -> n85  [color=red, key=0, style=solid];
n85 -> n83  [color=blue, key=0, style=bold];
n86 -> n87  [key=0, style=solid];
n86 -> n89  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n86 -> n90  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n86 -> n91  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n86 -> n62  [color=darkorchid, key=3, label="method methodReturn object CreateDefaultForImmutable", style=bold];
n86 -> n66  [color=darkorchid, key=3, label="method methodReturn object CreateDefaultForImmutable", style=bold];
n87 -> n88  [key=0, style=solid];
n87 -> n89  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n91  [key=0, style=solid];
n89 -> n93  [key=2, style=dotted];
n90 -> n92  [key=0, style=solid];
n90 -> n94  [key=2, style=dotted];
n90 -> n95  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n91 -> n96  [key=2, style=dotted];
n88 -> n92  [key=0, style=solid];
n92 -> n86  [color=blue, key=0, style=bold];
n97 -> n98  [key=0, style=solid];
n97 -> n99  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n97 -> n100  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n97 -> n101  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n98 -> n99  [key=0, style=solid];
n98 -> n100  [key=0, style=solid];
n98 -> n103  [key=2, style=dotted];
n99 -> n102  [key=0, style=solid];
n99 -> n104  [key=2, style=dotted];
n100 -> n101  [key=0, style=solid];
n100 -> n105  [key=2, style=dotted];
n100 -> n106  [key=2, style=dotted];
n100 -> n108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n101 -> n102  [key=0, style=solid];
n101 -> n107  [key=2, style=dotted];
n108 -> n109  [key=0, style=solid];
n102 -> n97  [color=blue, key=0, style=bold];
n109 -> n110  [key=0, style=solid];
n110 -> n108  [color=blue, key=0, style=bold];
d76 -> d76  [color=green, key=3, label="Local variable System.Func<bool> isMutable", style=bold];
d76 -> d77  [color=green, key=0, style=solid];
d77 -> n79  [color=green, key=0, style=solid];
d77 -> n74  [color=green, key=2, style=dotted];
d80 -> d81  [color=green, key=0, style=solid];
d80 -> n80  [color=green, key=2, style=dotted];
d80 -> n7  [color=green, key=2, style=dotted];
d80 -> d87  [color=green, key=1, label="lambda expression", style=dashed];
d80 -> d82  [color=green, key=1, label=props, style=dashed];
d117 -> d80  [color=green, key=1, label="System.Type", style=dashed];
d117 -> d81  [color=green, key=1, label="System.Type", style=dashed];
d81 -> d82  [color=green, key=0, style=solid];
d81 -> n81  [color=green, key=2, style=dotted];
d81 -> n82  [color=green, key=2, style=dotted];
d87 -> d88  [color=green, key=0, style=solid];
d82 -> n85  [color=green, key=0, style=solid];
d88 -> d89  [color=green, key=0, style=solid];
d89 -> d87  [color=blue, key=0, style=bold];
}
