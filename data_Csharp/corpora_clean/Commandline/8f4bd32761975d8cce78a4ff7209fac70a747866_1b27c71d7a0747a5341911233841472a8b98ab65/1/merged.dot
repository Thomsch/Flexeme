digraph  {
n111 [label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
n112 [label=T, span=""];
n0 [label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)"];
n1 [label="return from pi in type.FlattenHierarchy().SelectMany(x => x.GetProperties())\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                       attrs.OfType<OptionAttribute>().Any() ||\r\n                       attrs.OfType<ValueAttribute>().Any()\r\n                   group pi by pi.Name into g\r\n                   select selector(g.First());", span="16-22", cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)"];
n2 [label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)"];
n3 [label="Entry System.Type.FlattenHierarchy()", span="25-25", cluster="System.Type.FlattenHierarchy()"];
n4 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)"];
n5 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)"];
n6 [label="Entry Unk.>", span="", cluster="Unk.>"];
n7 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n8 [label="Entry Unk.First", span="", cluster="Unk.First"];
n9 [label="Entry Unk.selector", span="", cluster="Unk.selector"];
n10 [label="Entry lambda expression", span="16-16", cluster="lambda expression"];
n11 [label="x.GetProperties()", span="16-16", cluster="lambda expression"];
n12 [label="Exit lambda expression", span="16-16", cluster="lambda expression"];
n13 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()"];
n14 [label="Entry CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="25-25", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)"];
n15 [label="type == null", span="27-27", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)"];
n16 [label="yield break;", span="29-29", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)"];
n17 [label="yield return type;", span="31-31", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)"];
n19 [label="yield return @interface;", span="34-34", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)"];
n21 [label="yield return @interface;", span="38-38", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)"];
n18 [label="type.SafeGetInterfaces()", span="32-32", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)"];
n20 [label="FlattenHierarchy(type.BaseType)", span="36-36", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)"];
n23 [label="Entry System.Type.SafeGetInterfaces()", span="42-42", cluster="System.Type.SafeGetInterfaces()"];
n22 [label="Exit CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="25-25", cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)"];
n24 [label="Entry CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="42-42", cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)"];
n25 [label="return type == null ? Enumerable.Empty<Type>() : type.GetInterfaces();", span="44-44", cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)"];
n26 [label="Exit CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="42-42", cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)"];
n27 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
n28 [label="Entry System.Type.GetInterfaces()", span="0-0", cluster="System.Type.GetInterfaces()"];
n29 [label="Entry CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="47-47", cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)"];
n30 [label="return type == typeof(bool)\r\n                       ? TargetType.Switch\r\n                       : type == typeof(string)\r\n                             ? TargetType.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? TargetType.Sequence\r\n                                   : TargetType.Scalar;", span="49-55", cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)"];
n31 [label="Exit CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="47-47", cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)"];
n32 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)"];
n33 [label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)"];
n34 [label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="64-70", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)"];
n39 [label="specProp.Property.SetValue(current, selector(specProp))", span="68-68", cluster="lambda expression"];
n40 [label="return instance;", span="69-69", cluster="lambda expression"];
n35 [label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58", cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)"];
n36 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
n37 [label="Entry Unk.Aggregate", span="", cluster="Unk.Aggregate"];
n38 [label="Entry lambda expression", span="66-70", cluster="lambda expression"];
n42 [label="Entry Unk.SetValue", span="", cluster="Unk.SetValue"];
n41 [label="Exit lambda expression", span="66-70", cluster="lambda expression"];
n43 [label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="73-73", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n44 [label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="75-75", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n45 [label="property.SetValue(instance, value, null)", span="79-79", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n54 [label="return instance;", span="98-98", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n59 [label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="75-75", cluster="lambda expression"];
n47 [label="fail(e)", span="83-83", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n49 [label="fail(e)", span="87-87", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n51 [label="fail(e)", span="91-91", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n53 [label="fail(e)", span="95-95", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n46 [label=TargetException, span="81-81", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n48 [label=TargetParameterCountException, span="85-85", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n50 [label=MethodAccessException, span="89-89", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n52 [label=TargetInvocationException, span="93-93", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n56 [label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])"];
n57 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n55 [label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="73-73", cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)"];
n58 [label="Entry lambda expression", span="75-75", cluster="lambda expression"];
n60 [label="Exit lambda expression", span="75-75", cluster="lambda expression"];
n61 [label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0", cluster="System.ApplicationException.ApplicationException(string, System.Exception)"];
n62 [label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101", cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)"];
n63 [label="return Array.CreateInstance(type, 0);", span="103-103", cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)"];
n64 [label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="101-101", cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)"];
n65 [label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0", cluster="System.Array.CreateInstance(System.Type, int)"];
n66 [label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)"];
n67 [label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="108-111", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)"];
n68 [label="return e.Compile()();", span="112-112", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)"];
n70 [label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0", cluster="System.Linq.Expressions.Expression.Default(System.Type)"];
n71 [label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0", cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)"];
n72 [label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0", cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])"];
n69 [label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="106-106", cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)"];
n73 [label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0", cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()"];
n74 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
n75 [label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)"];
n76 [label="var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="117-117", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=red, community=0];
n77 [label="var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="118-118", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=red, community=0];
n80 [label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetProperties(System.Reflection.BindingFlags)"];
n83 [label="Entry lambda expression", span="117-117", cluster="lambda expression"];
n78 [label="return props || fields;", span="119-119", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=red, community=0];
n81 [label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetFields(System.Reflection.BindingFlags)"];
n82 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
n79 [label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="115-115", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)"];
n84 [label="p.CanWrite", span="117-117", cluster="lambda expression", color=red, community=0];
n85 [label="Exit lambda expression", span="117-117", cluster="lambda expression"];
n86 [label="Entry CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="122-122", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)"];
n87 [label="type == typeof(string)", span="124-124", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)"];
n89 [label="type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>)", span="128-128", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)"];
n90 [label="return type.GetGenericArguments()[0].CreateEmptyArray();", span="130-130", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)"];
n91 [label="return type.GetDefaultValue();", span="132-132", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)"];
n88 [label="return string.Empty;", span="126-126", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)"];
n93 [label="Entry System.Type.GetGenericTypeDefinition()", span="0-0", cluster="System.Type.GetGenericTypeDefinition()"];
n92 [label="Exit CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="122-122", cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)"];
n94 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
n95 [label="Entry System.Type.CreateEmptyArray()", span="101-101", cluster="System.Type.CreateEmptyArray()"];
n96 [label="Entry System.Type.GetDefaultValue()", span="106-106", cluster="System.Type.GetDefaultValue()"];
n97 [label="Entry CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="135-135", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)"];
n98 [label="type.IsMutable()", span="137-137", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)"];
n99 [label="return Activator.CreateInstance(type);", span="139-139", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)"];
n100 [label="var ctorTypes = type.GetSpecifications(pi => pi.PropertyType).ToArray()", span="142-142", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)"];
n101 [label="return ReflectionHelper.CreateDefaultImmutableInstance(type, ctorTypes);", span="144-144", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)"];
n103 [label="Entry System.Type.IsMutable()", span="115-115", cluster="System.Type.IsMutable()"];
n105 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)"];
n106 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()"];
n108 [label="Entry lambda expression", span="142-142", cluster="lambda expression"];
n102 [label="Exit CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="135-135", cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)"];
n104 [label="Entry System.Activator.CreateInstance(System.Type)", span="0-0", cluster="System.Activator.CreateInstance(System.Type)"];
n107 [label="Entry CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", span="50-50", cluster="CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])"];
n109 [label="pi.PropertyType", span="142-142", cluster="lambda expression"];
n110 [label="Exit lambda expression", span="142-142", cluster="lambda expression"];
d76 [label="Func<bool> isMutable = () => {\r\n                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite);\r\n                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any();\r\n                return props || fields;\r\n            }", span="117-121", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=0];
d77 [label="return type != typeof(object) ? isMutable() : true;", span="122-122", cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", color=green, community=0];
d80 [label="var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="118-118", cluster="lambda expression", color=green, community=0];
d117 [label="System.Type", span=""];
d81 [label="var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="119-119", cluster="lambda expression", color=green, community=0];
d87 [label="Entry lambda expression", span="118-118", cluster="lambda expression"];
d82 [label="return props || fields;", span="120-120", cluster="lambda expression", color=green, community=0];
d88 [label="p.CanWrite", span="118-118", cluster="lambda expression", color=green, community=0];
d89 [label="Exit lambda expression", span="118-118", cluster="lambda expression"];
n111 -> n39  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Core.SpecificationProperty, object>"];
n112 -> n40  [key=1, style=dashed, color=darkseagreen4, label=T];
n0 -> n1  [key=0, style=solid];
n0 -> n100  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<System.Reflection.PropertyInfo, T> selector"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n1 -> n6  [key=2, style=dotted];
n1 -> n7  [key=2, style=dotted];
n1 -> n8  [key=2, style=dotted];
n1 -> n9  [key=2, style=dotted];
n1 -> n10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n1 -> n1  [key=1, style=dashed, color=darkseagreen4, label=pi];
n2 -> n0  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n13  [key=2, style=dotted];
n12 -> n10  [key=0, style=bold, color=blue];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [key=0, style=bold, color=crimson];
n14 -> n17  [key=0, style=bold, color=crimson];
n14 -> n19  [key=0, style=bold, color=crimson];
n14 -> n21  [key=0, style=bold, color=crimson];
n14 -> n18  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n14 -> n20  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n19 -> n18  [key=0, style=solid];
n21 -> n20  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=0, style=solid];
n18 -> n23  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [key=0, style=solid];
n20 -> n14  [key=2, style=dotted];
n22 -> n14  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=2, style=dotted];
n25 -> n28  [key=2, style=dotted];
n26 -> n24  [key=0, style=bold, color=blue];
n29 -> n30  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=2, style=dotted];
n31 -> n29  [key=0, style=bold, color=blue];
n33 -> n34  [key=0, style=solid];
n33 -> n39  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CommandLine.Core.SpecificationProperty, object>"];
n33 -> n40  [key=1, style=dashed, color=darkseagreen4, label=T];
n34 -> n35  [key=0, style=solid];
n34 -> n36  [key=2, style=dotted];
n34 -> n37  [key=2, style=dotted];
n34 -> n38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n39 -> n40  [key=0, style=solid];
n39 -> n9  [key=2, style=dotted];
n39 -> n42  [key=2, style=dotted];
n40 -> n41  [key=0, style=solid];
n35 -> n33  [key=0, style=bold, color=blue];
n38 -> n39  [key=0, style=solid];
n41 -> n38  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
n43 -> n54  [key=1, style=dashed, color=darkseagreen4, label=T];
n43 -> n43  [key=3, color=darkorchid, style=bold, label="method methodReturn T SetValue"];
n44 -> n45  [key=0, style=solid];
n44 -> n59  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
n44 -> n47  [key=1, style=dashed, color=darkseagreen4, label=fail];
n44 -> n49  [key=1, style=dashed, color=darkseagreen4, label=fail];
n44 -> n51  [key=1, style=dashed, color=darkseagreen4, label=fail];
n44 -> n53  [key=1, style=dashed, color=darkseagreen4, label=fail];
n44 -> n44  [key=3, color=darkorchid, style=bold, label="Local variable System.Action<System.Exception> fail"];
n45 -> n46  [key=0, style=solid];
n45 -> n48  [key=0, style=solid];
n45 -> n50  [key=0, style=solid];
n45 -> n52  [key=0, style=solid];
n45 -> n54  [key=0, style=solid];
n45 -> n56  [key=2, style=dotted];
n54 -> n55  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n61  [key=2, style=dotted];
n47 -> n54  [key=0, style=solid];
n47 -> n57  [key=2, style=dotted];
n49 -> n54  [key=0, style=solid];
n49 -> n57  [key=2, style=dotted];
n51 -> n54  [key=0, style=solid];
n51 -> n57  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n57  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n48 -> n49  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n55 -> n43  [key=0, style=bold, color=blue];
n58 -> n59  [key=0, style=solid];
n60 -> n58  [key=0, style=bold, color=blue];
n62 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n65  [key=2, style=dotted];
n64 -> n62  [key=0, style=bold, color=blue];
n66 -> n67  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n70  [key=2, style=dotted];
n67 -> n71  [key=2, style=dotted];
n67 -> n72  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n68 -> n73  [key=2, style=dotted];
n68 -> n74  [key=2, style=dotted];
n69 -> n66  [key=0, style=bold, color=blue];
n75 -> n76  [key=0, style=solid, color=red];
n75 -> n77  [key=1, style=dashed, color=red, label="System.Type"];
n75 -> d76  [key=0, style=solid, color=green];
n75 -> d80  [key=1, style=dashed, color=green, label="System.Type"];
n75 -> d81  [key=1, style=dashed, color=green, label="System.Type"];
n75 -> d77  [key=1, style=dashed, color=green, label="System.Type"];
n76 -> n77  [key=0, style=solid, color=red];
n76 -> n80  [key=2, style=dotted, color=red];
n76 -> n7  [key=2, style=dotted, color=red];
n76 -> n83  [key=1, style=dashed, color=red, label="lambda expression"];
n76 -> n78  [key=1, style=dashed, color=red, label=props];
n77 -> n78  [key=0, style=solid, color=red];
n77 -> n81  [key=2, style=dotted, color=red];
n77 -> n82  [key=2, style=dotted, color=red];
n83 -> n84  [key=0, style=solid, color=red];
n83 -> d80  [key=0, style=solid, color=green];
n78 -> n79  [key=0, style=solid, color=red];
n79 -> n75  [key=0, style=bold, color=blue];
n84 -> n85  [key=0, style=solid, color=red];
n85 -> n83  [key=0, style=bold, color=blue];
n86 -> n87  [key=0, style=solid];
n86 -> n89  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n86 -> n90  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n86 -> n91  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n86 -> n62  [key=3, color=darkorchid, style=bold, label="method methodReturn object CreateDefaultForImmutable"];
n86 -> n66  [key=3, color=darkorchid, style=bold, label="method methodReturn object CreateDefaultForImmutable"];
n87 -> n88  [key=0, style=solid];
n87 -> n89  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n91  [key=0, style=solid];
n89 -> n93  [key=2, style=dotted];
n90 -> n92  [key=0, style=solid];
n90 -> n94  [key=2, style=dotted];
n90 -> n95  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n91 -> n96  [key=2, style=dotted];
n88 -> n92  [key=0, style=solid];
n92 -> n86  [key=0, style=bold, color=blue];
n97 -> n98  [key=0, style=solid];
n97 -> n99  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n97 -> n100  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n97 -> n101  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n98 -> n99  [key=0, style=solid];
n98 -> n100  [key=0, style=solid];
n98 -> n103  [key=2, style=dotted];
n99 -> n102  [key=0, style=solid];
n99 -> n104  [key=2, style=dotted];
n100 -> n101  [key=0, style=solid];
n100 -> n105  [key=2, style=dotted];
n100 -> n106  [key=2, style=dotted];
n100 -> n108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n101 -> n102  [key=0, style=solid];
n101 -> n107  [key=2, style=dotted];
n108 -> n109  [key=0, style=solid];
n102 -> n97  [key=0, style=bold, color=blue];
n109 -> n110  [key=0, style=solid];
n110 -> n108  [key=0, style=bold, color=blue];
d76 -> d76  [key=3, color=green, style=bold, label="Local variable System.Func<bool> isMutable"];
d76 -> d77  [key=0, style=solid, color=green];
d77 -> n79  [key=0, style=solid, color=green];
d77 -> n74  [key=2, style=dotted, color=green];
d80 -> d81  [key=0, style=solid, color=green];
d80 -> n80  [key=2, style=dotted, color=green];
d80 -> n7  [key=2, style=dotted, color=green];
d80 -> d87  [key=1, style=dashed, color=green, label="lambda expression"];
d80 -> d82  [key=1, style=dashed, color=green, label=props];
d117 -> d80  [key=1, style=dashed, color=green, label="System.Type"];
d117 -> d81  [key=1, style=dashed, color=green, label="System.Type"];
d81 -> d82  [key=0, style=solid, color=green];
d81 -> n81  [key=2, style=dotted, color=green];
d81 -> n82  [key=2, style=dotted, color=green];
d87 -> d88  [key=0, style=solid, color=green];
d82 -> n85  [key=0, style=solid, color=green];
d88 -> d89  [key=0, style=solid, color=green];
d89 -> d87  [key=0, style=bold, color=blue];
}
