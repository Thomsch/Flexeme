digraph  {
n21 [label=string, span=""];
n0 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeTo<TTargetEnum>(string)", label="Entry Humanizer.EnumDehumanizeExtensions.DehumanizeTo<TTargetEnum>(string)", span="18-18"];
n1 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeTo<TTargetEnum>(string)", label="return (TTargetEnum)DehumanizeToPrivate(input, typeof(TTargetEnum), OnNoMatch.ThrowsException);", span="21-21"];
n2 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeTo<TTargetEnum>(string)", label="Exit Humanizer.EnumDehumanizeExtensions.DehumanizeTo<TTargetEnum>(string)", span="18-18"];
n3 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", label="Entry Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", span="38-38"];
n4 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeTo(string, System.Type, Humanizer.OnNoMatch)", label="Entry Humanizer.EnumDehumanizeExtensions.DehumanizeTo(string, System.Type, Humanizer.OnNoMatch)", span="33-33"];
n5 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeTo(string, System.Type, Humanizer.OnNoMatch)", label="return (Enum)DehumanizeToPrivate(input, targetEnum, onNoMatch);", span="35-35"];
n6 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeTo(string, System.Type, Humanizer.OnNoMatch)", label="Exit Humanizer.EnumDehumanizeExtensions.DehumanizeTo(string, System.Type, Humanizer.OnNoMatch)", span="33-33"];
n7 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", label="var match = Enum.GetValues(targetEnum).Cast<Enum>().FirstOrDefault(value => string.Equals(value.Humanize(), input, StringComparison.OrdinalIgnoreCase))", span="40-40"];
n17 [cluster="lambda expression", label="string.Equals(value.Humanize(), input, StringComparison.OrdinalIgnoreCase)", span="40-40"];
n8 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", label="match == null && onNoMatch == OnNoMatch.ThrowsException", span="42-42"];
n9 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", label="throw new NoMatchFoundException(''Couldn't find any enum member that matches the string '' + input);", span="43-43"];
n12 [cluster="System.Enum.GetValues(System.Type)", label="Entry System.Enum.GetValues(System.Type)", span="0-0"];
n13 [cluster="System.Collections.IEnumerable.Cast<TResult>()", label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0"];
n14 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
n16 [cluster="lambda expression", label="Entry lambda expression", span="40-40"];
n10 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", label="return match;", span="45-45"];
n11 [cluster="Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", label="Exit Humanizer.EnumDehumanizeExtensions.DehumanizeToPrivate(string, System.Type, Humanizer.OnNoMatch)", span="38-38"];
n15 [cluster="Humanizer.NoMatchFoundException.NoMatchFoundException(string)", label="Entry Humanizer.NoMatchFoundException.NoMatchFoundException(string)", span="14-14"];
n18 [cluster="lambda expression", label="Exit lambda expression", span="40-40"];
n19 [cluster="System.Enum.Humanize()", label="Entry System.Enum.Humanize()", span="22-22"];
n20 [cluster="string.Equals(string, string, System.StringComparison)", label="Entry string.Equals(string, string, System.StringComparison)", span="0-0"];
m0_3 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.Dispose(bool)", file="ParserSettingsTests.cs", label="Entry CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.Dispose(bool)", span="22-22"];
m0_4 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.Dispose(bool)", color=green, community=0, file="ParserSettingsTests.cs", label="0: Disposed = true", span="24-24"];
m0_5 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.Dispose(bool)", color=green, community=0, file="ParserSettingsTests.cs", label="0: base.Dispose(disposing)", span="25-25"];
m0_6 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.Dispose(bool)", file="ParserSettingsTests.cs", label="Exit CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.Dispose(bool)", span="22-22"];
m0_7 [cluster="System.IO.StringWriter.Dispose(bool)", file="ParserSettingsTests.cs", label="Entry System.IO.StringWriter.Dispose(bool)", span="0-0"];
m0_14 [cluster="CommandLine.ParserSettings.ParserSettings()", file="ParserSettingsTests.cs", label="Entry CommandLine.ParserSettings.ParserSettings()", span="29-29"];
m0_8 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.Disposal_does_not_dispose_HelpWriter()", file="ParserSettingsTests.cs", label="Entry CommandLine.Tests.Unit.ParserSettingsTests.Disposal_does_not_dispose_HelpWriter()", span="30-30"];
m0_9 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.Disposal_does_not_dispose_HelpWriter()", color=green, community=0, file="ParserSettingsTests.cs", label="0: DisposeTrackingStringWriter textWriter = new DisposeTrackingStringWriter()", span="32-32"];
m0_10 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.Disposal_does_not_dispose_HelpWriter()", color=green, community=0, file="ParserSettingsTests.cs", label="0: ParserSettings parserSettings = new ParserSettings()", span="34-34"];
m0_11 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.Disposal_does_not_dispose_HelpWriter()", color=green, community=0, file="ParserSettingsTests.cs", label="0: parserSettings.HelpWriter = textWriter", span="36-36"];
m0_12 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.Disposal_does_not_dispose_HelpWriter()", color=green, community=0, file="ParserSettingsTests.cs", label="0: textWriter.Disposed.Should().BeFalse(''not disposed'')", span="39-39"];
m0_13 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.Disposal_does_not_dispose_HelpWriter()", file="ParserSettingsTests.cs", label="Exit CommandLine.Tests.Unit.ParserSettingsTests.Disposal_does_not_dispose_HelpWriter()", span="30-30"];
m0_16 [cluster="Unk.BeFalse", file="ParserSettingsTests.cs", label="Entry Unk.BeFalse", span=""];
m0_0 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.DisposeTrackingStringWriter()", file="ParserSettingsTests.cs", label="Entry CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.DisposeTrackingStringWriter()", span="15-15"];
m0_1 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.DisposeTrackingStringWriter()", color=green, community=0, file="ParserSettingsTests.cs", label="1: Disposed = false", span="17-17"];
m0_2 [cluster="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.DisposeTrackingStringWriter()", file="ParserSettingsTests.cs", label="Exit CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter.DisposeTrackingStringWriter()", span="15-15"];
m0_15 [cluster="Unk.Should", file="ParserSettingsTests.cs", label="Entry Unk.Should", span=""];
m0_17 [file="ParserSettingsTests.cs", label="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter", span=""];
n21 -> n17  [color=darkseagreen4, key=1, label=string, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n3 -> n7  [key=0, style=solid];
n3 -> n17  [color=darkseagreen4, key=1, label=string, style=dashed];
n3 -> n8  [color=darkseagreen4, key=1, label="Humanizer.OnNoMatch", style=dashed];
n3 -> n9  [color=darkseagreen4, key=1, label=string, style=dashed];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n3  [key=2, style=dotted];
n6 -> n4  [color=blue, key=0, style=bold];
n7 -> n8  [key=0, style=solid];
n7 -> n12  [key=2, style=dotted];
n7 -> n13  [key=2, style=dotted];
n7 -> n14  [key=2, style=dotted];
n7 -> n16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n7 -> n10  [color=darkseagreen4, key=1, label=match, style=dashed];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n17 -> n20  [key=2, style=dotted];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=0, style=solid];
n9 -> n11  [key=0, style=solid];
n9 -> n15  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n11 -> n3  [color=blue, key=0, style=bold];
n18 -> n16  [color=blue, key=0, style=bold];
m0_3 -> m0_4  [color=green, key=0, style=solid];
m0_3 -> m0_5  [color=green, key=1, label=bool, style=dashed];
m0_4 -> m0_5  [color=green, key=0, style=solid];
m0_5 -> m0_6  [color=green, key=0, style=solid];
m0_5 -> m0_7  [color=green, key=2, style=dotted];
m0_6 -> m0_3  [color=blue, key=0, style=bold];
m0_8 -> m0_9  [color=green, key=0, style=solid];
m0_9 -> m0_10  [color=green, key=0, style=solid];
m0_9 -> m0_0  [color=green, key=2, style=dotted];
m0_9 -> m0_11  [color=green, key=1, label=textWriter, style=dashed];
m0_9 -> m0_12  [color=green, key=1, label=textWriter, style=dashed];
m0_10 -> m0_11  [color=green, key=0, style=solid];
m0_10 -> m0_14  [color=green, key=2, style=dotted];
m0_11 -> m0_12  [color=green, key=0, style=solid];
m0_12 -> m0_13  [color=green, key=0, style=solid];
m0_12 -> m0_15  [color=green, key=2, style=dotted];
m0_12 -> m0_16  [color=green, key=2, style=dotted];
m0_13 -> m0_8  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_17 -> m0_1  [color=green, key=1, label="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter", style=dashed];
m0_17 -> m0_4  [color=green, key=1, label="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter", style=dashed];
m0_17 -> m0_5  [color=green, key=1, label="CommandLine.Tests.Unit.ParserSettingsTests.DisposeTrackingStringWriter", style=dashed];
}
