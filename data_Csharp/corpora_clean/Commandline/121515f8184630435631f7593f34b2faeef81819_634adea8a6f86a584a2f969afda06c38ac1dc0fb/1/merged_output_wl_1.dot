digraph  {
d80 [cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", color=green, community=0, label="0: AddPlural(''('' + singular[0] + '')'' + singular.Substring(1) + ''$'', ''$1'' + plural.Substring(1))", span="146-146"];
d66 [cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", label="Entry Humanizer.InflectorExtensions.AddIrregular(string, string)", span="144-144"];
d81 [cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", color=green, community=0, label="0: AddSingular(''('' + plural[0] + '')'' + plural.Substring(1) + ''$'', ''$1'' + singular.Substring(1))", span="147-147"];
d83 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
d64 [cluster="Humanizer.InflectorExtensions.AddPlural(string, string)", label="Entry Humanizer.InflectorExtensions.AddPlural(string, string)", span="155-155"];
d82 [cluster="Humanizer.InflectorExtensions.AddIrregular(string, string)", label="Exit Humanizer.InflectorExtensions.AddIrregular(string, string)", span="144-144"];
d65 [cluster="Humanizer.InflectorExtensions.AddSingular(string, string)", label="Entry Humanizer.InflectorExtensions.AddSingular(string, string)", span="160-160"];
d84 [cluster="Humanizer.InflectorExtensions.AddUncountable(string)", color=green, community=0, label="0: Uncountables.Add(word.ToLower())", span="152-152"];
d67 [cluster="Humanizer.InflectorExtensions.AddUncountable(string)", label="Entry Humanizer.InflectorExtensions.AddUncountable(string)", span="150-150"];
d85 [cluster="Humanizer.InflectorExtensions.AddUncountable(string)", label="Exit Humanizer.InflectorExtensions.AddUncountable(string)", span="150-150"];
d86 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
d87 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
d44 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddIrregular(''person'', ''people'')", span="100-100"];
d45 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddIrregular(''man'', ''men'')", span="101-101"];
d46 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddIrregular(''child'', ''children'')", span="102-102"];
d47 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddIrregular(''sex'', ''sexes'')", span="103-103"];
d48 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddIrregular(''move'', ''moves'')", span="104-104"];
d49 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddIrregular(''goose'', ''geese'')", span="105-105"];
d50 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddIrregular(''alumna'', ''alumnae'')", span="106-106"];
d51 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddIrregular(''criterion'', ''criteria'')", span="107-107"];
d52 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddIrregular(''wave'',''waves'')", span="108-108"];
d150 [cluster="Humanizer.InflectorExtensions.Camelize(string)", label="return word.Substring(0, 1).ToLower() + word.Substring(1);", span="289-289"];
d1 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''$'', ''s'')", span="55-55"];
d2 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''s$'', ''s'')", span="56-56"];
d3 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(ax|test)is$'', ''$1es'')", span="57-57"];
d4 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(octop|vir|alumn|fung)us$'', ''$1i'')", span="58-58"];
d5 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(alias|status)$'', ''$1es'')", span="59-59"];
d6 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(bu)s$'', ''$1ses'')", span="60-60"];
d7 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(buffal|tomat|volcan)o$'', ''$1oes'')", span="61-61"];
d8 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''([ti])um$'', ''$1a'')", span="62-62"];
d9 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''sis$'', ''ses'')", span="63-63"];
d10 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(?:([^f])fe|([lr])f)$'', ''$1$2ves'')", span="64-64"];
d11 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(hive)$'', ''$1s'')", span="65-65"];
d12 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''([^aeiouy]|qu)y$'', ''$1ies'')", span="66-66"];
d13 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(x|ch|ss|sh)$'', ''$1es'')", span="67-67"];
d14 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(matr|vert|ind)ix|ex$'', ''$1ices'')", span="68-68"];
d15 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''([m|l])ouse$'', ''$1ice'')", span="69-69"];
d16 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''^(ox)$'', ''$1en'')", span="70-70"];
d17 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(quiz)$'', ''$1zes'')", span="71-71"];
d18 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddPlural(''(campus)$'', ''$1es'')", span="72-72"];
d89 [cluster="Humanizer.InflectorExtensions.AddPlural(string, string)", label="Exit Humanizer.InflectorExtensions.AddPlural(string, string)", span="155-155"];
d88 [cluster="Humanizer.InflectorExtensions.AddPlural(string, string)", label="Plurals.Add(new Rule(rule, replacement))", span="157-157"];
d19 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''s$'', '''')", span="74-74"];
d20 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(n)ews$'', ''$1ews'')", span="75-75"];
d21 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''([ti])a$'', ''$1um'')", span="76-76"];
d22 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$'', ''$1$2sis'')", span="77-77"];
d23 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(^analy)ses$'', ''$1sis'')", span="78-78"];
d24 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''([^f])ves$'', ''$1fe'')", span="79-79"];
d25 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(hive)s$'', ''$1'')", span="80-80"];
d26 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(tive)s$'', ''$1'')", span="81-81"];
d27 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''([lr])ves$'', ''$1f'')", span="82-82"];
d28 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''([^aeiouy]|qu)ies$'', ''$1y'')", span="83-83"];
d29 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(s)eries$'', ''$1eries'')", span="84-84"];
d30 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(m)ovies$'', ''$1ovie'')", span="85-85"];
d31 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(x|ch|ss|sh)es$'', ''$1'')", span="86-86"];
d32 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''([m|l])ice$'', ''$1ouse'')", span="87-87"];
d33 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(bus)es$'', ''$1'')", span="88-88"];
d34 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(o)es$'', ''$1'')", span="89-89"];
d35 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(shoe)s$'', ''$1'')", span="90-90"];
d36 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(cris|ax|test)es$'', ''$1is'')", span="91-91"];
d37 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(octop|vir|alumn|fung)i$'', ''$1us'')", span="92-92"];
d38 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(alias|status)es$'', ''$1'')", span="93-93"];
d39 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''^(ox)en'', ''$1'')", span="94-94"];
d40 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(vert|ind)ices$'', ''$1ex'')", span="95-95"];
d41 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(matr)ices$'', ''$1ix'')", span="96-96"];
d42 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(quiz)zes$'', ''$1'')", span="97-97"];
d43 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddSingular(''(campus)es$'', ''$1'')", span="98-98"];
d91 [cluster="Humanizer.InflectorExtensions.AddSingular(string, string)", label="Exit Humanizer.InflectorExtensions.AddSingular(string, string)", span="160-160"];
d90 [cluster="Humanizer.InflectorExtensions.AddSingular(string, string)", label="Singulars.Add(new Rule(rule, replacement))", span="162-162"];
d53 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''equipment'')", span="110-110"];
d54 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''information'')", span="111-111"];
d55 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''rice'')", span="112-112"];
d56 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''money'')", span="113-113"];
d57 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''species'')", span="114-114"];
d58 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''series'')", span="115-115"];
d59 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''fish'')", span="116-116"];
d60 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''sheep'')", span="117-117"];
d61 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''deer'')", span="118-118"];
d62 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="AddUncountable(''aircraft'')", span="119-119"];
d133 [cluster="Humanizer.InflectorExtensions.IsUncountable(string)", label="return Uncountables.Contains(word.ToLower());", span="258-258"];
d154 [cluster="Humanizer.InflectorExtensions.Underscore(string)", label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(input, @''([A-Z]+)([A-Z][a-z])'', ''$1_$2''), @''([a-z\d])([A-Z])'', ''$1_$2''), @''[-\s]'', ''_'').ToLower();", span="299-301"];
d149 [cluster="Humanizer.InflectorExtensions.Camelize(string)", label="string word = Pascalize(input)", span="288-288"];
d151 [cluster="Humanizer.InflectorExtensions.Camelize(string)", label="Exit Humanizer.InflectorExtensions.Camelize(string)", span="286-286"];
d152 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
d0 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="Entry Humanizer.InflectorExtensions.InflectorExtensions()", span="53-53"];
d68 [cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", label="Entry Humanizer.InflectorExtensions.Rule.Rule(string, string)", span="127-127"];
d63 [cluster="Humanizer.InflectorExtensions.InflectorExtensions()", label="Exit Humanizer.InflectorExtensions.InflectorExtensions()", span="53-53"];
d132 [cluster="Humanizer.InflectorExtensions.IsUncountable(string)", label="Entry Humanizer.InflectorExtensions.IsUncountable(string)", span="256-256"];
d134 [cluster="Humanizer.InflectorExtensions.IsUncountable(string)", label="Exit Humanizer.InflectorExtensions.IsUncountable(string)", span="256-256"];
d135 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
d153 [cluster="Humanizer.InflectorExtensions.Underscore(string)", label="Entry Humanizer.InflectorExtensions.Underscore(string)", span="297-297"];
d155 [cluster="Humanizer.InflectorExtensions.Underscore(string)", label="Exit Humanizer.InflectorExtensions.Underscore(string)", span="297-297"];
d156 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string, string)", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, string)", span="0-0"];
d148 [cluster="Humanizer.InflectorExtensions.Camelize(string)", label="Entry Humanizer.InflectorExtensions.Camelize(string)", span="286-286"];
d140 [cluster="Humanizer.InflectorExtensions.Pascalize(string)", label="Entry Humanizer.InflectorExtensions.Pascalize(string)", span="276-276"];
d71 [cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", label="Exit Humanizer.InflectorExtensions.Rule.Rule(string, string)", span="127-127"];
d69 [cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", label="_regex = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptionsUtil.Compiled)", span="129-129"];
d70 [cluster="Humanizer.InflectorExtensions.Rule.Rule(string, string)", label="_replacement = replacement", span="130-130"];
d123 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="IsUncountable(word)", span="242-242"];
d142 [cluster="Humanizer.InflectorExtensions.Pascalize(string)", label="Exit Humanizer.InflectorExtensions.Pascalize(string)", span="276-276"];
d141 [cluster="Humanizer.InflectorExtensions.Pascalize(string)", label="return Regex.Replace(input, ''(?:^|_)(.)'', match => match.Groups[1].Value.ToUpper());", span="278-278"];
d164 [label="Humanizer.InflectorExtensions.Rule", span=""];
d72 [cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0"];
d106 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="Entry Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", span="237-237"];
d121 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="word == null", span="239-239"];
d124 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="return word;", span="243-243"];
d125 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="var result = word", span="245-245"];
d143 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string, System.Text.RegularExpressions.MatchEvaluator)", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, System.Text.RegularExpressions.MatchEvaluator)", span="0-0"];
d144 [cluster="lambda expression", label="Entry lambda expression", span="278-278"];
d74 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", label="!_regex.IsMatch(word)", span="135-135"];
d76 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", label="return _regex.Replace(word, _replacement);", span="140-140"];
d97 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="var result = ApplyRules(Plurals, word)", span="189-189"];
d100 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="var asSingular = ApplyRules(Singulars, word)", span="194-194"];
d101 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="var asSingularAsPlural = ApplyRules(Plurals, asSingular)", span="195-195"];
d112 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="var result = ApplyRules(Singulars, word)", span="223-223"];
d115 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="var asPlural = ApplyRules(Plurals, word)", span="229-229"];
d116 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="var asPluralAsSingular = ApplyRules(Singulars, asPlural)", span="230-230"];
d131 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="Exit Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", span="237-237"];
d126 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="int i = rules.Count - 1", span="246-246"];
d128 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="(result = rules[i].Apply(word)) != null", span="248-248"];
d122 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="return null;", span="240-240"];
d130 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="return result;", span="253-253"];
d146 [cluster="lambda expression", label="Exit lambda expression", span="278-278"];
d145 [cluster="lambda expression", label="match.Groups[1].Value.ToUpper()", span="278-278"];
d73 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", label="Entry Humanizer.InflectorExtensions.Rule.Apply(string)", span="133-133"];
d75 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", label="return null;", span="137-137"];
d78 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string)", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0"];
d77 [cluster="Humanizer.InflectorExtensions.Rule.Apply(string)", label="Exit Humanizer.InflectorExtensions.Rule.Apply(string)", span="133-133"];
d79 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string)", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string)", span="0-0"];
d96 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="Entry Humanizer.InflectorExtensions.Pluralize(string, bool)", span="187-187"];
d98 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label=inputIsKnownToBeSingular, span="191-191"];
d99 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="return result;", span="192-192"];
d102 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="asSingular != null && asSingular != word && asSingular + ''s'' != word && asSingularAsPlural == word && result != word", span="196-196"];
d104 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="return result;", span="199-199"];
d111 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="Entry Humanizer.InflectorExtensions.Singularize(string, bool)", span="220-220"];
d113 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label=inputIsKnownToBePlural, span="225-225"];
d114 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="return result;", span="226-226"];
d117 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="asPlural != word && word + ''s'' != asPlural && asPluralAsSingular == word && result != word", span="231-231"];
d119 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="return result ?? word;", span="234-234"];
d127 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="i >= 0", span="246-246"];
d129 [cluster="Humanizer.InflectorExtensions.ApplyRules(System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>, string)", label="i--", span="246-246"];
d147 [cluster="string.ToUpper()", label="Entry string.ToUpper()", span="0-0"];
d105 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="Exit Humanizer.InflectorExtensions.Pluralize(string, bool)", span="187-187"];
d103 [cluster="Humanizer.InflectorExtensions.Pluralize(string, bool)", label="return word;", span="197-197"];
d120 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="Exit Humanizer.InflectorExtensions.Singularize(string, bool)", span="220-220"];
d118 [cluster="Humanizer.InflectorExtensions.Singularize(string, bool)", label="return word;", span="232-232"];
m0_41 [cluster="string.Equals(string)", file="StringBuilderExtensions.cs", label="Entry string.Equals(string)", span="0-0"];
m0_42 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="StringBuilderExtensions.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="192-192"];
m0_43 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="StringBuilderExtensions.cs", label="Exit CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="192-192"];
m0_44 [cluster="CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", span="205-205"];
m0_47 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="118-118"];
m0_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m0_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
m0_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
m0_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="StringBuilderExtensions.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
m0_52 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="141-141"];
m0_9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m0_15 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="28-28"];
m0_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52"];
m0_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m0_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="StringBuilderExtensions.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="55-55"];
m0_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m0_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m0_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m0_155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m0_63 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Exit CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m0_55 [cluster="CommandLine.NamedError.GetHashCode()", file="StringBuilderExtensions.cs", label="return new {Tag, NameInfo}.GetHashCode();", span="241-241"];
m0_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m0_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m0_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="StringBuilderExtensions.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m0_270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m0_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m0_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
m0_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
m0_311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m0_79 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
m0_72 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
m0_73 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="182-182"];
m0_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
m0_37 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="96-96"];
m0_39 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="96-96"];
m0_38 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSequence()", span="96-96"];
m0_40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m0_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m0_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m0_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="StringBuilderExtensions.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m0_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="StringBuilderExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m0_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="StringBuilderExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m0_172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m0_54 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="141-141"];
m0_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
m0_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m0_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m0_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m0_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m0_263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m0_109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m0_61 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
m0_204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m0_74 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="331-331"];
m0_76 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="StringBuilderExtensions.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="342-342"];
m0_77 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="StringBuilderExtensions.cs", label="Exit CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="342-342"];
m0_75 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Exit CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="331-331"];
m0_78 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
m0_247 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="StringBuilderExtensions.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276"];
m0_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m0_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
m0_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m0_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m0_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m0_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m0_96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m0_184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="StringBuilderExtensions.cs", label="0: var fakeOptions = new FakeOptions()", span="21-21"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="StringBuilderExtensions.cs", label="0: var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24"];
m0_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m0_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
m0_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="StringBuilderExtensions.cs", label="result.Value.FileName != null", span="771-771"];
m0_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="StringBuilderExtensions.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
m0_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="StringBuilderExtensions.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
m0_320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m0_299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m0_307 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m0_6 [cluster="CommandLine.Error.Equals(object)", file="StringBuilderExtensions.cs", label="return Equals(other);", span="92-92"];
m0_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m0_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m0_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m0_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m0_255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m0_10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m0_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m0_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m0_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m0_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m0_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m0_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m0_370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860"];
m0_371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="StringBuilderExtensions.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863"];
m0_372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], int)", span="853-853"];
m0_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75"];
m0_378 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m0_105 [cluster="Unk.ShouldBeEquivalentTo", file="StringBuilderExtensions.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_399 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="902-902"];
m0_400 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="907-911"];
m0_401 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="914-914"];
m0_402 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="902-902"];
m0_83 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="StringBuilderExtensions.cs", label="this.matched = matched", span="373-373"];
m0_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m0_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m0_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m0_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m0_57 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="StringBuilderExtensions.cs", label="other == null", span="251-251"];
m0_58 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="StringBuilderExtensions.cs", label="return false;", span="253-253"];
m0_59 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="StringBuilderExtensions.cs", label="return Tag.Equals(other.Tag) && NameInfo.Equals(other.NameInfo);", span="256-256"];
m0_33 [cluster="CommandLine.TokenError.GetHashCode()", file="StringBuilderExtensions.cs", label="Entry CommandLine.TokenError.GetHashCode()", span="166-166"];
m0_34 [cluster="CommandLine.TokenError.GetHashCode()", file="StringBuilderExtensions.cs", label="return new {Tag, Token}.GetHashCode();", span="168-168"];
m0_35 [cluster="CommandLine.TokenError.GetHashCode()", file="StringBuilderExtensions.cs", label="Exit CommandLine.TokenError.GetHashCode()", span="166-166"];
m0_53 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
m0_60 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="163-163"];
m0_185 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="444-444"];
m0_14 [cluster="System.Enum.GetHashCode()", color=green, community=0, file="StringBuilderExtensions.cs", label="0: Entry System.Enum.GetHashCode()", span="0-0"];
m0_13 [cluster="CommandLine.Error.GetHashCode()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Error.GetHashCode()", span="102-102"];
m0_22 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="StringBuilderExtensions.cs", label="throw new ArgumentNullException(''token'');", span="133-133"];
m0_46 [cluster="CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Exit CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", span="205-205"];
m0_240 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptions()", span="564-564"];
m0_249 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptions()", span="583-583"];
m0_257 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptions()", span="602-602"];
m0_265 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptions()", span="621-621"];
m0_273 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptions()", span="641-641"];
m0_289 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptions()", span="682-682"];
m0_387 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptions()", span="872-872"];
m0_413 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptions()", span="927-927"];
m0_341 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m0_352 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m0_363 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m0_21 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="StringBuilderExtensions.cs", label="token == null", span="133-133"];
m0_23 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="StringBuilderExtensions.cs", label="this.token = token", span="135-135"];
m0_45 [cluster="CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="this.nameInfo = nameInfo", span="208-208"];
m0_239 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="564-564"];
m0_241 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="564-564"];
m0_248 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="583-583"];
m0_250 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="583-583"];
m0_256 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="602-602"];
m0_258 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="602-602"];
m0_264 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="621-621"];
m0_266 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="621-621"];
m0_272 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="641-641"];
m0_274 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="641-641"];
m0_288 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="682-682"];
m0_290 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="682-682"];
m0_386 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="872-872"];
m0_388 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="872-872"];
m0_412 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="927-927"];
m0_414 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="927-927"];
m0_28 [cluster="CommandLine.TokenError.Equals(object)", file="StringBuilderExtensions.cs", label="other != null", span="154-154"];
m0_71 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Exit CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
m0_80 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="StringBuilderExtensions.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="368-368"];
m0_89 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="CommandLine.NamedError", span=""];
m0_97 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="239-239"];
m0_106 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="263-263"];
m0_116 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="282-282"];
m0_124 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="301-301"];
m0_132 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="320-320"];
m0_141 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="345-345"];
m0_148 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="368-368"];
m0_156 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="390-390"];
m0_164 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="412-412"];
m0_174 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="441-441"];
m0_177 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="442-444"];
m0_195 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="467-467"];
m0_205 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="487-487"];
m0_213 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="507-507"];
m0_222 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="527-527"];
m0_230 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="545-545"];
m0_280 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="660-660"];
m0_296 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="701-701"];
m0_304 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="723-723"];
m0_312 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="745-745"];
m0_322 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="765-765"];
m0_332 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="789-789"];
m0_340 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="809-813"];
m0_342 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="809-813"];
m0_343 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="810-810"];
m0_351 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="823-827"];
m0_353 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="823-827"];
m0_354 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="824-824"];
m0_362 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="837-841"];
m0_364 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="837-841"];
m0_365 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="838-838"];
m0_375 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="857-857"];
m0_396 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="889-889"];
m0_403 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="908-908"];
m0_30 [cluster="CommandLine.TokenError.Equals(object)", file="StringBuilderExtensions.cs", label="return base.Equals(obj);", span="159-159"];
m0_29 [cluster="CommandLine.TokenError.Equals(object)", file="StringBuilderExtensions.cs", label="return Equals(other);", span="156-156"];
m0_62 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m0_82 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="StringBuilderExtensions.cs", label="this.type = type", span="372-372"];
m0_81 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="StringBuilderExtensions.cs", label="this.verb = verb", span="371-371"];
m0_91 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="220-220"];
m0_90 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="CommandLine.HelpVerbRequestedError", span=""];
m0_99 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="239-239"];
m0_98 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m0_108 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="263-263"];
m0_107 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m0_118 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="282-282"];
m0_117 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m0_126 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="301-301"];
m0_125 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m0_134 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="320-320"];
m0_133 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m0_143 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="345-345"];
m0_142 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithValues()", span="345-345"];
m0_150 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="368-368"];
m0_149 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m0_158 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="390-390"];
m0_157 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m0_166 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="412-412"];
m0_165 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m0_176 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="441-441"];
m0_175 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithValues()", span="441-441"];
m0_179 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="442-444"];
m0_178 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m0_182 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m0_186 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m0_197 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="467-467"];
m0_196 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSets()", span="467-467"];
m0_207 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="487-487"];
m0_206 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m0_215 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="507-507"];
m0_214 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m0_224 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="527-527"];
m0_223 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m0_232 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="545-545"];
m0_231 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionWithRequired()", span="545-545"];
m0_282 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="660-660"];
m0_281 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithRequiredValue()", span="660-660"];
m0_298 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="701-701"];
m0_297 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
m0_306 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="723-723"];
m0_305 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithNullables()", span="723-723"];
m0_314 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="745-745"];
m0_313 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithNullables()", span="745-745"];
m0_324 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="765-765"];
m0_323 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithFSharpOption()", span="765-765"];
m0_334 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="789-789"];
m0_333 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithFSharpOption()", span="789-789"];
m0_345 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="810-810"];
m0_344 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithMinZero()", span="810-810"];
m0_356 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="824-824"];
m0_355 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithMaxZero()", span="824-824"];
m0_367 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="838-838"];
m0_366 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
m0_380 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="x == expected", span="863-863"];
m0_379 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="863-863"];
m0_377 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="857-857"];
m0_376 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="857-857"];
m0_390 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="x == expected", span="878-878"];
m0_389 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="878-878"];
m0_398 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="889-889"];
m0_397 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithRequiredValue()", span="889-889"];
m0_405 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="908-908"];
m0_404 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="908-908"];
m0_181 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="444-444"];
m0_183 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="444-444"];
m0_187 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="444-444"];
m0_381 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="863-863"];
m0_391 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="878-878"];
m0_11 [cluster="CommandLine.Error.GetHashCode()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Error.GetHashCode()", span="102-102"];
m0_31 [cluster="CommandLine.TokenError.Equals(object)", file="StringBuilderExtensions.cs", label="Exit CommandLine.TokenError.Equals(object)", span="151-151"];
m0_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m0_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m0_159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m0_180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m0_382 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m0_383 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875"];
m0_384 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="StringBuilderExtensions.cs", label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878"];
m0_385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
m0_194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298"];
m0_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
m0_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
m0_419 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m0_233 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m0_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m0_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m0_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m0_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m0_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m0_140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m0_24 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="StringBuilderExtensions.cs", label="Exit CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", span="130-130"];
m0_26 [cluster="CommandLine.TokenError.Equals(object)", file="StringBuilderExtensions.cs", label="Entry CommandLine.TokenError.Equals(object)", span="151-151"];
m0_27 [cluster="CommandLine.TokenError.Equals(object)", file="StringBuilderExtensions.cs", label="var other = obj as TokenError", span="153-153"];
m0_283 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m0_368 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m0_20 [cluster="Unk.Equal", file="StringBuilderExtensions.cs", label="Entry Unk.Equal", span=""];
m0_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=green, community=0, file="StringBuilderExtensions.cs", label="0: var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.Equals(result))", span="34-34"];
m0_7 [cluster="CommandLine.Error.Equals(object)", file="StringBuilderExtensions.cs", label="return base.Equals(obj);", span="95-95"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m0_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="StringBuilderExtensions.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m0_12 [cluster="CommandLine.Error.GetHashCode()", file="StringBuilderExtensions.cs", label="return Tag.GetHashCode();", span="104-104"];
m0_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m0_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m0_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m0_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m0_279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m0_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m0_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m0_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m0_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m0_238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m0_325 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m0_321 [cluster="Unk.get_IsSome", file="StringBuilderExtensions.cs", label="Entry Unk.get_IsSome", span=""];
m0_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m0_188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m0_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m0_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m0_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m0_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m0_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m0_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m0_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m0_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="StringBuilderExtensions.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m0_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m0_36 [cluster="object.GetHashCode()", file="StringBuilderExtensions.cs", label="Entry object.GetHashCode()", span="0-0"];
m0_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m0_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m0_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m0_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m0_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m0_392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="883-883"];
m0_393 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="888-892"];
m0_394 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="895-895"];
m0_395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="883-883"];
m0_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="CommandLine.Error", span=""];
m0_88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="CommandLine.TokenError", span=""];
m0_66 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
m0_67 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Exit CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
m0_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m0_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m0_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="StringBuilderExtensions.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m0_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="StringBuilderExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m0_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m0_406 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m0_357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m0_374 [cluster="Unk.HaveCount", file="StringBuilderExtensions.cs", label="Entry Unk.HaveCount", span=""];
m0_271 [cluster="string.Equals(string)", file="StringBuilderExtensions.cs", label="Entry string.Equals(string)", span="0-0"];
m0_198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m0_70 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
m0_19 [cluster="System.Enum.Equals(object)", file="StringBuilderExtensions.cs", label="Entry System.Enum.Equals(object)", span="0-0"];
m0_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m0_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
m0_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="StringBuilderExtensions.cs", label="result.Value.Offset != null", span="795-795"];
m0_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="StringBuilderExtensions.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
m0_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="StringBuilderExtensions.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
m0_331 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m0_407 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="920-920"];
m0_408 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="StringBuilderExtensions.cs", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="923-923"];
m0_409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="926-930"];
m0_410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="StringBuilderExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="933-933"];
m0_411 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="920-920"];
m0_151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m0_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m0_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m0_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m0_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m0_221 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
m0_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m0_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
m0_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
m0_303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m0_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m0_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m0_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m0_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m0_246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m0_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m0_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m0_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="StringBuilderExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m0_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="StringBuilderExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m0_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m0_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m0_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
m0_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
m0_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
m0_295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m0_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m0_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m0_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m0_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m0_415 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="940-940"];
m0_416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="945-949"];
m0_417 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="952-952"];
m0_418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="940-940"];
m0_373 [cluster="Unk.Should", file="StringBuilderExtensions.cs", label="Entry Unk.Should", span=""];
m0_100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m0_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m0_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
m0_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="StringBuilderExtensions.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
m0_287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m0_115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
m0_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m0_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m0_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="StringBuilderExtensions.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m0_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="StringBuilderExtensions.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m0_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m0_346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m0_173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m0_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m0_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="StringBuilderExtensions.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m0_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="StringBuilderExtensions.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m0_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="StringBuilderExtensions.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m0_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="StringBuilderExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m0_420 [file="StringBuilderExtensions.cs", label=fakeOptions, span=""];
m0_421 [file="StringBuilderExtensions.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m0_422 [file="StringBuilderExtensions.cs", label=int, span=""];
m0_423 [file="StringBuilderExtensions.cs", label=int, span=""];
d80 -> d81  [color=green, key=0, style=solid];
d80 -> d83  [color=green, key=2, style=dotted];
d80 -> d64  [color=green, key=2, style=dotted];
d66 -> d80  [color=green, key=0, style=solid];
d66 -> d81  [color=green, key=1, label=string, style=dashed];
d81 -> d82  [color=green, key=0, style=solid];
d81 -> d83  [color=green, key=2, style=dotted];
d81 -> d65  [color=green, key=2, style=dotted];
d64 -> d88  [key=0, style=solid];
d82 -> d66  [color=blue, key=0, style=bold];
d65 -> d90  [key=0, style=solid];
d84 -> d85  [color=green, key=0, style=solid];
d84 -> d86  [color=green, key=2, style=dotted];
d84 -> d87  [color=green, key=2, style=dotted];
d67 -> d84  [color=green, key=0, style=solid];
d85 -> d67  [color=blue, key=0, style=bold];
d44 -> d66  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d45 -> d66  [key=2, style=dotted];
d45 -> d46  [key=0, style=solid];
d46 -> d66  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d47 -> d66  [key=2, style=dotted];
d47 -> d48  [key=0, style=solid];
d48 -> d66  [key=2, style=dotted];
d48 -> d49  [key=0, style=solid];
d49 -> d66  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d50 -> d66  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d51 -> d66  [key=2, style=dotted];
d51 -> d52  [key=0, style=solid];
d52 -> d66  [key=2, style=dotted];
d52 -> d53  [key=0, style=solid];
d150 -> d83  [key=2, style=dotted];
d150 -> d86  [key=2, style=dotted];
d150 -> d151  [key=0, style=solid];
d150 -> d152  [key=2, style=dotted];
d1 -> d64  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d2 -> d64  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d3 -> d64  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d4 -> d64  [key=2, style=dotted];
d4 -> d5  [key=0, style=solid];
d5 -> d64  [key=2, style=dotted];
d5 -> d6  [key=0, style=solid];
d6 -> d64  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d7 -> d64  [key=2, style=dotted];
d7 -> d8  [key=0, style=solid];
d8 -> d64  [key=2, style=dotted];
d8 -> d9  [key=0, style=solid];
d9 -> d64  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d10 -> d64  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d11 -> d64  [key=2, style=dotted];
d11 -> d12  [key=0, style=solid];
d12 -> d64  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid];
d13 -> d64  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d14 -> d64  [key=2, style=dotted];
d14 -> d15  [key=0, style=solid];
d15 -> d64  [key=2, style=dotted];
d15 -> d16  [key=0, style=solid];
d16 -> d64  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d17 -> d64  [key=2, style=dotted];
d17 -> d18  [key=0, style=solid];
d18 -> d64  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d89 -> d64  [color=blue, key=0, style=bold];
d88 -> d87  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d88 -> d68  [key=2, style=dotted];
d19 -> d65  [key=2, style=dotted];
d19 -> d20  [key=0, style=solid];
d20 -> d65  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d21 -> d65  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d22 -> d65  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d23 -> d65  [key=2, style=dotted];
d23 -> d24  [key=0, style=solid];
d24 -> d65  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d25 -> d65  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d26 -> d65  [key=2, style=dotted];
d26 -> d27  [key=0, style=solid];
d27 -> d65  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d28 -> d65  [key=2, style=dotted];
d28 -> d29  [key=0, style=solid];
d29 -> d65  [key=2, style=dotted];
d29 -> d30  [key=0, style=solid];
d30 -> d65  [key=2, style=dotted];
d30 -> d31  [key=0, style=solid];
d31 -> d65  [key=2, style=dotted];
d31 -> d32  [key=0, style=solid];
d32 -> d65  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d33 -> d65  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d34 -> d65  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d35 -> d65  [key=2, style=dotted];
d35 -> d36  [key=0, style=solid];
d36 -> d65  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d37 -> d65  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d38 -> d65  [key=2, style=dotted];
d38 -> d39  [key=0, style=solid];
d39 -> d65  [key=2, style=dotted];
d39 -> d40  [key=0, style=solid];
d40 -> d65  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d41 -> d65  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d42 -> d65  [key=2, style=dotted];
d42 -> d43  [key=0, style=solid];
d43 -> d65  [key=2, style=dotted];
d43 -> d44  [key=0, style=solid];
d91 -> d65  [color=blue, key=0, style=bold];
d90 -> d87  [key=2, style=dotted];
d90 -> d91  [key=0, style=solid];
d90 -> d68  [key=2, style=dotted];
d53 -> d67  [key=2, style=dotted];
d53 -> d54  [key=0, style=solid];
d54 -> d67  [key=2, style=dotted];
d54 -> d55  [key=0, style=solid];
d55 -> d67  [key=2, style=dotted];
d55 -> d56  [key=0, style=solid];
d56 -> d67  [key=2, style=dotted];
d56 -> d57  [key=0, style=solid];
d57 -> d67  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d58 -> d67  [key=2, style=dotted];
d58 -> d59  [key=0, style=solid];
d59 -> d67  [key=2, style=dotted];
d59 -> d60  [key=0, style=solid];
d60 -> d67  [key=2, style=dotted];
d60 -> d61  [key=0, style=solid];
d61 -> d67  [key=2, style=dotted];
d61 -> d62  [key=0, style=solid];
d62 -> d67  [key=2, style=dotted];
d62 -> d63  [key=0, style=solid];
d133 -> d86  [key=2, style=dotted];
d133 -> d134  [key=0, style=solid];
d133 -> d135  [key=2, style=dotted];
d154 -> d86  [key=2, style=dotted];
d154 -> d155  [key=0, style=solid];
d154 -> d156  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d149 -> d140  [key=2, style=dotted];
d151 -> d148  [color=blue, key=0, style=bold];
d0 -> d1  [key=0, style=solid];
d68 -> d69  [key=0, style=solid];
d68 -> d70  [color=darkseagreen4, key=1, label=string, style=dashed];
d63 -> d0  [color=blue, key=0, style=bold];
d132 -> d133  [key=0, style=solid];
d134 -> d132  [color=blue, key=0, style=bold];
d153 -> d154  [key=0, style=solid];
d155 -> d153  [color=blue, key=0, style=bold];
d148 -> d149  [key=0, style=solid];
d140 -> d141  [key=0, style=solid];
d71 -> d68  [color=blue, key=0, style=bold];
d69 -> d70  [key=0, style=solid];
d69 -> d72  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d123 -> d132  [key=2, style=dotted];
d123 -> d124  [key=0, style=solid];
d123 -> d125  [key=0, style=solid];
d142 -> d140  [color=blue, key=0, style=bold];
d141 -> d142  [key=0, style=solid];
d141 -> d143  [key=2, style=dotted];
d141 -> d144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d164 -> d69  [color=darkseagreen4, key=1, label="Humanizer.InflectorExtensions.Rule", style=dashed];
d164 -> d70  [color=darkseagreen4, key=1, label="Humanizer.InflectorExtensions.Rule", style=dashed];
d164 -> d74  [color=darkseagreen4, key=1, label="Humanizer.InflectorExtensions.Rule", style=dashed];
d164 -> d76  [color=darkseagreen4, key=1, label="Humanizer.InflectorExtensions.Rule", style=dashed];
d106 -> d123  [color=darkseagreen4, key=1, label=string, style=dashed];
d106 -> d121  [key=0, style=solid];
d106 -> d124  [color=darkseagreen4, key=1, label=string, style=dashed];
d106 -> d125  [color=darkseagreen4, key=1, label=string, style=dashed];
d106 -> d126  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>", style=dashed];
d106 -> d128  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<Humanizer.InflectorExtensions.Rule>", style=dashed];
d121 -> d123  [key=0, style=solid];
d121 -> d122  [key=0, style=solid];
d124 -> d131  [key=0, style=solid];
d125 -> d126  [key=0, style=solid];
d125 -> d130  [color=darkseagreen4, key=1, label=result, style=dashed];
d144 -> d145  [key=0, style=solid];
d74 -> d75  [key=0, style=solid];
d74 -> d76  [key=0, style=solid];
d74 -> d78  [key=2, style=dotted];
d76 -> d77  [key=0, style=solid];
d76 -> d79  [key=2, style=dotted];
d97 -> d106  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d97 -> d99  [color=darkseagreen4, key=1, label=result, style=dashed];
d97 -> d102  [color=darkseagreen4, key=1, label=result, style=dashed];
d97 -> d104  [color=darkseagreen4, key=1, label=result, style=dashed];
d100 -> d106  [key=2, style=dotted];
d100 -> d101  [key=0, style=solid];
d100 -> d102  [color=darkseagreen4, key=1, label=asSingular, style=dashed];
d101 -> d106  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d112 -> d106  [key=2, style=dotted];
d112 -> d113  [key=0, style=solid];
d112 -> d114  [color=darkseagreen4, key=1, label=result, style=dashed];
d112 -> d117  [color=darkseagreen4, key=1, label=result, style=dashed];
d112 -> d119  [color=darkseagreen4, key=1, label=result, style=dashed];
d115 -> d106  [key=2, style=dotted];
d115 -> d116  [key=0, style=solid];
d115 -> d117  [color=darkseagreen4, key=1, label=asPlural, style=dashed];
d116 -> d106  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d131 -> d106  [color=blue, key=0, style=bold];
d126 -> d127  [key=0, style=solid];
d126 -> d128  [color=darkseagreen4, key=1, label=i, style=dashed];
d126 -> d129  [color=darkseagreen4, key=1, label=i, style=dashed];
d128 -> d129  [key=0, style=solid];
d128 -> d130  [key=0, style=solid];
d128 -> d73  [key=2, style=dotted];
d122 -> d131  [key=0, style=solid];
d130 -> d131  [key=0, style=solid];
d146 -> d144  [color=blue, key=0, style=bold];
d145 -> d146  [key=0, style=solid];
d145 -> d147  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d73 -> d76  [color=darkseagreen4, key=1, label=string, style=dashed];
d75 -> d77  [key=0, style=solid];
d77 -> d73  [color=blue, key=0, style=bold];
d96 -> d97  [key=0, style=solid];
d96 -> d100  [color=darkseagreen4, key=1, label=string, style=dashed];
d96 -> d98  [color=darkseagreen4, key=1, label=bool, style=dashed];
d96 -> d102  [color=darkseagreen4, key=1, label=string, style=dashed];
d96 -> d103  [color=darkseagreen4, key=1, label=string, style=dashed];
d98 -> d100  [key=0, style=solid];
d98 -> d99  [key=0, style=solid];
d99 -> d105  [key=0, style=solid];
d102 -> d103  [key=0, style=solid];
d102 -> d104  [key=0, style=solid];
d104 -> d105  [key=0, style=solid];
d111 -> d112  [key=0, style=solid];
d111 -> d115  [color=darkseagreen4, key=1, label=string, style=dashed];
d111 -> d113  [color=darkseagreen4, key=1, label=bool, style=dashed];
d111 -> d117  [color=darkseagreen4, key=1, label=string, style=dashed];
d111 -> d118  [color=darkseagreen4, key=1, label=string, style=dashed];
d111 -> d119  [color=darkseagreen4, key=1, label=string, style=dashed];
d113 -> d115  [key=0, style=solid];
d113 -> d114  [key=0, style=solid];
d114 -> d120  [key=0, style=solid];
d117 -> d118  [key=0, style=solid];
d117 -> d119  [key=0, style=solid];
d119 -> d120  [key=0, style=solid];
d127 -> d128  [key=0, style=solid];
d127 -> d130  [key=0, style=solid];
d129 -> d127  [key=0, style=solid];
d129 -> d129  [color=darkseagreen4, key=1, label=i, style=dashed];
d105 -> d96  [color=blue, key=0, style=bold];
d103 -> d105  [key=0, style=solid];
d120 -> d111  [color=blue, key=0, style=bold];
d118 -> d120  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_42 -> m0_9  [key=2, style=dotted];
m0_42 -> m0_10  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_43 -> m0_12  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_36  [key=2, style=dotted];
m0_43 -> m0_42  [color=blue, key=0, style=bold];
m0_44 -> m0_41  [color=blue, key=0, style=bold];
m0_44 -> m0_45  [key=0, style=solid];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_51  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_47 -> m0_45  [color=blue, key=0, style=bold];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_3  [key=2, style=dotted];
m0_51 -> m0_48  [color=blue, key=0, style=bold];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_51  [key=0, style=solid];
m0_49 -> m0_9  [key=2, style=dotted];
m0_49 -> m0_10  [key=2, style=dotted];
m0_49 -> m0_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_52  [key=0, style=solid];
m0_50 -> m0_53  [key=2, style=dotted];
m0_50 -> m0_12  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_36  [key=2, style=dotted];
m0_52 -> m0_47  [color=blue, key=0, style=bold];
m0_52 -> m0_53  [key=0, style=solid];
m0_9 -> m0_15  [key=0, style=solid];
m0_9 -> m0_17  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [key=0, style=solid];
m0_15 -> m0_13  [color=blue, key=0, style=bold];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_9  [key=2, style=dotted];
m0_17 -> m0_10  [key=2, style=dotted];
m0_17 -> m0_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_16 -> m0_18  [key=0, style=solid];
m0_16 -> m0_17  [key=0, style=solid];
m0_18 -> m0_9  [color=blue, key=0, style=bold];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_154  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_153 -> m0_9  [key=2, style=dotted];
m0_153 -> m0_10  [key=2, style=dotted];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_105  [key=2, style=dotted];
m0_155 -> m0_152  [color=blue, key=0, style=bold];
m0_63 -> m0_62  [color=blue, key=0, style=bold];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_36  [key=2, style=dotted];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_269  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_268 -> m0_9  [key=2, style=dotted];
m0_268 -> m0_10  [key=2, style=dotted];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_269 -> m0_12  [key=2, style=dotted];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_271  [key=2, style=dotted];
m0_270 -> m0_267  [color=blue, key=0, style=bold];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_310  [color=darkseagreen4, key=1, label="long?", style=dashed];
m0_309 -> m0_9  [key=2, style=dotted];
m0_309 -> m0_10  [key=2, style=dotted];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_310 -> m0_311  [key=0, style=solid];
m0_310 -> m0_105  [key=2, style=dotted];
m0_311 -> m0_308  [color=blue, key=0, style=bold];
m0_79 -> m0_78  [color=blue, key=0, style=bold];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_55  [key=2, style=dotted];
m0_73 -> m0_72  [color=blue, key=0, style=bold];
m0_73 -> m0_71  [color=blue, key=0, style=bold];
m0_32 -> m0_37  [key=0, style=solid];
m0_32 -> m0_39  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_19  [key=2, style=dotted];
m0_39 -> m0_41  [key=2, style=dotted];
m0_39 -> m0_37  [color=blue, key=0, style=bold];
m0_38 -> m0_40  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_40 -> m0_32  [color=blue, key=0, style=bold];
m0_167 -> m0_168  [key=0, style=solid];
m0_170 -> m0_9  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_173  [key=2, style=dotted];
m0_170 -> m0_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_170 -> m0_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_169 -> m0_170  [key=0, style=solid];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_105  [key=2, style=dotted];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_171  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_168 -> m0_140  [key=2, style=dotted];
m0_172 -> m0_167  [color=blue, key=0, style=bold];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_52  [color=blue, key=0, style=bold];
m0_56 -> m0_54  [color=blue, key=0, style=bold];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_259 -> m0_260  [key=0, style=solid];
m0_261 -> m0_9  [key=2, style=dotted];
m0_261 -> m0_10  [key=2, style=dotted];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_262 -> m0_12  [key=2, style=dotted];
m0_262 -> m0_263  [key=0, style=solid];
m0_262 -> m0_36  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_262  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_260 -> m0_247  [key=2, style=dotted];
m0_263 -> m0_259  [color=blue, key=0, style=bold];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_63  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_76 -> m0_9  [key=2, style=dotted];
m0_76 -> m0_10  [key=2, style=dotted];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_77 -> m0_12  [key=2, style=dotted];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_36  [key=2, style=dotted];
m0_77 -> m0_76  [color=blue, key=0, style=bold];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_77  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_75 -> m0_79  [key=2, style=dotted];
m0_75 -> m0_74  [color=blue, key=0, style=bold];
m0_78 -> m0_74  [color=blue, key=0, style=bold];
m0_78 -> m0_79  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_65 -> m0_64  [color=blue, key=0, style=bold];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_67  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_65 -> m0_69  [key=2, style=dotted];
m0_65 -> m0_70  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_94 -> m0_9  [key=2, style=dotted];
m0_94 -> m0_10  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_95 -> m0_12  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_36  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_95  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_93 -> m0_79  [key=2, style=dotted];
m0_96 -> m0_92  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_6  [color=green, key=2, style=dotted];
m0_1 -> m0_3  [color=green, key=1, label=fakeOptions, style=dashed];
m0_1 -> m0_14  [color=green, key=1, label=fakeOptions, style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_2 -> m0_3  [color=green, key=0, style=solid];
m0_2 -> m0_78  [color=green, key=2, style=dotted];
m0_2 -> m0_8  [color=green, key=2, style=dotted];
m0_2 -> m0_4  [color=green, key=1, label=expectedResult, style=dashed];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_318  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_315 -> m0_319  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_316 -> m0_9  [key=2, style=dotted];
m0_316 -> m0_10  [key=2, style=dotted];
m0_316 -> m0_317  [key=0, style=solid];
m0_316 -> m0_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_316 -> m0_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_316 -> m0_319  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_317 -> m0_318  [key=0, style=solid];
m0_317 -> m0_319  [key=0, style=solid];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_105  [key=2, style=dotted];
m0_319 -> m0_320  [key=0, style=solid];
m0_319 -> m0_321  [key=2, style=dotted];
m0_319 -> m0_105  [key=2, style=dotted];
m0_320 -> m0_315  [color=blue, key=0, style=bold];
m0_6 -> m0_8  [key=0, style=solid];
m0_6 -> m0_9  [key=2, style=dotted];
m0_251 -> m0_252  [key=0, style=solid];
m0_253 -> m0_9  [key=2, style=dotted];
m0_253 -> m0_10  [key=2, style=dotted];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_254 -> m0_12  [key=2, style=dotted];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_36  [key=2, style=dotted];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_254  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_252 -> m0_247  [key=2, style=dotted];
m0_255 -> m0_251  [color=blue, key=0, style=bold];
m0_110 -> m0_111  [key=0, style=solid];
m0_112 -> m0_9  [key=2, style=dotted];
m0_112 -> m0_10  [key=2, style=dotted];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_113 -> m0_12  [key=2, style=dotted];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_36  [key=2, style=dotted];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_111 -> m0_115  [key=2, style=dotted];
m0_111 -> m0_70  [key=2, style=dotted];
m0_114 -> m0_110  [color=blue, key=0, style=bold];
m0_369 -> m0_370  [key=0, style=solid];
m0_369 -> m0_371  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_369 -> m0_380  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_370 -> m0_9  [key=2, style=dotted];
m0_370 -> m0_10  [key=2, style=dotted];
m0_370 -> m0_371  [key=0, style=solid];
m0_370 -> m0_375  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_371 -> m0_372  [key=0, style=solid];
m0_371 -> m0_373  [key=2, style=dotted];
m0_371 -> m0_374  [key=2, style=dotted];
m0_371 -> m0_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_372 -> m0_369  [color=blue, key=0, style=bold];
m0_25 -> m0_9  [key=2, style=dotted];
m0_25 -> m0_10  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_399 -> m0_400  [key=0, style=solid];
m0_399 -> m0_401  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m0_400 -> m0_9  [key=2, style=dotted];
m0_400 -> m0_10  [key=2, style=dotted];
m0_400 -> m0_401  [key=0, style=solid];
m0_400 -> m0_403  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_401 -> m0_402  [key=0, style=solid];
m0_401 -> m0_105  [key=2, style=dotted];
m0_402 -> m0_399  [color=blue, key=0, style=bold];
m0_83 -> m0_84  [key=0, style=solid];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m0_145 -> m0_9  [key=2, style=dotted];
m0_145 -> m0_10  [key=2, style=dotted];
m0_145 -> m0_146  [key=0, style=solid];
m0_145 -> m0_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_105  [key=2, style=dotted];
m0_147 -> m0_144  [color=blue, key=0, style=bold];
m0_57 -> m0_9  [key=2, style=dotted];
m0_57 -> m0_10  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_57 -> m0_59  [key=0, style=solid];
m0_58 -> m0_12  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_36  [key=2, style=dotted];
m0_58 -> m0_60  [key=0, style=solid];
m0_59 -> m0_56  [color=blue, key=0, style=bold];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_19  [key=2, style=dotted];
m0_59 -> m0_61  [key=2, style=dotted];
m0_33 -> m0_9  [key=2, style=dotted];
m0_33 -> m0_10  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_12  [key=2, style=dotted];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_35 -> m0_32  [color=blue, key=0, style=bold];
m0_35 -> m0_33  [color=blue, key=0, style=bold];
m0_53 -> m0_57  [key=0, style=solid];
m0_53 -> m0_59  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_55  [key=2, style=dotted];
m0_60 -> m0_53  [color=blue, key=0, style=bold];
m0_60 -> m0_61  [key=0, style=solid];
m0_185 -> m0_186  [key=0, style=solid];
m0_14 -> m0_15  [color=green, key=0, style=solid];
m0_13 -> m0_14  [color=green, key=0, style=solid];
m0_13 -> m0_11  [color=blue, key=0, style=bold];
m0_22 -> m0_6  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_24  [key=0, style=solid];
m0_22 -> m0_25  [key=2, style=dotted];
m0_46 -> m0_6  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_44  [color=blue, key=0, style=bold];
m0_240 -> m0_6  [key=2, style=dotted];
m0_240 -> m0_241  [key=0, style=solid];
m0_249 -> m0_6  [key=2, style=dotted];
m0_249 -> m0_250  [key=0, style=solid];
m0_257 -> m0_6  [key=2, style=dotted];
m0_257 -> m0_258  [key=0, style=solid];
m0_265 -> m0_6  [key=2, style=dotted];
m0_265 -> m0_266  [key=0, style=solid];
m0_273 -> m0_6  [key=2, style=dotted];
m0_273 -> m0_274  [key=0, style=solid];
m0_289 -> m0_6  [key=2, style=dotted];
m0_289 -> m0_290  [key=0, style=solid];
m0_387 -> m0_6  [key=2, style=dotted];
m0_387 -> m0_388  [key=0, style=solid];
m0_413 -> m0_6  [key=2, style=dotted];
m0_413 -> m0_414  [key=0, style=solid];
m0_341 -> m0_9  [key=2, style=dotted];
m0_341 -> m0_10  [key=2, style=dotted];
m0_341 -> m0_342  [key=0, style=solid];
m0_341 -> m0_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_352 -> m0_9  [key=2, style=dotted];
m0_352 -> m0_10  [key=2, style=dotted];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_363 -> m0_9  [key=2, style=dotted];
m0_363 -> m0_10  [key=2, style=dotted];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_365  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=0, style=solid];
m0_23 -> m0_21  [color=blue, key=0, style=bold];
m0_23 -> m0_24  [key=0, style=solid];
m0_45 -> m0_46  [key=0, style=solid];
m0_239 -> m0_240  [key=0, style=solid];
m0_241 -> m0_239  [color=blue, key=0, style=bold];
m0_248 -> m0_249  [key=0, style=solid];
m0_250 -> m0_248  [color=blue, key=0, style=bold];
m0_256 -> m0_257  [key=0, style=solid];
m0_258 -> m0_256  [color=blue, key=0, style=bold];
m0_264 -> m0_265  [key=0, style=solid];
m0_266 -> m0_264  [color=blue, key=0, style=bold];
m0_272 -> m0_273  [key=0, style=solid];
m0_274 -> m0_272  [color=blue, key=0, style=bold];
m0_288 -> m0_289  [key=0, style=solid];
m0_290 -> m0_288  [color=blue, key=0, style=bold];
m0_386 -> m0_387  [key=0, style=solid];
m0_388 -> m0_386  [color=blue, key=0, style=bold];
m0_412 -> m0_413  [key=0, style=solid];
m0_414 -> m0_412  [color=blue, key=0, style=bold];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=0, style=solid];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_70  [color=blue, key=0, style=bold];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_80 -> m0_83  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_45  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_89 -> m0_50  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_89 -> m0_51  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_89 -> m0_55  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_89 -> m0_59  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_97 -> m0_98  [key=0, style=solid];
m0_106 -> m0_107  [key=0, style=solid];
m0_116 -> m0_117  [key=0, style=solid];
m0_124 -> m0_125  [key=0, style=solid];
m0_132 -> m0_133  [key=0, style=solid];
m0_141 -> m0_142  [key=0, style=solid];
m0_148 -> m0_149  [key=0, style=solid];
m0_156 -> m0_157  [key=0, style=solid];
m0_164 -> m0_165  [key=0, style=solid];
m0_174 -> m0_175  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_177 -> m0_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_195 -> m0_196  [key=0, style=solid];
m0_205 -> m0_206  [key=0, style=solid];
m0_213 -> m0_214  [key=0, style=solid];
m0_222 -> m0_223  [key=0, style=solid];
m0_230 -> m0_231  [key=0, style=solid];
m0_280 -> m0_281  [key=0, style=solid];
m0_296 -> m0_297  [key=0, style=solid];
m0_304 -> m0_305  [key=0, style=solid];
m0_312 -> m0_313  [key=0, style=solid];
m0_322 -> m0_323  [key=0, style=solid];
m0_332 -> m0_333  [key=0, style=solid];
m0_340 -> m0_341  [key=0, style=solid];
m0_342 -> m0_340  [color=blue, key=0, style=bold];
m0_343 -> m0_344  [key=0, style=solid];
m0_351 -> m0_352  [key=0, style=solid];
m0_353 -> m0_351  [color=blue, key=0, style=bold];
m0_354 -> m0_355  [key=0, style=solid];
m0_362 -> m0_363  [key=0, style=solid];
m0_364 -> m0_362  [color=blue, key=0, style=bold];
m0_365 -> m0_366  [key=0, style=solid];
m0_375 -> m0_376  [key=0, style=solid];
m0_396 -> m0_397  [key=0, style=solid];
m0_403 -> m0_404  [key=0, style=solid];
m0_30 -> m0_28  [color=blue, key=0, style=bold];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_3  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=2, style=dotted];
m0_29 -> m0_32  [key=2, style=dotted];
m0_62 -> m0_60  [color=blue, key=0, style=bold];
m0_62 -> m0_63  [key=0, style=solid];
m0_82 -> m0_80  [color=blue, key=0, style=bold];
m0_82 -> m0_83  [key=0, style=solid];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_83  [key=2, style=dotted];
m0_91 -> m0_89  [color=blue, key=0, style=bold];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_63  [key=2, style=dotted];
m0_90 -> m0_81  [color=darkseagreen4, key=1, label="CommandLine.HelpVerbRequestedError", style=dashed];
m0_90 -> m0_82  [color=darkseagreen4, key=1, label="CommandLine.HelpVerbRequestedError", style=dashed];
m0_90 -> m0_83  [color=darkseagreen4, key=1, label="CommandLine.HelpVerbRequestedError", style=dashed];
m0_99 -> m0_97  [color=blue, key=0, style=bold];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_100  [key=2, style=dotted];
m0_108 -> m0_106  [color=blue, key=0, style=bold];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_109  [key=2, style=dotted];
m0_118 -> m0_116  [color=blue, key=0, style=bold];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_109  [key=2, style=dotted];
m0_126 -> m0_124  [color=blue, key=0, style=bold];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_109  [key=2, style=dotted];
m0_134 -> m0_132  [color=blue, key=0, style=bold];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_109  [key=2, style=dotted];
m0_143 -> m0_141  [color=blue, key=0, style=bold];
m0_142 -> m0_140  [key=2, style=dotted];
m0_142 -> m0_143  [key=0, style=solid];
m0_150 -> m0_148  [color=blue, key=0, style=bold];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_151  [key=2, style=dotted];
m0_158 -> m0_156  [color=blue, key=0, style=bold];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_159  [key=2, style=dotted];
m0_166 -> m0_164  [color=blue, key=0, style=bold];
m0_165 -> m0_166  [key=0, style=solid];
m0_165 -> m0_159  [key=2, style=dotted];
m0_176 -> m0_174  [color=blue, key=0, style=bold];
m0_175 -> m0_140  [key=2, style=dotted];
m0_175 -> m0_176  [key=0, style=solid];
m0_179 -> m0_177  [color=blue, key=0, style=bold];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_180  [key=2, style=dotted];
m0_178 -> m0_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_184  [key=2, style=dotted];
m0_182 -> m0_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_188  [key=2, style=dotted];
m0_197 -> m0_195  [color=blue, key=0, style=bold];
m0_196 -> m0_197  [key=0, style=solid];
m0_196 -> m0_198  [key=2, style=dotted];
m0_207 -> m0_205  [color=blue, key=0, style=bold];
m0_206 -> m0_204  [key=2, style=dotted];
m0_206 -> m0_207  [key=0, style=solid];
m0_215 -> m0_213  [color=blue, key=0, style=bold];
m0_214 -> m0_204  [key=2, style=dotted];
m0_214 -> m0_215  [key=0, style=solid];
m0_224 -> m0_222  [color=blue, key=0, style=bold];
m0_223 -> m0_204  [key=2, style=dotted];
m0_223 -> m0_224  [key=0, style=solid];
m0_232 -> m0_230  [color=blue, key=0, style=bold];
m0_231 -> m0_232  [key=0, style=solid];
m0_231 -> m0_233  [key=2, style=dotted];
m0_282 -> m0_280  [color=blue, key=0, style=bold];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_283  [key=2, style=dotted];
m0_298 -> m0_296  [color=blue, key=0, style=bold];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_299  [key=2, style=dotted];
m0_306 -> m0_304  [color=blue, key=0, style=bold];
m0_305 -> m0_306  [key=0, style=solid];
m0_305 -> m0_307  [key=2, style=dotted];
m0_314 -> m0_312  [color=blue, key=0, style=bold];
m0_313 -> m0_314  [key=0, style=solid];
m0_313 -> m0_307  [key=2, style=dotted];
m0_324 -> m0_322  [color=blue, key=0, style=bold];
m0_323 -> m0_324  [key=0, style=solid];
m0_323 -> m0_325  [key=2, style=dotted];
m0_334 -> m0_332  [color=blue, key=0, style=bold];
m0_333 -> m0_334  [key=0, style=solid];
m0_333 -> m0_325  [key=2, style=dotted];
m0_345 -> m0_343  [color=blue, key=0, style=bold];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_346  [key=2, style=dotted];
m0_356 -> m0_354  [color=blue, key=0, style=bold];
m0_355 -> m0_356  [key=0, style=solid];
m0_355 -> m0_357  [key=2, style=dotted];
m0_367 -> m0_365  [color=blue, key=0, style=bold];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_368  [key=2, style=dotted];
m0_380 -> m0_381  [key=0, style=solid];
m0_379 -> m0_380  [key=0, style=solid];
m0_377 -> m0_375  [color=blue, key=0, style=bold];
m0_376 -> m0_377  [key=0, style=solid];
m0_376 -> m0_378  [key=2, style=dotted];
m0_390 -> m0_391  [key=0, style=solid];
m0_389 -> m0_390  [key=0, style=solid];
m0_398 -> m0_396  [color=blue, key=0, style=bold];
m0_397 -> m0_398  [key=0, style=solid];
m0_397 -> m0_283  [key=2, style=dotted];
m0_405 -> m0_403  [color=blue, key=0, style=bold];
m0_404 -> m0_405  [key=0, style=solid];
m0_404 -> m0_406  [key=2, style=dotted];
m0_181 -> m0_182  [key=0, style=solid];
m0_183 -> m0_181  [color=blue, key=0, style=bold];
m0_187 -> m0_185  [color=blue, key=0, style=bold];
m0_381 -> m0_379  [color=blue, key=0, style=bold];
m0_391 -> m0_389  [color=blue, key=0, style=bold];
m0_11 -> m0_12  [key=0, style=solid];
m0_31 -> m0_26  [color=blue, key=0, style=bold];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_87  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_85 -> m0_79  [key=2, style=dotted];
m0_85 -> m0_70  [key=2, style=dotted];
m0_86 -> m0_85  [color=blue, key=0, style=bold];
m0_86 -> m0_9  [key=2, style=dotted];
m0_86 -> m0_10  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_382 -> m0_383  [key=0, style=solid];
m0_382 -> m0_384  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_382 -> m0_390  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_383 -> m0_9  [key=2, style=dotted];
m0_383 -> m0_10  [key=2, style=dotted];
m0_383 -> m0_384  [key=0, style=solid];
m0_383 -> m0_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_384 -> m0_385  [key=0, style=solid];
m0_384 -> m0_373  [key=2, style=dotted];
m0_384 -> m0_374  [key=2, style=dotted];
m0_384 -> m0_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_385 -> m0_382  [color=blue, key=0, style=bold];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_64  [color=blue, key=0, style=bold];
m0_69 -> m0_68  [color=blue, key=0, style=bold];
m0_119 -> m0_120  [key=0, style=solid];
m0_121 -> m0_9  [key=2, style=dotted];
m0_121 -> m0_10  [key=2, style=dotted];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_122 -> m0_12  [key=2, style=dotted];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_36  [key=2, style=dotted];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_120 -> m0_115  [key=2, style=dotted];
m0_120 -> m0_70  [key=2, style=dotted];
m0_123 -> m0_119  [color=blue, key=0, style=bold];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_24 -> m0_20  [color=blue, key=0, style=bold];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_20  [key=2, style=dotted];
m0_26 -> m0_30  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_27 -> m0_24  [color=blue, key=0, style=bold];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [color=darkseagreen4, key=1, label=other, style=dashed];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_3 -> m0_4  [color=green, key=0, style=solid];
m0_3 -> m0_7  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_3 -> m0_9  [color=green, key=2, style=dotted];
m0_3 -> m0_10  [color=green, key=2, style=dotted];
m0_3 -> m0_13  [color=green, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [color=darkseagreen4, key=1, label=other, style=dashed];
m0_4 -> m0_11  [key=2, style=dotted];
m0_4 -> m0_12  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_10  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [key=0, style=solid];
m0_5 -> m0_0  [color=blue, key=0, style=bold];
m0_8 -> m0_3  [color=blue, key=0, style=bold];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_275 -> m0_276  [key=0, style=solid];
m0_277 -> m0_9  [key=2, style=dotted];
m0_277 -> m0_10  [key=2, style=dotted];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_278 -> m0_12  [key=2, style=dotted];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_36  [key=2, style=dotted];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_278  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_276 -> m0_221  [key=2, style=dotted];
m0_279 -> m0_275  [color=blue, key=0, style=bold];
m0_234 -> m0_235  [key=0, style=solid];
m0_236 -> m0_9  [key=2, style=dotted];
m0_236 -> m0_10  [key=2, style=dotted];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_237 -> m0_12  [key=2, style=dotted];
m0_237 -> m0_238  [key=0, style=solid];
m0_237 -> m0_36  [key=2, style=dotted];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_237  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_235 -> m0_79  [key=2, style=dotted];
m0_235 -> m0_70  [key=2, style=dotted];
m0_238 -> m0_234  [color=blue, key=0, style=bold];
m0_84 -> m0_80  [color=blue, key=0, style=bold];
m0_84 -> m0_85  [key=0, style=solid];
m0_225 -> m0_226  [key=0, style=solid];
m0_227 -> m0_9  [key=2, style=dotted];
m0_227 -> m0_10  [key=2, style=dotted];
m0_227 -> m0_228  [key=0, style=solid];
m0_227 -> m0_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_228 -> m0_12  [key=2, style=dotted];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_36  [key=2, style=dotted];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_228  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_226 -> m0_221  [key=2, style=dotted];
m0_226 -> m0_70  [key=2, style=dotted];
m0_229 -> m0_225  [color=blue, key=0, style=bold];
m0_216 -> m0_217  [key=0, style=solid];
m0_218 -> m0_9  [key=2, style=dotted];
m0_218 -> m0_10  [key=2, style=dotted];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_219 -> m0_12  [key=2, style=dotted];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_36  [key=2, style=dotted];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_217 -> m0_221  [key=2, style=dotted];
m0_217 -> m0_70  [key=2, style=dotted];
m0_220 -> m0_216  [color=blue, key=0, style=bold];
m0_127 -> m0_128  [key=0, style=solid];
m0_129 -> m0_9  [key=2, style=dotted];
m0_129 -> m0_10  [key=2, style=dotted];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_130 -> m0_12  [key=2, style=dotted];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_36  [key=2, style=dotted];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_130  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_128 -> m0_115  [key=2, style=dotted];
m0_128 -> m0_70  [key=2, style=dotted];
m0_131 -> m0_127  [color=blue, key=0, style=bold];
m0_392 -> m0_393  [key=0, style=solid];
m0_392 -> m0_394  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m0_393 -> m0_9  [key=2, style=dotted];
m0_393 -> m0_10  [key=2, style=dotted];
m0_393 -> m0_394  [key=0, style=solid];
m0_393 -> m0_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_394 -> m0_395  [key=0, style=solid];
m0_394 -> m0_105  [key=2, style=dotted];
m0_395 -> m0_392  [color=blue, key=0, style=bold];
m0_87 -> m0_12  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_36  [key=2, style=dotted];
m0_87 -> m0_1  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_87 -> m0_6  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_87 -> m0_7  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_87 -> m0_17  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_88 -> m0_84  [color=blue, key=0, style=bold];
m0_88 -> m0_23  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_88 -> m0_29  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_88 -> m0_30  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_88 -> m0_34  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_88 -> m0_39  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_66 -> m0_9  [key=2, style=dotted];
m0_66 -> m0_10  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_67 -> m0_12  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_36  [key=2, style=dotted];
m0_67 -> m0_66  [color=blue, key=0, style=bold];
m0_135 -> m0_136  [key=0, style=solid];
m0_137 -> m0_9  [key=2, style=dotted];
m0_137 -> m0_10  [key=2, style=dotted];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_140  [key=2, style=dotted];
m0_136 -> m0_138  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_105  [key=2, style=dotted];
m0_139 -> m0_135  [color=blue, key=0, style=bold];
m0_70 -> m0_71  [key=0, style=solid];
m0_19 -> m0_16  [color=blue, key=0, style=bold];
m0_326 -> m0_327  [key=0, style=solid];
m0_326 -> m0_329  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_326 -> m0_330  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_327 -> m0_9  [key=2, style=dotted];
m0_327 -> m0_10  [key=2, style=dotted];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_327 -> m0_329  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_327 -> m0_330  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_330  [key=0, style=solid];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_105  [key=2, style=dotted];
m0_330 -> m0_331  [key=0, style=solid];
m0_330 -> m0_321  [key=2, style=dotted];
m0_330 -> m0_105  [key=2, style=dotted];
m0_331 -> m0_326  [color=blue, key=0, style=bold];
m0_407 -> m0_408  [key=0, style=solid];
m0_408 -> m0_6  [key=2, style=dotted];
m0_408 -> m0_409  [key=0, style=solid];
m0_408 -> m0_410  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_409 -> m0_9  [key=2, style=dotted];
m0_409 -> m0_10  [key=2, style=dotted];
m0_409 -> m0_410  [key=0, style=solid];
m0_409 -> m0_412  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_105  [key=2, style=dotted];
m0_411 -> m0_407  [color=blue, key=0, style=bold];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_161 -> m0_9  [key=2, style=dotted];
m0_161 -> m0_10  [key=2, style=dotted];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_105  [key=2, style=dotted];
m0_163 -> m0_160  [color=blue, key=0, style=bold];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_302  [color=darkseagreen4, key=1, label="int?", style=dashed];
m0_301 -> m0_9  [key=2, style=dotted];
m0_301 -> m0_10  [key=2, style=dotted];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_302 -> m0_303  [key=0, style=solid];
m0_302 -> m0_105  [key=2, style=dotted];
m0_303 -> m0_300  [color=blue, key=0, style=bold];
m0_242 -> m0_243  [key=0, style=solid];
m0_244 -> m0_9  [key=2, style=dotted];
m0_244 -> m0_10  [key=2, style=dotted];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_245 -> m0_12  [key=2, style=dotted];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_36  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_245  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_243 -> m0_247  [key=2, style=dotted];
m0_246 -> m0_242  [color=blue, key=0, style=bold];
m0_208 -> m0_209  [key=0, style=solid];
m0_210 -> m0_9  [key=2, style=dotted];
m0_210 -> m0_10  [key=2, style=dotted];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_204  [key=2, style=dotted];
m0_209 -> m0_211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_105  [key=2, style=dotted];
m0_212 -> m0_208  [color=blue, key=0, style=bold];
m0_291 -> m0_292  [key=0, style=solid];
m0_293 -> m0_9  [key=2, style=dotted];
m0_293 -> m0_10  [key=2, style=dotted];
m0_293 -> m0_294  [key=0, style=solid];
m0_293 -> m0_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_294 -> m0_12  [key=2, style=dotted];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_36  [key=2, style=dotted];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_294  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_292 -> m0_79  [key=2, style=dotted];
m0_295 -> m0_291  [color=blue, key=0, style=bold];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_102 -> m0_9  [key=2, style=dotted];
m0_102 -> m0_10  [key=2, style=dotted];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_103 -> m0_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_105  [key=2, style=dotted];
m0_104 -> m0_101  [color=blue, key=0, style=bold];
m0_415 -> m0_416  [key=0, style=solid];
m0_415 -> m0_417  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeImmutableOptions", style=dashed];
m0_416 -> m0_10  [key=2, style=dotted];
m0_416 -> m0_417  [key=0, style=solid];
m0_416 -> m0_419  [key=2, style=dotted];
m0_417 -> m0_418  [key=0, style=solid];
m0_417 -> m0_105  [key=2, style=dotted];
m0_418 -> m0_415  [color=blue, key=0, style=bold];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_286  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_285 -> m0_9  [key=2, style=dotted];
m0_285 -> m0_10  [key=2, style=dotted];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_288  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_105  [key=2, style=dotted];
m0_287 -> m0_284  [color=blue, key=0, style=bold];
m0_199 -> m0_200  [key=0, style=solid];
m0_201 -> m0_9  [key=2, style=dotted];
m0_201 -> m0_10  [key=2, style=dotted];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_204  [key=2, style=dotted];
m0_200 -> m0_202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_105  [key=2, style=dotted];
m0_203 -> m0_199  [color=blue, key=0, style=bold];
m0_189 -> m0_190  [key=0, style=solid];
m0_191 -> m0_9  [key=2, style=dotted];
m0_191 -> m0_10  [key=2, style=dotted];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_192 -> m0_12  [key=2, style=dotted];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_36  [key=2, style=dotted];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_192  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m0_190 -> m0_194  [key=2, style=dotted];
m0_190 -> m0_70  [key=2, style=dotted];
m0_193 -> m0_189  [color=blue, key=0, style=bold];
m0_420 -> m0_14  [color=green, key=1, label=fakeOptions, style=dashed];
m0_421 -> m0_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_421 -> m0_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_422 -> m0_380  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_423 -> m0_390  [color=darkseagreen4, key=1, label=int, style=dashed];
}
