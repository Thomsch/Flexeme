digraph  {
n68 [label="System.StringComparer", span=""];
n69 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n70 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n71 [label="System.StringComparer", span=""];
n72 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
n73 [label=string, span=""];
n74 [label="System.StringComparer", span=""];
n0 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n1 [label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-28", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="21-21", cluster="lambda expression"];
n12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="21-21", cluster="lambda expression"];
n6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="22-22", cluster="lambda expression"];
n16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="22-22", cluster="lambda expression"];
n2 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n3 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="31-31", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n4 [label="Entry lambda expression", span="19-24", cluster="lambda expression"];
n9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n11 [label="Entry lambda expression", span="21-21", cluster="lambda expression"];
n7 [label="return explodedTokens;", span="23-23", cluster="lambda expression"];
n10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)"];
n15 [label="Entry lambda expression", span="22-22", cluster="lambda expression"];
n8 [label="Exit lambda expression", span="19-24", cluster="lambda expression"];
n13 [label="Exit lambda expression", span="21-21", cluster="lambda expression"];
n14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n17 [label="Exit lambda expression", span="22-22", cluster="lambda expression"];
n18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n19 [label="var verbs = Verb.SelectFromTypes(types)", span="38-38", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n20 [label="return arguments.Empty()\r\n                ? new NotParsed<object>(\r\n                    new NullInstance(),\r\n                    types,\r\n                    new[] { new NoVerbSelectedError() })\r\n                : nameComparer.Equals(''help'', arguments.First())\r\n                   ? new NotParsed<object>(\r\n                       new NullInstance(),\r\n                       types, new[] { CreateHelpVerbRequestedError(\r\n                                        verbs,\r\n                                        arguments.Skip(1).SingleOrDefault() ?? string.Empty,\r\n                                        nameComparer) })\r\n                   : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="40-52", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=1];
n22 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)"];
n21 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="31-31", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="62-62", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()"];
n24 [label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136", cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n25 [label="Entry CommandLine.NullInstance.NullInstance()", span="9-9", cluster="CommandLine.NullInstance.NullInstance()"];
n26 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="410-410", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()"];
n27 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()"];
n28 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)"];
n29 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)"];
n30 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()"];
n31 [label="Entry CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="75-75", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)"];
n32 [label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="55-55", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n33 [label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(() => verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : new NotParsed<object>(\r\n                    new NullInstance(),\r\n                    verbs.Select(v => v.Item2),\r\n                    new[] { new BadVerbSelectedError(arguments.First()) });", span="62-72", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n42 [label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="62-62", cluster="lambda expression"];
n45 [label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="64-64", cluster="lambda expression"];
n50 [label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="64-64", cluster="lambda expression"];
n34 [label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="55-55", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n35 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n36 [label="Entry Unk.>", span="", cluster="Unk.>"];
n37 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n38 [label="Entry NotParsed<object>.cstr", span="", cluster="NotParsed<object>.cstr"];
n39 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n40 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="346-346", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)"];
n41 [label="Entry lambda expression", span="62-62", cluster="lambda expression"];
n44 [label="Entry lambda expression", span="64-64", cluster="lambda expression"];
n52 [label="Entry lambda expression", span="71-71", cluster="lambda expression"];
n43 [label="Exit lambda expression", span="62-62", cluster="lambda expression"];
n46 [label="Exit lambda expression", span="64-64", cluster="lambda expression"];
n47 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
n48 [label="Entry Unk.AutoDefault", span="", cluster="Unk.AutoDefault"];
n49 [label="Entry lambda expression", span="64-64", cluster="lambda expression"];
n51 [label="Exit lambda expression", span="64-64", cluster="lambda expression"];
n53 [label="v.Item2", span="71-71", cluster="lambda expression"];
n54 [label="Exit lambda expression", span="71-71", cluster="lambda expression"];
n55 [label="return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", span="80-86", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)"];
n62 [label="nameComparer.Equals(v.Item1.Name, verb)", span="81-81", cluster="lambda expression"];
n56 [label="Exit CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="75-75", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)"];
n57 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault"];
n58 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe"];
n59 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="372-372", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)"];
n60 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
n61 [label="Entry lambda expression", span="81-81", cluster="lambda expression"];
n64 [label="Entry lambda expression", span="84-84", cluster="lambda expression"];
n63 [label="Exit lambda expression", span="81-81", cluster="lambda expression"];
n65 [label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="84-84", cluster="lambda expression"];
n66 [label="Exit lambda expression", span="84-84", cluster="lambda expression"];
n67 [label="Entry HelpVerbRequestedError.cstr", span="", cluster="HelpVerbRequestedError.cstr"];
d8 [label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="38-40", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0];
d6 [label="var type =\r\n                conversionType.GetTypeInfo()\r\n                              .GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJustOrFail(\r\n                                  new InvalidOperationException(''Non scalar properties should be sequence of type IEnumerable<T>.'')\r\n                    )", span="27-34", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)"];
d7 [label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase))", span="36-36", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)"];
d45 [label="Func<object> changeType = () =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                };\r\n\r\n                return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();\r\n            }", span="53-81", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0];
d46 [label="Func<object> makeType = () =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { value });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="83-94", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)"];
d9 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)"];
d18 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
d16 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d19 [label="Entry Unk.ToUntypedArray", span="", cluster="Unk.ToUntypedArray"];
d20 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)"];
d24 [label="Entry lambda expression", span="38-38", cluster="lambda expression"];
d29 [label="((Just<object>)c).Value", span="40-40", cluster="lambda expression", color=green, community=0];
d30 [label="Exit lambda expression", span="40-40", cluster="lambda expression"];
d31 [label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture, ignoreValueCase)", span="45-45", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0];
d4 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)"];
d32 [label="result.Match((_,__) => { }, e => e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="46-47", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0];
d35 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)"];
d33 [label="return result.ToMaybe();", span="48-48", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", color=green, community=0];
d36 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", span="495-495", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)"];
d40 [label="Entry lambda expression", span="46-47", cluster="lambda expression"];
d34 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)"];
d37 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", span="25-25", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()"];
d41 [label="e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="46-47", cluster="lambda expression", color=green, community=0];
d42 [label="Exit lambda expression", span="46-47", cluster="lambda expression"];
d44 [label="Entry System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", span="11-11", cluster="System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)"];
d47 [label="return Result.Try(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType);", span="96-99", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)"];
d53 [label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                }", span="55-76", cluster="lambda expression", color=green, community=0];
d106 [label=string, span=""];
d107 [label="System.Type", span=""];
d108 [label="System.Globalization.CultureInfo", span=""];
d52 [label="Entry lambda expression", span="53-81", cluster="lambda expression"];
d54 [label="return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();", span="78-80", cluster="lambda expression"];
d61 [label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="57-57", cluster="lambda expression", color=green, community=0];
d60 [label="Entry lambda expression", span="55-76", cluster="lambda expression"];
d62 [label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="59-63", cluster="lambda expression", color=green, community=0];
d50 [label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="40-40", cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)"];
d69 [label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="61-63", cluster="lambda expression", color=green, community=0];
d64 [label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture)", span="67-71", cluster="lambda expression"];
d74 [label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture)", span="69-71", cluster="lambda expression"];
d65 [label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="73-73", cluster="lambda expression"];
d79 [label="isFsOption ? FSharpOptionHelper.None(type) : null", span="73-73", cluster="lambda expression"];
d63 [label="var type = getUnderlyingType() ?? conversionType", span="65-65", cluster="lambda expression"];
d110 [label=isFsOption, span=""];
d68 [label="Entry lambda expression", span="60-63", cluster="lambda expression"];
d70 [label="Exit lambda expression", span="60-63", cluster="lambda expression"];
d71 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="11-11", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)"];
d72 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)"];
d5 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)"];
d10 [label="Entry System.Type.GetTypeInfo()", span="245-245", cluster="System.Type.GetTypeInfo()"];
d11 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
d13 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()"];
d14 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)"];
d15 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)"];
d22 [label="ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase)", span="36-36", cluster="lambda expression"];
d21 [label="Entry lambda expression", span="36-36", cluster="lambda expression"];
d26 [label="Exit lambda expression", span="38-38", cluster="lambda expression"];
d25 [label="a.MatchNothing()", span="38-38", cluster="lambda expression"];
d1 [label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture, ignoreValueCase)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture, ignoreValueCase);", span="20-22", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)"];
d0 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)"];
d48 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)"];
d58 [label="Entry string.ToEnum(System.Type, bool)", span="102-102", cluster="string.ToEnum(System.Type, bool)"];
d66 [label="return (value == null) ? empty() : withValue();", span="75-75", cluster="lambda expression"];
d83 [label="var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) })", span="87-87", cluster="lambda expression"];
d84 [label="return ctor.Invoke(new object[] { value });", span="88-88", cluster="lambda expression"];
d49 [label="Entry System.Type.IsPrimitiveEx()", span="228-228", cluster="System.Type.IsPrimitiveEx()"];
d51 [label="Entry RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", span="210-210", cluster="RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)"];
d55 [label="Exit lambda expression", span="53-81", cluster="lambda expression"];
d109 [label=bool, span=""];
d56 [label="Entry string.IsBooleanString()", span="65-65", cluster="string.IsBooleanString()"];
d57 [label="Entry string.ToBoolean()", span="71-71", cluster="string.ToBoolean()"];
d59 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
d67 [label="Exit lambda expression", span="55-76", cluster="lambda expression"];
d111 [label=type, span=""];
d73 [label="Entry lambda expression", span="68-71", cluster="lambda expression"];
d75 [label="Exit lambda expression", span="68-71", cluster="lambda expression"];
d76 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)"];
d77 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="20-20", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)"];
d78 [label="Entry lambda expression", span="73-73", cluster="lambda expression"];
d80 [label="Exit lambda expression", span="73-73", cluster="lambda expression"];
d81 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="28-28", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)"];
d103 [label="System.Globalization.CultureInfo", span=""];
d104 [label=bool, span=""];
d105 [label=type, span=""];
d23 [label="Exit lambda expression", span="36-36", cluster="lambda expression"];
d27 [label="Entry Unk.MatchNothing", span="", cluster="Unk.MatchNothing"];
d2 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)"];
d3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
d92 [label="object parsedValue", span="104-104", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)"];
d82 [label="Entry lambda expression", span="83-94", cluster="lambda expression"];
d88 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])"];
d87 [label="Exit lambda expression", span="83-94", cluster="lambda expression"];
d89 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])"];
d91 [label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="102-102", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)"];
d93 [label="parsedValue = Enum.Parse(conversionType, value, ignoreValueCase)", span="107-107", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)"];
d86 [label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="92-92", cluster="lambda expression"];
d99 [label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="102-102", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)"];
d96 [label="Enum.IsDefined(conversionType, parsedValue)", span="113-113", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)"];
d94 [label=ArgumentException, span="109-109", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)"];
d100 [label="Entry System.Enum.Parse(System.Type, string, bool)", span="0-0", cluster="System.Enum.Parse(System.Type, string, bool)"];
d97 [label="return parsedValue;", span="115-115", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)"];
d85 [label=Exception, span="90-90", cluster="lambda expression"];
d90 [label="Entry System.FormatException.FormatException(string)", span="0-0", cluster="System.FormatException.FormatException(string)"];
d95 [label="throw new FormatException();", span="111-111", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)"];
d98 [label="throw new FormatException();", span="117-117", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)"];
d102 [label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0", cluster="System.Enum.IsDefined(System.Type, object)"];
d101 [label="Entry System.FormatException.FormatException()", span="0-0", cluster="System.FormatException.FormatException()"];
n68 -> n5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n68 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n68 -> n6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n68 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n69 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n69 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n70 -> n42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n70 -> n45  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n70 -> n50  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n71 -> n42  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n71 -> n45  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n71 -> n50  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n72 -> n45  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
n73 -> n62  [key=1, style=dashed, color=darkseagreen4, label=string];
n74 -> n62  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n1  [key=0, style=solid];
n0 -> n5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> Choose"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n1 -> n1  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> "];
n5 -> n6  [key=0, style=solid];
n5 -> n9  [key=2, style=dotted];
n5 -> n11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n10  [key=2, style=dotted];
n6 -> n15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n3 -> n19  [key=0, style=solid];
n3 -> n20  [key=1, style=dashed, color=red, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
n4 -> n5  [key=0, style=solid];
n4 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n4 -> n6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n4 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n4 -> d29  [key=0, style=solid, color=green];
n11 -> n12  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n8 -> n4  [key=0, style=bold, color=blue];
n13 -> n11  [key=0, style=bold, color=blue];
n17 -> n15  [key=0, style=bold, color=blue];
n19 -> n20  [key=0, style=solid, color=red];
n19 -> n22  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid, color=red];
n20 -> n23  [key=2, style=dotted, color=red];
n20 -> n24  [key=2, style=dotted, color=red];
n20 -> n25  [key=2, style=dotted, color=red];
n20 -> n26  [key=2, style=dotted, color=red];
n20 -> n27  [key=2, style=dotted, color=red];
n20 -> n28  [key=2, style=dotted, color=red];
n20 -> n29  [key=2, style=dotted, color=red];
n20 -> n30  [key=2, style=dotted, color=red];
n20 -> n31  [key=2, style=dotted, color=red];
n20 -> n32  [key=2, style=dotted, color=red];
n21 -> n3  [key=0, style=bold, color=blue];
n31 -> n55  [key=0, style=solid];
n31 -> n62  [key=1, style=dashed, color=darkseagreen4, label=string];
n32 -> n33  [key=0, style=solid];
n32 -> n42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n32 -> n45  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
n32 -> n50  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n33 -> n34  [key=0, style=solid];
n33 -> n35  [key=2, style=dotted];
n33 -> n36  [key=2, style=dotted];
n33 -> n29  [key=2, style=dotted];
n33 -> n37  [key=2, style=dotted];
n33 -> n38  [key=2, style=dotted];
n33 -> n25  [key=2, style=dotted];
n33 -> n39  [key=2, style=dotted];
n33 -> n40  [key=2, style=dotted];
n33 -> n27  [key=2, style=dotted];
n33 -> n41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n33 -> n44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n33 -> n52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n42 -> n43  [key=0, style=solid];
n42 -> n27  [key=2, style=dotted];
n42 -> n28  [key=2, style=dotted];
n45 -> n46  [key=0, style=solid];
n45 -> n47  [key=2, style=dotted];
n45 -> n48  [key=2, style=dotted];
n45 -> n49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n50 -> n51  [key=0, style=solid];
n50 -> n27  [key=2, style=dotted];
n50 -> n28  [key=2, style=dotted];
n34 -> n32  [key=0, style=bold, color=blue];
n41 -> n42  [key=0, style=solid];
n44 -> n45  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n43 -> n41  [key=0, style=bold, color=blue];
n46 -> n44  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n51 -> n49  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid];
n54 -> n52  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n55 -> n57  [key=2, style=dotted];
n55 -> n58  [key=2, style=dotted];
n55 -> n59  [key=2, style=dotted];
n55 -> n60  [key=2, style=dotted];
n55 -> n61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n55 -> n64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n62 -> n63  [key=0, style=solid];
n62 -> n28  [key=2, style=dotted];
n56 -> n31  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid];
n64 -> n65  [key=0, style=solid];
n63 -> n61  [key=0, style=bold, color=blue];
n65 -> n66  [key=0, style=solid];
n65 -> n67  [key=2, style=dotted];
n66 -> n64  [key=0, style=bold, color=blue];
d8 -> d9  [key=0, style=solid, color=green];
d8 -> n35  [key=2, style=dotted, color=green];
d8 -> d18  [key=2, style=dotted, color=green];
d8 -> d16  [key=2, style=dotted, color=green];
d8 -> d19  [key=2, style=dotted, color=green];
d8 -> d20  [key=2, style=dotted, color=green];
d8 -> d24  [key=1, style=dashed, color=green, label="lambda expression"];
d8 -> n4  [key=1, style=dashed, color=green, label="lambda expression"];
d6 -> d8  [key=1, style=dashed, color=green, label=type];
d6 -> d45  [key=3, color=green, style=bold, label="method methodReturn CommandLine.ParserResult<object> Choose"];
d6 -> d7  [key=0, style=solid];
d6 -> d10  [key=2, style=dotted];
d6 -> d11  [key=2, style=dotted];
d6 -> n30  [key=2, style=dotted];
d6 -> d13  [key=2, style=dotted];
d6 -> d14  [key=2, style=dotted];
d6 -> d15  [key=2, style=dotted];
d6 -> d22  [key=1, style=dashed, color=darkseagreen4, label=type];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d16  [key=2, style=dotted];
d7 -> d21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d45 -> d8  [key=3, color=green, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>> verbs"];
d45 -> d45  [key=3, color=green, style=bold, label="Local variable System.Func<object> changeType"];
d45 -> d46  [key=0, style=solid, color=green];
d45 -> d47  [key=1, style=dashed, color=green, label=changeType];
d45 -> d6  [key=3, color=green, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments"];
d45 -> d7  [key=3, color=green, style=bold, label="Parameter variable System.Globalization.CultureInfo parsingCulture"];
d46 -> d8  [key=3, color=green, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>> verbs"];
d46 -> d46  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<object> makeType"];
d46 -> d47  [key=0, style=solid];
d9 -> d5  [key=0, style=bold, color=blue];
d24 -> d25  [key=0, style=solid];
d29 -> d30  [key=0, style=solid, color=green];
d30 -> n4  [key=0, style=bold, color=blue];
d31 -> d32  [key=0, style=solid, color=green];
d31 -> d35  [key=2, style=dotted, color=green];
d31 -> d33  [key=1, style=dashed, color=green, label=result];
d4 -> d31  [key=0, style=solid, color=green];
d4 -> d6  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type conversionType"];
d4 -> d7  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
d4 -> d0  [key=3, color=darkorchid, style=bold, label="Parameter variable bool ignoreValueCase"];
d4 -> d5  [key=3, color=darkorchid, style=bold, label="Parameter variable bool ignoreValueCase"];
d32 -> d33  [key=0, style=solid, color=green];
d32 -> d36  [key=2, style=dotted, color=green];
d32 -> n15  [key=1, style=dashed, color=green, label="lambda expression"];
d32 -> d40  [key=1, style=dashed, color=green, label="lambda expression"];
d35 -> d45  [key=0, style=solid, color=green];
d35 -> d53  [key=1, style=dashed, color=green, label=string];
d35 -> d61  [key=1, style=dashed, color=green, label="System.Type"];
d35 -> d62  [key=1, style=dashed, color=green, label="System.Type"];
d35 -> d69  [key=1, style=dashed, color=green, label="System.Type"];
d35 -> d46  [key=1, style=dashed, color=darkseagreen4, label=string];
d35 -> d4  [key=3, color=darkorchid, style=bold, label="Parameter variable bool ignoreValueCase"];
d35 -> d63  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d35 -> d64  [key=1, style=dashed, color=darkseagreen4, label=string];
d35 -> d74  [key=1, style=dashed, color=darkseagreen4, label=string];
d35 -> d66  [key=1, style=dashed, color=darkseagreen4, label=string];
d35 -> d54  [key=1, style=dashed, color=darkseagreen4, label=string];
d35 -> d83  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d35 -> d84  [key=1, style=dashed, color=darkseagreen4, label=string];
d35 -> d47  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d33 -> d34  [key=0, style=solid, color=green];
d33 -> d37  [key=2, style=dotted, color=green];
d40 -> d41  [key=0, style=solid, color=green];
d34 -> d4  [key=0, style=bold, color=blue];
d41 -> d42  [key=0, style=solid, color=green];
d41 -> n27  [key=2, style=dotted, color=green];
d41 -> d44  [key=2, style=dotted, color=green];
d42 -> d40  [key=0, style=bold, color=blue];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [key=2, style=dotted];
d47 -> d50  [key=2, style=dotted];
d47 -> d51  [key=2, style=dotted];
d53 -> d54  [key=0, style=solid, color=green];
d106 -> d53  [key=1, style=dashed, color=green, label=string];
d106 -> d64  [key=1, style=dashed, color=darkseagreen4, label=string];
d106 -> d74  [key=1, style=dashed, color=darkseagreen4, label=string];
d106 -> d66  [key=1, style=dashed, color=darkseagreen4, label=string];
d106 -> d54  [key=1, style=dashed, color=darkseagreen4, label=string];
d106 -> d84  [key=1, style=dashed, color=darkseagreen4, label=string];
d107 -> d53  [key=1, style=dashed, color=green, label="System.Type"];
d107 -> d61  [key=1, style=dashed, color=green, label="System.Type"];
d107 -> d62  [key=1, style=dashed, color=green, label="System.Type"];
d107 -> d69  [key=1, style=dashed, color=green, label="System.Type"];
d107 -> d63  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d107 -> d54  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d107 -> d83  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d108 -> d53  [key=1, style=dashed, color=green, label="System.Globalization.CultureInfo"];
d108 -> d64  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d108 -> d74  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d52 -> d53  [key=0, style=solid, color=green];
d54 -> d55  [key=0, style=solid];
d54 -> d56  [key=2, style=dotted];
d54 -> d57  [key=2, style=dotted];
d54 -> d10  [key=2, style=dotted];
d54 -> d58  [key=2, style=dotted];
d54 -> d59  [key=2, style=dotted];
d61 -> d62  [key=0, style=solid, color=green];
d61 -> d50  [key=2, style=dotted, color=green];
d61 -> d69  [key=1, style=dashed, color=green, label=isFsOption];
d61 -> d64  [key=1, style=dashed, color=green, label=isFsOption];
d61 -> d74  [key=1, style=dashed, color=green, label=isFsOption];
d61 -> d65  [key=1, style=dashed, color=green, label=isFsOption];
d61 -> d79  [key=1, style=dashed, color=green, label=isFsOption];
d60 -> d61  [key=0, style=solid, color=green];
d62 -> d63  [key=0, style=solid, color=green];
d69 -> d70  [key=0, style=solid, color=green];
d69 -> d71  [key=2, style=dotted, color=green];
d69 -> d72  [key=2, style=dotted, color=green];
d64 -> d65  [key=0, style=solid];
d64 -> d66  [key=1, style=dashed, color=darkseagreen4, label=withValue];
d74 -> d75  [key=0, style=solid];
d74 -> d76  [key=2, style=dotted];
d74 -> d77  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d79 -> d80  [key=0, style=solid];
d79 -> d81  [key=2, style=dotted];
d63 -> d64  [key=0, style=solid];
d63 -> d74  [key=1, style=dashed, color=darkseagreen4, label=type];
d63 -> d65  [key=1, style=dashed, color=darkseagreen4, label=type];
d63 -> d79  [key=1, style=dashed, color=darkseagreen4, label=type];
d63 -> d59  [key=2, style=dotted];
d110 -> d69  [key=1, style=dashed, color=green, label=isFsOption];
d110 -> d74  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d110 -> d79  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
d68 -> d69  [key=0, style=solid, color=green];
d70 -> d68  [key=0, style=bold, color=blue];
d5 -> d6  [key=0, style=solid];
d5 -> d7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d5 -> d22  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d5 -> d0  [key=3, color=darkorchid, style=bold, label="Parameter variable bool ignoreValueCase"];
d22 -> d4  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d21 -> d22  [key=0, style=solid];
d26 -> d24  [key=0, style=bold, color=blue];
d25 -> d26  [key=0, style=solid];
d25 -> d27  [key=2, style=dotted];
d1 -> d4  [key=2, style=dotted];
d1 -> d5  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d1 -> d3  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d48 -> d35  [key=0, style=bold, color=blue];
d58 -> d35  [key=3, color=darkorchid, style=bold, label="Parameter variable bool ignoreValueCase"];
d58 -> d92  [key=3, color=darkorchid, style=bold, label="method methodReturn object ToEnum"];
d66 -> d67  [key=0, style=solid];
d66 -> d59  [key=2, style=dotted];
d83 -> d10  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d83 -> d88  [key=2, style=dotted];
d84 -> d87  [key=0, style=solid];
d84 -> d89  [key=2, style=dotted];
d55 -> d52  [key=0, style=bold, color=blue];
d109 -> d54  [key=1, style=dashed, color=darkseagreen4, label=bool];
d67 -> d60  [key=0, style=bold, color=blue];
d111 -> d74  [key=1, style=dashed, color=darkseagreen4, label=type];
d111 -> d79  [key=1, style=dashed, color=darkseagreen4, label=type];
d73 -> d74  [key=0, style=solid];
d75 -> d73  [key=0, style=bold, color=blue];
d78 -> d79  [key=0, style=solid];
d80 -> d78  [key=0, style=bold, color=blue];
d103 -> d22  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d104 -> d22  [key=1, style=dashed, color=darkseagreen4, label=bool];
d105 -> d22  [key=1, style=dashed, color=darkseagreen4, label=type];
d23 -> d21  [key=0, style=bold, color=blue];
d2 -> d0  [key=0, style=bold, color=blue];
d92 -> d93  [key=0, style=solid];
d82 -> d83  [key=0, style=solid];
d87 -> d82  [key=0, style=bold, color=blue];
d91 -> d92  [key=0, style=solid];
d91 -> d93  [key=1, style=dashed, color=darkseagreen4, label=string];
d91 -> d96  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d93 -> d94  [key=0, style=solid];
d93 -> d96  [key=0, style=solid];
d93 -> d100  [key=2, style=dotted];
d93 -> d97  [key=1, style=dashed, color=darkseagreen4, label=parsedValue];
d86 -> d87  [key=0, style=solid];
d86 -> d90  [key=2, style=dotted];
d99 -> d91  [key=0, style=bold, color=blue];
d96 -> d97  [key=0, style=solid];
d96 -> d98  [key=0, style=solid];
d96 -> d102  [key=2, style=dotted];
d94 -> d95  [key=0, style=solid];
d97 -> d99  [key=0, style=solid];
d85 -> d86  [key=0, style=solid];
d95 -> d99  [key=0, style=solid];
d95 -> d101  [key=2, style=dotted];
d98 -> d99  [key=0, style=solid];
d98 -> d101  [key=2, style=dotted];
}
