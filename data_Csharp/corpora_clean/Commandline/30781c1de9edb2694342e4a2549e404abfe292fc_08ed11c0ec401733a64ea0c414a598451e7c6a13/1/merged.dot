digraph  {
n78 [label=pt, span=""];
n0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n2 [label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n5 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n6 [label="Entry Unk.>", span="", cluster="Unk.>"];
n7 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed"];
n8 [label="Entry lambda expression", span="23-23", cluster="lambda expression"];
n11 [label="Entry lambda expression", span="24-24", cluster="lambda expression"];
n14 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
n9 [label="pe.Item1", span="23-23", cluster="lambda expression"];
n10 [label="Exit lambda expression", span="23-23", cluster="lambda expression"];
n12 [label="pe.Item2", span="24-24", cluster="lambda expression"];
n13 [label="Exit lambda expression", span="24-24", cluster="lambda expression"];
n15 [label="e.Value", span="25-25", cluster="lambda expression"];
n16 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
n17 [label="specProps.Empty()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n18 [label="yield break;", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n22 [label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n23 [label="yield break;", span="44-44", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n26 [label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n27 [label="yield break;", span="55-55", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n28 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n30 [label="yield return value;", span="67-67", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n19 [label="var pt = specProps.First()", span="38-38", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n20 [label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="39-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n24 [label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n25 [label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n29 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()"];
n33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()"];
n60 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61", cluster="lambda expression"];
n21 [label="taken.Empty()", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n34 [label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71", cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()"];
n35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
n36 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
n37 [label="Entry Unk.Take", span="", cluster="Unk.Take"];
n52 [label="Entry lambda expression", span="39-39", cluster="lambda expression"];
n38 [label="Entry Unk.Empty", span="", cluster="Unk.Empty"];
n39 [label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87", cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()"];
n40 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)"];
n41 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)"];
n42 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault"];
n43 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe"];
n55 [label="Entry lambda expression", span="47-47", cluster="lambda expression"];
n44 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()"];
n45 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing"];
n46 [label="Entry Unk.Count", span="", cluster="Unk.Count"];
n47 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
n48 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
n49 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)"];
n50 [label="Entry Unk.converter", span="", cluster="Unk.converter"];
n51 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
n59 [label="Entry lambda expression", span="61-61", cluster="lambda expression"];
n31 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
n53 [label=n, span="39-39", cluster="lambda expression"];
n54 [label="Exit lambda expression", span="39-39", cluster="lambda expression"];
n56 [label="s.Specification.IsValue()", span="47-47", cluster="lambda expression"];
n57 [label="Exit lambda expression", span="47-47", cluster="lambda expression"];
n58 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
n61 [label="Exit lambda expression", span="61-61", cluster="lambda expression"];
n62 [label="Entry Unk.Just", span="", cluster="Unk.Just"];
n63 [label="Entry Unk.WithValue", span="", cluster="Unk.WithValue"];
n64 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
n65 [label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n66 [label="specification.TargetType", span="73-73", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n70 [label="specification.Max.IsJust()", span="78-78", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n71 [label="return Maybe.Just(specification.Max.FromJust());", span="80-80", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n67 [label="TargetType.Scalar", span="75-75", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n69 [label="TargetType.Sequence", span="77-77", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n68 [label="return Maybe.Just(1);", span="76-76", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n72 [label="return Maybe.Nothing<int>();", span="84-84", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n73 [label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
n74 [label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342", cluster="CSharpx.Maybe<T>.FromJust<T>()"];
n75 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)"];
n76 [label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)"];
n77 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)"];
m0_36 [label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126", cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="InstanceBuilderTests.cs"];
m0_0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_2 [label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_71 [label="Entry CSharpx.Maybe<T>.FromJust<T>(System.Exception)", span="160-160", cluster="CSharpx.Maybe<T>.FromJust<T>(System.Exception)", file="InstanceBuilderTests.cs"];
m0_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="InstanceBuilderTests.cs"];
m0_4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_17 [label="specProps.Empty()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_18 [label="yield break;", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_22 [label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_23 [label="yield break;", span="44-44", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_26 [label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_27 [label="yield break;", span="55-55", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_28 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_30 [label="yield return value;", span="67-67", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_19 [label="var pt = specProps.First()", span="38-38", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_20 [label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="39-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_24 [label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_25 [label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_29 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_21 [label="taken.Empty()", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_31 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs"];
m0_34 [label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71", cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="InstanceBuilderTests.cs"];
m0_56 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilderTests.cs"];
m0_42 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="InstanceBuilderTests.cs"];
m0_45 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilderTests.cs"];
m0_46 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_39 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="InstanceBuilderTests.cs"];
m0_57 [label="Entry lambda expression", span="61-61", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_8 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_11 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_14 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_9 [label="pe.Item1", span="23-23", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_10 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_12 [label="pe.Item2", span="24-24", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_15 [label="e.Value", span="25-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_16 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_58 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_50 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_53 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_51 [label=n, span="39-39", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_52 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_54 [label="s.Specification.IsValue()", span="47-47", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_55 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_59 [label="Exit lambda expression", span="61-61", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceBuilderTests.cs"];
m0_47 [label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80", cluster="CSharpx.Maybe.Just<T>(T)", file="InstanceBuilderTests.cs"];
m0_60 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="InstanceBuilderTests.cs"];
m0_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="InstanceBuilderTests.cs"];
m0_37 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="InstanceBuilderTests.cs"];
m0_48 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="InstanceBuilderTests.cs"];
m0_72 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_73 [label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_74 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_5 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="InstanceBuilderTests.cs"];
m0_49 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_38 [label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87", cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="InstanceBuilderTests.cs"];
m0_61 [label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75", cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceBuilderTests.cs"];
m0_44 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="170-170", cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="InstanceBuilderTests.cs"];
m0_35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="InstanceBuilderTests.cs"];
m0_62 [label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_63 [label="specification.TargetType", span="73-73", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_67 [label="specification.Max.IsJust()", span="78-78", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_68 [label="return Maybe.Just(specification.Max.FromJust());", span="80-80", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_64 [label="TargetType.Scalar", span="75-75", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_66 [label="TargetType.Sequence", span="77-77", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_65 [label="return Maybe.Just(1);", span="76-76", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_69 [label="return Maybe.Nothing<int>();", span="84-84", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_70 [label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs"];
m0_41 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="InstanceBuilderTests.cs"];
m0_43 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="175-175", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="InstanceBuilderTests.cs"];
m0_7 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="InstanceBuilderTests.cs"];
m0_75 [label=pt, span="", file="InstanceBuilderTests.cs"];
m1_9 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs"];
m1_10 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="Specification.cs"];
m1_11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="Specification.cs"];
m1_35 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="Specification.cs"];
m1_45 [label="Func<string, object> makeType = input =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { input });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="76-87", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="Specification.cs"];
m1_44 [label="Func<string, object> changeType = input =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                };\r\n\r\n                return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();\r\n            }", span="46-74", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="Specification.cs"];
m1_46 [label="return Either.Protect(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType, value);", span="89-92", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="Specification.cs"];
m1_47 [label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44", cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="Specification.cs"];
m1_4 [label="Entry CommandLine.Utils.StringExtensions.IsNumeric(string)", span="44-44", cluster="CommandLine.Utils.StringExtensions.IsNumeric(string)", file="Specification.cs"];
m1_31 [label="'\x2029'", span="84-84", cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs"];
m1_32 [label="return true;", span="85-85", cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs"];
m1_33 [label="return false;", span="88-88", cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs"];
m1_34 [label="Exit CommandLine.Utils.StringExtensions.IsLineTerminator(char)", span="77-77", cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs"];
m1_5 [label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs"];
m1_6 [label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="22-27", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs"];
m1_7 [label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture))", span="29-29", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs"];
m1_0 [label="Entry CommandLine.Utils.StringExtensions.Spaces(int)", span="39-39", cluster="CommandLine.Utils.StringExtensions.Spaces(int)", file="Specification.cs"];
m1_1 [label="return new string(' ', value);", span="41-41", cluster="CommandLine.Utils.StringExtensions.Spaces(int)", file="Specification.cs"];
m1_2 [label="Exit CommandLine.Utils.StringExtensions.Spaces(int)", span="39-39", cluster="CommandLine.Utils.StringExtensions.Spaces(int)", file="Specification.cs"];
m1_101 [label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0", cluster="System.Enum.IsDefined(System.Type, object)", file="Specification.cs"];
m1_76 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="14-14", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="Specification.cs"];
m1_13 [label="Entry CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", span="55-55", cluster="CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", file="Specification.cs"];
m1_16 [label="Entry CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", span="60-60", cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs"];
m1_12 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="Specification.cs"];
m1_70 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="Specification.cs"];
m1_8 [label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="31-33", cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs"];
m1_3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="Specification.cs"];
m1_25 [label="a.MatchNothing()", span="31-31", cluster="lambda expression", file="Specification.cs"];
m1_71 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)", file="Specification.cs"];
m1_99 [label="Entry System.Enum.Parse(System.Type, string)", span="0-0", cluster="System.Enum.Parse(System.Type, string)", file="Specification.cs"];
m1_58 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="Specification.cs"];
m1_28 [label="'\xD'", span="81-81", cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs", color=red, community=0];
m1_83 [label="return ctor.Invoke(new object[] { input });", span="81-81", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m1_82 [label="var ctor = conversionType.GetConstructor(new[] { typeof(string) })", span="80-80", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m1_81 [label="Entry lambda expression", span="76-87", cluster="lambda expression", file="Specification.cs"];
m1_86 [label="Exit lambda expression", span="76-87", cluster="lambda expression", file="Specification.cs"];
m1_84 [label=Exception, span="83-83", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m1_85 [label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="85-85", cluster="lambda expression", file="Specification.cs"];
m1_52 [label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                }", span="48-69", cluster="lambda expression", file="Specification.cs"];
m1_60 [label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="50-50", cluster="lambda expression", file="Specification.cs"];
m1_61 [label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="52-56", cluster="lambda expression", file="Specification.cs"];
m1_68 [label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="54-56", cluster="lambda expression", file="Specification.cs"];
m1_62 [label="var type = getUnderlyingType() ?? conversionType", span="58-58", cluster="lambda expression", file="Specification.cs"];
m1_63 [label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="60-64", cluster="lambda expression", file="Specification.cs"];
m1_73 [label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="62-64", cluster="lambda expression", file="Specification.cs"];
m1_53 [label="return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();", span="71-73", cluster="lambda expression", file="Specification.cs"];
m1_65 [label="return (input == null) ? empty() : withValue();", span="68-68", cluster="lambda expression", file="Specification.cs"];
m1_51 [label="Entry lambda expression", span="46-74", cluster="lambda expression", file="Specification.cs"];
m1_59 [label="Entry lambda expression", span="48-69", cluster="lambda expression", file="Specification.cs"];
m1_64 [label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66", cluster="lambda expression", file="Specification.cs"];
m1_78 [label="isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66", cluster="lambda expression", file="Specification.cs"];
m1_67 [label="Entry lambda expression", span="53-56", cluster="lambda expression", file="Specification.cs"];
m1_69 [label="Exit lambda expression", span="53-56", cluster="lambda expression", file="Specification.cs"];
m1_72 [label="Entry lambda expression", span="61-64", cluster="lambda expression", file="Specification.cs"];
m1_74 [label="Exit lambda expression", span="61-64", cluster="lambda expression", file="Specification.cs"];
m1_54 [label="Exit lambda expression", span="46-74", cluster="lambda expression", file="Specification.cs"];
m1_66 [label="Exit lambda expression", span="48-69", cluster="lambda expression", file="Specification.cs"];
m1_38 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="Specification.cs"];
m1_40 [label="Entry lambda expression", span="39-40", cluster="lambda expression", file="Specification.cs"];
m1_77 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="Specification.cs"];
m1_79 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="Specification.cs"];
m1_39 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="Specification.cs"];
m1_42 [label="Exit lambda expression", span="39-40", cluster="lambda expression", file="Specification.cs"];
m1_41 [label="e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="39-40", cluster="lambda expression", file="Specification.cs"];
m1_21 [label="'\t'", span="68-68", cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs"];
m1_20 [label="' '", span="67-67", cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs"];
m1_22 [label="return true;", span="69-69", cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs"];
m1_24 [label="Exit CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", span="60-60", cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs"];
m1_26 [label="Entry CommandLine.Utils.StringExtensions.IsLineTerminator(char)", span="77-77", cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs"];
m1_29 [label="'\xA'", span="82-82", cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs"];
m1_30 [label="'\x2028'", span="83-83", cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs"];
m1_43 [label="Entry Unk.RethrowWhenAbsentIn", span="", cluster="Unk.RethrowWhenAbsentIn", file="Specification.cs"];
m1_75 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="Specification.cs"];
m1_57 [label="Entry string.ToEnum(System.Type)", span="95-95", cluster="string.ToEnum(System.Type)", file="Specification.cs"];
m1_17 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="Specification.cs"];
m1_23 [label="Entry Unk.ChangeTypeScalar", span="", cluster="Unk.ChangeTypeScalar", file="Specification.cs"];
m1_18 [label="Entry Unk.ToUntypedArray", span="", cluster="Unk.ToUntypedArray", file="Specification.cs"];
m1_19 [label="'\v'", span="66-66", cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs"];
m1_49 [label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35", cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="Specification.cs"];
m1_48 [label="Entry System.Type.IsPrimitiveEx()", span="209-209", cluster="System.Type.IsPrimitiveEx()", file="Specification.cs"];
m1_15 [label="Exit CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", span="55-55", cluster="CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", file="Specification.cs"];
m1_37 [label="Entry Unk.OfEither", span="", cluster="Unk.OfEither", file="Specification.cs"];
m1_50 [label="Entry Unk.Protect", span="", cluster="Unk.Protect", file="Specification.cs"];
m1_36 [label="Entry Unk.Match", span="", cluster="Unk.Match", file="Specification.cs"];
m1_56 [label="Entry string.ToBoolean()", span="61-61", cluster="string.ToBoolean()", file="Specification.cs"];
m1_89 [label="Entry System.FormatException.FormatException(string)", span="0-0", cluster="System.FormatException.FormatException(string)", file="Specification.cs"];
m1_87 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])", file="Specification.cs"];
m1_14 [label="return string.Format(CultureInfo.CurrentCulture, value, arguments);", span="57-57", cluster="CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", file="Specification.cs"];
m1_90 [label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs"];
m1_91 [label="object parsedValue", span="97-97", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs"];
m1_92 [label="parsedValue = Enum.Parse(conversionType, value)", span="100-100", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs"];
m1_95 [label="Enum.IsDefined(conversionType, parsedValue)", span="106-106", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs"];
m1_93 [label=ArgumentException, span="102-102", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs"];
m1_96 [label="return parsedValue;", span="108-108", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs"];
m1_94 [label="throw new FormatException();", span="104-104", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs"];
m1_97 [label="throw new FormatException();", span="110-110", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs"];
m1_98 [label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95", cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs"];
m1_55 [label="Entry string.IsBooleanString()", span="55-55", cluster="string.IsBooleanString()", file="Specification.cs"];
m1_27 [label=c, span="79-79", cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs", color=red, community=0];
m1_88 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="Specification.cs"];
m1_100 [label="Entry System.FormatException.FormatException()", span="0-0", cluster="System.FormatException.FormatException()", file="Specification.cs"];
m1_80 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="22-22", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="Specification.cs"];
m1_104 [label="System.Type", span="", file="Specification.cs"];
m1_105 [label="System.Globalization.CultureInfo", span="", file="Specification.cs"];
m1_107 [label=isFsOption, span="", file="Specification.cs"];
m1_106 [label=string, span="", file="Specification.cs"];
m1_108 [label=type, span="", file="Specification.cs"];
m1_102 [label="System.Globalization.CultureInfo", span="", file="Specification.cs"];
m1_103 [label=type, span="", file="Specification.cs"];
m2_12 [label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", span="45-45", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", file="SpecificationExtensions.cs"];
m2_13 [label="DateHumanize.Verify(expected, months, TimeUnit.Month, Tense.Past)", span="47-47", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", file="SpecificationExtensions.cs"];
m2_14 [label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", span="45-45", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", file="SpecificationExtensions.cs"];
m2_5 [label="Entry Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?)", span="29-29", cluster="Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?)", file="SpecificationExtensions.cs"];
m2_2 [label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", span="15-15", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", file="SpecificationExtensions.cs"];
m2_3 [label="DateHumanize.Verify(expected, days, TimeUnit.Day, Tense.Past)", span="17-17", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", file="SpecificationExtensions.cs"];
m2_4 [label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", span="15-15", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", file="SpecificationExtensions.cs"];
m2_15 [label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", span="55-55", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", file="SpecificationExtensions.cs"];
m2_16 [label="DateHumanize.Verify(expected, seconds, TimeUnit.Second, Tense.Past)", span="57-57", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", file="SpecificationExtensions.cs"];
m2_17 [label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", span="55-55", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", file="SpecificationExtensions.cs"];
m2_9 [label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", span="35-35", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", file="SpecificationExtensions.cs"];
m2_10 [label="DateHumanize.Verify(expected, minutes, TimeUnit.Minute, Tense.Past)", span="37-37", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", file="SpecificationExtensions.cs"];
m2_11 [label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", span="35-35", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", file="SpecificationExtensions.cs"];
m2_6 [label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", span="25-25", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", file="SpecificationExtensions.cs"];
m2_7 [label="DateHumanize.Verify(expected, hours, TimeUnit.Hour, Tense.Past)", span="27-27", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", file="SpecificationExtensions.cs"];
m2_8 [label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", span="25-25", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", file="SpecificationExtensions.cs"];
m2_18 [label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", span="65-65", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", file="SpecificationExtensions.cs"];
m2_19 [label="DateHumanize.Verify(expected, years, TimeUnit.Year, Tense.Past)", span="67-67", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", file="SpecificationExtensions.cs"];
m2_20 [label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", span="65-65", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", file="SpecificationExtensions.cs"];
m2_0 [label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.DateHumanizeTests()", span="7-7", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DateHumanizeTests()", file="SpecificationExtensions.cs"];
m2_1 [label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.DateHumanizeTests()", span="7-7", cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DateHumanizeTests()", file="SpecificationExtensions.cs"];
n78 -> n60  [key=1, style=dashed, color=darkseagreen4, label=pt];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n2 -> n6  [key=2, style=dotted];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n4 -> n17  [key=0, style=solid];
n4 -> n18  [key=0, style=bold, color=crimson];
n4 -> n22  [key=0, style=bold, color=crimson];
n4 -> n23  [key=0, style=bold, color=crimson];
n4 -> n26  [key=0, style=bold, color=crimson];
n4 -> n27  [key=0, style=bold, color=crimson];
n4 -> n28  [key=0, style=bold, color=crimson];
n4 -> n30  [key=0, style=bold, color=crimson];
n4 -> n19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n4 -> n20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n4 -> n24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n4 -> n25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n4 -> n29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
n3 -> n0  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n10 -> n8  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n13 -> n11  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n14  [key=0, style=bold, color=blue];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=0, style=solid];
n17 -> n32  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n39  [key=2, style=dotted];
n22 -> n40  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n48  [key=2, style=dotted];
n26 -> n49  [key=2, style=dotted];
n26 -> n40  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n50  [key=2, style=dotted];
n28 -> n51  [key=2, style=dotted];
n28 -> n49  [key=2, style=dotted];
n28 -> n40  [key=2, style=dotted];
n28 -> n36  [key=2, style=dotted];
n28 -> n59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n30 -> n29  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n33  [key=2, style=dotted];
n19 -> n22  [key=1, style=dashed, color=darkseagreen4, label=pt];
n19 -> n25  [key=1, style=dashed, color=darkseagreen4, label=pt];
n19 -> n26  [key=1, style=dashed, color=darkseagreen4, label=pt];
n19 -> n28  [key=1, style=dashed, color=darkseagreen4, label=pt];
n19 -> n60  [key=1, style=dashed, color=darkseagreen4, label=pt];
n20 -> n21  [key=0, style=solid];
n20 -> n34  [key=2, style=dotted];
n20 -> n35  [key=2, style=dotted];
n20 -> n36  [key=2, style=dotted];
n20 -> n37  [key=2, style=dotted];
n20 -> n52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n20 -> n25  [key=1, style=dashed, color=darkseagreen4, label=taken];
n20 -> n28  [key=1, style=dashed, color=darkseagreen4, label=taken];
n20 -> n29  [key=1, style=dashed, color=darkseagreen4, label=taken];
n24 -> n25  [key=0, style=solid];
n24 -> n41  [key=2, style=dotted];
n24 -> n42  [key=2, style=dotted];
n24 -> n43  [key=2, style=dotted];
n24 -> n55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n25 -> n26  [key=0, style=solid];
n25 -> n28  [key=0, style=solid];
n25 -> n44  [key=2, style=dotted];
n25 -> n45  [key=2, style=dotted];
n25 -> n46  [key=2, style=dotted];
n25 -> n41  [key=2, style=dotted];
n25 -> n47  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n29 -> n31  [key=0, style=solid];
n29 -> n41  [key=2, style=dotted];
n29 -> n46  [key=2, style=dotted];
n29 -> n4  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n62  [key=2, style=dotted];
n60 -> n63  [key=2, style=dotted];
n60 -> n64  [key=2, style=dotted];
n60 -> n40  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n24  [key=0, style=solid];
n21 -> n38  [key=2, style=dotted];
n52 -> n53  [key=0, style=solid];
n55 -> n56  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n31 -> n4  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid];
n54 -> n52  [key=0, style=bold, color=blue];
n56 -> n57  [key=0, style=solid];
n56 -> n58  [key=2, style=dotted];
n57 -> n55  [key=0, style=bold, color=blue];
n61 -> n59  [key=0, style=bold, color=blue];
n65 -> n66  [key=0, style=solid];
n65 -> n70  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n65 -> n71  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n66 -> n67  [key=0, style=solid];
n66 -> n69  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n70 -> n72  [key=0, style=solid];
n70 -> n44  [key=2, style=dotted];
n71 -> n73  [key=0, style=solid];
n71 -> n74  [key=2, style=dotted];
n71 -> n49  [key=2, style=dotted];
n67 -> n68  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n68 -> n73  [key=0, style=solid];
n68 -> n49  [key=2, style=dotted];
n72 -> n73  [key=0, style=solid];
n72 -> n64  [key=2, style=dotted];
n73 -> n65  [key=0, style=bold, color=blue];
n75 -> n76  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n44  [key=2, style=dotted];
n76 -> n48  [key=2, style=dotted];
n76 -> n49  [key=2, style=dotted];
n76 -> n64  [key=2, style=dotted];
n77 -> n75  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_17  [key=0, style=solid];
m0_4 -> m0_18  [key=0, style=bold, color=crimson];
m0_4 -> m0_22  [key=0, style=bold, color=crimson];
m0_4 -> m0_23  [key=0, style=bold, color=crimson];
m0_4 -> m0_26  [key=0, style=bold, color=crimson];
m0_4 -> m0_27  [key=0, style=bold, color=crimson];
m0_4 -> m0_28  [key=0, style=bold, color=crimson];
m0_4 -> m0_30  [key=0, style=bold, color=crimson];
m0_4 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_4 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_4 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_4 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_4 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=0, style=solid];
m0_17 -> n32  [key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_38  [key=2, style=dotted];
m0_22 -> m0_39  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_46  [key=2, style=dotted];
m0_26 -> m0_47  [key=2, style=dotted];
m0_26 -> m0_39  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_48  [key=2, style=dotted];
m0_28 -> m0_49  [key=2, style=dotted];
m0_28 -> m0_47  [key=2, style=dotted];
m0_28 -> m0_39  [key=2, style=dotted];
m0_28 -> m0_36  [key=2, style=dotted];
m0_28 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_30 -> m0_29  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_33  [key=2, style=dotted];
m0_19 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_19 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_19 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_19 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_19 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_34  [key=2, style=dotted];
m0_20 -> m0_35  [key=2, style=dotted];
m0_20 -> m0_36  [key=2, style=dotted];
m0_20 -> m0_37  [key=2, style=dotted];
m0_20 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_20 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=taken];
m0_20 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=taken];
m0_20 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=taken];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_40  [key=2, style=dotted];
m0_24 -> m0_41  [key=2, style=dotted];
m0_24 -> m0_42  [key=2, style=dotted];
m0_24 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_28  [key=0, style=solid];
m0_25 -> m0_43  [key=2, style=dotted];
m0_25 -> m0_44  [key=2, style=dotted];
m0_25 -> m0_35  [key=2, style=dotted];
m0_25 -> m0_40  [key=2, style=dotted];
m0_25 -> m0_45  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=0, style=solid];
m0_29 -> m0_40  [key=2, style=dotted];
m0_29 -> m0_35  [key=2, style=dotted];
m0_29 -> m0_4  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_24  [key=0, style=solid];
m0_21 -> n32  [key=2, style=dotted];
m0_31 -> m0_4  [key=0, style=bold, color=blue];
m0_57 -> m0_58  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_11  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_16 -> m0_14  [key=0, style=bold, color=blue];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_47  [key=2, style=dotted];
m0_58 -> m0_60  [key=2, style=dotted];
m0_58 -> m0_61  [key=2, style=dotted];
m0_58 -> m0_39  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_52 -> m0_50  [key=0, style=bold, color=blue];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_56  [key=2, style=dotted];
m0_55 -> m0_53  [key=0, style=bold, color=blue];
m0_59 -> m0_57  [key=0, style=bold, color=blue];
m0_72 -> m0_73  [key=0, style=solid];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_43  [key=2, style=dotted];
m0_73 -> m0_46  [key=2, style=dotted];
m0_73 -> m0_47  [key=2, style=dotted];
m0_73 -> m0_61  [key=2, style=dotted];
m0_74 -> m0_72  [key=0, style=bold, color=blue];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_62 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_66  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_69  [key=0, style=solid];
m0_67 -> m0_43  [key=2, style=dotted];
m0_68 -> m0_70  [key=0, style=solid];
m0_68 -> m0_71  [key=2, style=dotted];
m0_68 -> m0_47  [key=2, style=dotted];
m0_64 -> m0_65  [key=0, style=solid];
m0_66 -> m0_67  [key=0, style=solid];
m0_65 -> m0_70  [key=0, style=solid];
m0_65 -> m0_47  [key=2, style=dotted];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_61  [key=2, style=dotted];
m0_70 -> m0_62  [key=0, style=bold, color=blue];
m0_75 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_5  [key=0, style=bold, color=blue];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_12  [key=2, style=dotted];
m1_11 -> m1_9  [key=0, style=bold, color=blue];
m1_35 -> m1_45  [key=1, style=dashed, color=green, label="System.Type"];
m1_35 -> m1_82  [key=1, style=dashed, color=green, label="System.Type"];
m1_35 -> m1_44  [key=0, style=solid];
m1_35 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_35 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_35 -> m1_61  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_35 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_35 -> m1_62  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_35 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_35 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_35 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_35 -> m1_46  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_35 -> m1_4  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m1_45 -> m1_45  [key=3, color=green, style=bold, label="Local variable System.Func<string, object> makeType"];
m1_45 -> m1_46  [key=0, style=solid, color=green];
m1_45 -> m1_83  [key=1, style=dashed, color=green, label=string];
m1_44 -> m1_45  [key=0, style=solid, color=green];
m1_44 -> m1_44  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<string, object> changeType"];
m1_44 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_44 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_44 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_44 -> m1_65  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_44 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_44 -> m1_46  [key=1, style=dashed, color=darkseagreen4, label=changeType];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_48  [key=2, style=dotted];
m1_46 -> m1_49  [key=2, style=dotted];
m1_46 -> m1_50  [key=2, style=dotted];
m1_47 -> m1_35  [key=0, style=bold, color=blue];
m1_4 -> m1_31  [key=0, style=solid];
m1_4 -> m1_0  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_31 -> m1_35  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_36  [key=2, style=dotted];
m1_32 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_32 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_32 -> m1_34  [key=0, style=solid];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_37  [key=2, style=dotted];
m1_34 -> m1_4  [key=0, style=bold, color=blue];
m1_34 -> m1_26  [key=0, style=bold, color=blue];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_0  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
m1_5 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_5 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_8  [key=2, style=dotted];
m1_6 -> m1_10  [key=2, style=dotted];
m1_6 -> m1_11  [key=2, style=dotted];
m1_6 -> m1_12  [key=2, style=dotted];
m1_6 -> m1_13  [key=2, style=dotted];
m1_6 -> m1_14  [key=2, style=dotted];
m1_6 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label=type];
m1_7 -> m1_4  [key=0, style=bold, color=blue];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_15  [key=2, style=dotted];
m1_7 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_13 -> m1_14  [key=0, style=solid];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label=char];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_16  [key=2, style=dotted];
m1_8 -> m1_17  [key=2, style=dotted];
m1_8 -> m1_15  [key=2, style=dotted];
m1_8 -> m1_18  [key=2, style=dotted];
m1_8 -> n49  [key=2, style=dotted];
m1_8 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_8 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid, color=red];
m1_83 -> m1_86  [key=0, style=solid, color=green];
m1_83 -> m1_88  [key=2, style=dotted, color=green];
m1_82 -> m1_83  [key=0, style=solid, color=green];
m1_82 -> m1_87  [key=2, style=dotted, color=green];
m1_81 -> m1_82  [key=0, style=solid, color=green];
m1_81 -> m1_83  [key=1, style=dashed, color=green, label=string];
m1_86 -> m1_81  [key=0, style=bold, color=blue];
m1_84 -> m1_85  [key=0, style=solid, color=green];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_89  [key=2, style=dotted];
m1_52 -> m1_53  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_49  [key=2, style=dotted];
m1_60 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m1_60 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m1_60 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m1_60 -> m1_64  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m1_60 -> m1_78  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m1_61 -> m1_62  [key=0, style=solid];
m1_68 -> m1_69  [key=0, style=solid];
m1_68 -> m1_70  [key=2, style=dotted];
m1_68 -> m1_71  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_58  [key=2, style=dotted];
m1_62 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label=type];
m1_62 -> m1_64  [key=1, style=dashed, color=darkseagreen4, label=type];
m1_62 -> m1_78  [key=1, style=dashed, color=darkseagreen4, label=type];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_65  [key=1, style=dashed, color=darkseagreen4, label=withValue];
m1_73 -> m1_74  [key=0, style=solid];
m1_73 -> m1_75  [key=2, style=dotted];
m1_73 -> m1_76  [key=2, style=dotted];
m1_53 -> m1_57  [key=2, style=dotted];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_55  [key=2, style=dotted];
m1_53 -> m1_56  [key=2, style=dotted];
m1_53 -> m1_58  [key=2, style=dotted];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_58  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_51 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_51 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_51 -> m1_65  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_59 -> m1_60  [key=0, style=solid];
m1_64 -> m1_65  [key=0, style=solid];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_80  [key=2, style=dotted];
m1_67 -> m1_68  [key=0, style=solid];
m1_69 -> m1_67  [key=0, style=bold, color=blue];
m1_72 -> m1_73  [key=0, style=solid];
m1_74 -> m1_72  [key=0, style=bold, color=blue];
m1_54 -> m1_51  [key=0, style=bold, color=blue];
m1_66 -> m1_59  [key=0, style=bold, color=blue];
m1_38 -> m1_39  [key=0, style=solid];
m1_40 -> m1_41  [key=0, style=solid];
m1_77 -> m1_78  [key=0, style=solid];
m1_79 -> m1_77  [key=0, style=bold, color=blue];
m1_39 -> m1_38  [key=0, style=bold, color=blue];
m1_42 -> m1_40  [key=0, style=bold, color=blue];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_20 -> m1_21  [key=0, style=solid];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_22 -> m1_24  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_16  [key=0, style=bold, color=blue];
m1_26 -> m1_24  [key=0, style=bold, color=blue];
m1_26 -> m1_27  [key=0, style=solid, color=red];
m1_29 -> m1_30  [key=0, style=solid];
m1_30 -> m1_28  [key=0, style=bold, color=blue];
m1_30 -> m1_31  [key=0, style=solid];
m1_57 -> m1_35  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type conversionType"];
m1_57 -> m1_91  [key=3, color=darkorchid, style=bold, label="method methodReturn object ToEnum"];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_23  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=2, style=dotted];
m1_18 -> m1_19  [key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_15 -> m1_13  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_12  [key=2, style=dotted];
m1_90 -> m1_91  [key=0, style=solid];
m1_90 -> m1_92  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_90 -> m1_95  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_91 -> m1_92  [key=0, style=solid];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_95  [key=0, style=solid];
m1_92 -> m1_99  [key=2, style=dotted];
m1_92 -> m1_96  [key=1, style=dashed, color=darkseagreen4, label=parsedValue];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_97  [key=0, style=solid];
m1_95 -> m1_101  [key=2, style=dotted];
m1_93 -> m1_94  [key=0, style=solid];
m1_96 -> m1_98  [key=0, style=solid];
m1_94 -> m1_98  [key=0, style=solid];
m1_94 -> m1_100  [key=2, style=dotted];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_100  [key=2, style=dotted];
m1_98 -> m1_90  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid, color=red];
m1_27 -> m1_33  [key=0, style=solid, color=red];
m1_104 -> m1_82  [key=1, style=dashed, color=green, label="System.Type"];
m1_104 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_104 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_104 -> m1_61  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_104 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_104 -> m1_62  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_104 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_105 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_105 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_105 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_107 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m1_107 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m1_107 -> m1_78  [key=1, style=dashed, color=darkseagreen4, label=isFsOption];
m1_106 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_106 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_106 -> m1_65  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_108 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label=type];
m1_108 -> m1_78  [key=1, style=dashed, color=darkseagreen4, label=type];
m1_102 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m1_103 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label=type];
m2_12 -> m2_13  [key=0, style=solid];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_5  [key=2, style=dotted];
m2_14 -> m2_12  [key=0, style=bold, color=blue];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_5  [key=2, style=dotted];
m2_4 -> m2_2  [key=0, style=bold, color=blue];
m2_15 -> m2_16  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_5  [key=2, style=dotted];
m2_17 -> m2_15  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_5  [key=2, style=dotted];
m2_11 -> m2_9  [key=0, style=bold, color=blue];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_5  [key=2, style=dotted];
m2_8 -> m2_6  [key=0, style=bold, color=blue];
m2_18 -> m2_19  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_5  [key=2, style=dotted];
m2_20 -> m2_18  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
}
