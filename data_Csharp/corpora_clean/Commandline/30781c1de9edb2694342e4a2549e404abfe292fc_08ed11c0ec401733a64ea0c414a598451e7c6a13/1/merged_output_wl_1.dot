digraph  {
n78 [label=pt, span=""];
n0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
n1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
n2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
n4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
n3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
n5 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n6 [cluster="Unk.>", label="Entry Unk.>", span=""];
n7 [cluster="Unk.Succeed", label="Entry Unk.Succeed", span=""];
n8 [cluster="lambda expression", label="Entry lambda expression", span="23-23"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
n14 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
n9 [cluster="lambda expression", label="pe.Item1", span="23-23"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="23-23"];
n12 [cluster="lambda expression", label="pe.Item2", span="24-24"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
n15 [cluster="lambda expression", label="e.Value", span="25-25"];
n16 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
n17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="specProps.Empty()", span="34-34"];
n18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="36-36"];
n22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43"];
n23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="44-44"];
n26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54"];
n27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield break;", span="55-55"];
n28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63"];
n30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="yield return value;", span="67-67"];
n19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var pt = specProps.First()", span="38-38"];
n20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="39-39"];
n24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47"];
n25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
n29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65"];
n32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
n33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
n60 [cluster="lambda expression", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
n21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="taken.Empty()", span="40-40"];
n34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
n35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
n36 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n37 [cluster="Unk.Take", label="Entry Unk.Take", span=""];
n52 [cluster="lambda expression", label="Entry lambda expression", span="39-39"];
n38 [cluster="Unk.Empty", label="Entry Unk.Empty", span=""];
n39 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
n40 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
n41 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
n42 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
n43 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
n55 [cluster="lambda expression", label="Entry lambda expression", span="47-47"];
n44 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
n45 [cluster="Unk.IsNothing", label="Entry Unk.IsNothing", span=""];
n46 [cluster="Unk.Count", label="Entry Unk.Count", span=""];
n47 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n48 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
n49 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
n50 [cluster="Unk.converter", label="Entry Unk.converter", span=""];
n51 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
n59 [cluster="lambda expression", label="Entry lambda expression", span="61-61"];
n31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
n53 [cluster="lambda expression", label=n, span="39-39"];
n54 [cluster="lambda expression", label="Exit lambda expression", span="39-39"];
n56 [cluster="lambda expression", label="s.Specification.IsValue()", span="47-47"];
n57 [cluster="lambda expression", label="Exit lambda expression", span="47-47"];
n58 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
n61 [cluster="lambda expression", label="Exit lambda expression", span="61-61"];
n62 [cluster="Unk.Just", label="Entry Unk.Just", span=""];
n63 [cluster="Unk.WithValue", label="Entry Unk.WithValue", span=""];
n64 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
n66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="specification.TargetType", span="73-73"];
n70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="specification.Max.IsJust()", span="78-78"];
n71 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Just(specification.Max.FromJust());", span="80-80"];
n67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="TargetType.Scalar", span="75-75"];
n69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="TargetType.Sequence", span="77-77"];
n68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Just(1);", span="76-76"];
n72 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="return Maybe.Nothing<int>();", span="84-84"];
n73 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
n74 [cluster="CSharpx.Maybe<T>.FromJust<T>()", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
n75 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
n76 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91"];
n77 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m0_36 [cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="InstanceBuilderTests.cs", label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126"];
m0_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m0_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
m0_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
m0_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m0_71 [cluster="CSharpx.Maybe<T>.FromJust<T>(System.Exception)", file="InstanceBuilderTests.cs", label="Entry CSharpx.Maybe<T>.FromJust<T>(System.Exception)", span="160-160"];
m0_6 [cluster="Unk.>", file="InstanceBuilderTests.cs", label="Entry Unk.>", span=""];
m0_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m0_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="specProps.Empty()", span="34-34"];
m0_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="yield break;", span="36-36"];
m0_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43"];
m0_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="yield break;", span="44-44"];
m0_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54"];
m0_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="yield break;", span="55-55"];
m0_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63"];
m0_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="yield return value;", span="67-67"];
m0_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="var pt = specProps.First()", span="38-38"];
m0_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="39-39"];
m0_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47"];
m0_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
m0_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65"];
m0_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="taken.Empty()", span="40-40"];
m0_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m0_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
m0_56 [cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m0_42 [cluster="Unk.ToMaybe", file="InstanceBuilderTests.cs", label="Entry Unk.ToMaybe", span=""];
m0_45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilderTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="335-335"];
m0_39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="InstanceBuilderTests.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m0_57 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="61-61"];
m0_8 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="23-23"];
m0_11 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="24-24"];
m0_14 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="25-25"];
m0_9 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="pe.Item1", span="23-23"];
m0_10 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="23-23"];
m0_12 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="pe.Item2", span="24-24"];
m0_13 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="24-24"];
m0_15 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="e.Value", span="25-25"];
m0_16 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="25-25"];
m0_58 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
m0_50 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="39-39"];
m0_53 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Entry lambda expression", span="47-47"];
m0_51 [cluster="lambda expression", file="InstanceBuilderTests.cs", label=n, span="39-39"];
m0_52 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="39-39"];
m0_54 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="s.Specification.IsValue()", span="47-47"];
m0_55 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="47-47"];
m0_59 [cluster="lambda expression", file="InstanceBuilderTests.cs", label="Exit lambda expression", span="61-61"];
m0_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceBuilderTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_47 [cluster="CSharpx.Maybe.Just<T>(T)", file="InstanceBuilderTests.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80"];
m0_60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
m0_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="InstanceBuilderTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m0_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="InstanceBuilderTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m0_48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="InstanceBuilderTests.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m0_72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m0_73 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91"];
m0_74 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m0_5 [cluster="Unk.Select", file="InstanceBuilderTests.cs", label="Entry Unk.Select", span=""];
m0_49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="324-324"];
m0_38 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
m0_61 [cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceBuilderTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75"];
m0_44 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="InstanceBuilderTests.cs", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="170-170"];
m0_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="InstanceBuilderTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m0_62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m0_63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="specification.TargetType", span="73-73"];
m0_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="specification.Max.IsJust()", span="78-78"];
m0_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="return Maybe.Just(specification.Max.FromJust());", span="80-80"];
m0_64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="TargetType.Scalar", span="75-75"];
m0_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="TargetType.Sequence", span="77-77"];
m0_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="return Maybe.Just(1);", span="76-76"];
m0_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="return Maybe.Nothing<int>();", span="84-84"];
m0_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="InstanceBuilderTests.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m0_41 [cluster="Unk.FirstOrDefault", file="InstanceBuilderTests.cs", label="Entry Unk.FirstOrDefault", span=""];
m0_43 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="InstanceBuilderTests.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="175-175"];
m0_7 [cluster="Unk.Succeed", file="InstanceBuilderTests.cs", label="Entry Unk.Succeed", span=""];
m0_75 [file="InstanceBuilderTests.cs", label=pt, span=""];
m1_9 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
m1_10 [cluster="System.Type.GetGenericArguments()", file="Specification.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m1_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m1_35 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="Specification.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
m1_45 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="Specification.cs", label="1: Func<string, object> makeType = input =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { input });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="76-87"];
m1_44 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="Specification.cs", label="Func<string, object> changeType = input =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                };\r\n\r\n                return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();\r\n            }", span="46-74"];
m1_46 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="Specification.cs", label="return Either.Protect(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType, value);", span="89-92"];
m1_47 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="Specification.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
m1_4 [cluster="CommandLine.Utils.StringExtensions.IsNumeric(string)", file="Specification.cs", label="Entry CommandLine.Utils.StringExtensions.IsNumeric(string)", span="44-44"];
m1_31 [cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs", label="'\x2029'", span="84-84"];
m1_32 [cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs", label="return true;", span="85-85"];
m1_33 [cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs", label="return false;", span="88-88"];
m1_34 [cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs", label="Exit CommandLine.Utils.StringExtensions.IsLineTerminator(char)", span="77-77"];
m1_5 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
m1_6 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs", label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="22-27"];
m1_7 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs", label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture))", span="29-29"];
m1_0 [cluster="CommandLine.Utils.StringExtensions.Spaces(int)", file="Specification.cs", label="Entry CommandLine.Utils.StringExtensions.Spaces(int)", span="39-39"];
m1_1 [cluster="CommandLine.Utils.StringExtensions.Spaces(int)", file="Specification.cs", label="return new string(' ', value);", span="41-41"];
m1_2 [cluster="CommandLine.Utils.StringExtensions.Spaces(int)", file="Specification.cs", label="Exit CommandLine.Utils.StringExtensions.Spaces(int)", span="39-39"];
m1_101 [cluster="System.Enum.IsDefined(System.Type, object)", file="Specification.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m1_76 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="Specification.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="14-14"];
m1_13 [cluster="CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", file="Specification.cs", label="Entry CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", span="55-55"];
m1_16 [cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs", label="Entry CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", span="60-60"];
m1_12 [cluster="T.ToMaybe<T>()", file="Specification.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m1_70 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="Specification.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8"];
m1_8 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="Specification.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="31-33"];
m1_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m1_25 [cluster="lambda expression", file="Specification.cs", label="a.MatchNothing()", span="31-31"];
m1_71 [cluster="System.Nullable.GetUnderlyingType(System.Type)", file="Specification.cs", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
m1_99 [cluster="System.Enum.Parse(System.Type, string)", file="Specification.cs", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
m1_58 [cluster="System.Func<TResult>.Invoke()", file="Specification.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m1_28 [cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", color=red, community=0, file="Specification.cs", label="0: '\xD'", span="81-81"];
m1_83 [cluster="lambda expression", color=green, community=0, file="Specification.cs", label="0: return ctor.Invoke(new object[] { input });", span="81-81"];
m1_82 [cluster="lambda expression", color=green, community=0, file="Specification.cs", label="0: var ctor = conversionType.GetConstructor(new[] { typeof(string) })", span="80-80"];
m1_81 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="76-87"];
m1_86 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="76-87"];
m1_84 [cluster="lambda expression", color=green, community=0, file="Specification.cs", label="0: Exception", span="83-83"];
m1_85 [cluster="lambda expression", file="Specification.cs", label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="85-85"];
m1_52 [cluster="lambda expression", file="Specification.cs", label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                }", span="48-69"];
m1_60 [cluster="lambda expression", file="Specification.cs", label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="50-50"];
m1_61 [cluster="lambda expression", file="Specification.cs", label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="52-56"];
m1_68 [cluster="lambda expression", file="Specification.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="54-56"];
m1_62 [cluster="lambda expression", file="Specification.cs", label="var type = getUnderlyingType() ?? conversionType", span="58-58"];
m1_63 [cluster="lambda expression", file="Specification.cs", label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="60-64"];
m1_73 [cluster="lambda expression", file="Specification.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="62-64"];
m1_53 [cluster="lambda expression", file="Specification.cs", label="return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();", span="71-73"];
m1_65 [cluster="lambda expression", file="Specification.cs", label="return (input == null) ? empty() : withValue();", span="68-68"];
m1_51 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="46-74"];
m1_59 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="48-69"];
m1_64 [cluster="lambda expression", file="Specification.cs", label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66"];
m1_78 [cluster="lambda expression", file="Specification.cs", label="isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66"];
m1_67 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="53-56"];
m1_69 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="53-56"];
m1_72 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="61-64"];
m1_74 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="61-64"];
m1_54 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="46-74"];
m1_66 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="48-69"];
m1_38 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="39-39"];
m1_40 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="39-40"];
m1_77 [cluster="lambda expression", file="Specification.cs", label="Entry lambda expression", span="66-66"];
m1_79 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="66-66"];
m1_39 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="39-39"];
m1_42 [cluster="lambda expression", file="Specification.cs", label="Exit lambda expression", span="39-40"];
m1_41 [cluster="lambda expression", file="Specification.cs", label="e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="39-40"];
m1_21 [cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs", label="'\t'", span="68-68"];
m1_20 [cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs", label="' '", span="67-67"];
m1_22 [cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs", label="return true;", span="69-69"];
m1_24 [cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs", label="Exit CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", span="60-60"];
m1_26 [cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs", label="Entry CommandLine.Utils.StringExtensions.IsLineTerminator(char)", span="77-77"];
m1_29 [cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs", label="'\xA'", span="82-82"];
m1_30 [cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", file="Specification.cs", label="'\x2028'", span="83-83"];
m1_43 [cluster="Unk.RethrowWhenAbsentIn", file="Specification.cs", label="Entry Unk.RethrowWhenAbsentIn", span=""];
m1_75 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="Specification.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m1_57 [cluster="string.ToEnum(System.Type)", file="Specification.cs", label="Entry string.ToEnum(System.Type)", span="95-95"];
m1_17 [cluster="CSharpx.Maybe.Nothing<T>()", file="Specification.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_23 [cluster="Unk.ChangeTypeScalar", file="Specification.cs", label="Entry Unk.ChangeTypeScalar", span=""];
m1_18 [cluster="Unk.ToUntypedArray", file="Specification.cs", label="Entry Unk.ToUntypedArray", span=""];
m1_19 [cluster="CommandLine.Utils.StringExtensions.IsWhiteSpace(char)", file="Specification.cs", label="'\v'", span="66-66"];
m1_49 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="Specification.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35"];
m1_48 [cluster="System.Type.IsPrimitiveEx()", file="Specification.cs", label="Entry System.Type.IsPrimitiveEx()", span="209-209"];
m1_15 [cluster="CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", file="Specification.cs", label="Exit CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", span="55-55"];
m1_37 [cluster="Unk.OfEither", file="Specification.cs", label="Entry Unk.OfEither", span=""];
m1_50 [cluster="Unk.Protect", file="Specification.cs", label="Entry Unk.Protect", span=""];
m1_36 [cluster="Unk.Match", file="Specification.cs", label="Entry Unk.Match", span=""];
m1_56 [cluster="string.ToBoolean()", file="Specification.cs", label="Entry string.ToBoolean()", span="61-61"];
m1_89 [cluster="System.FormatException.FormatException(string)", file="Specification.cs", label="Entry System.FormatException.FormatException(string)", span="0-0"];
m1_87 [cluster="System.Type.GetConstructor(System.Type[])", file="Specification.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m1_14 [cluster="CommandLine.Utils.StringExtensions.FormatLocal(string, params object[])", file="Specification.cs", label="return string.Format(CultureInfo.CurrentCulture, value, arguments);", span="57-57"];
m1_90 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs", label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
m1_91 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs", label="object parsedValue", span="97-97"];
m1_92 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs", label="parsedValue = Enum.Parse(conversionType, value)", span="100-100"];
m1_95 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs", label="Enum.IsDefined(conversionType, parsedValue)", span="106-106"];
m1_93 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs", label=ArgumentException, span="102-102"];
m1_96 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs", label="return parsedValue;", span="108-108"];
m1_94 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs", label="throw new FormatException();", span="104-104"];
m1_97 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs", label="throw new FormatException();", span="110-110"];
m1_98 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="Specification.cs", label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
m1_55 [cluster="string.IsBooleanString()", file="Specification.cs", label="Entry string.IsBooleanString()", span="55-55"];
m1_27 [cluster="CommandLine.Utils.StringExtensions.IsLineTerminator(char)", color=red, community=0, file="Specification.cs", label="0: c", span="79-79"];
m1_88 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="Specification.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m1_100 [cluster="System.FormatException.FormatException()", file="Specification.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m1_80 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="Specification.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="22-22"];
m1_104 [file="Specification.cs", label="System.Type", span=""];
m1_105 [file="Specification.cs", label="System.Globalization.CultureInfo", span=""];
m1_107 [file="Specification.cs", label=isFsOption, span=""];
m1_106 [file="Specification.cs", label=string, span=""];
m1_108 [file="Specification.cs", label=type, span=""];
m1_102 [file="Specification.cs", label="System.Globalization.CultureInfo", span=""];
m1_103 [file="Specification.cs", label=type, span=""];
m2_12 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", span="45-45"];
m2_13 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", file="SpecificationExtensions.cs", label="DateHumanize.Verify(expected, months, TimeUnit.Month, Tense.Past)", span="47-47"];
m2_14 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.MonthsAgo(int, string)", span="45-45"];
m2_5 [cluster="Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.DateHumanize.Verify(string, int, Humanizer.Localisation.TimeUnit, Humanizer.Localisation.Tense, double?)", span="29-29"];
m2_2 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", span="15-15"];
m2_3 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", file="SpecificationExtensions.cs", label="DateHumanize.Verify(expected, days, TimeUnit.Day, Tense.Past)", span="17-17"];
m2_4 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.DaysAgo(int, string)", span="15-15"];
m2_15 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", span="55-55"];
m2_16 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", file="SpecificationExtensions.cs", label="DateHumanize.Verify(expected, seconds, TimeUnit.Second, Tense.Past)", span="57-57"];
m2_17 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.SecondsAgo(int, string)", span="55-55"];
m2_9 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", span="35-35"];
m2_10 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", file="SpecificationExtensions.cs", label="DateHumanize.Verify(expected, minutes, TimeUnit.Minute, Tense.Past)", span="37-37"];
m2_11 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.MinutesAgo(int, string)", span="35-35"];
m2_6 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", span="25-25"];
m2_7 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", file="SpecificationExtensions.cs", label="DateHumanize.Verify(expected, hours, TimeUnit.Hour, Tense.Past)", span="27-27"];
m2_8 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.HoursAgo(int, string)", span="25-25"];
m2_18 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", span="65-65"];
m2_19 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", file="SpecificationExtensions.cs", label="DateHumanize.Verify(expected, years, TimeUnit.Year, Tense.Past)", span="67-67"];
m2_20 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.YearsAgo(int, string)", span="65-65"];
m2_0 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DateHumanizeTests()", file="SpecificationExtensions.cs", label="Entry Humanizer.Tests.Localisation.ar.DateHumanizeTests.DateHumanizeTests()", span="7-7"];
m2_1 [cluster="Humanizer.Tests.Localisation.ar.DateHumanizeTests.DateHumanizeTests()", file="SpecificationExtensions.cs", label="Exit Humanizer.Tests.Localisation.ar.DateHumanizeTests.DateHumanizeTests()", span="7-7"];
m1_35 -> m1_4  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m1_45 -> m1_45  [color=green, key=3, label="Local variable System.Func<string, object> makeType", style=bold];
m1_44 -> m1_44  [color=darkorchid, key=3, label="Local variable System.Func<string, object> changeType", style=bold];
m1_4 -> m1_0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m1_5 -> m1_0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m1_57 -> m1_35  [color=darkorchid, key=3, label="Parameter variable System.Type conversionType", style=bold];
m1_57 -> m1_91  [color=darkorchid, key=3, label="method methodReturn object ToEnum", style=bold];
}
