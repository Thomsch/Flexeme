digraph  {
d36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="9: typeInfo.IsMutable()", span="95-95"];
d19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="43-43"];
d35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="9: T instance", span="94-94"];
d37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="97-97"];
d39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="113-113"];
d64 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="115-115"];
d43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="2: var allErrors = tokenizerResult.Errors\r\n                .Concat(missingValueErrors)\r\n                .Concat(optionSpecProps.Errors)\r\n                .Concat(valueSpecProps.Errors)\r\n                .Concat(validationErrors)", span="125-129"];
d28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="69-69"];
d31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="77-81"];
d32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="83-86"];
d33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="88-90"];
d42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="122-123"];
d44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: return allErrors.Any()\r\n                ? (ParserResult<T>)new NotParsed<T>(instance, allErrors)\r\n                : (ParserResult<T>)new Parsed<T>(instance);", span="131-133"];
d63 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="3: var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="92-92"];
d38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="98-109"];
d40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="114-118"];
d41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = (T)ctor.Invoke(values)", span="119-119"];
d45 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="36-36"];
d77 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d78 [cluster="NotParsed<T>.cstr", label="Entry NotParsed<T>.cstr", span=""];
d79 [cluster="CommandLine.Parsed<T>.Parsed(T)", label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72"];
d3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="36-36"];
d20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="45-46"];
d46 [cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126"];
d80 [cluster="lambda expression", label="Entry lambda expression", span="43-43"];
d65 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
d112 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
d67 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d68 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
d91 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="55-58"];
d24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="arguments.Any()", span="60-60"];
d22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="50-52"];
d26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="preprocessorErrors.Any()", span="63-63"];
d29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokens = ((Ok<IEnumerable<Token>, Error>)tokenizerResult).Value.Success", span="71-71"];
d55 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="73-75"];
d57 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d58 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
d101 [cluster="lambda expression", label="Entry lambda expression", span="80-80"];
d59 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d105 [cluster="lambda expression", label="Entry lambda expression", span="86-86"];
d60 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
d61 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d62 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
d108 [cluster="lambda expression", label="Entry lambda expression", span="90-90"];
d109 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="90-90"];
d75 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
d76 [cluster="Unk.Validate", label="Entry Unk.Validate", span=""];
d66 [cluster="Unk.SetProperties", label="Entry Unk.SetProperties", span=""];
d115 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
d119 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
d123 [cluster="lambda expression", label="Entry lambda expression", span="103-103"];
d127 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
d130 [cluster="lambda expression", label="Entry lambda expression", span="106-108"];
d134 [cluster="lambda expression", label="Entry lambda expression", span="109-109"];
d69 [cluster="System.Reflection.MethodBase.GetParameters()", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
d70 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
d71 [cluster="Unk.ToLower", label="Entry Unk.ToLower", span=""];
d72 [cluster="Unk.CreateDefaultForImmutable", label="Entry Unk.CreateDefaultForImmutable", span=""];
d73 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
d140 [cluster="lambda expression", label="Entry lambda expression", span="116-116"];
d143 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
d74 [cluster="Unk.Invoke", label="Entry Unk.Invoke", span=""];
d27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="65-65"];
d0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="15-15"];
d1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="21-33"];
d23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-58"];
d25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="62-62"];
d98 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="75-75"];
d102 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="80-80"];
d106 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="86-86"];
d21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specs = from pt in specProps select pt.Specification", span="48-48"];
d47 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
d84 [cluster="lambda expression", label="Entry lambda expression", span="45-46"];
d82 [cluster="lambda expression", label="Exit lambda expression", span="43-43"];
d81 [cluster="lambda expression", label="f().GetType()", span="43-43"];
d114 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
d113 [cluster="lambda expression", label="f()", span="97-97"];
d148 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d149 [label=specProps, span=""];
d90 [cluster="lambda expression", label="Entry lambda expression", span="54-58"];
d92 [cluster="lambda expression", label="Exit lambda expression", span="54-58"];
d93 [cluster="Unk.>", label="Entry Unk.>", span=""];
d94 [cluster="lambda expression", label="Entry lambda expression", span="56-56"];
d50 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d48 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
d49 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
d56 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="13-13"];
d97 [cluster="lambda expression", label="Entry lambda expression", span="75-75"];
d103 [cluster="lambda expression", label="Exit lambda expression", span="80-80"];
d107 [cluster="lambda expression", label="Exit lambda expression", span="86-86"];
d110 [cluster="lambda expression", label="Exit lambda expression", span="90-90"];
d150 [label="System.StringComparer", span=""];
d153 [label=token, span=""];
d111 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
d117 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
d116 [cluster="lambda expression", label="sp.Value.IsJust()", span="100-100"];
d121 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
d120 [cluster="lambda expression", label="sp.Value.FromJust()", span="101-101"];
d125 [cluster="lambda expression", label="Exit lambda expression", span="103-103"];
d124 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="103-103"];
d129 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
d128 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="104-104"];
d132 [cluster="lambda expression", label="Exit lambda expression", span="106-108"];
d131 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="106-108"];
d136 [cluster="lambda expression", label="Exit lambda expression", span="109-109"];
d135 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="109-109"];
d142 [cluster="lambda expression", label="Exit lambda expression", span="116-116"];
d141 [cluster="lambda expression", label=v, span="116-116"];
d145 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
d144 [cluster="lambda expression", label=d, span="117-117"];
d53 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
d54 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="15-15"];
d5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="25-25"];
d12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="25-25"];
d6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="26-28"];
d16 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="28-28"];
d4 [cluster="lambda expression", label="Entry lambda expression", span="23-30"];
d51 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
d52 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
d151 [label=optionSpecs, span=""];
d99 [cluster="lambda expression", label="Exit lambda expression", span="75-75"];
d100 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
d152 [label="System.Globalization.CultureInfo", span=""];
d104 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
d86 [cluster="lambda expression", label="Exit lambda expression", span="45-46"];
d85 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="45-46"];
d83 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d96 [cluster="lambda expression", label="Exit lambda expression", span="56-56"];
d95 [cluster="lambda expression", label="f()", span="56-56"];
d118 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="175-175"];
d122 [cluster="CSharpx.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CSharpx.Maybe<T>.FromJust<T>(System.Exception)", span="160-160"];
d126 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="170-170"];
d133 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29"];
d137 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d138 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d139 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="101-101"];
d146 [label="System.StringComparer", span=""];
d9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="14-14"];
d11 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
d147 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
d14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d7 [cluster="lambda expression", label="return explodedTokens;", span="29-29"];
d10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="47-47"];
d15 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
d17 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
d18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
d8 [cluster="lambda expression", label="Exit lambda expression", span="23-30"];
d87 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
d88 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75"];
d89 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
m1_0 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="OptionMapper.cs", label="Entry CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", span="8-8"];
m1_1 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="OptionMapper.cs", label=consumed, span="10-10"];
m1_3 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", color=red, community=0, file="OptionMapper.cs", label="7: field = value", span="15-15"];
m1_2 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="OptionMapper.cs", label="throw new InvalidOperationException();", span="12-12"];
m1_4 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="OptionMapper.cs", label="Exit CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", span="8-8"];
m1_5 [cluster="System.InvalidOperationException.InvalidOperationException()", file="OptionMapper.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m2_0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="Parser.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m2_1 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="Parser.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29"];
m2_2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="Parser.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m2_19 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="Parser.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152"];
m2_57 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="Parser.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
m2_58 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="Parser.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min);\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="54-66"];
m2_59 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="Parser.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
m2_55 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="Parser.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m2_10 [cluster="Unk.Where", file="Parser.cs", label="Entry Unk.Where", span=""];
m2_14 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Parser.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m2_56 [cluster="Unk.FromSpecification", file="Parser.cs", label="Entry Unk.FromSpecification", span=""];
m2_70 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="Parser.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137"];
m2_50 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="Parser.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147"];
m2_74 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="Parser.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m2_71 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="62-63"];
m2_4 [cluster="lambda expression", file="Parser.cs", label="var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22"];
m2_3 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="20-29"];
m2_5 [cluster="lambda expression", file="Parser.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23"];
m2_15 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="22-22"];
m2_7 [cluster="lambda expression", file="Parser.cs", label="return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26"];
m2_6 [cluster="lambda expression", file="Parser.cs", label="groups.Count() > 1", span="24-24"];
m2_20 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="23-23"];
m2_8 [cluster="lambda expression", file="Parser.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="28-28"];
m2_9 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="20-29"];
m2_23 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="26-26"];
m2_16 [cluster="lambda expression", file="Parser.cs", label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22"];
m2_17 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="22-22"];
m2_21 [cluster="lambda expression", file="Parser.cs", label="((OptionSpecification)g.Specification).SetName", span="23-23"];
m2_22 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="23-23"];
m2_24 [cluster="lambda expression", file="Parser.cs", label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26"];
m2_25 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="26-26"];
m2_33 [cluster="lambda expression", file="Parser.cs", label="List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => ((OptionSpecification)x.Specification).SetName).ToList()", span="36-38"];
m2_34 [cluster="lambda expression", file="Parser.cs", label="var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)).ToList()", span="40-43"];
m2_32 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="34-49"];
m2_41 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="37-37"];
m2_44 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="38-38"];
m2_48 [cluster="lambda expression", file="Parser.cs", label="sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="41-43"];
m2_35 [cluster="lambda expression", file="Parser.cs", label="requiredButEmpty.Any()", span="44-44"];
m2_47 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="41-43"];
m2_36 [cluster="lambda expression", file="Parser.cs", label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="45-46"];
m2_37 [cluster="lambda expression", file="Parser.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="48-48"];
m2_38 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="34-49"];
m2_52 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="45-46"];
m2_42 [cluster="lambda expression", file="Parser.cs", label="sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required", span="37-37"];
m2_43 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="37-37"];
m2_45 [cluster="lambda expression", file="Parser.cs", label="((OptionSpecification)x.Specification).SetName", span="38-38"];
m2_46 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="38-38"];
m2_49 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="41-43"];
m2_53 [cluster="lambda expression", file="Parser.cs", label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="45-46"];
m2_54 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="45-46"];
m2_61 [cluster="lambda expression", file="Parser.cs", label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)", span="56-59"];
m2_60 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="54-66"];
m2_62 [cluster="lambda expression", file="Parser.cs", label="options.Any()", span="60-60"];
m2_66 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="57-59"];
m2_63 [cluster="lambda expression", file="Parser.cs", label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="62-63"];
m2_64 [cluster="lambda expression", file="Parser.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="65-65"];
m2_65 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="54-66"];
m2_67 [cluster="lambda expression", file="Parser.cs", label="sp.Specification.ConversionType.ToDescriptor() == DescriptorType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min", span="57-59"];
m2_68 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="57-59"];
m2_72 [cluster="lambda expression", file="Parser.cs", label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="62-63"];
m2_73 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="62-63"];
m2_29 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="Parser.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m2_30 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="Parser.cs", label="return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => ((OptionSpecification)x.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-49"];
m2_31 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="Parser.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m2_28 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="Parser.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m2_13 [cluster="Unk.Select", file="Parser.cs", label="Entry Unk.Select", span=""];
m2_39 [cluster="Unk.ToList", file="Parser.cs", label="Entry Unk.ToList", span=""];
m2_69 [cluster="System.Type.ToDescriptor()", file="Parser.cs", label="Entry System.Type.ToDescriptor()", span="22-22"];
m2_26 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="Parser.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m2_18 [cluster="CommandLine.Core.Specification.IsOption()", file="Parser.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m2_27 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="Parser.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m2_11 [cluster="Unk.GroupBy", file="Parser.cs", label="Entry Unk.GroupBy", span=""];
m2_12 [cluster="Unk.Count", file="Parser.cs", label="Entry Unk.Count", span=""];
m2_51 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Parser.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m2_75 [file="Parser.cs", label=setsWithTrue, span=""];
m3_0 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueMapper.cs", label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="20-20"];
m3_1 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueMapper.cs", label="this.index = index", span="22-22"];
m3_2 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueMapper.cs", label="min = -1", span="23-23"];
m3_3 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueMapper.cs", label="max = -1", span="24-24"];
m3_4 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueMapper.cs", label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="20-20"];
m3_5 [file="ValueMapper.cs", label="CommandLine.ValueAttribute", span=""];
d36 -> d37  [color=green, key=0, style=solid];
d36 -> d39  [color=green, key=0, style=solid];
d36 -> d64  [color=green, key=2, style=dotted];
d19 -> d36  [color=green, key=1, label=typeInfo, style=dashed];
d19 -> d20  [key=0, style=solid];
d19 -> d46  [key=2, style=dotted];
d19 -> d80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d19 -> d39  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
d35 -> d36  [color=green, key=0, style=solid];
d37 -> d38  [key=0, style=solid];
d37 -> d65  [key=2, style=dotted];
d37 -> d46  [key=2, style=dotted];
d37 -> d112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d39 -> d39  [color=darkseagreen4, key=1, label=sp, style=dashed];
d39 -> d40  [key=0, style=solid];
d39 -> d67  [key=2, style=dotted];
d39 -> d68  [key=2, style=dotted];
d39 -> d41  [color=darkseagreen4, key=1, label=ctor, style=dashed];
d43 -> d44  [color=green, key=0, style=solid];
d43 -> d63  [color=green, key=2, style=dotted];
d28 -> d43  [color=green, key=1, label=tokenizerResult, style=dashed];
d28 -> d29  [key=0, style=solid];
d28 -> d55  [key=2, style=dotted];
d31 -> d43  [color=green, key=1, label=optionSpecProps, style=dashed];
d31 -> d34  [color=green, key=1, label=optionSpecProps, style=dashed];
d31 -> d31  [color=darkseagreen4, key=1, label=pt, style=dashed];
d31 -> d32  [key=0, style=solid];
d31 -> d57  [key=2, style=dotted];
d31 -> d58  [key=2, style=dotted];
d31 -> d101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d32 -> d43  [color=green, key=1, label=valueSpecProps, style=dashed];
d32 -> d34  [color=green, key=1, label=valueSpecProps, style=dashed];
d32 -> d32  [color=darkseagreen4, key=1, label=pt, style=dashed];
d32 -> d33  [key=0, style=solid];
d32 -> d59  [key=2, style=dotted];
d32 -> d58  [key=2, style=dotted];
d32 -> d105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d33 -> d43  [color=green, key=1, label=missingValueErrors, style=dashed];
d33 -> d34  [color=green, key=0, style=solid];
d33 -> d33  [color=darkseagreen4, key=1, label=token, style=dashed];
d33 -> d60  [key=2, style=dotted];
d33 -> d61  [key=2, style=dotted];
d33 -> d62  [key=2, style=dotted];
d33 -> d108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d33 -> d109  [color=darkseagreen4, key=1, label=token, style=dashed];
d42 -> d43  [color=green, key=0, style=solid];
d42 -> d75  [key=2, style=dotted];
d42 -> d76  [key=2, style=dotted];
d44 -> d45  [color=green, key=0, style=solid];
d44 -> d77  [color=green, key=2, style=dotted];
d44 -> d78  [color=green, key=2, style=dotted];
d44 -> d79  [color=green, key=2, style=dotted];
d34 -> d35  [color=green, key=0, style=solid];
d34 -> d63  [color=green, key=2, style=dotted];
d34 -> d38  [color=green, key=1, label=specPropsWithValue, style=dashed];
d34 -> d40  [color=green, key=1, label=specPropsWithValue, style=dashed];
d34 -> d42  [color=green, key=1, label=specPropsWithValue, style=dashed];
d38 -> d44  [color=green, key=1, label=instance, style=dashed];
d38 -> d42  [key=0, style=solid];
d38 -> d38  [color=darkseagreen4, key=1, label=instance, style=dashed];
d38 -> d66  [key=2, style=dotted];
d38 -> d115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d134  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d40 -> d40  [color=darkseagreen4, key=1, label=prms, style=dashed];
d40 -> d41  [key=0, style=solid];
d40 -> d69  [key=2, style=dotted];
d40 -> d70  [key=2, style=dotted];
d40 -> d71  [key=2, style=dotted];
d40 -> d72  [key=2, style=dotted];
d40 -> d73  [key=2, style=dotted];
d40 -> d67  [key=2, style=dotted];
d40 -> d140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d40 -> d143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d41 -> d44  [color=green, key=1, label=instance, style=dashed];
d41 -> d42  [key=0, style=solid];
d41 -> d74  [key=2, style=dotted];
d45 -> d3  [color=blue, key=0, style=bold];
d3 -> d19  [key=0, style=solid];
d3 -> d37  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d28  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
d3 -> d31  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d32  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d33  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d23  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d91  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> d25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> d30  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d98  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d102  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d109  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d20 -> d39  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d31  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d32  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d21  [key=0, style=solid];
d20 -> d47  [key=2, style=dotted];
d20 -> d84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d20 -> d23  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d91  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d80 -> d81  [key=0, style=solid];
d112 -> d113  [key=0, style=solid];
d91 -> d64  [key=2, style=dotted];
d91 -> d46  [key=2, style=dotted];
d91 -> d65  [key=2, style=dotted];
d91 -> d67  [key=2, style=dotted];
d91 -> d91  [color=darkseagreen4, key=1, label=p, style=dashed];
d91 -> d92  [key=0, style=solid];
d91 -> d93  [key=2, style=dotted];
d91 -> d94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d24 -> d28  [key=0, style=solid];
d24 -> d25  [key=0, style=solid];
d24 -> d50  [key=2, style=dotted];
d22 -> d28  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d22 -> d33  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d22 -> d23  [key=0, style=solid];
d22 -> d48  [key=2, style=dotted];
d22 -> d49  [key=2, style=dotted];
d22 -> d30  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d22 -> d98  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d26 -> d28  [key=0, style=solid];
d26 -> d27  [key=0, style=solid];
d26 -> d50  [key=2, style=dotted];
d29 -> d42  [color=darkseagreen4, key=1, label=tokens, style=dashed];
d29 -> d30  [key=0, style=solid];
d30 -> d31  [key=0, style=solid];
d30 -> d32  [color=darkseagreen4, key=1, label=partitions, style=dashed];
d30 -> d33  [color=darkseagreen4, key=1, label=partitions, style=dashed];
d30 -> d56  [key=2, style=dotted];
d30 -> d97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d101 -> d102  [key=0, style=solid];
d105 -> d106  [key=0, style=solid];
d108 -> d109  [key=0, style=solid];
d109 -> d110  [key=0, style=solid];
d109 -> d111  [key=2, style=dotted];
d115 -> d116  [key=0, style=solid];
d119 -> d120  [key=0, style=solid];
d123 -> d124  [key=0, style=solid];
d127 -> d128  [key=0, style=solid];
d130 -> d131  [key=0, style=solid];
d134 -> d135  [key=0, style=solid];
d140 -> d141  [key=0, style=solid];
d143 -> d144  [key=0, style=solid];
d27 -> d45  [key=0, style=solid];
d27 -> d53  [key=2, style=dotted];
d27 -> d54  [key=2, style=dotted];
d0 -> d3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
d0 -> d1  [key=0, style=solid];
d0 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d1 -> d3  [key=2, style=dotted];
d1 -> d1  [color=darkorchid, key=3, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> ", style=bold];
d1 -> d2  [key=0, style=solid];
d1 -> d4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d23 -> d24  [key=0, style=solid];
d23 -> d27  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
d23 -> d23  [color=darkorchid, key=3, label="Local variable System.Func<T> makeDefault", style=bold];
d25 -> d26  [key=0, style=solid];
d25 -> d27  [color=darkseagreen4, key=1, label=preprocessorErrors, style=dashed];
d25 -> d51  [key=2, style=dotted];
d25 -> d52  [key=2, style=dotted];
d98 -> d99  [key=0, style=solid];
d98 -> d100  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d102 -> d104  [key=2, style=dotted];
d106 -> d107  [key=0, style=solid];
d106 -> d104  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d21 -> d21  [color=darkseagreen4, key=1, label=pt, style=dashed];
d84 -> d85  [key=0, style=solid];
d82 -> d80  [color=blue, key=0, style=bold];
d81 -> d82  [key=0, style=solid];
d81 -> d54  [key=2, style=dotted];
d81 -> d83  [key=2, style=dotted];
d114 -> d112  [color=blue, key=0, style=bold];
d113 -> d114  [key=0, style=solid];
d113 -> d54  [key=2, style=dotted];
d148 -> d91  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d149 -> d91  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d90 -> d91  [key=0, style=solid];
d92 -> d90  [color=blue, key=0, style=bold];
d94 -> d95  [key=0, style=solid];
d97 -> d98  [key=0, style=solid];
d103 -> d101  [color=blue, key=0, style=bold];
d107 -> d105  [color=blue, key=0, style=bold];
d110 -> d108  [color=blue, key=0, style=bold];
d150 -> d109  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d150 -> d98  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d153 -> d109  [color=darkseagreen4, key=1, label=token, style=dashed];
d117 -> d115  [color=blue, key=0, style=bold];
d116 -> d117  [key=0, style=solid];
d116 -> d118  [key=2, style=dotted];
d121 -> d119  [color=blue, key=0, style=bold];
d120 -> d121  [key=0, style=solid];
d120 -> d122  [key=2, style=dotted];
d125 -> d123  [color=blue, key=0, style=bold];
d124 -> d125  [key=0, style=solid];
d124 -> d126  [key=2, style=dotted];
d124 -> d118  [key=2, style=dotted];
d129 -> d127  [color=blue, key=0, style=bold];
d128 -> d129  [key=0, style=solid];
d128 -> d122  [key=2, style=dotted];
d132 -> d130  [color=blue, key=0, style=bold];
d131 -> d132  [key=0, style=solid];
d131 -> d126  [key=2, style=dotted];
d131 -> d133  [key=2, style=dotted];
d136 -> d134  [color=blue, key=0, style=bold];
d135 -> d136  [key=0, style=solid];
d135 -> d137  [key=2, style=dotted];
d135 -> d138  [key=2, style=dotted];
d135 -> d139  [key=2, style=dotted];
d142 -> d140  [color=blue, key=0, style=bold];
d141 -> d142  [key=0, style=solid];
d145 -> d143  [color=blue, key=0, style=bold];
d144 -> d145  [key=0, style=solid];
d2 -> d0  [color=blue, key=0, style=bold];
d5 -> d6  [key=0, style=solid];
d5 -> d9  [key=2, style=dotted];
d5 -> d11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d12 -> d13  [key=0, style=solid];
d12 -> d14  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d6 -> d10  [key=2, style=dotted];
d6 -> d15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d16 -> d17  [key=0, style=solid];
d16 -> d18  [key=2, style=dotted];
d4 -> d5  [key=0, style=solid];
d4 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d151 -> d98  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d99 -> d97  [color=blue, key=0, style=bold];
d152 -> d102  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d152 -> d106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d86 -> d84  [color=blue, key=0, style=bold];
d85 -> d86  [key=0, style=solid];
d85 -> d87  [key=2, style=dotted];
d85 -> d88  [key=2, style=dotted];
d85 -> d89  [key=2, style=dotted];
d96 -> d94  [color=blue, key=0, style=bold];
d95 -> d54  [key=2, style=dotted];
d95 -> d96  [key=0, style=solid];
d146 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d146 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d146 -> d6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d146 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d11 -> d12  [key=0, style=solid];
d147 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d147 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d13 -> d11  [color=blue, key=0, style=bold];
d7 -> d8  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d17 -> d15  [color=blue, key=0, style=bold];
d8 -> d4  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_3  [color=red, key=1, label=T, style=dashed];
m1_0 -> m1_0  [color=darkorchid, key=3, label="Parameter variable T field", style=bold];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [color=red, key=0, style=solid];
m1_3 -> m1_4  [color=red, key=0, style=solid];
m1_2 -> m1_4  [key=0, style=solid];
m1_2 -> m1_5  [key=2, style=dotted];
m1_4 -> m1_0  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_30  [color=darkorchid, key=3, label="Field variable CommandLine.ParserSettings settings", style=bold];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_57 -> m2_58  [key=0, style=solid];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_61  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m2_59 -> m2_57  [color=blue, key=0, style=bold];
m2_71 -> m2_72  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_10  [key=2, style=dotted];
m2_4 -> m2_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_4 -> m2_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m2_3 -> m2_4  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_11  [key=2, style=dotted];
m2_5 -> m2_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_15 -> m2_16  [key=0, style=solid];
m2_7 -> m2_9  [key=0, style=solid];
m2_7 -> m2_13  [key=2, style=dotted];
m2_7 -> m2_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_8  [key=0, style=solid];
m2_6 -> m2_12  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_14  [key=2, style=dotted];
m2_9 -> m2_3  [color=blue, key=0, style=bold];
m2_23 -> m2_24  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_18  [key=2, style=dotted];
m2_16 -> m2_19  [key=2, style=dotted];
m2_17 -> m2_15  [color=blue, key=0, style=bold];
m2_21 -> m2_22  [key=0, style=solid];
m2_22 -> m2_20  [color=blue, key=0, style=bold];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=2, style=dotted];
m2_24 -> m2_27  [key=2, style=dotted];
m2_24 -> m2_28  [key=2, style=dotted];
m2_25 -> m2_23  [color=blue, key=0, style=bold];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_10  [key=2, style=dotted];
m2_33 -> m2_13  [key=2, style=dotted];
m2_33 -> m2_39  [key=2, style=dotted];
m2_33 -> m2_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_48  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_10  [key=2, style=dotted];
m2_34 -> m2_39  [key=2, style=dotted];
m2_34 -> m2_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_34 -> m2_36  [color=darkseagreen4, key=1, label=requiredButEmpty, style=dashed];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m2_41 -> m2_42  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_50  [key=2, style=dotted];
m2_48 -> m2_51  [key=2, style=dotted];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_37  [key=0, style=solid];
m2_35 -> d77  [key=2, style=dotted];
m2_47 -> m2_48  [key=0, style=solid];
m2_36 -> m2_38  [key=0, style=solid];
m2_36 -> m2_13  [key=2, style=dotted];
m2_36 -> m2_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_14  [key=2, style=dotted];
m2_38 -> m2_32  [color=blue, key=0, style=bold];
m2_52 -> m2_53  [key=0, style=solid];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_18  [key=2, style=dotted];
m2_42 -> m2_19  [key=2, style=dotted];
m2_43 -> m2_41  [color=blue, key=0, style=bold];
m2_45 -> m2_46  [key=0, style=solid];
m2_46 -> m2_44  [color=blue, key=0, style=bold];
m2_49 -> m2_47  [color=blue, key=0, style=bold];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_55  [key=2, style=dotted];
m2_53 -> m2_56  [key=2, style=dotted];
m2_53 -> m2_28  [key=2, style=dotted];
m2_54 -> m2_52  [color=blue, key=0, style=bold];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_10  [key=2, style=dotted];
m2_61 -> m2_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_61 -> m2_63  [color=darkseagreen4, key=1, label=options, style=dashed];
m2_60 -> m2_61  [key=0, style=solid];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_64  [key=0, style=solid];
m2_62 -> d77  [key=2, style=dotted];
m2_66 -> m2_67  [key=0, style=solid];
m2_63 -> m2_65  [key=0, style=solid];
m2_63 -> m2_13  [key=2, style=dotted];
m2_63 -> m2_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_14  [key=2, style=dotted];
m2_65 -> m2_60  [color=blue, key=0, style=bold];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_69  [key=2, style=dotted];
m2_67 -> m2_19  [key=2, style=dotted];
m2_67 -> m2_70  [key=2, style=dotted];
m2_68 -> m2_66  [color=blue, key=0, style=bold];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_74  [key=2, style=dotted];
m2_72 -> m2_56  [key=2, style=dotted];
m2_72 -> m2_28  [key=2, style=dotted];
m2_73 -> m2_71  [color=blue, key=0, style=bold];
m2_29 -> m2_30  [key=0, style=solid];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m2_30 -> m2_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m2_31 -> m2_29  [color=blue, key=0, style=bold];
m2_75 -> m2_48  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_4 -> m3_0  [color=blue, key=0, style=bold];
m3_5 -> m3_1  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m3_5 -> m3_2  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m3_5 -> m3_3  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
}
