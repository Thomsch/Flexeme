digraph  {
n151 [label="CSharpx.Maybe<System.Func<T>>", span=""];
n152 [label=specProps, span=""];
n153 [label=makeDefault, span=""];
n154 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span=""];
n155 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n156 [label=optionSpecs, span=""];
n157 [label="System.StringComparer", span=""];
n158 [label="System.Globalization.CultureInfo", span=""];
n159 [label=typeInfo, span=""];
n160 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span=""];
n161 [label=token, span=""];
n162 [label=specPropsWithValue, span=""];
n0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
n1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var typeInfo = factory.MapValueOrDefault(f => f().GetType(), typeof(T))", span="22-22"];
n5 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="33-37"];
n33 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="34-37"];
n48 [cluster="lambda expression", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="44-44"];
n50 [cluster="lambda expression", label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="48-50"];
n85 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="50-50"];
n54 [cluster="lambda expression", label="var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        optionsPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="55-60"];
n89 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="59-59"];
n55 [cluster="lambda expression", label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        valuesPartition,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="62-66"];
n93 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="66-66"];
n56 [cluster="lambda expression", label="var missingValueErrors = from token in errorsPartition\r\n                                         select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="68-72"];
n96 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="71-71"];
n58 [cluster="lambda expression", label="Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="77-93"];
n100 [cluster="lambda expression", label="var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())", span="79-79"];
n63 [cluster="lambda expression", label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="122-122"];
n8 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="127-129"];
n9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="131-135"];
n2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="24-25"];
n12 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
n22 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
n59 [cluster="lambda expression", label="Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="95-108"];
n134 [cluster="lambda expression", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="97-97"];
n60 [cluster="lambda expression", label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="110-110"];
n3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specs = from pt in specProps select pt.Specification", span="27-27"];
n13 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
n26 [cluster="lambda expression", label="Entry lambda expression", span="24-25"];
n4 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="29-31"];
n14 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
n15 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
n6 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="39-40"];
n43 [cluster="lambda expression", label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="40-40"];
n16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n17 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
n18 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
n19 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return result;", span="137-137"];
n20 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n21 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n11 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
n23 [cluster="lambda expression", label="f().GetType()", span="22-22"];
n24 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
n25 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n27 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="24-25"];
n28 [cluster="lambda expression", label="Exit lambda expression", span="24-25"];
n29 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103"];
n30 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n31 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
n32 [cluster="lambda expression", label="Entry lambda expression", span="33-37"];
n34 [cluster="lambda expression", label="Exit lambda expression", span="33-37"];
n35 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="139-139"];
n36 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
n37 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n38 [cluster="Unk.>", label="Entry Unk.>", span=""];
n39 [cluster="lambda expression", label="Entry lambda expression", span="35-35"];
n40 [cluster="lambda expression", label="f()", span="35-35"];
n41 [cluster="lambda expression", label="Exit lambda expression", span="35-35"];
n42 [cluster="lambda expression", label="Entry lambda expression", span="40-40"];
n44 [cluster="lambda expression", label="Exit lambda expression", span="40-40"];
n45 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
n46 [cluster="System.Type.ToTypeInfo()", label="Entry System.Type.ToTypeInfo()", span="174-174"];
n47 [cluster="lambda expression", label="Entry lambda expression", span="42-125"];
n49 [cluster="lambda expression", label="var tokens = tokenizerResult.SucceededWith()", span="46-46"];
n66 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n62 [cluster="lambda expression", label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="114-120"];
n67 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
n61 [cluster="lambda expression", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="112-112"];
n51 [cluster="lambda expression", label="var optionsPartition = partitions.Item1", span="51-51"];
n68 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="16-16"];
n84 [cluster="lambda expression", label="Entry lambda expression", span="50-50"];
n52 [cluster="lambda expression", label="var valuesPartition = partitions.Item2", span="52-52"];
n69 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
n70 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
n88 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
n57 [cluster="lambda expression", label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="74-75"];
n71 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
n92 [cluster="lambda expression", label="Entry lambda expression", span="66-66"];
n72 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
n73 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n74 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
n95 [cluster="lambda expression", label="Entry lambda expression", span="71-71"];
n75 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n101 [cluster="lambda expression", label="mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="80-91"];
n135 [cluster="lambda expression", label="var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="98-105"];
n64 [cluster="lambda expression", label="return allErrors.Except(warnings).ToParserResult(instance);", span="124-124"];
n76 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
n77 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
n78 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15"];
n79 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
n80 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
n81 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n65 [cluster="lambda expression", label="Exit lambda expression", span="42-125"];
n82 [cluster="Unk.Except", label="Entry Unk.Except", span=""];
n83 [cluster="Unk.ToParserResult", label="Entry Unk.ToParserResult", span=""];
n86 [cluster="lambda expression", label="Exit lambda expression", span="50-50"];
n87 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n90 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
n91 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14"];
n94 [cluster="lambda expression", label="Exit lambda expression", span="66-66"];
n97 [cluster="lambda expression", label="Exit lambda expression", span="71-71"];
n98 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
n99 [cluster="lambda expression", label="Entry lambda expression", span="77-93"];
n105 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
n102 [cluster="lambda expression", label="return mutable;", span="92-92"];
n104 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
n108 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
n112 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
n116 [cluster="lambda expression", label="Entry lambda expression", span="84-84"];
n120 [cluster="lambda expression", label="Entry lambda expression", span="85-85"];
n123 [cluster="lambda expression", label="Entry lambda expression", span="88-90"];
n127 [cluster="lambda expression", label="Entry lambda expression", span="91-91"];
n103 [cluster="lambda expression", label="Exit lambda expression", span="77-93"];
n106 [cluster="lambda expression", label="f()", span="79-79"];
n107 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
n109 [cluster="lambda expression", label="sp.Value.IsJust()", span="81-81"];
n110 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
n111 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
n113 [cluster="lambda expression", label="sp.Value.FromJustOrFail()", span="81-81"];
n114 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
n115 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
n117 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="84-84"];
n118 [cluster="lambda expression", label="Exit lambda expression", span="84-84"];
n119 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
n121 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJustOrFail()", span="85-85"];
n122 [cluster="lambda expression", label="Exit lambda expression", span="85-85"];
n124 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="89-90"];
n125 [cluster="lambda expression", label="Exit lambda expression", span="88-90"];
n126 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
n128 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="91-91"];
n129 [cluster="lambda expression", label="Exit lambda expression", span="91-91"];
n130 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n131 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n132 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
n133 [cluster="lambda expression", label="Entry lambda expression", span="95-108"];
n139 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
n136 [cluster="lambda expression", label="var immutable = (T)ctor.Invoke(values)", span="106-106"];
n140 [cluster="System.Reflection.MethodBase.GetParameters()", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
n141 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n142 [cluster="System.Type.CreateDefaultForImmutable()", label="Entry System.Type.CreateDefaultForImmutable()", span="149-149"];
n143 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
n145 [cluster="lambda expression", label="Entry lambda expression", span="102-102"];
n148 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
n137 [cluster="lambda expression", label="return immutable;", span="107-107"];
n144 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
n138 [cluster="lambda expression", label="Exit lambda expression", span="95-108"];
n146 [cluster="lambda expression", label=v, span="102-102"];
n147 [cluster="lambda expression", label="Exit lambda expression", span="102-102"];
n149 [cluster="lambda expression", label=d, span="104-104"];
n150 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
n151 -> n33  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n152 -> n33  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n152 -> n54  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n152 -> n55  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n153 -> n43  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
n156 -> n85  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n157 -> n85  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n157 -> n54  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n157 -> n96  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n158 -> n54  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n158 -> n89  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n158 -> n55  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n158 -> n93  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n161 -> n96  [color=darkseagreen4, key=1, label=token, style=dashed];
n162 -> n101  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n0 -> n33  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n0 -> n85  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n54  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n89  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n0 -> n55  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n0 -> n93  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n0 -> n96  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n1 -> n22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n5 -> n43  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
n33 -> n39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n33  [color=darkseagreen4, key=1, label=p, style=dashed];
n48 -> n62  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
n50 -> n84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n54 -> n54  [color=darkseagreen4, key=1, label=pt, style=dashed];
n54 -> n88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n54 -> n57  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
n54 -> n62  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
n55 -> n55  [color=darkseagreen4, key=1, label=pt, style=dashed];
n55 -> n92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n55 -> n57  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
n55 -> n62  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
n56 -> n95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n56 -> n96  [color=darkseagreen4, key=1, label=token, style=dashed];
n56 -> n62  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
n100 -> n105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n33  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n2 -> n54  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n2 -> n55  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n60 -> n64  [color=darkseagreen4, key=1, label=instance, style=dashed];
n4 -> n85  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n6 -> n43  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Error>", style=dashed];
n62 -> n64  [color=darkseagreen4, key=1, label=allErrors, style=dashed];
n51 -> n54  [color=darkseagreen4, key=1, label=optionsPartition, style=dashed];
n52 -> n55  [color=darkseagreen4, key=1, label=valuesPartition, style=dashed];
n57 -> n101  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
n101 -> n101  [color=darkseagreen4, key=1, label=mutable, style=dashed];
n101 -> n108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n101 -> n112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n101 -> n116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n101 -> n120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n101 -> n123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n101 -> n127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n135 -> n145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n135 -> n148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
}
