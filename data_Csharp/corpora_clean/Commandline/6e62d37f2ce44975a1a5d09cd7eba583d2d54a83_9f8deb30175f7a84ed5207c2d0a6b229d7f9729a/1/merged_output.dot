digraph  {
n0 [cluster="lambda expression", label="Entry lambda expression", span="15-15"];
n1 [cluster="lambda expression", label="new EnglishNumberToWordsConverter()", span="15-15"];
n2 [cluster="lambda expression", label="Exit lambda expression", span="15-15"];
n3 [cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", span="5-5"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="16-16"];
n5 [cluster="lambda expression", label="new ArabicNumberToWordsConverter()", span="16-16"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="16-16"];
n7 [cluster="Humanizer.Localisation.NumberToWords.ArabicNumberToWordsConverter.ArabicNumberToWordsConverter()", label="Entry Humanizer.Localisation.NumberToWords.ArabicNumberToWordsConverter.ArabicNumberToWordsConverter()", span="4-4"];
n8 [cluster="lambda expression", label="Entry lambda expression", span="17-17"];
n9 [cluster="lambda expression", label="new FarsiNumberToWordsConverter()", span="17-17"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="17-17"];
n11 [cluster="Humanizer.Localisation.NumberToWords.FarsiNumberToWordsConverter.FarsiNumberToWordsConverter()", label="Entry Humanizer.Localisation.NumberToWords.FarsiNumberToWordsConverter.FarsiNumberToWordsConverter()", span="5-5"];
n12 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", label="Entry Humanizer.NumberToWordsExtension.ToWords(int)", span="25-25"];
n13 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", label="return Converter.Convert(number);", span="27-27"];
n14 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", label="Exit Humanizer.NumberToWordsExtension.ToWords(int)", span="25-25"];
n15 [cluster="Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", label="Entry Humanizer.Localisation.NumberToWords.INumberToWordsConverter.Convert(int)", span="12-12"];
d26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="1: var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.GetDescriptorInfo(name, optionSpecs, nameComparer))", span="61-63"];
d3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
d23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecs = (from pt in specProps select pt.Specification)\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="53-55"];
d25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokens = tokenizerResult.Value", span="59-59"];
d27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="65-69"];
d46 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
d65 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
d28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="71-74"];
d29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         NameInfo.FromOptionSpecification(optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))))", span="76-78"];
d66 [cluster="lambda expression", color=green, community=0, label="2: TypeLookup.GetDescriptorInfo(name, optionSpecs, nameComparer)", span="63-63"];
d111 [label="System.StringComparer", span=""];
d112 [label=optionSpecs, span=""];
d67 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
d68 [cluster="CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.GetDescriptorInfo(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="2: instance = instance\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsJust(),\r\n                    sp => sp.Value.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                    sp => sp.Specification.DefaultValue.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing(),\r\n                    sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="82-93"];
d19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var instance = factory()", span="40-40"];
d30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="80-80"];
d32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup)\r\n                .OfType<Just<Error>>().Select(e => e.Value)", span="95-96"];
d54 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="42-42"];
d80 [cluster="lambda expression", label="Entry lambda expression", span="84-84"];
d84 [cluster="lambda expression", label="Entry lambda expression", span="85-85"];
d88 [cluster="lambda expression", label="Entry lambda expression", span="87-87"];
d92 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
d95 [cluster="lambda expression", label="Entry lambda expression", span="90-92"];
d100 [cluster="lambda expression", label="Entry lambda expression", span="93-93"];
d33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="98-105"];
d96 [cluster="lambda expression", color=green, community=0, label="1: sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing()", span="90-92"];
d97 [cluster="lambda expression", label="Exit lambda expression", span="90-92"];
d91 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147"];
d98 [cluster="System.Type.ToDescriptorKind()", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
d99 [cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26"];
d0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
d1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return InstanceBuilder.Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-30"];
d34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
d20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="42-42"];
d24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="57-57"];
d70 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="68-68"];
d74 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="74-74"];
d77 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="78-78"];
d22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specProps = instance.GetType().GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="50-51"];
d43 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
d44 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
d47 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
d48 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
d69 [cluster="lambda expression", label="Entry lambda expression", span="68-68"];
d49 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="18-18"];
d73 [cluster="lambda expression", label="Entry lambda expression", span="74-74"];
d50 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
d51 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d52 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
d76 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
d35 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    instance,\r\n                    new[] { new HelpRequestedError() });", span="44-47"];
d53 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
d55 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="44-44"];
d56 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d106 [cluster="lambda expression", label="Entry lambda expression", span="96-96"];
d82 [cluster="lambda expression", label="Exit lambda expression", span="84-84"];
d81 [cluster="lambda expression", label="sp.Value.IsJust()", span="84-84"];
d86 [cluster="lambda expression", label="Exit lambda expression", span="85-85"];
d85 [cluster="lambda expression", label="sp.Value.FromJust()", span="85-85"];
d90 [cluster="lambda expression", label="Exit lambda expression", span="87-87"];
d89 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="87-87"];
d94 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
d93 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="88-88"];
d102 [cluster="lambda expression", label="Exit lambda expression", span="93-93"];
d101 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="93-93"];
d57 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d58 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
d2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
d5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="22-22"];
d12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22"];
d6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer))", span="23-25"];
d16 [cluster="lambda expression", label="NameLookup.WithSeparator(name, optionSpecs, nameComparer)", span="25-25"];
d4 [cluster="lambda expression", label="Entry lambda expression", span="20-27"];
d36 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d37 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
d38 [cluster="System.StringComparer.Equals(string, string)", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
d45 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d113 [label="System.Globalization.CultureInfo", span=""];
d71 [cluster="lambda expression", label="Exit lambda expression", span="68-68"];
d72 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
d75 [cluster="lambda expression", label="Exit lambda expression", span="74-74"];
d114 [label=token, span=""];
d78 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
d79 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
d41 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d42 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
d59 [cluster="lambda expression", label="Entry lambda expression", span="50-51"];
d39 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
d40 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
d108 [cluster="lambda expression", label="Exit lambda expression", span="96-96"];
d107 [cluster="lambda expression", label="e.Value", span="96-96"];
d83 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152"];
d87 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137"];
d103 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d104 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d105 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="83-83"];
d109 [label="System.StringComparer", span=""];
d9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
d11 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
d110 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
d14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
d7 [cluster="lambda expression", label="return explodedTokens;", span="26-26"];
d10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="52-52"];
d15 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
d17 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
d18 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="19-19"];
d8 [cluster="lambda expression", label="Exit lambda expression", span="20-27"];
d61 [cluster="lambda expression", label="Exit lambda expression", span="50-51"];
d60 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="50-51"];
d62 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="74-74"];
d63 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
d64 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21"];
m0_4 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43"];
m0_31 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture, ignoreValueCase)", span="45-45"];
m0_33 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="return result.ToMaybe();", span="48-48"];
m0_32 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="result.Match((_,__) => { }, e => e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="46-47"];
m0_34 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo, bool)", span="43-43"];
m0_102 [cluster="System.Enum.IsDefined(System.Type, object)", file="ReflectionExtensions.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m0_51 [cluster="RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", file="ReflectionExtensions.cs", label="Entry RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", span="210-210"];
m0_35 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51"];
m0_45 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Func<object> changeType = () =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                };\r\n\r\n                return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();\r\n            }", span="53-81"];
m0_46 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Func<object> makeType = () =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { value });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="83-94"];
m0_47 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="return Result.Try(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType);", span="96-99"];
m0_48 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo, bool)", span="51-51"];
m0_77 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="ReflectionExtensions.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="20-20"];
m0_17 [cluster="Unk.Any", file="ReflectionExtensions.cs", label="Entry Unk.Any", span=""];
m0_71 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="11-11"];
m0_72 [cluster="System.Nullable.GetUnderlyingType(System.Type)", file="ReflectionExtensions.cs", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
m0_0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18"];
m0_1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", color=green, community=0, file="ReflectionExtensions.cs", label="0: return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture, ignoreValueCase)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture, ignoreValueCase);", span="20-22"];
m0_2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo, bool)", span="18-18"];
m0_10 [cluster="System.Type.GetTypeInfo()", file="ReflectionExtensions.cs", label="Entry System.Type.GetTypeInfo()", span="245-245"];
m0_13 [cluster="T.ToMaybe<T>()", file="ReflectionExtensions.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m0_20 [cluster="CSharpx.Maybe.Just<T>(T)", file="ReflectionExtensions.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m0_78 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="73-73"];
m0_22 [cluster="lambda expression", file="ReflectionExtensions.cs", label="ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase)", span="36-36"];
m0_21 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="36-36"];
m0_23 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="36-36"];
m0_53 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                }", span="55-76"];
m0_61 [cluster="lambda expression", file="ReflectionExtensions.cs", label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="57-57"];
m0_62 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="59-63"];
m0_69 [cluster="lambda expression", file="ReflectionExtensions.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="61-63"];
m0_63 [cluster="lambda expression", file="ReflectionExtensions.cs", label="var type = getUnderlyingType() ?? conversionType", span="65-65"];
m0_64 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture)", span="67-71"];
m0_74 [cluster="lambda expression", file="ReflectionExtensions.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture)", span="69-71"];
m0_66 [cluster="lambda expression", file="ReflectionExtensions.cs", label="return (value == null) ? empty() : withValue();", span="75-75"];
m0_54 [cluster="lambda expression", file="ReflectionExtensions.cs", label="return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType, ignoreValueCase) : safeChangeType();", span="78-80"];
m0_83 [cluster="lambda expression", file="ReflectionExtensions.cs", label="var ctor = conversionType.GetTypeInfo().GetConstructor(new[] { typeof(string) })", span="87-87"];
m0_84 [cluster="lambda expression", file="ReflectionExtensions.cs", label="return ctor.Invoke(new object[] { value });", span="88-88"];
m0_52 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="53-81"];
m0_60 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="55-76"];
m0_65 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="73-73"];
m0_79 [cluster="lambda expression", file="ReflectionExtensions.cs", label="isFsOption ? FSharpOptionHelper.None(type) : null", span="73-73"];
m0_68 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="60-63"];
m0_70 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="60-63"];
m0_73 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="68-71"];
m0_75 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="68-71"];
m0_67 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="55-76"];
m0_55 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="53-81"];
m0_82 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="83-94"];
m0_87 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="83-94"];
m0_38 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="46-46"];
m0_40 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="46-47"];
m0_24 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="38-38"];
m0_28 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="40-40"];
m0_80 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="73-73"];
m0_86 [cluster="lambda expression", file="ReflectionExtensions.cs", label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="92-92"];
m0_39 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="46-46"];
m0_42 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="46-47"];
m0_41 [cluster="lambda expression", file="ReflectionExtensions.cs", label="e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="46-47"];
m0_26 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="38-38"];
m0_25 [cluster="lambda expression", file="ReflectionExtensions.cs", label="a.MatchNothing()", span="38-38"];
m0_29 [cluster="lambda expression", file="ReflectionExtensions.cs", label="((Just<object>)c).Value", span="40-40"];
m0_85 [cluster="lambda expression", file="ReflectionExtensions.cs", label=Exception, span="90-90"];
m0_30 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="40-40"];
m0_43 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_76 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="ReflectionExtensions.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m0_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_50 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="40-40"];
m0_49 [cluster="System.Type.IsPrimitiveEx()", file="ReflectionExtensions.cs", label="Entry System.Type.IsPrimitiveEx()", span="228-228"];
m0_16 [cluster="Unk.Select", file="ReflectionExtensions.cs", label="Entry Unk.Select", span=""];
m0_11 [cluster="System.Type.GetGenericArguments()", file="ReflectionExtensions.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_91 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="102-102"];
m0_92 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="ReflectionExtensions.cs", label="object parsedValue", span="104-104"];
m0_93 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="ReflectionExtensions.cs", label="parsedValue = Enum.Parse(conversionType, value, ignoreValueCase)", span="107-107"];
m0_96 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="ReflectionExtensions.cs", label="Enum.IsDefined(conversionType, parsedValue)", span="113-113"];
m0_94 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="ReflectionExtensions.cs", label=ArgumentException, span="109-109"];
m0_97 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="ReflectionExtensions.cs", label="return parsedValue;", span="115-115"];
m0_95 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="ReflectionExtensions.cs", label="throw new FormatException();", span="111-111"];
m0_98 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="ReflectionExtensions.cs", label="throw new FormatException();", span="117-117"];
m0_99 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type, bool)", span="102-102"];
m0_57 [cluster="string.ToBoolean()", file="ReflectionExtensions.cs", label="Entry string.ToBoolean()", span="71-71"];
m0_90 [cluster="System.FormatException.FormatException(string)", file="ReflectionExtensions.cs", label="Entry System.FormatException.FormatException(string)", span="0-0"];
m0_5 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25"];
m0_6 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="var type =\r\n                conversionType.GetTypeInfo()\r\n                              .GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJustOrFail(\r\n                                  new InvalidOperationException(''Non scalar properties should be sequence of type IEnumerable<T>.'')\r\n                    )", span="27-34"];
m0_7 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture, ignoreValueCase))", span="36-36"];
m0_8 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="38-40"];
m0_9 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo, bool)", span="25-25"];
m0_88 [cluster="System.Type.GetConstructor(System.Type[])", file="ReflectionExtensions.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m0_100 [cluster="System.Enum.Parse(System.Type, string, bool)", file="ReflectionExtensions.cs", label="Entry System.Enum.Parse(System.Type, string, bool)", span="0-0"];
m0_18 [cluster="CSharpx.Maybe.Nothing<T>()", file="ReflectionExtensions.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m0_14 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ReflectionExtensions.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m0_15 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="ReflectionExtensions.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m0_81 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="28-28"];
m0_58 [cluster="string.ToEnum(System.Type, bool)", file="ReflectionExtensions.cs", label="Entry string.ToEnum(System.Type, bool)", span="102-102"];
m0_36 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="ReflectionExtensions.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", span="495-495"];
m0_56 [cluster="string.IsBooleanString()", file="ReflectionExtensions.cs", label="Entry string.IsBooleanString()", span="65-65"];
m0_27 [cluster="Unk.MatchNothing", file="ReflectionExtensions.cs", label="Entry Unk.MatchNothing", span=""];
m0_89 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="ReflectionExtensions.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m0_19 [cluster="Unk.ToUntypedArray", file="ReflectionExtensions.cs", label="Entry Unk.ToUntypedArray", span=""];
m0_101 [cluster="System.FormatException.FormatException()", file="ReflectionExtensions.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m0_37 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", file="ReflectionExtensions.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", span="25-25"];
m0_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m0_44 [cluster="System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", file="ReflectionExtensions.cs", label="Entry System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", span="11-11"];
m0_103 [file="ReflectionExtensions.cs", label="System.Globalization.CultureInfo", span=""];
m0_104 [file="ReflectionExtensions.cs", label=bool, span=""];
m0_105 [file="ReflectionExtensions.cs", label=type, span=""];
m0_106 [file="ReflectionExtensions.cs", label=string, span=""];
m0_107 [file="ReflectionExtensions.cs", label="System.Type", span=""];
m0_108 [file="ReflectionExtensions.cs", label="System.Globalization.CultureInfo", span=""];
m0_110 [file="ReflectionExtensions.cs", label=isFsOption, span=""];
m0_111 [file="ReflectionExtensions.cs", label=type, span=""];
m0_109 [file="ReflectionExtensions.cs", label=bool, span=""];
m1_15 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="SpecificationExtensions.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute()", span="42-42"];
m1_16 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="SpecificationExtensions.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute()", span="42-42"];
m1_21 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="SpecificationExtensions.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char)", span="70-70"];
m1_22 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="SpecificationExtensions.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char)", span="70-70"];
m1_19 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="SpecificationExtensions.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="61-61"];
m1_20 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="SpecificationExtensions.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char, string)", span="61-61"];
m1_14 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SpecificationExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_0 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string, string)", span="23-23"];
m1_1 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="shortName == null", span="25-25"];
m1_3 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="longName == null", span="26-26"];
m1_5 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="this.shortName = shortName", span="28-28"];
m1_6 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="this.longName = longName", span="29-29"];
m1_2 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="throw new ArgumentNullException(''shortName'');", span="25-25"];
m1_4 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="throw new ArgumentNullException(''longName'');", span="26-26"];
m1_7 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="this.setName = string.Empty", span="30-30"];
m1_8 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="this.min = -1", span="31-31"];
m1_9 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="this.max = -1", span="32-32"];
m1_10 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="this.separator = string.Empty", span="33-33"];
m1_11 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="this.helpText = string.Empty", span="34-34"];
m1_12 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="this.metaValue = string.Empty", span="35-35"];
m1_13 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="SpecificationExtensions.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(string, string)", span="23-23"];
m1_17 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="SpecificationExtensions.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", span="51-51"];
m1_18 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="SpecificationExtensions.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(string)", span="51-51"];
m1_23 [file="SpecificationExtensions.cs", label="CommandLine.OptionAttribute", span=""];
m2_0 [cluster="Humanizer.DateTimeHumanizeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime, System.Globalization.CultureInfo)", file="SpecificationGuards.cs", label="Entry Humanizer.DateTimeHumanizeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime, System.Globalization.CultureInfo)", span="13-13"];
m2_1 [cluster="Humanizer.DateTimeHumanizeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime, System.Globalization.CultureInfo)", file="SpecificationGuards.cs", label="Exit Humanizer.DateTimeHumanizeStrategy.IDateTimeHumanizeStrategy.Humanize(System.DateTime, System.DateTime, System.Globalization.CultureInfo)", span="13-13"];
m6_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
m6_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120"];
m6_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeLookup.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123"];
m6_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
m6_357 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m6_358 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Action test = () => InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMinMaxZero(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m6_359 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Assert.Throws<ApplicationException>(test)", span="844-844"];
m6_360 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m6_338 [cluster="Unk.>", file="TypeLookup.cs", label="Entry Unk.>", span=""];
m6_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m6_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m6_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m6_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeLookup.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m6_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m6_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m6_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m6_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m6_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeLookup.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m6_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m6_334 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m6_335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Action test = () => InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMinZero(),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m6_336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Assert.Throws<ApplicationException>(test)", span="816-816"];
m6_337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m6_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m6_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
m6_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="TypeLookup.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
m6_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m6_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TypeLookup.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m6_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m6_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeLookup.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m6_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeLookup.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m6_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeLookup.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m6_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m6_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m6_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m6_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeLookup.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m6_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m6_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m6_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m6_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m6_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m6_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m6_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
m6_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
m6_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206"];
m6_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m6_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="TypeLookup.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m6_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m6_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m6_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m6_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m6_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m6_314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m6_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
m6_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TypeLookup.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
m6_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TypeLookup.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
m6_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TypeLookup.cs", label="result.Value.FileName != null", span="771-771"];
m6_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m6_298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m6_306 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m6_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m6_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m6_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m6_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m6_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m6_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m6_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m6_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeLookup.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m6_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m6_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m6_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m6_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TypeLookup.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m6_104 [cluster="Unk.ShouldBeEquivalentTo", file="TypeLookup.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m6_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeLookup.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m6_375 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="868-868"];
m6_376 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="873-877"];
m6_377 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TypeLookup.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="880-880"];
m6_378 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="868-868"];
m6_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m6_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m6_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m6_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeLookup.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m6_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m6_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m6_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
m6_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeLookup.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
m6_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m6_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m6_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98"];
m6_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeLookup.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101"];
m6_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m6_379 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="874-874"];
m6_13 [cluster="lambda expression", file="TypeLookup.cs", label=fakeOptions, span="27-27"];
m6_12 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="27-27"];
m6_14 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="27-27"];
m6_20 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="48-48"];
m6_21 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptions()", span="48-48"];
m6_22 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="48-48"];
m6_27 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="71-71"];
m6_28 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithDouble()", span="71-71"];
m6_29 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="71-71"];
m6_36 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="95-95"];
m6_37 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequence()", span="95-95"];
m6_38 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="95-95"];
m6_44 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="117-117"];
m6_45 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptions()", span="117-117"];
m6_46 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="117-117"];
m6_51 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="140-140"];
m6_52 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
m6_53 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="140-140"];
m6_59 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="162-162"];
m6_60 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
m6_61 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="162-162"];
m6_70 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="181-181"];
m6_71 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
m6_72 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="181-181"];
m6_79 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="200-200"];
m6_80 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
m6_81 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="200-200"];
m6_88 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="220-220"];
m6_89 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
m6_90 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="220-220"];
m6_96 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="239-239"];
m6_97 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m6_98 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="239-239"];
m6_105 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="263-263"];
m6_106 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m6_107 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="263-263"];
m6_115 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="282-282"];
m6_116 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m6_117 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="282-282"];
m6_123 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="301-301"];
m6_124 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m6_125 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="301-301"];
m6_131 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="320-320"];
m6_132 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m6_133 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="320-320"];
m6_140 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="345-345"];
m6_141 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithValues()", span="345-345"];
m6_142 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="345-345"];
m6_147 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="368-368"];
m6_148 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m6_149 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="368-368"];
m6_155 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="390-390"];
m6_156 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m6_157 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="390-390"];
m6_163 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="412-412"];
m6_164 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m6_165 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="412-412"];
m6_173 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="441-441"];
m6_176 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="442-444"];
m6_174 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithValues()", span="441-441"];
m6_175 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="441-441"];
m6_177 [cluster="lambda expression", file="TypeLookup.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m6_181 [cluster="lambda expression", file="TypeLookup.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m6_185 [cluster="lambda expression", file="TypeLookup.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m6_178 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="442-444"];
m6_180 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="444-444"];
m6_182 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="444-444"];
m6_184 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="444-444"];
m6_186 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="444-444"];
m6_194 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="467-467"];
m6_195 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSets()", span="467-467"];
m6_196 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="467-467"];
m6_204 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="487-487"];
m6_205 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m6_206 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="487-487"];
m6_212 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="507-507"];
m6_213 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m6_214 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="507-507"];
m6_221 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="527-527"];
m6_222 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m6_223 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="527-527"];
m6_229 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="545-545"];
m6_230 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionWithRequired()", span="545-545"];
m6_231 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="545-545"];
m6_238 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="564-564"];
m6_239 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptions()", span="564-564"];
m6_240 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="564-564"];
m6_247 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="583-583"];
m6_248 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptions()", span="583-583"];
m6_249 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="583-583"];
m6_255 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="602-602"];
m6_256 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptions()", span="602-602"];
m6_257 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="602-602"];
m6_263 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="621-621"];
m6_264 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptions()", span="621-621"];
m6_265 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="621-621"];
m6_271 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="641-641"];
m6_272 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptions()", span="641-641"];
m6_273 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="641-641"];
m6_279 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="660-660"];
m6_280 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithRequiredValue()", span="660-660"];
m6_281 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="660-660"];
m6_287 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="682-682"];
m6_288 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptions()", span="682-682"];
m6_289 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="682-682"];
m6_295 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="701-701"];
m6_296 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
m6_297 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="701-701"];
m6_303 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="723-723"];
m6_304 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithNullables()", span="723-723"];
m6_305 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="723-723"];
m6_311 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="745-745"];
m6_312 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithNullables()", span="745-745"];
m6_313 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="745-745"];
m6_321 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="765-765"];
m6_322 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithFSharpOption()", span="765-765"];
m6_323 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="765-765"];
m6_331 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="789-789"];
m6_332 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithFSharpOption()", span="789-789"];
m6_333 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="789-789"];
m6_339 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="809-813"];
m6_340 [cluster="lambda expression", file="TypeLookup.cs", label="InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMinZero(),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m6_341 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="809-813"];
m6_342 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="810-810"];
m6_343 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithMinZero()", span="810-810"];
m6_344 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="810-810"];
m6_350 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="823-827"];
m6_351 [cluster="lambda expression", file="TypeLookup.cs", label="InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMaxZero(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m6_352 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="823-827"];
m6_353 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="824-824"];
m6_354 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithMaxZero()", span="824-824"];
m6_355 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="824-824"];
m6_361 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="837-841"];
m6_362 [cluster="lambda expression", file="TypeLookup.cs", label="InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMinMaxZero(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m6_363 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="837-841"];
m6_364 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="838-838"];
m6_365 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
m6_366 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="838-838"];
m6_372 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="855-855"];
m6_373 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithRequiredValue()", span="855-855"];
m6_374 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="855-855"];
m6_380 [cluster="lambda expression", file="TypeLookup.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="874-874"];
m6_381 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="874-874"];
m6_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="TypeLookup.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m6_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m6_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m6_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TypeLookup.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m6_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="TypeLookup.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m6_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m6_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m6_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
m6_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeLookup.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
m6_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m6_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m6_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeLookup.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m6_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m6_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m6_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m6_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m6_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m6_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74"];
m6_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeLookup.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77"];
m6_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m6_282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m6_367 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m6_11 [cluster="Unk.True", file="TypeLookup.cs", label="Entry Unk.True", span=""];
m6_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m6_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeLookup.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m6_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m6_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m6_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m6_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m6_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m6_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m6_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m6_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m6_324 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m6_320 [cluster="Unk.get_IsSome", file="TypeLookup.cs", label="Entry Unk.get_IsSome", span=""];
m6_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m6_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m6_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TypeLookup.cs", label="var fakeOptions = new FakeOptions()", span="20-20"];
m6_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TypeLookup.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
m6_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
m6_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TypeLookup.cs", label="Assert.True(expectedResult.Equals(result))", span="33-33"];
m6_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m6_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m6_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeLookup.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m6_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m6_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m6_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m6_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m6_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeLookup.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m6_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m6_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m6_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m6_35 [cluster="Unk.SequenceEqual", file="TypeLookup.cs", label="Entry Unk.SequenceEqual", span=""];
m6_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m6_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeLookup.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m6_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m6_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m6_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m6_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TypeLookup.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m6_368 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="849-849"];
m6_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="854-858"];
m6_370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TypeLookup.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="861-861"];
m6_371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="849-849"];
m6_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m6_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m6_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m6_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m6_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m6_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m6_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeLookup.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
m6_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
m6_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187"];
m6_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m6_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m6_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeLookup.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m6_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m6_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeLookup.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m6_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m6_382 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m6_356 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m6_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m6_270 [cluster="string.Equals(string)", file="TypeLookup.cs", label="Entry string.Equals(string)", span="0-0"];
m6_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="TypeLookup.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m6_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m6_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
m6_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeLookup.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="54-54"];
m6_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m6_19 [cluster="Unk.Equal", file="TypeLookup.cs", label="Entry Unk.Equal", span=""];
m6_325 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m6_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
m6_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TypeLookup.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
m6_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TypeLookup.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
m6_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TypeLookup.cs", label="result.Value.Offset != null", span="795-795"];
m6_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m6_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TypeLookup.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m6_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m6_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m6_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m6_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeLookup.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m6_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m6_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="TypeLookup.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m6_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m6_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
m6_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="TypeLookup.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
m6_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m6_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m6_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m6_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m6_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m6_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m6_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m6_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeLookup.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m6_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m6_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeLookup.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m6_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m6_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m6_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
m6_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
m6_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
m6_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m6_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TypeLookup.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m6_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m6_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m6_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeLookup.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m6_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m6_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m6_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m6_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
m6_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TypeLookup.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
m6_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m6_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="TypeLookup.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m6_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m6_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeLookup.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m6_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m6_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeLookup.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m6_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m6_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m6_345 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m6_346 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m6_347 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Action test = () => InstanceBuilder.Build(\r\n                () => new FakeOptionsWithMaxZero(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m6_348 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Assert.Throws<ApplicationException>(test)", span="830-830"];
m6_349 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m6_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeLookup.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m6_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeLookup.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m6_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeLookup.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m6_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeLookup.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m6_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TypeLookup.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m6_383 [file="TypeLookup.cs", label=fakeOptions, span=""];
m6_384 [file="TypeLookup.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n6 -> n4  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=2, style=dotted];
n10 -> n8  [color=blue, key=0, style=bold];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n15  [key=2, style=dotted];
n14 -> n12  [color=blue, key=0, style=bold];
d26 -> d27  [color=green, key=0, style=solid];
d26 -> d46  [color=green, key=2, style=dotted];
d26 -> d65  [color=green, key=1, label="lambda expression", style=dashed];
d26 -> d28  [color=green, key=1, label=partitions, style=dashed];
d26 -> d29  [color=green, key=1, label=partitions, style=dashed];
d3 -> d26  [color=green, key=1, label="System.StringComparer", style=dashed];
d3 -> d66  [color=green, key=1, label="System.StringComparer", style=dashed];
d3 -> d19  [key=0, style=solid];
d3 -> d20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> d24  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
d3 -> d27  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d70  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d28  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d29  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d77  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d23 -> d26  [color=green, key=1, label=optionSpecs, style=dashed];
d23 -> d66  [color=green, key=1, label=optionSpecs, style=dashed];
d23 -> d23  [color=darkseagreen4, key=1, label=pt, style=dashed];
d23 -> d24  [key=0, style=solid];
d23 -> d43  [key=2, style=dotted];
d23 -> d44  [key=2, style=dotted];
d23 -> d29  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d25 -> d26  [color=green, key=0, style=solid];
d27 -> d27  [color=darkseagreen4, key=1, label=pt, style=dashed];
d27 -> d28  [key=0, style=solid];
d27 -> d47  [key=2, style=dotted];
d27 -> d48  [key=2, style=dotted];
d27 -> d69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d27 -> d30  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
d27 -> d33  [color=darkseagreen4, key=1, label=optionSpecProps, style=dashed];
d65 -> d66  [color=green, key=0, style=solid];
d28 -> d28  [color=darkseagreen4, key=1, label=pt, style=dashed];
d28 -> d29  [key=0, style=solid];
d28 -> d49  [key=2, style=dotted];
d28 -> d48  [key=2, style=dotted];
d28 -> d73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d28 -> d30  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
d28 -> d33  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
d29 -> d29  [color=darkseagreen4, key=1, label=token, style=dashed];
d29 -> d30  [key=0, style=solid];
d29 -> d50  [key=2, style=dotted];
d29 -> d51  [key=2, style=dotted];
d29 -> d52  [key=2, style=dotted];
d29 -> d76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d29 -> d77  [color=darkseagreen4, key=1, label=token, style=dashed];
d29 -> d33  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
d66 -> d67  [color=green, key=0, style=solid];
d66 -> d68  [color=green, key=2, style=dotted];
d111 -> d66  [color=green, key=1, label="System.StringComparer", style=dashed];
d111 -> d77  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d112 -> d66  [color=green, key=1, label=optionSpecs, style=dashed];
d67 -> d65  [color=blue, key=0, style=bold];
d31 -> d31  [color=green, key=1, label=instance, style=dashed];
d31 -> d32  [color=green, key=0, style=solid];
d31 -> d54  [color=green, key=2, style=dotted];
d31 -> d80  [color=green, key=1, label="lambda expression", style=dashed];
d31 -> d84  [color=green, key=1, label="lambda expression", style=dashed];
d31 -> d88  [color=green, key=1, label="lambda expression", style=dashed];
d31 -> d92  [color=green, key=1, label="lambda expression", style=dashed];
d31 -> d95  [color=green, key=1, label="lambda expression", style=dashed];
d31 -> d100  [color=green, key=1, label="lambda expression", style=dashed];
d31 -> d33  [color=green, key=1, label=instance, style=dashed];
d19 -> d31  [color=green, key=1, label=instance, style=dashed];
d19 -> d20  [key=0, style=solid];
d19 -> d35  [key=2, style=dotted];
d19 -> d21  [color=darkseagreen4, key=1, label=instance, style=dashed];
d19 -> d22  [color=darkseagreen4, key=1, label=instance, style=dashed];
d30 -> d31  [color=green, key=0, style=solid];
d30 -> d53  [key=2, style=dotted];
d30 -> d32  [color=darkseagreen4, key=1, label=specPropsWithValue, style=dashed];
d32 -> d33  [key=0, style=solid];
d32 -> d55  [key=2, style=dotted];
d32 -> d44  [key=2, style=dotted];
d32 -> d56  [key=2, style=dotted];
d32 -> d106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d80 -> d81  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
d88 -> d89  [key=0, style=solid];
d92 -> d93  [key=0, style=solid];
d95 -> d96  [color=green, key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d33 -> d34  [key=0, style=solid];
d33 -> d57  [key=2, style=dotted];
d33 -> d58  [key=2, style=dotted];
d96 -> d97  [color=green, key=0, style=solid];
d96 -> d91  [color=green, key=2, style=dotted];
d96 -> d98  [color=green, key=2, style=dotted];
d96 -> d99  [color=green, key=2, style=dotted];
d97 -> d95  [color=blue, key=0, style=bold];
d0 -> d3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
d0 -> d1  [key=0, style=solid];
d0 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d1 -> d3  [key=2, style=dotted];
d1 -> d1  [color=darkorchid, key=3, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> ", style=bold];
d1 -> d2  [key=0, style=solid];
d1 -> d4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d34 -> d3  [color=blue, key=0, style=bold];
d20 -> d21  [key=0, style=solid];
d20 -> d22  [key=0, style=solid];
d20 -> d36  [key=2, style=dotted];
d20 -> d37  [key=2, style=dotted];
d20 -> d38  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d33  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
d24 -> d45  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d70 -> d72  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d72  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d77 -> d79  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d22 -> d27  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d22 -> d28  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d22 -> d41  [key=2, style=dotted];
d22 -> d42  [key=2, style=dotted];
d22 -> d59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d69 -> d70  [key=0, style=solid];
d73 -> d74  [key=0, style=solid];
d76 -> d77  [key=0, style=solid];
d21 -> d34  [key=0, style=solid];
d21 -> d39  [key=2, style=dotted];
d21 -> d40  [key=2, style=dotted];
d106 -> d107  [key=0, style=solid];
d82 -> d80  [color=blue, key=0, style=bold];
d81 -> d82  [key=0, style=solid];
d81 -> d83  [key=2, style=dotted];
d86 -> d84  [color=blue, key=0, style=bold];
d85 -> d86  [key=0, style=solid];
d85 -> d87  [key=2, style=dotted];
d90 -> d88  [color=blue, key=0, style=bold];
d89 -> d91  [key=2, style=dotted];
d89 -> d90  [key=0, style=solid];
d89 -> d83  [key=2, style=dotted];
d94 -> d92  [color=blue, key=0, style=bold];
d93 -> d94  [key=0, style=solid];
d93 -> d87  [key=2, style=dotted];
d102 -> d100  [color=blue, key=0, style=bold];
d101 -> d102  [key=0, style=solid];
d101 -> d103  [key=2, style=dotted];
d101 -> d104  [key=2, style=dotted];
d101 -> d105  [key=2, style=dotted];
d2 -> d0  [color=blue, key=0, style=bold];
d5 -> d6  [key=0, style=solid];
d5 -> d9  [key=2, style=dotted];
d5 -> d11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d12 -> d13  [key=0, style=solid];
d12 -> d14  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d6 -> d10  [key=2, style=dotted];
d6 -> d15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d16 -> d17  [key=0, style=solid];
d16 -> d18  [key=2, style=dotted];
d4 -> d5  [key=0, style=solid];
d4 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d113 -> d70  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d113 -> d74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d71 -> d69  [color=blue, key=0, style=bold];
d75 -> d73  [color=blue, key=0, style=bold];
d114 -> d77  [color=darkseagreen4, key=1, label=token, style=dashed];
d78 -> d76  [color=blue, key=0, style=bold];
d59 -> d60  [key=0, style=solid];
d108 -> d106  [color=blue, key=0, style=bold];
d107 -> d108  [key=0, style=solid];
d109 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d109 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d109 -> d6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d109 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d11 -> d12  [key=0, style=solid];
d110 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d110 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d13 -> d11  [color=blue, key=0, style=bold];
d7 -> d8  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d17 -> d15  [color=blue, key=0, style=bold];
d8 -> d4  [color=blue, key=0, style=bold];
d61 -> d59  [color=blue, key=0, style=bold];
d60 -> d61  [key=0, style=solid];
d60 -> d62  [key=2, style=dotted];
d60 -> d63  [key=2, style=dotted];
d60 -> d64  [key=2, style=dotted];
m0_4 -> m0_0  [color=darkorchid, key=3, label="Parameter variable bool ignoreValueCase", style=bold];
m0_4 -> m0_31  [key=0, style=solid];
m0_4 -> m0_6  [color=darkorchid, key=3, label="Parameter variable System.Type conversionType", style=bold];
m0_4 -> m0_5  [color=darkorchid, key=3, label="Parameter variable bool ignoreValueCase", style=bold];
m0_4 -> m0_7  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m0_31 -> m0_35  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_37  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_36  [key=2, style=dotted];
m0_32 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_32 -> m0_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_4  [color=blue, key=0, style=bold];
m0_35 -> m0_4  [color=darkorchid, key=3, label="Parameter variable bool ignoreValueCase", style=bold];
m0_35 -> m0_45  [key=0, style=solid];
m0_35 -> m0_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_35 -> m0_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_62  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_69  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_63  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_35 -> m0_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_35 -> m0_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_35 -> m0_54  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_35 -> m0_46  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_35 -> m0_83  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_84  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_35 -> m0_47  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_45 -> m0_6  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments", style=bold];
m0_45 -> m0_7  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo parsingCulture", style=bold];
m0_45 -> m0_45  [color=darkorchid, key=3, label="Local variable System.Func<object> changeType", style=bold];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_47  [color=darkseagreen4, key=1, label=changeType, style=dashed];
m0_45 -> m0_8  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>> verbs", style=bold];
m0_46 -> m0_46  [color=darkorchid, key=3, label="Local variable System.Func<object> makeType", style=bold];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_8  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>> verbs", style=bold];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=2, style=dotted];
m0_47 -> m0_50  [key=2, style=dotted];
m0_47 -> m0_51  [key=2, style=dotted];
m0_48 -> m0_35  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_3  [color=green, key=2, style=dotted];
m0_1 -> m0_4  [color=green, key=2, style=dotted];
m0_1 -> m0_5  [color=green, key=2, style=dotted];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_78 -> m0_79  [key=0, style=solid];
m0_22 -> m0_4  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_23 -> m0_21  [color=blue, key=0, style=bold];
m0_53 -> m0_54  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_50  [key=2, style=dotted];
m0_61 -> m0_69  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_61 -> m0_64  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_61 -> m0_74  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_61 -> m0_65  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_61 -> m0_79  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_62 -> m0_63  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_71  [key=2, style=dotted];
m0_69 -> m0_72  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> d35  [key=2, style=dotted];
m0_63 -> m0_74  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_63 -> m0_65  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_63 -> m0_79  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_66  [color=darkseagreen4, key=1, label=withValue, style=dashed];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_76  [key=2, style=dotted];
m0_74 -> m0_77  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> d35  [key=2, style=dotted];
m0_54 -> m0_58  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_56  [key=2, style=dotted];
m0_54 -> m0_57  [key=2, style=dotted];
m0_54 -> m0_10  [key=2, style=dotted];
m0_54 -> d35  [key=2, style=dotted];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_10  [key=2, style=dotted];
m0_83 -> m0_88  [key=2, style=dotted];
m0_84 -> m0_87  [key=0, style=solid];
m0_84 -> m0_89  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_81  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_70 -> m0_68  [color=blue, key=0, style=bold];
m0_73 -> m0_74  [key=0, style=solid];
m0_75 -> m0_73  [color=blue, key=0, style=bold];
m0_67 -> m0_60  [color=blue, key=0, style=bold];
m0_55 -> m0_52  [color=blue, key=0, style=bold];
m0_82 -> m0_83  [key=0, style=solid];
m0_87 -> m0_82  [color=blue, key=0, style=bold];
m0_38 -> m0_39  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_80 -> m0_78  [color=blue, key=0, style=bold];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_90  [key=2, style=dotted];
m0_39 -> m0_38  [color=blue, key=0, style=bold];
m0_42 -> m0_40  [color=blue, key=0, style=bold];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [key=2, style=dotted];
m0_41 -> m0_44  [key=2, style=dotted];
m0_26 -> m0_24  [color=blue, key=0, style=bold];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid];
m0_30 -> m0_28  [color=blue, key=0, style=bold];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_91 -> m0_96  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_96  [key=0, style=solid];
m0_93 -> m0_100  [key=2, style=dotted];
m0_93 -> m0_97  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_98  [key=0, style=solid];
m0_96 -> m0_102  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_97 -> m0_99  [key=0, style=solid];
m0_95 -> m0_99  [key=0, style=solid];
m0_95 -> m0_101  [key=2, style=dotted];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_101  [key=2, style=dotted];
m0_99 -> m0_91  [color=blue, key=0, style=bold];
m0_5 -> m0_0  [color=darkorchid, key=3, label="Parameter variable bool ignoreValueCase", style=bold];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_5 -> m0_22  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_6 -> m0_22  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_10  [key=2, style=dotted];
m0_6 -> m0_11  [key=2, style=dotted];
m0_6 -> m0_12  [key=2, style=dotted];
m0_6 -> m0_13  [key=2, style=dotted];
m0_6 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_15  [key=2, style=dotted];
m0_6 -> m0_8  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_6 -> m0_45  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_16  [key=2, style=dotted];
m0_7 -> m0_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_17  [key=2, style=dotted];
m0_8 -> m0_18  [key=2, style=dotted];
m0_8 -> m0_16  [key=2, style=dotted];
m0_8 -> m0_19  [key=2, style=dotted];
m0_8 -> m0_20  [key=2, style=dotted];
m0_8 -> m0_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_9 -> m0_5  [color=blue, key=0, style=bold];
m0_58 -> m0_35  [color=darkorchid, key=3, label="Parameter variable bool ignoreValueCase", style=bold];
m0_58 -> m0_92  [color=darkorchid, key=3, label="method methodReturn object ToEnum", style=bold];
m0_103 -> m0_22  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_104 -> m0_22  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_105 -> m0_22  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_106 -> m0_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_106 -> m0_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_106 -> m0_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_106 -> m0_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_106 -> m0_54  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_106 -> m0_84  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_107 -> m0_53  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_107 -> m0_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_107 -> m0_62  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_107 -> m0_69  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_107 -> m0_63  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_107 -> m0_54  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_107 -> m0_83  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_108 -> m0_53  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_108 -> m0_64  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_108 -> m0_74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_110 -> m0_69  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_110 -> m0_74  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_110 -> m0_79  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_111 -> m0_74  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_111 -> m0_79  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_109 -> m0_54  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_15 -> m1_16  [key=0, style=solid];
m1_16 -> m1_15  [color=blue, key=0, style=bold];
m1_21 -> m1_22  [key=0, style=solid];
m1_22 -> m1_21  [color=blue, key=0, style=bold];
m1_19 -> m1_20  [key=0, style=solid];
m1_20 -> m1_19  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_2 -> m1_13  [key=0, style=solid];
m1_2 -> m1_14  [key=2, style=dotted];
m1_4 -> m1_13  [key=0, style=solid];
m1_4 -> m1_14  [key=2, style=dotted];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_0  [color=blue, key=0, style=bold];
m1_17 -> m1_18  [key=0, style=solid];
m1_18 -> m1_17  [color=blue, key=0, style=bold];
m1_23 -> m1_5  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m1_23 -> m1_6  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m1_23 -> m1_7  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m1_23 -> m1_8  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m1_23 -> m1_9  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m1_23 -> m1_10  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m1_23 -> m1_11  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m1_23 -> m1_12  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [color=blue, key=0, style=bold];
m6_40 -> m6_41  [key=0, style=solid];
m6_40 -> m6_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m6_41 -> m6_42  [key=0, style=solid];
m6_41 -> m6_9  [key=2, style=dotted];
m6_41 -> m6_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> m6_35  [key=2, style=dotted];
m6_42 -> m6_11  [key=2, style=dotted];
m6_43 -> m6_40  [color=blue, key=0, style=bold];
m6_357 -> m6_358  [key=0, style=solid];
m6_358 -> m6_359  [key=0, style=solid];
m6_359 -> m6_360  [key=0, style=solid];
m6_359 -> m6_338  [key=2, style=dotted];
m6_360 -> m6_357  [color=blue, key=0, style=bold];
m6_151 -> m6_152  [key=0, style=solid];
m6_151 -> m6_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m6_152 -> m6_153  [key=0, style=solid];
m6_152 -> m6_9  [key=2, style=dotted];
m6_152 -> m6_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_153 -> m6_154  [key=0, style=solid];
m6_153 -> m6_104  [key=2, style=dotted];
m6_154 -> m6_151  [color=blue, key=0, style=bold];
m6_266 -> m6_267  [key=0, style=solid];
m6_266 -> m6_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_267 -> m6_268  [key=0, style=solid];
m6_267 -> m6_9  [key=2, style=dotted];
m6_267 -> m6_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_268 -> m6_269  [key=0, style=solid];
m6_268 -> m6_270  [key=2, style=dotted];
m6_268 -> m6_11  [key=2, style=dotted];
m6_269 -> m6_266  [color=blue, key=0, style=bold];
m6_334 -> m6_335  [key=0, style=solid];
m6_335 -> m6_336  [key=0, style=solid];
m6_336 -> m6_337  [key=0, style=solid];
m6_336 -> m6_338  [key=2, style=dotted];
m6_337 -> m6_334  [color=blue, key=0, style=bold];
m6_307 -> m6_308  [key=0, style=solid];
m6_307 -> m6_309  [color=darkseagreen4, key=1, label="long?", style=dashed];
m6_308 -> m6_309  [key=0, style=solid];
m6_308 -> m6_9  [key=2, style=dotted];
m6_308 -> m6_311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_309 -> m6_310  [key=0, style=solid];
m6_309 -> m6_104  [key=2, style=dotted];
m6_310 -> m6_307  [color=blue, key=0, style=bold];
m6_166 -> m6_167  [key=0, style=solid];
m6_167 -> m6_168  [key=0, style=solid];
m6_167 -> m6_139  [key=2, style=dotted];
m6_167 -> m6_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_168 -> m6_169  [key=0, style=solid];
m6_170 -> m6_171  [key=0, style=solid];
m6_170 -> m6_104  [key=2, style=dotted];
m6_169 -> m6_170  [key=0, style=solid];
m6_169 -> m6_172  [key=2, style=dotted];
m6_169 -> m6_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_169 -> m6_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_171 -> m6_166  [color=blue, key=0, style=bold];
m6_258 -> m6_259  [key=0, style=solid];
m6_259 -> m6_260  [key=0, style=solid];
m6_259 -> m6_246  [key=2, style=dotted];
m6_259 -> m6_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_260 -> m6_261  [key=0, style=solid];
m6_260 -> m6_9  [key=2, style=dotted];
m6_260 -> m6_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_261 -> m6_262  [key=0, style=solid];
m6_261 -> m6_35  [key=2, style=dotted];
m6_261 -> m6_11  [key=2, style=dotted];
m6_262 -> m6_258  [color=blue, key=0, style=bold];
m6_73 -> m6_74  [key=0, style=solid];
m6_74 -> m6_75  [key=0, style=solid];
m6_74 -> m6_78  [key=2, style=dotted];
m6_74 -> m6_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_75 -> m6_76  [key=0, style=solid];
m6_75 -> m6_9  [key=2, style=dotted];
m6_75 -> m6_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_76 -> m6_77  [key=0, style=solid];
m6_76 -> m6_35  [key=2, style=dotted];
m6_76 -> m6_11  [key=2, style=dotted];
m6_77 -> m6_73  [color=blue, key=0, style=bold];
m6_91 -> m6_92  [key=0, style=solid];
m6_92 -> m6_93  [key=0, style=solid];
m6_92 -> m6_78  [key=2, style=dotted];
m6_92 -> m6_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_93 -> m6_94  [key=0, style=solid];
m6_93 -> m6_9  [key=2, style=dotted];
m6_93 -> m6_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_94 -> m6_95  [key=0, style=solid];
m6_94 -> m6_35  [key=2, style=dotted];
m6_94 -> m6_11  [key=2, style=dotted];
m6_95 -> m6_91  [color=blue, key=0, style=bold];
m6_314 -> m6_315  [key=0, style=solid];
m6_314 -> m6_317  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_314 -> m6_318  [color=darkseagreen4, key=1, label=bool, style=dashed];
m6_315 -> m6_316  [key=0, style=solid];
m6_315 -> m6_9  [key=2, style=dotted];
m6_315 -> m6_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_315 -> m6_317  [color=darkseagreen4, key=1, label=result, style=dashed];
m6_315 -> m6_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m6_317 -> m6_318  [key=0, style=solid];
m6_317 -> m6_104  [key=2, style=dotted];
m6_318 -> m6_319  [key=0, style=solid];
m6_318 -> m6_320  [key=2, style=dotted];
m6_318 -> m6_104  [key=2, style=dotted];
m6_316 -> m6_317  [key=0, style=solid];
m6_316 -> m6_318  [key=0, style=solid];
m6_319 -> m6_314  [color=blue, key=0, style=bold];
m6_250 -> m6_251  [key=0, style=solid];
m6_251 -> m6_252  [key=0, style=solid];
m6_251 -> m6_246  [key=2, style=dotted];
m6_251 -> m6_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_252 -> m6_253  [key=0, style=solid];
m6_252 -> m6_9  [key=2, style=dotted];
m6_252 -> m6_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_253 -> m6_254  [key=0, style=solid];
m6_253 -> m6_35  [key=2, style=dotted];
m6_253 -> m6_11  [key=2, style=dotted];
m6_254 -> m6_250  [color=blue, key=0, style=bold];
m6_109 -> m6_110  [key=0, style=solid];
m6_110 -> m6_111  [key=0, style=solid];
m6_110 -> m6_114  [key=2, style=dotted];
m6_110 -> m6_69  [key=2, style=dotted];
m6_110 -> m6_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_111 -> m6_112  [key=0, style=solid];
m6_111 -> m6_9  [key=2, style=dotted];
m6_111 -> m6_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_112 -> m6_113  [key=0, style=solid];
m6_112 -> m6_35  [key=2, style=dotted];
m6_112 -> m6_11  [key=2, style=dotted];
m6_113 -> m6_109  [color=blue, key=0, style=bold];
m6_375 -> m6_376  [key=0, style=solid];
m6_375 -> m6_377  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m6_376 -> m6_377  [key=0, style=solid];
m6_376 -> m6_9  [key=2, style=dotted];
m6_376 -> m6_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_377 -> m6_378  [key=0, style=solid];
m6_377 -> m6_104  [key=2, style=dotted];
m6_378 -> m6_375  [color=blue, key=0, style=bold];
m6_143 -> m6_144  [key=0, style=solid];
m6_143 -> m6_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m6_144 -> m6_145  [key=0, style=solid];
m6_144 -> m6_9  [key=2, style=dotted];
m6_144 -> m6_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_145 -> m6_146  [key=0, style=solid];
m6_145 -> m6_104  [key=2, style=dotted];
m6_146 -> m6_143  [color=blue, key=0, style=bold];
m6_55 -> m6_56  [key=0, style=solid];
m6_55 -> m6_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m6_56 -> m6_57  [key=0, style=solid];
m6_56 -> m6_9  [key=2, style=dotted];
m6_56 -> m6_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_57 -> m6_58  [key=0, style=solid];
m6_57 -> m6_35  [key=2, style=dotted];
m6_57 -> m6_11  [key=2, style=dotted];
m6_58 -> m6_55  [color=blue, key=0, style=bold];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m6_32 -> m6_33  [key=0, style=solid];
m6_32 -> m6_9  [key=2, style=dotted];
m6_32 -> m6_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_33 -> m6_34  [key=0, style=solid];
m6_33 -> m6_35  [key=2, style=dotted];
m6_33 -> m6_11  [key=2, style=dotted];
m6_34 -> m6_31  [color=blue, key=0, style=bold];
m6_379 -> m6_380  [key=0, style=solid];
m6_13 -> m6_14  [key=0, style=solid];
m6_12 -> m6_13  [key=0, style=solid];
m6_14 -> m6_12  [color=blue, key=0, style=bold];
m6_20 -> m6_21  [key=0, style=solid];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_6  [key=2, style=dotted];
m6_22 -> m6_20  [color=blue, key=0, style=bold];
m6_27 -> m6_28  [key=0, style=solid];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_30  [key=2, style=dotted];
m6_29 -> m6_27  [color=blue, key=0, style=bold];
m6_36 -> m6_37  [key=0, style=solid];
m6_37 -> m6_38  [key=0, style=solid];
m6_37 -> m6_39  [key=2, style=dotted];
m6_38 -> m6_36  [color=blue, key=0, style=bold];
m6_44 -> m6_45  [key=0, style=solid];
m6_45 -> m6_46  [key=0, style=solid];
m6_45 -> m6_6  [key=2, style=dotted];
m6_46 -> m6_44  [color=blue, key=0, style=bold];
m6_51 -> m6_52  [key=0, style=solid];
m6_52 -> m6_53  [key=0, style=solid];
m6_52 -> m6_54  [key=2, style=dotted];
m6_53 -> m6_51  [color=blue, key=0, style=bold];
m6_59 -> m6_60  [key=0, style=solid];
m6_60 -> m6_61  [key=0, style=solid];
m6_60 -> m6_62  [key=2, style=dotted];
m6_61 -> m6_59  [color=blue, key=0, style=bold];
m6_70 -> m6_71  [key=0, style=solid];
m6_71 -> m6_72  [key=0, style=solid];
m6_71 -> m6_54  [key=2, style=dotted];
m6_72 -> m6_70  [color=blue, key=0, style=bold];
m6_79 -> m6_80  [key=0, style=solid];
m6_80 -> m6_81  [key=0, style=solid];
m6_80 -> m6_82  [key=2, style=dotted];
m6_81 -> m6_79  [color=blue, key=0, style=bold];
m6_88 -> m6_89  [key=0, style=solid];
m6_89 -> m6_90  [key=0, style=solid];
m6_89 -> m6_62  [key=2, style=dotted];
m6_90 -> m6_88  [color=blue, key=0, style=bold];
m6_96 -> m6_97  [key=0, style=solid];
m6_97 -> m6_98  [key=0, style=solid];
m6_97 -> m6_99  [key=2, style=dotted];
m6_98 -> m6_96  [color=blue, key=0, style=bold];
m6_105 -> m6_106  [key=0, style=solid];
m6_106 -> m6_107  [key=0, style=solid];
m6_106 -> m6_108  [key=2, style=dotted];
m6_107 -> m6_105  [color=blue, key=0, style=bold];
m6_115 -> m6_116  [key=0, style=solid];
m6_116 -> m6_117  [key=0, style=solid];
m6_116 -> m6_108  [key=2, style=dotted];
m6_117 -> m6_115  [color=blue, key=0, style=bold];
m6_123 -> m6_124  [key=0, style=solid];
m6_124 -> m6_125  [key=0, style=solid];
m6_124 -> m6_108  [key=2, style=dotted];
m6_125 -> m6_123  [color=blue, key=0, style=bold];
m6_131 -> m6_132  [key=0, style=solid];
m6_132 -> m6_133  [key=0, style=solid];
m6_132 -> m6_108  [key=2, style=dotted];
m6_133 -> m6_131  [color=blue, key=0, style=bold];
m6_140 -> m6_141  [key=0, style=solid];
m6_141 -> m6_142  [key=0, style=solid];
m6_141 -> m6_139  [key=2, style=dotted];
m6_142 -> m6_140  [color=blue, key=0, style=bold];
m6_147 -> m6_148  [key=0, style=solid];
m6_148 -> m6_149  [key=0, style=solid];
m6_148 -> m6_150  [key=2, style=dotted];
m6_149 -> m6_147  [color=blue, key=0, style=bold];
m6_155 -> m6_156  [key=0, style=solid];
m6_156 -> m6_157  [key=0, style=solid];
m6_156 -> m6_158  [key=2, style=dotted];
m6_157 -> m6_155  [color=blue, key=0, style=bold];
m6_163 -> m6_164  [key=0, style=solid];
m6_164 -> m6_165  [key=0, style=solid];
m6_164 -> m6_158  [key=2, style=dotted];
m6_165 -> m6_163  [color=blue, key=0, style=bold];
m6_173 -> m6_174  [key=0, style=solid];
m6_176 -> m6_177  [key=0, style=solid];
m6_176 -> m6_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m6_176 -> m6_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m6_174 -> m6_175  [key=0, style=solid];
m6_174 -> m6_139  [key=2, style=dotted];
m6_175 -> m6_173  [color=blue, key=0, style=bold];
m6_177 -> m6_178  [key=0, style=solid];
m6_177 -> m6_179  [key=2, style=dotted];
m6_177 -> m6_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_181 -> m6_182  [key=0, style=solid];
m6_181 -> d9  [key=2, style=dotted];
m6_181 -> m6_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_185 -> m6_186  [key=0, style=solid];
m6_185 -> m6_187  [key=2, style=dotted];
m6_178 -> m6_176  [color=blue, key=0, style=bold];
m6_180 -> m6_181  [key=0, style=solid];
m6_182 -> m6_180  [color=blue, key=0, style=bold];
m6_184 -> m6_185  [key=0, style=solid];
m6_186 -> m6_184  [color=blue, key=0, style=bold];
m6_194 -> m6_195  [key=0, style=solid];
m6_195 -> m6_196  [key=0, style=solid];
m6_195 -> m6_197  [key=2, style=dotted];
m6_196 -> m6_194  [color=blue, key=0, style=bold];
m6_204 -> m6_205  [key=0, style=solid];
m6_205 -> m6_206  [key=0, style=solid];
m6_205 -> m6_203  [key=2, style=dotted];
m6_206 -> m6_204  [color=blue, key=0, style=bold];
m6_212 -> m6_213  [key=0, style=solid];
m6_213 -> m6_214  [key=0, style=solid];
m6_213 -> m6_203  [key=2, style=dotted];
m6_214 -> m6_212  [color=blue, key=0, style=bold];
m6_221 -> m6_222  [key=0, style=solid];
m6_222 -> m6_223  [key=0, style=solid];
m6_222 -> m6_203  [key=2, style=dotted];
m6_223 -> m6_221  [color=blue, key=0, style=bold];
m6_229 -> m6_230  [key=0, style=solid];
m6_230 -> m6_231  [key=0, style=solid];
m6_230 -> m6_232  [key=2, style=dotted];
m6_231 -> m6_229  [color=blue, key=0, style=bold];
m6_238 -> m6_239  [key=0, style=solid];
m6_239 -> m6_240  [key=0, style=solid];
m6_239 -> m6_6  [key=2, style=dotted];
m6_240 -> m6_238  [color=blue, key=0, style=bold];
m6_247 -> m6_248  [key=0, style=solid];
m6_248 -> m6_249  [key=0, style=solid];
m6_248 -> m6_6  [key=2, style=dotted];
m6_249 -> m6_247  [color=blue, key=0, style=bold];
m6_255 -> m6_256  [key=0, style=solid];
m6_256 -> m6_257  [key=0, style=solid];
m6_256 -> m6_6  [key=2, style=dotted];
m6_257 -> m6_255  [color=blue, key=0, style=bold];
m6_263 -> m6_264  [key=0, style=solid];
m6_264 -> m6_265  [key=0, style=solid];
m6_264 -> m6_6  [key=2, style=dotted];
m6_265 -> m6_263  [color=blue, key=0, style=bold];
m6_271 -> m6_272  [key=0, style=solid];
m6_272 -> m6_273  [key=0, style=solid];
m6_272 -> m6_6  [key=2, style=dotted];
m6_273 -> m6_271  [color=blue, key=0, style=bold];
m6_279 -> m6_280  [key=0, style=solid];
m6_280 -> m6_281  [key=0, style=solid];
m6_280 -> m6_282  [key=2, style=dotted];
m6_281 -> m6_279  [color=blue, key=0, style=bold];
m6_287 -> m6_288  [key=0, style=solid];
m6_288 -> m6_289  [key=0, style=solid];
m6_288 -> m6_6  [key=2, style=dotted];
m6_289 -> m6_287  [color=blue, key=0, style=bold];
m6_295 -> m6_296  [key=0, style=solid];
m6_296 -> m6_297  [key=0, style=solid];
m6_296 -> m6_298  [key=2, style=dotted];
m6_297 -> m6_295  [color=blue, key=0, style=bold];
m6_303 -> m6_304  [key=0, style=solid];
m6_304 -> m6_305  [key=0, style=solid];
m6_304 -> m6_306  [key=2, style=dotted];
m6_305 -> m6_303  [color=blue, key=0, style=bold];
m6_311 -> m6_312  [key=0, style=solid];
m6_312 -> m6_313  [key=0, style=solid];
m6_312 -> m6_306  [key=2, style=dotted];
m6_313 -> m6_311  [color=blue, key=0, style=bold];
m6_321 -> m6_322  [key=0, style=solid];
m6_322 -> m6_323  [key=0, style=solid];
m6_322 -> m6_324  [key=2, style=dotted];
m6_323 -> m6_321  [color=blue, key=0, style=bold];
m6_331 -> m6_332  [key=0, style=solid];
m6_332 -> m6_333  [key=0, style=solid];
m6_332 -> m6_324  [key=2, style=dotted];
m6_333 -> m6_331  [color=blue, key=0, style=bold];
m6_339 -> m6_340  [key=0, style=solid];
m6_340 -> m6_341  [key=0, style=solid];
m6_340 -> m6_9  [key=2, style=dotted];
m6_340 -> m6_342  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_341 -> m6_339  [color=blue, key=0, style=bold];
m6_342 -> m6_343  [key=0, style=solid];
m6_343 -> m6_344  [key=0, style=solid];
m6_343 -> m6_345  [key=2, style=dotted];
m6_344 -> m6_342  [color=blue, key=0, style=bold];
m6_350 -> m6_351  [key=0, style=solid];
m6_351 -> m6_352  [key=0, style=solid];
m6_351 -> m6_9  [key=2, style=dotted];
m6_351 -> m6_353  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_352 -> m6_350  [color=blue, key=0, style=bold];
m6_353 -> m6_354  [key=0, style=solid];
m6_354 -> m6_355  [key=0, style=solid];
m6_354 -> m6_356  [key=2, style=dotted];
m6_355 -> m6_353  [color=blue, key=0, style=bold];
m6_361 -> m6_362  [key=0, style=solid];
m6_362 -> m6_363  [key=0, style=solid];
m6_362 -> m6_9  [key=2, style=dotted];
m6_362 -> m6_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_363 -> m6_361  [color=blue, key=0, style=bold];
m6_364 -> m6_365  [key=0, style=solid];
m6_365 -> m6_366  [key=0, style=solid];
m6_365 -> m6_367  [key=2, style=dotted];
m6_366 -> m6_364  [color=blue, key=0, style=bold];
m6_372 -> m6_373  [key=0, style=solid];
m6_373 -> m6_374  [key=0, style=solid];
m6_373 -> m6_282  [key=2, style=dotted];
m6_374 -> m6_372  [color=blue, key=0, style=bold];
m6_380 -> m6_381  [key=0, style=solid];
m6_380 -> m6_382  [key=2, style=dotted];
m6_381 -> m6_379  [color=blue, key=0, style=bold];
m6_47 -> m6_48  [key=0, style=solid];
m6_47 -> m6_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m6_48 -> m6_49  [key=0, style=solid];
m6_48 -> m6_9  [key=2, style=dotted];
m6_48 -> m6_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_49 -> m6_50  [key=0, style=solid];
m6_49 -> m6_35  [key=2, style=dotted];
m6_49 -> m6_11  [key=2, style=dotted];
m6_50 -> m6_47  [color=blue, key=0, style=bold];
m6_118 -> m6_119  [key=0, style=solid];
m6_119 -> m6_120  [key=0, style=solid];
m6_119 -> m6_114  [key=2, style=dotted];
m6_119 -> m6_69  [key=2, style=dotted];
m6_119 -> m6_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_120 -> m6_121  [key=0, style=solid];
m6_120 -> m6_9  [key=2, style=dotted];
m6_120 -> m6_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_121 -> m6_122  [key=0, style=solid];
m6_121 -> m6_35  [key=2, style=dotted];
m6_121 -> m6_11  [key=2, style=dotted];
m6_122 -> m6_118  [color=blue, key=0, style=bold];
m6_23 -> m6_24  [key=0, style=solid];
m6_23 -> m6_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_9  [key=2, style=dotted];
m6_24 -> m6_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_25 -> m6_26  [key=0, style=solid];
m6_25 -> m6_19  [key=2, style=dotted];
m6_26 -> m6_23  [color=blue, key=0, style=bold];
m6_274 -> m6_275  [key=0, style=solid];
m6_275 -> m6_276  [key=0, style=solid];
m6_275 -> m6_220  [key=2, style=dotted];
m6_275 -> m6_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_276 -> m6_277  [key=0, style=solid];
m6_276 -> m6_9  [key=2, style=dotted];
m6_276 -> m6_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_277 -> m6_278  [key=0, style=solid];
m6_277 -> m6_35  [key=2, style=dotted];
m6_277 -> m6_11  [key=2, style=dotted];
m6_278 -> m6_274  [color=blue, key=0, style=bold];
m6_233 -> m6_234  [key=0, style=solid];
m6_234 -> m6_235  [key=0, style=solid];
m6_234 -> m6_78  [key=2, style=dotted];
m6_234 -> m6_69  [key=2, style=dotted];
m6_234 -> m6_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_235 -> m6_236  [key=0, style=solid];
m6_235 -> m6_9  [key=2, style=dotted];
m6_235 -> m6_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_236 -> m6_237  [key=0, style=solid];
m6_236 -> m6_35  [key=2, style=dotted];
m6_236 -> m6_11  [key=2, style=dotted];
m6_237 -> m6_233  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_6  [key=2, style=dotted];
m6_1 -> m6_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m6_1 -> m6_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_7  [key=2, style=dotted];
m6_2 -> m6_8  [key=2, style=dotted];
m6_2 -> m6_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_9  [key=2, style=dotted];
m6_3 -> m6_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_10  [key=2, style=dotted];
m6_4 -> m6_11  [key=2, style=dotted];
m6_5 -> m6_0  [color=blue, key=0, style=bold];
m6_224 -> m6_225  [key=0, style=solid];
m6_225 -> m6_226  [key=0, style=solid];
m6_225 -> m6_220  [key=2, style=dotted];
m6_225 -> m6_69  [key=2, style=dotted];
m6_225 -> m6_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_226 -> m6_227  [key=0, style=solid];
m6_226 -> m6_9  [key=2, style=dotted];
m6_226 -> m6_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_227 -> m6_228  [key=0, style=solid];
m6_227 -> m6_35  [key=2, style=dotted];
m6_227 -> m6_11  [key=2, style=dotted];
m6_228 -> m6_224  [color=blue, key=0, style=bold];
m6_215 -> m6_216  [key=0, style=solid];
m6_216 -> m6_217  [key=0, style=solid];
m6_216 -> m6_220  [key=2, style=dotted];
m6_216 -> m6_69  [key=2, style=dotted];
m6_216 -> m6_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_217 -> m6_218  [key=0, style=solid];
m6_217 -> m6_9  [key=2, style=dotted];
m6_217 -> m6_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_218 -> m6_219  [key=0, style=solid];
m6_218 -> m6_35  [key=2, style=dotted];
m6_218 -> m6_11  [key=2, style=dotted];
m6_219 -> m6_215  [color=blue, key=0, style=bold];
m6_126 -> m6_127  [key=0, style=solid];
m6_127 -> m6_128  [key=0, style=solid];
m6_127 -> m6_114  [key=2, style=dotted];
m6_127 -> m6_69  [key=2, style=dotted];
m6_127 -> m6_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_128 -> m6_129  [key=0, style=solid];
m6_128 -> m6_9  [key=2, style=dotted];
m6_128 -> m6_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_129 -> m6_130  [key=0, style=solid];
m6_129 -> m6_35  [key=2, style=dotted];
m6_129 -> m6_11  [key=2, style=dotted];
m6_130 -> m6_126  [color=blue, key=0, style=bold];
m6_368 -> m6_369  [key=0, style=solid];
m6_368 -> m6_370  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m6_369 -> m6_370  [key=0, style=solid];
m6_369 -> m6_9  [key=2, style=dotted];
m6_369 -> m6_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_370 -> m6_371  [key=0, style=solid];
m6_370 -> m6_104  [key=2, style=dotted];
m6_371 -> m6_368  [color=blue, key=0, style=bold];
m6_83 -> m6_84  [key=0, style=solid];
m6_84 -> m6_85  [key=0, style=solid];
m6_84 -> m6_78  [key=2, style=dotted];
m6_84 -> m6_69  [key=2, style=dotted];
m6_84 -> m6_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_85 -> m6_86  [key=0, style=solid];
m6_85 -> m6_9  [key=2, style=dotted];
m6_85 -> m6_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_86 -> m6_87  [key=0, style=solid];
m6_86 -> m6_35  [key=2, style=dotted];
m6_86 -> m6_11  [key=2, style=dotted];
m6_87 -> m6_83  [color=blue, key=0, style=bold];
m6_63 -> m6_64  [key=0, style=solid];
m6_64 -> m6_65  [key=0, style=solid];
m6_64 -> m6_68  [key=2, style=dotted];
m6_64 -> m6_69  [key=2, style=dotted];
m6_64 -> m6_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_65 -> m6_66  [key=0, style=solid];
m6_65 -> m6_9  [key=2, style=dotted];
m6_65 -> m6_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_66 -> m6_67  [key=0, style=solid];
m6_66 -> m6_35  [key=2, style=dotted];
m6_66 -> m6_11  [key=2, style=dotted];
m6_67 -> m6_63  [color=blue, key=0, style=bold];
m6_134 -> m6_135  [key=0, style=solid];
m6_135 -> m6_136  [key=0, style=solid];
m6_135 -> m6_139  [key=2, style=dotted];
m6_135 -> m6_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_136 -> m6_137  [key=0, style=solid];
m6_136 -> m6_9  [key=2, style=dotted];
m6_136 -> m6_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_137 -> m6_138  [key=0, style=solid];
m6_137 -> m6_104  [key=2, style=dotted];
m6_138 -> m6_134  [color=blue, key=0, style=bold];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m6_16 -> m6_17  [key=0, style=solid];
m6_16 -> m6_9  [key=2, style=dotted];
m6_16 -> m6_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_19  [key=2, style=dotted];
m6_18 -> m6_15  [color=blue, key=0, style=bold];
m6_325 -> m6_326  [key=0, style=solid];
m6_325 -> m6_328  [color=darkseagreen4, key=1, label=int, style=dashed];
m6_325 -> m6_329  [color=darkseagreen4, key=1, label=bool, style=dashed];
m6_326 -> m6_327  [key=0, style=solid];
m6_326 -> m6_9  [key=2, style=dotted];
m6_326 -> m6_331  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_326 -> m6_328  [color=darkseagreen4, key=1, label=result, style=dashed];
m6_326 -> m6_329  [color=darkseagreen4, key=1, label=result, style=dashed];
m6_328 -> m6_329  [key=0, style=solid];
m6_328 -> m6_104  [key=2, style=dotted];
m6_329 -> m6_330  [key=0, style=solid];
m6_329 -> m6_320  [key=2, style=dotted];
m6_329 -> m6_104  [key=2, style=dotted];
m6_327 -> m6_328  [key=0, style=solid];
m6_327 -> m6_329  [key=0, style=solid];
m6_330 -> m6_325  [color=blue, key=0, style=bold];
m6_159 -> m6_160  [key=0, style=solid];
m6_159 -> m6_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m6_160 -> m6_161  [key=0, style=solid];
m6_160 -> m6_9  [key=2, style=dotted];
m6_160 -> m6_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_161 -> m6_162  [key=0, style=solid];
m6_161 -> m6_104  [key=2, style=dotted];
m6_162 -> m6_159  [color=blue, key=0, style=bold];
m6_299 -> m6_300  [key=0, style=solid];
m6_299 -> m6_301  [color=darkseagreen4, key=1, label="int?", style=dashed];
m6_300 -> m6_301  [key=0, style=solid];
m6_300 -> m6_9  [key=2, style=dotted];
m6_300 -> m6_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_301 -> m6_302  [key=0, style=solid];
m6_301 -> m6_104  [key=2, style=dotted];
m6_302 -> m6_299  [color=blue, key=0, style=bold];
m6_241 -> m6_242  [key=0, style=solid];
m6_242 -> m6_243  [key=0, style=solid];
m6_242 -> m6_246  [key=2, style=dotted];
m6_242 -> m6_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_243 -> m6_244  [key=0, style=solid];
m6_243 -> m6_9  [key=2, style=dotted];
m6_243 -> m6_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_244 -> m6_245  [key=0, style=solid];
m6_244 -> m6_35  [key=2, style=dotted];
m6_244 -> m6_11  [key=2, style=dotted];
m6_245 -> m6_241  [color=blue, key=0, style=bold];
m6_207 -> m6_208  [key=0, style=solid];
m6_208 -> m6_209  [key=0, style=solid];
m6_208 -> m6_203  [key=2, style=dotted];
m6_208 -> m6_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_209 -> m6_210  [key=0, style=solid];
m6_209 -> m6_9  [key=2, style=dotted];
m6_209 -> m6_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_210 -> m6_211  [key=0, style=solid];
m6_210 -> m6_104  [key=2, style=dotted];
m6_211 -> m6_207  [color=blue, key=0, style=bold];
m6_290 -> m6_291  [key=0, style=solid];
m6_291 -> m6_292  [key=0, style=solid];
m6_291 -> m6_78  [key=2, style=dotted];
m6_291 -> m6_293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_292 -> m6_293  [key=0, style=solid];
m6_292 -> m6_9  [key=2, style=dotted];
m6_292 -> m6_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_293 -> m6_294  [key=0, style=solid];
m6_293 -> m6_35  [key=2, style=dotted];
m6_293 -> m6_11  [key=2, style=dotted];
m6_294 -> m6_290  [color=blue, key=0, style=bold];
m6_100 -> m6_101  [key=0, style=solid];
m6_100 -> m6_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m6_101 -> m6_102  [key=0, style=solid];
m6_101 -> m6_9  [key=2, style=dotted];
m6_101 -> m6_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_102 -> m6_103  [key=0, style=solid];
m6_102 -> m6_104  [key=2, style=dotted];
m6_102 -> m6_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m6_103 -> m6_100  [color=blue, key=0, style=bold];
m6_283 -> m6_284  [key=0, style=solid];
m6_283 -> m6_285  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_284 -> m6_285  [key=0, style=solid];
m6_284 -> m6_9  [key=2, style=dotted];
m6_284 -> m6_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_285 -> m6_286  [key=0, style=solid];
m6_285 -> m6_104  [key=2, style=dotted];
m6_286 -> m6_283  [color=blue, key=0, style=bold];
m6_198 -> m6_199  [key=0, style=solid];
m6_199 -> m6_200  [key=0, style=solid];
m6_199 -> m6_203  [key=2, style=dotted];
m6_199 -> m6_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_200 -> m6_201  [key=0, style=solid];
m6_200 -> m6_9  [key=2, style=dotted];
m6_200 -> m6_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_201 -> m6_202  [key=0, style=solid];
m6_201 -> m6_104  [key=2, style=dotted];
m6_202 -> m6_198  [color=blue, key=0, style=bold];
m6_346 -> m6_347  [key=0, style=solid];
m6_347 -> m6_348  [key=0, style=solid];
m6_348 -> m6_349  [key=0, style=solid];
m6_348 -> m6_338  [key=2, style=dotted];
m6_349 -> m6_346  [color=blue, key=0, style=bold];
m6_188 -> m6_189  [key=0, style=solid];
m6_189 -> m6_190  [key=0, style=solid];
m6_189 -> m6_193  [key=2, style=dotted];
m6_189 -> m6_69  [key=2, style=dotted];
m6_189 -> m6_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m6_190 -> m6_191  [key=0, style=solid];
m6_190 -> m6_9  [key=2, style=dotted];
m6_190 -> m6_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_191 -> m6_192  [key=0, style=solid];
m6_191 -> m6_35  [key=2, style=dotted];
m6_191 -> m6_11  [key=2, style=dotted];
m6_192 -> m6_188  [color=blue, key=0, style=bold];
m6_383 -> m6_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m6_384 -> m6_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m6_384 -> m6_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
}
