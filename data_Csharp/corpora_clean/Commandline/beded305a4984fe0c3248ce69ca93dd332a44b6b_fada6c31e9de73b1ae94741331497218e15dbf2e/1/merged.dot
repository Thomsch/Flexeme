digraph  {
n0 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityTests()", span="7-7", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityTests()"];
n1 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityTests()", span="7-7", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityTests()"];
n2 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="24-24", cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)"];
n3 [label="Assert.Equal(expected, word.ToQuantity(quatity))", span="26-26", cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)"];
n4 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)", span="24-24", cluster="Humanizer.Tests.ToQuantityTests.ToQuantity(string, int, string)"];
n5 [label="Entry string.ToQuantity(int, Humanizer.ShowQuantityAs)", span="25-25", cluster="string.ToQuantity(int, Humanizer.ShowQuantityAs)"];
n6 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n7 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="41-41", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)"];
n8 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.None))", span="43-43", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)"];
n9 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)", span="41-41", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWithNoQuantity(string, int, string)"];
n10 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="58-58", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)"];
n11 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Numeric))", span="61-61", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)"];
n12 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)", span="58-58", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityNumeric(string, int, string)"];
n13 [label="Entry Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="77-77", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)"];
n14 [label="Assert.Equal(expected, word.ToQuantity(quatity, ShowQuantityAs.Words))", span="79-79", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)"];
n15 [label="Exit Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)", span="77-77", cluster="Humanizer.Tests.ToQuantityTests.ToQuantityWords(string, int, string)"];
d152 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="391-395", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", color=green, community=0];
d151 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d153 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="398-398", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d155 [label="Entry lambda expression", span="392-392", cluster="lambda expression"];
d156 [label="new FakeOptionsWithSequenceAndSeparator()", span="392-392", cluster="lambda expression", color=green, community=0];
d157 [label="Exit lambda expression", span="392-392", cluster="lambda expression"];
d158 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()"];
d154 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="386-386", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
d3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="28-32", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="49-53", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="72-76", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d32 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="96-100", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="118-122", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="141-145", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="163-167", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="182-186", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="201-205", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="221-225", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="240-244", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="264-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="283-287", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d120 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="302-306", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d128 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="321-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d136 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="346-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="369-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d160 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="413-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d190 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="468-472", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d200 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="488-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d209 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="508-512", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d217 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="528-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d226 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="546-550", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="565-569", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d243 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="584-588", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d252 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="603-607", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d260 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="622-626", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d267 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="642-646", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d276 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="661-665", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d284 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="683-687", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
d292 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="702-706", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d300 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="724-728", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
d308 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="746-750", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
d315 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="766-770", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d326 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="790-794", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d335 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="813-817", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
d342 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="832-836", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
d164 [label="new FakeOptionsWithSequenceAndSeparator()", span="414-414", cluster="lambda expression"];
d102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="271-271", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d137 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="353-353", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d145 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="376-376", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d161 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="420-420", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d170 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="452-452", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d201 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="495-495", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d210 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="515-515", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d285 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="690-690", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
d301 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="731-731", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
d309 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="753-753", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
d317 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="775-775", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d318 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="777-777", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d328 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d329 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="801-801", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d336 [label="expected.ShouldBeEquivalentTo(result.Value)", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
d343 [label="expected.ShouldBeEquivalentTo(result.Value)", span="839-839", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
d1 [label="var fakeOptions = new FakeOptions()", span="22-22", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="23-25", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d4 [label="Assert.True(expectedResult.Equals(result))", span="35-35", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d12 [label="Entry lambda expression", span="29-29", cluster="lambda expression"];
d15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d17 [label="Assert.Equal(expected, result.Value.LongValue)", span="56-56", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d20 [label="Entry lambda expression", span="50-50", cluster="lambda expression"];
d23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="79-79", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d27 [label="Entry lambda expression", span="73-73", cluster="lambda expression"];
d31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="91-91", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d33 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="103-103", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d36 [label="Entry lambda expression", span="97-97", cluster="lambda expression"];
d40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="125-125", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d44 [label="Entry lambda expression", span="119-119", cluster="lambda expression"];
d47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="148-148", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d51 [label="Entry lambda expression", span="142-142", cluster="lambda expression"];
d55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="170-170", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d59 [label="Entry lambda expression", span="164-164", cluster="lambda expression"];
d64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="179-179", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="189-189", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d70 [label="Entry lambda expression", span="183-183", cluster="lambda expression"];
d74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="198-198", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="208-208", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d79 [label="Entry lambda expression", span="202-202", cluster="lambda expression"];
d84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="218-218", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="228-228", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d88 [label="Entry lambda expression", span="222-222", cluster="lambda expression"];
d92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="237-237", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="247-247", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d96 [label="Entry lambda expression", span="241-241", cluster="lambda expression"];
d100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d105 [label="Entry lambda expression", span="265-265", cluster="lambda expression"];
d110 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="280-280", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d112 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="290-290", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d115 [label="Entry lambda expression", span="284-284", cluster="lambda expression"];
d119 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="299-299", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d121 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="309-309", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d123 [label="Entry lambda expression", span="303-303", cluster="lambda expression"];
d127 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="318-318", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d129 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="328-328", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d131 [label="Entry lambda expression", span="322-322", cluster="lambda expression"];
d135 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="337-343", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d140 [label="Entry lambda expression", span="347-347", cluster="lambda expression"];
d143 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d147 [label="Entry lambda expression", span="370-370", cluster="lambda expression"];
d159 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d163 [label="Entry lambda expression", span="414-414", cluster="lambda expression"];
d189 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="461-465", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d191 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="475-475", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d194 [label="Entry lambda expression", span="469-469", cluster="lambda expression"];
d199 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="483-486", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d204 [label="Entry lambda expression", span="489-489", cluster="lambda expression"];
d208 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="503-506", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d212 [label="Entry lambda expression", span="509-509", cluster="lambda expression"];
d216 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="522-526", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d218 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="535-535", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d221 [label="Entry lambda expression", span="529-529", cluster="lambda expression"];
d225 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="543-543", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d227 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="553-553", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d229 [label="Entry lambda expression", span="547-547", cluster="lambda expression"];
d234 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="562-562", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="572-572", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d238 [label="Entry lambda expression", span="566-566", cluster="lambda expression"];
d242 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="581-581", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d244 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="591-591", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d247 [label="Entry lambda expression", span="585-585", cluster="lambda expression"];
d251 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="600-600", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d253 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="610-610", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d255 [label="Entry lambda expression", span="604-604", cluster="lambda expression"];
d259 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="619-619", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d261 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="629-629", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d263 [label="Entry lambda expression", span="623-623", cluster="lambda expression"];
d266 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d268 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="649-649", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d271 [label="Entry lambda expression", span="643-643", cluster="lambda expression"];
d275 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="658-658", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d277 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="668-668", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d279 [label="Entry lambda expression", span="662-662", cluster="lambda expression"];
d283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
d287 [label="Entry lambda expression", span="684-684", cluster="lambda expression"];
d291 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="699-699", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d293 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="709-709", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d295 [label="Entry lambda expression", span="703-703", cluster="lambda expression"];
d299 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
d303 [label="Entry lambda expression", span="725-725", cluster="lambda expression"];
d307 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
d311 [label="Entry lambda expression", span="747-747", cluster="lambda expression"];
d314 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="761-761", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d316 [label="result.Value.FileName != null", span="773-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d321 [label="Entry lambda expression", span="767-767", cluster="lambda expression"];
d325 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="785-785", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d327 [label="result.Value.Offset != null", span="797-797", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d331 [label="Entry lambda expression", span="791-791", cluster="lambda expression"];
d334 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="808-808", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
d338 [label="Entry lambda expression", span="814-814", cluster="lambda expression"];
d341 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="827-827", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
d345 [label="Entry lambda expression", span="833-833", cluster="lambda expression"];
d165 [label="Exit lambda expression", span="414-414", cluster="lambda expression"];
d103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="259-259", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d138 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="364-364", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d162 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="408-408", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d167 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="432-438", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d169 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="442-449", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d171 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d211 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d286 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="678-678", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
d302 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="719-719", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
d310 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="741-741", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
d319 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="761-761", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
d320 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome"];
d330 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="785-785", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
d337 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="808-808", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
d344 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="827-827", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
d0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
d13 [label=fakeOptions, span="29-29", cluster="lambda expression"];
d7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
d8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="19-19", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)"];
d11 [label="Entry Unk.True", span="", cluster="Unk.True"];
d14 [label="Exit lambda expression", span="29-29", cluster="lambda expression"];
d18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="44-44", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d22 [label="Exit lambda expression", span="50-50", cluster="lambda expression"];
d21 [label="new FakeOptions()", span="50-50", cluster="lambda expression"];
d26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d29 [label="Exit lambda expression", span="73-73", cluster="lambda expression"];
d28 [label="new FakeOptionsWithDouble()", span="73-73", cluster="lambda expression"];
d34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="91-91", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
d38 [label="Exit lambda expression", span="97-97", cluster="lambda expression"];
d37 [label="new FakeOptionsWithSequence()", span="97-97", cluster="lambda expression"];
d43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="113-113", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d46 [label="Exit lambda expression", span="119-119", cluster="lambda expression"];
d45 [label="new FakeOptions()", span="119-119", cluster="lambda expression"];
d50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="136-136", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d53 [label="Exit lambda expression", span="142-142", cluster="lambda expression"];
d52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="142-142", cluster="lambda expression"];
d58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="158-158", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d61 [label="Exit lambda expression", span="164-164", cluster="lambda expression"];
d60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="164-164", cluster="lambda expression"];
d63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
d69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
d67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="176-176", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d72 [label="Exit lambda expression", span="183-183", cluster="lambda expression"];
d71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="183-183", cluster="lambda expression"];
d73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
d77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="195-195", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d81 [label="Exit lambda expression", span="202-202", cluster="lambda expression"];
d80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="202-202", cluster="lambda expression"];
d83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d90 [label="Exit lambda expression", span="222-222", cluster="lambda expression"];
d89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="222-222", cluster="lambda expression"];
d91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="234-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d98 [label="Exit lambda expression", span="241-241", cluster="lambda expression"];
d97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="241-241", cluster="lambda expression"];
d107 [label="Exit lambda expression", span="265-265", cluster="lambda expression"];
d106 [label="new FakeOptionsWithEnum()", span="265-265", cluster="lambda expression"];
d109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d114 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
d113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
d117 [label="Exit lambda expression", span="284-284", cluster="lambda expression"];
d116 [label="new FakeOptionsWithEnum()", span="284-284", cluster="lambda expression"];
d118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d122 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
d125 [label="Exit lambda expression", span="303-303", cluster="lambda expression"];
d124 [label="new FakeOptionsWithEnum()", span="303-303", cluster="lambda expression"];
d126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d130 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
d133 [label="Exit lambda expression", span="322-322", cluster="lambda expression"];
d132 [label="new FakeOptionsWithEnum()", span="322-322", cluster="lambda expression"];
d134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="334-334", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d139 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()"];
d142 [label="Exit lambda expression", span="347-347", cluster="lambda expression"];
d141 [label="new FakeOptionsWithValues()", span="347-347", cluster="lambda expression"];
d149 [label="Exit lambda expression", span="370-370", cluster="lambda expression"];
d148 [label="new FakeOptionsWithSequenceWithoutRange()", span="370-370", cluster="lambda expression"];
d188 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d193 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
d192 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="458-458", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d196 [label="Exit lambda expression", span="469-469", cluster="lambda expression"];
d195 [label="new FakeOptionsWithSets()", span="469-469", cluster="lambda expression"];
d198 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="481-481", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d203 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()"];
d206 [label="Exit lambda expression", span="489-489", cluster="lambda expression"];
d205 [label="new FakeOptionWithRequiredAndSet()", span="489-489", cluster="lambda expression"];
d207 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d214 [label="Exit lambda expression", span="509-509", cluster="lambda expression"];
d213 [label="new FakeOptionWithRequiredAndSet()", span="509-509", cluster="lambda expression"];
d215 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d220 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
d219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="520-520", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d223 [label="Exit lambda expression", span="529-529", cluster="lambda expression"];
d222 [label="new FakeOptionWithRequiredAndSet()", span="529-529", cluster="lambda expression"];
d224 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d228 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="540-540", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d231 [label="Exit lambda expression", span="547-547", cluster="lambda expression"];
d230 [label="new FakeOptionWithRequired()", span="547-547", cluster="lambda expression"];
d233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="559-559", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d240 [label="Exit lambda expression", span="566-566", cluster="lambda expression"];
d239 [label="new FakeOptions()", span="566-566", cluster="lambda expression"];
d241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d246 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
d245 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="578-578", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d249 [label="Exit lambda expression", span="585-585", cluster="lambda expression"];
d248 [label="new FakeOptions()", span="585-585", cluster="lambda expression"];
d250 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d254 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="597-597", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d257 [label="Exit lambda expression", span="604-604", cluster="lambda expression"];
d256 [label="new FakeOptions()", span="604-604", cluster="lambda expression"];
d258 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d262 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="616-616", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d265 [label="Exit lambda expression", span="623-623", cluster="lambda expression"];
d264 [label="new FakeOptions()", span="623-623", cluster="lambda expression"];
d269 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="637-637", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d270 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)"];
d273 [label="Exit lambda expression", span="643-643", cluster="lambda expression"];
d272 [label="new FakeOptions()", span="643-643", cluster="lambda expression"];
d274 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d278 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="655-655", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
d281 [label="Exit lambda expression", span="662-662", cluster="lambda expression"];
d280 [label="new FakeOptionsWithRequiredValue()", span="662-662", cluster="lambda expression"];
d289 [label="Exit lambda expression", span="684-684", cluster="lambda expression"];
d288 [label="new FakeOptions()", span="684-684", cluster="lambda expression"];
d290 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d294 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="696-696", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d297 [label="Exit lambda expression", span="703-703", cluster="lambda expression"];
d296 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="703-703", cluster="lambda expression"];
d305 [label="Exit lambda expression", span="725-725", cluster="lambda expression"];
d304 [label="new FakeOptionsWithNullables()", span="725-725", cluster="lambda expression"];
d313 [label="Exit lambda expression", span="747-747", cluster="lambda expression"];
d312 [label="new FakeOptionsWithNullables()", span="747-747", cluster="lambda expression"];
d323 [label="Exit lambda expression", span="767-767", cluster="lambda expression"];
d322 [label="new FakeOptionsWithFSharpOption()", span="767-767", cluster="lambda expression"];
d333 [label="Exit lambda expression", span="791-791", cluster="lambda expression"];
d332 [label="new FakeOptionsWithFSharpOption()", span="791-791", cluster="lambda expression"];
d340 [label="Exit lambda expression", span="814-814", cluster="lambda expression"];
d339 [label="new FakeOptionsWithRequiredValue()", span="814-814", cluster="lambda expression"];
d347 [label="Exit lambda expression", span="833-833", cluster="lambda expression"];
d346 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="833-833", cluster="lambda expression"];
d166 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="429-429", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d168 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="439-439", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d172 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d173 [label="Entry lambda expression", span="443-443", cluster="lambda expression"];
d176 [label="Entry lambda expression", span="444-446", cluster="lambda expression"];
d349 [label=fakeOptions, span=""];
d30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()"];
d39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()"];
d54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()"];
d62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()"];
d82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()"];
d99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()"];
d108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()"];
d174 [label="new FakeOptionsWithValues()", span="443-443", cluster="lambda expression"];
d150 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()"];
d197 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()"];
d232 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()"];
d282 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()"];
d298 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()"];
d306 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()"];
d324 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()"];
d348 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()"];
d175 [label="Exit lambda expression", span="443-443", cluster="lambda expression"];
d178 [label="Exit lambda expression", span="444-446", cluster="lambda expression"];
d177 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="445-446", cluster="lambda expression"];
d181 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="446-446", cluster="lambda expression"];
d185 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="446-446", cluster="lambda expression"];
d179 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d180 [label="Entry lambda expression", span="446-446", cluster="lambda expression"];
d350 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d182 [label="Exit lambda expression", span="446-446", cluster="lambda expression"];
d183 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d184 [label="Entry lambda expression", span="446-446", cluster="lambda expression"];
d186 [label="Exit lambda expression", span="446-446", cluster="lambda expression"];
d187 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
m0_351 [label="Entry CommandLine.Tests.Fakes.Secert_Verb.Secert_Verb()", span="96-96", cluster="CommandLine.Tests.Fakes.Secert_Verb.Secert_Verb()", file="ParserTests.cs"];
m0_0 [label="Entry Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", span="14-14", cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="ParserTests.cs"];
m0_4 [label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.ConvertToOrdinal(int)", span="76-76", cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.ConvertToOrdinal(int)", file="ParserTests.cs"];
m0_1 [label="return new EnglishNumberToWordsConverter().ConvertToOrdinal(number);", span="16-16", cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="ParserTests.cs"];
m0_3 [label="Entry Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", span="5-5", cluster="Humanizer.Localisation.NumberToWords.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", file="ParserTests.cs"];
m0_5 [label="Assert.True(text.Length > 0)", span="27-27", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="ParserTests.cs"];
m0_2 [label="Exit Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", span="14-14", cluster="Humanizer.NumberToOrdinalWordsExtension.ToOrdinalWords(int)", file="ParserTests.cs"];
m0_6 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="16-16", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="ParserTests.cs"];
m0_198 [label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="353-353", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_206 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="368-368", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", color=green, community=0, file="ParserTests.cs"];
m0_204 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="365-365", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_205 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="367-367", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_207 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="374-374", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_202 [label="var result = help.ToString()", span="361-361", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_203 [label="result.Length.Should().BeGreaterThan(0)", span="364-364", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_208 [label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="375-375", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_209 [label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="376-376", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_210 [label="lines[5].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="377-377", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_211 [label="lines[6].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="378-378", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_212 [label="lines[7].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="379-379", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_213 [label="lines[8].ShouldBeEquivalentTo(''version    Display version information.'')", span="380-380", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_199 [label="var help = new StringWriter()", span="356-356", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_201 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="360-360", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_200 [label="var sut = new Parser(config => config.HelpWriter = help)", span="357-357", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_214 [label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="353-353", cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="ParserTests.cs"];
m0_281 [label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="488-488", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_288 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="503-503", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", color=green, community=0, file="ParserTests.cs"];
m0_286 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="500-500", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_287 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="502-502", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_289 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="509-509", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_290 [label="lines[3].ShouldBeEquivalentTo(''Option 'badoption' is unknown.'')", span="510-510", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_291 [label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="511-511", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_292 [label="lines[5].ShouldBeEquivalentTo(''Basic cloning:'')", span="512-512", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_293 [label="lines[6].ShouldBeEquivalentTo(''git clone https://github.com/gsscoder/csharpx'')", span="513-513", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_294 [label="lines[7].ShouldBeEquivalentTo(''Cloning quietly:'')", span="514-514", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_295 [label="lines[8].ShouldBeEquivalentTo(''git clone --quiet https://github.com/gsscoder/railwaysharp'')", span="515-515", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_296 [label="lines[9].ShouldBeEquivalentTo(''Cloning without hard links:'')", span="516-516", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_297 [label="lines[10].ShouldBeEquivalentTo(''git clone --no-hardlinks https://github.com/gsscoder/csharpx'')", span="517-517", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_298 [label="lines[11].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="518-518", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_299 [label="lines[12].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="519-519", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_300 [label="lines[13].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="520-520", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_301 [label="lines[14].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="521-521", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_302 [label="lines[15].ShouldBeEquivalentTo(''--version         Display version information.'')", span="522-522", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_303 [label="lines[16].ShouldBeEquivalentTo(''URLS (pos. 0)     A list of url(s) to clone.'')", span="523-523", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_285 [label="var result = help.ToString()", span="497-497", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_282 [label="var help = new StringWriter()", span="491-491", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_284 [label="sut.ParseArguments<Add_Verb_With_Usage_Attribute, Commit_Verb_With_Usage_Attribute, Clone_Verb_With_Usage_Attribute>(\r\n                new[] { ''clone'', ''--badoption=@bad?value'' })", span="495-496", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_283 [label="var sut = new Parser(config => config.HelpWriter = help)", span="492-492", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_304 [label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="488-488", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="ParserTests.cs"];
m0_86 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", span="155-155", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs"];
m0_91 [label="((Parsed<Options_With_Switches>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="166-166", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs"];
m0_88 [label="var expectedOptions = new Options_With_Switches()", span="159-159", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs"];
m0_90 [label="var result = sut.ParseArguments<Options_With_Switches>(args)", span="163-163", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs"];
m0_87 [label="var args = new[] {''-''}", span="158-158", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs"];
m0_89 [label="var sut = new Parser()", span="160-160", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs"];
m0_92 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", span="155-155", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="ParserTests.cs"];
m0_104 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="205-205", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m0_109 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="218-218", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m0_105 [label="var expectedOptions = new Commit_Verb() { Message = message }", span="208-208", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m0_107 [label="var result = sut.ParseArguments(\r\n                args,\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="212-214", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m0_108 [label="Assert.IsType<Commit_Verb>(((Parsed<object>)result).Value)", span="217-217", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m0_106 [label="var sut = new Parser()", span="209-209", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m0_110 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="205-205", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="ParserTests.cs"];
m0_137 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="281-281", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m0_142 [label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="292-292", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m0_141 [label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="291-291", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m0_138 [label="var expectedError = new HelpRequestedError()", span="284-284", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m0_140 [label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="288-288", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m0_139 [label="var sut = new Parser()", span="285-285", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m0_143 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="281-281", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="ParserTests.cs"];
m0_406 [label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="678-678", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m0_409 [label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="689-689", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m0_408 [label="var result = sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(arguments)", span="686-686", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m0_410 [label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="690-690", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m0_407 [label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="683-683", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m0_411 [label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="678-678", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="ParserTests.cs"];
m0_453 [label="Entry Unk.BeTrue", span="", cluster="Unk.BeTrue", file="ParserTests.cs"];
m0_67 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", file="ParserTests.cs"];
m0_341 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", span="587-587", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_349 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="602-602", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_346 [label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="599-599", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_347 [label="result.GetType().Should().Be<Parsed<object>>()", span="600-600", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_348 [label="result.TypeInfo.Current.Should().Be<Secert_Verb>()", span="601-601", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_342 [label="var expectedOptions = new Secert_Verb { Force = true, SecertOption = null}", span="590-590", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_345 [label="var result = sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { ''secert'', ''--force'' })", span="595-595", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_343 [label="var help = new StringWriter()", span="591-591", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_344 [label="var sut = new Parser(config => config.HelpWriter = help)", span="592-592", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_350 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", span="587-587", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="ParserTests.cs"];
m0_444 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="340-340", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="ParserTests.cs"];
m0_154 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="297-297", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m0_159 [label="result.Length.Should().BeGreaterThan(0)", span="308-308", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m0_158 [label="var result = help.ToString()", span="305-305", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m0_155 [label="var help = new StringWriter()", span="300-300", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m0_157 [label="sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="304-304", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m0_156 [label="var sut = new Parser(config => config.HelpWriter = help)", span="301-301", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m0_160 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="297-297", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="ParserTests.cs"];
m0_8 [label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="37-37", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="ParserTests.cs"];
m0_61 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m0_65 [label="((Parsed<Simple_Options_With_Values>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="130-130", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m0_62 [label="var expectedOptions = new Simple_Options_With_Values\r\n                                  {\r\n                                      StringValue = ''astring'',\r\n                                      LongValue = 20L,\r\n                                      StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                                      IntValue = 30\r\n                                  }", span="115-121", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m0_64 [label="var result =\r\n                sut.ParseArguments<Simple_Options_With_Values>(\r\n                    new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="125-127", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m0_63 [label="var sut = new Parser(with => with.EnableDashDash = true)", span="122-122", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m0_66 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="ParserTests.cs"];
m0_271 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="472-472", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m0_276 [label="result.Length.Should().BeGreaterThan(0)", span="483-483", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m0_275 [label="var result = help.ToString()", span="480-480", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m0_272 [label="var help = new StringWriter()", span="475-475", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m0_274 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''commit'', ''--help'' })", span="479-479", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m0_273 [label="var sut = new Parser(config => config.HelpWriter = help)", span="476-476", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m0_277 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="472-472", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="ParserTests.cs"];
m0_146 [label="Entry Unk.ContainSingle", span="", cluster="Unk.ContainSingle", file="ParserTests.cs"];
m0_478 [label="Entry CommandLine.Tests.Unit.ParserTests.Null_default()", span="790-790", cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="ParserTests.cs"];
m0_480 [label="parser.ParseArguments<NullDefaultCommandLineArguments>(''''.Split())\r\n                .WithParsed(r =>\r\n                {\r\n                    Assert.Equal(null, r.User);\r\n                })", span="793-797", cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="ParserTests.cs"];
m0_479 [label="Parser parser = new Parser()", span="792-792", cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="ParserTests.cs"];
m0_481 [label="Exit CommandLine.Tests.Unit.ParserTests.Null_default()", span="790-790", cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="ParserTests.cs"];
m0_60 [label="Entry Unk.>", span="", cluster="Unk.>", file="ParserTests.cs"];
m0_35 [label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", span="46-46", cluster="CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", file="ParserTests.cs"];
m0_393 [label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="659-659", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m0_396 [label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="670-670", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m0_395 [label="var result = sut.ParseArguments<Simple_Options>(arguments)", span="667-667", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m0_397 [label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="671-671", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m0_394 [label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="664-664", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m0_398 [label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="659-659", cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="ParserTests.cs"];
m0_78 [label="Entry CommandLine.Tests.Fakes.Add_Verb.Add_Verb()", span="7-7", cluster="CommandLine.Tests.Fakes.Add_Verb.Add_Verb()", file="ParserTests.cs"];
m0_22 [label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="146-146", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="ParserTests.cs"];
m0_115 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="223-223", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m0_118 [label="Assert.IsType<NotParsed<object>>(result)", span="234-234", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m0_117 [label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="229-231", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m0_116 [label="var sut = Parser.Default", span="226-226", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m0_119 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="223-223", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="ParserTests.cs"];
m0_190 [label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15", cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="ParserTests.cs"];
m0_120 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="239-239", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m0_125 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="261-261", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m0_121 [label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="242-251", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m0_123 [label="var result =\r\n                sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="255-257", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m0_124 [label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="260-260", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m0_122 [label="var sut = new Parser()", span="252-252", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m0_126 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="239-239", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="ParserTests.cs"];
m0_71 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs"];
m0_76 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="150-150", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs"];
m0_72 [label="var expectedOptions = new Add_Verb { Patch = true, FileName = ''--strange-fn'' }", span="138-138", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs"];
m0_74 [label="var result = sut.ParseArguments(\r\n                new[] { ''add'', ''-p'', ''--'', ''--strange-fn'' },\r\n                typeof(Add_Verb),\r\n                typeof(Commit_Verb),\r\n                typeof(Clone_Verb))", span="142-146", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs"];
m0_75 [label="Assert.IsType<Add_Verb>(((Parsed<object>)result).Value)", span="149-149", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs"];
m0_73 [label="var sut = new Parser(with => with.EnableDashDash = true)", span="139-139", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs"];
m0_77 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="ParserTests.cs"];
m0_55 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", span="98-98", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs"];
m0_58 [label="Assert.IsType<NotParsed<Options_With_Switches>>(result)", span="107-107", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs"];
m0_57 [label="var result = sut.ParseArguments<Options_With_Switches>(new[] { ''-i'', ''-i'', ''-o'', ''file'' })", span="104-104", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs"];
m0_56 [label="var sut = Parser.Default", span="101-101", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs"];
m0_59 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", span="98-98", cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="ParserTests.cs"];
m0_161 [label="Entry Unk.BeGreaterThan", span="", cluster="Unk.BeGreaterThan", file="ParserTests.cs"];
m0_7 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="ParserTests.cs"];
m0_165 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="313-313", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m0_170 [label="((NotParsed<Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="324-324", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m0_169 [label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="323-323", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m0_166 [label="var expectedError = new VersionRequestedError()", span="316-316", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m0_168 [label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="320-320", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m0_167 [label="var sut = new Parser()", span="317-317", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m0_171 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="313-313", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="ParserTests.cs"];
m0_136 [label="Entry CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13", cluster="CommandLine.Tests.Fakes.Immutable_Simple_Options.Immutable_Simple_Options(string, System.Collections.Generic.IEnumerable<int>, bool, long)", file="ParserTests.cs"];
m0_438 [label="Entry CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="730-730", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m0_442 [label="((NotParsed<Options_With_SetName_That_Ends_With_Previous_SetName>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="745-745", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m0_439 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''somethingelese''), string.Empty)\r\n                }", span="733-737", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m0_441 [label="var result = sut.ParseArguments<Options_With_SetName_That_Ends_With_Previous_SetName>(\r\n                new[] { ''--weburl'', ''value'', ''--somethingelse'', ''othervalue'' })", span="741-742", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m0_440 [label="var sut = new Parser()", span="738-738", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m0_443 [label="Exit CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="730-730", cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="ParserTests.cs"];
m0_463 [label="Entry CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", span="761-761", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_467 [label="result.MapResult(_ => true, _ => false).Should().BeTrue()", span="767-767", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_466 [label="var result = sut.ParseArguments<Simple_Options>(sameValues)", span="765-765", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_464 [label="var sameValues = new[] { ''--stringvalue=test1'', ''--shortandlong=test2'' }", span="763-763", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_465 [label="var sut = new Parser(parserSettings => { parserSettings.IgnoreUnknownArguments = true; })", span="764-764", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_468 [label="Exit CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", span="761-761", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_48 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", span="83-83", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs"];
m0_52 [label="((Parsed<Options_With_Switches>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="93-93", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs"];
m0_49 [label="var expectedOptions = new Options_With_Switches { OutputFile = outputFile }", span="86-86", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs"];
m0_51 [label="var result = sut.ParseArguments<Options_With_Switches>(args)", span="90-90", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs"];
m0_50 [label="var sut = new Parser()", span="87-87", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs"];
m0_53 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", span="83-83", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="ParserTests.cs"];
m0_172 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="468-468", cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="ParserTests.cs"];
m0_46 [label="Entry CommandLine.Parser.Parser()", span="26-26", cluster="CommandLine.Parser.Parser()", file="ParserTests.cs"];
m0_512 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", span="837-837", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="ParserTests.cs"];
m0_514 [label="parser.ParseArguments<Options_With_Shuffled_Index_Values>(\r\n                new[] { ''zero'', ''one'', ''two'' })\r\n                .WithNotParsed(errors => { throw new InvalidOperationException(''Must be parsed.''); })\r\n                .WithParsed(args =>\r\n                {\r\n                    Assert.Equal(''zero'', args.Arg0);\r\n                    Assert.Equal(''one'', args.Arg1);\r\n                    Assert.Equal(''two'', args.Arg2);\r\n                })", span="840-848", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="ParserTests.cs"];
m0_513 [label="var parser = Parser.Default", span="839-839", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="ParserTests.cs"];
m0_515 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", span="837-837", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="ParserTests.cs"];
m0_218 [label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="385-385", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_225 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="399-399", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", color=green, community=0, file="ParserTests.cs"];
m0_223 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="396-396", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_224 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="398-398", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_226 [label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="405-405", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_227 [label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="406-406", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_228 [label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="407-407", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_229 [label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="408-408", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_230 [label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="409-409", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_222 [label="var result = help.ToString()", span="393-393", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_219 [label="var help = new StringWriter()", span="388-388", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_221 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''--help'' })", span="392-392", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_220 [label="var sut = new Parser(config => config.HelpWriter = help)", span="389-389", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_231 [label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="385-385", cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="ParserTests.cs"];
m0_469 [label="Entry lambda expression", span="764-764", cluster="lambda expression", file="ParserTests.cs"];
m0_404 [label="opts.ShouldBeEquivalentTo(expected)", span="671-671", cluster="lambda expression", file="ParserTests.cs"];
m0_416 [label="opts.ShouldBeEquivalentTo(expected)", span="690-690", cluster="lambda expression", file="ParserTests.cs"];
m0_82 [label="Entry lambda expression", span="150-150", cluster="lambda expression", file="ParserTests.cs"];
m0_101 [label="Entry lambda expression", span="196-196", cluster="lambda expression", file="ParserTests.cs"];
m0_112 [label="Entry lambda expression", span="218-218", cluster="lambda expression", file="ParserTests.cs"];
m0_127 [label="Entry lambda expression", span="261-261", cluster="lambda expression", file="ParserTests.cs"];
m0_356 [label="Entry lambda expression", span="602-602", cluster="lambda expression", file="ParserTests.cs"];
m0_372 [label="Entry lambda expression", span="621-621", cluster="lambda expression", file="ParserTests.cs"];
m0_403 [label="Entry lambda expression", span="671-671", cluster="lambda expression", file="ParserTests.cs"];
m0_405 [label="Exit lambda expression", span="671-671", cluster="lambda expression", file="ParserTests.cs"];
m0_415 [label="Entry lambda expression", span="690-690", cluster="lambda expression", file="ParserTests.cs"];
m0_417 [label="Exit lambda expression", span="690-690", cluster="lambda expression", file="ParserTests.cs"];
m0_216 [label="config.HelpWriter = help", span="357-357", cluster="lambda expression", file="ParserTests.cs"];
m0_150 [label="Entry lambda expression", span="292-292", cluster="lambda expression", file="ParserTests.cs"];
m0_147 [label="Entry lambda expression", span="291-291", cluster="lambda expression", file="ParserTests.cs"];
m0_176 [label="Entry lambda expression", span="324-324", cluster="lambda expression", file="ParserTests.cs"];
m0_173 [label="Entry lambda expression", span="323-323", cluster="lambda expression", file="ParserTests.cs"];
m0_195 [label="Entry lambda expression", span="342-342", cluster="lambda expression", file="ParserTests.cs"];
m0_248 [label="Entry lambda expression", span="429-429", cluster="lambda expression", file="ParserTests.cs"];
m0_457 [label="Entry lambda expression", span="757-757", cluster="lambda expression", file="ParserTests.cs"];
m0_460 [label="Entry lambda expression", span="757-757", cluster="lambda expression", file="ParserTests.cs"];
m0_472 [label="Entry lambda expression", span="767-767", cluster="lambda expression", file="ParserTests.cs"];
m0_475 [label="Entry lambda expression", span="767-767", cluster="lambda expression", file="ParserTests.cs"];
m0_84 [label="Exit lambda expression", span="150-150", cluster="lambda expression", file="ParserTests.cs"];
m0_83 [label="o.RespectingRuntimeTypes()", span="150-150", cluster="lambda expression", file="ParserTests.cs"];
m0_103 [label="Exit lambda expression", span="196-196", cluster="lambda expression", file="ParserTests.cs"];
m0_102 [label="o.RespectingRuntimeTypes()", span="196-196", cluster="lambda expression", file="ParserTests.cs"];
m0_114 [label="Exit lambda expression", span="218-218", cluster="lambda expression", file="ParserTests.cs"];
m0_113 [label="o.RespectingRuntimeTypes()", span="218-218", cluster="lambda expression", file="ParserTests.cs"];
m0_129 [label="Exit lambda expression", span="261-261", cluster="lambda expression", file="ParserTests.cs"];
m0_128 [label="o.RespectingRuntimeTypes()", span="261-261", cluster="lambda expression", file="ParserTests.cs"];
m0_358 [label="Exit lambda expression", span="602-602", cluster="lambda expression", file="ParserTests.cs"];
m0_357 [label="o.RespectingRuntimeTypes()", span="602-602", cluster="lambda expression", file="ParserTests.cs"];
m0_374 [label="Exit lambda expression", span="621-621", cluster="lambda expression", file="ParserTests.cs"];
m0_373 [label="o.RespectingRuntimeTypes()", span="621-621", cluster="lambda expression", file="ParserTests.cs"];
m0_233 [label="config.HelpWriter = help", span="389-389", cluster="lambda expression", file="ParserTests.cs"];
m0_269 [label="config.HelpWriter = help", span="444-444", cluster="lambda expression", file="ParserTests.cs"];
m0_306 [label="config.HelpWriter = help", span="492-492", cluster="lambda expression", file="ParserTests.cs"];
m0_324 [label="config.HelpWriter = help", span="533-533", cluster="lambda expression", file="ParserTests.cs"];
m0_339 [label="config.HelpWriter = help", span="563-563", cluster="lambda expression", file="ParserTests.cs"];
m0_391 [label="config.HelpWriter = help", span="630-630", cluster="lambda expression", file="ParserTests.cs"];
m0_436 [label="config.HelpWriter = help", span="700-700", cluster="lambda expression", file="ParserTests.cs"];
m0_215 [label="Entry lambda expression", span="357-357", cluster="lambda expression", file="ParserTests.cs"];
m0_217 [label="Exit lambda expression", span="357-357", cluster="lambda expression", file="ParserTests.cs"];
m0_151 [label="e.Equals(expectedError)", span="292-292", cluster="lambda expression", file="ParserTests.cs"];
m0_152 [label="Exit lambda expression", span="292-292", cluster="lambda expression", file="ParserTests.cs"];
m0_149 [label="Exit lambda expression", span="291-291", cluster="lambda expression", file="ParserTests.cs"];
m0_148 [label="x == 1", span="291-291", cluster="lambda expression", file="ParserTests.cs"];
m0_177 [label="e.Equals(expectedError)", span="324-324", cluster="lambda expression", file="ParserTests.cs"];
m0_178 [label="Exit lambda expression", span="324-324", cluster="lambda expression", file="ParserTests.cs"];
m0_175 [label="Exit lambda expression", span="323-323", cluster="lambda expression", file="ParserTests.cs"];
m0_174 [label="x == 1", span="323-323", cluster="lambda expression", file="ParserTests.cs"];
m0_197 [label="Exit lambda expression", span="342-342", cluster="lambda expression", file="ParserTests.cs"];
m0_196 [label="x == 1", span="342-342", cluster="lambda expression", file="ParserTests.cs"];
m0_250 [label="Exit lambda expression", span="429-429", cluster="lambda expression", file="ParserTests.cs"];
m0_249 [label="x == 1", span="429-429", cluster="lambda expression", file="ParserTests.cs"];
m0_459 [label="Exit lambda expression", span="757-757", cluster="lambda expression", file="ParserTests.cs"];
m0_458 [label=true, span="757-757", cluster="lambda expression", file="ParserTests.cs"];
m0_462 [label="Exit lambda expression", span="757-757", cluster="lambda expression", file="ParserTests.cs"];
m0_461 [label=false, span="757-757", cluster="lambda expression", file="ParserTests.cs"];
m0_474 [label="Exit lambda expression", span="767-767", cluster="lambda expression", file="ParserTests.cs"];
m0_473 [label=true, span="767-767", cluster="lambda expression", file="ParserTests.cs"];
m0_477 [label="Exit lambda expression", span="767-767", cluster="lambda expression", file="ParserTests.cs"];
m0_476 [label=false, span="767-767", cluster="lambda expression", file="ParserTests.cs"];
m0_69 [label="with.EnableDashDash = true", span="122-122", cluster="lambda expression", file="ParserTests.cs"];
m0_80 [label="with.EnableDashDash = true", span="139-139", cluster="lambda expression", file="ParserTests.cs"];
m0_354 [label="config.HelpWriter = help", span="592-592", cluster="lambda expression", file="ParserTests.cs"];
m0_370 [label="config.HelpWriter = help", span="612-612", cluster="lambda expression", file="ParserTests.cs"];
m0_401 [label="config.IgnoreUnknownArguments = true", span="664-664", cluster="lambda expression", file="ParserTests.cs"];
m0_413 [label="config.IgnoreUnknownArguments = true", span="683-683", cluster="lambda expression", file="ParserTests.cs"];
m0_232 [label="Entry lambda expression", span="389-389", cluster="lambda expression", file="ParserTests.cs"];
m0_234 [label="Exit lambda expression", span="389-389", cluster="lambda expression", file="ParserTests.cs"];
m0_268 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="ParserTests.cs"];
m0_270 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="ParserTests.cs"];
m0_305 [label="Entry lambda expression", span="492-492", cluster="lambda expression", file="ParserTests.cs"];
m0_307 [label="Exit lambda expression", span="492-492", cluster="lambda expression", file="ParserTests.cs"];
m0_323 [label="Entry lambda expression", span="533-533", cluster="lambda expression", file="ParserTests.cs"];
m0_325 [label="Exit lambda expression", span="533-533", cluster="lambda expression", file="ParserTests.cs"];
m0_338 [label="Entry lambda expression", span="563-563", cluster="lambda expression", file="ParserTests.cs"];
m0_340 [label="Exit lambda expression", span="563-563", cluster="lambda expression", file="ParserTests.cs"];
m0_390 [label="Entry lambda expression", span="630-630", cluster="lambda expression", file="ParserTests.cs"];
m0_392 [label="Exit lambda expression", span="630-630", cluster="lambda expression", file="ParserTests.cs"];
m0_435 [label="Entry lambda expression", span="700-700", cluster="lambda expression", file="ParserTests.cs"];
m0_437 [label="Exit lambda expression", span="700-700", cluster="lambda expression", file="ParserTests.cs"];
m0_13 [label="with.HelpWriter = writer", span="20-20", cluster="lambda expression", file="ParserTests.cs"];
m0_26 [label="with.HelpWriter = writer", span="36-36", cluster="lambda expression", file="ParserTests.cs"];
m0_37 [label="with.HelpWriter = writer", span="52-52", cluster="lambda expression", file="ParserTests.cs"];
m0_163 [label="config.HelpWriter = help", span="301-301", cluster="lambda expression", file="ParserTests.cs"];
m0_193 [label="config.HelpWriter = help", span="333-333", cluster="lambda expression", file="ParserTests.cs"];
m0_246 [label="config.HelpWriter = help", span="420-420", cluster="lambda expression", file="ParserTests.cs"];
m0_279 [label="config.HelpWriter = help", span="476-476", cluster="lambda expression", file="ParserTests.cs"];
m0_505 [label="Entry lambda expression", span="828-828", cluster="lambda expression", file="ParserTests.cs"];
m0_508 [label="Entry lambda expression", span="829-833", cluster="lambda expression", file="ParserTests.cs"];
m0_455 [label="parserSettings.IgnoreUnknownArguments = true", span="754-754", cluster="lambda expression", file="ParserTests.cs"];
m0_470 [label="parserSettings.IgnoreUnknownArguments = true", span="764-764", cluster="lambda expression", file="ParserTests.cs"];
m0_483 [label="Entry lambda expression", span="794-797", cluster="lambda expression", file="ParserTests.cs"];
m0_492 [label="Entry lambda expression", span="812-812", cluster="lambda expression", file="ParserTests.cs"];
m0_496 [label="Entry lambda expression", span="813-817", cluster="lambda expression", file="ParserTests.cs"];
m0_516 [label="Entry lambda expression", span="842-842", cluster="lambda expression", file="ParserTests.cs"];
m0_519 [label="Entry lambda expression", span="843-848", cluster="lambda expression", file="ParserTests.cs"];
m0_68 [label="Entry lambda expression", span="122-122", cluster="lambda expression", file="ParserTests.cs"];
m0_70 [label="Exit lambda expression", span="122-122", cluster="lambda expression", file="ParserTests.cs"];
m0_79 [label="Entry lambda expression", span="139-139", cluster="lambda expression", file="ParserTests.cs"];
m0_81 [label="Exit lambda expression", span="139-139", cluster="lambda expression", file="ParserTests.cs"];
m0_353 [label="Entry lambda expression", span="592-592", cluster="lambda expression", file="ParserTests.cs"];
m0_355 [label="Exit lambda expression", span="592-592", cluster="lambda expression", file="ParserTests.cs"];
m0_369 [label="Entry lambda expression", span="612-612", cluster="lambda expression", file="ParserTests.cs"];
m0_371 [label="Exit lambda expression", span="612-612", cluster="lambda expression", file="ParserTests.cs"];
m0_400 [label="Entry lambda expression", span="664-664", cluster="lambda expression", file="ParserTests.cs"];
m0_402 [label="Exit lambda expression", span="664-664", cluster="lambda expression", file="ParserTests.cs"];
m0_412 [label="Entry lambda expression", span="683-683", cluster="lambda expression", file="ParserTests.cs"];
m0_414 [label="Exit lambda expression", span="683-683", cluster="lambda expression", file="ParserTests.cs"];
m0_12 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="ParserTests.cs"];
m0_14 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="ParserTests.cs"];
m0_25 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="ParserTests.cs"];
m0_27 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="ParserTests.cs"];
m0_36 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="ParserTests.cs"];
m0_38 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="ParserTests.cs"];
m0_162 [label="Entry lambda expression", span="301-301", cluster="lambda expression", file="ParserTests.cs"];
m0_164 [label="Exit lambda expression", span="301-301", cluster="lambda expression", file="ParserTests.cs"];
m0_192 [label="Entry lambda expression", span="333-333", cluster="lambda expression", file="ParserTests.cs"];
m0_194 [label="Exit lambda expression", span="333-333", cluster="lambda expression", file="ParserTests.cs"];
m0_245 [label="Entry lambda expression", span="420-420", cluster="lambda expression", file="ParserTests.cs"];
m0_247 [label="Exit lambda expression", span="420-420", cluster="lambda expression", file="ParserTests.cs"];
m0_278 [label="Entry lambda expression", span="476-476", cluster="lambda expression", file="ParserTests.cs"];
m0_280 [label="Exit lambda expression", span="476-476", cluster="lambda expression", file="ParserTests.cs"];
m0_507 [label="Exit lambda expression", span="828-828", cluster="lambda expression", file="ParserTests.cs"];
m0_506 [label="throw new InvalidOperationException(''Must be parsed.'');", span="828-828", cluster="lambda expression", file="ParserTests.cs"];
m0_511 [label="Exit lambda expression", span="829-833", cluster="lambda expression", file="ParserTests.cs"];
m0_509 [label="Assert.Equal(''arg'', args.OptValue)", span="831-831", cluster="lambda expression", file="ParserTests.cs"];
m0_510 [label="Assert.Equal(''arg'', args.PosValue)", span="832-832", cluster="lambda expression", file="ParserTests.cs"];
m0_454 [label="Entry lambda expression", span="754-754", cluster="lambda expression", file="ParserTests.cs"];
m0_456 [label="Exit lambda expression", span="754-754", cluster="lambda expression", file="ParserTests.cs"];
m0_471 [label="Exit lambda expression", span="764-764", cluster="lambda expression", file="ParserTests.cs"];
m0_485 [label="Exit lambda expression", span="794-797", cluster="lambda expression", file="ParserTests.cs"];
m0_484 [label="Assert.Equal(null, r.User)", span="796-796", cluster="lambda expression", file="ParserTests.cs"];
m0_494 [label="Exit lambda expression", span="812-812", cluster="lambda expression", file="ParserTests.cs"];
m0_493 [label="throw new InvalidOperationException(''Must be parsed.'');", span="812-812", cluster="lambda expression", file="ParserTests.cs"];
m0_499 [label="Exit lambda expression", span="813-817", cluster="lambda expression", file="ParserTests.cs"];
m0_497 [label="Assert.Equal(''arg'', args.OptValue)", span="815-815", cluster="lambda expression", file="ParserTests.cs"];
m0_498 [label="Assert.Equal(''arg'', args.PosValue)", span="816-816", cluster="lambda expression", file="ParserTests.cs"];
m0_518 [label="Exit lambda expression", span="842-842", cluster="lambda expression", file="ParserTests.cs"];
m0_517 [label="throw new InvalidOperationException(''Must be parsed.'');", span="842-842", cluster="lambda expression", file="ParserTests.cs"];
m0_520 [label="Assert.Equal(''zero'', args.Arg0)", span="845-845", cluster="lambda expression", file="ParserTests.cs"];
m0_521 [label="Assert.Equal(''one'', args.Arg1)", span="846-846", cluster="lambda expression", file="ParserTests.cs"];
m0_522 [label="Assert.Equal(''two'', args.Arg2)", span="847-847", cluster="lambda expression", file="ParserTests.cs"];
m0_523 [label="Exit lambda expression", span="843-848", cluster="lambda expression", file="ParserTests.cs"];
m0_352 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ParserTests.cs"];
m0_251 [label="Entry CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="440-440", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_258 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="454-454", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", color=green, community=0, file="ParserTests.cs"];
m0_256 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="451-451", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_257 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="453-453", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_259 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="460-460", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_260 [label="lines[3].ShouldBeEquivalentTo(''Option: 'weburl' is not compatible with: 'ftpurl'.'')", span="461-461", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_261 [label="lines[4].ShouldBeEquivalentTo(''Option: 'ftpurl' is not compatible with: 'weburl'.'')", span="462-462", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_262 [label="lines[5].ShouldBeEquivalentTo(''--weburl     Required.'')", span="463-463", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_263 [label="lines[6].ShouldBeEquivalentTo(''--ftpurl     Required.'')", span="464-464", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_264 [label="lines[7].ShouldBeEquivalentTo(''-a'')", span="465-465", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_265 [label="lines[8].ShouldBeEquivalentTo(''--help       Display this help screen.'')", span="466-466", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_266 [label="lines[9].ShouldBeEquivalentTo(''--version    Display version information.'')", span="467-467", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_255 [label="var result = help.ToString()", span="448-448", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_252 [label="var help = new StringWriter()", span="443-443", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_254 [label="sut.ParseArguments<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(new[] { ''--weburl=value.com'', ''--ftpurl=value.org'' })", span="447-447", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_253 [label="var sut = new Parser(config => config.HelpWriter = help)", span="444-444", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_267 [label="Exit CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="440-440", cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="ParserTests.cs"];
m0_100 [label="Entry CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()", span="36-36", cluster="CommandLine.Tests.Fakes.Clone_Verb.Clone_Verb()", file="ParserTests.cs"];
m0_28 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m0_33 [label="text.Should().NotBeEmpty()", span="59-59", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m0_32 [label="var text = writer.ToString()", span="58-58", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m0_29 [label="var writer = new StringWriter()", span="51-51", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m0_31 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="55-55", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m0_30 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="52-52", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m0_34 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="ParserTests.cs"];
m0_23 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="ParserTests.cs"];
m0_487 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", span="807-807", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="ParserTests.cs"];
m0_489 [label="parser.ParseArguments<Options_With_Option_And_Value_Of_String_Type>(\r\n                new[] { ''arg'', ''-o'', ''arg'' })\r\n                .WithNotParsed(errors => { throw new InvalidOperationException(''Must be parsed.''); })\r\n                .WithParsed(args =>\r\n                {\r\n                    Assert.Equal(''arg'', args.OptValue);\r\n                    Assert.Equal(''arg'', args.PosValue);\r\n                })", span="810-817", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="ParserTests.cs"];
m0_488 [label="var parser = Parser.Default", span="809-809", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="ParserTests.cs"];
m0_490 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", span="807-807", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="ParserTests.cs"];
m0_153 [label="Entry Unk.Equals", span="", cluster="Unk.Equals", file="ParserTests.cs"];
m0_24 [label="Entry Unk.NotBeEmpty", span="", cluster="Unk.NotBeEmpty", file="ParserTests.cs"];
m0_85 [label="Entry Unk.RespectingRuntimeTypes", span="", cluster="Unk.RespectingRuntimeTypes", file="ParserTests.cs"];
m0_452 [label="Entry CommandLine.ParserResult<TSource>.MapResult<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", span="77-77", cluster="CommandLine.ParserResult<TSource>.MapResult<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", file="ParserTests.cs"];
m0_10 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="ParserTests.cs"];
m0_191 [label="Entry Unk.StartWithEquivalent", span="", cluster="Unk.StartWithEquivalent", file="ParserTests.cs"];
m0_500 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", span="821-821", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs"];
m0_503 [label="result\r\n                .WithNotParsed(errors => { throw new InvalidOperationException(''Must be parsed.''); })\r\n                .WithParsed<Verb_With_Option_And_Value_Of_String_Type>(args =>\r\n                {\r\n                    Assert.Equal(''arg'', args.OptValue);\r\n                    Assert.Equal(''arg'', args.PosValue);\r\n                })", span="827-833", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs"];
m0_502 [label="var result = parser.ParseArguments(\r\n                new[] { ''test'', ''arg'', ''-o'', ''arg'' }, \r\n                typeof(Verb_With_Option_And_Value_Of_String_Type))", span="824-826", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs"];
m0_501 [label="var parser = Parser.Default", span="823-823", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs"];
m0_504 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", span="821-821", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="ParserTests.cs"];
m0_145 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="ParserTests.cs"];
m0_308 [label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", span="529-529", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_315 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="543-543", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", color=green, community=0, file="ParserTests.cs"];
m0_313 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="540-540", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_314 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="542-542", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_316 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="549-549", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_317 [label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="550-550", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_318 [label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="551-551", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_319 [label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="552-552", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_320 [label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="553-553", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_312 [label="var result = help.ToString()", span="537-537", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_309 [label="var help = new StringWriter()", span="532-532", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_311 [label="sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { })", span="536-536", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_310 [label="var sut = new Parser(config => config.HelpWriter = help)", span="533-533", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_321 [label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", span="529-529", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="ParserTests.cs"];
m0_39 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options()", span="64-64", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs"];
m0_43 [label="((Parsed<Simple_Options>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="74-74", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs"];
m0_40 [label="var expectedOptions = new Simple_Options { StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 } }", span="67-67", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs"];
m0_42 [label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="71-71", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs"];
m0_41 [label="var sut = new Parser()", span="68-68", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs"];
m0_44 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options()", span="64-64", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="ParserTests.cs"];
m0_179 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="329-329", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_185 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="341-341", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_184 [label="result.Length.Should().BeGreaterThan(0)", span="340-340", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_186 [label="lines.Should().HaveCount(x => x == 1)", span="342-342", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_187 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="344-344", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_183 [label="var result = help.ToString()", span="337-337", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_180 [label="var help = new StringWriter()", span="332-332", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_182 [label="sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="336-336", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_181 [label="var sut = new Parser(config => config.HelpWriter = help)", span="333-333", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_188 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="329-329", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="ParserTests.cs"];
m0_418 [label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="696-696", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_425 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="711-711", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", color=green, community=0, file="ParserTests.cs"];
m0_423 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="708-708", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_424 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="710-710", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_426 [label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="717-717", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_427 [label="lines[3].ShouldBeEquivalentTo(''Option 'bad-arg' is unknown.'')", span="718-718", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_428 [label="lines[4].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="719-719", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_429 [label="lines[5].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="720-720", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_430 [label="lines[6].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="721-721", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_431 [label="lines[7].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="722-722", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_432 [label="lines[8].ShouldBeEquivalentTo(''--version         Display version information.'')", span="723-723", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_433 [label="lines[9].ShouldBeEquivalentTo(''value pos. 0'')", span="724-724", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_422 [label="var result = help.ToString()", span="705-705", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_419 [label="var help = new StringWriter()", span="699-699", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_421 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''clone'', ''--bad-arg'', ''--help'' })", span="703-704", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_420 [label="var sut = new Parser(config => config.HelpWriter = help)", span="700-700", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_434 [label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="696-696", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="ParserTests.cs"];
m0_491 [label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="58-58", cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserTests.cs"];
m0_130 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="266-266", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m0_134 [label="((Parsed<Immutable_Simple_Options>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="276-276", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m0_131 [label="var expectedOptions = new Immutable_Simple_Options(''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="269-269", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m0_133 [label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="273-273", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m0_132 [label="var sut = new Parser()", span="270-270", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m0_135 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="266-266", cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="ParserTests.cs"];
m0_15 [label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m0_20 [label="text.Should().NotBeEmpty()", span="43-43", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m0_19 [label="var text = writer.ToString()", span="42-42", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m0_16 [label="var writer = new StringWriter()", span="35-35", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m0_18 [label="sut.ParseArguments(new string[] { }, typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="39-39", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m0_17 [label="var sut = new Parser(with => with.HelpWriter = writer)", span="36-36", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m0_21 [label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32", cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="ParserTests.cs"];
m0_495 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ParserTests.cs"];
m0_375 [label="Entry CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="626-626", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_382 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="641-641", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", color=green, community=0, file="ParserTests.cs"];
m0_380 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="638-638", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_381 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="640-640", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_383 [label="lines[2].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="647-647", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_384 [label="lines[3].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="648-648", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_385 [label="lines[4].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="649-649", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_386 [label="lines[5].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="650-650", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_387 [label="lines[6].ShouldBeEquivalentTo(''--version         Display version information.'')", span="651-651", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_388 [label="lines[7].ShouldBeEquivalentTo(''value pos. 0'')", span="652-652", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_379 [label="var result = help.ToString()", span="635-635", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_376 [label="var help = new StringWriter()", span="629-629", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_378 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''help'', ''clone'', ''extra-arg'' })", span="633-634", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_377 [label="var sut = new Parser(config => config.HelpWriter = help)", span="630-630", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_389 [label="Exit CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="626-626", cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="ParserTests.cs"];
m0_189 [label="Entry string.ToNotEmptyLines()", span="10-10", cluster="string.ToNotEmptyLines()", file="ParserTests.cs"];
m0_326 [label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", span="559-559", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_333 [label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="573-573", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", color=green, community=0, file="ParserTests.cs"];
m0_331 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="570-570", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_332 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="572-572", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_334 [label="lines[2].ShouldBeEquivalentTo(''-f, --force    Allow adding otherwise ignored files.'')", span="579-579", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_335 [label="lines[3].ShouldBeEquivalentTo(''--help         Display this help screen.'')", span="580-580", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_336 [label="lines[4].ShouldBeEquivalentTo(''--version      Display version information.'')", span="581-581", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_330 [label="var result = help.ToString()", span="567-567", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_327 [label="var help = new StringWriter()", span="562-562", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_329 [label="sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { ''secert'', ''--help'' })", span="566-566", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_328 [label="var sut = new Parser(config => config.HelpWriter = help)", span="563-563", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_337 [label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", span="559-559", cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="ParserTests.cs"];
m0_445 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="ParserTests.cs"];
m0_111 [label="Entry CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", span="22-22", cluster="CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", file="ParserTests.cs"];
m0_359 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", span="607-607", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_367 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="621-621", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_364 [label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="618-618", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_365 [label="result.GetType().Should().Be<Parsed<object>>()", span="619-619", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_366 [label="result.TypeInfo.Current.Should().Be<Secert_Verb>()", span="620-620", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_360 [label="var expectedOptions = new Secert_Verb { Force = true, SecertOption = ''shhh'' }", span="610-610", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_363 [label="var result = sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { ''secert'', ''--force'', ''--secert-option'', ''shhh'' })", span="615-615", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_361 [label="var help = new StringWriter()", span="611-611", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_362 [label="var sut = new Parser(config => config.HelpWriter = help)", span="612-612", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_368 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", span="607-607", cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="ParserTests.cs"];
m0_446 [label="Entry CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", span="751-751", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_450 [label="result.MapResult(_ => true, _ => false).Should().BeTrue()", span="757-757", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_449 [label="var result = sut.ParseArguments<Simple_Options>(sameValues)", span="755-755", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_447 [label="var sameValues = new[] { ''--stringvalue=test'', ''--shortandlong=test'' }", span="753-753", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_448 [label="var sut = new Parser(parserSettings => { parserSettings.IgnoreUnknownArguments = true; })", span="754-754", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_451 [label="Exit CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", span="751-751", cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="ParserTests.cs"];
m0_54 [label="Entry CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", file="ParserTests.cs"];
m0_399 [label="Entry Unk.WithParsed", span="", cluster="Unk.WithParsed", file="ParserTests.cs"];
m0_9 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="ParserTests.cs"];
m0_93 [label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="171-171", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m0_98 [label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="196-196", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m0_94 [label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="174-183", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m0_96 [label="var result =\r\n                sut.ParseArguments(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                    typeof(Add_Verb),\r\n                    typeof(Commit_Verb),\r\n                    typeof(Clone_Verb))", span="187-192", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m0_97 [label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="195-195", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m0_95 [label="var sut = new Parser()", span="184-184", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m0_99 [label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="171-171", cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="ParserTests.cs"];
m0_235 [label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="416-416", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_241 [label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="428-428", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_240 [label="result.Length.Should().BeGreaterThan(0)", span="427-427", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_242 [label="lines.Should().HaveCount(x => x == 1)", span="429-429", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_243 [label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="431-431", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_239 [label="var result = help.ToString()", span="424-424", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_236 [label="var help = new StringWriter()", span="419-419", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_238 [label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { command })", span="423-423", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_237 [label="var sut = new Parser(config => config.HelpWriter = help)", span="420-420", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_244 [label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="416-416", cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="ParserTests.cs"];
m0_45 [label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", file="ParserTests.cs"];
m0_322 [label="Entry CommandLine.Parser.ParseArguments<T1, T2>(System.Collections.Generic.IEnumerable<string>)", span="25-25", cluster="CommandLine.Parser.ParseArguments<T1, T2>(System.Collections.Generic.IEnumerable<string>)", file="ParserTests.cs"];
m0_144 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="404-404", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ParserTests.cs"];
m0_482 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])", file="ParserTests.cs"];
m0_486 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ParserTests.cs"];
m0_47 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="ParserTests.cs"];
m0_542 [label="CommandLine.Tests.Fakes.Simple_Options", span="", file="ParserTests.cs"];
m0_543 [label="CommandLine.Tests.Fakes.Commit_Verb", span="", file="ParserTests.cs"];
m0_531 [label=help, span="", file="ParserTests.cs"];
m0_532 [label=help, span="", file="ParserTests.cs"];
m0_534 [label=help, span="", file="ParserTests.cs"];
m0_536 [label=help, span="", file="ParserTests.cs"];
m0_537 [label=help, span="", file="ParserTests.cs"];
m0_538 [label=help, span="", file="ParserTests.cs"];
m0_541 [label=help, span="", file="ParserTests.cs"];
m0_544 [label=help, span="", file="ParserTests.cs"];
m0_527 [label=expectedError, span="", file="ParserTests.cs"];
m0_529 [label=expectedError, span="", file="ParserTests.cs"];
m0_539 [label=help, span="", file="ParserTests.cs"];
m0_540 [label=help, span="", file="ParserTests.cs"];
m0_524 [label=writer, span="", file="ParserTests.cs"];
m0_525 [label=writer, span="", file="ParserTests.cs"];
m0_526 [label=writer, span="", file="ParserTests.cs"];
m0_528 [label=help, span="", file="ParserTests.cs"];
m0_530 [label=help, span="", file="ParserTests.cs"];
m0_533 [label=help, span="", file="ParserTests.cs"];
m0_535 [label=help, span="", file="ParserTests.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=2, style=dotted];
n3 -> n6  [key=2, style=dotted];
n4 -> n2  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n5  [key=2, style=dotted];
n8 -> n6  [key=2, style=dotted];
n9 -> n7  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n5  [key=2, style=dotted];
n11 -> n6  [key=2, style=dotted];
n12 -> n10  [key=0, style=bold, color=blue];
n13 -> n14  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n14 -> n5  [key=2, style=dotted];
n14 -> n6  [key=2, style=dotted];
n15 -> n13  [key=0, style=bold, color=blue];
d152 -> d153  [key=0, style=solid, color=green];
d152 -> d9  [key=2, style=dotted, color=green];
d152 -> d155  [key=1, style=dashed, color=green, label="lambda expression"];
d151 -> d152  [key=0, style=solid, color=green];
d151 -> d153  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
d153 -> d154  [key=0, style=solid];
d153 -> d104  [key=2, style=dotted];
d155 -> d156  [key=0, style=solid, color=green];
d156 -> d157  [key=0, style=solid, color=green];
d156 -> d158  [key=2, style=dotted, color=green];
d157 -> d155  [key=0, style=bold, color=blue];
d154 -> d151  [key=0, style=bold, color=blue];
d3 -> d9  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d16 -> d9  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d16 -> d20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d24 -> d9  [key=2, style=dotted];
d24 -> d24  [key=3, color=darkorchid, style=bold, label="Field variable int? VerboseLevel"];
d24 -> d25  [key=0, style=solid];
d24 -> d27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d32 -> d9  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d32 -> d36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d41 -> d9  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d41 -> d44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d48 -> d9  [key=2, style=dotted];
d48 -> d49  [key=0, style=solid];
d48 -> d51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d56 -> d9  [key=2, style=dotted];
d56 -> d57  [key=0, style=solid];
d56 -> d59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d65 -> d9  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d65 -> d70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d75 -> d9  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d75 -> d79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d85 -> d9  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d85 -> d88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d93 -> d9  [key=2, style=dotted];
d93 -> d94  [key=0, style=solid];
d93 -> d96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d101 -> d9  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d101 -> d105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d111 -> d9  [key=2, style=dotted];
d111 -> d111  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string> fakeMutExclRenderer"];
d111 -> d112  [key=0, style=solid];
d111 -> d115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d120 -> d9  [key=2, style=dotted];
d120 -> d121  [key=0, style=solid];
d120 -> d123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d128 -> d9  [key=2, style=dotted];
d128 -> d129  [key=0, style=solid];
d128 -> d131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d136 -> d9  [key=2, style=dotted];
d136 -> d137  [key=0, style=solid];
d136 -> d140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d144 -> d9  [key=2, style=dotted];
d144 -> d145  [key=0, style=solid];
d144 -> d147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d160 -> d9  [key=2, style=dotted];
d160 -> d161  [key=0, style=solid];
d160 -> d163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d190 -> d9  [key=2, style=dotted];
d190 -> d191  [key=0, style=solid];
d190 -> d194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d200 -> d9  [key=2, style=dotted];
d200 -> d201  [key=0, style=solid];
d200 -> d204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d209 -> d9  [key=2, style=dotted];
d209 -> d210  [key=0, style=solid];
d209 -> d212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d217 -> d9  [key=2, style=dotted];
d217 -> d218  [key=0, style=solid];
d217 -> d221  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d226 -> d9  [key=2, style=dotted];
d226 -> d227  [key=0, style=solid];
d226 -> d229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d235 -> d9  [key=2, style=dotted];
d235 -> d236  [key=0, style=solid];
d235 -> d238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d243 -> d9  [key=2, style=dotted];
d243 -> d244  [key=0, style=solid];
d243 -> d247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d252 -> d9  [key=2, style=dotted];
d252 -> d252  [key=3, color=darkorchid, style=bold, label="Local variable string expectedVersion"];
d252 -> d253  [key=0, style=solid];
d252 -> d255  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d260 -> d9  [key=2, style=dotted];
d260 -> d261  [key=0, style=solid];
d260 -> d263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d267 -> d9  [key=2, style=dotted];
d267 -> d267  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Text.HelpText "];
d267 -> d268  [key=0, style=solid];
d267 -> d271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d276 -> d9  [key=2, style=dotted];
d276 -> d277  [key=0, style=solid];
d276 -> d279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d284 -> d9  [key=2, style=dotted];
d284 -> d285  [key=0, style=solid];
d284 -> d287  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d292 -> d9  [key=2, style=dotted];
d292 -> d293  [key=0, style=solid];
d292 -> d295  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d300 -> d9  [key=2, style=dotted];
d300 -> d301  [key=0, style=solid];
d300 -> d303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d308 -> d9  [key=2, style=dotted];
d308 -> d309  [key=0, style=solid];
d308 -> d311  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d315 -> d9  [key=2, style=dotted];
d315 -> d316  [key=0, style=solid];
d315 -> d321  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d315 -> d317  [key=1, style=dashed, color=darkseagreen4, label=result];
d315 -> d318  [key=1, style=dashed, color=darkseagreen4, label=result];
d326 -> d9  [key=2, style=dotted];
d326 -> d327  [key=0, style=solid];
d326 -> d331  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d326 -> d328  [key=1, style=dashed, color=darkseagreen4, label=result];
d326 -> d329  [key=1, style=dashed, color=darkseagreen4, label=result];
d335 -> d9  [key=2, style=dotted];
d335 -> d336  [key=0, style=solid];
d335 -> d338  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d342 -> d9  [key=2, style=dotted];
d342 -> d343  [key=0, style=solid];
d342 -> d345  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d164 -> d158  [key=2, style=dotted];
d164 -> d165  [key=0, style=solid];
d102 -> d104  [key=2, style=dotted];
d102 -> d102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
d102 -> d103  [key=0, style=solid];
d137 -> d104  [key=2, style=dotted];
d137 -> d138  [key=0, style=solid];
d145 -> d104  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d161 -> d104  [key=2, style=dotted];
d161 -> d162  [key=0, style=solid];
d170 -> d104  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d201 -> d104  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d210 -> d104  [key=2, style=dotted];
d210 -> d211  [key=0, style=solid];
d285 -> d104  [key=2, style=dotted];
d285 -> d286  [key=0, style=solid];
d301 -> d104  [key=2, style=dotted];
d301 -> d302  [key=0, style=solid];
d309 -> d104  [key=2, style=dotted];
d309 -> d310  [key=0, style=solid];
d317 -> d104  [key=2, style=dotted];
d317 -> d318  [key=0, style=solid];
d318 -> d104  [key=2, style=dotted];
d318 -> d319  [key=0, style=solid];
d318 -> d320  [key=2, style=dotted];
d328 -> d104  [key=2, style=dotted];
d328 -> d329  [key=0, style=solid];
d329 -> d104  [key=2, style=dotted];
d329 -> d330  [key=0, style=solid];
d329 -> d320  [key=2, style=dotted];
d336 -> d104  [key=2, style=dotted];
d336 -> d337  [key=0, style=solid];
d343 -> d104  [key=2, style=dotted];
d343 -> d344  [key=0, style=solid];
d1 -> d3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [key=2, style=dotted];
d1 -> d13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d2 -> d3  [key=0, style=solid];
d2 -> d7  [key=2, style=dotted];
d2 -> d8  [key=2, style=dotted];
d2 -> d4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d4 -> d5  [key=0, style=solid];
d4 -> d10  [key=2, style=dotted];
d4 -> d11  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [key=1, style=dashed, color=darkseagreen4, label=long];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d23 -> d24  [key=0, style=solid];
d23 -> d25  [key=1, style=dashed, color=darkseagreen4, label=double];
d25 -> d26  [key=0, style=solid];
d25 -> d19  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d31 -> d32  [key=0, style=solid];
d31 -> d33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d33 -> d34  [key=0, style=solid];
d33 -> d35  [key=2, style=dotted];
d33 -> d11  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d40 -> d42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d42 -> d43  [key=0, style=solid];
d42 -> d35  [key=2, style=dotted];
d42 -> d11  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d49 -> d50  [key=0, style=solid];
d49 -> d35  [key=2, style=dotted];
d49 -> d11  [key=2, style=dotted];
d51 -> d52  [key=0, style=solid];
d55 -> d56  [key=0, style=solid];
d55 -> d57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d57 -> d58  [key=0, style=solid];
d57 -> d35  [key=2, style=dotted];
d57 -> d11  [key=2, style=dotted];
d59 -> d60  [key=0, style=solid];
d64 -> d65  [key=0, style=solid];
d64 -> d68  [key=2, style=dotted];
d64 -> d69  [key=2, style=dotted];
d64 -> d66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d66 -> d67  [key=0, style=solid];
d66 -> d35  [key=2, style=dotted];
d66 -> d11  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d74 -> d75  [key=0, style=solid];
d74 -> d78  [key=2, style=dotted];
d74 -> d76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d76 -> d77  [key=0, style=solid];
d76 -> d35  [key=2, style=dotted];
d76 -> d11  [key=2, style=dotted];
d79 -> d80  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
d84 -> d78  [key=2, style=dotted];
d84 -> d69  [key=2, style=dotted];
d84 -> d86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d86 -> d87  [key=0, style=solid];
d86 -> d35  [key=2, style=dotted];
d86 -> d11  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d92 -> d93  [key=0, style=solid];
d92 -> d78  [key=2, style=dotted];
d92 -> d94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d94 -> d95  [key=0, style=solid];
d94 -> d35  [key=2, style=dotted];
d94 -> d11  [key=2, style=dotted];
d96 -> d97  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d100 -> d102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
d105 -> d106  [key=0, style=solid];
d110 -> d111  [key=0, style=solid];
d110 -> d114  [key=2, style=dotted];
d110 -> d69  [key=2, style=dotted];
d110 -> d112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d112 -> d113  [key=0, style=solid];
d112 -> d35  [key=2, style=dotted];
d112 -> d11  [key=2, style=dotted];
d115 -> d116  [key=0, style=solid];
d119 -> d120  [key=0, style=solid];
d119 -> d114  [key=2, style=dotted];
d119 -> d69  [key=2, style=dotted];
d119 -> d121  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d121 -> d122  [key=0, style=solid];
d121 -> d35  [key=2, style=dotted];
d121 -> d11  [key=2, style=dotted];
d123 -> d124  [key=0, style=solid];
d127 -> d128  [key=0, style=solid];
d127 -> d114  [key=2, style=dotted];
d127 -> d69  [key=2, style=dotted];
d127 -> d129  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d129 -> d130  [key=0, style=solid];
d129 -> d35  [key=2, style=dotted];
d129 -> d11  [key=2, style=dotted];
d131 -> d132  [key=0, style=solid];
d135 -> d136  [key=0, style=solid];
d135 -> d137  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d135 -> d139  [key=2, style=dotted];
d140 -> d141  [key=0, style=solid];
d143 -> d144  [key=0, style=solid];
d143 -> d145  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
d147 -> d148  [key=0, style=solid];
d159 -> d160  [key=0, style=solid];
d159 -> d161  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d163 -> d164  [key=0, style=solid];
d189 -> d190  [key=0, style=solid];
d189 -> d193  [key=2, style=dotted];
d189 -> d69  [key=2, style=dotted];
d189 -> d191  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d191 -> d192  [key=0, style=solid];
d191 -> d35  [key=2, style=dotted];
d191 -> d11  [key=2, style=dotted];
d194 -> d195  [key=0, style=solid];
d199 -> d200  [key=0, style=solid];
d199 -> d201  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d199 -> d203  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d208 -> d209  [key=0, style=solid];
d208 -> d210  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d208 -> d203  [key=2, style=dotted];
d212 -> d213  [key=0, style=solid];
d216 -> d217  [key=0, style=solid];
d216 -> d220  [key=2, style=dotted];
d216 -> d69  [key=2, style=dotted];
d216 -> d218  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d218 -> d219  [key=0, style=solid];
d218 -> d35  [key=2, style=dotted];
d218 -> d11  [key=2, style=dotted];
d221 -> d222  [key=0, style=solid];
d225 -> d226  [key=0, style=solid];
d225 -> d220  [key=2, style=dotted];
d225 -> d69  [key=2, style=dotted];
d225 -> d227  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d227 -> d228  [key=0, style=solid];
d227 -> d35  [key=2, style=dotted];
d227 -> d11  [key=2, style=dotted];
d229 -> d230  [key=0, style=solid];
d234 -> d235  [key=0, style=solid];
d234 -> d78  [key=2, style=dotted];
d234 -> d69  [key=2, style=dotted];
d234 -> d236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d236 -> d237  [key=0, style=solid];
d236 -> d35  [key=2, style=dotted];
d236 -> d11  [key=2, style=dotted];
d238 -> d239  [key=0, style=solid];
d242 -> d243  [key=0, style=solid];
d242 -> d246  [key=2, style=dotted];
d242 -> d244  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d244 -> d245  [key=0, style=solid];
d244 -> d35  [key=2, style=dotted];
d244 -> d11  [key=2, style=dotted];
d247 -> d248  [key=0, style=solid];
d251 -> d252  [key=0, style=solid];
d251 -> d246  [key=2, style=dotted];
d251 -> d253  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d253 -> d254  [key=0, style=solid];
d253 -> d35  [key=2, style=dotted];
d253 -> d11  [key=2, style=dotted];
d255 -> d256  [key=0, style=solid];
d259 -> d260  [key=0, style=solid];
d259 -> d246  [key=2, style=dotted];
d259 -> d261  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d261 -> d262  [key=0, style=solid];
d261 -> d35  [key=2, style=dotted];
d261 -> d11  [key=2, style=dotted];
d263 -> d264  [key=0, style=solid];
d266 -> d267  [key=0, style=solid];
d266 -> d268  [key=1, style=dashed, color=darkseagreen4, label=string];
d268 -> d269  [key=0, style=solid];
d268 -> d270  [key=2, style=dotted];
d268 -> d11  [key=2, style=dotted];
d271 -> d272  [key=0, style=solid];
d275 -> d276  [key=0, style=solid];
d275 -> d220  [key=2, style=dotted];
d275 -> d277  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d277 -> d278  [key=0, style=solid];
d277 -> d35  [key=2, style=dotted];
d277 -> d11  [key=2, style=dotted];
d279 -> d280  [key=0, style=solid];
d283 -> d284  [key=0, style=solid];
d283 -> d285  [key=1, style=dashed, color=darkseagreen4, label=string];
d287 -> d288  [key=0, style=solid];
d291 -> d292  [key=0, style=solid];
d291 -> d78  [key=2, style=dotted];
d291 -> d293  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d293 -> d294  [key=0, style=solid];
d293 -> d35  [key=2, style=dotted];
d293 -> d11  [key=2, style=dotted];
d295 -> d296  [key=0, style=solid];
d299 -> d300  [key=0, style=solid];
d299 -> d301  [key=1, style=dashed, color=darkseagreen4, label="int?"];
d303 -> d304  [key=0, style=solid];
d307 -> d308  [key=0, style=solid];
d307 -> d309  [key=1, style=dashed, color=darkseagreen4, label="long?"];
d311 -> d312  [key=0, style=solid];
d314 -> d315  [key=0, style=solid];
d314 -> d317  [key=1, style=dashed, color=darkseagreen4, label=string];
d314 -> d318  [key=1, style=dashed, color=darkseagreen4, label=bool];
d316 -> d317  [key=0, style=solid];
d316 -> d318  [key=0, style=solid];
d321 -> d322  [key=0, style=solid];
d325 -> d326  [key=0, style=solid];
d325 -> d328  [key=1, style=dashed, color=darkseagreen4, label=int];
d325 -> d329  [key=1, style=dashed, color=darkseagreen4, label=bool];
d327 -> d328  [key=0, style=solid];
d327 -> d329  [key=0, style=solid];
d331 -> d332  [key=0, style=solid];
d334 -> d335  [key=0, style=solid];
d334 -> d336  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
d338 -> d339  [key=0, style=solid];
d341 -> d342  [key=0, style=solid];
d341 -> d343  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
d345 -> d346  [key=0, style=solid];
d165 -> d163  [key=0, style=bold, color=blue];
d103 -> d100  [key=0, style=bold, color=blue];
d138 -> d134  [key=0, style=bold, color=blue];
d146 -> d143  [key=0, style=bold, color=blue];
d162 -> d159  [key=0, style=bold, color=blue];
d167 -> d170  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d167 -> d168  [key=0, style=solid];
d167 -> d139  [key=2, style=dotted];
d169 -> d170  [key=0, style=solid];
d169 -> d172  [key=2, style=dotted];
d169 -> d173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d169 -> d176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d171 -> d166  [key=0, style=bold, color=blue];
d202 -> d198  [key=0, style=bold, color=blue];
d211 -> d207  [key=0, style=bold, color=blue];
d286 -> d283  [key=0, style=bold, color=blue];
d302 -> d299  [key=0, style=bold, color=blue];
d310 -> d307  [key=0, style=bold, color=blue];
d319 -> d314  [key=0, style=bold, color=blue];
d330 -> d325  [key=0, style=bold, color=blue];
d337 -> d334  [key=0, style=bold, color=blue];
d344 -> d341  [key=0, style=bold, color=blue];
d0 -> d1  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d5 -> d0  [key=0, style=bold, color=blue];
d14 -> d12  [key=0, style=bold, color=blue];
d18 -> d15  [key=0, style=bold, color=blue];
d22 -> d20  [key=0, style=bold, color=blue];
d21 -> d6  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d26 -> d23  [key=0, style=bold, color=blue];
d29 -> d27  [key=0, style=bold, color=blue];
d28 -> d29  [key=0, style=solid];
d28 -> d30  [key=2, style=dotted];
d34 -> d31  [key=0, style=bold, color=blue];
d38 -> d36  [key=0, style=bold, color=blue];
d37 -> d38  [key=0, style=solid];
d37 -> d39  [key=2, style=dotted];
d43 -> d40  [key=0, style=bold, color=blue];
d46 -> d44  [key=0, style=bold, color=blue];
d45 -> d6  [key=2, style=dotted];
d45 -> d46  [key=0, style=solid];
d50 -> d47  [key=0, style=bold, color=blue];
d53 -> d51  [key=0, style=bold, color=blue];
d52 -> d53  [key=0, style=solid];
d52 -> d54  [key=2, style=dotted];
d58 -> d55  [key=0, style=bold, color=blue];
d61 -> d59  [key=0, style=bold, color=blue];
d60 -> d61  [key=0, style=solid];
d60 -> d62  [key=2, style=dotted];
d63 -> d64  [key=0, style=solid];
d67 -> d63  [key=0, style=bold, color=blue];
d72 -> d70  [key=0, style=bold, color=blue];
d71 -> d72  [key=0, style=solid];
d71 -> d54  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d77 -> d73  [key=0, style=bold, color=blue];
d81 -> d79  [key=0, style=bold, color=blue];
d80 -> d81  [key=0, style=solid];
d80 -> d82  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d87 -> d83  [key=0, style=bold, color=blue];
d90 -> d88  [key=0, style=bold, color=blue];
d89 -> d90  [key=0, style=solid];
d89 -> d62  [key=2, style=dotted];
d91 -> d92  [key=0, style=solid];
d95 -> d91  [key=0, style=bold, color=blue];
d98 -> d96  [key=0, style=bold, color=blue];
d97 -> d98  [key=0, style=solid];
d97 -> d99  [key=2, style=dotted];
d107 -> d105  [key=0, style=bold, color=blue];
d106 -> d107  [key=0, style=solid];
d106 -> d108  [key=2, style=dotted];
d109 -> d110  [key=0, style=solid];
d113 -> d109  [key=0, style=bold, color=blue];
d117 -> d115  [key=0, style=bold, color=blue];
d116 -> d117  [key=0, style=solid];
d116 -> d108  [key=2, style=dotted];
d118 -> d119  [key=0, style=solid];
d122 -> d118  [key=0, style=bold, color=blue];
d125 -> d123  [key=0, style=bold, color=blue];
d124 -> d125  [key=0, style=solid];
d124 -> d108  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d130 -> d126  [key=0, style=bold, color=blue];
d133 -> d131  [key=0, style=bold, color=blue];
d132 -> d133  [key=0, style=solid];
d132 -> d108  [key=2, style=dotted];
d134 -> d135  [key=0, style=solid];
d142 -> d140  [key=0, style=bold, color=blue];
d141 -> d139  [key=2, style=dotted];
d141 -> d142  [key=0, style=solid];
d149 -> d147  [key=0, style=bold, color=blue];
d148 -> d149  [key=0, style=solid];
d148 -> d150  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d192 -> d188  [key=0, style=bold, color=blue];
d196 -> d194  [key=0, style=bold, color=blue];
d195 -> d196  [key=0, style=solid];
d195 -> d197  [key=2, style=dotted];
d198 -> d199  [key=0, style=solid];
d206 -> d204  [key=0, style=bold, color=blue];
d205 -> d203  [key=2, style=dotted];
d205 -> d206  [key=0, style=solid];
d207 -> d208  [key=0, style=solid];
d214 -> d212  [key=0, style=bold, color=blue];
d213 -> d203  [key=2, style=dotted];
d213 -> d214  [key=0, style=solid];
d215 -> d216  [key=0, style=solid];
d219 -> d215  [key=0, style=bold, color=blue];
d223 -> d221  [key=0, style=bold, color=blue];
d222 -> d203  [key=2, style=dotted];
d222 -> d223  [key=0, style=solid];
d224 -> d225  [key=0, style=solid];
d228 -> d224  [key=0, style=bold, color=blue];
d231 -> d229  [key=0, style=bold, color=blue];
d230 -> d231  [key=0, style=solid];
d230 -> d232  [key=2, style=dotted];
d233 -> d234  [key=0, style=solid];
d237 -> d233  [key=0, style=bold, color=blue];
d240 -> d238  [key=0, style=bold, color=blue];
d239 -> d6  [key=2, style=dotted];
d239 -> d240  [key=0, style=solid];
d241 -> d242  [key=0, style=solid];
d245 -> d241  [key=0, style=bold, color=blue];
d249 -> d247  [key=0, style=bold, color=blue];
d248 -> d6  [key=2, style=dotted];
d248 -> d249  [key=0, style=solid];
d250 -> d251  [key=0, style=solid];
d254 -> d250  [key=0, style=bold, color=blue];
d257 -> d255  [key=0, style=bold, color=blue];
d256 -> d6  [key=2, style=dotted];
d256 -> d257  [key=0, style=solid];
d258 -> d259  [key=0, style=solid];
d262 -> d258  [key=0, style=bold, color=blue];
d265 -> d263  [key=0, style=bold, color=blue];
d264 -> d6  [key=2, style=dotted];
d264 -> d265  [key=0, style=solid];
d269 -> d266  [key=0, style=bold, color=blue];
d273 -> d271  [key=0, style=bold, color=blue];
d272 -> d6  [key=2, style=dotted];
d272 -> d273  [key=0, style=solid];
d274 -> d275  [key=0, style=solid];
d278 -> d274  [key=0, style=bold, color=blue];
d281 -> d279  [key=0, style=bold, color=blue];
d280 -> d281  [key=0, style=solid];
d280 -> d282  [key=2, style=dotted];
d289 -> d287  [key=0, style=bold, color=blue];
d288 -> d6  [key=2, style=dotted];
d288 -> d289  [key=0, style=solid];
d290 -> d291  [key=0, style=solid];
d294 -> d290  [key=0, style=bold, color=blue];
d297 -> d295  [key=0, style=bold, color=blue];
d296 -> d297  [key=0, style=solid];
d296 -> d298  [key=2, style=dotted];
d305 -> d303  [key=0, style=bold, color=blue];
d304 -> d305  [key=0, style=solid];
d304 -> d306  [key=2, style=dotted];
d313 -> d311  [key=0, style=bold, color=blue];
d312 -> d313  [key=0, style=solid];
d312 -> d306  [key=2, style=dotted];
d323 -> d321  [key=0, style=bold, color=blue];
d322 -> d323  [key=0, style=solid];
d322 -> d324  [key=2, style=dotted];
d333 -> d331  [key=0, style=bold, color=blue];
d332 -> d333  [key=0, style=solid];
d332 -> d324  [key=2, style=dotted];
d340 -> d338  [key=0, style=bold, color=blue];
d339 -> d340  [key=0, style=solid];
d339 -> d282  [key=2, style=dotted];
d347 -> d345  [key=0, style=bold, color=blue];
d346 -> d347  [key=0, style=solid];
d346 -> d348  [key=2, style=dotted];
d166 -> d167  [key=0, style=solid];
d168 -> d169  [key=0, style=solid];
d173 -> d174  [key=0, style=solid];
d176 -> d177  [key=0, style=solid];
d176 -> d181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d176 -> d185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d349 -> d13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d174 -> d139  [key=2, style=dotted];
d174 -> d175  [key=0, style=solid];
d175 -> d173  [key=0, style=bold, color=blue];
d178 -> d176  [key=0, style=bold, color=blue];
d177 -> d178  [key=0, style=solid];
d177 -> d179  [key=2, style=dotted];
d177 -> d180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d181 -> d182  [key=0, style=solid];
d181 -> d183  [key=2, style=dotted];
d181 -> d184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d185 -> d186  [key=0, style=solid];
d185 -> d187  [key=2, style=dotted];
d180 -> d181  [key=0, style=solid];
d350 -> d181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d350 -> d185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d182 -> d180  [key=0, style=bold, color=blue];
d184 -> d185  [key=0, style=solid];
d186 -> d184  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_1 -> m0_7  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_1 -> m0_3  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> d11  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_6 -> m0_0  [key=0, style=bold, color=blue];
m0_198 -> m0_199  [key=0, style=solid];
m0_206 -> m0_207  [key=0, style=solid, color=green];
m0_206 -> m0_47  [key=2, style=dotted, color=green];
m0_204 -> m0_206  [key=1, style=dashed, color=green, label=lines];
m0_204 -> m0_205  [key=0, style=solid];
m0_204 -> m0_189  [key=2, style=dotted];
m0_204 -> m0_190  [key=2, style=dotted];
m0_204 -> m0_207  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_204 -> m0_208  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_204 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_204 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_204 -> m0_211  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_204 -> m0_212  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_204 -> m0_213  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_205 -> m0_206  [key=0, style=solid, color=green];
m0_205 -> m0_23  [key=2, style=dotted];
m0_205 -> m0_191  [key=2, style=dotted];
m0_207 -> m0_208  [key=0, style=solid];
m0_207 -> m0_47  [key=2, style=dotted];
m0_202 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_10  [key=2, style=dotted];
m0_203 -> m0_204  [key=0, style=solid];
m0_203 -> m0_23  [key=2, style=dotted];
m0_203 -> m0_161  [key=2, style=dotted];
m0_208 -> m0_47  [key=2, style=dotted];
m0_208 -> m0_209  [key=0, style=solid];
m0_209 -> m0_47  [key=2, style=dotted];
m0_209 -> m0_210  [key=0, style=solid];
m0_210 -> m0_47  [key=2, style=dotted];
m0_210 -> m0_211  [key=0, style=solid];
m0_211 -> m0_47  [key=2, style=dotted];
m0_211 -> m0_212  [key=0, style=solid];
m0_212 -> m0_47  [key=2, style=dotted];
m0_212 -> m0_213  [key=0, style=solid];
m0_213 -> m0_47  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_199 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_7  [key=2, style=dotted];
m0_199 -> m0_216  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_35  [key=2, style=dotted];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_8  [key=2, style=dotted];
m0_200 -> m0_216  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_214 -> m0_198  [key=0, style=bold, color=blue];
m0_281 -> m0_282  [key=0, style=solid];
m0_288 -> m0_289  [key=0, style=solid, color=green];
m0_288 -> m0_47  [key=2, style=dotted, color=green];
m0_286 -> m0_288  [key=1, style=dashed, color=green, label=lines];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_189  [key=2, style=dotted];
m0_286 -> m0_190  [key=2, style=dotted];
m0_286 -> m0_289  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_290  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_291  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_292  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_293  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_294  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_295  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_296  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_297  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_298  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_299  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_300  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_302  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_286 -> m0_303  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_287 -> m0_288  [key=0, style=solid, color=green];
m0_287 -> m0_23  [key=2, style=dotted];
m0_287 -> m0_191  [key=2, style=dotted];
m0_289 -> m0_47  [key=2, style=dotted];
m0_289 -> m0_290  [key=0, style=solid];
m0_290 -> m0_47  [key=2, style=dotted];
m0_290 -> m0_291  [key=0, style=solid];
m0_291 -> m0_47  [key=2, style=dotted];
m0_291 -> m0_292  [key=0, style=solid];
m0_292 -> m0_47  [key=2, style=dotted];
m0_292 -> m0_293  [key=0, style=solid];
m0_293 -> m0_47  [key=2, style=dotted];
m0_293 -> m0_294  [key=0, style=solid];
m0_294 -> m0_47  [key=2, style=dotted];
m0_294 -> m0_295  [key=0, style=solid];
m0_295 -> m0_47  [key=2, style=dotted];
m0_295 -> m0_296  [key=0, style=solid];
m0_296 -> m0_47  [key=2, style=dotted];
m0_296 -> m0_297  [key=0, style=solid];
m0_297 -> m0_47  [key=2, style=dotted];
m0_297 -> m0_298  [key=0, style=solid];
m0_298 -> m0_47  [key=2, style=dotted];
m0_298 -> m0_299  [key=0, style=solid];
m0_299 -> m0_47  [key=2, style=dotted];
m0_299 -> m0_300  [key=0, style=solid];
m0_300 -> m0_47  [key=2, style=dotted];
m0_300 -> m0_301  [key=0, style=solid];
m0_301 -> m0_47  [key=2, style=dotted];
m0_301 -> m0_302  [key=0, style=solid];
m0_302 -> m0_47  [key=2, style=dotted];
m0_302 -> m0_303  [key=0, style=solid];
m0_303 -> m0_47  [key=2, style=dotted];
m0_303 -> m0_304  [key=0, style=solid];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_10  [key=2, style=dotted];
m0_282 -> m0_285  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_282 -> m0_283  [key=0, style=solid];
m0_282 -> m0_7  [key=2, style=dotted];
m0_282 -> m0_306  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_35  [key=2, style=dotted];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_8  [key=2, style=dotted];
m0_283 -> m0_306  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_304 -> m0_281  [key=0, style=bold, color=blue];
m0_86 -> m0_87  [key=0, style=solid];
m0_91 -> m0_47  [key=2, style=dotted];
m0_91 -> m0_92  [key=0, style=solid];
m0_88 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_54  [key=2, style=dotted];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_9  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label=args];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_46  [key=2, style=dotted];
m0_92 -> m0_86  [key=0, style=bold, color=blue];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_107  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_109 -> m0_47  [key=2, style=dotted];
m0_109 -> m0_110  [key=0, style=solid];
m0_109 -> m0_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_105 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_111  [key=2, style=dotted];
m0_107 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_22  [key=2, style=dotted];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_60  [key=2, style=dotted];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_46  [key=2, style=dotted];
m0_110 -> m0_104  [key=0, style=bold, color=blue];
m0_137 -> m0_138  [key=0, style=solid];
m0_142 -> m0_23  [key=2, style=dotted];
m0_142 -> m0_143  [key=0, style=solid];
m0_142 -> m0_146  [key=2, style=dotted];
m0_142 -> m0_150  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_141 -> m0_23  [key=2, style=dotted];
m0_141 -> m0_142  [key=0, style=solid];
m0_141 -> m0_145  [key=2, style=dotted];
m0_141 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_138 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_144  [key=2, style=dotted];
m0_138 -> m0_151  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m0_140 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_9  [key=2, style=dotted];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_46  [key=2, style=dotted];
m0_143 -> m0_137  [key=0, style=bold, color=blue];
m0_406 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Commit_Verb"];
m0_406 -> m0_407  [key=0, style=solid];
m0_406 -> m0_408  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_406 -> m0_410  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Commit_Verb"];
m0_409 -> m0_47  [key=2, style=dotted];
m0_409 -> m0_410  [key=0, style=solid];
m0_408 -> m0_409  [key=0, style=solid];
m0_408 -> m0_35  [key=2, style=dotted];
m0_408 -> m0_410  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_410 -> m0_415  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_399  [key=2, style=dotted];
m0_407 -> m0_408  [key=0, style=solid];
m0_407 -> m0_8  [key=2, style=dotted];
m0_407 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_411 -> m0_406  [key=0, style=bold, color=blue];
m0_341 -> m0_342  [key=0, style=solid];
m0_349 -> m0_47  [key=2, style=dotted];
m0_349 -> m0_350  [key=0, style=solid];
m0_349 -> m0_356  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_346 -> m0_47  [key=2, style=dotted];
m0_346 -> m0_347  [key=0, style=solid];
m0_347 -> m0_23  [key=2, style=dotted];
m0_347 -> m0_348  [key=0, style=solid];
m0_347 -> m0_352  [key=2, style=dotted];
m0_347 -> m0_60  [key=2, style=dotted];
m0_348 -> m0_23  [key=2, style=dotted];
m0_348 -> m0_349  [key=0, style=solid];
m0_348 -> m0_60  [key=2, style=dotted];
m0_342 -> m0_349  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_342 -> m0_343  [key=0, style=solid];
m0_342 -> m0_351  [key=2, style=dotted];
m0_345 -> m0_349  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_345 -> m0_346  [key=0, style=solid];
m0_345 -> m0_347  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_345 -> m0_348  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_345 -> m0_322  [key=2, style=dotted];
m0_343 -> m0_7  [key=2, style=dotted];
m0_343 -> m0_344  [key=0, style=solid];
m0_343 -> m0_354  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_8  [key=2, style=dotted];
m0_344 -> m0_354  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_350 -> m0_341  [key=0, style=bold, color=blue];
m0_154 -> m0_155  [key=0, style=solid];
m0_159 -> m0_23  [key=2, style=dotted];
m0_159 -> m0_161  [key=2, style=dotted];
m0_159 -> m0_160  [key=0, style=solid];
m0_158 -> m0_10  [key=2, style=dotted];
m0_158 -> m0_159  [key=0, style=solid];
m0_155 -> m0_7  [key=2, style=dotted];
m0_155 -> m0_158  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_9  [key=2, style=dotted];
m0_156 -> m0_8  [key=2, style=dotted];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_160 -> m0_154  [key=0, style=bold, color=blue];
m0_61 -> m0_62  [key=0, style=solid];
m0_65 -> m0_47  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_62 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_67  [key=2, style=dotted];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_9  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_8  [key=2, style=dotted];
m0_63 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_66 -> m0_61  [key=0, style=bold, color=blue];
m0_271 -> m0_272  [key=0, style=solid];
m0_276 -> m0_23  [key=2, style=dotted];
m0_276 -> m0_161  [key=2, style=dotted];
m0_276 -> m0_277  [key=0, style=solid];
m0_275 -> m0_10  [key=2, style=dotted];
m0_275 -> m0_276  [key=0, style=solid];
m0_272 -> m0_7  [key=2, style=dotted];
m0_272 -> m0_275  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_272 -> m0_273  [key=0, style=solid];
m0_272 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_274 -> m0_35  [key=2, style=dotted];
m0_274 -> m0_275  [key=0, style=solid];
m0_273 -> m0_8  [key=2, style=dotted];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_277 -> m0_271  [key=0, style=bold, color=blue];
m0_478 -> m0_479  [key=0, style=solid];
m0_480 -> m0_9  [key=2, style=dotted];
m0_480 -> m0_399  [key=2, style=dotted];
m0_480 -> m0_481  [key=0, style=solid];
m0_480 -> m0_482  [key=2, style=dotted];
m0_480 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_479 -> m0_46  [key=2, style=dotted];
m0_479 -> m0_480  [key=0, style=solid];
m0_481 -> m0_478  [key=0, style=bold, color=blue];
m0_393 -> m0_404  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Simple_Options"];
m0_393 -> m0_394  [key=0, style=solid];
m0_393 -> m0_395  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_393 -> m0_397  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Simple_Options"];
m0_396 -> m0_47  [key=2, style=dotted];
m0_396 -> m0_397  [key=0, style=solid];
m0_395 -> m0_396  [key=0, style=solid];
m0_395 -> m0_9  [key=2, style=dotted];
m0_395 -> m0_397  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_397 -> m0_403  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_397 -> m0_398  [key=0, style=solid];
m0_397 -> m0_399  [key=2, style=dotted];
m0_394 -> m0_395  [key=0, style=solid];
m0_394 -> m0_8  [key=2, style=dotted];
m0_394 -> m0_401  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_398 -> m0_393  [key=0, style=bold, color=blue];
m0_115 -> m0_116  [key=0, style=solid];
m0_118 -> m0_60  [key=2, style=dotted];
m0_118 -> m0_119  [key=0, style=solid];
m0_117 -> m0_22  [key=2, style=dotted];
m0_117 -> m0_118  [key=0, style=solid];
m0_116 -> m0_117  [key=0, style=solid];
m0_119 -> m0_115  [key=0, style=bold, color=blue];
m0_120 -> m0_121  [key=0, style=solid];
m0_125 -> m0_47  [key=2, style=dotted];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_121 -> m0_125  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_100  [key=2, style=dotted];
m0_123 -> m0_125  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_35  [key=2, style=dotted];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_60  [key=2, style=dotted];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_46  [key=2, style=dotted];
m0_126 -> m0_120  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_76 -> m0_47  [key=2, style=dotted];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_72 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_78  [key=2, style=dotted];
m0_74 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_22  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_60  [key=2, style=dotted];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_8  [key=2, style=dotted];
m0_73 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_77 -> m0_71  [key=0, style=bold, color=blue];
m0_55 -> m0_56  [key=0, style=solid];
m0_58 -> m0_60  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_57 -> m0_9  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_56 -> m0_57  [key=0, style=solid];
m0_59 -> m0_55  [key=0, style=bold, color=blue];
m0_165 -> m0_166  [key=0, style=solid];
m0_170 -> m0_23  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_146  [key=2, style=dotted];
m0_170 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_169 -> m0_23  [key=2, style=dotted];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_145  [key=2, style=dotted];
m0_169 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_166 -> m0_170  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_172  [key=2, style=dotted];
m0_166 -> m0_177  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m0_168 -> m0_170  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_9  [key=2, style=dotted];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_46  [key=2, style=dotted];
m0_171 -> m0_165  [key=0, style=bold, color=blue];
m0_438 -> m0_439  [key=0, style=solid];
m0_442 -> m0_47  [key=2, style=dotted];
m0_442 -> m0_443  [key=0, style=solid];
m0_439 -> m0_442  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_439 -> m0_440  [key=0, style=solid];
m0_439 -> m0_444  [key=2, style=dotted];
m0_439 -> m0_445  [key=2, style=dotted];
m0_441 -> m0_442  [key=0, style=solid];
m0_441 -> m0_9  [key=2, style=dotted];
m0_440 -> m0_441  [key=0, style=solid];
m0_440 -> m0_46  [key=2, style=dotted];
m0_443 -> m0_438  [key=0, style=bold, color=blue];
m0_463 -> m0_464  [key=0, style=solid];
m0_467 -> m0_23  [key=2, style=dotted];
m0_467 -> m0_468  [key=0, style=solid];
m0_467 -> m0_452  [key=2, style=dotted];
m0_467 -> m0_453  [key=2, style=dotted];
m0_467 -> m0_472  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_467 -> m0_475  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_466 -> m0_467  [key=0, style=solid];
m0_466 -> m0_9  [key=2, style=dotted];
m0_464 -> m0_466  [key=1, style=dashed, color=darkseagreen4, label=sameValues];
m0_464 -> m0_465  [key=0, style=solid];
m0_465 -> m0_466  [key=0, style=solid];
m0_465 -> m0_8  [key=2, style=dotted];
m0_465 -> m0_470  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_468 -> m0_463  [key=0, style=bold, color=blue];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_52 -> m0_47  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_49 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_54  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_9  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_46  [key=2, style=dotted];
m0_53 -> m0_48  [key=0, style=bold, color=blue];
m0_512 -> m0_513  [key=0, style=solid];
m0_514 -> m0_9  [key=2, style=dotted];
m0_514 -> m0_399  [key=2, style=dotted];
m0_514 -> m0_515  [key=0, style=solid];
m0_514 -> m0_491  [key=2, style=dotted];
m0_514 -> m0_516  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_514 -> m0_519  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_513 -> m0_514  [key=0, style=solid];
m0_515 -> m0_512  [key=0, style=bold, color=blue];
m0_218 -> m0_219  [key=0, style=solid];
m0_225 -> m0_226  [key=0, style=solid, color=green];
m0_225 -> m0_47  [key=2, style=dotted, color=green];
m0_223 -> m0_225  [key=1, style=dashed, color=green, label=lines];
m0_223 -> m0_224  [key=0, style=solid];
m0_223 -> m0_189  [key=2, style=dotted];
m0_223 -> m0_190  [key=2, style=dotted];
m0_223 -> m0_226  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_223 -> m0_227  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_223 -> m0_228  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_223 -> m0_229  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_223 -> m0_230  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_224 -> m0_225  [key=0, style=solid, color=green];
m0_224 -> m0_23  [key=2, style=dotted];
m0_224 -> m0_191  [key=2, style=dotted];
m0_226 -> m0_47  [key=2, style=dotted];
m0_226 -> m0_227  [key=0, style=solid];
m0_227 -> m0_47  [key=2, style=dotted];
m0_227 -> m0_228  [key=0, style=solid];
m0_228 -> m0_47  [key=2, style=dotted];
m0_228 -> m0_229  [key=0, style=solid];
m0_229 -> m0_47  [key=2, style=dotted];
m0_229 -> m0_230  [key=0, style=solid];
m0_230 -> m0_47  [key=2, style=dotted];
m0_230 -> m0_231  [key=0, style=solid];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_10  [key=2, style=dotted];
m0_219 -> m0_222  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_7  [key=2, style=dotted];
m0_219 -> m0_233  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_35  [key=2, style=dotted];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_8  [key=2, style=dotted];
m0_220 -> m0_233  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_231 -> m0_218  [key=0, style=bold, color=blue];
m0_469 -> m0_470  [key=0, style=solid];
m0_404 -> m0_47  [key=2, style=dotted];
m0_404 -> m0_405  [key=0, style=solid];
m0_416 -> m0_47  [key=2, style=dotted];
m0_416 -> m0_417  [key=0, style=solid];
m0_82 -> m0_83  [key=0, style=solid];
m0_101 -> m0_102  [key=0, style=solid];
m0_112 -> m0_113  [key=0, style=solid];
m0_127 -> m0_128  [key=0, style=solid];
m0_356 -> m0_357  [key=0, style=solid];
m0_372 -> m0_373  [key=0, style=solid];
m0_403 -> m0_404  [key=0, style=solid];
m0_405 -> m0_403  [key=0, style=bold, color=blue];
m0_415 -> m0_416  [key=0, style=solid];
m0_417 -> m0_415  [key=0, style=bold, color=blue];
m0_216 -> m0_217  [key=0, style=solid];
m0_150 -> m0_151  [key=0, style=solid];
m0_147 -> m0_148  [key=0, style=solid];
m0_176 -> m0_177  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_195 -> m0_196  [key=0, style=solid];
m0_248 -> m0_249  [key=0, style=solid];
m0_457 -> m0_458  [key=0, style=solid];
m0_460 -> m0_461  [key=0, style=solid];
m0_472 -> m0_473  [key=0, style=solid];
m0_475 -> m0_476  [key=0, style=solid];
m0_84 -> m0_82  [key=0, style=bold, color=blue];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_85  [key=2, style=dotted];
m0_103 -> m0_101  [key=0, style=bold, color=blue];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_85  [key=2, style=dotted];
m0_114 -> m0_112  [key=0, style=bold, color=blue];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_85  [key=2, style=dotted];
m0_129 -> m0_127  [key=0, style=bold, color=blue];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_85  [key=2, style=dotted];
m0_358 -> m0_356  [key=0, style=bold, color=blue];
m0_357 -> m0_358  [key=0, style=solid];
m0_357 -> m0_85  [key=2, style=dotted];
m0_374 -> m0_372  [key=0, style=bold, color=blue];
m0_373 -> m0_374  [key=0, style=solid];
m0_373 -> m0_85  [key=2, style=dotted];
m0_233 -> m0_234  [key=0, style=solid];
m0_269 -> m0_270  [key=0, style=solid];
m0_306 -> m0_307  [key=0, style=solid];
m0_324 -> m0_325  [key=0, style=solid];
m0_339 -> m0_340  [key=0, style=solid];
m0_391 -> m0_392  [key=0, style=solid];
m0_436 -> m0_437  [key=0, style=solid];
m0_215 -> m0_216  [key=0, style=solid];
m0_217 -> m0_215  [key=0, style=bold, color=blue];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_153  [key=2, style=dotted];
m0_152 -> m0_150  [key=0, style=bold, color=blue];
m0_149 -> m0_147  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_153  [key=2, style=dotted];
m0_178 -> m0_176  [key=0, style=bold, color=blue];
m0_175 -> m0_173  [key=0, style=bold, color=blue];
m0_174 -> m0_175  [key=0, style=solid];
m0_197 -> m0_195  [key=0, style=bold, color=blue];
m0_196 -> m0_197  [key=0, style=solid];
m0_250 -> m0_248  [key=0, style=bold, color=blue];
m0_249 -> m0_250  [key=0, style=solid];
m0_459 -> m0_457  [key=0, style=bold, color=blue];
m0_458 -> m0_459  [key=0, style=solid];
m0_462 -> m0_460  [key=0, style=bold, color=blue];
m0_461 -> m0_462  [key=0, style=solid];
m0_474 -> m0_472  [key=0, style=bold, color=blue];
m0_473 -> m0_474  [key=0, style=solid];
m0_477 -> m0_475  [key=0, style=bold, color=blue];
m0_476 -> m0_477  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_354 -> m0_355  [key=0, style=solid];
m0_370 -> m0_371  [key=0, style=solid];
m0_401 -> m0_402  [key=0, style=solid];
m0_413 -> m0_414  [key=0, style=solid];
m0_232 -> m0_233  [key=0, style=solid];
m0_234 -> m0_232  [key=0, style=bold, color=blue];
m0_268 -> m0_269  [key=0, style=solid];
m0_270 -> m0_268  [key=0, style=bold, color=blue];
m0_305 -> m0_306  [key=0, style=solid];
m0_307 -> m0_305  [key=0, style=bold, color=blue];
m0_323 -> m0_324  [key=0, style=solid];
m0_325 -> m0_323  [key=0, style=bold, color=blue];
m0_338 -> m0_339  [key=0, style=solid];
m0_340 -> m0_338  [key=0, style=bold, color=blue];
m0_390 -> m0_391  [key=0, style=solid];
m0_392 -> m0_390  [key=0, style=bold, color=blue];
m0_435 -> m0_436  [key=0, style=solid];
m0_437 -> m0_435  [key=0, style=bold, color=blue];
m0_13 -> m0_14  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_163 -> m0_164  [key=0, style=solid];
m0_193 -> m0_194  [key=0, style=solid];
m0_246 -> m0_247  [key=0, style=solid];
m0_279 -> m0_280  [key=0, style=solid];
m0_505 -> m0_506  [key=0, style=solid];
m0_508 -> m0_509  [key=0, style=solid];
m0_508 -> m0_510  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Verb_With_Option_And_Value_Of_String_Type"];
m0_455 -> m0_456  [key=0, style=solid];
m0_470 -> m0_471  [key=0, style=solid];
m0_483 -> m0_484  [key=0, style=solid];
m0_492 -> m0_493  [key=0, style=solid];
m0_496 -> m0_497  [key=0, style=solid];
m0_496 -> m0_498  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Option_And_Value_Of_String_Type"];
m0_516 -> m0_517  [key=0, style=solid];
m0_519 -> m0_520  [key=0, style=solid];
m0_519 -> m0_521  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Shuffled_Index_Values"];
m0_519 -> m0_522  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Shuffled_Index_Values"];
m0_68 -> m0_69  [key=0, style=solid];
m0_70 -> m0_68  [key=0, style=bold, color=blue];
m0_79 -> m0_80  [key=0, style=solid];
m0_81 -> m0_79  [key=0, style=bold, color=blue];
m0_353 -> m0_354  [key=0, style=solid];
m0_355 -> m0_353  [key=0, style=bold, color=blue];
m0_369 -> m0_370  [key=0, style=solid];
m0_371 -> m0_369  [key=0, style=bold, color=blue];
m0_400 -> m0_401  [key=0, style=solid];
m0_402 -> m0_400  [key=0, style=bold, color=blue];
m0_412 -> m0_413  [key=0, style=solid];
m0_414 -> m0_412  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_25 -> m0_26  [key=0, style=solid];
m0_27 -> m0_25  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid];
m0_38 -> m0_36  [key=0, style=bold, color=blue];
m0_162 -> m0_163  [key=0, style=solid];
m0_164 -> m0_162  [key=0, style=bold, color=blue];
m0_192 -> m0_193  [key=0, style=solid];
m0_194 -> m0_192  [key=0, style=bold, color=blue];
m0_245 -> m0_246  [key=0, style=solid];
m0_247 -> m0_245  [key=0, style=bold, color=blue];
m0_278 -> m0_279  [key=0, style=solid];
m0_280 -> m0_278  [key=0, style=bold, color=blue];
m0_507 -> m0_505  [key=0, style=bold, color=blue];
m0_506 -> m0_507  [key=0, style=solid];
m0_506 -> m0_495  [key=2, style=dotted];
m0_511 -> m0_508  [key=0, style=bold, color=blue];
m0_509 -> m0_510  [key=0, style=solid];
m0_509 -> m0_486  [key=2, style=dotted];
m0_510 -> m0_511  [key=0, style=solid];
m0_510 -> m0_486  [key=2, style=dotted];
m0_454 -> m0_455  [key=0, style=solid];
m0_456 -> m0_454  [key=0, style=bold, color=blue];
m0_471 -> m0_469  [key=0, style=bold, color=blue];
m0_485 -> m0_483  [key=0, style=bold, color=blue];
m0_484 -> m0_485  [key=0, style=solid];
m0_484 -> m0_486  [key=2, style=dotted];
m0_494 -> m0_492  [key=0, style=bold, color=blue];
m0_493 -> m0_494  [key=0, style=solid];
m0_493 -> m0_495  [key=2, style=dotted];
m0_499 -> m0_496  [key=0, style=bold, color=blue];
m0_497 -> m0_498  [key=0, style=solid];
m0_497 -> m0_486  [key=2, style=dotted];
m0_498 -> m0_499  [key=0, style=solid];
m0_498 -> m0_486  [key=2, style=dotted];
m0_518 -> m0_516  [key=0, style=bold, color=blue];
m0_517 -> m0_518  [key=0, style=solid];
m0_517 -> m0_495  [key=2, style=dotted];
m0_520 -> m0_521  [key=0, style=solid];
m0_520 -> m0_486  [key=2, style=dotted];
m0_521 -> m0_522  [key=0, style=solid];
m0_521 -> m0_486  [key=2, style=dotted];
m0_522 -> m0_523  [key=0, style=solid];
m0_522 -> m0_486  [key=2, style=dotted];
m0_523 -> m0_519  [key=0, style=bold, color=blue];
m0_251 -> m0_252  [key=0, style=solid];
m0_258 -> m0_259  [key=0, style=solid, color=green];
m0_258 -> m0_47  [key=2, style=dotted, color=green];
m0_256 -> m0_258  [key=1, style=dashed, color=green, label=lines];
m0_256 -> m0_257  [key=0, style=solid];
m0_256 -> m0_189  [key=2, style=dotted];
m0_256 -> m0_190  [key=2, style=dotted];
m0_256 -> m0_259  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_256 -> m0_260  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_256 -> m0_261  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_256 -> m0_262  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_256 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_256 -> m0_264  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_256 -> m0_265  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_256 -> m0_266  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_257 -> m0_258  [key=0, style=solid, color=green];
m0_257 -> m0_23  [key=2, style=dotted];
m0_257 -> m0_191  [key=2, style=dotted];
m0_259 -> m0_47  [key=2, style=dotted];
m0_259 -> m0_260  [key=0, style=solid];
m0_260 -> m0_47  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_261 -> m0_47  [key=2, style=dotted];
m0_261 -> m0_262  [key=0, style=solid];
m0_262 -> m0_47  [key=2, style=dotted];
m0_262 -> m0_263  [key=0, style=solid];
m0_263 -> m0_47  [key=2, style=dotted];
m0_263 -> m0_264  [key=0, style=solid];
m0_264 -> m0_47  [key=2, style=dotted];
m0_264 -> m0_265  [key=0, style=solid];
m0_265 -> m0_47  [key=2, style=dotted];
m0_265 -> m0_266  [key=0, style=solid];
m0_266 -> m0_47  [key=2, style=dotted];
m0_266 -> m0_267  [key=0, style=solid];
m0_255 -> m0_256  [key=0, style=solid];
m0_255 -> m0_10  [key=2, style=dotted];
m0_252 -> m0_255  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_7  [key=2, style=dotted];
m0_252 -> m0_269  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_9  [key=2, style=dotted];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_8  [key=2, style=dotted];
m0_253 -> m0_269  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_267 -> m0_251  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid];
m0_33 -> m0_23  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_24  [key=2, style=dotted];
m0_32 -> m0_10  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_29 -> m0_7  [key=2, style=dotted];
m0_29 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_31 -> m0_35  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_30 -> m0_8  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_34 -> m0_28  [key=0, style=bold, color=blue];
m0_487 -> m0_488  [key=0, style=solid];
m0_489 -> m0_9  [key=2, style=dotted];
m0_489 -> m0_399  [key=2, style=dotted];
m0_489 -> m0_490  [key=0, style=solid];
m0_489 -> m0_491  [key=2, style=dotted];
m0_489 -> m0_492  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_489 -> m0_496  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_488 -> m0_489  [key=0, style=solid];
m0_490 -> m0_487  [key=0, style=bold, color=blue];
m0_500 -> m0_501  [key=0, style=solid];
m0_503 -> m0_60  [key=2, style=dotted];
m0_503 -> m0_504  [key=0, style=solid];
m0_503 -> m0_491  [key=2, style=dotted];
m0_503 -> m0_505  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_503 -> m0_508  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_502 -> m0_22  [key=2, style=dotted];
m0_502 -> m0_503  [key=0, style=solid];
m0_501 -> m0_502  [key=0, style=solid];
m0_504 -> m0_500  [key=0, style=bold, color=blue];
m0_308 -> m0_309  [key=0, style=solid];
m0_315 -> m0_316  [key=0, style=solid, color=green];
m0_315 -> m0_47  [key=2, style=dotted, color=green];
m0_313 -> m0_315  [key=1, style=dashed, color=green, label=lines];
m0_313 -> m0_314  [key=0, style=solid];
m0_313 -> m0_189  [key=2, style=dotted];
m0_313 -> m0_190  [key=2, style=dotted];
m0_313 -> m0_316  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_313 -> m0_317  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_313 -> m0_318  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_313 -> m0_319  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_313 -> m0_320  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_314 -> m0_315  [key=0, style=solid, color=green];
m0_314 -> m0_23  [key=2, style=dotted];
m0_314 -> m0_191  [key=2, style=dotted];
m0_316 -> m0_47  [key=2, style=dotted];
m0_316 -> m0_317  [key=0, style=solid];
m0_317 -> m0_47  [key=2, style=dotted];
m0_317 -> m0_318  [key=0, style=solid];
m0_318 -> m0_47  [key=2, style=dotted];
m0_318 -> m0_319  [key=0, style=solid];
m0_319 -> m0_47  [key=2, style=dotted];
m0_319 -> m0_320  [key=0, style=solid];
m0_320 -> m0_47  [key=2, style=dotted];
m0_320 -> m0_321  [key=0, style=solid];
m0_312 -> m0_313  [key=0, style=solid];
m0_312 -> m0_10  [key=2, style=dotted];
m0_309 -> m0_312  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_7  [key=2, style=dotted];
m0_309 -> m0_324  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_311 -> m0_312  [key=0, style=solid];
m0_311 -> m0_322  [key=2, style=dotted];
m0_310 -> m0_311  [key=0, style=solid];
m0_310 -> m0_8  [key=2, style=dotted];
m0_310 -> m0_324  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_321 -> m0_308  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_43 -> m0_47  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_40 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_45  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_9  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_46  [key=2, style=dotted];
m0_44 -> m0_39  [key=0, style=bold, color=blue];
m0_179 -> m0_180  [key=0, style=solid];
m0_185 -> m0_189  [key=2, style=dotted];
m0_185 -> m0_190  [key=2, style=dotted];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_187  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_184 -> m0_23  [key=2, style=dotted];
m0_184 -> m0_161  [key=2, style=dotted];
m0_184 -> m0_185  [key=0, style=solid];
m0_186 -> m0_23  [key=2, style=dotted];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_145  [key=2, style=dotted];
m0_186 -> m0_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_187 -> m0_23  [key=2, style=dotted];
m0_187 -> m0_191  [key=2, style=dotted];
m0_187 -> m0_188  [key=0, style=solid];
m0_183 -> m0_10  [key=2, style=dotted];
m0_183 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_183 -> m0_184  [key=0, style=solid];
m0_180 -> m0_7  [key=2, style=dotted];
m0_180 -> m0_183  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_193  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_9  [key=2, style=dotted];
m0_181 -> m0_8  [key=2, style=dotted];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_193  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_188 -> m0_179  [key=0, style=bold, color=blue];
m0_418 -> m0_419  [key=0, style=solid];
m0_425 -> m0_426  [key=0, style=solid, color=green];
m0_425 -> m0_47  [key=2, style=dotted, color=green];
m0_423 -> m0_425  [key=1, style=dashed, color=green, label=lines];
m0_423 -> m0_424  [key=0, style=solid];
m0_423 -> m0_189  [key=2, style=dotted];
m0_423 -> m0_190  [key=2, style=dotted];
m0_423 -> m0_426  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_423 -> m0_427  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_423 -> m0_428  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_423 -> m0_429  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_423 -> m0_430  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_423 -> m0_431  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_423 -> m0_432  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_423 -> m0_433  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_424 -> m0_425  [key=0, style=solid, color=green];
m0_424 -> m0_23  [key=2, style=dotted];
m0_424 -> m0_191  [key=2, style=dotted];
m0_426 -> m0_47  [key=2, style=dotted];
m0_426 -> m0_427  [key=0, style=solid];
m0_427 -> m0_47  [key=2, style=dotted];
m0_427 -> m0_428  [key=0, style=solid];
m0_428 -> m0_47  [key=2, style=dotted];
m0_428 -> m0_429  [key=0, style=solid];
m0_429 -> m0_47  [key=2, style=dotted];
m0_429 -> m0_430  [key=0, style=solid];
m0_430 -> m0_47  [key=2, style=dotted];
m0_430 -> m0_431  [key=0, style=solid];
m0_431 -> m0_47  [key=2, style=dotted];
m0_431 -> m0_432  [key=0, style=solid];
m0_432 -> m0_47  [key=2, style=dotted];
m0_432 -> m0_433  [key=0, style=solid];
m0_433 -> m0_47  [key=2, style=dotted];
m0_433 -> m0_434  [key=0, style=solid];
m0_422 -> m0_423  [key=0, style=solid];
m0_422 -> m0_10  [key=2, style=dotted];
m0_419 -> m0_422  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_419 -> m0_420  [key=0, style=solid];
m0_419 -> m0_7  [key=2, style=dotted];
m0_419 -> m0_436  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_421 -> m0_422  [key=0, style=solid];
m0_421 -> m0_35  [key=2, style=dotted];
m0_420 -> m0_421  [key=0, style=solid];
m0_420 -> m0_8  [key=2, style=dotted];
m0_420 -> m0_436  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_434 -> m0_418  [key=0, style=bold, color=blue];
m0_130 -> m0_131  [key=0, style=solid];
m0_134 -> m0_47  [key=2, style=dotted];
m0_134 -> m0_135  [key=0, style=solid];
m0_131 -> m0_134  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_136  [key=2, style=dotted];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_9  [key=2, style=dotted];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_46  [key=2, style=dotted];
m0_135 -> m0_130  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_20 -> m0_23  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_24  [key=2, style=dotted];
m0_19 -> m0_10  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_16 -> m0_7  [key=2, style=dotted];
m0_16 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_22  [key=2, style=dotted];
m0_17 -> m0_8  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_21 -> m0_15  [key=0, style=bold, color=blue];
m0_375 -> m0_376  [key=0, style=solid];
m0_382 -> m0_383  [key=0, style=solid, color=green];
m0_382 -> m0_47  [key=2, style=dotted, color=green];
m0_380 -> m0_382  [key=1, style=dashed, color=green, label=lines];
m0_380 -> m0_381  [key=0, style=solid];
m0_380 -> m0_189  [key=2, style=dotted];
m0_380 -> m0_190  [key=2, style=dotted];
m0_380 -> m0_383  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_380 -> m0_384  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_380 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_380 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_380 -> m0_387  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_380 -> m0_388  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_381 -> m0_382  [key=0, style=solid, color=green];
m0_381 -> m0_23  [key=2, style=dotted];
m0_381 -> m0_191  [key=2, style=dotted];
m0_383 -> m0_47  [key=2, style=dotted];
m0_383 -> m0_384  [key=0, style=solid];
m0_384 -> m0_47  [key=2, style=dotted];
m0_384 -> m0_385  [key=0, style=solid];
m0_385 -> m0_47  [key=2, style=dotted];
m0_385 -> m0_386  [key=0, style=solid];
m0_386 -> m0_47  [key=2, style=dotted];
m0_386 -> m0_387  [key=0, style=solid];
m0_387 -> m0_47  [key=2, style=dotted];
m0_387 -> m0_388  [key=0, style=solid];
m0_388 -> m0_47  [key=2, style=dotted];
m0_388 -> m0_389  [key=0, style=solid];
m0_379 -> m0_380  [key=0, style=solid];
m0_379 -> m0_10  [key=2, style=dotted];
m0_376 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_376 -> m0_377  [key=0, style=solid];
m0_376 -> m0_7  [key=2, style=dotted];
m0_376 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_35  [key=2, style=dotted];
m0_377 -> m0_378  [key=0, style=solid];
m0_377 -> m0_8  [key=2, style=dotted];
m0_377 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_389 -> m0_375  [key=0, style=bold, color=blue];
m0_326 -> m0_327  [key=0, style=solid];
m0_333 -> m0_334  [key=0, style=solid, color=green];
m0_333 -> m0_47  [key=2, style=dotted, color=green];
m0_331 -> m0_333  [key=1, style=dashed, color=green, label=lines];
m0_331 -> m0_332  [key=0, style=solid];
m0_331 -> m0_189  [key=2, style=dotted];
m0_331 -> m0_190  [key=2, style=dotted];
m0_331 -> m0_334  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_331 -> m0_335  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_331 -> m0_336  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_332 -> m0_333  [key=0, style=solid, color=green];
m0_332 -> m0_23  [key=2, style=dotted];
m0_332 -> m0_191  [key=2, style=dotted];
m0_334 -> m0_47  [key=2, style=dotted];
m0_334 -> m0_335  [key=0, style=solid];
m0_335 -> m0_47  [key=2, style=dotted];
m0_335 -> m0_336  [key=0, style=solid];
m0_336 -> m0_47  [key=2, style=dotted];
m0_336 -> m0_337  [key=0, style=solid];
m0_330 -> m0_331  [key=0, style=solid];
m0_330 -> m0_10  [key=2, style=dotted];
m0_327 -> m0_330  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_7  [key=2, style=dotted];
m0_327 -> m0_339  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_322  [key=2, style=dotted];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_8  [key=2, style=dotted];
m0_328 -> m0_339  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_337 -> m0_326  [key=0, style=bold, color=blue];
m0_359 -> m0_360  [key=0, style=solid];
m0_367 -> m0_47  [key=2, style=dotted];
m0_367 -> m0_368  [key=0, style=solid];
m0_367 -> m0_372  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_364 -> m0_47  [key=2, style=dotted];
m0_364 -> m0_365  [key=0, style=solid];
m0_365 -> m0_23  [key=2, style=dotted];
m0_365 -> m0_366  [key=0, style=solid];
m0_365 -> m0_352  [key=2, style=dotted];
m0_365 -> m0_60  [key=2, style=dotted];
m0_366 -> m0_23  [key=2, style=dotted];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_60  [key=2, style=dotted];
m0_360 -> m0_367  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_360 -> m0_361  [key=0, style=solid];
m0_360 -> m0_351  [key=2, style=dotted];
m0_363 -> m0_367  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_365  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_363 -> m0_366  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_363 -> m0_322  [key=2, style=dotted];
m0_361 -> m0_7  [key=2, style=dotted];
m0_361 -> m0_362  [key=0, style=solid];
m0_361 -> m0_370  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_362 -> m0_363  [key=0, style=solid];
m0_362 -> m0_8  [key=2, style=dotted];
m0_362 -> m0_370  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_368 -> m0_359  [key=0, style=bold, color=blue];
m0_446 -> m0_447  [key=0, style=solid];
m0_450 -> m0_23  [key=2, style=dotted];
m0_450 -> m0_451  [key=0, style=solid];
m0_450 -> m0_452  [key=2, style=dotted];
m0_450 -> m0_453  [key=2, style=dotted];
m0_450 -> m0_457  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_450 -> m0_460  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_449 -> m0_450  [key=0, style=solid];
m0_449 -> m0_9  [key=2, style=dotted];
m0_447 -> m0_449  [key=1, style=dashed, color=darkseagreen4, label=sameValues];
m0_447 -> m0_448  [key=0, style=solid];
m0_448 -> m0_449  [key=0, style=solid];
m0_448 -> m0_8  [key=2, style=dotted];
m0_448 -> m0_455  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_451 -> m0_446  [key=0, style=bold, color=blue];
m0_93 -> m0_94  [key=0, style=solid];
m0_98 -> m0_47  [key=2, style=dotted];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_94 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=expectedOptions];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_100  [key=2, style=dotted];
m0_96 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_22  [key=2, style=dotted];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_60  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_46  [key=2, style=dotted];
m0_99 -> m0_93  [key=0, style=bold, color=blue];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_238  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_241 -> m0_189  [key=2, style=dotted];
m0_241 -> m0_190  [key=2, style=dotted];
m0_241 -> m0_242  [key=0, style=solid];
m0_241 -> m0_243  [key=1, style=dashed, color=darkseagreen4, label=lines];
m0_240 -> m0_23  [key=2, style=dotted];
m0_240 -> m0_161  [key=2, style=dotted];
m0_240 -> m0_241  [key=0, style=solid];
m0_242 -> m0_23  [key=2, style=dotted];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_145  [key=2, style=dotted];
m0_242 -> m0_248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_243 -> m0_23  [key=2, style=dotted];
m0_243 -> m0_191  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_239 -> m0_10  [key=2, style=dotted];
m0_239 -> m0_241  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_239 -> m0_240  [key=0, style=solid];
m0_236 -> m0_7  [key=2, style=dotted];
m0_236 -> m0_239  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_246  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_238 -> m0_35  [key=2, style=dotted];
m0_238 -> m0_239  [key=0, style=solid];
m0_237 -> m0_8  [key=2, style=dotted];
m0_237 -> m0_238  [key=0, style=solid];
m0_237 -> m0_246  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m0_244 -> m0_235  [key=0, style=bold, color=blue];
m0_542 -> m0_404  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Simple_Options"];
m0_543 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Commit_Verb"];
m0_531 -> m0_216  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_532 -> m0_233  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_534 -> m0_269  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_536 -> m0_306  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_537 -> m0_324  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_538 -> m0_339  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_541 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_544 -> m0_436  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_527 -> m0_151  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m0_529 -> m0_177  [key=1, style=dashed, color=darkseagreen4, label=expectedError];
m0_539 -> m0_354  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_540 -> m0_370  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_524 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_525 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_526 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_528 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_530 -> m0_193  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_533 -> m0_246  [key=1, style=dashed, color=darkseagreen4, label=help];
m0_535 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label=help];
}
