digraph  {
d1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="19-29"];
d0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
d2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
d3 [cluster="Unk.Choose", label="Entry Unk.Choose", span=""];
d4 [cluster="lambda expression", label="Entry lambda expression", span="20-25"];
d5 [cluster="lambda expression", color=green, community=0, label="0: var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="22-22"];
d82 [label="System.StringComparer", span=""];
d6 [cluster="lambda expression", color=green, community=0, label="0: var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="23-23"];
d9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="14-14"];
d11 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
d12 [cluster="lambda expression", color=green, community=0, label="0: NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22"];
d83 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
d14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d7 [cluster="lambda expression", color=green, community=0, label="0: return explodedTokens;", span="24-24"];
d10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="47-47"];
d15 [cluster="lambda expression", label="Entry lambda expression", span="23-23"];
d16 [cluster="lambda expression", color=green, community=0, label="0: NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="23-23"];
d17 [cluster="lambda expression", label="Exit lambda expression", span="23-23"];
d18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
d8 [cluster="lambda expression", label="Exit lambda expression", span="20-25"];
d20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: arguments.Empty()", span="39-39"];
d19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="32-32"];
d21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: return MakeNotParsed(types, new NoVerbSelectedError());", span="41-41"];
d22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: var firstArg = arguments.First()", span="44-44"];
d27 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
d26 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="32-32"];
d28 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
d29 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
d23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="46-48"];
d30 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
d39 [cluster="lambda expression", color=green, community=0, label="0: nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-48"];
d24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: var verbs = Verb.SelectFromTypes(types)", span="50-50"];
d25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="52-58"];
d84 [label="System.StringComparer", span=""];
d85 [label=firstArg, span=""];
d38 [cluster="lambda expression", label="Entry lambda expression", span="46-48"];
d40 [cluster="lambda expression", label="Exit lambda expression", span="46-48"];
d41 [cluster="System.StringComparer.Equals(string, string)", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
d42 [cluster="string.Concat(string, string)", label="Entry string.Concat(string, string)", span="0-0"];
d31 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
d32 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
d33 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
d34 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
d35 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
d36 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
d37 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="61-61"];
d43 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="0: return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="68-78"];
d44 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="61-61"];
d45 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d46 [cluster="Unk.>", label="Entry Unk.>", span=""];
d47 [cluster="Unk.Build", label="Entry Unk.Build", span=""];
d48 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d49 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
d50 [cluster="Unk.MakeNotParsed", label="Entry Unk.MakeNotParsed", span=""];
d51 [cluster="lambda expression", label="Entry lambda expression", span="68-68"];
d54 [cluster="lambda expression", label="Entry lambda expression", span="71-73"];
d62 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
d52 [cluster="lambda expression", color=green, community=0, label="0: nameComparer.Equals(a.Item1.Name, arguments.First())", span="68-68"];
d86 [label="System.Collections.Generic.IEnumerable<string>", span=""];
d87 [label="System.StringComparer", span=""];
d53 [cluster="lambda expression", label="Exit lambda expression", span="68-68"];
d55 [cluster="lambda expression", color=green, community=0, label="0: verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()", span="72-73"];
d88 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
d56 [cluster="lambda expression", label="Exit lambda expression", span="71-73"];
d57 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d58 [cluster="Unk.AutoDefault", label="Entry Unk.AutoDefault", span=""];
d59 [cluster="lambda expression", label="Entry lambda expression", span="72-72"];
d60 [cluster="lambda expression", color=green, community=0, label="0: nameComparer.Equals(v.Item1.Name, arguments.First())", span="72-72"];
d61 [cluster="lambda expression", label="Exit lambda expression", span="72-72"];
d63 [cluster="lambda expression", color=green, community=0, label="0: v.Item2", span="78-78"];
d64 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
d65 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", color=green, community=0, label="0: return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92"];
d66 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
d67 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
d68 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
d69 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
d70 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
d71 [cluster="lambda expression", label="Entry lambda expression", span="87-87"];
d74 [cluster="lambda expression", label="Entry lambda expression", span="90-90"];
d72 [cluster="lambda expression", color=green, community=0, label="0: nameComparer.Equals(v.Item1.Name, verb)", span="87-87"];
d89 [label=string, span=""];
d90 [label="System.StringComparer", span=""];
d73 [cluster="lambda expression", label="Exit lambda expression", span="87-87"];
d75 [cluster="lambda expression", color=green, community=0, label="0: new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90"];
d76 [cluster="lambda expression", label="Exit lambda expression", span="90-90"];
d77 [cluster="HelpVerbRequestedError.cstr", label="Entry HelpVerbRequestedError.cstr", span=""];
d78 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", color=green, community=0, label="0: return new NotParsed<object>(new NullInstance(), types, errors);", span="97-97"];
d79 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
d80 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136"];
d81 [cluster="CommandLine.NullInstance.NullInstance()", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
m0_62 [cluster="Unk.Just", file="OptionAttribute.cs", label="Entry Unk.Just", span=""];
m0_38 [cluster="Unk.Empty", file="OptionAttribute.cs", label="Entry Unk.Empty", span=""];
m0_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m0_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, file="OptionAttribute.cs", label="0: var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20"];
m0_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, file="OptionAttribute.cs", label="0: return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26"];
m0_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15"];
m0_50 [cluster="Unk.converter", file="OptionAttribute.cs", label="Entry Unk.converter", span=""];
m0_6 [cluster="Unk.>", file="OptionAttribute.cs", label="Entry Unk.>", span=""];
m0_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m0_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, file="OptionAttribute.cs", label="0: specProps.Empty()", span="34-34"];
m0_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="yield break;", span="36-36"];
m0_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43"];
m0_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="yield break;", span="44-44"];
m0_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54"];
m0_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="yield break;", span="55-55"];
m0_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63"];
m0_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="yield return value;", span="67-67"];
m0_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="var pt = specProps.First()", span="38-38"];
m0_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="39-39"];
m0_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47"];
m0_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50"];
m0_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65"];
m0_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="taken.Empty()", span="40-40"];
m0_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29"];
m0_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="OptionAttribute.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71"];
m0_58 [cluster="CommandLine.Core.Specification.IsValue()", file="OptionAttribute.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m0_45 [cluster="Unk.IsNothing", file="OptionAttribute.cs", label="Entry Unk.IsNothing", span=""];
m0_74 [cluster="Unk.FromJustStrict", file="OptionAttribute.cs", label="Entry Unk.FromJustStrict", span=""];
m0_37 [cluster="Unk.Take", file="OptionAttribute.cs", label="Entry Unk.Take", span=""];
m0_43 [cluster="Unk.ToMaybe", file="OptionAttribute.cs", label="Entry Unk.ToMaybe", span=""];
m0_47 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="OptionAttribute.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_40 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="OptionAttribute.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m0_48 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="OptionAttribute.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
m0_59 [cluster="lambda expression", file="OptionAttribute.cs", label="Entry lambda expression", span="61-61"];
m0_8 [cluster="lambda expression", file="OptionAttribute.cs", label="Entry lambda expression", span="23-23"];
m0_11 [cluster="lambda expression", file="OptionAttribute.cs", label="Entry lambda expression", span="24-24"];
m0_14 [cluster="lambda expression", file="OptionAttribute.cs", label="Entry lambda expression", span="25-25"];
m0_9 [cluster="lambda expression", color=red, community=0, file="OptionAttribute.cs", label="0: pe.Item1", span="23-23"];
m0_10 [cluster="lambda expression", file="OptionAttribute.cs", label="Exit lambda expression", span="23-23"];
m0_12 [cluster="lambda expression", file="OptionAttribute.cs", label="pe.Item2", span="24-24"];
m0_13 [cluster="lambda expression", file="OptionAttribute.cs", label="Exit lambda expression", span="24-24"];
m0_15 [cluster="lambda expression", file="OptionAttribute.cs", label="e.Value", span="25-25"];
m0_16 [cluster="lambda expression", file="OptionAttribute.cs", label="Exit lambda expression", span="25-25"];
m0_60 [cluster="lambda expression", file="OptionAttribute.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61"];
m0_52 [cluster="lambda expression", file="OptionAttribute.cs", label="Entry lambda expression", span="39-39"];
m0_55 [cluster="lambda expression", file="OptionAttribute.cs", label="Entry lambda expression", span="47-47"];
m0_53 [cluster="lambda expression", file="OptionAttribute.cs", label=n, span="39-39"];
m0_54 [cluster="lambda expression", file="OptionAttribute.cs", label="Exit lambda expression", span="39-39"];
m0_56 [cluster="lambda expression", file="OptionAttribute.cs", label="s.Specification.IsValue()", span="47-47"];
m0_57 [cluster="lambda expression", file="OptionAttribute.cs", label="Exit lambda expression", span="47-47"];
m0_61 [cluster="lambda expression", file="OptionAttribute.cs", label="Exit lambda expression", span="61-61"];
m0_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="OptionAttribute.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_49 [cluster="CSharpx.Maybe.Just<T>(T)", file="OptionAttribute.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m0_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="OptionAttribute.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m0_75 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m0_76 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", color=red, community=0, file="OptionAttribute.cs", label="0: return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91"];
m0_77 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87"];
m0_5 [cluster="Unk.Select", file="OptionAttribute.cs", label="Entry Unk.Select", span=""];
m0_51 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="OptionAttribute.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m0_39 [cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="OptionAttribute.cs", label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87"];
m0_36 [cluster="Unk.Return", file="OptionAttribute.cs", label="Entry Unk.Return", span=""];
m0_64 [cluster="CSharpx.Maybe.Nothing<T>()", file="OptionAttribute.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m0_63 [cluster="Unk.WithValue", file="OptionAttribute.cs", label="Entry Unk.WithValue", span=""];
m0_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="OptionAttribute.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m0_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m0_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="specification.TargetType", span="73-73"];
m0_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="specification.Max.IsJust()", span="78-78"];
m0_71 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="return Maybe.Just(specification.Max.FromJustStrict());", span="80-80"];
m0_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="TargetType.Scalar", span="75-75"];
m0_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="TargetType.Sequence", span="77-77"];
m0_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="return Maybe.Just(1);", span="76-76"];
m0_72 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="return Maybe.Nothing<int>();", span="84-84"];
m0_73 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71"];
m0_42 [cluster="Unk.FirstOrDefault", file="OptionAttribute.cs", label="Entry Unk.FirstOrDefault", span=""];
m0_44 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="OptionAttribute.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m0_46 [cluster="Unk.Count", file="OptionAttribute.cs", label="Entry Unk.Count", span=""];
m0_7 [cluster="Unk.Succeed", file="OptionAttribute.cs", label="Entry Unk.Succeed", span=""];
m0_78 [file="OptionAttribute.cs", label=pt, span=""];
m1_0 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="20-20"];
m1_1 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="this.index = index", span="22-22"];
m1_2 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", color=red, community=0, file="ValueAttribute.cs", label="0: min = -1", span="23-23"];
m1_3 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", color=red, community=0, file="ValueAttribute.cs", label="0: max = -1", span="24-24"];
m1_4 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="20-20"];
m1_5 [file="ValueAttribute.cs", label="CommandLine.ValueAttribute", span=""];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d3  [color=green, key=2, style=dotted];
d1 -> d4  [color=green, key=1, label="lambda expression", style=dashed];
d0 -> d1  [color=green, key=0, style=solid];
d0 -> d5  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> d12  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> d6  [color=green, key=1, label="System.StringComparer", style=dashed];
d0 -> d16  [color=green, key=1, label="System.StringComparer", style=dashed];
d2 -> d0  [color=blue, key=0, style=bold];
d4 -> d5  [color=green, key=0, style=solid];
d4 -> d12  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d6  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d16  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d5 -> d6  [color=green, key=0, style=solid];
d5 -> d9  [color=green, key=2, style=dotted];
d5 -> d11  [color=green, key=1, label="lambda expression", style=dashed];
d82 -> d5  [color=green, key=1, label="System.StringComparer", style=dashed];
d82 -> d12  [color=green, key=1, label="System.StringComparer", style=dashed];
d82 -> d6  [color=green, key=1, label="System.StringComparer", style=dashed];
d82 -> d16  [color=green, key=1, label="System.StringComparer", style=dashed];
d6 -> d7  [color=green, key=0, style=solid];
d6 -> d10  [color=green, key=2, style=dotted];
d6 -> d15  [color=green, key=1, label="lambda expression", style=dashed];
d11 -> d12  [color=green, key=0, style=solid];
d12 -> d13  [color=green, key=0, style=solid];
d12 -> d14  [color=green, key=2, style=dotted];
d83 -> d12  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d83 -> d16  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d13 -> d11  [color=blue, key=0, style=bold];
d7 -> d8  [color=green, key=0, style=solid];
d15 -> d16  [color=green, key=0, style=solid];
d16 -> d17  [color=green, key=0, style=solid];
d16 -> d18  [color=green, key=2, style=dotted];
d17 -> d15  [color=blue, key=0, style=bold];
d8 -> d4  [color=blue, key=0, style=bold];
d20 -> d21  [color=green, key=0, style=solid];
d20 -> d22  [color=green, key=0, style=solid];
d20 -> d27  [color=green, key=2, style=dotted];
d19 -> d20  [color=green, key=0, style=solid];
d19 -> d21  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
d19 -> d22  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d19 -> d23  [color=green, key=1, label="System.StringComparer", style=dashed];
d19 -> d39  [color=green, key=1, label="System.StringComparer", style=dashed];
d19 -> d24  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
d19 -> d25  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
d21 -> d26  [color=green, key=0, style=solid];
d21 -> d28  [color=green, key=2, style=dotted];
d21 -> d29  [color=green, key=2, style=dotted];
d22 -> d23  [color=green, key=0, style=solid];
d22 -> d30  [color=green, key=2, style=dotted];
d22 -> d39  [color=green, key=1, label=firstArg, style=dashed];
d26 -> d19  [color=blue, key=0, style=bold];
d29 -> d78  [color=green, key=0, style=solid];
d23 -> d24  [color=green, key=0, style=solid];
d23 -> d39  [color=green, key=1, label=string, style=dashed];
d23 -> d25  [color=green, key=1, label=preprocCompare, style=dashed];
d39 -> d40  [color=green, key=0, style=solid];
d39 -> d41  [color=green, key=2, style=dotted];
d39 -> d42  [color=green, key=2, style=dotted];
d24 -> d25  [color=green, key=0, style=solid];
d24 -> d31  [color=green, key=2, style=dotted];
d25 -> d26  [color=green, key=0, style=solid];
d25 -> d32  [color=green, key=2, style=dotted];
d25 -> d33  [color=green, key=2, style=dotted];
d25 -> d34  [color=green, key=2, style=dotted];
d25 -> d35  [color=green, key=2, style=dotted];
d25 -> d29  [color=green, key=2, style=dotted];
d25 -> d36  [color=green, key=2, style=dotted];
d25 -> d37  [color=green, key=2, style=dotted];
d84 -> d39  [color=green, key=1, label="System.StringComparer", style=dashed];
d85 -> d39  [color=green, key=1, label=firstArg, style=dashed];
d38 -> d39  [color=green, key=0, style=solid];
d40 -> d38  [color=blue, key=0, style=bold];
d35 -> d65  [color=green, key=0, style=solid];
d35 -> d72  [color=green, key=1, label=string, style=dashed];
d37 -> d43  [color=green, key=0, style=solid];
d37 -> d52  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d37 -> d55  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
d37 -> d60  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d43 -> d44  [color=green, key=0, style=solid];
d43 -> d45  [color=green, key=2, style=dotted];
d43 -> d46  [color=green, key=2, style=dotted];
d43 -> d33  [color=green, key=2, style=dotted];
d43 -> d47  [color=green, key=2, style=dotted];
d43 -> d48  [color=green, key=2, style=dotted];
d43 -> d49  [color=green, key=2, style=dotted];
d43 -> d30  [color=green, key=2, style=dotted];
d43 -> d50  [color=green, key=2, style=dotted];
d43 -> d51  [color=green, key=1, label="lambda expression", style=dashed];
d43 -> d54  [color=green, key=1, label="lambda expression", style=dashed];
d43 -> d62  [color=green, key=1, label="lambda expression", style=dashed];
d44 -> d37  [color=blue, key=0, style=bold];
d51 -> d52  [color=green, key=0, style=solid];
d54 -> d55  [color=green, key=0, style=solid];
d62 -> d63  [color=green, key=0, style=solid];
d52 -> d53  [color=green, key=0, style=solid];
d52 -> d30  [color=green, key=2, style=dotted];
d52 -> d41  [color=green, key=2, style=dotted];
d86 -> d52  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d86 -> d55  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d86 -> d60  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d87 -> d52  [color=green, key=1, label="System.StringComparer", style=dashed];
d87 -> d55  [color=green, key=1, label="System.StringComparer", style=dashed];
d87 -> d60  [color=green, key=1, label="System.StringComparer", style=dashed];
d53 -> d51  [color=blue, key=0, style=bold];
d55 -> d56  [color=green, key=0, style=solid];
d55 -> d57  [color=green, key=2, style=dotted];
d55 -> d58  [color=green, key=2, style=dotted];
d55 -> d59  [color=green, key=1, label="lambda expression", style=dashed];
d88 -> d55  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
d56 -> d54  [color=blue, key=0, style=bold];
d59 -> d60  [color=green, key=0, style=solid];
d60 -> d61  [color=green, key=0, style=solid];
d60 -> d30  [color=green, key=2, style=dotted];
d60 -> d41  [color=green, key=2, style=dotted];
d61 -> d59  [color=blue, key=0, style=bold];
d63 -> d64  [color=green, key=0, style=solid];
d64 -> d62  [color=blue, key=0, style=bold];
d65 -> d66  [color=green, key=0, style=solid];
d65 -> d67  [color=green, key=2, style=dotted];
d65 -> d68  [color=green, key=2, style=dotted];
d65 -> d69  [color=green, key=2, style=dotted];
d65 -> d70  [color=green, key=2, style=dotted];
d65 -> d71  [color=green, key=1, label="lambda expression", style=dashed];
d65 -> d74  [color=green, key=1, label="lambda expression", style=dashed];
d66 -> d35  [color=blue, key=0, style=bold];
d71 -> d72  [color=green, key=0, style=solid];
d74 -> d75  [color=green, key=0, style=solid];
d72 -> d73  [color=green, key=0, style=solid];
d72 -> d41  [color=green, key=2, style=dotted];
d89 -> d72  [color=green, key=1, label=string, style=dashed];
d90 -> d72  [color=green, key=1, label="System.StringComparer", style=dashed];
d73 -> d71  [color=blue, key=0, style=bold];
d75 -> d76  [color=green, key=0, style=solid];
d75 -> d77  [color=green, key=2, style=dotted];
d76 -> d74  [color=blue, key=0, style=bold];
d78 -> d79  [color=green, key=0, style=solid];
d78 -> d80  [color=green, key=2, style=dotted];
d78 -> d81  [color=green, key=2, style=dotted];
d79 -> d29  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=red, key=0, style=solid];
m0_1 -> m0_2  [color=red, key=0, style=solid];
m0_1 -> m0_4  [color=red, key=2, style=dotted];
m0_2 -> m0_3  [color=red, key=0, style=solid];
m0_2 -> m0_5  [color=red, key=2, style=dotted];
m0_2 -> m0_6  [color=red, key=2, style=dotted];
m0_2 -> m0_7  [color=red, key=2, style=dotted];
m0_2 -> m0_8  [color=red, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_11  [color=red, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_14  [color=red, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_0  [color=blue, key=0, style=bold];
m0_4 -> m0_17  [color=red, key=0, style=solid];
m0_4 -> m0_18  [color=crimson, key=0, style=bold];
m0_4 -> m0_22  [color=crimson, key=0, style=bold];
m0_4 -> m0_23  [color=crimson, key=0, style=bold];
m0_4 -> m0_26  [color=crimson, key=0, style=bold];
m0_4 -> m0_27  [color=crimson, key=0, style=bold];
m0_4 -> m0_28  [color=crimson, key=0, style=bold];
m0_4 -> m0_30  [color=crimson, key=0, style=bold];
m0_4 -> m0_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_4 -> m0_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_4 -> m0_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_4 -> m0_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_4 -> m0_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_17 -> m0_18  [color=red, key=0, style=solid];
m0_17 -> m0_19  [color=red, key=0, style=solid];
m0_17 -> d27  [color=red, key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_39  [key=2, style=dotted];
m0_22 -> m0_40  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_48  [key=2, style=dotted];
m0_26 -> m0_49  [key=2, style=dotted];
m0_26 -> m0_40  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_50  [key=2, style=dotted];
m0_28 -> m0_51  [key=2, style=dotted];
m0_28 -> m0_49  [key=2, style=dotted];
m0_28 -> m0_40  [key=2, style=dotted];
m0_28 -> m0_36  [key=2, style=dotted];
m0_28 -> m0_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_30 -> m0_29  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_33  [key=2, style=dotted];
m0_19 -> m0_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_19 -> m0_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_19 -> m0_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_19 -> m0_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_19 -> m0_60  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_34  [key=2, style=dotted];
m0_20 -> m0_35  [key=2, style=dotted];
m0_20 -> m0_36  [key=2, style=dotted];
m0_20 -> m0_37  [key=2, style=dotted];
m0_20 -> m0_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_25  [color=darkseagreen4, key=1, label=taken, style=dashed];
m0_20 -> m0_28  [color=darkseagreen4, key=1, label=taken, style=dashed];
m0_20 -> m0_29  [color=darkseagreen4, key=1, label=taken, style=dashed];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_41  [key=2, style=dotted];
m0_24 -> m0_42  [key=2, style=dotted];
m0_24 -> m0_43  [key=2, style=dotted];
m0_24 -> m0_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_28  [key=0, style=solid];
m0_25 -> m0_44  [key=2, style=dotted];
m0_25 -> m0_45  [key=2, style=dotted];
m0_25 -> m0_46  [key=2, style=dotted];
m0_25 -> m0_41  [key=2, style=dotted];
m0_25 -> m0_47  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=0, style=solid];
m0_29 -> m0_41  [key=2, style=dotted];
m0_29 -> m0_46  [key=2, style=dotted];
m0_29 -> m0_4  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_24  [key=0, style=solid];
m0_21 -> m0_38  [key=2, style=dotted];
m0_31 -> m0_4  [color=blue, key=0, style=bold];
m0_59 -> m0_60  [key=0, style=solid];
m0_8 -> m0_9  [color=red, key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_9 -> m0_10  [color=red, key=0, style=solid];
m0_10 -> m0_8  [color=blue, key=0, style=bold];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_11  [color=blue, key=0, style=bold];
m0_15 -> m0_16  [key=0, style=solid];
m0_16 -> m0_14  [color=blue, key=0, style=bold];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=2, style=dotted];
m0_60 -> m0_63  [key=2, style=dotted];
m0_60 -> m0_64  [key=2, style=dotted];
m0_60 -> m0_40  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_55 -> m0_56  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_54 -> m0_52  [color=blue, key=0, style=bold];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_58  [key=2, style=dotted];
m0_57 -> m0_55  [color=blue, key=0, style=bold];
m0_61 -> m0_59  [color=blue, key=0, style=bold];
m0_75 -> m0_76  [color=red, key=0, style=solid];
m0_76 -> m0_77  [color=red, key=0, style=solid];
m0_76 -> m0_44  [color=red, key=2, style=dotted];
m0_76 -> m0_48  [color=red, key=2, style=dotted];
m0_76 -> m0_49  [color=red, key=2, style=dotted];
m0_76 -> m0_64  [color=red, key=2, style=dotted];
m0_77 -> m0_75  [color=blue, key=0, style=bold];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_70  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_65 -> m0_71  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_69  [key=0, style=solid];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_72  [key=0, style=solid];
m0_70 -> m0_44  [key=2, style=dotted];
m0_71 -> m0_73  [key=0, style=solid];
m0_71 -> m0_74  [key=2, style=dotted];
m0_71 -> m0_62  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_68 -> m0_73  [key=0, style=solid];
m0_68 -> m0_49  [key=2, style=dotted];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_64  [key=2, style=dotted];
m0_73 -> m0_65  [color=blue, key=0, style=bold];
m0_78 -> m0_60  [color=darkseagreen4, key=1, label=pt, style=dashed];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [color=red, key=0, style=solid];
m1_1 -> m1_4  [color=green, key=0, style=solid];
m1_2 -> m1_3  [color=red, key=0, style=solid];
m1_3 -> m1_4  [color=red, key=0, style=solid];
m1_4 -> m1_0  [color=blue, key=0, style=bold];
m1_5 -> m1_1  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m1_5 -> m1_2  [color=red, key=1, label="CommandLine.ValueAttribute", style=dashed];
m1_5 -> m1_3  [color=red, key=1, label="CommandLine.ValueAttribute", style=dashed];
}
