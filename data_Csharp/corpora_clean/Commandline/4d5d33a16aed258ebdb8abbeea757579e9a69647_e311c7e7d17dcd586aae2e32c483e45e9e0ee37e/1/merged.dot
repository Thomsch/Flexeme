digraph  {
d1 [label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="19-29", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0];
d0 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d2 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d3 [label="Entry Unk.Choose", span="", cluster="Unk.Choose"];
d4 [label="Entry lambda expression", span="20-25", cluster="lambda expression"];
d5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="22-22", cluster="lambda expression", color=green, community=0];
d82 [label="System.StringComparer", span=""];
d6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="23-23", cluster="lambda expression", color=green, community=0];
d9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="14-14", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d11 [label="Entry lambda expression", span="22-22", cluster="lambda expression"];
d12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22", cluster="lambda expression", color=green, community=0];
d83 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [label="Exit lambda expression", span="22-22", cluster="lambda expression"];
d14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d7 [label="return explodedTokens;", span="24-24", cluster="lambda expression", color=green, community=0];
d10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="47-47", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
d15 [label="Entry lambda expression", span="23-23", cluster="lambda expression"];
d16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="23-23", cluster="lambda expression", color=green, community=0];
d17 [label="Exit lambda expression", span="23-23", cluster="lambda expression"];
d18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d8 [label="Exit lambda expression", span="20-25", cluster="lambda expression"];
d20 [label="arguments.Empty()", span="39-39", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0];
d19 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="32-32", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d21 [label="return MakeNotParsed(types, new NoVerbSelectedError());", span="41-41", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0];
d22 [label="var firstArg = arguments.First()", span="44-44", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0];
d27 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()"];
d26 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="32-32", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d28 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()"];
d29 [label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])"];
d23 [label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="46-48", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0];
d30 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()"];
d39 [label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-48", cluster="lambda expression", color=green, community=0];
d24 [label="var verbs = Verb.SelectFromTypes(types)", span="50-50", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0];
d25 [label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="52-58", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0];
d84 [label="System.StringComparer", span=""];
d85 [label=firstArg, span=""];
d38 [label="Entry lambda expression", span="46-48", cluster="lambda expression"];
d40 [label="Exit lambda expression", span="46-48", cluster="lambda expression"];
d41 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)"];
d42 [label="Entry string.Concat(string, string)", span="0-0", cluster="string.Concat(string, string)"];
d31 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)"];
d32 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
d33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)"];
d34 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()"];
d35 [label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)"];
d36 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432", cluster="CommandLine.VersionRequestedError.VersionRequestedError()"];
d37 [label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="61-61", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d43 [label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="68-78", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0];
d44 [label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="61-61", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d45 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
d46 [label="Entry Unk.>", span="", cluster="Unk.>"];
d47 [label="Entry Unk.Build", span="", cluster="Unk.Build"];
d48 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d49 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)"];
d50 [label="Entry Unk.MakeNotParsed", span="", cluster="Unk.MakeNotParsed"];
d51 [label="Entry lambda expression", span="68-68", cluster="lambda expression"];
d54 [label="Entry lambda expression", span="71-73", cluster="lambda expression"];
d62 [label="Entry lambda expression", span="78-78", cluster="lambda expression"];
d52 [label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="68-68", cluster="lambda expression", color=green, community=0];
d86 [label="System.Collections.Generic.IEnumerable<string>", span=""];
d87 [label="System.StringComparer", span=""];
d53 [label="Exit lambda expression", span="68-68", cluster="lambda expression"];
d55 [label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()", span="72-73", cluster="lambda expression", color=green, community=0];
d88 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
d56 [label="Exit lambda expression", span="71-73", cluster="lambda expression"];
d57 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
d58 [label="Entry Unk.AutoDefault", span="", cluster="Unk.AutoDefault"];
d59 [label="Entry lambda expression", span="72-72", cluster="lambda expression"];
d60 [label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="72-72", cluster="lambda expression", color=green, community=0];
d61 [label="Exit lambda expression", span="72-72", cluster="lambda expression"];
d63 [label="v.Item2", span="78-78", cluster="lambda expression", color=green, community=0];
d64 [label="Exit lambda expression", span="78-78", cluster="lambda expression"];
d65 [label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", color=green, community=0];
d66 [label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)"];
d67 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault"];
d68 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe"];
d69 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)"];
d70 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
d71 [label="Entry lambda expression", span="87-87", cluster="lambda expression"];
d74 [label="Entry lambda expression", span="90-90", cluster="lambda expression"];
d72 [label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87", cluster="lambda expression", color=green, community=0];
d89 [label=string, span=""];
d90 [label="System.StringComparer", span=""];
d73 [label="Exit lambda expression", span="87-87", cluster="lambda expression"];
d75 [label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90", cluster="lambda expression", color=green, community=0];
d76 [label="Exit lambda expression", span="90-90", cluster="lambda expression"];
d77 [label="Entry HelpVerbRequestedError.cstr", span="", cluster="HelpVerbRequestedError.cstr"];
d78 [label="return new NotParsed<object>(new NullInstance(), types, errors);", span="97-97", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", color=green, community=0];
d79 [label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])"];
d80 [label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136", cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d81 [label="Entry CommandLine.NullInstance.NullInstance()", span="9-9", cluster="CommandLine.NullInstance.NullInstance()"];
m0_62 [label="Entry Unk.Just", span="", cluster="Unk.Just", file="OptionAttribute.cs"];
m0_38 [label="Entry Unk.Empty", span="", cluster="Unk.Empty", file="OptionAttribute.cs"];
m0_0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, file="OptionAttribute.cs"];
m0_2 [label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, file="OptionAttribute.cs"];
m0_3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_50 [label="Entry Unk.converter", span="", cluster="Unk.converter", file="OptionAttribute.cs"];
m0_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="OptionAttribute.cs"];
m0_4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_17 [label="specProps.Empty()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=red, community=0, file="OptionAttribute.cs"];
m0_18 [label="yield break;", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_22 [label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_23 [label="yield break;", span="44-44", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_26 [label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_27 [label="yield break;", span="55-55", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_28 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_30 [label="yield return value;", span="67-67", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_19 [label="var pt = specProps.First()", span="38-38", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_20 [label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="39-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_24 [label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_25 [label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_29 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_21 [label="taken.Empty()", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_31 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", file="OptionAttribute.cs"];
m0_34 [label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71", cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="OptionAttribute.cs"];
m0_58 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="OptionAttribute.cs"];
m0_45 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing", file="OptionAttribute.cs"];
m0_74 [label="Entry Unk.FromJustStrict", span="", cluster="Unk.FromJustStrict", file="OptionAttribute.cs"];
m0_37 [label="Entry Unk.Take", span="", cluster="Unk.Take", file="OptionAttribute.cs"];
m0_43 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="OptionAttribute.cs"];
m0_47 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="OptionAttribute.cs"];
m0_40 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="OptionAttribute.cs"];
m0_48 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="OptionAttribute.cs"];
m0_59 [label="Entry lambda expression", span="61-61", cluster="lambda expression", file="OptionAttribute.cs"];
m0_8 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="OptionAttribute.cs"];
m0_11 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="OptionAttribute.cs"];
m0_14 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="OptionAttribute.cs"];
m0_9 [label="pe.Item1", span="23-23", cluster="lambda expression", color=red, community=0, file="OptionAttribute.cs"];
m0_10 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="OptionAttribute.cs"];
m0_12 [label="pe.Item2", span="24-24", cluster="lambda expression", file="OptionAttribute.cs"];
m0_13 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="OptionAttribute.cs"];
m0_15 [label="e.Value", span="25-25", cluster="lambda expression", file="OptionAttribute.cs"];
m0_16 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="OptionAttribute.cs"];
m0_60 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61", cluster="lambda expression", file="OptionAttribute.cs"];
m0_52 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="OptionAttribute.cs"];
m0_55 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="OptionAttribute.cs"];
m0_53 [label=n, span="39-39", cluster="lambda expression", file="OptionAttribute.cs"];
m0_54 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="OptionAttribute.cs"];
m0_56 [label="s.Specification.IsValue()", span="47-47", cluster="lambda expression", file="OptionAttribute.cs"];
m0_57 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="OptionAttribute.cs"];
m0_61 [label="Exit lambda expression", span="61-61", cluster="lambda expression", file="OptionAttribute.cs"];
m0_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="OptionAttribute.cs"];
m0_49 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="OptionAttribute.cs"];
m0_41 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="OptionAttribute.cs"];
m0_75 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_76 [label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", color=red, community=0, file="OptionAttribute.cs"];
m0_77 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_5 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="OptionAttribute.cs"];
m0_51 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="OptionAttribute.cs"];
m0_39 [label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87", cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", file="OptionAttribute.cs"];
m0_36 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="OptionAttribute.cs"];
m0_64 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="OptionAttribute.cs"];
m0_63 [label="Entry Unk.WithValue", span="", cluster="Unk.WithValue", file="OptionAttribute.cs"];
m0_35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="OptionAttribute.cs"];
m0_65 [label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_66 [label="specification.TargetType", span="73-73", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_70 [label="specification.Max.IsJust()", span="78-78", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_71 [label="return Maybe.Just(specification.Max.FromJustStrict());", span="80-80", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_67 [label="TargetType.Scalar", span="75-75", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_69 [label="TargetType.Sequence", span="77-77", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_68 [label="return Maybe.Just(1);", span="76-76", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_72 [label="return Maybe.Nothing<int>();", span="84-84", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_73 [label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="OptionAttribute.cs"];
m0_42 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="OptionAttribute.cs"];
m0_44 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="OptionAttribute.cs"];
m0_46 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="OptionAttribute.cs"];
m0_7 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="OptionAttribute.cs"];
m0_78 [label=pt, span="", file="OptionAttribute.cs"];
m1_0 [label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="20-20", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs"];
m1_1 [label="this.index = index", span="22-22", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs"];
m1_2 [label="min = -1", span="23-23", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", color=red, community=0, file="ValueAttribute.cs"];
m1_3 [label="max = -1", span="24-24", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", color=red, community=0, file="ValueAttribute.cs"];
m1_4 [label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="20-20", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs"];
m1_5 [label="CommandLine.ValueAttribute", span="", file="ValueAttribute.cs"];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=2, style=dotted, color=green];
d1 -> d4  [key=1, style=dashed, color=green, label="lambda expression"];
d0 -> d1  [key=0, style=solid, color=green];
d0 -> d5  [key=1, style=dashed, color=green, label="System.StringComparer"];
d0 -> d12  [key=1, style=dashed, color=green, label="System.StringComparer"];
d0 -> d6  [key=1, style=dashed, color=green, label="System.StringComparer"];
d0 -> d16  [key=1, style=dashed, color=green, label="System.StringComparer"];
d2 -> d0  [key=0, style=bold, color=blue];
d4 -> d5  [key=0, style=solid, color=green];
d4 -> d12  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d6  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d16  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d5 -> d6  [key=0, style=solid, color=green];
d5 -> d9  [key=2, style=dotted, color=green];
d5 -> d11  [key=1, style=dashed, color=green, label="lambda expression"];
d82 -> d5  [key=1, style=dashed, color=green, label="System.StringComparer"];
d82 -> d12  [key=1, style=dashed, color=green, label="System.StringComparer"];
d82 -> d6  [key=1, style=dashed, color=green, label="System.StringComparer"];
d82 -> d16  [key=1, style=dashed, color=green, label="System.StringComparer"];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d10  [key=2, style=dotted, color=green];
d6 -> d15  [key=1, style=dashed, color=green, label="lambda expression"];
d11 -> d12  [key=0, style=solid, color=green];
d12 -> d13  [key=0, style=solid, color=green];
d12 -> d14  [key=2, style=dotted, color=green];
d83 -> d12  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d83 -> d16  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d13 -> d11  [key=0, style=bold, color=blue];
d7 -> d8  [key=0, style=solid, color=green];
d15 -> d16  [key=0, style=solid, color=green];
d16 -> d17  [key=0, style=solid, color=green];
d16 -> d18  [key=2, style=dotted, color=green];
d17 -> d15  [key=0, style=bold, color=blue];
d8 -> d4  [key=0, style=bold, color=blue];
d20 -> d21  [key=0, style=solid, color=green];
d20 -> d22  [key=0, style=solid, color=green];
d20 -> d27  [key=2, style=dotted, color=green];
d19 -> d20  [key=0, style=solid, color=green];
d19 -> d21  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Type>"];
d19 -> d22  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
d19 -> d23  [key=1, style=dashed, color=green, label="System.StringComparer"];
d19 -> d39  [key=1, style=dashed, color=green, label="System.StringComparer"];
d19 -> d24  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Type>"];
d19 -> d25  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
d21 -> d26  [key=0, style=solid, color=green];
d21 -> d28  [key=2, style=dotted, color=green];
d21 -> d29  [key=2, style=dotted, color=green];
d22 -> d23  [key=0, style=solid, color=green];
d22 -> d30  [key=2, style=dotted, color=green];
d22 -> d39  [key=1, style=dashed, color=green, label=firstArg];
d26 -> d19  [key=0, style=bold, color=blue];
d29 -> d78  [key=0, style=solid, color=green];
d23 -> d24  [key=0, style=solid, color=green];
d23 -> d39  [key=1, style=dashed, color=green, label=string];
d23 -> d25  [key=1, style=dashed, color=green, label=preprocCompare];
d39 -> d40  [key=0, style=solid, color=green];
d39 -> d41  [key=2, style=dotted, color=green];
d39 -> d42  [key=2, style=dotted, color=green];
d24 -> d25  [key=0, style=solid, color=green];
d24 -> d31  [key=2, style=dotted, color=green];
d25 -> d26  [key=0, style=solid, color=green];
d25 -> d32  [key=2, style=dotted, color=green];
d25 -> d33  [key=2, style=dotted, color=green];
d25 -> d34  [key=2, style=dotted, color=green];
d25 -> d35  [key=2, style=dotted, color=green];
d25 -> d29  [key=2, style=dotted, color=green];
d25 -> d36  [key=2, style=dotted, color=green];
d25 -> d37  [key=2, style=dotted, color=green];
d84 -> d39  [key=1, style=dashed, color=green, label="System.StringComparer"];
d85 -> d39  [key=1, style=dashed, color=green, label=firstArg];
d38 -> d39  [key=0, style=solid, color=green];
d40 -> d38  [key=0, style=bold, color=blue];
d35 -> d65  [key=0, style=solid, color=green];
d35 -> d72  [key=1, style=dashed, color=green, label=string];
d37 -> d43  [key=0, style=solid, color=green];
d37 -> d52  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
d37 -> d55  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
d37 -> d60  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
d43 -> d44  [key=0, style=solid, color=green];
d43 -> d45  [key=2, style=dotted, color=green];
d43 -> d46  [key=2, style=dotted, color=green];
d43 -> d33  [key=2, style=dotted, color=green];
d43 -> d47  [key=2, style=dotted, color=green];
d43 -> d48  [key=2, style=dotted, color=green];
d43 -> d49  [key=2, style=dotted, color=green];
d43 -> d30  [key=2, style=dotted, color=green];
d43 -> d50  [key=2, style=dotted, color=green];
d43 -> d51  [key=1, style=dashed, color=green, label="lambda expression"];
d43 -> d54  [key=1, style=dashed, color=green, label="lambda expression"];
d43 -> d62  [key=1, style=dashed, color=green, label="lambda expression"];
d44 -> d37  [key=0, style=bold, color=blue];
d51 -> d52  [key=0, style=solid, color=green];
d54 -> d55  [key=0, style=solid, color=green];
d62 -> d63  [key=0, style=solid, color=green];
d52 -> d53  [key=0, style=solid, color=green];
d52 -> d30  [key=2, style=dotted, color=green];
d52 -> d41  [key=2, style=dotted, color=green];
d86 -> d52  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
d86 -> d55  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
d86 -> d60  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
d87 -> d52  [key=1, style=dashed, color=green, label="System.StringComparer"];
d87 -> d55  [key=1, style=dashed, color=green, label="System.StringComparer"];
d87 -> d60  [key=1, style=dashed, color=green, label="System.StringComparer"];
d53 -> d51  [key=0, style=bold, color=blue];
d55 -> d56  [key=0, style=solid, color=green];
d55 -> d57  [key=2, style=dotted, color=green];
d55 -> d58  [key=2, style=dotted, color=green];
d55 -> d59  [key=1, style=dashed, color=green, label="lambda expression"];
d88 -> d55  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
d56 -> d54  [key=0, style=bold, color=blue];
d59 -> d60  [key=0, style=solid, color=green];
d60 -> d61  [key=0, style=solid, color=green];
d60 -> d30  [key=2, style=dotted, color=green];
d60 -> d41  [key=2, style=dotted, color=green];
d61 -> d59  [key=0, style=bold, color=blue];
d63 -> d64  [key=0, style=solid, color=green];
d64 -> d62  [key=0, style=bold, color=blue];
d65 -> d66  [key=0, style=solid, color=green];
d65 -> d67  [key=2, style=dotted, color=green];
d65 -> d68  [key=2, style=dotted, color=green];
d65 -> d69  [key=2, style=dotted, color=green];
d65 -> d70  [key=2, style=dotted, color=green];
d65 -> d71  [key=1, style=dashed, color=green, label="lambda expression"];
d65 -> d74  [key=1, style=dashed, color=green, label="lambda expression"];
d66 -> d35  [key=0, style=bold, color=blue];
d71 -> d72  [key=0, style=solid, color=green];
d74 -> d75  [key=0, style=solid, color=green];
d72 -> d73  [key=0, style=solid, color=green];
d72 -> d41  [key=2, style=dotted, color=green];
d89 -> d72  [key=1, style=dashed, color=green, label=string];
d90 -> d72  [key=1, style=dashed, color=green, label="System.StringComparer"];
d73 -> d71  [key=0, style=bold, color=blue];
d75 -> d76  [key=0, style=solid, color=green];
d75 -> d77  [key=2, style=dotted, color=green];
d76 -> d74  [key=0, style=bold, color=blue];
d78 -> d79  [key=0, style=solid, color=green];
d78 -> d80  [key=2, style=dotted, color=green];
d78 -> d81  [key=2, style=dotted, color=green];
d79 -> d29  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=red];
m0_1 -> m0_2  [key=0, style=solid, color=red];
m0_1 -> m0_4  [key=2, style=dotted, color=red];
m0_2 -> m0_3  [key=0, style=solid, color=red];
m0_2 -> m0_5  [key=2, style=dotted, color=red];
m0_2 -> m0_6  [key=2, style=dotted, color=red];
m0_2 -> m0_7  [key=2, style=dotted, color=red];
m0_2 -> m0_8  [key=1, style=dashed, color=red, label="lambda expression"];
m0_2 -> m0_11  [key=1, style=dashed, color=red, label="lambda expression"];
m0_2 -> m0_14  [key=1, style=dashed, color=red, label="lambda expression"];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_17  [key=0, style=solid, color=red];
m0_4 -> m0_18  [key=0, style=bold, color=crimson];
m0_4 -> m0_22  [key=0, style=bold, color=crimson];
m0_4 -> m0_23  [key=0, style=bold, color=crimson];
m0_4 -> m0_26  [key=0, style=bold, color=crimson];
m0_4 -> m0_27  [key=0, style=bold, color=crimson];
m0_4 -> m0_28  [key=0, style=bold, color=crimson];
m0_4 -> m0_30  [key=0, style=bold, color=crimson];
m0_4 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_4 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_4 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_4 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_4 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m0_17 -> m0_18  [key=0, style=solid, color=red];
m0_17 -> m0_19  [key=0, style=solid, color=red];
m0_17 -> d27  [key=2, style=dotted, color=red];
m0_18 -> m0_19  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_39  [key=2, style=dotted];
m0_22 -> m0_40  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_48  [key=2, style=dotted];
m0_26 -> m0_49  [key=2, style=dotted];
m0_26 -> m0_40  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_50  [key=2, style=dotted];
m0_28 -> m0_51  [key=2, style=dotted];
m0_28 -> m0_49  [key=2, style=dotted];
m0_28 -> m0_40  [key=2, style=dotted];
m0_28 -> m0_36  [key=2, style=dotted];
m0_28 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_30 -> m0_29  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_33  [key=2, style=dotted];
m0_19 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_19 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_19 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_19 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_19 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=pt];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_34  [key=2, style=dotted];
m0_20 -> m0_35  [key=2, style=dotted];
m0_20 -> m0_36  [key=2, style=dotted];
m0_20 -> m0_37  [key=2, style=dotted];
m0_20 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_20 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=taken];
m0_20 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=taken];
m0_20 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=taken];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_41  [key=2, style=dotted];
m0_24 -> m0_42  [key=2, style=dotted];
m0_24 -> m0_43  [key=2, style=dotted];
m0_24 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_28  [key=0, style=solid];
m0_25 -> m0_44  [key=2, style=dotted];
m0_25 -> m0_45  [key=2, style=dotted];
m0_25 -> m0_46  [key=2, style=dotted];
m0_25 -> m0_41  [key=2, style=dotted];
m0_25 -> m0_47  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=0, style=solid];
m0_29 -> m0_41  [key=2, style=dotted];
m0_29 -> m0_46  [key=2, style=dotted];
m0_29 -> m0_4  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_24  [key=0, style=solid];
m0_21 -> m0_38  [key=2, style=dotted];
m0_31 -> m0_4  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid, color=red];
m0_11 -> m0_12  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid, color=red];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_11  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_16 -> m0_14  [key=0, style=bold, color=blue];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=2, style=dotted];
m0_60 -> m0_63  [key=2, style=dotted];
m0_60 -> m0_64  [key=2, style=dotted];
m0_60 -> m0_40  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_55 -> m0_56  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_54 -> m0_52  [key=0, style=bold, color=blue];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_58  [key=2, style=dotted];
m0_57 -> m0_55  [key=0, style=bold, color=blue];
m0_61 -> m0_59  [key=0, style=bold, color=blue];
m0_75 -> m0_76  [key=0, style=solid, color=red];
m0_76 -> m0_77  [key=0, style=solid, color=red];
m0_76 -> m0_44  [key=2, style=dotted, color=red];
m0_76 -> m0_48  [key=2, style=dotted, color=red];
m0_76 -> m0_49  [key=2, style=dotted, color=red];
m0_76 -> m0_64  [key=2, style=dotted, color=red];
m0_77 -> m0_75  [key=0, style=bold, color=blue];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_65 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_69  [key=0, style=solid];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_72  [key=0, style=solid];
m0_70 -> m0_44  [key=2, style=dotted];
m0_71 -> m0_73  [key=0, style=solid];
m0_71 -> m0_74  [key=2, style=dotted];
m0_71 -> m0_62  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_68 -> m0_73  [key=0, style=solid];
m0_68 -> m0_49  [key=2, style=dotted];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_64  [key=2, style=dotted];
m0_73 -> m0_65  [key=0, style=bold, color=blue];
m0_78 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid, color=red];
m1_1 -> m1_4  [key=0, style=solid, color=green];
m1_2 -> m1_3  [key=0, style=solid, color=red];
m1_3 -> m1_4  [key=0, style=solid, color=red];
m1_4 -> m1_0  [key=0, style=bold, color=blue];
m1_5 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ValueAttribute"];
m1_5 -> m1_2  [key=1, style=dashed, color=red, label="CommandLine.ValueAttribute"];
m1_5 -> m1_3  [key=1, style=dashed, color=red, label="CommandLine.ValueAttribute"];
}
