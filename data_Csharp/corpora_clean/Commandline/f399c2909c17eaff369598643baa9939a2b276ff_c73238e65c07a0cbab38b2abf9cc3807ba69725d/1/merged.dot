digraph  {
m0_4 [label="var result = parser.ParseArguments(argumets, options)", span="27-27", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="InstanceBuilder.cs"];
m0_11 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", span="33-33", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="InstanceBuilder.cs"];
m0_15 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", span="50-50", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", file="InstanceBuilder.cs"];
m0_20 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_13 [label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="44-46", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="InstanceBuilder.cs"];
m0_28 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilder.cs"];
m0_16 [label="var options = new FakeOptionsWithSwitches { InputFile = ''input.bin'', HumanReadable = true, IgnoreWarnings = true }", span="52-52", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", file="InstanceBuilder.cs"];
m0_3 [label="var argumets = new[] { ''--source'', @''d:/document.docx'', ''--output'', @''d:/document.xlsx'',\r\n                    ''--headers'', ''1'', ''2'', ''3'', ''4'',              // first array\r\n                    ''--content'', ''5'', ''6'', ''7'', ''8'', ''--verbose''  // second array\r\n                }", span="21-24", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="InstanceBuilder.cs"];
m0_12 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", span="42-42", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="InstanceBuilder.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="15-15", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="InstanceBuilder.cs"];
m0_1 [label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="17-19", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="InstanceBuilder.cs"];
m0_2 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="15-15", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="InstanceBuilder.cs"];
m0_6 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="24-24", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="InstanceBuilder.cs"];
m0_7 [label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="26-28", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="InstanceBuilder.cs"];
m0_8 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="24-24", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="InstanceBuilder.cs"];
m0_9 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", span="33-33", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="InstanceBuilder.cs"];
m0_5 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilder.cs"];
m0_10 [label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="35-37", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="InstanceBuilder.cs"];
m0_17 [label="Entry Unk.ContainInOrder", span="", cluster="Unk.ContainInOrder", color=green, community=0, file="InstanceBuilder.cs"];
m0_18 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_29 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_21 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_19 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", file="InstanceBuilder.cs"];
m0_22 [label="config.GroupSwitches = true", span="54-54", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_23 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_30 [label="config.UseEqualToken = true", span="63-63", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_31 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="InstanceBuilder.cs"];
m0_14 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="InstanceBuilder.cs"];
m0_24 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", span="59-59", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", file="InstanceBuilder.cs"];
m0_26 [label="new Parser()\r\n                .FormatCommandLine(options, config => config.UseEqualToken = true)\r\n                .ShouldBeEquivalentTo(''-i 1 2 3 --stringvalue=nospaces -x 123456789'')", span="62-64", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", file="InstanceBuilder.cs"];
m0_25 [label="var options = new FakeOptions { BoolValue = true, IntSequence = new[] { 1, 2, 3 }, StringValue = ''nospaces'', LongValue = 123456789 }", span="61-61", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", file="InstanceBuilder.cs"];
m0_27 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", span="59-59", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", file="InstanceBuilder.cs"];
m2_0 [label="Entry CommandLine.NullInstance.NullInstance()", span="9-9", cluster="CommandLine.NullInstance.NullInstance()", file="InstanceBuilder_new.cs"];
m2_1 [label="Exit CommandLine.NullInstance.NullInstance()", span="9-9", cluster="CommandLine.NullInstance.NullInstance()", file="InstanceBuilder_new.cs"];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_13  [key=2, style=dotted];
m0_11 -> m0_9  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_20 -> m0_18  [key=0, style=bold, color=blue];
m0_13 -> m0_3  [key=2, style=dotted];
m0_13 -> m0_5  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_4  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid, color=green];
m0_16 -> m0_19  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_11  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_12  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=parser];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_16  [key=2, style=dotted];
m0_6 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_14  [key=2, style=dotted];
m0_7 -> m0_17  [key=2, style=dotted];
m0_7 -> m0_3  [key=2, style=dotted];
m0_7 -> m0_5  [key=2, style=dotted];
m0_7 -> m0_4  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_14  [key=2, style=dotted];
m0_8 -> m0_16  [key=2, style=dotted];
m0_8 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_8 -> m0_6  [key=0, style=bold, color=blue];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_14  [key=2, style=dotted];
m0_9 -> m0_17  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_14  [key=2, style=dotted];
m0_5 -> m0_15  [key=2, style=dotted];
m0_10 -> m0_0  [key=0, style=bold, color=blue];
m0_10 -> m0_3  [key=2, style=dotted];
m0_10 -> m0_5  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_4  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid, color=green];
m0_17 -> m0_3  [key=2, style=dotted, color=green];
m0_17 -> m0_20  [key=2, style=dotted, color=green];
m0_17 -> m0_5  [key=2, style=dotted, color=green];
m0_17 -> m0_21  [key=1, style=dashed, color=green, label="lambda expression"];
m0_18 -> m0_15  [key=0, style=bold, color=blue];
m0_18 -> m0_19  [key=0, style=solid];
m0_29 -> m0_30  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m0_30 -> m0_31  [key=0, style=solid];
m0_31 -> m0_29  [key=0, style=bold, color=blue];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid];
m0_26 -> m0_3  [key=2, style=dotted];
m0_26 -> m0_20  [key=2, style=dotted];
m0_26 -> m0_5  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_28  [key=2, style=dotted];
m0_27 -> m0_24  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
}
