digraph  {
n41 [label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
n42 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", span=""];
n43 [label="System.StringComparer", span=""];
n44 [label="CommandLine.Core.SpecificationProperty", span=""];
n0 [label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", span="13-13", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)"];
n1 [label="var sequencesAndErrors = propertyTuples\r\n                .Select(pt =>\r\n                    options.SingleOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))\r\n                )", span="19-35", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", color=red, community=0];
n8 [label="options.SingleOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))", span="21-34", cluster="lambda expression", color=red, community=0];
n16 [label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", span="23-23", cluster="lambda expression"];
n20 [label="converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification)))))", span="26-33", cluster="lambda expression", color=red, community=0];
n2 [label="return StatePair.Create(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="36-38", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)"];
n4 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n7 [label="Entry lambda expression", span="20-34", cluster="lambda expression"];
n3 [label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", span="13-13", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)"];
n5 [label="Entry Unk.>", span="", cluster="Unk.>"];
n6 [label="Entry Unk.Create", span="", cluster="Unk.Create"];
n32 [label="Entry lambda expression", span="37-37", cluster="lambda expression"];
n35 [label="Entry lambda expression", span="38-38", cluster="lambda expression"];
n38 [label="Entry lambda expression", span="38-38", cluster="lambda expression"];
n29 [label="Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>())", span="28-30", cluster="lambda expression"];
n9 [label="Exit lambda expression", span="20-34", cluster="lambda expression"];
n10 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault"];
n11 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe"];
n12 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n13 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)"];
n14 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
n15 [label="Entry lambda expression", span="22-23", cluster="lambda expression"];
n19 [label="Entry lambda expression", span="25-33", cluster="lambda expression"];
n17 [label="Exit lambda expression", span="22-23", cluster="lambda expression"];
n18 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)"];
n21 [label="Exit lambda expression", span="25-33", cluster="lambda expression"];
n22 [label="Entry System.Type.IsScalar()", span="33-33", cluster="System.Type.IsScalar()"];
n23 [label="Entry Unk.converter", span="", cluster="Unk.converter"];
n24 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
n25 [label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60", cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)"];
n26 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n27 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)"];
n28 [label="Entry lambda expression", span="27-30", cluster="lambda expression"];
n30 [label="Exit lambda expression", span="27-30", cluster="lambda expression"];
n31 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)"];
n33 [label="se.Item1", span="37-37", cluster="lambda expression"];
n34 [label="Exit lambda expression", span="37-37", cluster="lambda expression"];
n36 [label="se.Item2", span="38-38", cluster="lambda expression"];
n37 [label="Exit lambda expression", span="38-38", cluster="lambda expression"];
n39 [label="se.Value", span="38-38", cluster="lambda expression"];
n40 [label="Exit lambda expression", span="38-38", cluster="lambda expression"];
d4 [label="this.max = max", span="33-33", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", color=green, community=0];
d32 [label="CommandLine.Core.Specification", span=""];
d0 [label="Entry CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="28-28", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)"];
d3 [label="this.min = min", span="32-32", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)"];
d5 [label="this.defaultValue = defaultValue", span="35-35", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)"];
d1 [label="this.tag = tag", span="30-30", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)"];
d2 [label="this.required = required", span="31-31", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)"];
d6 [label="this.conversionType = conversionType", span="36-36", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)"];
d7 [label="Exit CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="28-28", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)"];
m0_4 [label="Entry Ninject.Infrastructure.Ensure.ArgumentNotNullOrEmpty(string, string)", span="22-22", cluster="Ninject.Infrastructure.Ensure.ArgumentNotNullOrEmpty(string, string)", file="ParserTests.cs"];
m0_10 [label="Entry Ninject.Planning.Bindings.BindingMetadata.Get<T>(string, T)", span="59-59", cluster="Ninject.Planning.Bindings.BindingMetadata.Get<T>(string, T)", file="ParserTests.cs"];
m0_11 [label="Ensure.ArgumentNotNullOrEmpty(key, ''key'')", span="61-61", cluster="Ninject.Planning.Bindings.BindingMetadata.Get<T>(string, T)", file="ParserTests.cs"];
m0_12 [label="return _values.ContainsKey(key) ? (T)_values[key] : defaultValue;", span="62-62", cluster="Ninject.Planning.Bindings.BindingMetadata.Get<T>(string, T)", file="ParserTests.cs"];
m0_13 [label="Exit Ninject.Planning.Bindings.BindingMetadata.Get<T>(string, T)", span="59-59", cluster="Ninject.Planning.Bindings.BindingMetadata.Get<T>(string, T)", file="ParserTests.cs"];
m0_6 [label="Entry Ninject.Planning.Bindings.BindingMetadata.Get<T>(string)", span="47-47", cluster="Ninject.Planning.Bindings.BindingMetadata.Get<T>(string)", file="ParserTests.cs"];
m0_7 [label="Ensure.ArgumentNotNullOrEmpty(key, ''key'')", span="49-49", cluster="Ninject.Planning.Bindings.BindingMetadata.Get<T>(string)", file="ParserTests.cs"];
m0_8 [label="return Get(key, default(T));", span="50-50", cluster="Ninject.Planning.Bindings.BindingMetadata.Get<T>(string)", file="ParserTests.cs"];
m0_9 [label="Exit Ninject.Planning.Bindings.BindingMetadata.Get<T>(string)", span="47-47", cluster="Ninject.Planning.Bindings.BindingMetadata.Get<T>(string)", file="ParserTests.cs"];
m0_5 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="ParserTests.cs"];
m0_0 [label="Entry Ninject.Planning.Bindings.BindingMetadata.Has(string)", span="35-35", cluster="Ninject.Planning.Bindings.BindingMetadata.Has(string)", file="ParserTests.cs"];
m0_1 [label="Ensure.ArgumentNotNullOrEmpty(key, ''key'')", span="37-37", cluster="Ninject.Planning.Bindings.BindingMetadata.Has(string)", file="ParserTests.cs"];
m0_2 [label="return _values.ContainsKey(key);", span="38-38", cluster="Ninject.Planning.Bindings.BindingMetadata.Has(string)", file="ParserTests.cs"];
m0_3 [label="Exit Ninject.Planning.Bindings.BindingMetadata.Has(string)", span="35-35", cluster="Ninject.Planning.Bindings.BindingMetadata.Has(string)", file="ParserTests.cs"];
m0_14 [label="Entry Ninject.Planning.Bindings.BindingMetadata.Set(string, object)", span="70-70", cluster="Ninject.Planning.Bindings.BindingMetadata.Set(string, object)", file="ParserTests.cs"];
m0_15 [label="Ensure.ArgumentNotNullOrEmpty(key, ''key'')", span="72-72", cluster="Ninject.Planning.Bindings.BindingMetadata.Set(string, object)", file="ParserTests.cs"];
m0_16 [label="_values[key] = value", span="73-73", cluster="Ninject.Planning.Bindings.BindingMetadata.Set(string, object)", file="ParserTests.cs"];
m0_17 [label="Exit Ninject.Planning.Bindings.BindingMetadata.Set(string, object)", span="70-70", cluster="Ninject.Planning.Bindings.BindingMetadata.Set(string, object)", file="ParserTests.cs"];
m0_18 [label="Ninject.Planning.Bindings.BindingMetadata", span="", file="ParserTests.cs"];
n41 -> n8  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
n42 -> n8  [key=1, style=dashed, color=red, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>"];
n42 -> n20  [key=1, style=dashed, color=red, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>"];
n43 -> n8  [key=1, style=dashed, color=red, label="System.StringComparer"];
n43 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n44 -> n16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
n44 -> n20  [key=1, style=dashed, color=red, label="CommandLine.Core.SpecificationProperty"];
n44 -> n29  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
n0 -> n1  [key=0, style=solid, color=red];
n0 -> n8  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
n0 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n20  [key=1, style=dashed, color=red, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>"];
n1 -> n2  [key=0, style=solid, color=red];
n1 -> n4  [key=2, style=dotted, color=red];
n1 -> n7  [key=1, style=dashed, color=red, label="lambda expression"];
n1 -> n1  [key=3, color=red, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> "];
n8 -> n9  [key=0, style=solid, color=red];
n8 -> n10  [key=2, style=dotted, color=red];
n8 -> n11  [key=2, style=dotted, color=red];
n8 -> n12  [key=2, style=dotted, color=red];
n8 -> n13  [key=2, style=dotted, color=red];
n8 -> n14  [key=2, style=dotted, color=red];
n8 -> n15  [key=1, style=dashed, color=red, label="lambda expression"];
n8 -> n19  [key=1, style=dashed, color=red, label="lambda expression"];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=2, style=dotted];
n16 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n20 -> n21  [key=0, style=solid, color=red];
n20 -> n22  [key=2, style=dotted, color=red];
n20 -> n23  [key=2, style=dotted, color=red];
n20 -> n24  [key=2, style=dotted, color=red];
n20 -> n25  [key=2, style=dotted, color=red];
n20 -> n26  [key=2, style=dotted, color=red];
n20 -> n13  [key=2, style=dotted, color=red];
n20 -> n27  [key=2, style=dotted, color=red];
n20 -> n28  [key=1, style=dashed, color=red, label="lambda expression"];
n2 -> n3  [key=0, style=solid];
n2 -> n4  [key=2, style=dotted];
n2 -> n5  [key=2, style=dotted];
n2 -> n6  [key=2, style=dotted];
n2 -> n32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n1  [key=3, color=red, style=bold, label="Parameter variable System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>> tokenizer"];
n7 -> n8  [key=0, style=solid, color=red];
n7 -> n16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
n7 -> n20  [key=1, style=dashed, color=red, label="CommandLine.Core.SpecificationProperty"];
n7 -> n29  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
n3 -> n0  [key=0, style=bold, color=blue];
n32 -> n33  [key=0, style=solid];
n35 -> n36  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n29 -> n26  [key=2, style=dotted];
n29 -> n31  [key=2, style=dotted];
n29 -> n12  [key=2, style=dotted];
n29 -> n13  [key=2, style=dotted];
n9 -> n7  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n19 -> n20  [key=0, style=solid, color=red];
n17 -> n15  [key=0, style=bold, color=blue];
n21 -> n19  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n30 -> n28  [key=0, style=bold, color=blue];
n33 -> n34  [key=0, style=solid];
n34 -> n32  [key=0, style=bold, color=blue];
n36 -> n37  [key=0, style=solid];
n37 -> n35  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n40 -> n38  [key=0, style=bold, color=blue];
d4 -> d5  [key=0, style=solid, color=green];
d32 -> d4  [key=1, style=dashed, color=green, label="CommandLine.Core.Specification"];
d32 -> d1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d32 -> d2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d32 -> d3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d32 -> d5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d32 -> d6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d0 -> d4  [key=1, style=dashed, color=green, label=int];
d0 -> d1  [key=0, style=solid];
d0 -> d2  [key=1, style=dashed, color=darkseagreen4, label=bool];
d0 -> d3  [key=1, style=dashed, color=darkseagreen4, label=int];
d0 -> d5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<object>"];
d0 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d3 -> d4  [key=0, style=solid, color=green];
d5 -> d6  [key=0, style=solid];
d1 -> d2  [key=0, style=solid];
d2 -> d3  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d7 -> d0  [key=0, style=bold, color=blue];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_10 -> m0_6  [key=3, color=darkorchid, style=bold, label="Parameter variable string key"];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_4  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_5  [key=2, style=dotted];
m0_13 -> m0_10  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_6 -> m0_10  [key=3, color=darkorchid, style=bold, label="method methodReturn T Get"];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_4  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_10  [key=2, style=dotted];
m0_9 -> m0_6  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_5  [key=2, style=dotted];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_4  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_17 -> m0_14  [key=0, style=bold, color=blue];
m0_18 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Planning.Bindings.BindingMetadata"];
m0_18 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Planning.Bindings.BindingMetadata"];
m0_18 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Planning.Bindings.BindingMetadata"];
m0_18 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Planning.Bindings.BindingMetadata"];
}
