digraph  {
m1_40 [label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15", cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="SpecificationPropertyRules.cs"];
m1_138 [label="Entry NameInfo.cstr", span="", cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs"];
m1_4 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m1_8 [label="return specProps =>\r\n            {\r\n                var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0);\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_9 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m1_120 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs"];
m1_6 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="86-86", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m1_108 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="88-104", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_109 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="86-86", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m1_106 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m1_142 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs"];
m1_116 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="SpecificationPropertyRules.cs"];
m1_96 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs"];
m1_17 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SpecificationPropertyRules.cs"];
m1_76 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs"];
m1_21 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs"];
m1_107 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs"];
m1_121 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs"];
m1_7 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="107-107", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_126 [label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="109-127", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_127 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="107-107", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_92 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="SpecificationPropertyRules.cs"];
m1_125 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m1_0 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_1 [label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_2 [label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_128 [label="Entry lambda expression", span="109-127", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_11 [label="var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0)", span="28-31", cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs"];
m1_10 [label="Entry lambda expression", span="26-40", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_12 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_22 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_26 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_30 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_14 [label="return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));", span="35-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_23 [label="sp.Specification.IsOption()", span="29-29", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_24 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_27 [label="sp.Value.IsJust()", span="30-30", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_28 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_31 [label="((OptionSpecification)sp.Specification).SetName.Length > 0", span="31-31", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_32 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_44 [label="var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count()", span="47-52", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_45 [label="var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()", span="54-59", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_46 [label="var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList()", span="61-80", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_43 [label="Entry lambda expression", span="45-83", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_52 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_55 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_90 [label="((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))", span="72-75", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_58 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_61 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_64 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_47 [label="return missing.Select(sp => new MissingRequiredOptionError(sp.Specification.FromSpecification()));", span="82-82", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_67 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_70 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_73 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_77 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_80 [label="Entry lambda expression", span="67-67", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_83 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_86 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_89 [label="Entry lambda expression", span="71-75", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_93 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_97 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_100 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_91 [label="Exit lambda expression", span="71-75", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_48 [label="Exit lambda expression", span="45-83", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_103 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_53 [label="sp.Specification.IsOption()", span="48-48", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_54 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_56 [label="((OptionSpecification)sp.Specification).SetName", span="49-49", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_57 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_59 [label="sp.Specification.IsOption()", span="55-55", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_60 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_62 [label="sp.Specification.Required", span="56-56", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_63 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_65 [label="((OptionSpecification)sp.Specification).SetName", span="57-57", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_66 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_68 [label="sp.Specification.IsOption()", span="62-62", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_69 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_71 [label="sp.Specification.Required", span="63-63", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_72 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_74 [label="sp.Value.IsNothing()", span="64-64", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_75 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_78 [label="((OptionSpecification)sp.Specification).SetName.Length == 0", span="65-65", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_79 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_81 [label="sp.Specification.IsOption()", span="67-67", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_82 [label="Exit lambda expression", span="67-67", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_84 [label="sp.Specification.Required", span="68-68", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_85 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_87 [label="sp.Value.IsNothing()", span="69-69", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_88 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_94 [label="sp.Specification.IsValue()", span="78-78", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_95 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_98 [label="sp.Specification.Required", span="79-79", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_99 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_101 [label="sp.Value.IsNothing()", span="80-80", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_102 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_104 [label="new MissingRequiredOptionError(sp.Specification.FromSpecification())", span="82-82", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_105 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_111 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="90-97", cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_110 [label="Entry lambda expression", span="88-104", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_112 [label="options.Any()", span="98-98", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_117 [label="Entry lambda expression", span="91-96", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_113 [label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));", span="100-101", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_118 [label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="91-96", cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs"];
m1_119 [label="Exit lambda expression", span="91-96", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_16 [label="Exit lambda expression", span="26-40", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_13 [label="groups.Count() > 1", span="33-33", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_33 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_130 [label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="114-118", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_36 [label="Entry lambda expression", span="35-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_129 [label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="111-113", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_131 [label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="119-122", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_123 [label="new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification())", span="100-101", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_115 [label="Exit lambda expression", span="88-104", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_114 [label="return Enumerable.Empty<Error>();", span="103-103", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_122 [label="Entry lambda expression", span="100-101", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_15 [label="return Enumerable.Empty<Error>();", span="39-39", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_35 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_34 [label="((OptionSpecification)g.Specification).SetName", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_139 [label="Entry lambda expression", span="114-114", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_38 [label="Exit lambda expression", span="35-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_37 [label="new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification())", span="36-37", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_132 [label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="123-125", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_124 [label="Exit lambda expression", span="100-101", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_141 [label="Exit lambda expression", span="114-114", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_140 [label="t.IsName()", span="114-114", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_133 [label="return errors;", span="126-126", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_134 [label="Exit lambda expression", span="109-127", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_137 [label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m1_51 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="SpecificationPropertyRules.cs"];
m1_5 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m1_41 [label="return specProps =>\r\n            {\r\n                var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count();\r\n\r\n                var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList();\r\n\r\n                var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList();\r\n\r\n                return missing.Select(sp => new MissingRequiredOptionError(sp.Specification.FromSpecification()));\r\n            };", span="45-83", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, file="SpecificationPropertyRules.cs"];
m1_42 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m1_20 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SpecificationPropertyRules.cs"];
m1_29 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust", file="SpecificationPropertyRules.cs"];
m1_135 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs"];
m1_50 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SpecificationPropertyRules.cs"];
m1_136 [label="Entry Unk.DefaultIfEmpty", span="", cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs"];
m1_39 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m1_25 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs"];
m1_3 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs"];
m1_49 [label="Entry Unk.Distinct", span="", cluster="Unk.Distinct", file="SpecificationPropertyRules.cs"];
m1_18 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs"];
m1_19 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="SpecificationPropertyRules.cs"];
m1_143 [label=setCount, span="", file="SpecificationPropertyRules.cs"];
m1_144 [label=setWithRequired, span="", file="SpecificationPropertyRules.cs"];
m1_145 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="SpecificationPropertyRules.cs"];
m1_4 -> m1_8  [key=0, style=solid, color=green];
m1_8 -> m1_9  [key=0, style=solid, color=green];
m1_8 -> m1_11  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_9 -> m1_4  [key=0, style=bold, color=blue];
m1_6 -> m1_108  [key=0, style=solid, color=green];
m1_108 -> m1_109  [key=0, style=solid, color=green];
m1_108 -> m1_111  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_109 -> m1_6  [key=0, style=bold, color=blue];
m1_7 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_7 -> m1_126  [key=0, style=solid];
m1_126 -> m1_129  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_126 -> m1_126  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> "];
m1_126 -> m1_127  [key=0, style=solid];
m1_127 -> m1_7  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_5  [key=2, style=dotted];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_128 -> m1_129  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid, color=green];
m1_11 -> m1_17  [key=2, style=dotted, color=green];
m1_11 -> m1_22  [key=1, style=dashed, color=green, label="lambda expression"];
m1_11 -> m1_26  [key=1, style=dashed, color=green, label="lambda expression"];
m1_11 -> m1_30  [key=1, style=dashed, color=green, label="lambda expression"];
m1_11 -> m1_14  [key=1, style=dashed, color=green, label=options];
m1_10 -> m1_11  [key=0, style=solid, color=green];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_18  [key=2, style=dotted];
m1_12 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_22 -> m1_23  [key=0, style=solid, color=green];
m1_26 -> m1_27  [key=0, style=solid, color=green];
m1_30 -> m1_31  [key=0, style=solid, color=green];
m1_14 -> m1_16  [key=0, style=solid];
m1_14 -> m1_20  [key=2, style=dotted];
m1_14 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_23 -> m1_24  [key=0, style=solid, color=green];
m1_23 -> m1_25  [key=2, style=dotted, color=green];
m1_24 -> m1_22  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid, color=green];
m1_27 -> m1_29  [key=2, style=dotted, color=green];
m1_28 -> m1_26  [key=0, style=bold, color=blue];
m1_31 -> m1_32  [key=0, style=solid, color=green];
m1_32 -> m1_30  [key=0, style=bold, color=blue];
m1_44 -> m1_45  [key=0, style=solid, color=green];
m1_44 -> m1_17  [key=2, style=dotted, color=green];
m1_44 -> m1_20  [key=2, style=dotted, color=green];
m1_44 -> m1_49  [key=2, style=dotted, color=green];
m1_44 -> m1_50  [key=2, style=dotted, color=green];
m1_44 -> m1_19  [key=2, style=dotted, color=green];
m1_44 -> m1_52  [key=1, style=dashed, color=green, label="lambda expression"];
m1_44 -> m1_55  [key=1, style=dashed, color=green, label="lambda expression"];
m1_44 -> m1_46  [key=1, style=dashed, color=green, label=setCount];
m1_44 -> m1_90  [key=1, style=dashed, color=green, label=setCount];
m1_45 -> m1_46  [key=0, style=solid, color=green];
m1_45 -> m1_17  [key=2, style=dotted, color=green];
m1_45 -> m1_20  [key=2, style=dotted, color=green];
m1_45 -> m1_49  [key=2, style=dotted, color=green];
m1_45 -> m1_50  [key=2, style=dotted, color=green];
m1_45 -> m1_58  [key=1, style=dashed, color=green, label="lambda expression"];
m1_45 -> m1_61  [key=1, style=dashed, color=green, label="lambda expression"];
m1_45 -> m1_64  [key=1, style=dashed, color=green, label="lambda expression"];
m1_45 -> m1_90  [key=1, style=dashed, color=green, label=setWithRequired];
m1_46 -> m1_47  [key=0, style=solid, color=green];
m1_46 -> m1_17  [key=2, style=dotted, color=green];
m1_46 -> m1_51  [key=2, style=dotted, color=green];
m1_46 -> m1_50  [key=2, style=dotted, color=green];
m1_46 -> m1_67  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_70  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_73  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_77  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_80  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_83  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_86  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_89  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_93  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_97  [key=1, style=dashed, color=green, label="lambda expression"];
m1_46 -> m1_100  [key=1, style=dashed, color=green, label="lambda expression"];
m1_43 -> m1_44  [key=0, style=solid, color=green];
m1_43 -> m1_45  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_43 -> m1_46  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_52 -> m1_53  [key=0, style=solid, color=green];
m1_55 -> m1_56  [key=0, style=solid, color=green];
m1_90 -> m1_91  [key=0, style=solid, color=green];
m1_90 -> m1_92  [key=2, style=dotted, color=green];
m1_58 -> m1_59  [key=0, style=solid, color=green];
m1_61 -> m1_62  [key=0, style=solid, color=green];
m1_64 -> m1_65  [key=0, style=solid, color=green];
m1_47 -> m1_48  [key=0, style=solid, color=green];
m1_47 -> m1_20  [key=2, style=dotted, color=green];
m1_47 -> m1_103  [key=1, style=dashed, color=green, label="lambda expression"];
m1_67 -> m1_68  [key=0, style=solid, color=green];
m1_70 -> m1_71  [key=0, style=solid, color=green];
m1_73 -> m1_74  [key=0, style=solid, color=green];
m1_77 -> m1_78  [key=0, style=solid, color=green];
m1_80 -> m1_81  [key=0, style=solid, color=green];
m1_83 -> m1_84  [key=0, style=solid, color=green];
m1_86 -> m1_87  [key=0, style=solid, color=green];
m1_89 -> m1_90  [key=0, style=solid, color=green];
m1_93 -> m1_94  [key=0, style=solid, color=green];
m1_97 -> m1_98  [key=0, style=solid, color=green];
m1_100 -> m1_101  [key=0, style=solid, color=green];
m1_91 -> m1_89  [key=0, style=bold, color=blue];
m1_48 -> m1_43  [key=0, style=bold, color=blue];
m1_103 -> m1_104  [key=0, style=solid, color=green];
m1_53 -> m1_54  [key=0, style=solid, color=green];
m1_53 -> m1_25  [key=2, style=dotted, color=green];
m1_54 -> m1_52  [key=0, style=bold, color=blue];
m1_56 -> m1_57  [key=0, style=solid, color=green];
m1_57 -> m1_55  [key=0, style=bold, color=blue];
m1_59 -> m1_60  [key=0, style=solid, color=green];
m1_59 -> m1_25  [key=2, style=dotted, color=green];
m1_60 -> m1_58  [key=0, style=bold, color=blue];
m1_62 -> m1_63  [key=0, style=solid, color=green];
m1_63 -> m1_61  [key=0, style=bold, color=blue];
m1_65 -> m1_66  [key=0, style=solid, color=green];
m1_66 -> m1_64  [key=0, style=bold, color=blue];
m1_68 -> m1_69  [key=0, style=solid, color=green];
m1_68 -> m1_25  [key=2, style=dotted, color=green];
m1_69 -> m1_67  [key=0, style=bold, color=blue];
m1_71 -> m1_72  [key=0, style=solid, color=green];
m1_72 -> m1_70  [key=0, style=bold, color=blue];
m1_74 -> m1_75  [key=0, style=solid, color=green];
m1_74 -> m1_76  [key=2, style=dotted, color=green];
m1_75 -> m1_73  [key=0, style=bold, color=blue];
m1_78 -> m1_79  [key=0, style=solid, color=green];
m1_79 -> m1_77  [key=0, style=bold, color=blue];
m1_81 -> m1_82  [key=0, style=solid, color=green];
m1_81 -> m1_25  [key=2, style=dotted, color=green];
m1_82 -> m1_80  [key=0, style=bold, color=blue];
m1_84 -> m1_85  [key=0, style=solid, color=green];
m1_85 -> m1_83  [key=0, style=bold, color=blue];
m1_87 -> m1_88  [key=0, style=solid, color=green];
m1_87 -> m1_76  [key=2, style=dotted, color=green];
m1_88 -> m1_86  [key=0, style=bold, color=blue];
m1_94 -> m1_95  [key=0, style=solid, color=green];
m1_94 -> m1_96  [key=2, style=dotted, color=green];
m1_95 -> m1_93  [key=0, style=bold, color=blue];
m1_98 -> m1_99  [key=0, style=solid, color=green];
m1_99 -> m1_97  [key=0, style=bold, color=blue];
m1_101 -> m1_102  [key=0, style=solid, color=green];
m1_101 -> m1_76  [key=2, style=dotted, color=green];
m1_102 -> m1_100  [key=0, style=bold, color=blue];
m1_104 -> m1_105  [key=0, style=solid, color=green];
m1_104 -> m1_106  [key=2, style=dotted, color=green];
m1_104 -> m1_107  [key=2, style=dotted, color=green];
m1_105 -> m1_103  [key=0, style=bold, color=blue];
m1_111 -> m1_112  [key=0, style=solid, color=green];
m1_111 -> m1_17  [key=2, style=dotted, color=green];
m1_111 -> m1_117  [key=1, style=dashed, color=green, label="lambda expression"];
m1_111 -> m1_113  [key=1, style=dashed, color=green, label=options];
m1_110 -> m1_111  [key=0, style=solid, color=green];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_114  [key=0, style=solid];
m1_112 -> m1_116  [key=2, style=dotted];
m1_117 -> m1_118  [key=0, style=solid, color=green];
m1_113 -> m1_20  [key=2, style=dotted];
m1_113 -> m1_115  [key=0, style=solid];
m1_113 -> m1_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_118 -> m1_119  [key=0, style=solid, color=green];
m1_118 -> m1_120  [key=2, style=dotted, color=green];
m1_118 -> m1_121  [key=2, style=dotted, color=green];
m1_119 -> m1_117  [key=0, style=bold, color=blue];
m1_16 -> m1_10  [key=0, style=bold, color=blue];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_19  [key=2, style=dotted];
m1_13 -> m1_15  [key=0, style=solid];
m1_33 -> m1_34  [key=0, style=solid];
m1_130 -> m1_17  [key=2, style=dotted];
m1_130 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_135  [key=2, style=dotted];
m1_130 -> m1_136  [key=2, style=dotted];
m1_130 -> m1_139  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_36 -> m1_37  [key=0, style=solid];
m1_129 -> m1_25  [key=2, style=dotted];
m1_129 -> m1_120  [key=2, style=dotted];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_129  [key=1, style=dashed, color=darkseagreen4, label=sp];
m1_131 -> m1_19  [key=2, style=dotted];
m1_131 -> m1_131  [key=1, style=dashed, color=darkseagreen4, label=x];
m1_131 -> m1_132  [key=0, style=solid];
m1_123 -> m1_107  [key=2, style=dotted];
m1_123 -> m1_124  [key=0, style=solid];
m1_123 -> m1_125  [key=2, style=dotted];
m1_115 -> m1_110  [key=0, style=bold, color=blue];
m1_114 -> m1_115  [key=0, style=solid];
m1_114 -> m1_21  [key=2, style=dotted];
m1_122 -> m1_123  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_21  [key=2, style=dotted];
m1_35 -> m1_33  [key=0, style=bold, color=blue];
m1_34 -> m1_35  [key=0, style=solid];
m1_139 -> m1_140  [key=0, style=solid];
m1_38 -> m1_36  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_39  [key=2, style=dotted];
m1_37 -> m1_40  [key=2, style=dotted];
m1_132 -> m1_132  [key=1, style=dashed, color=darkseagreen4, label=y];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_137  [key=2, style=dotted];
m1_132 -> m1_138  [key=2, style=dotted];
m1_124 -> m1_122  [key=0, style=bold, color=blue];
m1_141 -> m1_139  [key=0, style=bold, color=blue];
m1_140 -> m1_141  [key=0, style=solid];
m1_140 -> m1_142  [key=2, style=dotted];
m1_133 -> m1_134  [key=0, style=solid];
m1_134 -> m1_128  [key=0, style=bold, color=blue];
m1_5 -> m1_41  [key=0, style=solid, color=green];
m1_41 -> m1_42  [key=0, style=solid, color=green];
m1_41 -> m1_44  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_41 -> m1_45  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_41 -> m1_46  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_42 -> m1_5  [key=0, style=bold, color=blue];
m1_143 -> m1_90  [key=1, style=dashed, color=green, label=setCount];
m1_144 -> m1_90  [key=1, style=dashed, color=green, label=setWithRequired];
m1_145 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
}
