digraph  {
n154 [label="System.StringComparer", span=""];
n155 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n156 [label="CSharpx.Maybe<System.Func<T>>", span=""];
n157 [label=specProps, span=""];
n158 [label="System.StringComparer", span=""];
n159 [label=optionSpecs, span=""];
n160 [label="System.Globalization.CultureInfo", span=""];
n161 [label=token, span=""];
n0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
n1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture,\r\n                nonFatalErrors);", span="21-34"];
n5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="25-25"];
n12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="25-25"];
n6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="26-28"];
n16 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="28-28"];
n2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
n3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="23-30"];
n9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
n7 [cluster="lambda expression", label="return explodedTokens;", span="29-29"];
n10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
n15 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n8 [cluster="lambda expression", label="Exit lambda expression", span="23-30"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
n14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27"];
n19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="45-45"];
n23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="56-60"];
n98 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="57-60"];
n24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="arguments.Any()", span="62-62"];
n25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="64-64"];
n28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="71-71"];
n30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="75-77"];
n106 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="77-77"];
n31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="79-83"];
n110 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="82-82"];
n32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="85-88"];
n114 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="88-88"];
n33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="90-92"];
n117 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="92-92"];
n37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="100-100"];
n44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var warnings =\r\n                from e in allErrors where nonFatalErrors.Contains(e.Tag)\r\n                select e", span="137-139"];
n20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="47-48"];
n47 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n86 [cluster="lambda expression", label="Entry lambda expression", span="45-45"];
n36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="typeInfo.IsMutable()", span="98-98"];
n39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="116-116"];
n21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specs = from pt in specProps select pt.Specification", span="50-50"];
n48 [cluster="Unk.GetSpecifications", label="Entry Unk.GetSpecifications", span=""];
n91 [cluster="lambda expression", label="Entry lambda expression", span="47-48"];
n22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="52-54"];
n49 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
n50 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
n27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), preprocessorErrors);", span="67-67"];
n51 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="preprocessorErrors.Any()", span="65-65"];
n52 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
n53 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
n29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var tokens = tokenizerResult.SucceededWith()", span="73-73"];
n58 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var allErrors =\r\n                tokenizerResult\r\n                    .SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                    .Memorize()", span="128-135"];
n59 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
n42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="125-126"];
n60 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
n105 [cluster="lambda expression", label="Entry lambda expression", span="77-77"];
n61 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
n62 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
n109 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
n34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", span="94-95"];
n63 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
n113 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
n64 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
n65 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n66 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
n116 [cluster="lambda expression", label="Entry lambda expression", span="92-92"];
n35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="T instance", span="97-97"];
n67 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="101-112"];
n40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="117-121"];
n68 [cluster="Unk.IsMutable", label="Entry Unk.IsMutable", span=""];
n69 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
n120 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
n71 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n72 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
n41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = (T)ctor.Invoke(values)", span="122-122"];
n73 [cluster="Unk.GetParameters", label="Entry Unk.GetParameters", span=""];
n74 [cluster="Unk.ToLower", label="Entry Unk.ToLower", span=""];
n75 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n76 [cluster="Unk.CreateDefaultForImmutable", label="Entry Unk.CreateDefaultForImmutable", span=""];
n148 [cluster="lambda expression", label="Entry lambda expression", span="119-119"];
n151 [cluster="lambda expression", label="Entry lambda expression", span="120-120"];
n77 [cluster="Unk.Invoke", label="Entry Unk.Invoke", span=""];
n45 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return allErrors\r\n                .Except(warnings)\r\n                .ToParserResult(instance);", span="141-143"];
n70 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
n123 [cluster="lambda expression", label="Entry lambda expression", span="103-103"];
n127 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
n131 [cluster="lambda expression", label="Entry lambda expression", span="106-106"];
n135 [cluster="lambda expression", label="Entry lambda expression", span="107-107"];
n138 [cluster="lambda expression", label="Entry lambda expression", span="109-111"];
n142 [cluster="lambda expression", label="Entry lambda expression", span="112-112"];
n78 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
n79 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
n80 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
n81 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
n82 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
n83 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n46 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
n54 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
n55 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n56 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n57 [cluster="System.Type.ToTypeInfo()", label="Entry System.Type.ToTypeInfo()", span="174-174"];
n84 [cluster="Unk.Except", label="Entry Unk.Except", span=""];
n85 [cluster="Unk.ToParserResult", label="Entry Unk.ToParserResult", span=""];
n87 [cluster="lambda expression", label="f().GetType()", span="45-45"];
n88 [cluster="lambda expression", label="Exit lambda expression", span="45-45"];
n89 [cluster="Unk.f", label="Entry Unk.f", span=""];
n90 [cluster="Unk.GetType", label="Entry Unk.GetType", span=""];
n92 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="47-48"];
n93 [cluster="lambda expression", label="Exit lambda expression", span="47-48"];
n94 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103"];
n95 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n96 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
n97 [cluster="lambda expression", label="Entry lambda expression", span="56-60"];
n99 [cluster="lambda expression", label="Exit lambda expression", span="56-60"];
n100 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="139-139"];
n101 [cluster="Unk.>", label="Entry Unk.>", span=""];
n102 [cluster="lambda expression", label="Entry lambda expression", span="58-58"];
n103 [cluster="lambda expression", label="f()", span="58-58"];
n104 [cluster="lambda expression", label="Exit lambda expression", span="58-58"];
n107 [cluster="lambda expression", label="Exit lambda expression", span="77-77"];
n108 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
n111 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
n112 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
n115 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
n118 [cluster="lambda expression", label="Exit lambda expression", span="92-92"];
n119 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
n121 [cluster="lambda expression", label="f()", span="100-100"];
n122 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
n124 [cluster="lambda expression", label="sp.Value.IsJust()", span="103-103"];
n125 [cluster="lambda expression", label="Exit lambda expression", span="103-103"];
n126 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
n128 [cluster="lambda expression", label="sp.Value.FromJust()", span="104-104"];
n129 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
n130 [cluster="CSharpx.Maybe<T>.FromJust<T>()", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
n132 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="106-106"];
n133 [cluster="lambda expression", label="Exit lambda expression", span="106-106"];
n134 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
n136 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="107-107"];
n137 [cluster="lambda expression", label="Exit lambda expression", span="107-107"];
n139 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="109-111"];
n140 [cluster="lambda expression", label="Exit lambda expression", span="109-111"];
n141 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
n143 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="112-112"];
n144 [cluster="lambda expression", label="Exit lambda expression", span="112-112"];
n145 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n146 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n147 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
n149 [cluster="lambda expression", label=v, span="119-119"];
n150 [cluster="lambda expression", label="Exit lambda expression", span="119-119"];
n152 [cluster="lambda expression", label=d, span="120-120"];
n153 [cluster="lambda expression", label="Exit lambda expression", span="120-120"];
m0_66 [cluster="Unk.SingleOrDefault", file="InstanceChooser.cs", label="Entry Unk.SingleOrDefault", span=""];
m0_28 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="100-100"];
m0_77 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs", label="return new NotParsed<object>(TypeInfo.Create(typeof(NullInstance), types), errors);", span="102-102"];
m0_78 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="100-100"];
m0_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m0_45 [cluster="Unk.>", file="InstanceChooser.cs", label="Entry Unk.>", span=""];
m0_46 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
m0_49 [cluster="Unk.MakeNotParsed", file="InstanceChooser.cs", label="Entry Unk.MakeNotParsed", span=""];
m0_44 [cluster="Unk.Any", file="InstanceChooser.cs", label="Entry Unk.Any", span=""];
m0_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27"];
m0_31 [cluster="System.Func<T, TResult>.Invoke(T)", file="InstanceChooser.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_79 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceChooser.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
m0_48 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="InstanceChooser.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="382-382"];
m0_68 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="InstanceChooser.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="408-408"];
m0_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18"];
m0_35 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="InstanceChooser.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="457-457"];
m0_40 [cluster="System.StringComparer.Equals(string, string)", file="InstanceChooser.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m0_56 [cluster="Unk.Single", file="InstanceChooser.cs", label="Entry Unk.Single", span=""];
m0_67 [cluster="Unk.ToMaybe", file="InstanceChooser.cs", label="Entry Unk.ToMaybe", span=""];
m0_41 [cluster="string.Concat(string, string)", file="InstanceChooser.cs", label="Entry string.Concat(string, string)", span="0-0"];
m0_73 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="95-95"];
m0_5 [cluster="lambda expression", file="InstanceChooser.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24"];
m0_12 [cluster="lambda expression", file="InstanceChooser.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24"];
m0_6 [cluster="lambda expression", file="InstanceChooser.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-25"];
m0_16 [cluster="lambda expression", file="InstanceChooser.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="25-25"];
m0_4 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="22-27"];
m0_11 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="24-24"];
m0_7 [cluster="lambda expression", file="InstanceChooser.cs", label="return explodedTokens;", span="26-26"];
m0_15 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="25-25"];
m0_8 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="22-27"];
m0_13 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="24-24"];
m0_17 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="25-25"];
m0_38 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="51-52"];
m0_37 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="50-52"];
m0_39 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="50-52"];
m0_51 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="73-73"];
m0_54 [cluster="lambda expression", file="InstanceChooser.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="77-77"];
m0_59 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="77-77"];
m0_50 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="73-73"];
m0_53 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="76-77"];
m0_61 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="83-83"];
m0_52 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="73-73"];
m0_55 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="76-77"];
m0_58 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="77-77"];
m0_60 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="77-77"];
m0_62 [cluster="lambda expression", file="InstanceChooser.cs", label="v.Item2", span="83-83"];
m0_63 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="83-83"];
m0_71 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(v.Item1.Name, verb)", span="92-92"];
m0_70 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="92-92"];
m0_72 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="92-92"];
m0_74 [cluster="lambda expression", file="InstanceChooser.cs", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="95-95"];
m0_75 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="95-95"];
m0_29 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_80 [cluster="CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", file="InstanceChooser.cs", label="Entry CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", span="34-34"];
m0_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m0_36 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="65-65"];
m0_42 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture,\r\n                    nonFatalErrors)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="73-83"];
m0_43 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="65-65"];
m0_34 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="86-86"];
m0_64 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs", label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="91-97"];
m0_65 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="86-86"];
m0_47 [cluster="Unk.Select", file="InstanceChooser.cs", label="Entry Unk.Select", span=""];
m0_27 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="InstanceChooser.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="446-446"];
m0_69 [cluster="Unk.Return", file="InstanceChooser.cs", label="Entry Unk.Return", span=""];
m0_57 [cluster="Unk.AutoDefault", file="InstanceChooser.cs", label="Entry Unk.AutoDefault", span=""];
m0_3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="35-35"];
m0_19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="arguments.Empty()", span="43-43"];
m0_20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="return MakeNotParsed(types, new NoVerbSelectedError());", span="45-45"];
m0_21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="var firstArg = arguments.First()", span="48-48"];
m0_22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="50-52"];
m0_23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="var verbs = Verb.SelectFromTypes(types)", span="54-54"];
m0_24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture, nonFatalErrors);", span="56-62"];
m0_25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="35-35"];
m0_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m0_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture,\r\n                nonFatalErrors);", span="21-32"];
m0_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m0_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13"];
m0_30 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m0_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m0_76 [cluster="HelpVerbRequestedError.cstr", file="InstanceChooser.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m0_81 [file="InstanceChooser.cs", label="System.StringComparer", span=""];
m0_82 [file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m0_83 [file="InstanceChooser.cs", label="System.StringComparer", span=""];
m0_84 [file="InstanceChooser.cs", label=firstArg, span=""];
m0_85 [file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m0_86 [file="InstanceChooser.cs", label="System.StringComparer", span=""];
m0_87 [file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m0_88 [file="InstanceChooser.cs", label=string, span=""];
m0_89 [file="InstanceChooser.cs", label="System.StringComparer", span=""];
m1_25 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="KeyValuePairHelper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m1_27 [cluster="Unk.ToKeyValuePair", file="KeyValuePairHelper.cs", label="Entry Unk.ToKeyValuePair", span=""];
m1_3 [cluster="Unk.Select", file="KeyValuePairHelper.cs", label="Entry Unk.Select", span=""];
m1_45 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="KeyValuePairHelper.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m1_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="KeyValuePairHelper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="248-248"];
m1_31 [cluster="object.Equals(object)", file="KeyValuePairHelper.cs", label="Entry object.Equals(object)", span="0-0"];
m1_39 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Entry lambda expression", span="28-28"];
m1_4 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Entry lambda expression", span="13-13"];
m1_5 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="t.Text.ToKeyValuePair(''true'')", span="13-13"];
m1_6 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Exit lambda expression", span="13-13"];
m1_12 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Entry lambda expression", span="19-19"];
m1_13 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="f.Text.ToKeyValuePair(s.Text)", span="19-19"];
m1_14 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Exit lambda expression", span="19-19"];
m1_21 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="f.IsName()\r\n                            ? f.Text.ToKeyValuePair(tokens.SkipWhile(t => !t.Equals(f)).SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : string.Empty.ToKeyValuePair()", span="27-29"];
m1_20 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Entry lambda expression", span="26-29"];
m1_29 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="!t.Equals(f)", span="28-28"];
m1_33 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="t.Equals(f)", span="28-28"];
m1_22 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Exit lambda expression", span="26-29"];
m1_28 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Entry lambda expression", span="28-28"];
m1_32 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Entry lambda expression", span="28-28"];
m1_35 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Entry lambda expression", span="28-28"];
m1_30 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Exit lambda expression", span="28-28"];
m1_34 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Exit lambda expression", span="28-28"];
m1_36 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="v.IsValue()", span="28-28"];
m1_37 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Exit lambda expression", span="28-28"];
m1_40 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="x.Text", span="28-28"];
m1_41 [cluster="lambda expression", file="KeyValuePairHelper.cs", label="Exit lambda expression", span="28-28"];
m1_0 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelper.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m1_1 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelper.cs", label="return tokens.Select(t => t.Text.ToKeyValuePair(''true''));", span="13-13"];
m1_2 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelper.cs", label="Exit CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m1_7 [cluster="string.ToKeyValuePair(params string[])", file="KeyValuePairHelper.cs", label="Entry string.ToKeyValuePair(params string[])", span="34-34"];
m1_26 [cluster="Unk.ToArray", file="KeyValuePairHelper.cs", label="Entry Unk.ToArray", span=""];
m1_42 [cluster="CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", file="KeyValuePairHelper.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", span="34-34"];
m1_43 [cluster="CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", file="KeyValuePairHelper.cs", label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="36-36"];
m1_44 [cluster="CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", file="KeyValuePairHelper.cs", label="Exit CommandLine.Core.KeyValuePairHelper.ToKeyValuePair(string, params string[])", span="34-34"];
m1_8 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelper.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m1_9 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelper.cs", label="return tokens.Pairwise((f, s) => f.Text.ToKeyValuePair(s.Text));", span="19-19"];
m1_10 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelper.cs", label="Exit CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m1_23 [cluster="CommandLine.Core.Token.IsName()", file="KeyValuePairHelper.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m1_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="KeyValuePairHelper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m1_38 [cluster="CommandLine.Core.Token.IsValue()", file="KeyValuePairHelper.cs", label="Entry CommandLine.Core.Token.IsValue()", span="133-133"];
m1_15 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelper.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m1_16 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelper.cs", label="return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? f.Text.ToKeyValuePair(tokens.SkipWhile(t => !t.Equals(f)).SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : string.Empty.ToKeyValuePair())\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", span="25-31"];
m1_17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="KeyValuePairHelper.cs", label="Exit CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m1_18 [cluster="Unk.Pairwise", file="KeyValuePairHelper.cs", label="Entry Unk.Pairwise", span=""];
m1_46 [file="KeyValuePairHelper.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m1_47 [file="KeyValuePairHelper.cs", label="CommandLine.Core.Token", span=""];
m2_8 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22"];
m2_9 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="specification.Tag", span="24-24"];
m2_11 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="return FromOptionSpecification((OptionSpecification)specification);", span="27-27"];
m2_10 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="SpecificationType.Option", span="26-26"];
m2_12 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="return NameInfo.EmptyName;", span="29-29"];
m2_13 [cluster="CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.FromSpecification(CommandLine.Core.Specification)", span="22-22"];
m2_7 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="NameExtensions.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m2_3 [cluster="System.StringComparer.Equals(string, string)", file="NameExtensions.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m2_0 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m2_1 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="return value.Length == 1\r\n               ? comparer.Equals(value, shortName)\r\n               : comparer.Equals(value, longName);", span="10-12"];
m2_2 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m2_4 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15"];
m2_5 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs", label="return new NameInfo(\r\n                specification.LongName,\r\n                specification.ShortName);", span="17-19"];
m2_6 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15"];
m3_11 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute()", span="33-33"];
m3_12 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute()", span="33-33"];
m3_17 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char)", span="61-61"];
m3_18 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char)", span="61-61"];
m3_15 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="52-52"];
m3_16 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char, string)", span="52-52"];
m3_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="OptionAttribute.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_0 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string, string)", span="18-18"];
m3_1 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="shortName == null", span="20-20"];
m3_3 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="longName == null", span="21-21"];
m3_5 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="this.shortName = shortName", span="23-23"];
m3_6 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="this.longName = longName", span="24-24"];
m3_2 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="throw new ArgumentNullException(''shortName'');", span="20-20"];
m3_4 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="throw new ArgumentNullException(''longName'');", span="21-21"];
m3_7 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="setName = string.Empty", span="25-25"];
m3_8 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="separator = '\0'", span="26-26"];
m3_9 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(string, string)", span="18-18"];
m3_13 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="OptionAttribute.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", span="42-42"];
m3_14 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="OptionAttribute.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(string)", span="42-42"];
m3_19 [file="OptionAttribute.cs", label="CommandLine.OptionAttribute", span=""];
m5_16 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="OptionSpecification.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m5_12 [cluster="System.Type.ToTargetType()", file="OptionSpecification.cs", label="Entry System.Type.ToTargetType()", span="71-71"];
m5_0 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m5_1 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionSpecification.cs", label="this.shortName = shortName", span="21-21"];
m5_2 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionSpecification.cs", label="this.longName = longName", span="22-22"];
m5_3 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionSpecification.cs", label="this.separator = separator", span="23-23"];
m5_4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionSpecification.cs", label="this.setName = setName", span="24-24"];
m5_5 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m5_10 [cluster="CSharpx.Maybe.Just<T>(T)", file="OptionSpecification.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m5_11 [cluster="T.ToMaybe<T>()", file="OptionSpecification.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m5_13 [cluster="CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", span="45-45"];
m5_14 [cluster="CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", file="OptionSpecification.cs", label="return new OptionSpecification(shortName, longName, required, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(),\r\n                '\0', Maybe.Nothing<object>(), helpText, metaValue, Enumerable.Empty<string>(), typeof(bool), TargetType.Switch);", span="47-48"];
m5_15 [cluster="CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", span="45-45"];
m5_6 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="27-27"];
m5_7 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Min),\r\n                attribute.Max == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Max),\r\n                attribute.Separator,\r\n                attribute.Default.ToMaybe(),\r\n                attribute.HelpText,\r\n                attribute.MetaValue,\r\n                enumValues,\r\n                conversionType,\r\n                conversionType.ToTargetType());", span="29-42"];
m5_8 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="27-27"];
m5_17 [file="OptionSpecification.cs", label="CommandLine.Core.OptionSpecification", span=""];
m6_0 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="PopsicleSetter.cs", label="Entry CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", span="8-8"];
m6_1 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="PopsicleSetter.cs", label=consumed, span="10-10"];
m6_3 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="PopsicleSetter.cs", label="field = value", span="15-15"];
m6_2 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="PopsicleSetter.cs", label="throw new InvalidOperationException();", span="12-12"];
m6_4 [cluster="CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", file="PopsicleSetter.cs", label="Exit CommandLine.Infrastructure.PopsicleSetter.Set<T>(bool, ref T, T)", span="8-8"];
m6_5 [cluster="System.InvalidOperationException.InvalidOperationException()", file="PopsicleSetter.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m7_11 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="19-20"];
m7_5 [cluster="lambda expression", file="Scalar.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.TargetType == TargetType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="18-21"];
m7_4 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="17-21"];
m7_12 [cluster="lambda expression", file="Scalar.cs", label="info.TargetType == TargetType.Scalar ? new[] { f, s } : new Token[] { }", span="20-20"];
m7_6 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="17-21"];
m7_13 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="19-20"];
m7_0 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m7_1 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.TargetType == TargetType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="16-23"];
m7_2 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs", label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m7_7 [cluster="CommandLine.Core.Token.IsName()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m7_8 [cluster="CommandLine.Core.Token.IsValue()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsValue()", span="133-133"];
m7_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="Scalar.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m7_3 [cluster="Unk.Pairwise", file="Scalar.cs", label="Entry Unk.Pairwise", span=""];
m7_14 [file="Scalar.cs", label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m7_15 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m7_16 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m9_6 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="SpecificationProperty.cs", label="value == null", span="23-23"];
m9_8 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="SpecificationProperty.cs", label="return new SpecificationProperty(specification, property, value);", span="25-25"];
m9_7 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="SpecificationProperty.cs", label="throw new ArgumentNullException(''value'');", span="23-23"];
m9_9 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="SpecificationProperty.cs", label="Exit CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
m9_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SpecificationProperty.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m9_0 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="SpecificationProperty.cs", label="Entry CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="14-14"];
m9_1 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="SpecificationProperty.cs", label="this.property = property", span="16-16"];
m9_2 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="SpecificationProperty.cs", label="this.specification = specification", span="17-17"];
m9_3 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="SpecificationProperty.cs", label="this.value = value", span="18-18"];
m9_4 [cluster="CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="SpecificationProperty.cs", label="Exit CommandLine.Core.SpecificationProperty.SpecificationProperty(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="14-14"];
m9_11 [file="SpecificationProperty.cs", label="CommandLine.Core.SpecificationProperty", span=""];
m11_18 [cluster="CommandLine.Infrastructure.StringExtensions.Spaces(int)", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.Spaces(int)", span="35-35"];
m11_19 [cluster="CommandLine.Infrastructure.StringExtensions.Spaces(int)", file="StringExtensions.cs", label="return new string(' ', value);", span="37-37"];
m11_20 [cluster="CommandLine.Infrastructure.StringExtensions.Spaces(int)", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.Spaces(int)", span="35-35"];
m11_15 [cluster="CommandLine.Infrastructure.StringExtensions.FormatLocal(string, params object[])", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.FormatLocal(string, params object[])", span="30-30"];
m11_16 [cluster="CommandLine.Infrastructure.StringExtensions.FormatLocal(string, params object[])", file="StringExtensions.cs", label="return string.Format(CultureInfo.CurrentCulture, value, arguments);", span="32-32"];
m11_17 [cluster="CommandLine.Infrastructure.StringExtensions.FormatLocal(string, params object[])", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.FormatLocal(string, params object[])", span="30-30"];
m11_3 [cluster="string.String(char, int)", file="StringExtensions.cs", label="Entry string.String(char, int)", span="0-0"];
m11_34 [cluster="System.Text.StringBuilder.StringBuilder(string)", file="StringExtensions.cs", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
m11_35 [cluster="System.Text.StringBuilder.Append(string)", file="StringExtensions.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m11_24 [cluster="string.CompareOrdinal(string, string)", file="StringExtensions.cs", label="Entry string.CompareOrdinal(string, string)", span="0-0"];
m11_37 [cluster="CommandLine.Infrastructure.StringExtensions.IsBooleanString(string)", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.IsBooleanString(string)", span="60-60"];
m11_38 [cluster="CommandLine.Infrastructure.StringExtensions.IsBooleanString(string)", file="StringExtensions.cs", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="62-63"];
m11_39 [cluster="CommandLine.Infrastructure.StringExtensions.IsBooleanString(string)", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.IsBooleanString(string)", span="60-60"];
m11_7 [cluster="System.Convert.ToString(object, System.IFormatProvider)", file="StringExtensions.cs", label="Entry System.Convert.ToString(object, System.IFormatProvider)", span="0-0"];
m11_41 [cluster="CommandLine.Infrastructure.StringExtensions.ToBoolean(string)", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.ToBoolean(string)", span="66-66"];
m11_42 [cluster="CommandLine.Infrastructure.StringExtensions.ToBoolean(string)", file="StringExtensions.cs", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="68-68"];
m11_43 [cluster="CommandLine.Infrastructure.StringExtensions.ToBoolean(string)", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.ToBoolean(string)", span="66-66"];
m11_21 [cluster="CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", span="40-40"];
m11_22 [cluster="CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", file="StringExtensions.cs", label="return string.CompareOrdinal(strA, strB) == 0;", span="42-42"];
m11_23 [cluster="CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.EqualsOrdinal(string, string)", span="40-40"];
m11_8 [cluster="CommandLine.Infrastructure.StringExtensions.ToStringLocal<T>(T)", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.ToStringLocal<T>(T)", span="20-20"];
m11_9 [cluster="CommandLine.Infrastructure.StringExtensions.ToStringLocal<T>(T)", file="StringExtensions.cs", label="return Convert.ToString(value, CultureInfo.CurrentCulture);", span="22-22"];
m11_10 [cluster="CommandLine.Infrastructure.StringExtensions.ToStringLocal<T>(T)", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.ToStringLocal<T>(T)", span="20-20"];
m11_40 [cluster="string.Equals(string, System.StringComparison)", file="StringExtensions.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m11_36 [cluster="System.Text.StringBuilder.ToString()", file="StringExtensions.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m11_28 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", span="50-50"];
m11_29 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="StringExtensions.cs", label="var builder = new StringBuilder(value)", span="52-52"];
m11_30 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="StringExtensions.cs", label=others, span="53-53"];
m11_31 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="StringExtensions.cs", label="builder.Append(v)", span="55-55"];
m11_32 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="StringExtensions.cs", label="return builder.ToString();", span="57-57"];
m11_33 [cluster="CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.JoinTo(string, params string[])", span="50-50"];
m11_25 [cluster="CommandLine.Infrastructure.StringExtensions.SafeLength(string)", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.SafeLength(string)", span="45-45"];
m11_26 [cluster="CommandLine.Infrastructure.StringExtensions.SafeLength(string)", file="StringExtensions.cs", label="return value == null ? 0 : value.Length;", span="47-47"];
m11_27 [cluster="CommandLine.Infrastructure.StringExtensions.SafeLength(string)", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.SafeLength(string)", span="45-45"];
m11_11 [cluster="CommandLine.Infrastructure.StringExtensions.FormatInvariant(string, params object[])", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.FormatInvariant(string, params object[])", span="25-25"];
m11_12 [cluster="CommandLine.Infrastructure.StringExtensions.FormatInvariant(string, params object[])", file="StringExtensions.cs", label="return string.Format(CultureInfo.InvariantCulture, value, arguments);", span="27-27"];
m11_13 [cluster="CommandLine.Infrastructure.StringExtensions.FormatInvariant(string, params object[])", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.FormatInvariant(string, params object[])", span="25-25"];
m11_0 [cluster="CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", span="10-10"];
m11_1 [cluster="CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", file="StringExtensions.cs", label="return new string(c, 1);", span="12-12"];
m11_2 [cluster="CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.ToOneCharString(char)", span="10-10"];
m11_4 [cluster="CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", file="StringExtensions.cs", label="Entry CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", span="15-15"];
m11_5 [cluster="CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", file="StringExtensions.cs", label="return Convert.ToString(value, CultureInfo.InvariantCulture);", span="17-17"];
m11_6 [cluster="CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", file="StringExtensions.cs", label="Exit CommandLine.Infrastructure.StringExtensions.ToStringInvariant<T>(T)", span="15-15"];
m11_14 [cluster="string.Format(System.IFormatProvider, string, params object[])", file="StringExtensions.cs", label="Entry string.Format(System.IFormatProvider, string, params object[])", span="0-0"];
m12_0 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Switch.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m12_1 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Switch.cs", label="return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.TargetType == TargetType.Switch, false)\r\n                   select t;", span="15-17"];
m12_2 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Switch.cs", label="Exit CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m12_5 [cluster="lambda expression", file="Switch.cs", label="Entry lambda expression", span="16-16"];
m12_6 [cluster="lambda expression", file="Switch.cs", label="t.IsName() && info.TargetType == TargetType.Switch", span="16-16"];
m12_7 [cluster="lambda expression", file="Switch.cs", label="Exit lambda expression", span="16-16"];
m12_8 [cluster="CommandLine.Core.Token.IsName()", file="Switch.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m12_3 [cluster="System.Func<T, TResult>.Invoke(T)", file="Switch.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m12_9 [file="Switch.cs", label=t, span=""];
m13_257 [cluster="System.Text.StringBuilder.Append(char)", file="Token.cs", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
m13_102 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="285-285"];
m13_118 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="parserResult == null", span="287-287"];
m13_120 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="current == null", span="288-288"];
m13_122 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="((NotParsed<T>)parserResult).Errors.OnlyMeaningfulOnes().Empty()", span="290-290"];
m13_123 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="return current;", span="291-291"];
m13_124 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="var errors = RenderParsingErrorsTextAsLines(parserResult,\r\n                current.SentenceBuilder.FormatError,\r\n                current.SentenceBuilder.FormatMutuallyExclusiveSetErrors,\r\n                2)", span="293-296"];
m13_126 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="return current;", span="298-298"];
m13_127 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="return current\r\n                .AddPreOptionsLine(\r\n                    string.Concat(Environment.NewLine, current.SentenceBuilder.ErrorsHeadingText()))\r\n                .AddPreOptionsLines(errors);", span="300-303"];
m13_119 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="throw new ArgumentNullException(''parserResult'');", span="287-287"];
m13_121 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="throw new ArgumentNullException(''current'');", span="288-288"];
m13_125 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="errors.Empty()", span="297-297"];
m13_128 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="Token.cs", label="Exit CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="285-285"];
m13_129 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="Token.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m13_48 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Error>.OnlyMeaningfulOnes()", file="Token.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Error>.OnlyMeaningfulOnes()", span="18-18"];
m13_58 [cluster="Unk.Any", file="Token.cs", label="Entry Unk.Any", span=""];
m13_0 [cluster="CommandLine.Text.HelpText.HelpText()", file="Token.cs", label="Entry CommandLine.Text.HelpText.HelpText()", span="36-36"];
m13_1 [cluster="CommandLine.Text.HelpText.HelpText()", file="Token.cs", label="Exit CommandLine.Text.HelpText.HelpText()", span="36-36"];
m13_377 [cluster="string.PadRight(int)", file="Token.cs", label="Entry string.PadRight(int)", span="0-0"];
m13_458 [cluster="T.ToStringInvariant<T>()", file="Token.cs", label="Entry T.ToStringInvariant<T>()", span="15-15"];
m13_322 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="Token.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m13_61 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="389-389"];
m13_174 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="result == null", span="391-391"];
m13_176 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="return AddOptionsImpl(\r\n                GetSpecificationsFromType(result.TypeInfo.Current),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="393-396"];
m13_175 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="throw new ArgumentNullException(''result'');", span="391-391"];
m13_177 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="389-389"];
m13_272 [cluster="System.Text.StringBuilder.SafeToString()", file="Token.cs", label="Entry System.Text.StringBuilder.SafeToString()", span="66-66"];
m13_271 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="Token.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
m13_92 [cluster="CommandLine.TypeInfo.Create(System.Type)", file="Token.cs", label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29"];
m13_400 [cluster="System.Text.StringBuilder.AppendFormat(string, object)", file="Token.cs", label="Entry System.Text.StringBuilder.AppendFormat(string, object)", span="0-0"];
m13_135 [cluster="CommandLine.Text.HelpText.ToString()", file="Token.cs", label="Entry CommandLine.Text.HelpText.ToString()", span="580-580"];
m13_265 [cluster="CommandLine.Text.HelpText.ToString()", file="Token.cs", label="int ExtraLength = 10", span="582-582"];
m13_266 [cluster="CommandLine.Text.HelpText.ToString()", file="Token.cs", label="return\r\n                new StringBuilder(\r\n                    heading.SafeLength() + copyright.SafeLength() + preOptionsHelp.SafeLength() +\r\n                        optionsHelp.SafeLength() + ExtraLength).Append(heading)\r\n                    .AppendWhen(!string.IsNullOrEmpty(copyright), Environment.NewLine, copyright)\r\n                    .AppendWhen(preOptionsHelp.Length > 0, Environment.NewLine, preOptionsHelp.ToString())\r\n                    .AppendWhen(\r\n                        optionsHelp != null && optionsHelp.Length > 0,\r\n                        Environment.NewLine,\r\n                        Environment.NewLine,\r\n                        optionsHelp.SafeToString())\r\n                    .AppendWhen(postOptionsHelp.Length > 0, Environment.NewLine, postOptionsHelp.ToString())\r\n                .ToString();", span="583-595"];
m13_267 [cluster="CommandLine.Text.HelpText.ToString()", file="Token.cs", label="Exit CommandLine.Text.HelpText.ToString()", span="580-580"];
m13_268 [cluster="string.SafeLength()", file="Token.cs", label="Entry string.SafeLength()", span="50-50"];
m13_139 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="333-333"];
m13_140 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="Token.cs", label="return AddLine(postOptionsHelp, value);", span="335-335"];
m13_141 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="333-333"];
m13_270 [cluster="string.IsNullOrEmpty(string)", file="Token.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m13_472 [cluster="string.ToLowerInvariant()", file="Token.cs", label="Entry string.ToLowerInvariant()", span="0-0"];
m13_424 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="Entry CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="840-840"];
m13_427 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="var specLength = 0", span="842-842"];
m13_428 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="var hasShort = spec.ShortName.Length > 0", span="844-844"];
m13_429 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="var hasLong = spec.LongName.Length > 0", span="845-845"];
m13_431 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="spec.MetaValue.Length > 0", span="848-848"];
m13_432 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="metaLength = spec.MetaValue.Length + 1", span="849-849"];
m13_439 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="specLength += spec.LongName.Length", span="862-862"];
m13_434 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="++specLength", span="853-853"];
m13_444 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="specLength += 2", span="870-870"];
m13_445 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="return specLength;", span="872-872"];
m13_433 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label=hasShort, span="851-851"];
m13_443 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="hasShort && hasLong", span="869-869"];
m13_430 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="var metaLength = 0", span="847-847"];
m13_438 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label=hasLong, span="860-860"];
m13_437 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="specLength += metaLength", span="857-857"];
m13_442 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="specLength += metaLength", span="866-866"];
m13_435 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label=AddDashesToOption, span="854-854"];
m13_436 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="++specLength", span="855-855"];
m13_440 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label=AddDashesToOption, span="863-863"];
m13_441 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="specLength += 2", span="864-864"];
m13_446 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="Token.cs", label="Exit CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="840-840"];
m13_258 [cluster="CommandLine.Text.Example.GetFormatStylesOrDefault()", file="Token.cs", label="Entry CommandLine.Text.Example.GetFormatStylesOrDefault()", span="124-124"];
m13_323 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", file="Token.cs", label="return (from verbTuple in Verb.SelectFromTypes(types)\r\n                    select\r\n                        OptionSpecification.NewSwitch(\r\n                            string.Empty,\r\n                            verbTuple.Item1.Name,\r\n                            false,\r\n                            verbTuple.Item1.HelpText,\r\n                            string.Empty)).Concat(new[] { MakeHelpEntry(), MakeVersionEntry() });", span="665-672"];
m13_187 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="663-663"];
m13_324 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="663-663"];
m13_255 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="Token.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m13_379 [cluster="string.Trim()", file="Token.cs", label="Entry string.Trim()", span="0-0"];
m13_269 [cluster="System.Text.StringBuilder.SafeLength()", file="Token.cs", label="Entry System.Text.StringBuilder.SafeLength()", span="73-73"];
m13_325 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="Token.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m13_378 [cluster="string.FormatInvariant(params object[])", file="Token.cs", label="Entry string.FormatInvariant(params object[])", span="25-25"];
m13_23 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Token.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m13_297 [cluster="string.Substring(int)", file="Token.cs", label="Entry string.Substring(int)", span="0-0"];
m13_200 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="458-458"];
m13_201 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="return string.Join(\r\n                Environment.NewLine,\r\n                RenderParsingErrorsTextAsLines(parserResult, formatError, formatMutuallyExclusiveSetErrors, indent));", span="464-466"];
m13_202 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="Exit CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="458-458"];
m13_313 [cluster="System.Type.GetUsageData()", file="Token.cs", label="Entry System.Type.GetUsageData()", span="38-38"];
m13_399 [cluster="System.Text.StringBuilder.AppendWhen(bool, params char[])", file="Token.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params char[])", span="18-18"];
m13_59 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="Token.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m13_256 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", file="Token.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", span="23-23"];
m13_51 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="Token.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="12-12"];
m13_130 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="Entry CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="477-477"];
m13_204 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="parserResult == null", span="483-483"];
m13_208 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="yield break;", span="488-488"];
m13_211 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="yield return line.ToString();", span="495-495"];
m13_216 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="yield return line;", span="506-506"];
m13_206 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="var meaningfulErrors =\r\n                ((NotParsed<T>)parserResult).Errors.OnlyMeaningfulOnes()", span="485-486"];
m13_210 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="var line = new StringBuilder(indent.Spaces())\r\n                    .Append(formatError(error))", span="493-494"];
m13_212 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="var mutuallyErrs = \r\n                formatMutuallyExclusiveSetErrors(\r\n                    meaningfulErrors.OfType<MutuallyExclusiveSetError>())", span="498-500"];
m13_205 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="throw new ArgumentNullException(''parserResult'');", span="483-483"];
m13_207 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="meaningfulErrors.Empty()", span="487-487"];
m13_209 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="meaningfulErrors\r\n                .Where(e => e.Tag != ErrorType.MutuallyExclusiveSetError)", span="490-491"];
m13_213 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="mutuallyErrs.Length > 0", span="501-501"];
m13_214 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="var lines = mutuallyErrs\r\n                    .Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="503-504"];
m13_215 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label=lines, span="505-505"];
m13_217 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="Token.cs", label="Exit CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="477-477"];
m13_338 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="720-720"];
m13_346 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionsHelp.Append(''  '')", span="722-722"];
m13_347 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="var name = new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.Tag == SpecificationType.Option,\r\n                    it => it.Append(AddOptionName(maxLength, (OptionSpecification)specification)),\r\n                    it => it.Append(AddValueName(maxLength, (ValueSpecification)specification)))", span="723-727"];
m13_348 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionsHelp\r\n                .Append(name.Length < maxLength ? name.ToString().PadRight(maxLength) : name.ToString())\r\n                .Append(''    '')", span="729-731"];
m13_349 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="var optionHelpText = specification.HelpText", span="733-733"];
m13_350 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="addEnumValuesToHelpText && specification.EnumValues.Any()", span="735-735"];
m13_351 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionHelpText += '' Valid values: '' + string.Join('', '', specification.EnumValues)", span="736-736"];
m13_352 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="specification.DefaultValue.Do(\r\n                defaultValue => optionHelpText = ''(Default: {0}) ''.FormatInvariant(FormatDefaultValue(defaultValue)) + optionHelpText)", span="738-739"];
m13_353 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="specification.Required", span="741-741"];
m13_354 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionHelpText = ''{0} ''.FormatInvariant(requiredWord) + optionHelpText", span="742-742"];
m13_360 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="words[i].Length < (widthOfHelpText - wordBuffer)", span="752-752"];
m13_363 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="(widthOfHelpText - wordBuffer) > 1 && i != words.Length - 1", span="756-756"];
m13_366 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="words[i].Length >= widthOfHelpText && wordBuffer == 0", span="762-762"];
m13_367 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionsHelp.Append(words[i].Substring(0, widthOfHelpText))", span="764-764"];
m13_368 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="wordBuffer = widthOfHelpText", span="765-765"];
m13_371 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionsHelp.AppendWhen(optionHelpText.Length > 0, Environment.NewLine,\r\n                        new string(' ', maxLength + 6))", span="773-774"];
m13_372 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionHelpText.Length > widthOfHelpText", span="776-776"];
m13_355 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="!string.IsNullOrEmpty(optionHelpText)", span="744-744"];
m13_357 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="var words = optionHelpText.Split(' ')", span="749-749"];
m13_370 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionHelpText = optionHelpText.Substring(Math.Min(wordBuffer, optionHelpText.Length)).Trim()", span="772-772"];
m13_373 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionsHelp\r\n                .Append(optionHelpText)\r\n                .Append(Environment.NewLine)\r\n                .AppendWhen(additionalNewLineAfterOption, Environment.NewLine)", span="779-782"];
m13_356 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="var wordBuffer = 0", span="748-748"];
m13_362 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="wordBuffer += words[i].Length", span="755-755"];
m13_358 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="var i = 0", span="750-750"];
m13_359 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="i < words.Length", span="750-750"];
m13_361 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionsHelp.Append(words[i])", span="754-754"];
m13_369 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="i++", span="750-750"];
m13_365 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="wordBuffer++", span="759-759"];
m13_364 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="optionsHelp.Append('' '')", span="758-758"];
m13_374 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="return this;", span="784-784"];
m13_375 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="720-720"];
m13_342 [cluster="CommandLine.Text.HelpText.MakeVersionEntry()", file="Token.cs", label="Exit CommandLine.Text.HelpText.MakeVersionEntry()", span="703-703"];
m13_305 [cluster="CommandLine.Text.HelpText.MakeVersionEntry()", file="Token.cs", label="Entry CommandLine.Text.HelpText.MakeVersionEntry()", span="703-703"];
m13_341 [cluster="CommandLine.Text.HelpText.MakeVersionEntry()", file="Token.cs", label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''version'',\r\n                false,\r\n                sentenceBuilder.VersionCommandText(AddDashesToOption),\r\n                string.Empty);", span="705-710"];
m13_401 [cluster="System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])", file="Token.cs", label="Entry System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])", span="27-27"];
m13_131 [cluster="string.Concat(string, string)", file="Token.cs", label="Entry string.Concat(string, string)", span="0-0"];
m13_420 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="829-836"];
m13_63 [cluster="lambda expression", file="Token.cs", label="license.AddToHelpText(auto, true)", span="220-220"];
m13_67 [cluster="lambda expression", file="Token.cs", label="usage.AddToHelpText(auto, true)", span="233-233"];
m13_70 [cluster="lambda expression", file="Token.cs", label="auto.AddPreOptionsLines(lines)", span="236-236"];
m13_62 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="220-220"];
m13_66 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="233-233"];
m13_69 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="236-236"];
m13_73 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="239-239"];
m13_64 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="220-220"];
m13_68 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="233-233"];
m13_71 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="236-236"];
m13_74 [cluster="lambda expression", file="Token.cs", label="e.Tag == ErrorType.NoVerbSelectedError", span="239-239"];
m13_75 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="239-239"];
m13_100 [cluster="lambda expression", file="Token.cs", label="DefaultParsingErrorsHandler(parserResult, current)", span="271-271"];
m13_113 [cluster="lambda expression", file="Token.cs", label="DefaultParsingErrorsHandler(parserResult, current)", span="277-277"];
m13_93 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="267-267"];
m13_96 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="270-270"];
m13_107 [cluster="lambda expression", file="Token.cs", label="DefaultParsingErrorsHandler(pr, current)", span="276-276"];
m13_106 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="276-276"];
m13_109 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="276-276"];
m13_112 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="277-277"];
m13_115 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="277-277"];
m13_99 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="271-271"];
m13_103 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="271-271"];
m13_94 [cluster="lambda expression", file="Token.cs", label="e.Tag == ErrorType.VersionRequestedError", span="267-267"];
m13_95 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="267-267"];
m13_97 [cluster="lambda expression", file="Token.cs", label="e.Tag == ErrorType.HelpVerbRequestedError", span="270-270"];
m13_98 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="270-270"];
m13_101 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="271-271"];
m13_104 [cluster="lambda expression", file="Token.cs", label=e, span="271-271"];
m13_105 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="271-271"];
m13_108 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="276-276"];
m13_110 [cluster="lambda expression", file="Token.cs", label=e, span="276-276"];
m13_111 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="276-276"];
m13_114 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="277-277"];
m13_116 [cluster="lambda expression", file="Token.cs", label=e, span="277-277"];
m13_117 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="277-277"];
m13_147 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="345-345"];
m13_148 [cluster="lambda expression", file="Token.cs", label="AddPreOptionsLine(line)", span="345-345"];
m13_149 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="345-345"];
m13_154 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="356-356"];
m13_155 [cluster="lambda expression", file="Token.cs", label="AddPostOptionsLine(line)", span="356-356"];
m13_156 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="356-356"];
m13_163 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="368-368"];
m13_164 [cluster="lambda expression", file="Token.cs", label="AddPreOptionsLine(line)", span="368-368"];
m13_165 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="368-368"];
m13_171 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="380-380"];
m13_172 [cluster="lambda expression", file="Token.cs", label="AddPostOptionsLine(line)", span="380-380"];
m13_173 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="380-380"];
m13_224 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="491-491"];
m13_225 [cluster="lambda expression", file="Token.cs", label="e.Tag != ErrorType.MutuallyExclusiveSetError", span="491-491"];
m13_226 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="491-491"];
m13_231 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="518-518"];
m13_232 [cluster="lambda expression", file="Token.cs", label=example, span="518-518"];
m13_233 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="518-518"];
m13_261 [cluster="lambda expression", file="Token.cs", label="config.PreferShortName = s.PreferShortName", span="567-567"];
m13_262 [cluster="lambda expression", file="Token.cs", label="config.GroupSwitches = s.GroupSwitches", span="568-568"];
m13_263 [cluster="lambda expression", file="Token.cs", label="config.UseEqualToken = s.UseEqualToken", span="569-569"];
m13_260 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="565-570"];
m13_264 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="565-570"];
m13_308 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="642-642"];
m13_309 [cluster="lambda expression", file="Token.cs", label="v.Index", span="642-642"];
m13_310 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="642-642"];
m13_315 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="651-660"];
m13_316 [cluster="lambda expression", file="Token.cs", label="var prop = tuple.Item1", span="653-653"];
m13_317 [cluster="lambda expression", file="Token.cs", label="var attr = tuple.Item2", span="654-654"];
m13_318 [cluster="lambda expression", file="Token.cs", label="var examples = (IEnumerable<Example>)prop\r\n                        .GetValue(null, BindingFlags.Public | BindingFlags.Static | BindingFlags.GetProperty, null, null, null)", span="656-657"];
m13_319 [cluster="lambda expression", file="Token.cs", label="return Tuple.Create(attr, examples);", span="659-659"];
m13_320 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="651-660"];
m13_336 [cluster="lambda expression", file="Token.cs", label="AddOption(requiredWord, maxLength, option, remainingSpace)", span="688-688"];
m13_335 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="687-688"];
m13_337 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="687-688"];
m13_382 [cluster="lambda expression", file="Token.cs", label="it.Append(AddOptionName(maxLength, (OptionSpecification)specification))", span="726-726"];
m13_386 [cluster="lambda expression", file="Token.cs", label="it.Append(AddValueName(maxLength, (ValueSpecification)specification))", span="727-727"];
m13_381 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="726-726"];
m13_385 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="727-727"];
m13_389 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="739-739"];
m13_390 [cluster="lambda expression", file="Token.cs", label="optionHelpText = ''(Default: {0}) ''.FormatInvariant(FormatDefaultValue(defaultValue)) + optionHelpText", span="739-739"];
m13_383 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="726-726"];
m13_387 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="727-727"];
m13_391 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="739-739"];
m13_397 [cluster="lambda expression", file="Token.cs", label="it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', '')", span="793-797"];
m13_403 [cluster="lambda expression", file="Token.cs", label="it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue)", span="800-803"];
m13_396 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="793-797"];
m13_402 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="800-803"];
m13_398 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="793-797"];
m13_404 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="800-803"];
m13_408 [cluster="lambda expression", file="Token.cs", label="it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index)", span="812-812"];
m13_412 [cluster="lambda expression", file="Token.cs", label="it.AppendFormat(''value pos. {0}'', specification.Index)", span="813-813"];
m13_407 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="812-812"];
m13_411 [cluster="lambda expression", file="Token.cs", label="Entry lambda expression", span="813-813"];
m13_409 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="812-812"];
m13_413 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="813-813"];
m13_421 [cluster="lambda expression", file="Token.cs", label="var specLength = spec.Tag == SpecificationType.Option\r\n                            ? GetMaxOptionLength((OptionSpecification)spec)\r\n                            : GetMaxValueLength((ValueSpecification)spec)", span="831-833"];
m13_422 [cluster="lambda expression", file="Token.cs", label="return Math.Max(length, specLength);", span="835-835"];
m13_423 [cluster="lambda expression", file="Token.cs", label="Exit lambda expression", span="829-836"];
m13_395 [cluster="System.Text.StringBuilder.MapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="Token.cs", label="Entry System.Text.StringBuilder.MapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="49-49"];
m13_88 [cluster="System.ArgumentException.ArgumentException(string, string)", file="Token.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m13_384 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="787-787"];
m13_393 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="Token.cs", label="return\r\n                new StringBuilder(maxLength)\r\n                    .MapIf(\r\n                        specification.ShortName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', ''))\r\n                    .MapIf(\r\n                        specification.LongName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue))\r\n                    .ToString();", span="789-804"];
m13_394 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="787-787"];
m13_4 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="Token.cs", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="59-59"];
m13_5 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="Token.cs", label="Exit CommandLine.Text.HelpText.HelpText(string)", span="59-59"];
m13_471 [cluster="T.ToStringLocal<T>()", file="Token.cs", label="Entry T.ToStringLocal<T>()", span="20-20"];
m13_327 [cluster="Unk.Concat", file="Token.cs", label="Entry Unk.Concat", span=""];
m13_474 [cluster="System.Text.StringBuilder.ToString(int, int)", file="Token.cs", label="Entry System.Text.StringBuilder.ToString(int, int)", span="0-0"];
m13_76 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="260-260"];
m13_77 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="parserResult.Tag != ParserResultType.NotParsed", span="262-262"];
m13_79 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="var errors = ((NotParsed<T>)parserResult).Errors", span="265-265"];
m13_83 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="return AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current), e => e);", span="271-271"];
m13_86 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="return err.Matched\r\n                ? AutoBuild(pr, current => DefaultParsingErrorsHandler(pr, current), e => e)\r\n                : AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current), e => e, true);", span="275-277"];
m13_78 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="throw new ArgumentException(''Excepting NotParsed<T> type.'', ''parserResult'');", span="263-263"];
m13_80 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="errors.Any(e => e.Tag == ErrorType.VersionRequestedError)", span="267-267"];
m13_82 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="!errors.Any(e => e.Tag == ErrorType.HelpVerbRequestedError)", span="270-270"];
m13_84 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="var err = errors.OfType<HelpVerbRequestedError>().Single()", span="273-273"];
m13_81 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="return new HelpText(HeadingInfo.Default).AddPreOptionsLine(Environment.NewLine);", span="268-268"];
m13_85 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="var pr = new NotParsed<object>(TypeInfo.Create(err.Type), Enumerable.Empty<Error>())", span="274-274"];
m13_87 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="260-260"];
m13_220 [cluster="int.Spaces()", file="Token.cs", label="Entry int.Spaces()", span="35-35"];
m13_65 [cluster="CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)", file="Token.cs", label="Entry CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)", span="155-155"];
m13_223 [cluster="System.Text.StringBuilder.ToString()", file="Token.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m13_254 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="Token.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
m13_473 [cluster="System.Text.StringBuilder.StringBuilder()", file="Token.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m13_166 [cluster="CommandLine.Text.HelpText.AddPostOptionsText(string)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddPostOptionsText(string)", span="377-377"];
m13_167 [cluster="CommandLine.Text.HelpText.AddPostOptionsText(string)", file="Token.cs", label="var lines = text.Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="379-379"];
m13_168 [cluster="CommandLine.Text.HelpText.AddPostOptionsText(string)", file="Token.cs", label="lines.ForEach(line => AddPostOptionsLine(line))", span="380-380"];
m13_169 [cluster="CommandLine.Text.HelpText.AddPostOptionsText(string)", file="Token.cs", label="return this;", span="381-381"];
m13_170 [cluster="CommandLine.Text.HelpText.AddPostOptionsText(string)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddPostOptionsText(string)", span="377-377"];
m13_60 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="405-405"];
m13_180 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="Token.cs", label="types == null", span="407-407"];
m13_182 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="Token.cs", label="types.Length == 0", span="408-408"];
m13_184 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="Token.cs", label="return AddOptionsImpl(\r\n                AdaptVerbsToSpecifications(types),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="410-413"];
m13_181 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="Token.cs", label="throw new ArgumentNullException(''types'');", span="407-407"];
m13_183 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="Token.cs", label="throw new ArgumentOutOfRangeException(''types'');", span="408-408"];
m13_185 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="405-405"];
m13_253 [cluster="CommandLine.Text.HelpText.GetUsageFromType(System.Type)", file="Token.cs", label="Entry CommandLine.Text.HelpText.GetUsageFromType(System.Type)", span="648-648"];
m13_311 [cluster="CommandLine.Text.HelpText.GetUsageFromType(System.Type)", file="Token.cs", label="return type.GetUsageData().Map(\r\n                tuple =>\r\n                {\r\n                    var prop = tuple.Item1;\r\n                    var attr = tuple.Item2;\r\n\r\n                    var examples = (IEnumerable<Example>)prop\r\n                        .GetValue(null, BindingFlags.Public | BindingFlags.Static | BindingFlags.GetProperty, null, null, null);\r\n\r\n                    return Tuple.Create(attr, examples);\r\n                });", span="650-660"];
m13_312 [cluster="CommandLine.Text.HelpText.GetUsageFromType(System.Type)", file="Token.cs", label="Exit CommandLine.Text.HelpText.GetUsageFromType(System.Type)", span="648-648"];
m13_162 [cluster="string.Split(string[], System.StringSplitOptions)", file="Token.cs", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
m13_203 [cluster="string.Join(string, System.Collections.Generic.IEnumerable<string>)", file="Token.cs", label="Entry string.Join(string, System.Collections.Generic.IEnumerable<string>)", span="0-0"];
m13_8 [cluster="CommandLine.Text.HelpText.HelpText(string, string)", file="Token.cs", label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="82-82"];
m13_9 [cluster="CommandLine.Text.HelpText.HelpText(string, string)", file="Token.cs", label="Exit CommandLine.Text.HelpText.HelpText(string, string)", span="82-82"];
m13_227 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", span="516-516"];
m13_228 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="return RenderUsageText(parserResult, example => example);", span="518-518"];
m13_229 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", span="516-516"];
m13_146 [cluster="System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)", file="Token.cs", label="Entry System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)", span="231-231"];
m13_294 [cluster="string.Split(params char[])", file="Token.cs", label="Entry string.Split(params char[])", span="0-0"];
m13_24 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="Token.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m13_326 [cluster="CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", file="Token.cs", label="Entry CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", span="45-45"];
m13_392 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="Entry CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", span="895-895"];
m13_459 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="value is bool", span="897-897"];
m13_460 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="return value.ToStringLocal().ToLowerInvariant();", span="898-898"];
m13_461 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="value is string", span="900-900"];
m13_462 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="return value.ToStringLocal();", span="901-901"];
m13_463 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="var asEnumerable = value as IEnumerable", span="903-903"];
m13_465 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="return value.ToStringLocal();", span="905-905"];
m13_464 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="asEnumerable == null", span="904-904"];
m13_467 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label=asEnumerable, span="908-908"];
m13_466 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="var builder = new StringBuilder()", span="907-907"];
m13_468 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="builder\r\n                    .Append(item.ToStringLocal())\r\n                    .Append('' '')", span="909-911"];
m13_469 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="return builder.Length > 0\r\n                ? builder.ToString(0, builder.Length - 1)\r\n                : string.Empty;", span="913-915"];
m13_470 [cluster="CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", file="Token.cs", label="Exit CommandLine.Text.HelpText.FormatDefaultValue<T>(T)", span="895-895"];
m13_25 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", span="196-196"];
m13_26 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="var auto = new HelpText {\r\n                Heading = HeadingInfo.Default,\r\n                Copyright = CopyrightInfo.Default,\r\n                AdditionalNewLineAfterOption = true,\r\n                AddDashesToOption = !verbsIndex\r\n            }", span="202-207"];
m13_28 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="onError != null && parserResult.Tag == ParserResultType.NotParsed", span="211-211"];
m13_29 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="errors = ((NotParsed<T>)parserResult).Errors", span="213-213"];
m13_31 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="auto = onError(auto)", span="216-216"];
m13_34 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="var usageLines = HelpText.RenderUsageTextAsLines(parserResult, onExample).ToMaybe()", span="223-223"];
m13_41 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="(verbsIndex && parserResult.TypeInfo.Choices.Any())\r\n                || errors.Any(e => e.Tag == ErrorType.NoVerbSelectedError)", span="238-239"];
m13_43 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="auto.AddVerbs(parserResult.TypeInfo.Choices.ToArray())", span="242-242"];
m13_44 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="auto.AddOptions(parserResult)", span="245-245"];
m13_27 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="var errors = Enumerable.Empty<Error>()", span="209-209"];
m13_32 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="ReflectionHelper.GetAttribute<AssemblyLicenseAttribute>()\r\n                .Do(license => license.AddToHelpText(auto, true))", span="219-220"];
m13_36 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="var heading = auto.SentenceBuilder.UsageHeadingText()", span="227-227"];
m13_38 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="auto.AddPreOptionsLine(heading)", span="229-229"];
m13_39 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="usageAttr.Do(\r\n                usage => usage.AddToHelpText(auto, true))", span="232-233"];
m13_40 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="usageLines.Do(\r\n                lines => auto.AddPreOptionsLines(lines))", span="235-236"];
m13_42 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="auto.AddDashesToOption = false", span="241-241"];
m13_45 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="return auto;", span="247-247"];
m13_30 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="errors.OnlyMeaningfulOnes().Any()", span="215-215"];
m13_33 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="var usageAttr = ReflectionHelper.GetAttribute<AssemblyUsageAttribute>()", span="222-222"];
m13_35 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="usageAttr.IsJust() || usageLines.IsJust()", span="225-225"];
m13_37 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="heading.Length > 0", span="228-228"];
m13_46 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>, bool)", span="196-196"];
m13_50 [cluster="System.Func<T, TResult>.Invoke(T)", file="Token.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m13_47 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Token.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m13_218 [cluster="Unk.Where", file="Token.cs", label="Entry Unk.Where", span=""];
m13_91 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="Token.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
m13_380 [cluster="string.String(char, int)", file="Token.cs", label="Entry string.String(char, int)", span="0-0"];
m13_296 [cluster="System.Math.Min(int, int)", file="Token.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m13_307 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="Token.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m13_410 [cluster="System.Text.StringBuilder.AppendFormat(string, object, object)", file="Token.cs", label="Entry System.Text.StringBuilder.AppendFormat(string, object, object)", span="0-0"];
m13_54 [cluster="System.Collections.Generic.IEnumerable<T>.ToMaybe<T>()", file="Token.cs", label="Entry System.Collections.Generic.IEnumerable<T>.ToMaybe<T>()", span="331-331"];
m13_179 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="675-675"];
m13_328 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="Token.cs", label="var maxLength = GetMaxLength(specifications)", span="680-680"];
m13_330 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="Token.cs", label="var remainingSpace = maximumLength - (maxLength + 6)", span="684-684"];
m13_331 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="Token.cs", label="specifications.ForEach(\r\n                option =>\r\n                    AddOption(requiredWord, maxLength, option, remainingSpace))", span="686-688"];
m13_329 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="Token.cs", label="optionsHelp = new StringBuilder(BuilderCapacity)", span="682-682"];
m13_332 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="Token.cs", label="return this;", span="690-690"];
m13_333 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="675-675"];
m13_222 [cluster="System.Text.StringBuilder.Append(string)", file="Token.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m13_132 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", file="Token.cs", label="Entry CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="311-311"];
m13_133 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", file="Token.cs", label="return info.ToString();", span="313-313"];
m13_134 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", file="Token.cs", label="Exit CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="311-311"];
m13_138 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="713-713"];
m13_343 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="Token.cs", label="AddLine(preOptionsHelp, value, maximumLength)", span="715-715"];
m13_344 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="Token.cs", label="return this;", span="717-717"];
m13_345 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="713-713"];
m13_321 [cluster="System.Reflection.PropertyInfo.GetValue(object, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo)", file="Token.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo)", span="0-0"];
m13_142 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="819-819"];
m13_414 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="Token.cs", label="AddLine(builder, value, MaximumDisplayWidth)", span="821-821"];
m13_415 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="Token.cs", label="return this;", span="823-823"];
m13_416 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="819-819"];
m13_2 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", file="Token.cs", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", span="48-48"];
m13_3 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", file="Token.cs", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", span="48-48"];
m13_299 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="Token.cs", label="var optionSpecs = specs\r\n                .OfType<OptionSpecification>()\r\n                .Concat(new[] { MakeHelpEntry(), MakeVersionEntry() })", span="637-639"];
m13_178 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="Token.cs", label="Entry CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", span="634-634"];
m13_298 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="Token.cs", label="var specs = type.GetSpecifications(Specification.FromProperty)", span="636-636"];
m13_300 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="Token.cs", label="var valueSpecs = specs\r\n                .OfType<ValueSpecification>()\r\n                .OrderBy(v => v.Index)", span="640-642"];
m13_301 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="Token.cs", label="return Enumerable.Empty<Specification>()\r\n                .Concat(optionSpecs)\r\n                .Concat(valueSpecs);", span="643-645"];
m13_302 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="Token.cs", label="Exit CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", span="634-634"];
m13_273 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="598-598"];
m13_274 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="builder.AppendWhen(builder.Length > 0, Environment.NewLine)", span="600-600"];
m13_276 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="var words = value.Split(' ')", span="604-604"];
m13_279 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="words[i].Length < (maximumLength - wordBuffer)", span="607-607"];
m13_280 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="builder.Append(words[i])", span="609-609"];
m13_282 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="(maximumLength - wordBuffer) > 1 && i != words.Length - 1", span="611-611"];
m13_283 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="builder.Append('' '')", span="613-613"];
m13_285 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="words[i].Length >= maximumLength && wordBuffer == 0", span="617-617"];
m13_286 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="builder.Append(words[i].Substring(0, maximumLength))", span="619-619"];
m13_287 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="wordBuffer = maximumLength", span="620-620"];
m13_289 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="value = value.Substring(Math.Min(wordBuffer, value.Length))", span="626-626"];
m13_290 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="builder.AppendWhen(value.Length > 0, Environment.NewLine)", span="627-627"];
m13_291 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="value.Length > maximumLength", span="629-629"];
m13_292 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="builder.Append(value)", span="631-631"];
m13_275 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="var wordBuffer = 0", span="603-603"];
m13_281 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="wordBuffer += words[i].Length", span="610-610"];
m13_277 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="var i = 0", span="605-605"];
m13_278 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="i < words.Length", span="605-605"];
m13_288 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="i++", span="605-605"];
m13_284 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="wordBuffer++", span="614-614"];
m13_293 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="598-598"];
m13_10 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="95-95"];
m13_11 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="sentenceBuilder == null", span="97-97"];
m13_13 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="heading == null", span="98-98"];
m13_15 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="copyright == null", span="99-99"];
m13_19 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="this.sentenceBuilder = sentenceBuilder", span="104-104"];
m13_20 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="this.heading = heading", span="105-105"];
m13_21 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="this.copyright = copyright", span="106-106"];
m13_12 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="throw new ArgumentNullException(''sentenceBuilder'');", span="97-97"];
m13_14 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="throw new ArgumentNullException(''heading'');", span="98-98"];
m13_16 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="throw new ArgumentNullException(''copyright'');", span="99-99"];
m13_17 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="preOptionsHelp = new StringBuilder(BuilderCapacity)", span="101-101"];
m13_18 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="postOptionsHelp = new StringBuilder(BuilderCapacity)", span="102-102"];
m13_22 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="Token.cs", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="95-95"];
m13_388 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="807-807"];
m13_405 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="Token.cs", label="return new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.MetaName.Length > 0,\r\n                    it => it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index),\r\n                    it => it.AppendFormat(''value pos. {0}'', specification.Index))\r\n                .AppendFormatWhen(\r\n                    specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                .ToString();", span="809-816"];
m13_406 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="807-807"];
m13_72 [cluster="CommandLine.Text.HelpText.AddPreOptionsLines(System.Collections.Generic.IEnumerable<string>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLines(System.Collections.Generic.IEnumerable<string>)", span="343-343"];
m13_143 [cluster="CommandLine.Text.HelpText.AddPreOptionsLines(System.Collections.Generic.IEnumerable<string>)", file="Token.cs", label="lines.ForEach(line => AddPreOptionsLine(line))", span="345-345"];
m13_144 [cluster="CommandLine.Text.HelpText.AddPreOptionsLines(System.Collections.Generic.IEnumerable<string>)", file="Token.cs", label="return this;", span="346-346"];
m13_145 [cluster="CommandLine.Text.HelpText.AddPreOptionsLines(System.Collections.Generic.IEnumerable<string>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddPreOptionsLines(System.Collections.Generic.IEnumerable<string>)", span="343-343"];
m13_426 [cluster="System.Math.Max(int, int)", file="Token.cs", label="Entry System.Math.Max(int, int)", span="0-0"];
m13_221 [cluster="Unk.formatError", file="Token.cs", label="Entry Unk.formatError", span=""];
m13_334 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="826-826"];
m13_417 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="Token.cs", label="return specifications.Aggregate(0,\r\n                (length, spec) =>\r\n                    {\r\n                        var specLength = spec.Tag == SpecificationType.Option\r\n                            ? GetMaxOptionLength((OptionSpecification)spec)\r\n                            : GetMaxValueLength((ValueSpecification)spec);\r\n\r\n                        return Math.Max(length, specLength);\r\n                    });", span="828-836"];
m13_418 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="826-826"];
m13_376 [cluster="System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="Token.cs", label="Entry System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="41-41"];
m13_186 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="Token.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m13_340 [cluster="CommandLine.Text.HelpText.MakeHelpEntry()", file="Token.cs", label="Exit CommandLine.Text.HelpText.MakeHelpEntry()", span="693-693"];
m13_304 [cluster="CommandLine.Text.HelpText.MakeHelpEntry()", file="Token.cs", label="Entry CommandLine.Text.HelpText.MakeHelpEntry()", span="693-693"];
m13_339 [cluster="CommandLine.Text.HelpText.MakeHelpEntry()", file="Token.cs", label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''help'',\r\n                false,\r\n                sentenceBuilder.HelpCommandText(AddDashesToOption),\r\n                string.Empty);", span="695-700"];
m13_295 [cluster="string.Substring(int, int)", file="Token.cs", label="Entry string.Substring(int, int)", span="0-0"];
m13_188 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", span="422-422"];
m13_189 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="Token.cs", label="result == null", span="424-424"];
m13_191 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="Token.cs", label="return AddOptionsImpl(\r\n                GetSpecificationsFromType(result.TypeInfo.Current),\r\n                SentenceBuilder.RequiredWord(),\r\n                maximumLength);", span="426-429"];
m13_190 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="Token.cs", label="throw new ArgumentNullException(''result'');", span="424-424"];
m13_192 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", span="422-422"];
m13_425 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="Entry CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="875-875"];
m13_447 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="var specLength = 0", span="877-877"];
m13_448 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="var hasMeta = spec.MetaName.Length > 0", span="879-879"];
m13_450 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="spec.MetaValue.Length > 0", span="882-882"];
m13_451 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="metaLength = spec.MetaValue.Length + 1", span="883-883"];
m13_453 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="specLength += spec.MetaName.Length + spec.Index.ToStringInvariant().Length + 8", span="886-886"];
m13_454 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="specLength += spec.Index.ToStringInvariant().Length + 11", span="888-888"];
m13_449 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="var metaLength = 0", span="881-881"];
m13_452 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label=hasMeta, span="885-885"];
m13_455 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="specLength += metaLength", span="890-890"];
m13_456 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="return specLength;", span="892-892"];
m13_457 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="Token.cs", label="Exit CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="875-875"];
m13_57 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="322-322"];
m13_136 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="Token.cs", label="return AddPreOptionsLine(value, MaximumDisplayWidth);", span="324-324"];
m13_137 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="322-322"];
m13_314 [cluster="CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", file="Token.cs", label="Entry CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="265-265"];
m13_303 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="Token.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m13_49 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Token.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m13_56 [cluster="System.Func<TResult>.Invoke()", file="Token.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m13_193 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="439-439"];
m13_194 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="Token.cs", label="types == null", span="441-441"];
m13_196 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="Token.cs", label="types.Length == 0", span="442-442"];
m13_198 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="Token.cs", label="return AddOptionsImpl(\r\n                AdaptVerbsToSpecifications(types),\r\n                SentenceBuilder.RequiredWord(),\r\n                maximumLength);", span="444-447"];
m13_195 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="Token.cs", label="throw new ArgumentNullException(''types'');", span="441-441"];
m13_197 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="Token.cs", label="throw new ArgumentOutOfRangeException(''types'');", span="442-442"];
m13_199 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="439-439"];
m13_150 [cluster="CommandLine.Text.HelpText.AddPostOptionsLines(System.Collections.Generic.IEnumerable<string>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddPostOptionsLines(System.Collections.Generic.IEnumerable<string>)", span="354-354"];
m13_151 [cluster="CommandLine.Text.HelpText.AddPostOptionsLines(System.Collections.Generic.IEnumerable<string>)", file="Token.cs", label="lines.ForEach(line => AddPostOptionsLine(line))", span="356-356"];
m13_152 [cluster="CommandLine.Text.HelpText.AddPostOptionsLines(System.Collections.Generic.IEnumerable<string>)", file="Token.cs", label="return this;", span="357-357"];
m13_153 [cluster="CommandLine.Text.HelpText.AddPostOptionsLines(System.Collections.Generic.IEnumerable<string>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddPostOptionsLines(System.Collections.Generic.IEnumerable<string>)", span="354-354"];
m13_52 [cluster="CSharpx.Maybe<T>.Do<T>(System.Action<T>)", file="Token.cs", label="Entry CSharpx.Maybe<T>.Do<T>(System.Action<T>)", span="300-300"];
m13_157 [cluster="CommandLine.Text.HelpText.AddPreOptionsText(string)", file="Token.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsText(string)", span="365-365"];
m13_158 [cluster="CommandLine.Text.HelpText.AddPreOptionsText(string)", file="Token.cs", label="var lines = text.Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="367-367"];
m13_159 [cluster="CommandLine.Text.HelpText.AddPreOptionsText(string)", file="Token.cs", label="lines.ForEach(line => AddPreOptionsLine(line))", span="368-368"];
m13_160 [cluster="CommandLine.Text.HelpText.AddPreOptionsText(string)", file="Token.cs", label="return this;", span="369-369"];
m13_161 [cluster="CommandLine.Text.HelpText.AddPreOptionsText(string)", file="Token.cs", label="Exit CommandLine.Text.HelpText.AddPreOptionsText(string)", span="365-365"];
m13_6 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", file="Token.cs", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", span="70-70"];
m13_7 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", file="Token.cs", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", span="70-70"];
m13_230 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", span="528-528"];
m13_234 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="return string.Join(Environment.NewLine, RenderUsageTextAsLines(parserResult, mapperFunc));", span="530-530"];
m13_235 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", span="528-528"];
m13_53 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="Entry CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", span="540-540"];
m13_236 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="parserResult == null", span="542-542"];
m13_240 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="yield break;", span="546-546"];
m13_247 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="yield return exampleText.ToString();", span="557-557"];
m13_251 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="yield return commandLine.ToString();", span="571-571"];
m13_238 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="var usage = GetUsageFromType(parserResult.TypeInfo.Current)", span="544-544"];
m13_245 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="var example = mapperFunc(e)", span="554-554"];
m13_237 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="throw new ArgumentNullException(''parserResult'');", span="542-542"];
m13_239 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="usage.MatchNothing()", span="545-545"];
m13_241 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="var usageTuple = usage.FromJustOrFail()", span="548-548"];
m13_242 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="var examples = usageTuple.Item2", span="549-549"];
m13_243 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="var appAlias = usageTuple.Item1.ApplicationAlias ?? ReflectionHelper.GetAssemblyName()", span="550-550"];
m13_244 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label=examples, span="552-552"];
m13_250 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="var commandLine = new StringBuilder(2.Spaces())\r\n                        .Append(appAlias)\r\n                        .Append(' ')\r\n                        .Append(Parser.Default.FormatCommandLine(example.Sample,\r\n                            config =>\r\n                            {\r\n                                config.PreferShortName = s.PreferShortName;\r\n                                config.GroupSwitches = s.GroupSwitches;\r\n                                config.UseEqualToken = s.UseEqualToken;\r\n                            }))", span="561-570"];
m13_246 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="var exampleText = new StringBuilder(example.HelpText)\r\n                    .Append(':')", span="555-556"];
m13_248 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="var styles = example.GetFormatStylesOrDefault()", span="558-558"];
m13_249 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label=styles, span="559-559"];
m13_252 [cluster="CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", file="Token.cs", label="Exit CommandLine.Text.HelpText.RenderUsageTextAsLines<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.Example, CommandLine.Text.Example>)", span="540-540"];
m13_419 [cluster="Unk.Aggregate", file="Token.cs", label="Entry Unk.Aggregate", span=""];
m13_259 [cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", file="Token.cs", label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="95-95"];
m13_219 [cluster="System.Text.StringBuilder.StringBuilder(string)", file="Token.cs", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
m13_89 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="Token.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m13_55 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="Token.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m13_306 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Token.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m13_475 [file="Token.cs", label="CommandLine.Text.HelpText", span=""];
m13_476 [file="Token.cs", label=auto, span=""];
m13_477 [file="Token.cs", label="CommandLine.ParserResult<T>", span=""];
m13_478 [file="Token.cs", label=pr, span=""];
m13_479 [file="Token.cs", label=s, span=""];
m13_480 [file="Token.cs", label=string, span=""];
m13_481 [file="Token.cs", label=maxLength, span=""];
m13_482 [file="Token.cs", label=remainingSpace, span=""];
m13_483 [file="Token.cs", label=int, span=""];
m13_484 [file="Token.cs", label="CommandLine.Core.Specification", span=""];
m13_485 [file="Token.cs", label=optionHelpText, span=""];
m13_486 [file="Token.cs", label="CommandLine.Core.OptionSpecification", span=""];
m13_487 [file="Token.cs", label="CommandLine.Core.ValueSpecification", span=""];
m14_0 [cluster="Ninject.ConstraintAttribute.Matches(Ninject.Bindings.IBindingMetadata)", file="Tokenizer.cs", label="Entry Ninject.ConstraintAttribute.Matches(Ninject.Bindings.IBindingMetadata)", span="9-9"];
m14_1 [cluster="Ninject.ConstraintAttribute.Matches(Ninject.Bindings.IBindingMetadata)", file="Tokenizer.cs", label="Exit Ninject.ConstraintAttribute.Matches(Ninject.Bindings.IBindingMetadata)", span="9-9"];
m15_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var tokenList = tokens.Memorize()", span="16-16"];
m15_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var switches = Switch.Partition(tokenList, typeLookup).Memorize()", span="17-17"];
m15_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var scalars = Scalar.Partition(tokenList, typeLookup).Memorize()", span="18-18"];
m15_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var sequences = Sequence.Partition(tokenList, typeLookup).Memorize()", span="19-19"];
m15_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).Memorize()", span="20-23"];
m15_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="27-32"];
m15_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var values = nonOptions.Where(v => v.IsValue()).Memorize()", span="24-24"];
m15_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var errors = nonOptions.Except(values).Memorize()", span="25-25"];
m15_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m15_14 [cluster="Unk.Where", file="TokenPartitioner.cs", label="Entry Unk.Where", span=""];
m15_22 [cluster="Unk.Create", file="TokenPartitioner.cs", label="Entry Unk.Create", span=""];
m15_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m15_13 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m15_21 [cluster="Unk.Select", file="TokenPartitioner.cs", label="Entry Unk.Select", span=""];
m15_15 [cluster="Unk.Memorize", file="TokenPartitioner.cs", label="Entry Unk.Memorize", span=""];
m15_30 [cluster="Unk.Contains", file="TokenPartitioner.cs", label="Entry Unk.Contains", span=""];
m15_11 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m15_16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m15_38 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="31-31"];
m15_24 [cluster="lambda expression", file="TokenPartitioner.cs", label="!switches.Contains(t)", span="21-21"];
m15_28 [cluster="lambda expression", file="TokenPartitioner.cs", label="!scalars.Contains(t)", span="22-22"];
m15_32 [cluster="lambda expression", file="TokenPartitioner.cs", label="!sequences.Contains(t)", span="23-23"];
m15_23 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="21-21"];
m15_27 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="22-22"];
m15_31 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-23"];
m15_34 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="24-24"];
m15_25 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="21-21"];
m15_29 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="22-22"];
m15_33 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="23-23"];
m15_35 [cluster="lambda expression", file="TokenPartitioner.cs", label="v.IsValue()", span="24-24"];
m15_36 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="24-24"];
m15_39 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Text", span="31-31"];
m15_40 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="31-31"];
m15_10 [cluster="System.Collections.Generic.IEnumerable<T>.Memorize<T>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<T>.Memorize<T>()", span="374-374"];
m15_17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m15_12 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m15_18 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m15_37 [cluster="Unk.IsValue", file="TokenPartitioner.cs", label="Entry Unk.IsValue", span=""];
m15_19 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m15_20 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m15_41 [file="TokenPartitioner.cs", label=switches, span=""];
m15_42 [file="TokenPartitioner.cs", label=scalars, span=""];
m15_43 [file="TokenPartitioner.cs", label=sequences, span=""];
m16_0 [cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="Entry CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m16_1 [cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="this.options = options", span="17-17"];
m16_2 [cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="this.values = values", span="18-18"];
m16_3 [cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="this.errors = errors", span="19-19"];
m16_4 [cluster="CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="Exit CommandLine.Core.TokenPartitions.TokenPartitions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m16_5 [cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="Entry CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="37-37"];
m16_6 [cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="return new TokenPartitions(options, values, errors);", span="42-42"];
m16_7 [cluster="CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitions.cs", label="Exit CommandLine.Core.TokenPartitions.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="37-37"];
m16_8 [file="TokenPartitions.cs", label="CommandLine.Core.TokenPartitions", span=""];
m17_1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture);", span="15-17"];
m17_2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
m17_4 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36"];
m17_31 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture)", span="38-38"];
m17_32 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="result.Match(_ => { }, e => e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="39-40"];
m17_33 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return Maybe.OfEither(result);", span="41-41"];
m17_34 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36"];
m17_35 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
m17_44 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Func<string, object> changeType = input =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                };\r\n\r\n                return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();\r\n            }", span="46-74"];
m17_45 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Func<string, object> makeType = input =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { input });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="76-87"];
m17_46 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return Either.Protect(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType, value);", span="89-92"];
m17_47 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
m17_101 [cluster="System.Enum.IsDefined(System.Type, object)", file="TypeConverter.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m17_13 [cluster="System.ApplicationException.ApplicationException(string)", file="TypeConverter.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m17_76 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="14-14"];
m17_16 [cluster="Unk.Any", file="TypeConverter.cs", label="Entry Unk.Any", span=""];
m17_70 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8"];
m17_71 [cluster="System.Nullable.GetUnderlyingType(System.Type)", file="TypeConverter.cs", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
m17_99 [cluster="System.Enum.Parse(System.Type, string)", file="TypeConverter.cs", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
m17_12 [cluster="T.ToMaybe<T>()", file="TypeConverter.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m17_19 [cluster="CSharpx.Maybe.Just<T>(T)", file="TypeConverter.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m17_58 [cluster="System.Func<TResult>.Invoke()", file="TypeConverter.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m17_81 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="76-87"];
m17_21 [cluster="lambda expression", file="TypeConverter.cs", label="ChangeTypeScalar(value, type, conversionCulture)", span="29-29"];
m17_20 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="29-29"];
m17_24 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="31-31"];
m17_28 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="33-33"];
m17_22 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="29-29"];
m17_25 [cluster="lambda expression", file="TypeConverter.cs", label="a.MatchNothing()", span="31-31"];
m17_26 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="31-31"];
m17_29 [cluster="lambda expression", file="TypeConverter.cs", label="((Just<object>)c).Value", span="33-33"];
m17_30 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="33-33"];
m17_38 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="39-39"];
m17_40 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="39-40"];
m17_39 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="39-39"];
m17_41 [cluster="lambda expression", file="TypeConverter.cs", label="e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="39-40"];
m17_42 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="39-40"];
m17_52 [cluster="lambda expression", file="TypeConverter.cs", label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                }", span="48-69"];
m17_60 [cluster="lambda expression", file="TypeConverter.cs", label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="50-50"];
m17_61 [cluster="lambda expression", file="TypeConverter.cs", label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="52-56"];
m17_68 [cluster="lambda expression", file="TypeConverter.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="54-56"];
m17_62 [cluster="lambda expression", file="TypeConverter.cs", label="var type = getUnderlyingType() ?? conversionType", span="58-58"];
m17_63 [cluster="lambda expression", file="TypeConverter.cs", label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="60-64"];
m17_73 [cluster="lambda expression", file="TypeConverter.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="62-64"];
m17_53 [cluster="lambda expression", file="TypeConverter.cs", label="return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();", span="71-73"];
m17_82 [cluster="lambda expression", file="TypeConverter.cs", label="var ctor = conversionType.GetConstructor(new[] { typeof(string) })", span="80-80"];
m17_65 [cluster="lambda expression", file="TypeConverter.cs", label="return (input == null) ? empty() : withValue();", span="68-68"];
m17_83 [cluster="lambda expression", file="TypeConverter.cs", label="return ctor.Invoke(new object[] { input });", span="81-81"];
m17_51 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="46-74"];
m17_54 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="46-74"];
m17_59 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="48-69"];
m17_64 [cluster="lambda expression", file="TypeConverter.cs", label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66"];
m17_78 [cluster="lambda expression", file="TypeConverter.cs", label="isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66"];
m17_66 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="48-69"];
m17_67 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="53-56"];
m17_69 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="53-56"];
m17_72 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="61-64"];
m17_74 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="61-64"];
m17_77 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="66-66"];
m17_79 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="66-66"];
m17_84 [cluster="lambda expression", file="TypeConverter.cs", label=Exception, span="83-83"];
m17_85 [cluster="lambda expression", file="TypeConverter.cs", label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="85-85"];
m17_86 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="76-87"];
m17_43 [cluster="Unk.RethrowWhenAbsentIn", file="TypeConverter.cs", label="Entry Unk.RethrowWhenAbsentIn", span=""];
m17_75 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="TypeConverter.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m17_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m17_57 [cluster="string.ToEnum(System.Type)", file="TypeConverter.cs", label="Entry string.ToEnum(System.Type)", span="95-95"];
m17_49 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35"];
m17_48 [cluster="System.Type.IsPrimitiveEx()", file="TypeConverter.cs", label="Entry System.Type.IsPrimitiveEx()", span="209-209"];
m17_5 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
m17_6 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="22-27"];
m17_7 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture))", span="29-29"];
m17_8 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="31-33"];
m17_9 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
m17_15 [cluster="Unk.Select", file="TypeConverter.cs", label="Entry Unk.Select", span=""];
m17_23 [cluster="Unk.ChangeTypeScalar", file="TypeConverter.cs", label="Entry Unk.ChangeTypeScalar", span=""];
m17_37 [cluster="Unk.OfEither", file="TypeConverter.cs", label="Entry Unk.OfEither", span=""];
m17_36 [cluster="Unk.Match", file="TypeConverter.cs", label="Entry Unk.Match", span=""];
m17_10 [cluster="System.Type.GetGenericArguments()", file="TypeConverter.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m17_50 [cluster="Unk.Protect", file="TypeConverter.cs", label="Entry Unk.Protect", span=""];
m17_56 [cluster="string.ToBoolean()", file="TypeConverter.cs", label="Entry string.ToBoolean()", span="66-66"];
m17_89 [cluster="System.FormatException.FormatException(string)", file="TypeConverter.cs", label="Entry System.FormatException.FormatException(string)", span="0-0"];
m17_87 [cluster="System.Type.GetConstructor(System.Type[])", file="TypeConverter.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m17_17 [cluster="CSharpx.Maybe.Nothing<T>()", file="TypeConverter.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m17_14 [cluster="Unk.FromJust", file="TypeConverter.cs", label="Entry Unk.FromJust", span=""];
m17_90 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
m17_91 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="object parsedValue", span="97-97"];
m17_92 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="parsedValue = Enum.Parse(conversionType, value)", span="100-100"];
m17_95 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="Enum.IsDefined(conversionType, parsedValue)", span="106-106"];
m17_93 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label=ArgumentException, span="102-102"];
m17_96 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="return parsedValue;", span="108-108"];
m17_94 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="throw new FormatException();", span="104-104"];
m17_97 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="throw new FormatException();", span="110-110"];
m17_98 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
m17_55 [cluster="string.IsBooleanString()", file="TypeConverter.cs", label="Entry string.IsBooleanString()", span="60-60"];
m17_27 [cluster="Unk.MatchNothing", file="TypeConverter.cs", label="Entry Unk.MatchNothing", span=""];
m17_88 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TypeConverter.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m17_18 [cluster="Unk.ToUntypedArray", file="TypeConverter.cs", label="Entry Unk.ToUntypedArray", span=""];
m17_100 [cluster="System.FormatException.FormatException()", file="TypeConverter.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m17_80 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="22-22"];
m17_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m17_102 [file="TypeConverter.cs", label="System.Globalization.CultureInfo", span=""];
m17_103 [file="TypeConverter.cs", label=type, span=""];
m17_104 [file="TypeConverter.cs", label="System.Type", span=""];
m17_105 [file="TypeConverter.cs", label="System.Globalization.CultureInfo", span=""];
m17_106 [file="TypeConverter.cs", label=string, span=""];
m17_107 [file="TypeConverter.cs", label=isFsOption, span=""];
m17_108 [file="TypeConverter.cs", label=type, span=""];
m18_14 [cluster="Unk.Create", file="TypeLookup.cs", label="Entry Unk.Create", span=""];
m18_4 [cluster="Unk.SingleOrDefault", file="TypeLookup.cs", label="Entry Unk.SingleOrDefault", span=""];
m18_29 [cluster="Unk.WithNextValue", file="TypeLookup.cs", label="Entry Unk.WithNextValue", span=""];
m18_6 [cluster="Unk.Map", file="TypeLookup.cs", label="Entry Unk.Map", span=""];
m18_5 [cluster="Unk.ToMaybe", file="TypeLookup.cs", label="Entry Unk.ToMaybe", span=""];
m18_33 [cluster="object.Equals(object)", file="TypeLookup.cs", label="Entry object.Equals(object)", span="0-0"];
m18_0 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m18_1 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="var info = specifications.SingleOrDefault(a => name.MatchName(a.ShortName, a.LongName, comparer))\r\n                .ToMaybe()\r\n                    .Map(\r\n                        s => TypeDescriptor.Create(s.TargetType, s.Max))", span="16-19"];
m18_2 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="return info;", span="20-20"];
m18_3 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Exit CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m18_38 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="38-38"];
m18_8 [cluster="lambda expression", file="TypeLookup.cs", label="name.MatchName(a.ShortName, a.LongName, comparer)", span="16-16"];
m18_7 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="16-16"];
m18_11 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="19-19"];
m18_9 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="16-16"];
m18_12 [cluster="lambda expression", file="TypeLookup.cs", label="TypeDescriptor.Create(s.TargetType, s.Max)", span="19-19"];
m18_13 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="19-19"];
m18_20 [cluster="lambda expression", file="TypeLookup.cs", label="name.MatchName(a.ShortName, a.LongName, comparer)", span="29-29"];
m18_24 [cluster="lambda expression", file="TypeLookup.cs", label="var next = specifications\r\n                                    .SkipWhile(s => s.Equals(first)).Take(1)\r\n                                    .SingleOrDefault(x => x.IsValue()).ToMaybe()\r\n                                    .Map(second => TypeDescriptor.Create(second.TargetType, second.Max))", span="35-38"];
m18_19 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="29-29"];
m18_22 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="32-40"];
m18_21 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="29-29"];
m18_23 [cluster="lambda expression", file="TypeLookup.cs", label="var descr = TypeDescriptor.Create(first.TargetType, first.Max)", span="34-34"];
m18_31 [cluster="lambda expression", file="TypeLookup.cs", label="s.Equals(first)", span="36-36"];
m18_25 [cluster="lambda expression", file="TypeLookup.cs", label="return descr.WithNextValue(next);", span="39-39"];
m18_30 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="36-36"];
m18_34 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="37-37"];
m18_26 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="32-40"];
m18_32 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="36-36"];
m18_35 [cluster="lambda expression", file="TypeLookup.cs", label="x.IsValue()", span="37-37"];
m18_36 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="37-37"];
m18_39 [cluster="lambda expression", file="TypeLookup.cs", label="TypeDescriptor.Create(second.TargetType, second.Max)", span="38-38"];
m18_40 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="38-38"];
m18_15 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
m18_16 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="var info =\r\n                specifications.SingleOrDefault(a => name.MatchName(a.ShortName, a.LongName, comparer))\r\n                    .ToMaybe()\r\n                    .Map(\r\n                        first =>\r\n                            {\r\n                                var descr = TypeDescriptor.Create(first.TargetType, first.Max);\r\n                                var next = specifications\r\n                                    .SkipWhile(s => s.Equals(first)).Take(1)\r\n                                    .SingleOrDefault(x => x.IsValue()).ToMaybe()\r\n                                    .Map(second => TypeDescriptor.Create(second.TargetType, second.Max));\r\n                                return descr.WithNextValue(next);\r\n                            })", span="28-40"];
m18_17 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="return info;", span="41-41"];
m18_18 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Exit CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
m18_28 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m18_27 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="TypeLookup.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m18_37 [cluster="CommandLine.Core.Specification.IsValue()", file="TypeLookup.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m18_41 [file="TypeLookup.cs", label=string, span=""];
m18_42 [file="TypeLookup.cs", label="System.StringComparer", span=""];
m18_43 [file="TypeLookup.cs", label=string, span=""];
m18_44 [file="TypeLookup.cs", label="System.StringComparer", span=""];
m18_45 [file="TypeLookup.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m18_46 [file="TypeLookup.cs", label=T1, span=""];
m19_0 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="18-18"];
m19_1 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="this.index = index", span="20-20"];
m19_2 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="this.metaName = string.Empty", span="21-21"];
m19_3 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="18-18"];
m19_4 [file="ValueAttribute.cs", label="CommandLine.ValueAttribute", span=""];
m20_3 [cluster="Ninject.Creation.ConstantProvider<T>.CreateInstance(Ninject.Activation.IContext)", file="ValueMapper.cs", label="Entry Ninject.Creation.ConstantProvider<T>.CreateInstance(Ninject.Activation.IContext)", span="14-14"];
m20_4 [cluster="Ninject.Creation.ConstantProvider<T>.CreateInstance(Ninject.Activation.IContext)", file="ValueMapper.cs", label="return Value;", span="16-16"];
m20_5 [cluster="Ninject.Creation.ConstantProvider<T>.CreateInstance(Ninject.Activation.IContext)", file="ValueMapper.cs", label="Exit Ninject.Creation.ConstantProvider<T>.CreateInstance(Ninject.Activation.IContext)", span="14-14"];
m20_0 [cluster="Ninject.Creation.ConstantProvider<T>.ConstantProvider(T)", file="ValueMapper.cs", label="Entry Ninject.Creation.ConstantProvider<T>.ConstantProvider(T)", span="9-9"];
m20_2 [cluster="Ninject.Creation.ConstantProvider<T>.ConstantProvider(T)", file="ValueMapper.cs", label="Exit Ninject.Creation.ConstantProvider<T>.ConstantProvider(T)", span="9-9"];
m20_6 [file="ValueMapper.cs", label="Ninject.Creation.ConstantProvider<T>", span=""];
m21_10 [cluster="System.Type.ToTargetType()", file="ValueSpecification.cs", label="Entry System.Type.ToTargetType()", span="71-71"];
m21_0 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, string, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ValueSpecification.ValueSpecification(int, string, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="13-13"];
m21_1 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, string, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs", label="this.index = index", span="18-18"];
m21_2 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, string, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs", label="this.metaName = metaName", span="19-19"];
m21_3 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, string, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ValueSpecification.ValueSpecification(int, string, bool, CSharpx.Maybe<int>, CSharpx.Maybe<int>, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="13-13"];
m21_9 [cluster="T.ToMaybe<T>()", file="ValueSpecification.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m21_8 [cluster="CSharpx.Maybe.Just<T>(T)", file="ValueSpecification.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m21_4 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="22-22"];
m21_5 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="ValueSpecification.cs", label="return new ValueSpecification(\r\n                attribute.Index,\r\n                attribute.MetaName,\r\n                attribute.Required,\r\n                attribute.Min == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Min),\r\n                attribute.Max == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Max),\r\n                attribute.Default.ToMaybe(),\r\n                attribute.HelpText,\r\n                attribute.MetaValue,\r\n                enumValues,\r\n                conversionType,\r\n                conversionType.ToTargetType());", span="24-35"];
m21_6 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="22-22"];
m21_11 [file="ValueSpecification.cs", label="CommandLine.Core.ValueSpecification", span=""];
m22_12 [cluster="Ninject.Planning.Planner.CreateEmptyPlan(System.Type)", file="Verb.cs", label="Entry Ninject.Planning.Planner.CreateEmptyPlan(System.Type)", span="80-80"];
m22_13 [cluster="Ninject.Planning.Planner.CreateEmptyPlan(System.Type)", file="Verb.cs", label="return new Plan(type);", span="82-82"];
m22_14 [cluster="Ninject.Planning.Planner.CreateEmptyPlan(System.Type)", file="Verb.cs", label="Exit Ninject.Planning.Planner.CreateEmptyPlan(System.Type)", span="80-80"];
m22_31 [cluster="Ninject.Planning.Strategies.IPlanningStrategy.Execute(Ninject.Planning.IPlan)", file="Verb.cs", label="Entry Ninject.Planning.Strategies.IPlanningStrategy.Execute(Ninject.Planning.IPlan)", span="25-25"];
m22_4 [cluster="Ninject.Planning.Planner.GetPlan(System.Type)", file="Verb.cs", label="Entry Ninject.Planning.Planner.GetPlan(System.Type)", span="61-61"];
m22_5 [cluster="Ninject.Planning.Planner.GetPlan(System.Type)", file="Verb.cs", label="this.plannerLock.AcquireReaderLock(Timeout.Infinite)", span="63-63"];
m22_7 [cluster="Ninject.Planning.Planner.GetPlan(System.Type)", file="Verb.cs", label="return this.plans.TryGetValue(type, out plan) ? plan : this.CreateNewPlan(type);", span="67-67"];
m22_6 [cluster="Ninject.Planning.Planner.GetPlan(System.Type)", file="Verb.cs", label="IPlan plan", span="66-66"];
m22_8 [cluster="Ninject.Planning.Planner.GetPlan(System.Type)", file="Verb.cs", label="Exit Ninject.Planning.Planner.GetPlan(System.Type)", span="61-61"];
m22_0 [cluster="Ninject.Planning.Planner.Planner(System.Collections.Generic.IEnumerable<Ninject.Planning.Strategies.IPlanningStrategy>)", file="Verb.cs", label="Entry Ninject.Planning.Planner.Planner(System.Collections.Generic.IEnumerable<Ninject.Planning.Strategies.IPlanningStrategy>)", span="46-46"];
m22_1 [cluster="Ninject.Planning.Planner.Planner(System.Collections.Generic.IEnumerable<Ninject.Planning.Strategies.IPlanningStrategy>)", file="Verb.cs", label="this.Strategies = strategies.ToList()", span="48-48"];
m22_2 [cluster="Ninject.Planning.Planner.Planner(System.Collections.Generic.IEnumerable<Ninject.Planning.Strategies.IPlanningStrategy>)", file="Verb.cs", label="Exit Ninject.Planning.Planner.Planner(System.Collections.Generic.IEnumerable<Ninject.Planning.Strategies.IPlanningStrategy>)", span="46-46"];
m22_25 [cluster="System.Threading.ReaderWriterLock.UpgradeToWriterLock(int)", file="Verb.cs", label="Entry System.Threading.ReaderWriterLock.UpgradeToWriterLock(int)", span="0-0"];
m22_27 [cluster="System.Collections.Generic.IEnumerable<T>.Map<T>(System.Action<T>)", file="Verb.cs", label="Entry System.Collections.Generic.IEnumerable<T>.Map<T>(System.Action<T>)", span="28-28"];
m22_28 [cluster="lambda expression", file="Verb.cs", label="Entry lambda expression", span="104-104"];
m22_29 [cluster="lambda expression", file="Verb.cs", label="s.Execute(plan)", span="104-104"];
m22_30 [cluster="lambda expression", file="Verb.cs", label="Exit lambda expression", span="104-104"];
m22_15 [cluster="Ninject.Planning.Plan.Plan(System.Type)", file="Verb.cs", label="Entry Ninject.Planning.Plan.Plan(System.Type)", span="38-38"];
m22_9 [cluster="System.Threading.ReaderWriterLock.AcquireReaderLock(int)", file="Verb.cs", label="Entry System.Threading.ReaderWriterLock.AcquireReaderLock(int)", span="0-0"];
m22_11 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="Entry Ninject.Planning.Planner.CreateNewPlan(System.Type)", span="91-91"];
m22_16 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="var lockCooki = this.plannerLock.UpgradeToWriterLock(Timeout.Infinite)", span="93-93"];
m22_18 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="this.plans.TryGetValue(type, out plan)", span="97-97"];
m22_20 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="plan = this.CreateEmptyPlan(type)", span="102-102"];
m22_21 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="this.plans.Add(type, plan)", span="103-103"];
m22_17 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="IPlan plan", span="96-96"];
m22_19 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="return plan;", span="99-99"];
m22_22 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="this.Strategies.Map(s => s.Execute(plan))", span="104-104"];
m22_23 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="return plan;", span="106-106"];
m22_24 [cluster="Ninject.Planning.Planner.CreateNewPlan(System.Type)", file="Verb.cs", label="Exit Ninject.Planning.Planner.CreateNewPlan(System.Type)", span="91-91"];
m22_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="Verb.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m22_10 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="Verb.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m22_26 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="Verb.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m22_32 [file="Verb.cs", label="Ninject.Planning.Planner", span=""];
m22_33 [file="Verb.cs", label=plan, span=""];
n154 -> n12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n154 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n155 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n155 -> n16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n156 -> n98  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n157 -> n98  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n158 -> n106  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n158 -> n117  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n159 -> n106  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n160 -> n110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n160 -> n114  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n161 -> n117  [color=darkseagreen4, key=1, label=token, style=dashed];
n0 -> n12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n0 -> n16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n5 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n6 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n98  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
n3 -> n24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n3 -> n106  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n114  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n3 -> n117  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n44  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
n4 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n4 -> n16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n19 -> n86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n19 -> n36  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
n23 -> n27  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
n98 -> n102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n98  [color=darkseagreen4, key=1, label=p, style=dashed];
n25 -> n27  [color=darkseagreen4, key=1, label=preprocessorErrors, style=dashed];
n28 -> n43  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
n30 -> n105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n43  [color=darkseagreen4, key=1, label=optionSpecPropsResult, style=dashed];
n32 -> n113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n32 -> n43  [color=darkseagreen4, key=1, label=valueSpecPropsResult, style=dashed];
n33 -> n116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n117  [color=darkseagreen4, key=1, label=token, style=dashed];
n33 -> n43  [color=darkseagreen4, key=1, label=missingValueErrors, style=dashed];
n37 -> n120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n44 -> n44  [color=darkseagreen4, key=1, label=e, style=dashed];
n20 -> n91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n98  [color=darkseagreen4, key=1, label=specProps, style=dashed];
n22 -> n106  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n43 -> n45  [color=darkseagreen4, key=1, label=allErrors, style=dashed];
n38 -> n123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n45  [color=darkseagreen4, key=1, label=instance, style=dashed];
n40 -> n148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n40 -> n151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n41 -> n45  [color=darkseagreen4, key=1, label=instance, style=dashed];
m0_5 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_54 -> m0_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_36 -> m0_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_36 -> m0_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m0_36 -> m0_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_42 -> m0_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_64 -> m0_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_64 -> m0_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m0_3 -> m0_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_24  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m0_21 -> m0_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m0_22 -> m0_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_22 -> m0_24  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m0_0 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_81 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_82 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_82 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_83 -> m0_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_84 -> m0_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m0_85 -> m0_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_85 -> m0_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_85 -> m0_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_86 -> m0_51  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_86 -> m0_54  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_86 -> m0_59  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_87 -> m0_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m0_88 -> m0_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_89 -> m0_71  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_21 -> m1_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_21 -> m1_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_21 -> m1_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_21 -> m1_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_20 -> m1_29  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_20 -> m1_33  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_9 -> m1_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_15 -> m1_21  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_16 -> m1_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_16 -> m1_16  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_46 -> m1_21  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_47 -> m1_29  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_47 -> m1_33  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m2_8 -> m2_11  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_5 -> m7_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_4 -> m7_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m7_0 -> m7_5  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m7_1 -> m7_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_1 -> m7_1  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m7_14 -> m7_5  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m7_15 -> m7_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m7_16 -> m7_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m11_28 -> m11_30  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m11_29 -> m11_31  [color=darkseagreen4, key=1, label=builder, style=dashed];
m11_29 -> m11_32  [color=darkseagreen4, key=1, label=builder, style=dashed];
m12_1 -> m12_1  [color=darkseagreen4, key=1, label=t, style=dashed];
m12_1 -> m12_5  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_1 -> m12_6  [color=darkseagreen4, key=1, label=t, style=dashed];
m12_9 -> m12_6  [color=darkseagreen4, key=1, label=t, style=dashed];
m13_102 -> m13_120  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_102 -> m13_122  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_102 -> m13_123  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_102 -> m13_126  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_102 -> m13_127  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_124 -> m13_127  [color=darkseagreen4, key=1, label=errors, style=dashed];
m13_61 -> m13_176  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_424 -> m13_431  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m13_427 -> m13_434  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m13_427 -> m13_445  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m13_428 -> m13_433  [color=darkseagreen4, key=1, label=hasShort, style=dashed];
m13_428 -> m13_443  [color=darkseagreen4, key=1, label=hasShort, style=dashed];
m13_429 -> m13_438  [color=darkseagreen4, key=1, label=hasLong, style=dashed];
m13_429 -> m13_443  [color=darkseagreen4, key=1, label=hasLong, style=dashed];
m13_434 -> m13_434  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m13_434 -> m13_436  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m13_437 -> m13_445  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m13_442 -> m13_445  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m13_436 -> m13_436  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m13_323 -> m13_323  [color=darkseagreen4, key=1, label=verbTuple, style=dashed];
m13_130 -> m13_206  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_206 -> m13_209  [color=darkseagreen4, key=1, label=meaningfulErrors, style=dashed];
m13_209 -> m13_224  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_338 -> m13_382  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_338 -> m13_386  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_338 -> m13_348  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_338 -> m13_350  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m13_338 -> m13_353  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m13_338 -> m13_360  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_338 -> m13_363  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_338 -> m13_366  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_338 -> m13_367  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_338 -> m13_371  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_338 -> m13_372  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_347 -> m13_381  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_347 -> m13_385  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_352 -> m13_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_352 -> m13_355  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m13_352 -> m13_373  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m13_354 -> m13_373  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m13_357 -> m13_359  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_357 -> m13_360  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_357 -> m13_361  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_357 -> m13_363  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_357 -> m13_366  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_357 -> m13_367  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_370 -> m13_372  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m13_370 -> m13_373  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m13_356 -> m13_360  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m13_356 -> m13_366  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m13_362 -> m13_365  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m13_358 -> m13_360  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_358 -> m13_361  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_358 -> m13_363  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_358 -> m13_366  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_358 -> m13_367  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_358 -> m13_369  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_369 -> m13_369  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_365 -> m13_365  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m13_420 -> m13_422  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_317 -> m13_319  [color=darkseagreen4, key=1, label=attr, style=dashed];
m13_384 -> m13_397  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m13_384 -> m13_403  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m13_393 -> m13_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_393 -> m13_402  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_76 -> m13_83  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_76 -> m13_100  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_76 -> m13_86  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_76 -> m13_113  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_79 -> m13_82  [color=darkseagreen4, key=1, label=errors, style=dashed];
m13_83 -> m13_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_83 -> m13_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_86 -> m13_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_86 -> m13_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_86 -> m13_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_86 -> m13_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_80 -> m13_93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_82 -> m13_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_84 -> m13_86  [color=darkseagreen4, key=1, label=err, style=dashed];
m13_85 -> m13_107  [color=darkseagreen4, key=1, label=pr, style=dashed];
m13_168 -> m13_171  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_60 -> m13_182  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m13_60 -> m13_184  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m13_311 -> m13_315  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_228 -> m13_231  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_392 -> m13_460  [color=darkseagreen4, key=1, label=T, style=dashed];
m13_392 -> m13_461  [color=darkseagreen4, key=1, label=T, style=dashed];
m13_392 -> m13_462  [color=darkseagreen4, key=1, label=T, style=dashed];
m13_392 -> m13_465  [color=darkseagreen4, key=1, label=T, style=dashed];
m13_463 -> m13_467  [color=darkseagreen4, key=1, label=asEnumerable, style=dashed];
m13_466 -> m13_468  [color=darkseagreen4, key=1, label=builder, style=dashed];
m13_466 -> m13_469  [color=darkseagreen4, key=1, label=builder, style=dashed];
m13_25 -> m13_28  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_25 -> m13_41  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_25 -> m13_43  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_25 -> m13_44  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_26 -> m13_32  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_26 -> m13_63  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_26 -> m13_38  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_26 -> m13_39  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_26 -> m13_67  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_26 -> m13_40  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_26 -> m13_70  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_26 -> m13_43  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_26 -> m13_44  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_26 -> m13_45  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_29 -> m13_41  [color=darkseagreen4, key=1, label=errors, style=dashed];
m13_31 -> m13_63  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_31 -> m13_38  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_31 -> m13_39  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_31 -> m13_67  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_31 -> m13_40  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_31 -> m13_70  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_31 -> m13_43  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_31 -> m13_44  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_31 -> m13_45  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_34 -> m13_40  [color=darkseagreen4, key=1, label=usageLines, style=dashed];
m13_41 -> m13_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_27 -> m13_41  [color=darkseagreen4, key=1, label=errors, style=dashed];
m13_32 -> m13_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_36 -> m13_38  [color=darkseagreen4, key=1, label=heading, style=dashed];
m13_39 -> m13_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_40 -> m13_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_33 -> m13_35  [color=darkseagreen4, key=1, label=usageAttr, style=dashed];
m13_33 -> m13_39  [color=darkseagreen4, key=1, label=usageAttr, style=dashed];
m13_179 -> m13_331  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m13_179 -> m13_336  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_328 -> m13_331  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
m13_328 -> m13_336  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
m13_330 -> m13_336  [color=darkseagreen4, key=1, label=remainingSpace, style=dashed];
m13_331 -> m13_335  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_299 -> m13_301  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m13_300 -> m13_308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_273 -> m13_279  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_273 -> m13_280  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m13_273 -> m13_282  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_273 -> m13_283  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m13_273 -> m13_285  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_273 -> m13_286  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m13_273 -> m13_290  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m13_273 -> m13_291  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_273 -> m13_292  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m13_276 -> m13_278  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_276 -> m13_279  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_276 -> m13_280  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_276 -> m13_282  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_276 -> m13_285  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_276 -> m13_286  [color=darkseagreen4, key=1, label=words, style=dashed];
m13_289 -> m13_291  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_289 -> m13_292  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_275 -> m13_279  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m13_275 -> m13_285  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m13_281 -> m13_284  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m13_277 -> m13_279  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_277 -> m13_280  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_277 -> m13_282  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_277 -> m13_285  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_277 -> m13_286  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_277 -> m13_288  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_288 -> m13_288  [color=darkseagreen4, key=1, label=i, style=dashed];
m13_284 -> m13_284  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m13_10 -> m13_13  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_10 -> m13_15  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_388 -> m13_408  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m13_388 -> m13_412  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m13_405 -> m13_407  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_405 -> m13_411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_143 -> m13_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_417 -> m13_420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_188 -> m13_191  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_425 -> m13_450  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m13_448 -> m13_452  [color=darkseagreen4, key=1, label=hasMeta, style=dashed];
m13_193 -> m13_196  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m13_193 -> m13_198  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_151 -> m13_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_159 -> m13_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_242 -> m13_244  [color=darkseagreen4, key=1, label=examples, style=dashed];
m13_250 -> m13_260  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_475 -> m13_136  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_140  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_143  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_148  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_144  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_151  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_155  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_152  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_159  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_164  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_160  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_168  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_172  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_169  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_176  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_184  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_191  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_198  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_266  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_323  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_331  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_336  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_332  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_339  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_341  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_343  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_344  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_346  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_382  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_386  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_348  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_350  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_361  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_364  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_367  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_371  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_373  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_374  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_393  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_397  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_403  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_414  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_415  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_435  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_475 -> m13_440  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m13_476 -> m13_63  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_476 -> m13_67  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_476 -> m13_70  [color=darkseagreen4, key=1, label=auto, style=dashed];
m13_477 -> m13_100  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_477 -> m13_113  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m13_478 -> m13_107  [color=darkseagreen4, key=1, label=pr, style=dashed];
m13_480 -> m13_336  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_481 -> m13_336  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
m13_482 -> m13_336  [color=darkseagreen4, key=1, label=remainingSpace, style=dashed];
m13_483 -> m13_382  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_483 -> m13_386  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_484 -> m13_382  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m13_484 -> m13_386  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m13_486 -> m13_397  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m13_486 -> m13_403  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m13_487 -> m13_408  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m13_487 -> m13_412  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m15_2 -> m15_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m15_2 -> m15_8  [color=darkseagreen4, key=1, label=switches, style=dashed];
m15_3 -> m15_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m15_3 -> m15_8  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m15_4 -> m15_32  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m15_4 -> m15_8  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m15_5 -> m15_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_5 -> m15_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_5 -> m15_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_8 -> m15_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_6 -> m15_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_6 -> m15_8  [color=darkseagreen4, key=1, label=values, style=dashed];
m15_41 -> m15_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m15_42 -> m15_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m15_43 -> m15_32  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m17_31 -> m17_33  [color=darkseagreen4, key=1, label=result, style=dashed];
m17_32 -> m17_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_32 -> m17_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_35 -> m17_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m17_35 -> m17_68  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m17_35 -> m17_63  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m17_35 -> m17_73  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m17_35 -> m17_53  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m17_35 -> m17_46  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_44 -> m17_63  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_44 -> m17_73  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_44 -> m17_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_44 -> m17_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_44 -> m17_46  [color=darkseagreen4, key=1, label=changeType, style=dashed];
m17_45 -> m17_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_81 -> m17_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_60 -> m17_68  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m17_60 -> m17_63  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m17_60 -> m17_73  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m17_60 -> m17_78  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m17_62 -> m17_73  [color=darkseagreen4, key=1, label=type, style=dashed];
m17_62 -> m17_78  [color=darkseagreen4, key=1, label=type, style=dashed];
m17_63 -> m17_65  [color=darkseagreen4, key=1, label=withValue, style=dashed];
m17_51 -> m17_63  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_51 -> m17_73  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_51 -> m17_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_51 -> m17_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_5 -> m17_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m17_6 -> m17_21  [color=darkseagreen4, key=1, label=type, style=dashed];
m17_6 -> m17_8  [color=darkseagreen4, key=1, label=type, style=dashed];
m17_7 -> m17_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_8 -> m17_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_8 -> m17_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_90 -> m17_95  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m17_92 -> m17_96  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
m17_102 -> m17_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m17_103 -> m17_21  [color=darkseagreen4, key=1, label=type, style=dashed];
m17_104 -> m17_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m17_104 -> m17_68  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m17_104 -> m17_53  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m17_105 -> m17_63  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m17_105 -> m17_73  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m17_106 -> m17_63  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_106 -> m17_73  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_106 -> m17_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_107 -> m17_68  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m17_107 -> m17_73  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m17_107 -> m17_78  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m17_108 -> m17_73  [color=darkseagreen4, key=1, label=type, style=dashed];
m17_108 -> m17_78  [color=darkseagreen4, key=1, label=type, style=dashed];
m18_0 -> m18_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_1 -> m18_7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_1 -> m18_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_24 -> m18_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_24 -> m18_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_24 -> m18_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_22 -> m18_31  [color=darkseagreen4, key=1, label=T1, style=dashed];
m18_23 -> m18_25  [color=darkseagreen4, key=1, label=descr, style=dashed];
m18_15 -> m18_20  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_16 -> m18_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_16 -> m18_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_41 -> m18_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_42 -> m18_8  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m18_43 -> m18_20  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_44 -> m18_20  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m18_46 -> m18_31  [color=darkseagreen4, key=1, label=T1, style=dashed];
m20_6 -> m20_4  [color=darkseagreen4, key=1, label="Ninject.Creation.ConstantProvider<T>", style=dashed];
m22_4 -> m22_7  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m22_7 -> m22_7  [color=darkseagreen4, key=1, label=plan, style=dashed];
m22_11 -> m22_18  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m22_11 -> m22_21  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m22_20 -> m22_22  [color=darkseagreen4, key=1, label=plan, style=dashed];
m22_20 -> m22_29  [color=darkseagreen4, key=1, label=plan, style=dashed];
m22_20 -> m22_23  [color=darkseagreen4, key=1, label=plan, style=dashed];
m22_22 -> m22_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m22_32 -> m22_5  [color=darkseagreen4, key=1, label="Ninject.Planning.Planner", style=dashed];
m22_32 -> m22_7  [color=darkseagreen4, key=1, label="Ninject.Planning.Planner", style=dashed];
m22_32 -> m22_18  [color=darkseagreen4, key=1, label="Ninject.Planning.Planner", style=dashed];
m22_32 -> m22_21  [color=darkseagreen4, key=1, label="Ninject.Planning.Planner", style=dashed];
m22_32 -> m22_22  [color=darkseagreen4, key=1, label="Ninject.Planning.Planner", style=dashed];
m22_33 -> m22_29  [color=darkseagreen4, key=1, label=plan, style=dashed];
}
