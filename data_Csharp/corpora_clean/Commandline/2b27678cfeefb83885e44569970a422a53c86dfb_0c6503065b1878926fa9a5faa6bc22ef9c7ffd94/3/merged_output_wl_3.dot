digraph  {
n165 [label=builder, span=""];
n166 [label=T, span=""];
n167 [label=shortSwitches, span=""];
n168 [label=settings, span=""];
n169 [label=sep, span=""];
n170 [label=doubQt, span=""];
n0 [cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()", label="Entry CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="48-48"];
n1 [cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()", label="return new UnParserSettings { GroupSwitches = true };", span="50-50"];
n2 [cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()", label="Exit CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="48-48"];
n3 [cluster="CommandLine.UnParserSettings.UnParserSettings()", label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="15-15"];
n4 [cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()", label="Entry CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="53-53"];
n5 [cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()", label="return new UnParserSettings { UseEqualToken = true };", span="55-55"];
n6 [cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()", label="Exit CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="53-53"];
n7 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="73-73"];
n8 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", label="return parser.FormatCommandLine(options, config => {});", span="75-75"];
n9 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="73-73"];
n10 [cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="87-87"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="75-75"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="75-75"];
n13 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="87-87"];
n14 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="options == null", span="89-89"];
n17 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="configuration(settings)", span="92-92"];
n19 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var type = options.GetType()", span="95-95"];
n22 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var specs =\r\n                (from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) })\r\n                where !info.PropertyValue.IsEmpty()\r\n                select info)\r\n                    .Memorize()", span="101-108"];
n61 [cluster="lambda expression", label="new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) }", span="104-105"];
n15 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="throw new ArgumentNullException(''options'');", span="89-89"];
n16 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var settings = new UnParserSettings()", span="91-91"];
n18 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="settings.Consumed = true", span="93-93"];
n25 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var optSpecs = settings.GroupSwitches\r\n                ? allOptSpecs.Where(info => !shortSwitches.Contains(info))\r\n                : allOptSpecs", span="123-125"];
n27 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="builder = settings.GroupSwitches && shortSwitches.Any()\r\n                ? builder.Append('-').Append(string.Join(string.Empty, shortSwitches.Select(\r\n                    info => ((OptionSpecification)info.Specification).ShortName).ToArray())).Append(' ')\r\n                : builder", span="132-135"];
n29 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="optSpecs.ForEach(\r\n                opt => builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' '))", span="138-139"];
n80 [cluster="lambda expression", label="builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' ')", span="139-139"];
n35 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n20 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var builder = new StringBuilder()", span="96-96"];
n36 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n21 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="type.GetVerbSpecification()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="98-99"];
n37 [cluster="System.Text.StringBuilder.StringBuilder()", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
n57 [cluster="lambda expression", label="builder.Append(verb.Name).Append(' ')", span="99-99"];
n38 [cluster="System.Type.GetVerbSpecification()", label="Entry System.Type.GetVerbSpecification()", span="28-28"];
n39 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n56 [cluster="lambda expression", label="Entry lambda expression", span="99-99"];
n23 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var allOptSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Option)\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType != TargetType.Switch || (o.TargetType == TargetType.Switch && ((bool)info.Value))\r\n                orderby o.UniqueName()\r\n                select info", span="110-114"];
n40 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="17-17"];
n41 [cluster="object.IsEmpty()", label="Entry object.IsEmpty()", span="220-220"];
n42 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
n60 [cluster="lambda expression", label="Entry lambda expression", span="104-105"];
n26 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="127-130"];
n24 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="var shortSwitches = from info in allOptSpecs\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType == TargetType.Switch\r\n                where o.ShortName.Length > 0\r\n                orderby o.UniqueName()\r\n                select info", span="116-121"];
n43 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n44 [cluster="Unk.UniqueName", label="Entry Unk.UniqueName", span=""];
n66 [cluster="lambda expression", label="Entry lambda expression", span="110-110"];
n70 [cluster="lambda expression", label="!shortSwitches.Contains(info)", span="124-124"];
n69 [cluster="lambda expression", label="Entry lambda expression", span="124-124"];
n28 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="builder\r\n                .TrimEndIfMatchWhen(!optSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="136-137"];
n73 [cluster="lambda expression", label="Entry lambda expression", span="127-127"];
n30 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="builder\r\n                .TrimEndIfMatchWhen(!valSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="140-141"];
n31 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="valSpecs.ForEach(\r\n                val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="142-143"];
n45 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n46 [cluster="System.Text.StringBuilder.Append(char)", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
n47 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n48 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n49 [cluster="Unk.Join", label="Entry Unk.Join", span=""];
n50 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
n76 [cluster="lambda expression", label="Entry lambda expression", span="134-134"];
n84 [cluster="lambda expression", label="builder.Append(FormatValue(val.Specification, val.Value)).Append(' ')", span="143-143"];
n32 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="return builder\r\n                .ToString().TrimEnd(' ');", span="145-146"];
n51 [cluster="System.Text.StringBuilder.TrailingSpaces()", label="Entry System.Text.StringBuilder.TrailingSpaces()", span="101-101"];
n52 [cluster="Unk.TrimEndIfMatchWhen", label="Entry Unk.TrimEndIfMatchWhen", span=""];
n53 [cluster="Unk.ForEach", label="Entry Unk.ForEach", span=""];
n79 [cluster="lambda expression", label="Entry lambda expression", span="139-139"];
n83 [cluster="lambda expression", label="Entry lambda expression", span="143-143"];
n33 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="87-87"];
n54 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n55 [cluster="string.TrimEnd(params char[])", label="Entry string.TrimEnd(params char[])", span="0-0"];
n34 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n58 [cluster="lambda expression", label="Exit lambda expression", span="99-99"];
n59 [cluster="Unk.Append", label="Entry Unk.Append", span=""];
n62 [cluster="lambda expression", label="Exit lambda expression", span="104-105"];
n63 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
n64 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
n65 [cluster="object.NormalizeValue()", label="Entry object.NormalizeValue()", span="209-209"];
n67 [cluster="lambda expression", label="i.Specification.Tag == SpecificationType.Option", span="110-110"];
n68 [cluster="lambda expression", label="Exit lambda expression", span="110-110"];
n71 [cluster="lambda expression", label="Exit lambda expression", span="124-124"];
n72 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n74 [cluster="lambda expression", label="i.Specification.Tag == SpecificationType.Value", span="127-127"];
n75 [cluster="lambda expression", label="Exit lambda expression", span="127-127"];
n77 [cluster="lambda expression", label="((OptionSpecification)info.Specification).ShortName", span="134-134"];
n78 [cluster="lambda expression", label="Exit lambda expression", span="134-134"];
n81 [cluster="lambda expression", label="Exit lambda expression", span="139-139"];
n82 [cluster="Unk.FormatOption", label="Entry Unk.FormatOption", span=""];
n85 [cluster="lambda expression", label="Exit lambda expression", span="143-143"];
n86 [cluster="Unk.FormatValue", label="Entry Unk.FormatValue", span=""];
n87 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="149-149"];
n88 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="var builder = new StringBuilder()", span="151-151"];
n89 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="spec.TargetType", span="152-152"];
n91 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="builder.Append(FormatWithQuotesIfString(value))", span="155-155"];
n93 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="var sep = spec.SeperatorOrSpace()", span="158-158"];
n95 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="var e = ((IEnumerable)value).GetEnumerator()", span="161-161"];
n97 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="builder.Append(format(e.Current)).Append(sep)", span="163-163"];
n98 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="builder.TrimEndIfMatch(' ')", span="164-164"];
n99 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="return builder.ToString();", span="167-167"];
n90 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="TargetType.Scalar", span="154-154"];
n92 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="TargetType.Sequence", span="157-157"];
n94 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="Func<object, object> format = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="159-160"];
n103 [cluster="CommandLine.Core.Specification.SeperatorOrSpace()", label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="181-181"];
n109 [cluster="lambda expression", label="sep == ' ' ? FormatWithQuotesIfString(v) : v", span="160-160"];
n96 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="e.MoveNext()", span="162-162"];
n104 [cluster="System.Collections.IEnumerable.GetEnumerator()", label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0"];
n105 [cluster="System.Collections.IEnumerator.MoveNext()", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
n106 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n102 [cluster="System.Text.StringBuilder.Append(object)", label="Entry System.Text.StringBuilder.Append(object)", span="0-0"];
n107 [cluster="System.Text.StringBuilder.TrimEndIfMatch(char)", label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="85-85"];
n101 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="170-170"];
n100 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="149-149"];
n108 [cluster="lambda expression", label="Entry lambda expression", span="159-160"];
n110 [cluster="lambda expression", label="Exit lambda expression", span="159-160"];
n111 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="172-173"];
n112 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="175-178"];
n116 [cluster="lambda expression", label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="173-173"];
n121 [cluster="lambda expression", label="v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="177-178"];
n113 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="170-170"];
n114 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="249-249"];
n120 [cluster="lambda expression", label="Entry lambda expression", span="177-178"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="172-173"];
n117 [cluster="lambda expression", label="Exit lambda expression", span="172-173"];
n118 [cluster="string.Contains(string)", label="Entry string.Contains(string)", span="0-0"];
n119 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
n122 [cluster="lambda expression", label="Exit lambda expression", span="177-178"];
n123 [cluster="Unk.doubQt", label="Entry Unk.doubQt", span=""];
n124 [cluster="string.JoinTo(params string[])", label="Entry string.JoinTo(params string[])", span="45-45"];
n125 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="181-181"];
n126 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", label="return (spec as OptionSpecification).ToMaybe()\r\n                .Return(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="183-184"];
n127 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="181-181"];
n128 [cluster="lambda expression", label="Entry lambda expression", span="184-184"];
n129 [cluster="lambda expression", label="o.Separator != '\0' ? o.Separator : ' '", span="184-184"];
n130 [cluster="lambda expression", label="Exit lambda expression", span="184-184"];
n131 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="187-187"];
n132 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", label="return new StringBuilder()\r\n                    .Append(spec.FormatName(settings))\r\n                    .AppendWhen(spec.TargetType != TargetType.Switch, FormatValue(spec, value))\r\n                .ToString();", span="189-192"];
n133 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="187-187"];
n134 [cluster="CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", label="Entry CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", span="195-195"];
n135 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
n136 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="195-195"];
n137 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", label="var longName =\r\n                optionSpec.LongName.Length > 0\r\n                && !settings.PreferShortName", span="197-199"];
n138 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", label="return\r\n                new StringBuilder(longName\r\n                    ? ''--''.JoinTo(optionSpec.LongName)\r\n                    : ''-''.JoinTo(optionSpec.ShortName))\r\n                        .AppendIf(longName && settings.UseEqualToken && optionSpec.ConversionType != typeof(bool), ''='', '' '')\r\n                    .ToString();", span="201-206"];
n139 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="195-195"];
n140 [cluster="System.Text.StringBuilder.StringBuilder(string)", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
n141 [cluster="System.Text.StringBuilder.AppendIf(bool, string, string)", label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="34-34"];
n142 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="Entry CommandLine.UnParserExtensions.NormalizeValue(object)", span="209-209"];
n143 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="value != null\r\n                && ReflectionHelper.IsFSharpOptionType(value.GetType())\r\n                && FSharpOptionHelper.IsSome(value)", span="211-213"];
n144 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="return FSharpOptionHelper.ValueOf(value);", span="215-215"];
n145 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="return value;", span="217-217"];
n147 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35"];
n148 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="38-38"];
n146 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", label="Exit CommandLine.UnParserExtensions.NormalizeValue(object)", span="209-209"];
n149 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="30-30"];
n150 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="220-220"];
n151 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="value == null", span="222-222"];
n153 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="ReflectionHelper.IsFSharpOptionType(value.GetType()) && !FSharpOptionHelper.IsSome(value)", span="223-223"];
n155 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="224-224"];
n157 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="value is string && ((string)value).Length == 0", span="225-225"];
n159 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="226-226"];
n152 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="222-222"];
n154 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="223-223"];
n156 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="224-224"];
n163 [cluster="System.Type.GetDefaultValue()", label="Entry System.Type.GetDefaultValue()", span="131-131"];
n164 [cluster="object.Equals(object)", label="Entry object.Equals(object)", span="0-0"];
n158 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="225-225"];
n160 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return true;", span="226-226"];
n161 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="return false;", span="227-227"];
n162 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="220-220"];
m1_21 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
m1_135 [cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs", label="Entry NameInfo.cstr", span=""];
m1_4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m1_8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n            {\r\n                var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0);\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return\r\n                            from s in options\r\n                            select new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification());\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-41"];
m1_9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m1_131 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m1_6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="87-87"];
m1_102 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        );\r\n                    if (options.Any())\r\n                    {\r\n                        return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="89-105"];
m1_103 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="87-87"];
m1_49 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
m1_139 [cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m1_95 [cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m1_17 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m1_22 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_75 [cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs", label="Entry Unk.IsNothing", span=""];
m1_50 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m1_7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="108-108"];
m1_122 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="110-128"];
m1_123 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="108-108"];
m1_91 [cluster="Unk.Contains", file="SpecificationPropertyRules.cs", label="Entry Unk.Contains", span=""];
m1_111 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
m1_0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m1_1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
m1_2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m1_136 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="115-115"];
m1_11 [cluster="lambda expression", color=red, community=2, file="SpecificationPropertyRules.cs", label="0: var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0)", span="28-31"];
m1_10 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-41"];
m1_12 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32"];
m1_23 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="29-29"];
m1_27 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="30-30"];
m1_31 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="31-31"];
m1_14 [cluster="lambda expression", color=red, community=2, file="SpecificationPropertyRules.cs", label="0: return\r\n                            from s in options\r\n                            select new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification());", span="35-38"];
m1_13 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: groups.Count() > 1", span="33-33"];
m1_34 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="32-32"];
m1_15 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return Enumerable.Empty<Error>();", span="40-40"];
m1_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-41"];
m1_24 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="29-29"];
m1_25 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="29-29"];
m1_28 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsJust()", span="30-30"];
m1_29 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="30-30"];
m1_32 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: ((OptionSpecification)sp.Specification).SetName.Length > 0", span="31-31"];
m1_33 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="31-31"];
m1_35 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: ((OptionSpecification)g.Specification).SetName", span="32-32"];
m1_36 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="32-32"];
m1_40 [cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs", label="0: var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count()", span="48-53"];
m1_41 [cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs", label="0: var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()", span="55-60"];
m1_42 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList()", span="62-81"];
m1_39 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="46-84"];
m1_51 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="49-49"];
m1_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="50-50"];
m1_89 [cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs", label="0: ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))", span="73-76"];
m1_57 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="56-56"];
m1_60 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="57-57"];
m1_63 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="58-58"];
m1_43 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return from sp in missing select new MissingRequiredOptionError(sp.Specification.FromSpecification());", span="83-83"];
m1_66 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="63-63"];
m1_69 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="64-64"];
m1_72 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="65-65"];
m1_76 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="66-66"];
m1_79 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="68-68"];
m1_82 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="69-69"];
m1_85 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="70-70"];
m1_88 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="72-76"];
m1_92 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="79-79"];
m1_96 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="80-80"];
m1_99 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="81-81"];
m1_44 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="46-84"];
m1_52 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="49-49"];
m1_53 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="49-49"];
m1_55 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: ((OptionSpecification)sp.Specification).SetName", span="50-50"];
m1_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="50-50"];
m1_58 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="56-56"];
m1_59 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="56-56"];
m1_61 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: sp.Specification.Required", span="57-57"];
m1_62 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="57-57"];
m1_64 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: ((OptionSpecification)sp.Specification).SetName", span="58-58"];
m1_65 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="58-58"];
m1_67 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="63-63"];
m1_68 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="63-63"];
m1_70 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: sp.Specification.Required", span="64-64"];
m1_71 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="64-64"];
m1_73 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsNothing()", span="65-65"];
m1_74 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="65-65"];
m1_77 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: ((OptionSpecification)sp.Specification).SetName.Length == 0", span="66-66"];
m1_78 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="66-66"];
m1_80 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="68-68"];
m1_81 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="68-68"];
m1_83 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: sp.Specification.Required", span="69-69"];
m1_84 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="69-69"];
m1_86 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsNothing()", span="70-70"];
m1_87 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="70-70"];
m1_90 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="72-76"];
m1_93 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsValue()", span="79-79"];
m1_94 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="79-79"];
m1_97 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: sp.Specification.Required", span="80-80"];
m1_98 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="80-80"];
m1_100 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsNothing()", span="81-81"];
m1_101 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="81-81"];
m1_105 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="91-97"];
m1_104 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="89-105"];
m1_106 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="98-98"];
m1_112 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="92-92"];
m1_115 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="93-93"];
m1_118 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="94-96"];
m1_107 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());", span="100-102"];
m1_108 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="104-104"];
m1_109 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="89-105"];
m1_113 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.TargetType == TargetType.Sequence", span="92-92"];
m1_114 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="92-92"];
m1_116 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Value.IsJust()", span="93-93"];
m1_117 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="93-93"];
m1_119 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="(sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())", span="95-96"];
m1_120 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="94-96"];
m1_126 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="115-119"];
m1_125 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="112-114"];
m1_124 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="110-128"];
m1_127 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="120-123"];
m1_128 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="124-126"];
m1_129 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return errors;", span="127-127"];
m1_130 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="110-128"];
m1_137 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="t.IsName()", span="115-115"];
m1_138 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="115-115"];
m1_134 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335"];
m1_48 [cluster="Unk.Concat", file="SpecificationPropertyRules.cs", label="Entry Unk.Concat", span=""];
m1_5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="44-44"];
m1_37 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n            {\r\n                var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count();\r\n\r\n                var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList();\r\n\r\n                var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList();\r\n\r\n                return from sp in missing select new MissingRequiredOptionError(sp.Specification.FromSpecification());\r\n            };", span="46-84"];
m1_38 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="44-44"];
m1_45 [cluster="Unk.Select", file="SpecificationPropertyRules.cs", label="Entry Unk.Select", span=""];
m1_30 [cluster="Unk.IsJust", file="SpecificationPropertyRules.cs", label="Entry Unk.IsJust", span=""];
m1_132 [cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs", label="Entry Unk.UniqueName", span=""];
m1_47 [cluster="Unk.ToList", file="SpecificationPropertyRules.cs", label="Entry Unk.ToList", span=""];
m1_20 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302"];
m1_133 [cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m1_26 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m1_121 [cluster="Unk.FromJust", file="SpecificationPropertyRules.cs", label="Entry Unk.FromJust", span=""];
m1_3 [cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_46 [cluster="Unk.Distinct", file="SpecificationPropertyRules.cs", label="Entry Unk.Distinct", span=""];
m1_18 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m1_19 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m1_140 [file="SpecificationPropertyRules.cs", label=setCount, span=""];
m1_141 [file="SpecificationPropertyRules.cs", label=setWithRequired, span=""];
m1_142 [file="SpecificationPropertyRules.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n165 -> n57  [color=darkseagreen4, key=1, label=builder, style=dashed];
n165 -> n80  [color=darkseagreen4, key=1, label=builder, style=dashed];
n165 -> n84  [color=darkseagreen4, key=1, label=builder, style=dashed];
n166 -> n61  [color=darkseagreen4, key=1, label=T, style=dashed];
n167 -> n70  [color=darkseagreen4, key=1, label=shortSwitches, style=dashed];
n168 -> n80  [color=darkseagreen4, key=1, label=settings, style=dashed];
n169 -> n109  [color=darkseagreen4, key=1, label=sep, style=dashed];
n170 -> n121  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n3  [key=2, style=dotted];
n6 -> n4  [color=blue, key=0, style=bold];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=2, style=dotted];
n8 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n9 -> n7  [color=blue, key=0, style=bold];
n11 -> n12  [key=0, style=solid];
n12 -> n11  [color=blue, key=0, style=bold];
n13 -> n14  [key=0, style=solid];
n13 -> n17  [color=darkseagreen4, key=1, label="System.Action<CommandLine.UnParserSettings>", style=dashed];
n13 -> n19  [color=darkseagreen4, key=1, label=T, style=dashed];
n13 -> n22  [color=darkseagreen4, key=1, label=T, style=dashed];
n13 -> n61  [color=darkseagreen4, key=1, label=T, style=dashed];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n17 -> n35  [key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n36  [key=2, style=dotted];
n19 -> n21  [color=darkseagreen4, key=1, label=type, style=dashed];
n19 -> n22  [color=darkseagreen4, key=1, label=type, style=dashed];
n22 -> n23  [key=0, style=solid];
n22 -> n40  [key=2, style=dotted];
n22 -> n41  [key=2, style=dotted];
n22 -> n42  [key=2, style=dotted];
n22 -> n60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n22 -> n22  [color=darkseagreen4, key=1, label=info, style=dashed];
n22 -> n26  [color=darkseagreen4, key=1, label=specs, style=dashed];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=2, style=dotted];
n61 -> n64  [key=2, style=dotted];
n61 -> n65  [key=2, style=dotted];
n15 -> n33  [key=0, style=solid];
n15 -> n34  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n3  [key=2, style=dotted];
n16 -> n18  [color=darkseagreen4, key=1, label=settings, style=dashed];
n16 -> n25  [color=darkseagreen4, key=1, label=settings, style=dashed];
n16 -> n27  [color=darkseagreen4, key=1, label=settings, style=dashed];
n16 -> n29  [color=darkseagreen4, key=1, label=settings, style=dashed];
n16 -> n80  [color=darkseagreen4, key=1, label=settings, style=dashed];
n18 -> n19  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n43  [key=2, style=dotted];
n25 -> n69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n25 -> n28  [color=darkseagreen4, key=1, label=optSpecs, style=dashed];
n25 -> n29  [color=darkseagreen4, key=1, label=optSpecs, style=dashed];
n27 -> n28  [key=0, style=solid];
n27 -> n45  [key=2, style=dotted];
n27 -> n46  [key=2, style=dotted];
n27 -> n47  [key=2, style=dotted];
n27 -> n48  [key=2, style=dotted];
n27 -> n49  [key=2, style=dotted];
n27 -> n50  [key=2, style=dotted];
n27 -> n27  [color=darkseagreen4, key=1, label=builder, style=dashed];
n27 -> n76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n27 -> n29  [color=darkseagreen4, key=1, label=builder, style=dashed];
n27 -> n80  [color=darkseagreen4, key=1, label=builder, style=dashed];
n27 -> n30  [color=darkseagreen4, key=1, label=builder, style=dashed];
n27 -> n31  [color=darkseagreen4, key=1, label=builder, style=dashed];
n27 -> n84  [color=darkseagreen4, key=1, label=builder, style=dashed];
n27 -> n32  [color=darkseagreen4, key=1, label=builder, style=dashed];
n29 -> n30  [key=0, style=solid];
n29 -> n53  [key=2, style=dotted];
n29 -> n79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n80 -> n81  [key=0, style=solid];
n80 -> n82  [key=2, style=dotted];
n80 -> n50  [key=2, style=dotted];
n80 -> n46  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n37  [key=2, style=dotted];
n20 -> n57  [color=darkseagreen4, key=1, label=builder, style=dashed];
n20 -> n27  [color=darkseagreen4, key=1, label=builder, style=dashed];
n21 -> n22  [key=0, style=solid];
n21 -> n38  [key=2, style=dotted];
n21 -> n39  [key=2, style=dotted];
n21 -> n56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n57 -> n58  [key=0, style=solid];
n57 -> n59  [key=2, style=dotted];
n57 -> n46  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n43  [key=2, style=dotted];
n23 -> n44  [key=2, style=dotted];
n23 -> n66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n23 -> n23  [color=darkseagreen4, key=1, label=info, style=dashed];
n23 -> n25  [color=darkseagreen4, key=1, label=allOptSpecs, style=dashed];
n60 -> n61  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n43  [key=2, style=dotted];
n26 -> n73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n26  [color=darkseagreen4, key=1, label=info, style=dashed];
n26 -> n30  [color=darkseagreen4, key=1, label=valSpecs, style=dashed];
n26 -> n31  [color=darkseagreen4, key=1, label=valSpecs, style=dashed];
n24 -> n25  [key=0, style=solid];
n24 -> n44  [key=2, style=dotted];
n24 -> n24  [color=darkseagreen4, key=1, label=info, style=dashed];
n24 -> n70  [color=darkseagreen4, key=1, label=shortSwitches, style=dashed];
n24 -> n27  [color=darkseagreen4, key=1, label=shortSwitches, style=dashed];
n66 -> n67  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n70 -> n72  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n45  [key=2, style=dotted];
n28 -> n51  [key=2, style=dotted];
n28 -> n52  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n45  [key=2, style=dotted];
n30 -> n51  [key=2, style=dotted];
n30 -> n52  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n53  [key=2, style=dotted];
n31 -> n83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n76 -> n77  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n86  [key=2, style=dotted];
n84 -> n50  [key=2, style=dotted];
n84 -> n46  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n54  [key=2, style=dotted];
n32 -> n55  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n33 -> n13  [color=blue, key=0, style=bold];
n58 -> n56  [color=blue, key=0, style=bold];
n62 -> n60  [color=blue, key=0, style=bold];
n67 -> n68  [key=0, style=solid];
n68 -> n66  [color=blue, key=0, style=bold];
n71 -> n69  [color=blue, key=0, style=bold];
n74 -> n75  [key=0, style=solid];
n75 -> n73  [color=blue, key=0, style=bold];
n77 -> n78  [key=0, style=solid];
n78 -> n76  [color=blue, key=0, style=bold];
n81 -> n79  [color=blue, key=0, style=bold];
n85 -> n83  [color=blue, key=0, style=bold];
n87 -> n88  [key=0, style=solid];
n87 -> n89  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n87 -> n91  [color=darkseagreen4, key=1, label=object, style=dashed];
n87 -> n93  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n87 -> n95  [color=darkseagreen4, key=1, label=object, style=dashed];
n88 -> n89  [key=0, style=solid];
n88 -> n37  [key=2, style=dotted];
n88 -> n91  [color=darkseagreen4, key=1, label=builder, style=dashed];
n88 -> n97  [color=darkseagreen4, key=1, label=builder, style=dashed];
n88 -> n98  [color=darkseagreen4, key=1, label=builder, style=dashed];
n88 -> n99  [color=darkseagreen4, key=1, label=builder, style=dashed];
n89 -> n90  [key=0, style=solid];
n89 -> n92  [key=0, style=solid];
n91 -> n99  [key=0, style=solid];
n91 -> n101  [key=2, style=dotted];
n91 -> n102  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n103  [key=2, style=dotted];
n93 -> n109  [color=darkseagreen4, key=1, label=sep, style=dashed];
n93 -> n97  [color=darkseagreen4, key=1, label=sep, style=dashed];
n95 -> n96  [key=0, style=solid];
n95 -> n104  [key=2, style=dotted];
n95 -> n97  [color=darkseagreen4, key=1, label=e, style=dashed];
n97 -> n96  [key=0, style=solid];
n97 -> n106  [key=2, style=dotted];
n97 -> n102  [key=2, style=dotted];
n97 -> n46  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n107  [key=2, style=dotted];
n99 -> n100  [key=0, style=solid];
n99 -> n54  [key=2, style=dotted];
n90 -> n91  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n94 -> n109  [color=darkseagreen4, key=1, label=object, style=dashed];
n94 -> n97  [color=darkseagreen4, key=1, label=format, style=dashed];
n109 -> n110  [key=0, style=solid];
n109 -> n101  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n96 -> n98  [key=0, style=solid];
n96 -> n105  [key=2, style=dotted];
n101 -> n111  [key=0, style=solid];
n101 -> n112  [color=darkseagreen4, key=1, label=object, style=dashed];
n100 -> n87  [color=blue, key=0, style=bold];
n108 -> n109  [key=0, style=solid];
n110 -> n108  [color=blue, key=0, style=bold];
n111 -> n112  [key=0, style=solid];
n111 -> n116  [color=darkseagreen4, key=1, label=string, style=dashed];
n111 -> n121  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
n112 -> n113  [key=0, style=solid];
n112 -> n114  [key=2, style=dotted];
n112 -> n39  [key=2, style=dotted];
n112 -> n120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n116 -> n117  [key=0, style=solid];
n116 -> n118  [key=2, style=dotted];
n116 -> n119  [key=2, style=dotted];
n121 -> n122  [key=0, style=solid];
n121 -> n72  [key=2, style=dotted];
n121 -> n123  [key=2, style=dotted];
n121 -> n124  [key=2, style=dotted];
n113 -> n101  [color=blue, key=0, style=bold];
n120 -> n121  [key=0, style=solid];
n115 -> n116  [key=0, style=solid];
n117 -> n115  [color=blue, key=0, style=bold];
n122 -> n120  [color=blue, key=0, style=bold];
n125 -> n126  [key=0, style=solid];
n126 -> n127  [key=0, style=solid];
n126 -> n114  [key=2, style=dotted];
n126 -> n39  [key=2, style=dotted];
n126 -> n128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n127 -> n125  [color=blue, key=0, style=bold];
n128 -> n129  [key=0, style=solid];
n129 -> n130  [key=0, style=solid];
n130 -> n128  [color=blue, key=0, style=bold];
n131 -> n132  [key=0, style=solid];
n132 -> n133  [key=0, style=solid];
n132 -> n37  [key=2, style=dotted];
n132 -> n134  [key=2, style=dotted];
n132 -> n50  [key=2, style=dotted];
n132 -> n87  [key=2, style=dotted];
n132 -> n135  [key=2, style=dotted];
n132 -> n54  [key=2, style=dotted];
n133 -> n131  [color=blue, key=0, style=bold];
n136 -> n137  [key=0, style=solid];
n136 -> n138  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
n137 -> n138  [key=0, style=solid];
n138 -> n139  [key=0, style=solid];
n138 -> n140  [key=2, style=dotted];
n138 -> n124  [key=2, style=dotted];
n138 -> n141  [key=2, style=dotted];
n138 -> n54  [key=2, style=dotted];
n139 -> n136  [color=blue, key=0, style=bold];
n142 -> n143  [key=0, style=solid];
n142 -> n144  [color=darkseagreen4, key=1, label=object, style=dashed];
n142 -> n145  [color=darkseagreen4, key=1, label=object, style=dashed];
n143 -> n144  [key=0, style=solid];
n143 -> n145  [key=0, style=solid];
n143 -> n36  [key=2, style=dotted];
n143 -> n147  [key=2, style=dotted];
n143 -> n148  [key=2, style=dotted];
n144 -> n146  [key=0, style=solid];
n144 -> n149  [key=2, style=dotted];
n145 -> n146  [key=0, style=solid];
n146 -> n142  [color=blue, key=0, style=bold];
n150 -> n151  [key=0, style=solid];
n150 -> n153  [color=darkseagreen4, key=1, label=object, style=dashed];
n150 -> n155  [color=darkseagreen4, key=1, label=object, style=dashed];
n150 -> n157  [color=darkseagreen4, key=1, label=object, style=dashed];
n150 -> n159  [color=darkseagreen4, key=1, label=object, style=dashed];
n151 -> n152  [key=0, style=solid];
n151 -> n153  [key=0, style=solid];
n153 -> n154  [key=0, style=solid];
n153 -> n155  [key=0, style=solid];
n153 -> n36  [key=2, style=dotted];
n153 -> n147  [key=2, style=dotted];
n153 -> n148  [key=2, style=dotted];
n155 -> n156  [key=0, style=solid];
n155 -> n157  [key=0, style=solid];
n155 -> n36  [key=2, style=dotted];
n155 -> n163  [key=2, style=dotted];
n155 -> n164  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n157 -> n159  [key=0, style=solid];
n159 -> n160  [key=0, style=solid];
n159 -> n161  [key=0, style=solid];
n159 -> n104  [key=2, style=dotted];
n159 -> n105  [key=2, style=dotted];
n152 -> n162  [key=0, style=solid];
n154 -> n162  [key=0, style=solid];
n156 -> n162  [key=0, style=solid];
n158 -> n162  [key=0, style=solid];
n160 -> n162  [key=0, style=solid];
n161 -> n162  [key=0, style=solid];
n162 -> n150  [color=blue, key=0, style=bold];
m1_4 -> m1_8  [color=red, key=0, style=solid];
m1_8 -> m1_9  [color=red, key=0, style=solid];
m1_8 -> m1_11  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_9 -> m1_4  [color=blue, key=0, style=bold];
m1_6 -> m1_102  [key=0, style=solid];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_105  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_103 -> m1_6  [color=blue, key=0, style=bold];
m1_7 -> m1_122  [key=0, style=solid];
m1_7 -> m1_126  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_122 -> m1_123  [key=0, style=solid];
m1_122 -> m1_125  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_122 -> m1_122  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> ", style=bold];
m1_123 -> m1_7  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_5  [key=2, style=dotted];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_136 -> m1_137  [key=0, style=solid];
m1_11 -> m1_12  [color=red, key=0, style=solid];
m1_11 -> m1_17  [color=red, key=2, style=dotted];
m1_11 -> m1_23  [color=red, key=1, label="lambda expression", style=dashed];
m1_11 -> m1_27  [color=red, key=1, label="lambda expression", style=dashed];
m1_11 -> m1_31  [color=red, key=1, label="lambda expression", style=dashed];
m1_11 -> m1_14  [color=red, key=1, label=options, style=dashed];
m1_10 -> m1_11  [color=red, key=0, style=solid];
m1_12 -> m1_13  [color=red, key=0, style=solid];
m1_12 -> m1_18  [color=red, key=2, style=dotted];
m1_12 -> m1_34  [color=red, key=1, label="lambda expression", style=dashed];
m1_23 -> m1_24  [color=red, key=0, style=solid];
m1_27 -> m1_28  [color=red, key=0, style=solid];
m1_31 -> m1_32  [color=red, key=0, style=solid];
m1_14 -> m1_16  [color=red, key=0, style=solid];
m1_14 -> m1_20  [color=red, key=2, style=dotted];
m1_14 -> m1_21  [color=red, key=2, style=dotted];
m1_14 -> m1_14  [color=red, key=1, label=s, style=dashed];
m1_13 -> m1_14  [color=red, key=0, style=solid];
m1_13 -> m1_15  [color=red, key=0, style=solid];
m1_13 -> m1_19  [color=red, key=2, style=dotted];
m1_34 -> m1_35  [color=red, key=0, style=solid];
m1_15 -> m1_16  [color=red, key=0, style=solid];
m1_15 -> m1_22  [color=red, key=2, style=dotted];
m1_16 -> m1_10  [color=blue, key=0, style=bold];
m1_24 -> m1_25  [color=red, key=0, style=solid];
m1_24 -> m1_26  [color=red, key=2, style=dotted];
m1_25 -> m1_23  [color=blue, key=0, style=bold];
m1_28 -> m1_29  [color=red, key=0, style=solid];
m1_28 -> m1_30  [color=red, key=2, style=dotted];
m1_29 -> m1_27  [color=blue, key=0, style=bold];
m1_32 -> m1_33  [color=red, key=0, style=solid];
m1_33 -> m1_31  [color=blue, key=0, style=bold];
m1_35 -> m1_36  [color=red, key=0, style=solid];
m1_36 -> m1_34  [color=blue, key=0, style=bold];
m1_40 -> m1_41  [color=red, key=0, style=solid];
m1_40 -> m1_17  [color=red, key=2, style=dotted];
m1_40 -> m1_45  [color=red, key=2, style=dotted];
m1_40 -> m1_46  [color=red, key=2, style=dotted];
m1_40 -> m1_47  [color=red, key=2, style=dotted];
m1_40 -> m1_19  [color=red, key=2, style=dotted];
m1_40 -> m1_51  [color=red, key=1, label="lambda expression", style=dashed];
m1_40 -> m1_54  [color=red, key=1, label="lambda expression", style=dashed];
m1_40 -> m1_42  [color=red, key=1, label=setCount, style=dashed];
m1_40 -> m1_89  [color=red, key=1, label=setCount, style=dashed];
m1_41 -> m1_42  [color=red, key=0, style=solid];
m1_41 -> m1_17  [color=red, key=2, style=dotted];
m1_41 -> m1_45  [color=red, key=2, style=dotted];
m1_41 -> m1_46  [color=red, key=2, style=dotted];
m1_41 -> m1_47  [color=red, key=2, style=dotted];
m1_41 -> m1_57  [color=red, key=1, label="lambda expression", style=dashed];
m1_41 -> m1_60  [color=red, key=1, label="lambda expression", style=dashed];
m1_41 -> m1_63  [color=red, key=1, label="lambda expression", style=dashed];
m1_41 -> m1_89  [color=red, key=1, label=setWithRequired, style=dashed];
m1_42 -> m1_43  [color=red, key=0, style=solid];
m1_42 -> m1_17  [color=red, key=2, style=dotted];
m1_42 -> m1_48  [color=red, key=2, style=dotted];
m1_42 -> m1_47  [color=red, key=2, style=dotted];
m1_42 -> m1_66  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_69  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_72  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_76  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_79  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_82  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_85  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_88  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_92  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_96  [color=red, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_99  [color=red, key=1, label="lambda expression", style=dashed];
m1_39 -> m1_40  [color=red, key=0, style=solid];
m1_39 -> m1_41  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_39 -> m1_42  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_51 -> m1_52  [color=red, key=0, style=solid];
m1_54 -> m1_55  [color=red, key=0, style=solid];
m1_89 -> m1_90  [color=red, key=0, style=solid];
m1_89 -> m1_91  [color=red, key=2, style=dotted];
m1_57 -> m1_58  [color=red, key=0, style=solid];
m1_60 -> m1_61  [color=red, key=0, style=solid];
m1_63 -> m1_64  [color=red, key=0, style=solid];
m1_43 -> m1_44  [color=red, key=0, style=solid];
m1_43 -> m1_49  [color=red, key=2, style=dotted];
m1_43 -> m1_50  [color=red, key=2, style=dotted];
m1_43 -> m1_43  [color=red, key=1, label=sp, style=dashed];
m1_66 -> m1_67  [color=red, key=0, style=solid];
m1_69 -> m1_70  [color=red, key=0, style=solid];
m1_72 -> m1_73  [color=red, key=0, style=solid];
m1_76 -> m1_77  [color=red, key=0, style=solid];
m1_79 -> m1_80  [color=red, key=0, style=solid];
m1_82 -> m1_83  [color=red, key=0, style=solid];
m1_85 -> m1_86  [color=red, key=0, style=solid];
m1_88 -> m1_89  [color=red, key=0, style=solid];
m1_92 -> m1_93  [color=red, key=0, style=solid];
m1_96 -> m1_97  [color=red, key=0, style=solid];
m1_99 -> m1_100  [color=red, key=0, style=solid];
m1_44 -> m1_39  [color=blue, key=0, style=bold];
m1_52 -> m1_53  [color=red, key=0, style=solid];
m1_52 -> m1_26  [color=red, key=2, style=dotted];
m1_53 -> m1_51  [color=blue, key=0, style=bold];
m1_55 -> m1_56  [color=red, key=0, style=solid];
m1_56 -> m1_54  [color=blue, key=0, style=bold];
m1_58 -> m1_59  [color=red, key=0, style=solid];
m1_58 -> m1_26  [color=red, key=2, style=dotted];
m1_59 -> m1_57  [color=blue, key=0, style=bold];
m1_61 -> m1_62  [color=red, key=0, style=solid];
m1_62 -> m1_60  [color=blue, key=0, style=bold];
m1_64 -> m1_65  [color=red, key=0, style=solid];
m1_65 -> m1_63  [color=blue, key=0, style=bold];
m1_67 -> m1_68  [color=red, key=0, style=solid];
m1_67 -> m1_26  [color=red, key=2, style=dotted];
m1_68 -> m1_66  [color=blue, key=0, style=bold];
m1_70 -> m1_71  [color=red, key=0, style=solid];
m1_71 -> m1_69  [color=blue, key=0, style=bold];
m1_73 -> m1_74  [color=red, key=0, style=solid];
m1_73 -> m1_75  [color=red, key=2, style=dotted];
m1_74 -> m1_72  [color=blue, key=0, style=bold];
m1_77 -> m1_78  [color=red, key=0, style=solid];
m1_78 -> m1_76  [color=blue, key=0, style=bold];
m1_80 -> m1_81  [color=red, key=0, style=solid];
m1_80 -> m1_26  [color=red, key=2, style=dotted];
m1_81 -> m1_79  [color=blue, key=0, style=bold];
m1_83 -> m1_84  [color=red, key=0, style=solid];
m1_84 -> m1_82  [color=blue, key=0, style=bold];
m1_86 -> m1_87  [color=red, key=0, style=solid];
m1_86 -> m1_75  [color=red, key=2, style=dotted];
m1_87 -> m1_85  [color=blue, key=0, style=bold];
m1_90 -> m1_88  [color=blue, key=0, style=bold];
m1_93 -> m1_94  [color=red, key=0, style=solid];
m1_93 -> m1_95  [color=red, key=2, style=dotted];
m1_94 -> m1_92  [color=blue, key=0, style=bold];
m1_97 -> m1_98  [color=red, key=0, style=solid];
m1_98 -> m1_96  [color=blue, key=0, style=bold];
m1_100 -> m1_101  [color=red, key=0, style=solid];
m1_100 -> m1_75  [color=red, key=2, style=dotted];
m1_101 -> m1_99  [color=blue, key=0, style=bold];
m1_105 -> m1_106  [key=0, style=solid];
m1_105 -> m1_17  [key=2, style=dotted];
m1_105 -> m1_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_105 -> m1_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_105 -> m1_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_105 -> m1_107  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_104 -> m1_105  [key=0, style=solid];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_108  [key=0, style=solid];
m1_106 -> n45  [key=2, style=dotted];
m1_112 -> m1_113  [key=0, style=solid];
m1_115 -> m1_116  [key=0, style=solid];
m1_118 -> m1_119  [key=0, style=solid];
m1_107 -> m1_109  [key=0, style=solid];
m1_107 -> m1_111  [key=2, style=dotted];
m1_107 -> m1_50  [key=2, style=dotted];
m1_107 -> m1_107  [color=darkseagreen4, key=1, label=s, style=dashed];
m1_108 -> m1_109  [key=0, style=solid];
m1_108 -> m1_22  [key=2, style=dotted];
m1_109 -> m1_104  [color=blue, key=0, style=bold];
m1_113 -> m1_114  [key=0, style=solid];
m1_114 -> m1_112  [color=blue, key=0, style=bold];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_30  [key=2, style=dotted];
m1_117 -> m1_115  [color=blue, key=0, style=bold];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_30  [key=2, style=dotted];
m1_119 -> m1_121  [key=2, style=dotted];
m1_120 -> m1_118  [color=blue, key=0, style=bold];
m1_126 -> m1_127  [key=0, style=solid];
m1_126 -> m1_17  [key=2, style=dotted];
m1_126 -> m1_132  [key=2, style=dotted];
m1_126 -> m1_133  [key=2, style=dotted];
m1_126 -> m1_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_126 -> m1_126  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_26  [key=2, style=dotted];
m1_125 -> m1_131  [key=2, style=dotted];
m1_125 -> m1_125  [color=darkseagreen4, key=1, label=sp, style=dashed];
m1_124 -> m1_125  [key=0, style=solid];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_19  [key=2, style=dotted];
m1_127 -> m1_127  [color=darkseagreen4, key=1, label=x, style=dashed];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_134  [key=2, style=dotted];
m1_128 -> m1_135  [key=2, style=dotted];
m1_128 -> m1_128  [color=darkseagreen4, key=1, label=y, style=dashed];
m1_129 -> m1_130  [key=0, style=solid];
m1_130 -> m1_124  [color=blue, key=0, style=bold];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_139  [key=2, style=dotted];
m1_138 -> m1_136  [color=blue, key=0, style=bold];
m1_5 -> m1_37  [color=red, key=0, style=solid];
m1_37 -> m1_38  [color=red, key=0, style=solid];
m1_37 -> m1_40  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_37 -> m1_41  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_37 -> m1_42  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_38 -> m1_5  [color=blue, key=0, style=bold];
m1_140 -> m1_89  [color=red, key=1, label=setCount, style=dashed];
m1_141 -> m1_89  [color=red, key=1, label=setWithRequired, style=dashed];
m1_142 -> m1_126  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
}
