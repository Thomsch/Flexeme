digraph  {
n165 [label=builder, span=""];
n166 [label=T, span=""];
n167 [label=shortSwitches, span=""];
n168 [label=settings, span=""];
n169 [label=sep, span=""];
n170 [label=doubQt, span=""];
n0 [label="Entry CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="48-48", cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()"];
n1 [label="return new UnParserSettings { GroupSwitches = true };", span="50-50", cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()"];
n2 [label="Exit CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="48-48", cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()"];
n3 [label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="15-15", cluster="CommandLine.UnParserSettings.UnParserSettings()"];
n4 [label="Entry CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="53-53", cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()"];
n5 [label="return new UnParserSettings { UseEqualToken = true };", span="55-55", cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()"];
n6 [label="Exit CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="53-53", cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()"];
n7 [label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="73-73", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)"];
n8 [label="return parser.FormatCommandLine(options, config => {});", span="75-75", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)"];
n9 [label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="73-73", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)"];
n10 [label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="87-87", cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)"];
n11 [label="Entry lambda expression", span="75-75", cluster="lambda expression"];
n12 [label="Exit lambda expression", span="75-75", cluster="lambda expression"];
n13 [label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="87-87", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n14 [label="options == null", span="89-89", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n17 [label="configuration(settings)", span="92-92", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n19 [label="var type = options.GetType()", span="95-95", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n22 [label="var specs =\r\n                (from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) })\r\n                where !info.PropertyValue.IsEmpty()\r\n                select info)\r\n                    .Memorize()", span="101-108", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n61 [label="new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) }", span="104-105", cluster="lambda expression"];
n15 [label="throw new ArgumentNullException(''options'');", span="89-89", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n16 [label="var settings = new UnParserSettings()", span="91-91", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n18 [label="settings.Consumed = true", span="93-93", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n25 [label="var optSpecs = settings.GroupSwitches\r\n                ? allOptSpecs.Where(info => !shortSwitches.Contains(info))\r\n                : allOptSpecs", span="123-125", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n27 [label="builder = settings.GroupSwitches && shortSwitches.Any()\r\n                ? builder.Append('-').Append(string.Join(string.Empty, shortSwitches.Select(\r\n                    info => ((OptionSpecification)info.Specification).ShortName).ToArray())).Append(' ')\r\n                : builder", span="132-135", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n29 [label="optSpecs.ForEach(\r\n                opt => builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' '))", span="138-139", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n80 [label="builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' ')", span="139-139", cluster="lambda expression"];
n35 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n20 [label="var builder = new StringBuilder()", span="96-96", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n36 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n21 [label="type.GetVerbSpecification()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="98-99", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n37 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()"];
n57 [label="builder.Append(verb.Name).Append(' ')", span="99-99", cluster="lambda expression"];
n38 [label="Entry System.Type.GetVerbSpecification()", span="28-28", cluster="System.Type.GetVerbSpecification()"];
n39 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
n56 [label="Entry lambda expression", span="99-99", cluster="lambda expression"];
n23 [label="var allOptSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Option)\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType != TargetType.Switch || (o.TargetType == TargetType.Switch && ((bool)info.Value))\r\n                orderby o.UniqueName()\r\n                select info", span="110-114", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n40 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="17-17", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)"];
n41 [label="Entry object.IsEmpty()", span="220-220", cluster="object.IsEmpty()"];
n42 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize"];
n60 [label="Entry lambda expression", span="104-105", cluster="lambda expression"];
n26 [label="var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="127-130", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n24 [label="var shortSwitches = from info in allOptSpecs\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType == TargetType.Switch\r\n                where o.ShortName.Length > 0\r\n                orderby o.UniqueName()\r\n                select info", span="116-121", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n43 [label="Entry Unk.Where", span="", cluster="Unk.Where"];
n44 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName"];
n66 [label="Entry lambda expression", span="110-110", cluster="lambda expression"];
n70 [label="!shortSwitches.Contains(info)", span="124-124", cluster="lambda expression"];
n69 [label="Entry lambda expression", span="124-124", cluster="lambda expression"];
n28 [label="builder\r\n                .TrimEndIfMatchWhen(!optSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="136-137", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n73 [label="Entry lambda expression", span="127-127", cluster="lambda expression"];
n30 [label="builder\r\n                .TrimEndIfMatchWhen(!valSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="140-141", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n31 [label="valSpecs.ForEach(\r\n                val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="142-143", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n45 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n46 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)"];
n47 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n48 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n49 [label="Entry Unk.Join", span="", cluster="Unk.Join"];
n50 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)"];
n76 [label="Entry lambda expression", span="134-134", cluster="lambda expression"];
n84 [label="builder.Append(FormatValue(val.Specification, val.Value)).Append(' ')", span="143-143", cluster="lambda expression"];
n32 [label="return builder\r\n                .ToString().TrimEnd(' ');", span="145-146", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n51 [label="Entry System.Text.StringBuilder.TrailingSpaces()", span="101-101", cluster="System.Text.StringBuilder.TrailingSpaces()"];
n52 [label="Entry Unk.TrimEndIfMatchWhen", span="", cluster="Unk.TrimEndIfMatchWhen"];
n53 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach"];
n79 [label="Entry lambda expression", span="139-139", cluster="lambda expression"];
n83 [label="Entry lambda expression", span="143-143", cluster="lambda expression"];
n33 [label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="87-87", cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)"];
n54 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()"];
n55 [label="Entry string.TrimEnd(params char[])", span="0-0", cluster="string.TrimEnd(params char[])"];
n34 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n58 [label="Exit lambda expression", span="99-99", cluster="lambda expression"];
n59 [label="Entry Unk.Append", span="", cluster="Unk.Append"];
n62 [label="Exit lambda expression", span="104-105", cluster="lambda expression"];
n63 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)"];
n64 [label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.GetValue(object, object[])"];
n65 [label="Entry object.NormalizeValue()", span="209-209", cluster="object.NormalizeValue()"];
n67 [label="i.Specification.Tag == SpecificationType.Option", span="110-110", cluster="lambda expression"];
n68 [label="Exit lambda expression", span="110-110", cluster="lambda expression"];
n71 [label="Exit lambda expression", span="124-124", cluster="lambda expression"];
n72 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
n74 [label="i.Specification.Tag == SpecificationType.Value", span="127-127", cluster="lambda expression"];
n75 [label="Exit lambda expression", span="127-127", cluster="lambda expression"];
n77 [label="((OptionSpecification)info.Specification).ShortName", span="134-134", cluster="lambda expression"];
n78 [label="Exit lambda expression", span="134-134", cluster="lambda expression"];
n81 [label="Exit lambda expression", span="139-139", cluster="lambda expression"];
n82 [label="Entry Unk.FormatOption", span="", cluster="Unk.FormatOption"];
n85 [label="Exit lambda expression", span="143-143", cluster="lambda expression"];
n86 [label="Entry Unk.FormatValue", span="", cluster="Unk.FormatValue"];
n87 [label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="149-149", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n88 [label="var builder = new StringBuilder()", span="151-151", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n89 [label="spec.TargetType", span="152-152", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n91 [label="builder.Append(FormatWithQuotesIfString(value))", span="155-155", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n93 [label="var sep = spec.SeperatorOrSpace()", span="158-158", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n95 [label="var e = ((IEnumerable)value).GetEnumerator()", span="161-161", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n97 [label="builder.Append(format(e.Current)).Append(sep)", span="163-163", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n98 [label="builder.TrimEndIfMatch(' ')", span="164-164", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n99 [label="return builder.ToString();", span="167-167", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n90 [label="TargetType.Scalar", span="154-154", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n92 [label="TargetType.Sequence", span="157-157", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n94 [label="Func<object, object> format = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="159-160", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n103 [label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="181-181", cluster="CommandLine.Core.Specification.SeperatorOrSpace()"];
n109 [label="sep == ' ' ? FormatWithQuotesIfString(v) : v", span="160-160", cluster="lambda expression"];
n96 [label="e.MoveNext()", span="162-162", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n104 [label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0", cluster="System.Collections.IEnumerable.GetEnumerator()"];
n105 [label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0", cluster="System.Collections.IEnumerator.MoveNext()"];
n106 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n102 [label="Entry System.Text.StringBuilder.Append(object)", span="0-0", cluster="System.Text.StringBuilder.Append(object)"];
n107 [label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="85-85", cluster="System.Text.StringBuilder.TrimEndIfMatch(char)"];
n101 [label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="170-170", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n100 [label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="149-149", cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)"];
n108 [label="Entry lambda expression", span="159-160", cluster="lambda expression"];
n110 [label="Exit lambda expression", span="159-160", cluster="lambda expression"];
n111 [label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="172-173", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n112 [label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="175-178", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n116 [label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="173-173", cluster="lambda expression"];
n121 [label="v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="177-178", cluster="lambda expression"];
n113 [label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="170-170", cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)"];
n114 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()"];
n120 [label="Entry lambda expression", span="177-178", cluster="lambda expression"];
n115 [label="Entry lambda expression", span="172-173", cluster="lambda expression"];
n117 [label="Exit lambda expression", span="172-173", cluster="lambda expression"];
n118 [label="Entry string.Contains(string)", span="0-0", cluster="string.Contains(string)"];
n119 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)"];
n122 [label="Exit lambda expression", span="177-178", cluster="lambda expression"];
n123 [label="Entry Unk.doubQt", span="", cluster="Unk.doubQt"];
n124 [label="Entry string.JoinTo(params string[])", span="45-45", cluster="string.JoinTo(params string[])"];
n125 [label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="181-181", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)"];
n126 [label="return (spec as OptionSpecification).ToMaybe()\r\n                .Return(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="183-184", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)"];
n127 [label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="181-181", cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)"];
n128 [label="Entry lambda expression", span="184-184", cluster="lambda expression"];
n129 [label="o.Separator != '\0' ? o.Separator : ' '", span="184-184", cluster="lambda expression"];
n130 [label="Exit lambda expression", span="184-184", cluster="lambda expression"];
n131 [label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="187-187", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)"];
n132 [label="return new StringBuilder()\r\n                    .Append(spec.FormatName(settings))\r\n                    .AppendWhen(spec.TargetType != TargetType.Switch, FormatValue(spec, value))\r\n                .ToString();", span="189-192", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)"];
n133 [label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="187-187", cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)"];
n134 [label="Entry CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", span="195-195", cluster="CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)"];
n135 [label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9", cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])"];
n136 [label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="195-195", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n137 [label="var longName =\r\n                optionSpec.LongName.Length > 0\r\n                && !settings.PreferShortName", span="197-199", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n138 [label="return\r\n                new StringBuilder(longName\r\n                    ? ''--''.JoinTo(optionSpec.LongName)\r\n                    : ''-''.JoinTo(optionSpec.ShortName))\r\n                        .AppendIf(longName && settings.UseEqualToken && optionSpec.ConversionType != typeof(bool), ''='', '' '')\r\n                    .ToString();", span="201-206", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n139 [label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="195-195", cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)"];
n140 [label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(string)"];
n141 [label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="34-34", cluster="System.Text.StringBuilder.AppendIf(bool, string, string)"];
n142 [label="Entry CommandLine.UnParserExtensions.NormalizeValue(object)", span="209-209", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n143 [label="value != null\r\n                && ReflectionHelper.IsFSharpOptionType(value.GetType())\r\n                && FSharpOptionHelper.IsSome(value)", span="211-213", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n144 [label="return FSharpOptionHelper.ValueOf(value);", span="215-215", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n145 [label="return value;", span="217-217", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n147 [label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35", cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)"];
n148 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="38-38", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)"];
n146 [label="Exit CommandLine.UnParserExtensions.NormalizeValue(object)", span="209-209", cluster="CommandLine.UnParserExtensions.NormalizeValue(object)"];
n149 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="30-30", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)"];
n150 [label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="220-220", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n151 [label="value == null", span="222-222", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n153 [label="ReflectionHelper.IsFSharpOptionType(value.GetType()) && !FSharpOptionHelper.IsSome(value)", span="223-223", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n155 [label="value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="224-224", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n157 [label="value is string && ((string)value).Length == 0", span="225-225", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n159 [label="value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="226-226", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n152 [label="return true;", span="222-222", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n154 [label="return true;", span="223-223", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n156 [label="return true;", span="224-224", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n163 [label="Entry System.Type.GetDefaultValue()", span="131-131", cluster="System.Type.GetDefaultValue()"];
n164 [label="Entry object.Equals(object)", span="0-0", cluster="object.Equals(object)"];
n158 [label="return true;", span="225-225", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n160 [label="return true;", span="226-226", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n161 [label="return false;", span="227-227", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
n162 [label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="220-220", cluster="CommandLine.UnParserExtensions.IsEmpty(object)"];
m1_21 [label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15", cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="SpecificationPropertyRules.cs"];
m1_135 [label="Entry NameInfo.cstr", span="", cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs"];
m1_4 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m1_8 [label="return specProps =>\r\n            {\r\n                var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0);\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return\r\n                            from s in options\r\n                            select new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification());\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-41", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_9 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs"];
m1_131 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs"];
m1_6 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="87-87", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m1_102 [label="return specProps =>\r\n                {\r\n                    var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        );\r\n                    if (options.Any())\r\n                    {\r\n                        return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="89-105", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m1_103 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="87-87", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs"];
m1_49 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m1_139 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs"];
m1_95 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs"];
m1_17 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SpecificationPropertyRules.cs"];
m1_22 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs"];
m1_75 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs"];
m1_50 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs"];
m1_7 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="108-108", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_122 [label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="110-128", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_123 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="108-108", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_91 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="SpecificationPropertyRules.cs"];
m1_111 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m1_0 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_1 [label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_2 [label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs"];
m1_136 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_11 [label="var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0)", span="28-31", cluster="lambda expression", color=red, community=2, file="SpecificationPropertyRules.cs"];
m1_10 [label="Entry lambda expression", span="26-41", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_12 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_23 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_27 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_31 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_14 [label="return\r\n                            from s in options\r\n                            select new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification());", span="35-38", cluster="lambda expression", color=red, community=2, file="SpecificationPropertyRules.cs"];
m1_13 [label="groups.Count() > 1", span="33-33", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_34 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_15 [label="return Enumerable.Empty<Error>();", span="40-40", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_16 [label="Exit lambda expression", span="26-41", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_24 [label="sp.Specification.IsOption()", span="29-29", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_25 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_28 [label="sp.Value.IsJust()", span="30-30", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_29 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_32 [label="((OptionSpecification)sp.Specification).SetName.Length > 0", span="31-31", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_33 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_35 [label="((OptionSpecification)g.Specification).SetName", span="32-32", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_36 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_40 [label="var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count()", span="48-53", cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs"];
m1_41 [label="var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()", span="55-60", cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs"];
m1_42 [label="var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList()", span="62-81", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_39 [label="Entry lambda expression", span="46-84", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_51 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_54 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_89 [label="((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))", span="73-76", cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs"];
m1_57 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_60 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_63 [label="Entry lambda expression", span="58-58", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_43 [label="return from sp in missing select new MissingRequiredOptionError(sp.Specification.FromSpecification());", span="83-83", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_66 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_69 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_72 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_76 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_79 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_82 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_85 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_88 [label="Entry lambda expression", span="72-76", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_92 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_96 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_99 [label="Entry lambda expression", span="81-81", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_44 [label="Exit lambda expression", span="46-84", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_52 [label="sp.Specification.IsOption()", span="49-49", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_53 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_55 [label="((OptionSpecification)sp.Specification).SetName", span="50-50", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_56 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_58 [label="sp.Specification.IsOption()", span="56-56", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_59 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_61 [label="sp.Specification.Required", span="57-57", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_62 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_64 [label="((OptionSpecification)sp.Specification).SetName", span="58-58", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_65 [label="Exit lambda expression", span="58-58", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_67 [label="sp.Specification.IsOption()", span="63-63", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_68 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_70 [label="sp.Specification.Required", span="64-64", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_71 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_73 [label="sp.Value.IsNothing()", span="65-65", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_74 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_77 [label="((OptionSpecification)sp.Specification).SetName.Length == 0", span="66-66", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_78 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_80 [label="sp.Specification.IsOption()", span="68-68", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_81 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_83 [label="sp.Specification.Required", span="69-69", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_84 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_86 [label="sp.Value.IsNothing()", span="70-70", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_87 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_90 [label="Exit lambda expression", span="72-76", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_93 [label="sp.Specification.IsValue()", span="79-79", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_94 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_97 [label="sp.Specification.Required", span="80-80", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_98 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_100 [label="sp.Value.IsNothing()", span="81-81", cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_101 [label="Exit lambda expression", span="81-81", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_105 [label="var options = specProps\r\n                        .Where(sp => sp.Specification.TargetType == TargetType.Sequence)\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp =>\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="91-97", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_104 [label="Entry lambda expression", span="89-105", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_106 [label="options.Any()", span="98-98", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_112 [label="Entry lambda expression", span="92-92", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_115 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_118 [label="Entry lambda expression", span="94-96", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_107 [label="return\r\n                            from s in options\r\n                            select new SequenceOutOfRangeError(s.Specification.FromSpecification());", span="100-102", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_108 [label="return Enumerable.Empty<Error>();", span="104-104", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_109 [label="Exit lambda expression", span="89-105", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_113 [label="sp.Specification.TargetType == TargetType.Sequence", span="92-92", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_114 [label="Exit lambda expression", span="92-92", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_116 [label="sp.Value.IsJust()", span="93-93", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_117 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_119 [label="(sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())", span="95-96", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_120 [label="Exit lambda expression", span="94-96", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_126 [label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="115-119", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_125 [label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="112-114", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_124 [label="Entry lambda expression", span="110-128", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_127 [label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="120-123", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_128 [label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="124-126", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_129 [label="return errors;", span="127-127", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_130 [label="Exit lambda expression", span="110-128", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_137 [label="t.IsName()", span="115-115", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_138 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="SpecificationPropertyRules.cs"];
m1_134 [label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335", cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m1_48 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="SpecificationPropertyRules.cs"];
m1_5 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="44-44", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m1_37 [label="return specProps =>\r\n            {\r\n                var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count();\r\n\r\n                var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList();\r\n\r\n                var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList();\r\n\r\n                return from sp in missing select new MissingRequiredOptionError(sp.Specification.FromSpecification());\r\n            };", span="46-84", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0, file="SpecificationPropertyRules.cs"];
m1_38 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="44-44", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs"];
m1_45 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SpecificationPropertyRules.cs"];
m1_30 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust", file="SpecificationPropertyRules.cs"];
m1_132 [label="Entry Unk.UniqueName", span="", cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs"];
m1_47 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SpecificationPropertyRules.cs"];
m1_20 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs"];
m1_133 [label="Entry Unk.DefaultIfEmpty", span="", cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs"];
m1_26 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs"];
m1_121 [label="Entry Unk.FromJust", span="", cluster="Unk.FromJust", file="SpecificationPropertyRules.cs"];
m1_3 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs"];
m1_46 [label="Entry Unk.Distinct", span="", cluster="Unk.Distinct", file="SpecificationPropertyRules.cs"];
m1_18 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs"];
m1_19 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="SpecificationPropertyRules.cs"];
m1_140 [label=setCount, span="", file="SpecificationPropertyRules.cs"];
m1_141 [label=setWithRequired, span="", file="SpecificationPropertyRules.cs"];
m1_142 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="SpecificationPropertyRules.cs"];
n165 -> n57  [key=1, style=dashed, color=darkseagreen4, label=builder];
n165 -> n80  [key=1, style=dashed, color=darkseagreen4, label=builder];
n165 -> n84  [key=1, style=dashed, color=darkseagreen4, label=builder];
n166 -> n61  [key=1, style=dashed, color=darkseagreen4, label=T];
n167 -> n70  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
n168 -> n80  [key=1, style=dashed, color=darkseagreen4, label=settings];
n169 -> n109  [key=1, style=dashed, color=darkseagreen4, label=sep];
n170 -> n121  [key=1, style=dashed, color=darkseagreen4, label=doubQt];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n3  [key=2, style=dotted];
n6 -> n4  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=2, style=dotted];
n8 -> n11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n9 -> n7  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n12 -> n11  [key=0, style=bold, color=blue];
n13 -> n14  [key=0, style=solid];
n13 -> n17  [key=1, style=dashed, color=darkseagreen4, label="System.Action<CommandLine.UnParserSettings>"];
n13 -> n19  [key=1, style=dashed, color=darkseagreen4, label=T];
n13 -> n22  [key=1, style=dashed, color=darkseagreen4, label=T];
n13 -> n61  [key=1, style=dashed, color=darkseagreen4, label=T];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n17 -> n35  [key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n36  [key=2, style=dotted];
n19 -> n21  [key=1, style=dashed, color=darkseagreen4, label=type];
n19 -> n22  [key=1, style=dashed, color=darkseagreen4, label=type];
n22 -> n23  [key=0, style=solid];
n22 -> n40  [key=2, style=dotted];
n22 -> n41  [key=2, style=dotted];
n22 -> n42  [key=2, style=dotted];
n22 -> n60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n22 -> n22  [key=1, style=dashed, color=darkseagreen4, label=info];
n22 -> n26  [key=1, style=dashed, color=darkseagreen4, label=specs];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=2, style=dotted];
n61 -> n64  [key=2, style=dotted];
n61 -> n65  [key=2, style=dotted];
n15 -> n33  [key=0, style=solid];
n15 -> n34  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n3  [key=2, style=dotted];
n16 -> n18  [key=1, style=dashed, color=darkseagreen4, label=settings];
n16 -> n25  [key=1, style=dashed, color=darkseagreen4, label=settings];
n16 -> n27  [key=1, style=dashed, color=darkseagreen4, label=settings];
n16 -> n29  [key=1, style=dashed, color=darkseagreen4, label=settings];
n16 -> n80  [key=1, style=dashed, color=darkseagreen4, label=settings];
n18 -> n19  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n43  [key=2, style=dotted];
n25 -> n69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n25 -> n28  [key=1, style=dashed, color=darkseagreen4, label=optSpecs];
n25 -> n29  [key=1, style=dashed, color=darkseagreen4, label=optSpecs];
n27 -> n28  [key=0, style=solid];
n27 -> n45  [key=2, style=dotted];
n27 -> n46  [key=2, style=dotted];
n27 -> n47  [key=2, style=dotted];
n27 -> n48  [key=2, style=dotted];
n27 -> n49  [key=2, style=dotted];
n27 -> n50  [key=2, style=dotted];
n27 -> n27  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n27 -> n29  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n80  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n30  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n31  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n84  [key=1, style=dashed, color=darkseagreen4, label=builder];
n27 -> n32  [key=1, style=dashed, color=darkseagreen4, label=builder];
n29 -> n30  [key=0, style=solid];
n29 -> n53  [key=2, style=dotted];
n29 -> n79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n80 -> n81  [key=0, style=solid];
n80 -> n82  [key=2, style=dotted];
n80 -> n50  [key=2, style=dotted];
n80 -> n46  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n37  [key=2, style=dotted];
n20 -> n57  [key=1, style=dashed, color=darkseagreen4, label=builder];
n20 -> n27  [key=1, style=dashed, color=darkseagreen4, label=builder];
n21 -> n22  [key=0, style=solid];
n21 -> n38  [key=2, style=dotted];
n21 -> n39  [key=2, style=dotted];
n21 -> n56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n57 -> n58  [key=0, style=solid];
n57 -> n59  [key=2, style=dotted];
n57 -> n46  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n43  [key=2, style=dotted];
n23 -> n44  [key=2, style=dotted];
n23 -> n66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n23 -> n23  [key=1, style=dashed, color=darkseagreen4, label=info];
n23 -> n25  [key=1, style=dashed, color=darkseagreen4, label=allOptSpecs];
n60 -> n61  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n43  [key=2, style=dotted];
n26 -> n73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n26 -> n26  [key=1, style=dashed, color=darkseagreen4, label=info];
n26 -> n30  [key=1, style=dashed, color=darkseagreen4, label=valSpecs];
n26 -> n31  [key=1, style=dashed, color=darkseagreen4, label=valSpecs];
n24 -> n25  [key=0, style=solid];
n24 -> n44  [key=2, style=dotted];
n24 -> n24  [key=1, style=dashed, color=darkseagreen4, label=info];
n24 -> n70  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
n24 -> n27  [key=1, style=dashed, color=darkseagreen4, label=shortSwitches];
n66 -> n67  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n70 -> n72  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n45  [key=2, style=dotted];
n28 -> n51  [key=2, style=dotted];
n28 -> n52  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n45  [key=2, style=dotted];
n30 -> n51  [key=2, style=dotted];
n30 -> n52  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n53  [key=2, style=dotted];
n31 -> n83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n76 -> n77  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n86  [key=2, style=dotted];
n84 -> n50  [key=2, style=dotted];
n84 -> n46  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n54  [key=2, style=dotted];
n32 -> n55  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n33 -> n13  [key=0, style=bold, color=blue];
n58 -> n56  [key=0, style=bold, color=blue];
n62 -> n60  [key=0, style=bold, color=blue];
n67 -> n68  [key=0, style=solid];
n68 -> n66  [key=0, style=bold, color=blue];
n71 -> n69  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid];
n75 -> n73  [key=0, style=bold, color=blue];
n77 -> n78  [key=0, style=solid];
n78 -> n76  [key=0, style=bold, color=blue];
n81 -> n79  [key=0, style=bold, color=blue];
n85 -> n83  [key=0, style=bold, color=blue];
n87 -> n88  [key=0, style=solid];
n87 -> n89  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n87 -> n91  [key=1, style=dashed, color=darkseagreen4, label=object];
n87 -> n93  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
n87 -> n95  [key=1, style=dashed, color=darkseagreen4, label=object];
n88 -> n89  [key=0, style=solid];
n88 -> n37  [key=2, style=dotted];
n88 -> n91  [key=1, style=dashed, color=darkseagreen4, label=builder];
n88 -> n97  [key=1, style=dashed, color=darkseagreen4, label=builder];
n88 -> n98  [key=1, style=dashed, color=darkseagreen4, label=builder];
n88 -> n99  [key=1, style=dashed, color=darkseagreen4, label=builder];
n89 -> n90  [key=0, style=solid];
n89 -> n92  [key=0, style=solid];
n91 -> n99  [key=0, style=solid];
n91 -> n101  [key=2, style=dotted];
n91 -> n102  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n103  [key=2, style=dotted];
n93 -> n109  [key=1, style=dashed, color=darkseagreen4, label=sep];
n93 -> n97  [key=1, style=dashed, color=darkseagreen4, label=sep];
n95 -> n96  [key=0, style=solid];
n95 -> n104  [key=2, style=dotted];
n95 -> n97  [key=1, style=dashed, color=darkseagreen4, label=e];
n97 -> n96  [key=0, style=solid];
n97 -> n106  [key=2, style=dotted];
n97 -> n102  [key=2, style=dotted];
n97 -> n46  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n107  [key=2, style=dotted];
n99 -> n100  [key=0, style=solid];
n99 -> n54  [key=2, style=dotted];
n90 -> n91  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n94 -> n109  [key=1, style=dashed, color=darkseagreen4, label=object];
n94 -> n97  [key=1, style=dashed, color=darkseagreen4, label=format];
n109 -> n110  [key=0, style=solid];
n109 -> n101  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n96 -> n98  [key=0, style=solid];
n96 -> n105  [key=2, style=dotted];
n101 -> n111  [key=0, style=solid];
n101 -> n112  [key=1, style=dashed, color=darkseagreen4, label=object];
n100 -> n87  [key=0, style=bold, color=blue];
n108 -> n109  [key=0, style=solid];
n110 -> n108  [key=0, style=bold, color=blue];
n111 -> n112  [key=0, style=solid];
n111 -> n116  [key=1, style=dashed, color=darkseagreen4, label=string];
n111 -> n121  [key=1, style=dashed, color=darkseagreen4, label=doubQt];
n112 -> n113  [key=0, style=solid];
n112 -> n114  [key=2, style=dotted];
n112 -> n39  [key=2, style=dotted];
n112 -> n120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n116 -> n117  [key=0, style=solid];
n116 -> n118  [key=2, style=dotted];
n116 -> n119  [key=2, style=dotted];
n121 -> n122  [key=0, style=solid];
n121 -> n72  [key=2, style=dotted];
n121 -> n123  [key=2, style=dotted];
n121 -> n124  [key=2, style=dotted];
n113 -> n101  [key=0, style=bold, color=blue];
n120 -> n121  [key=0, style=solid];
n115 -> n116  [key=0, style=solid];
n117 -> n115  [key=0, style=bold, color=blue];
n122 -> n120  [key=0, style=bold, color=blue];
n125 -> n126  [key=0, style=solid];
n126 -> n127  [key=0, style=solid];
n126 -> n114  [key=2, style=dotted];
n126 -> n39  [key=2, style=dotted];
n126 -> n128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n127 -> n125  [key=0, style=bold, color=blue];
n128 -> n129  [key=0, style=solid];
n129 -> n130  [key=0, style=solid];
n130 -> n128  [key=0, style=bold, color=blue];
n131 -> n132  [key=0, style=solid];
n132 -> n133  [key=0, style=solid];
n132 -> n37  [key=2, style=dotted];
n132 -> n134  [key=2, style=dotted];
n132 -> n50  [key=2, style=dotted];
n132 -> n87  [key=2, style=dotted];
n132 -> n135  [key=2, style=dotted];
n132 -> n54  [key=2, style=dotted];
n133 -> n131  [key=0, style=bold, color=blue];
n136 -> n137  [key=0, style=solid];
n136 -> n138  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
n137 -> n138  [key=0, style=solid];
n138 -> n139  [key=0, style=solid];
n138 -> n140  [key=2, style=dotted];
n138 -> n124  [key=2, style=dotted];
n138 -> n141  [key=2, style=dotted];
n138 -> n54  [key=2, style=dotted];
n139 -> n136  [key=0, style=bold, color=blue];
n142 -> n143  [key=0, style=solid];
n142 -> n144  [key=1, style=dashed, color=darkseagreen4, label=object];
n142 -> n145  [key=1, style=dashed, color=darkseagreen4, label=object];
n143 -> n144  [key=0, style=solid];
n143 -> n145  [key=0, style=solid];
n143 -> n36  [key=2, style=dotted];
n143 -> n147  [key=2, style=dotted];
n143 -> n148  [key=2, style=dotted];
n144 -> n146  [key=0, style=solid];
n144 -> n149  [key=2, style=dotted];
n145 -> n146  [key=0, style=solid];
n146 -> n142  [key=0, style=bold, color=blue];
n150 -> n151  [key=0, style=solid];
n150 -> n153  [key=1, style=dashed, color=darkseagreen4, label=object];
n150 -> n155  [key=1, style=dashed, color=darkseagreen4, label=object];
n150 -> n157  [key=1, style=dashed, color=darkseagreen4, label=object];
n150 -> n159  [key=1, style=dashed, color=darkseagreen4, label=object];
n151 -> n152  [key=0, style=solid];
n151 -> n153  [key=0, style=solid];
n153 -> n154  [key=0, style=solid];
n153 -> n155  [key=0, style=solid];
n153 -> n36  [key=2, style=dotted];
n153 -> n147  [key=2, style=dotted];
n153 -> n148  [key=2, style=dotted];
n155 -> n156  [key=0, style=solid];
n155 -> n157  [key=0, style=solid];
n155 -> n36  [key=2, style=dotted];
n155 -> n163  [key=2, style=dotted];
n155 -> n164  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n157 -> n159  [key=0, style=solid];
n159 -> n160  [key=0, style=solid];
n159 -> n161  [key=0, style=solid];
n159 -> n104  [key=2, style=dotted];
n159 -> n105  [key=2, style=dotted];
n152 -> n162  [key=0, style=solid];
n154 -> n162  [key=0, style=solid];
n156 -> n162  [key=0, style=solid];
n158 -> n162  [key=0, style=solid];
n160 -> n162  [key=0, style=solid];
n161 -> n162  [key=0, style=solid];
n162 -> n150  [key=0, style=bold, color=blue];
m1_4 -> m1_8  [key=0, style=solid, color=red];
m1_8 -> m1_9  [key=0, style=solid, color=red];
m1_8 -> m1_11  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_9 -> m1_4  [key=0, style=bold, color=blue];
m1_6 -> m1_102  [key=0, style=solid];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_103 -> m1_6  [key=0, style=bold, color=blue];
m1_7 -> m1_122  [key=0, style=solid];
m1_7 -> m1_126  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_122 -> m1_123  [key=0, style=solid];
m1_122 -> m1_125  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_122 -> m1_122  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> "];
m1_123 -> m1_7  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_5  [key=2, style=dotted];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_136 -> m1_137  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid, color=red];
m1_11 -> m1_17  [key=2, style=dotted, color=red];
m1_11 -> m1_23  [key=1, style=dashed, color=red, label="lambda expression"];
m1_11 -> m1_27  [key=1, style=dashed, color=red, label="lambda expression"];
m1_11 -> m1_31  [key=1, style=dashed, color=red, label="lambda expression"];
m1_11 -> m1_14  [key=1, style=dashed, color=red, label=options];
m1_10 -> m1_11  [key=0, style=solid, color=red];
m1_12 -> m1_13  [key=0, style=solid, color=red];
m1_12 -> m1_18  [key=2, style=dotted, color=red];
m1_12 -> m1_34  [key=1, style=dashed, color=red, label="lambda expression"];
m1_23 -> m1_24  [key=0, style=solid, color=red];
m1_27 -> m1_28  [key=0, style=solid, color=red];
m1_31 -> m1_32  [key=0, style=solid, color=red];
m1_14 -> m1_16  [key=0, style=solid, color=red];
m1_14 -> m1_20  [key=2, style=dotted, color=red];
m1_14 -> m1_21  [key=2, style=dotted, color=red];
m1_14 -> m1_14  [key=1, style=dashed, color=red, label=s];
m1_13 -> m1_14  [key=0, style=solid, color=red];
m1_13 -> m1_15  [key=0, style=solid, color=red];
m1_13 -> m1_19  [key=2, style=dotted, color=red];
m1_34 -> m1_35  [key=0, style=solid, color=red];
m1_15 -> m1_16  [key=0, style=solid, color=red];
m1_15 -> m1_22  [key=2, style=dotted, color=red];
m1_16 -> m1_10  [key=0, style=bold, color=blue];
m1_24 -> m1_25  [key=0, style=solid, color=red];
m1_24 -> m1_26  [key=2, style=dotted, color=red];
m1_25 -> m1_23  [key=0, style=bold, color=blue];
m1_28 -> m1_29  [key=0, style=solid, color=red];
m1_28 -> m1_30  [key=2, style=dotted, color=red];
m1_29 -> m1_27  [key=0, style=bold, color=blue];
m1_32 -> m1_33  [key=0, style=solid, color=red];
m1_33 -> m1_31  [key=0, style=bold, color=blue];
m1_35 -> m1_36  [key=0, style=solid, color=red];
m1_36 -> m1_34  [key=0, style=bold, color=blue];
m1_40 -> m1_41  [key=0, style=solid, color=red];
m1_40 -> m1_17  [key=2, style=dotted, color=red];
m1_40 -> m1_45  [key=2, style=dotted, color=red];
m1_40 -> m1_46  [key=2, style=dotted, color=red];
m1_40 -> m1_47  [key=2, style=dotted, color=red];
m1_40 -> m1_19  [key=2, style=dotted, color=red];
m1_40 -> m1_51  [key=1, style=dashed, color=red, label="lambda expression"];
m1_40 -> m1_54  [key=1, style=dashed, color=red, label="lambda expression"];
m1_40 -> m1_42  [key=1, style=dashed, color=red, label=setCount];
m1_40 -> m1_89  [key=1, style=dashed, color=red, label=setCount];
m1_41 -> m1_42  [key=0, style=solid, color=red];
m1_41 -> m1_17  [key=2, style=dotted, color=red];
m1_41 -> m1_45  [key=2, style=dotted, color=red];
m1_41 -> m1_46  [key=2, style=dotted, color=red];
m1_41 -> m1_47  [key=2, style=dotted, color=red];
m1_41 -> m1_57  [key=1, style=dashed, color=red, label="lambda expression"];
m1_41 -> m1_60  [key=1, style=dashed, color=red, label="lambda expression"];
m1_41 -> m1_63  [key=1, style=dashed, color=red, label="lambda expression"];
m1_41 -> m1_89  [key=1, style=dashed, color=red, label=setWithRequired];
m1_42 -> m1_43  [key=0, style=solid, color=red];
m1_42 -> m1_17  [key=2, style=dotted, color=red];
m1_42 -> m1_48  [key=2, style=dotted, color=red];
m1_42 -> m1_47  [key=2, style=dotted, color=red];
m1_42 -> m1_66  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_69  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_72  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_76  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_79  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_82  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_85  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_88  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_92  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_96  [key=1, style=dashed, color=red, label="lambda expression"];
m1_42 -> m1_99  [key=1, style=dashed, color=red, label="lambda expression"];
m1_39 -> m1_40  [key=0, style=solid, color=red];
m1_39 -> m1_41  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_39 -> m1_42  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_51 -> m1_52  [key=0, style=solid, color=red];
m1_54 -> m1_55  [key=0, style=solid, color=red];
m1_89 -> m1_90  [key=0, style=solid, color=red];
m1_89 -> m1_91  [key=2, style=dotted, color=red];
m1_57 -> m1_58  [key=0, style=solid, color=red];
m1_60 -> m1_61  [key=0, style=solid, color=red];
m1_63 -> m1_64  [key=0, style=solid, color=red];
m1_43 -> m1_44  [key=0, style=solid, color=red];
m1_43 -> m1_49  [key=2, style=dotted, color=red];
m1_43 -> m1_50  [key=2, style=dotted, color=red];
m1_43 -> m1_43  [key=1, style=dashed, color=red, label=sp];
m1_66 -> m1_67  [key=0, style=solid, color=red];
m1_69 -> m1_70  [key=0, style=solid, color=red];
m1_72 -> m1_73  [key=0, style=solid, color=red];
m1_76 -> m1_77  [key=0, style=solid, color=red];
m1_79 -> m1_80  [key=0, style=solid, color=red];
m1_82 -> m1_83  [key=0, style=solid, color=red];
m1_85 -> m1_86  [key=0, style=solid, color=red];
m1_88 -> m1_89  [key=0, style=solid, color=red];
m1_92 -> m1_93  [key=0, style=solid, color=red];
m1_96 -> m1_97  [key=0, style=solid, color=red];
m1_99 -> m1_100  [key=0, style=solid, color=red];
m1_44 -> m1_39  [key=0, style=bold, color=blue];
m1_52 -> m1_53  [key=0, style=solid, color=red];
m1_52 -> m1_26  [key=2, style=dotted, color=red];
m1_53 -> m1_51  [key=0, style=bold, color=blue];
m1_55 -> m1_56  [key=0, style=solid, color=red];
m1_56 -> m1_54  [key=0, style=bold, color=blue];
m1_58 -> m1_59  [key=0, style=solid, color=red];
m1_58 -> m1_26  [key=2, style=dotted, color=red];
m1_59 -> m1_57  [key=0, style=bold, color=blue];
m1_61 -> m1_62  [key=0, style=solid, color=red];
m1_62 -> m1_60  [key=0, style=bold, color=blue];
m1_64 -> m1_65  [key=0, style=solid, color=red];
m1_65 -> m1_63  [key=0, style=bold, color=blue];
m1_67 -> m1_68  [key=0, style=solid, color=red];
m1_67 -> m1_26  [key=2, style=dotted, color=red];
m1_68 -> m1_66  [key=0, style=bold, color=blue];
m1_70 -> m1_71  [key=0, style=solid, color=red];
m1_71 -> m1_69  [key=0, style=bold, color=blue];
m1_73 -> m1_74  [key=0, style=solid, color=red];
m1_73 -> m1_75  [key=2, style=dotted, color=red];
m1_74 -> m1_72  [key=0, style=bold, color=blue];
m1_77 -> m1_78  [key=0, style=solid, color=red];
m1_78 -> m1_76  [key=0, style=bold, color=blue];
m1_80 -> m1_81  [key=0, style=solid, color=red];
m1_80 -> m1_26  [key=2, style=dotted, color=red];
m1_81 -> m1_79  [key=0, style=bold, color=blue];
m1_83 -> m1_84  [key=0, style=solid, color=red];
m1_84 -> m1_82  [key=0, style=bold, color=blue];
m1_86 -> m1_87  [key=0, style=solid, color=red];
m1_86 -> m1_75  [key=2, style=dotted, color=red];
m1_87 -> m1_85  [key=0, style=bold, color=blue];
m1_90 -> m1_88  [key=0, style=bold, color=blue];
m1_93 -> m1_94  [key=0, style=solid, color=red];
m1_93 -> m1_95  [key=2, style=dotted, color=red];
m1_94 -> m1_92  [key=0, style=bold, color=blue];
m1_97 -> m1_98  [key=0, style=solid, color=red];
m1_98 -> m1_96  [key=0, style=bold, color=blue];
m1_100 -> m1_101  [key=0, style=solid, color=red];
m1_100 -> m1_75  [key=2, style=dotted, color=red];
m1_101 -> m1_99  [key=0, style=bold, color=blue];
m1_105 -> m1_106  [key=0, style=solid];
m1_105 -> m1_17  [key=2, style=dotted];
m1_105 -> m1_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_105 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_105 -> m1_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_105 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label=options];
m1_104 -> m1_105  [key=0, style=solid];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_108  [key=0, style=solid];
m1_106 -> n45  [key=2, style=dotted];
m1_112 -> m1_113  [key=0, style=solid];
m1_115 -> m1_116  [key=0, style=solid];
m1_118 -> m1_119  [key=0, style=solid];
m1_107 -> m1_109  [key=0, style=solid];
m1_107 -> m1_111  [key=2, style=dotted];
m1_107 -> m1_50  [key=2, style=dotted];
m1_107 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label=s];
m1_108 -> m1_109  [key=0, style=solid];
m1_108 -> m1_22  [key=2, style=dotted];
m1_109 -> m1_104  [key=0, style=bold, color=blue];
m1_113 -> m1_114  [key=0, style=solid];
m1_114 -> m1_112  [key=0, style=bold, color=blue];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_30  [key=2, style=dotted];
m1_117 -> m1_115  [key=0, style=bold, color=blue];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_30  [key=2, style=dotted];
m1_119 -> m1_121  [key=2, style=dotted];
m1_120 -> m1_118  [key=0, style=bold, color=blue];
m1_126 -> m1_127  [key=0, style=solid];
m1_126 -> m1_17  [key=2, style=dotted];
m1_126 -> m1_132  [key=2, style=dotted];
m1_126 -> m1_133  [key=2, style=dotted];
m1_126 -> m1_136  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_126 -> m1_126  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_26  [key=2, style=dotted];
m1_125 -> m1_131  [key=2, style=dotted];
m1_125 -> m1_125  [key=1, style=dashed, color=darkseagreen4, label=sp];
m1_124 -> m1_125  [key=0, style=solid];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_19  [key=2, style=dotted];
m1_127 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label=x];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_134  [key=2, style=dotted];
m1_128 -> m1_135  [key=2, style=dotted];
m1_128 -> m1_128  [key=1, style=dashed, color=darkseagreen4, label=y];
m1_129 -> m1_130  [key=0, style=solid];
m1_130 -> m1_124  [key=0, style=bold, color=blue];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_139  [key=2, style=dotted];
m1_138 -> m1_136  [key=0, style=bold, color=blue];
m1_5 -> m1_37  [key=0, style=solid, color=red];
m1_37 -> m1_38  [key=0, style=solid, color=red];
m1_37 -> m1_40  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_37 -> m1_41  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_37 -> m1_42  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_38 -> m1_5  [key=0, style=bold, color=blue];
m1_140 -> m1_89  [key=1, style=dashed, color=red, label=setCount];
m1_141 -> m1_89  [key=1, style=dashed, color=red, label=setWithRequired];
m1_142 -> m1_126  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
}
