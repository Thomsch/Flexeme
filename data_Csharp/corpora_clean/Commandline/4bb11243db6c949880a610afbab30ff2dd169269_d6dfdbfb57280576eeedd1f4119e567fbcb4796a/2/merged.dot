digraph  {
m7_30 [label="Entry CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="44-44", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", file="SpecificationPropertyExtensions.cs"];
m7_32 [label="throw new ArgumentNullException(''specProps'');", span="49-49", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", file="SpecificationPropertyExtensions.cs"];
m7_31 [label="specProps == null", span="49-49", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", file="SpecificationPropertyExtensions.cs"];
m7_33 [label="return rules.SelectMany(rule => rule(specProps));", span="51-51", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", file="SpecificationPropertyExtensions.cs"];
m7_34 [label="Exit CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="44-44", cluster="CommandLine.Core.SpecificationPropertyExtensions.Validate(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", file="SpecificationPropertyExtensions.cs"];
m7_0 [label="Entry CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)", file="SpecificationPropertyExtensions.cs"];
m7_1 [label="specProp == null", span="13-13", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithSpecification(CommandLine.Core.SpecificationProperty, CommandLine.Core.Specification)", file="SpecificationPropertyExtensions.cs"];
m7_16 [label="Entry CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", span="27-27", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", file="SpecificationPropertyExtensions.cs"];
m7_20 [label="TypeDescriptorKind.Sequence", span="33-33", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", color=green, community=0, file="SpecificationPropertyExtensions.cs"];
m7_19 [label="specProp.Specification.ConversionType.ToDescriptor()", span="31-31", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", file="SpecificationPropertyExtensions.cs"];
m7_21 [label="return specProp.Property.PropertyType.GetGenericArguments()\r\n                             .SingleOrDefault()\r\n                             .ToMaybe()\r\n                             .FromJust(\r\n                                 new InvalidOperationException(''Sequence properties should be of type IEnumerable<T>.''));", span="34-38", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", file="SpecificationPropertyExtensions.cs"];
m7_17 [label="specProp == null", span="29-29", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", file="SpecificationPropertyExtensions.cs"];
m7_22 [label="return specProp.Property.PropertyType;", span="40-40", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", file="SpecificationPropertyExtensions.cs"];
m7_18 [label="throw new ArgumentNullException(''specProp'');", span="29-29", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", file="SpecificationPropertyExtensions.cs"];
m7_23 [label="Exit CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", span="27-27", cluster="CommandLine.Core.SpecificationPropertyExtensions.GetConversionType(CommandLine.Core.SpecificationProperty)", file="SpecificationPropertyExtensions.cs"];
m7_29 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyExtensions.cs"];
m7_2 [label="Entry Humanizer.Tests.Localisation.he.NumberToWordsTests.ToWords(int, string)", span="53-53", cluster="Humanizer.Tests.Localisation.he.NumberToWordsTests.ToWords(int, string)", file="SpecificationPropertyExtensions.cs"];
m7_4 [label="Exit Humanizer.Tests.Localisation.he.NumberToWordsTests.ToWords(int, string)", span="53-53", cluster="Humanizer.Tests.Localisation.he.NumberToWordsTests.ToWords(int, string)", file="SpecificationPropertyExtensions.cs"];
m7_3 [label="Assert.Equal(expected, number.ToWords())", span="55-55", cluster="Humanizer.Tests.Localisation.he.NumberToWordsTests.ToWords(int, string)", file="SpecificationPropertyExtensions.cs"];
m7_5 [label="Entry int.ToWords()", span="32-32", cluster="int.ToWords()", file="SpecificationPropertyExtensions.cs"];
m7_6 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SpecificationPropertyExtensions.cs"];
m7_8 [label="Assert.Equal(expected, number.ToWords())", span="62-62", cluster="Humanizer.Tests.Localisation.he.NumberToWordsTests.NegativeToWords(int, string)", file="SpecificationPropertyExtensions.cs"];
m7_9 [label="Exit Humanizer.Tests.Localisation.he.NumberToWordsTests.NegativeToWords(int, string)", span="60-60", cluster="Humanizer.Tests.Localisation.he.NumberToWordsTests.NegativeToWords(int, string)", file="SpecificationPropertyExtensions.cs"];
m7_11 [label="throw new ArgumentNullException(''specProp'');", span="21-21", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", file="SpecificationPropertyExtensions.cs"];
m7_13 [label="throw new ArgumentNullException(''newValue'');", span="22-22", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", file="SpecificationPropertyExtensions.cs"];
m7_10 [label="specProp == null", span="21-21", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", file="SpecificationPropertyExtensions.cs"];
m7_12 [label="newValue == null", span="22-22", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", file="SpecificationPropertyExtensions.cs"];
m7_14 [label="return SpecificationProperty.Create(specProp.Specification, specProp.Property, newValue);", span="24-24", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", file="SpecificationPropertyExtensions.cs"];
m7_15 [label="Exit CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", span="19-19", cluster="CommandLine.Core.SpecificationPropertyExtensions.WithValue(CommandLine.Core.SpecificationProperty, CommandLine.Infrastructure.Maybe<object>)", file="SpecificationPropertyExtensions.cs"];
m7_25 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="SpecificationPropertyExtensions.cs"];
m7_26 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="SpecificationPropertyExtensions.cs"];
m7_27 [label="Entry T.ToMaybe<T>()", span="82-82", cluster="T.ToMaybe<T>()", file="SpecificationPropertyExtensions.cs"];
m7_35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="SpecificationPropertyExtensions.cs"];
m7_36 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m7_37 [label="rule(specProps)", span="51-51", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m7_38 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="SpecificationPropertyExtensions.cs"];
m7_24 [label="Entry System.Type.ToDescriptor()", span="22-22", cluster="System.Type.ToDescriptor()", file="SpecificationPropertyExtensions.cs"];
m7_7 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SpecificationPropertyExtensions.cs"];
m7_28 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SpecificationPropertyExtensions.cs"];
m7_39 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="SpecificationPropertyExtensions.cs"];
m7_40 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", span="", file="SpecificationPropertyExtensions.cs"];
m9_5 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="Switch.cs"];
m9_6 [label="t.IsName() && info.Item1 == TypeDescriptorKind.Boolean", span="16-16", cluster="lambda expression", color=green, community=0, file="Switch.cs"];
m9_7 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="Switch.cs"];
m9_4 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Switch.cs"];
m9_8 [label="Entry CommandLine.Core.Token.IsName()", span="72-72", cluster="CommandLine.Core.Token.IsName()", file="Switch.cs"];
m9_0 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Switch.cs"];
m9_1 [label="return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.Item1 == TypeDescriptorKind.Boolean, false)\r\n                   select t;", span="15-17", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", color=green, community=1, file="Switch.cs"];
m9_2 [label="Exit CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>>>>)", file="Switch.cs"];
m9_3 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Switch.cs"];
m9_9 [label=t, span="", file="Switch.cs"];
m7_30 -> m7_31  [key=0, style=solid];
m7_30 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m7_30 -> m7_37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m7_32 -> m7_7  [key=2, style=dotted];
m7_32 -> m7_34  [key=0, style=solid];
m7_31 -> m7_32  [key=0, style=solid];
m7_31 -> m7_33  [key=0, style=solid];
m7_33 -> m7_34  [key=0, style=solid];
m7_33 -> m7_35  [key=2, style=dotted];
m7_33 -> m7_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_34 -> m7_30  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m7_0 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m7_1 -> m7_0  [key=0, style=bold, color=blue];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_16 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m7_16 -> m7_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m7_16 -> m7_17  [key=0, style=solid];
m7_16 -> m7_22  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m7_20 -> m7_21  [key=0, style=solid, color=green];
m7_19 -> m7_20  [key=0, style=solid, color=green];
m7_19 -> m7_22  [key=0, style=solid];
m7_19 -> m7_24  [key=2, style=dotted];
m7_21 -> m7_23  [key=0, style=solid];
m7_21 -> m7_25  [key=2, style=dotted];
m7_21 -> m7_26  [key=2, style=dotted];
m7_21 -> m7_27  [key=2, style=dotted];
m7_21 -> m7_28  [key=2, style=dotted];
m7_21 -> m7_29  [key=2, style=dotted];
m7_17 -> m7_19  [key=0, style=solid];
m7_17 -> m7_18  [key=0, style=solid];
m7_22 -> m7_23  [key=0, style=solid];
m7_18 -> m7_23  [key=0, style=solid];
m7_18 -> m7_7  [key=2, style=dotted];
m7_23 -> m7_16  [key=0, style=bold, color=blue];
m7_2 -> m7_7  [key=2, style=dotted];
m7_2 -> m7_6  [key=0, style=solid];
m7_2 -> m7_3  [key=0, style=solid];
m7_4 -> m7_7  [key=2, style=dotted];
m7_4 -> m7_6  [key=0, style=solid];
m7_4 -> m7_2  [key=0, style=bold, color=blue];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_5  [key=0, style=solid];
m7_3 -> m7_6  [key=2, style=dotted];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_8  [key=2, style=dotted];
m7_6 -> m7_0  [key=0, style=bold, color=blue];
m7_8 -> m7_9  [key=0, style=solid];
m7_8 -> m7_5  [key=2, style=dotted];
m7_8 -> m7_6  [key=2, style=dotted];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<object>"];
m7_9 -> m7_14  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m7_9 -> m7_7  [key=0, style=bold, color=blue];
m7_11 -> m7_7  [key=2, style=dotted];
m7_11 -> m7_15  [key=0, style=solid];
m7_13 -> m7_7  [key=2, style=dotted];
m7_13 -> m7_15  [key=0, style=solid];
m7_10 -> m7_11  [key=0, style=solid];
m7_10 -> m7_12  [key=0, style=solid];
m7_12 -> m7_13  [key=0, style=solid];
m7_12 -> m7_14  [key=0, style=solid];
m7_14 -> m7_15  [key=0, style=solid];
m7_14 -> m7_8  [key=2, style=dotted];
m7_15 -> m7_9  [key=0, style=bold, color=blue];
m7_36 -> m7_37  [key=0, style=solid];
m7_37 -> m7_38  [key=0, style=solid];
m7_37 -> m7_39  [key=2, style=dotted];
m7_38 -> m7_36  [key=0, style=bold, color=blue];
m7_7 -> m7_8  [key=0, style=solid];
m7_40 -> m7_37  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m9_5 -> m9_6  [key=0, style=solid, color=green];
m9_6 -> m9_7  [key=0, style=solid, color=green];
m9_6 -> m9_8  [key=2, style=dotted, color=green];
m9_7 -> m9_5  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid, color=green];
m9_1 -> m9_1  [key=1, style=dashed, color=green, label=t];
m9_1 -> m9_2  [key=0, style=solid, color=green];
m9_1 -> m9_3  [key=2, style=dotted, color=green];
m9_1 -> m9_4  [key=2, style=dotted, color=green];
m9_1 -> m9_5  [key=1, style=dashed, color=green, label="lambda expression"];
m9_1 -> m9_6  [key=1, style=dashed, color=green, label=t];
m9_2 -> m9_0  [key=0, style=bold, color=blue];
m9_9 -> m9_6  [key=1, style=dashed, color=green, label=t];
}
