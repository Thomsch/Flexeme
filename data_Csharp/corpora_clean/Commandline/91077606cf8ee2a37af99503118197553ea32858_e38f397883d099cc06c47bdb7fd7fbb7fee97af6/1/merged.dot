digraph  {
m0_8 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="NameLookupTests.cs"];
m0_16 [label="Entry Unk.Be", span="", cluster="Unk.Be", file="NameLookupTests.cs"];
m0_27 [label="Entry CommandLine.ParserSettings.ParserSettings()", span="44-44", cluster="CommandLine.ParserSettings.ParserSettings()", file="NameLookupTests.cs"];
m0_6 [label="writer.ToString().Should().Be(''MockOptions::GetUsage()'')", span="49-49", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs"];
m0_15 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="NameLookupTests.cs"];
m0_10 [label="Entry CommandLine.ParserSettings.ParserSettings(System.IO.TextWriter)", span="65-65", cluster="CommandLine.ParserSettings.ParserSettings(System.IO.TextWriter)", file="NameLookupTests.cs"];
m0_12 [label="Entry CommandLine.IParser.ParseArguments(string[], object)", span="49-49", cluster="CommandLine.IParser.ParseArguments(string[], object)", file="NameLookupTests.cs"];
m0_14 [label="Entry Unk.BeFalse", span="", cluster="Unk.BeFalse", file="NameLookupTests.cs"];
m0_7 [label="Exit CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", span="40-40", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", span="40-40", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs"];
m0_2 [label="IParser parser = new Parser(new ParserSettings(writer))", span="43-43", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", color=green, community=0, file="NameLookupTests.cs"];
m0_1 [label="var writer = new StringWriter()", span="42-42", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs"];
m0_3 [label="var options = new SimpleOptionsWithHelpOption()", span="44-44", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs"];
m0_4 [label="bool success = parser.ParseArguments(new string[] {''--help''}, options)", span="46-46", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs"];
m0_5 [label="success.Should().BeFalse()", span="48-48", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_constructor()", file="NameLookupTests.cs"];
m0_17 [label="Entry CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", span="53-53", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_18 [label="var writer = new StringWriter()", span="55-55", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_19 [label="var settings = new ParserSettings()", span="56-56", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_20 [label="settings.HelpWriter = writer", span="57-57", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_25 [label="writer.ToString().Should().Be(''MockOptions::GetUsage()'')", span="64-64", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_21 [label="IParser parser = new Parser(settings)", span="58-58", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_22 [label="var options = new SimpleOptionsWithHelpOption()", span="59-59", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_23 [label="bool success = parser.ParseArguments(new string[] { ''--help'' }, options)", span="61-61", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_24 [label="success.Should().BeFalse()", span="63-63", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_26 [label="Exit CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", span="53-53", cluster="CommandLine.Tests.Unit.ParserSettingsFixture.Setting_help_writer_using_property()", file="NameLookupTests.cs"];
m0_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs"];
m0_13 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="NameLookupTests.cs"];
m0_11 [label="Entry CommandLine.Tests.Fakes.SimpleOptionsWithHelpOption.SimpleOptionsWithHelpOption()", span="32-32", cluster="CommandLine.Tests.Fakes.SimpleOptionsWithHelpOption.SimpleOptionsWithHelpOption()", file="NameLookupTests.cs"];
m3_51 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="Specification.cs"];
m3_7 [label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="Specification.cs"];
m3_62 [label="return new NotParsed<object>(TypeInfo.Create(typeof(NullInstance), types), errors);", span="83-83", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="Specification.cs"];
m3_63 [label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="81-81", cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="Specification.cs"];
m3_31 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs"];
m3_30 [label="Entry Unk.>", span="", cluster="Unk.>", file="Specification.cs"];
m3_34 [label="Entry Unk.MakeNotParsed", span="", cluster="Unk.MakeNotParsed", file="Specification.cs"];
m3_29 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="Specification.cs"];
m3_16 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Specification.cs"];
m3_64 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="Specification.cs"];
m3_33 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="382-382", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="Specification.cs"];
m3_53 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="408-408", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="Specification.cs"];
m3_20 [label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="457-457", cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="Specification.cs"];
m3_25 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="Specification.cs"];
m3_52 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="Specification.cs"];
m3_41 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="Specification.cs"];
m3_4 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Specification.cs"];
m3_26 [label="Entry string.Concat(string, string)", span="0-0", cluster="string.Concat(string, string)", file="Specification.cs"];
m3_5 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="Specification.cs"];
m3_58 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="Specification.cs"];
m3_10 [label="Func<string, bool> preprocCompare = command =>\r\n                        nameComparer.Equals(command, firstArg) ||\r\n                        nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="26-28", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m3_9 [label="var firstArg = arguments.First()", span="24-24", cluster="lambda expression", file="Specification.cs"];
m3_11 [label="var verbs = Verb.SelectFromTypes(types)", span="30-30", cluster="lambda expression", file="Specification.cs"];
m3_23 [label="nameComparer.Equals(command, firstArg) ||\r\n                        nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="27-28", cluster="lambda expression", color=green, community=0, file="Specification.cs"];
m3_12 [label="return preprocCompare(''help'')\r\n                    ? MakeNotParsed(types,\r\n                        MakeHelpVerbRequestedError(verbs,\r\n                            arguments.Skip(1).FirstOrDefault() ?? string.Empty, nameComparer))\r\n                    : preprocCompare(''version'')\r\n                        ? MakeNotParsed(types, new VersionRequestedError())\r\n                        : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture, nonFatalErrors);", span="32-38", cluster="lambda expression", file="Specification.cs"];
m3_22 [label="Entry lambda expression", span="26-28", cluster="lambda expression", file="Specification.cs"];
m3_24 [label="Exit lambda expression", span="26-28", cluster="lambda expression", file="Specification.cs"];
m3_8 [label="Entry lambda expression", span="22-39", cluster="lambda expression", file="Specification.cs"];
m3_13 [label="Exit lambda expression", span="22-39", cluster="lambda expression", file="Specification.cs"];
m3_36 [label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="54-54", cluster="lambda expression", file="Specification.cs"];
m3_44 [label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="58-58", cluster="lambda expression", file="Specification.cs"];
m3_56 [label="nameComparer.Equals(v.Item1.Name, verb)", span="73-73", cluster="lambda expression", file="Specification.cs"];
m3_39 [label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="58-58", cluster="lambda expression", file="Specification.cs"];
m3_35 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="Specification.cs"];
m3_37 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="Specification.cs"];
m3_43 [label="Entry lambda expression", span="58-58", cluster="lambda expression", file="Specification.cs"];
m3_45 [label="Exit lambda expression", span="58-58", cluster="lambda expression", file="Specification.cs"];
m3_55 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="Specification.cs"];
m3_57 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="Specification.cs"];
m3_38 [label="Entry lambda expression", span="57-58", cluster="lambda expression", file="Specification.cs"];
m3_46 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="Specification.cs"];
m3_40 [label="Exit lambda expression", span="57-58", cluster="lambda expression", file="Specification.cs"];
m3_48 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="Specification.cs"];
m3_47 [label="v.Item2", span="64-64", cluster="lambda expression", file="Specification.cs"];
m3_59 [label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="76-76", cluster="lambda expression", file="Specification.cs"];
m3_60 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="Specification.cs"];
m3_14 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="Specification.cs"];
m3_65 [label="Entry CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", span="34-34", cluster="CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", file="Specification.cs"];
m3_17 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Specification.cs"];
m3_21 [label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="46-46", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs"];
m3_27 [label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture,\r\n                    nonFatalErrors)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="54-64", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs"];
m3_28 [label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="46-46", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs"];
m3_19 [label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="67-67", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="Specification.cs"];
m3_49 [label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="72-78", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="Specification.cs"];
m3_50 [label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="67-67", cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="Specification.cs"];
m3_32 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="Specification.cs"];
m3_6 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="446-446", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="Specification.cs"];
m3_54 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="Specification.cs"];
m3_42 [label="Entry Unk.AutoDefault", span="", cluster="Unk.AutoDefault", file="Specification.cs"];
m3_18 [label="Entry System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", file="Specification.cs"];
m3_0 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs"];
m3_1 [label="Func<ParserResult<object>> choose = () =>\r\n            {\r\n                var firstArg = arguments.First();\r\n\r\n                Func<string, bool> preprocCompare = command =>\r\n                        nameComparer.Equals(command, firstArg) ||\r\n                        nameComparer.Equals(string.Concat(''--'', command), firstArg);\r\n\r\n                var verbs = Verb.SelectFromTypes(types);\r\n\r\n                return preprocCompare(''help'')\r\n                    ? MakeNotParsed(types,\r\n                        MakeHelpVerbRequestedError(verbs,\r\n                            arguments.Skip(1).FirstOrDefault() ?? string.Empty, nameComparer))\r\n                    : preprocCompare(''version'')\r\n                        ? MakeNotParsed(types, new VersionRequestedError())\r\n                        : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture, nonFatalErrors);\r\n            }", span="22-39", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, file="Specification.cs"];
m3_2 [label="return arguments.Any()\r\n                ? choose()\r\n                : MakeNotParsed(types, new NoVerbSelectedError());", span="41-43", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs"];
m3_3 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Specification.cs"];
m3_15 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="Specification.cs"];
m3_61 [label="Entry HelpVerbRequestedError.cstr", span="", cluster="HelpVerbRequestedError.cstr", file="Specification.cs"];
m3_67 [label="System.StringComparer", span="", file="Specification.cs"];
m3_72 [label=firstArg, span="", file="Specification.cs"];
m3_66 [label="System.Collections.Generic.IEnumerable<string>", span="", file="Specification.cs"];
m3_68 [label="System.Collections.Generic.IEnumerable<System.Type>", span="", file="Specification.cs"];
m3_69 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span="", file="Specification.cs"];
m3_70 [label="System.Globalization.CultureInfo", span="", file="Specification.cs"];
m3_71 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span="", file="Specification.cs"];
m3_73 [label="System.Collections.Generic.IEnumerable<string>", span="", file="Specification.cs"];
m3_74 [label="System.StringComparer", span="", file="Specification.cs"];
m3_76 [label=string, span="", file="Specification.cs"];
m3_77 [label="System.StringComparer", span="", file="Specification.cs"];
m3_75 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span="", file="Specification.cs"];
m8_0 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_1 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="16-19", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_2 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="20-24", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=red, community=0, file="TokenPartitionerTests.cs"];
m8_4 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="33-33", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_3 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="27-30", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_5 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m8_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs"];
m8_11 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs"];
m8_13 [label="Entry Unk.True", span="", cluster="Unk.True", file="TokenPartitionerTests.cs"];
m8_12 [label="Entry Unk.All", span="", cluster="Unk.All", file="TokenPartitionerTests.cs"];
m8_39 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_15 [label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="29-29", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_14 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_19 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="33-33", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_18 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_16 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_20 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_22 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_23 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="33-33", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_24 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_34 [label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="55-55", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_33 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_37 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="59-59", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_36 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_35 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_38 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_40 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="59-59", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_41 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m8_17 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs"];
m8_25 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TokenPartitionerTests.cs"];
m8_9 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs"];
m8_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenPartitionerTests.cs"];
m8_21 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="TokenPartitionerTests.cs"];
m8_10 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs"];
m8_26 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs"];
m8_27 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_28 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="42-45", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_29 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="46-50", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=red, community=0, file="TokenPartitionerTests.cs"];
m8_31 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="59-59", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_30 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="53-56", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_32 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m8_8 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs"];
m8_42 [label=specs, span="", file="TokenPartitionerTests.cs"];
m8_43 [label=result, span="", file="TokenPartitionerTests.cs"];
m8_44 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span="", file="TokenPartitionerTests.cs"];
m8_45 [label=specs, span="", file="TokenPartitionerTests.cs"];
m8_46 [label=result, span="", file="TokenPartitionerTests.cs"];
m8_47 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span="", file="TokenPartitionerTests.cs"];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_15  [key=2, style=dotted];
m0_6 -> m0_13  [key=2, style=dotted];
m0_6 -> m0_16  [key=2, style=dotted];
m0_7 -> m0_0  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_7  [key=2, style=dotted, color=green];
m0_2 -> m0_8  [key=2, style=dotted, color=green];
m0_2 -> m0_9  [key=2, style=dotted, color=green];
m0_2 -> m0_10  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=parser];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_1 -> m0_8  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_10  [key=2, style=dotted];
m0_3 -> m0_11  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_11  [key=2, style=dotted];
m0_4 -> m0_12  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_13  [key=2, style=dotted];
m0_5 -> m0_14  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_8  [key=2, style=dotted];
m0_18 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_18 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_27  [key=2, style=dotted];
m0_19 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=settings];
m0_20 -> m0_21  [key=0, style=solid];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_15  [key=2, style=dotted];
m0_25 -> m0_13  [key=2, style=dotted];
m0_25 -> m0_16  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_9  [key=2, style=dotted];
m0_21 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label=parser];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_11  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_12  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_13  [key=2, style=dotted];
m0_24 -> m0_14  [key=2, style=dotted];
m0_26 -> m0_17  [key=0, style=bold, color=blue];
m3_7 -> m3_62  [key=0, style=solid];
m3_7 -> m3_19  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Error[] errors"];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_64  [key=2, style=dotted];
m3_62 -> m3_65  [key=2, style=dotted];
m3_63 -> m3_7  [key=0, style=bold, color=blue];
m3_58 -> m3_59  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid, color=green];
m3_10 -> m3_23  [key=1, style=dashed, color=green, label=string];
m3_10 -> m3_12  [key=1, style=dashed, color=green, label=preprocCompare];
m3_9 -> m3_10  [key=0, style=solid, color=green];
m3_9 -> m3_23  [key=1, style=dashed, color=green, label=firstArg];
m3_9 -> m3_14  [key=2, style=dotted];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_15  [key=2, style=dotted];
m3_23 -> m3_24  [key=0, style=solid, color=green];
m3_23 -> m3_25  [key=2, style=dotted, color=green];
m3_23 -> m3_26  [key=2, style=dotted, color=green];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_16  [key=2, style=dotted];
m3_12 -> m3_17  [key=2, style=dotted];
m3_12 -> m3_18  [key=2, style=dotted];
m3_12 -> m3_19  [key=2, style=dotted];
m3_12 -> m3_7  [key=2, style=dotted];
m3_12 -> m3_20  [key=2, style=dotted];
m3_12 -> m3_21  [key=2, style=dotted];
m3_22 -> m3_23  [key=0, style=solid, color=green];
m3_24 -> m3_22  [key=0, style=bold, color=blue];
m3_8 -> m3_9  [key=0, style=solid];
m3_13 -> m3_8  [key=0, style=bold, color=blue];
m3_36 -> m3_25  [key=2, style=dotted];
m3_36 -> m3_14  [key=2, style=dotted];
m3_36 -> m3_37  [key=0, style=solid];
m3_44 -> m3_25  [key=2, style=dotted];
m3_44 -> m3_14  [key=2, style=dotted];
m3_44 -> m3_45  [key=0, style=solid];
m3_56 -> m3_25  [key=2, style=dotted];
m3_56 -> m3_57  [key=0, style=solid];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_41  [key=2, style=dotted];
m3_39 -> m3_42  [key=2, style=dotted];
m3_39 -> m3_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_35 -> m3_36  [key=0, style=solid];
m3_37 -> m3_35  [key=0, style=bold, color=blue];
m3_43 -> m3_44  [key=0, style=solid];
m3_45 -> m3_43  [key=0, style=bold, color=blue];
m3_55 -> m3_56  [key=0, style=solid];
m3_57 -> m3_55  [key=0, style=bold, color=blue];
m3_38 -> m3_39  [key=0, style=solid];
m3_46 -> m3_47  [key=0, style=solid];
m3_40 -> m3_38  [key=0, style=bold, color=blue];
m3_48 -> m3_46  [key=0, style=bold, color=blue];
m3_47 -> m3_48  [key=0, style=solid];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_61  [key=2, style=dotted];
m3_60 -> m3_58  [key=0, style=bold, color=blue];
m3_21 -> m3_27  [key=0, style=solid];
m3_21 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_21 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m3_21 -> m3_44  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_27 -> m3_14  [key=2, style=dotted];
m3_27 -> m3_17  [key=2, style=dotted];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_29  [key=2, style=dotted];
m3_27 -> m3_30  [key=2, style=dotted];
m3_27 -> m3_31  [key=2, style=dotted];
m3_27 -> m3_32  [key=2, style=dotted];
m3_27 -> m3_33  [key=2, style=dotted];
m3_27 -> m3_34  [key=2, style=dotted];
m3_27 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_27 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_27 -> m3_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_28 -> m3_21  [key=0, style=bold, color=blue];
m3_19 -> m3_49  [key=0, style=solid];
m3_19 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_51  [key=2, style=dotted];
m3_49 -> m3_52  [key=2, style=dotted];
m3_49 -> m3_53  [key=2, style=dotted];
m3_49 -> m3_54  [key=2, style=dotted];
m3_49 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_49 -> m3_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_50 -> m3_19  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid, color=green];
m3_0 -> m3_10  [key=1, style=dashed, color=green, label="System.StringComparer"];
m3_0 -> m3_23  [key=1, style=dashed, color=green, label="System.StringComparer"];
m3_0 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_0 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Type>"];
m3_0 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m3_0 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Type>"];
m3_1 -> m3_1  [key=3, color=green, style=bold, label="Local variable System.Func<CommandLine.ParserResult<object>> choose"];
m3_1 -> m3_2  [key=0, style=solid, color=green];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_5  [key=2, style=dotted];
m3_2 -> m3_6  [key=2, style=dotted];
m3_2 -> m3_7  [key=2, style=dotted];
m3_3 -> m3_0  [key=0, style=bold, color=blue];
m3_67 -> m3_10  [key=1, style=dashed, color=green, label="System.StringComparer"];
m3_67 -> m3_23  [key=1, style=dashed, color=green, label="System.StringComparer"];
m3_67 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_72 -> m3_23  [key=1, style=dashed, color=green, label=firstArg];
m3_66 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_66 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_68 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Type>"];
m3_68 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Type>"];
m3_69 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m3_70 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m3_71 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
m3_73 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_73 -> m3_44  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_73 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m3_74 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_74 -> m3_44  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_74 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_76 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_77 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m3_75 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid, color=red];
m8_1 -> m8_6  [key=2, style=dotted];
m8_1 -> m8_4  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
m8_2 -> m8_3  [key=0, style=solid, color=red];
m8_2 -> m8_7  [key=2, style=dotted, color=red];
m8_2 -> m8_8  [key=2, style=dotted, color=red];
m8_2 -> m8_15  [key=1, style=dashed, color=red, label=specs];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_12  [key=2, style=dotted];
m8_4 -> m8_13  [key=2, style=dotted];
m8_4 -> m8_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_9  [key=2, style=dotted];
m8_3 -> m8_10  [key=2, style=dotted];
m8_3 -> m8_11  [key=2, style=dotted];
m8_3 -> m8_14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_3 -> m8_19  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_5 -> m8_0  [key=0, style=bold, color=blue];
m8_39 -> m8_40  [key=0, style=solid];
m8_15 -> m8_16  [key=0, style=solid];
m8_15 -> m8_17  [key=2, style=dotted];
m8_14 -> m8_15  [key=0, style=solid];
m8_19 -> m8_20  [key=0, style=solid];
m8_19 -> m8_21  [key=2, style=dotted];
m8_19 -> m8_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_19 -> m8_23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_18 -> m8_19  [key=0, style=solid];
m8_16 -> m8_14  [key=0, style=bold, color=blue];
m8_20 -> m8_18  [key=0, style=bold, color=blue];
m8_22 -> m8_23  [key=0, style=solid];
m8_23 -> m8_24  [key=0, style=solid];
m8_23 -> m8_25  [key=2, style=dotted];
m8_23 -> m8_26  [key=2, style=dotted];
m8_23 -> m8_23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_24 -> m8_22  [key=0, style=bold, color=blue];
m8_34 -> m8_35  [key=0, style=solid];
m8_34 -> m8_17  [key=2, style=dotted];
m8_33 -> m8_34  [key=0, style=solid];
m8_37 -> m8_38  [key=0, style=solid];
m8_37 -> m8_21  [key=2, style=dotted];
m8_37 -> m8_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_37 -> m8_40  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_36 -> m8_37  [key=0, style=solid];
m8_35 -> m8_33  [key=0, style=bold, color=blue];
m8_38 -> m8_36  [key=0, style=bold, color=blue];
m8_40 -> m8_41  [key=0, style=solid];
m8_40 -> m8_25  [key=2, style=dotted];
m8_40 -> m8_26  [key=2, style=dotted];
m8_40 -> m8_40  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_41 -> m8_39  [key=0, style=bold, color=blue];
m8_27 -> m8_28  [key=0, style=solid];
m8_28 -> m8_29  [key=0, style=solid, color=red];
m8_28 -> m8_6  [key=2, style=dotted];
m8_28 -> m8_31  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
m8_29 -> m8_30  [key=0, style=solid, color=red];
m8_29 -> m8_7  [key=2, style=dotted, color=red];
m8_29 -> m8_8  [key=2, style=dotted, color=red];
m8_29 -> m8_34  [key=1, style=dashed, color=red, label=specs];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_12  [key=2, style=dotted];
m8_31 -> m8_13  [key=2, style=dotted];
m8_31 -> m8_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_30 -> m8_31  [key=0, style=solid];
m8_30 -> m8_9  [key=2, style=dotted];
m8_30 -> m8_10  [key=2, style=dotted];
m8_30 -> m8_11  [key=2, style=dotted];
m8_30 -> m8_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_30 -> m8_37  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_32 -> m8_27  [key=0, style=bold, color=blue];
m8_42 -> m8_15  [key=1, style=dashed, color=darkseagreen4, label=specs];
m8_43 -> m8_19  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_44 -> m8_23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m8_45 -> m8_34  [key=1, style=dashed, color=darkseagreen4, label=specs];
m8_46 -> m8_37  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_47 -> m8_40  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
}
