digraph  {
m1_41 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="45-47"];
m1_42 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="46-47"];
m1_43 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="45-47"];
m1_44 [cluster="System.StringComparer.Equals(string, string)", file="InstanceChooser.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m1_70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceChooser.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m1_441 [cluster="CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", span="4-4"];
m1_350 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="814-814"];
m1_351 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="817-821"];
m1_352 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Assert.Throws<ApplicationException>(test)", span="824-824"];
m1_353 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="814-814"];
m1_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m1_81 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
m1_82 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="200-200"];
m1_173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m1_30 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="71-71"];
m1_331 [cluster="Unk.>", file="InstanceChooser.cs", label="Entry Unk.>", span=""];
m1_53 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
m1_63 [cluster="lambda expression", color=green, community=0, file="InstanceChooser.cs", label="-1: nameComparer.Equals(v.Item1.Name, arguments.First())", span="77-77"];
m1_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m1_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392"];
m1_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.LongSequence)", span="395-395"];
m1_155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m1_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m1_83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m1_55 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="73-73"];
m1_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="615-615"];
m1_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m1_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceChooser.cs", label="Assert.True(expected.Equals(((Parsed<FakeOptions>)result).Value.StringValue))", span="627-627"];
m1_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="615-615"];
m1_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="786-786"];
m1_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793"];
m1_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Assert.Throws<ApplicationException>(test)", span="796-796"];
m1_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="786-786"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
m1_28 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="71-71"];
m1_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", color=red, community=0, file="InstanceChooser.cs", label="-1: var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74"];
m1_21 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="48-48"];
m1_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m1_20 [cluster="Unk.Equal", file="InstanceChooser.cs", label="Entry Unk.Equal", span=""];
m1_22 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="48-48"];
m1_23 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="48-48"];
m1_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m1_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceChooser.cs", label="Assert.Equal(expected, ((Parsed<FakeOptionsWithDouble>)result).Value.DoubleValue)", span="77-77"];
m1_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m1_29 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithDouble()", span="71-71"];
m1_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="719-719"];
m1_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="724-728"];
m1_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableLong)", span="731-731"];
m1_303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="719-719"];
m1_79 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="95-95"];
m1_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m1_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435"];
m1_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436"];
m1_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="449-449"];
m1_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446"];
m1_172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m1_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="594-594"];
m1_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="597-597"];
m1_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="600-604"];
m1_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="607-607"];
m1_255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="594-594"];
m1_387 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="871-871"];
m1_388 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="874-878"];
m1_389 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeInterfaceOptions>)result).Value.InputFile)", span="881-881"];
m1_390 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="871-871"];
m1_38 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequence()", span="95-95"];
m1_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m1_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceChooser.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
m1_109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m1_204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m1_74 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="92-92"];
m1_75 [cluster="lambda expression", file="InstanceChooser.cs", label="nameComparer.Equals(v.Item1.Name, verb)", span="92-92"];
m1_76 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="92-92"];
m1_77 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="95-95"];
m1_78 [cluster="lambda expression", file="InstanceChooser.cs", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="95-95"];
m1_239 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceChooser.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280"];
m1_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label=string, span=""];
m1_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="System.StringComparer", span=""];
m1_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241"];
m1_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>)result).Errors))", span="244-244"];
m1_96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231"];
m1_9 [cluster="CSharpx.Maybe.Just<T>(T)", file="InstanceChooser.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m1_184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="var fakeOptions = new FakeOptions()", span="21-21"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="var expectedResult = new NotParsed<FakeOptions>(\r\n                typeof(FakeOptions), new Error[] { new HelpRequestedError() })", span="22-23"];
m1_449 [cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceChooser.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_61 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
m1_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="739-739"];
m1_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
m1_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceChooser.cs", label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName.Value)", span="753-753"];
m1_311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceChooser.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName))", span="755-755"];
m1_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceChooser.cs", label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName != null", span="751-751"];
m1_312 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="739-739"];
m1_291 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m1_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212"];
m1_299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m1_432 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="976-976"];
m1_433 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithTwoRequired>>(() => new FakeOptionWithTwoRequired()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="979-983"];
m1_435 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceChooser.cs", label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="987-987"];
m1_434 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceChooser.cs", label="var errors = ((NotParsed<FakeOptionWithTwoRequired>)result).Errors", span="986-986"];
m1_436 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="976-976"];
m1_6 [cluster="lambda expression", file="InstanceChooser.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="22-22"];
m1_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="575-575"];
m1_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="578-578"];
m1_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="581-585"];
m1_246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="588-588"];
m1_247 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="575-575"];
m1_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m1_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277"];
m1_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284"];
m1_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="287-287"];
m1_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m1_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceChooser.cs", label="Assert.True(expected.SequenceEqual(((Parsed<FakeOptionsWithSequence>)result).Value.IntSequence))", span="101-101"];
m1_8 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="19-24"];
m1_373 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m1_105 [cluster="Unk.ShouldBeEquivalentTo", file="InstanceChooser.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_80 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="200-200"];
m1_416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="933-933"];
m1_417 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="938-942"];
m1_418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithScalarValueAndSequenceStringAdjacent>)result).Value)", span="945-945"];
m1_419 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="933-933"];
m1_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceChooser.cs", label="Assert.Equal(expected, ((Parsed<FakeOptions>)result).Value.LongValue)", span="54-54"];
m1_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m1_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370"];
m1_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceWithoutRange>)result).Value.LongSequence)", span="373-373"];
m1_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m1_56 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="73-73"];
m1_57 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="76-78"];
m1_58 [cluster="lambda expression", color=green, community=0, file="InstanceChooser.cs", label="-1: verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()", span="77-78"];
m1_59 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="76-78"];
m1_361 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="833-833"];
m1_362 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="836-840"];
m1_363 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="type == ParserResultType.NotParsed", span="843-843"];
m1_364 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="((NotParsed<FakeOptionsWithNamedAndEmptySets>)result).Errors.Should().HaveCount(x => x == expected)", span="845-845"];
m1_365 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="type == ParserResultType.Parsed", span="847-847"];
m1_366 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="result.Should().BeOfType<Parsed<FakeOptionsWithNamedAndEmptySets>>()", span="849-849"];
m1_367 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="833-833"];
m1_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m1_35 [cluster="System.Func<T, TResult>.Invoke(T)", file="InstanceChooser.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m1_60 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="162-162"];
m1_71 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="181-181"];
m1_45 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="117-117"];
m1_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m1_13 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="21-21"];
m1_15 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="22-22"];
m1_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="InstanceChooser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m1_39 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="InstanceChooser.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="421-421"];
m1_46 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceChooser.cs", label="-1: return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="73-83"];
m1_47 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="66-66"];
m1_52 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="InstanceChooser.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="346-346"];
m1_54 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="73-73"];
m1_62 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="77-77"];
m1_72 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="InstanceChooser.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="372-372"];
m1_73 [cluster="Unk.Return", file="InstanceChooser.cs", label="Entry Unk.Return", span=""];
m1_89 [cluster="lambda expression", file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m1_90 [cluster="lambda expression", file="InstanceChooser.cs", label="System.StringComparer", span=""];
m1_91 [cluster="lambda expression", file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m1_97 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="238-238"];
m1_98 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238"];
m1_99 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="238-238"];
m1_106 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="262-262"];
m1_107 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithEnum()", span="262-262"];
m1_108 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="262-262"];
m1_116 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="281-281"];
m1_117 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithEnum()", span="281-281"];
m1_118 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="281-281"];
m1_124 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="300-300"];
m1_125 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithEnum()", span="300-300"];
m1_126 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="300-300"];
m1_132 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="319-319"];
m1_133 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithEnum()", span="319-319"];
m1_134 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="319-319"];
m1_141 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="344-344"];
m1_142 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithValues()", span="344-344"];
m1_143 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="344-344"];
m1_148 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="367-367"];
m1_149 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="367-367"];
m1_150 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="367-367"];
m1_156 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="389-389"];
m1_157 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="389-389"];
m1_158 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="389-389"];
m1_164 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="411-411"];
m1_165 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="411-411"];
m1_166 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="411-411"];
m1_174 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="440-440"];
m1_177 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="441-443"];
m1_175 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithValues()", span="440-440"];
m1_176 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="440-440"];
m1_178 [cluster="lambda expression", file="InstanceChooser.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443"];
m1_182 [cluster="lambda expression", file="InstanceChooser.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443"];
m1_186 [cluster="lambda expression", file="InstanceChooser.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443"];
m1_179 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="441-443"];
m1_181 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="443-443"];
m1_183 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="443-443"];
m1_185 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="443-443"];
m1_187 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="443-443"];
m1_195 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="466-466"];
m1_196 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSets()", span="466-466"];
m1_197 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="466-466"];
m1_205 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="486-486"];
m1_206 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithRequiredAndSet()", span="486-486"];
m1_207 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="486-486"];
m1_214 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="506-506"];
m1_215 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithRequiredAndSet()", span="506-506"];
m1_216 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="506-506"];
m1_222 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="525-525"];
m1_223 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithRequired()", span="525-525"];
m1_224 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="525-525"];
m1_231 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="544-544"];
m1_232 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="544-544"];
m1_233 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="544-544"];
m1_240 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="563-563"];
m1_241 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="563-563"];
m1_242 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="563-563"];
m1_248 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="582-582"];
m1_249 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="582-582"];
m1_250 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="582-582"];
m1_256 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="601-601"];
m1_257 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="601-601"];
m1_258 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="601-601"];
m1_264 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="621-621"];
m1_265 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="621-621"];
m1_266 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="621-621"];
m1_272 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="640-640"];
m1_273 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithRequiredValue()", span="640-640"];
m1_274 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="640-640"];
m1_280 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="662-662"];
m1_281 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="662-662"];
m1_282 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="662-662"];
m1_288 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="681-681"];
m1_289 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="681-681"];
m1_290 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="681-681"];
m1_296 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="703-703"];
m1_297 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithNullables()", span="703-703"];
m1_298 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="703-703"];
m1_304 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="725-725"];
m1_305 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithNullables()", span="725-725"];
m1_306 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="725-725"];
m1_314 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="745-745"];
m1_315 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithFSharpOption()", span="745-745"];
m1_316 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="745-745"];
m1_324 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="769-769"];
m1_325 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithFSharpOption()", span="769-769"];
m1_326 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="769-769"];
m1_332 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="789-793"];
m1_333 [cluster="lambda expression", file="InstanceChooser.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="789-793"];
m1_334 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="789-793"];
m1_335 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="790-790"];
m1_336 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithMinZero()", span="790-790"];
m1_337 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="790-790"];
m1_343 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="803-807"];
m1_344 [cluster="lambda expression", file="InstanceChooser.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="803-807"];
m1_345 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="803-807"];
m1_346 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="804-804"];
m1_347 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithMaxZero()", span="804-804"];
m1_348 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="804-804"];
m1_354 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="817-821"];
m1_355 [cluster="lambda expression", file="InstanceChooser.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="817-821"];
m1_356 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="817-821"];
m1_357 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="818-818"];
m1_358 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithMinMaxZero()", span="818-818"];
m1_359 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="818-818"];
m1_375 [cluster="lambda expression", file="InstanceChooser.cs", label="x == expected", span="845-845"];
m1_370 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="837-837"];
m1_374 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="845-845"];
m1_371 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="837-837"];
m1_372 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="837-837"];
m1_376 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="845-845"];
m1_385 [cluster="lambda expression", file="InstanceChooser.cs", label="x == expected", span="865-865"];
m1_381 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="859-859"];
m1_384 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="865-865"];
m1_382 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="859-859"];
m1_383 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="859-859"];
m1_386 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="865-865"];
m1_391 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="875-875"];
m1_392 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeInterfaceOptions()", span="875-875"];
m1_393 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="875-875"];
m1_407 [cluster="lambda expression", file="InstanceChooser.cs", label="x == expected", span="904-904"];
m1_402 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="896-896"];
m1_406 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="904-904"];
m1_403 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithTwoRequiredAndSets()", span="896-896"];
m1_404 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="896-896"];
m1_408 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="904-904"];
m1_413 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="920-920"];
m1_414 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithRequiredValue()", span="920-920"];
m1_415 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="920-920"];
m1_420 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="939-939"];
m1_421 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="939-939"];
m1_422 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="939-939"];
m1_429 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="958-958"];
m1_430 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptions()", span="958-958"];
m1_431 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="958-958"];
m1_443 [cluster="lambda expression", file="InstanceChooser.cs", label="x == expected", span="987-987"];
m1_438 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="980-980"];
m1_442 [cluster="lambda expression", file="InstanceChooser.cs", label="Entry lambda expression", span="987-987"];
m1_439 [cluster="lambda expression", file="InstanceChooser.cs", label="new FakeOptionWithTwoRequired()", span="980-980"];
m1_440 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="980-980"];
m1_444 [cluster="lambda expression", file="InstanceChooser.cs", label="Exit lambda expression", span="987-987"];
m1_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
m1_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", color=green, community=0, file="InstanceChooser.cs", label="-1: var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
m1_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Errors))", span="187-187"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m1_12 [cluster="Unk.True", file="InstanceChooser.cs", label="Entry Unk.True", span=""];
m1_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceChooser.cs", label="Assert.True(expectedResult.Equals(result))", span="33-33"];
m1_11 [cluster="CommandLine.NotParsed<T>.Equals(object)", file="InstanceChooser.cs", label="Entry CommandLine.NotParsed<T>.Equals(object)", span="211-211"];
m1_7 [cluster="CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceChooser.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(System.Type, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="192-192"];
m1_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
m1_36 [cluster="Unk.SequenceEqual", file="InstanceChooser.cs", label="Entry Unk.SequenceEqual", span=""];
m1_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m1_31 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="InstanceChooser.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="410-410"];
m1_159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m1_377 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="855-855"];
m1_378 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="858-862"];
m1_379 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceChooser.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == expected)", span="865-865"];
m1_380 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="855-855"];
m1_40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m1_395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="892-892"];
m1_396 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithTwoRequiredAndSets>>(() => new FakeOptionsWithTwoRequiredAndSets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="895-899"];
m1_397 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="type == ParserResultType.NotParsed", span="902-902"];
m1_398 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="((NotParsed<FakeOptionsWithTwoRequiredAndSets>)result).Errors.Should().HaveCount(x => x == expected)", span="904-904"];
m1_399 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="type == ParserResultType.Parsed", span="906-906"];
m1_400 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="result.Should().BeOfType<Parsed<FakeOptionsWithTwoRequiredAndSets>>()", span="908-908"];
m1_401 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="892-892"];
m1_225 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m1_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
m1_50 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceChooser.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
m1_51 [cluster="Unk.Select", file="InstanceChooser.cs", label="Entry Unk.Select", span=""];
m1_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m1_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296"];
m1_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303"];
m1_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="306-306"];
m1_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m1_140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m1_275 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m1_360 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m1_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="633-633"];
m1_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="636-636"];
m1_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="639-643"];
m1_270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithRequiredValue>)result).Errors))", span="646-646"];
m1_271 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="633-633"];
m1_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="537-537"];
m1_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="540-540"];
m1_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="543-547"];
m1_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="550-550"];
m1_230 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="537-537"];
m1_317 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m1_313 [cluster="Unk.get_IsSome", file="InstanceChooser.cs", label="Entry Unk.get_IsSome", span=""];
m1_188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceChooser.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m1_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="518-518"];
m1_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="521-521"];
m1_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="524-528"];
m1_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequired>)result).Errors))", span="531-531"];
m1_221 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="518-518"];
m1_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="497-497"];
m1_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="499-503"];
m1_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="505-509"];
m1_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequiredAndSet>)result).Errors))", span="512-512"];
m1_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="497-497"];
m1_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m1_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315"];
m1_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322"];
m1_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="325-325"];
m1_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m1_409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="914-914"];
m1_410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="919-923"];
m1_411 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithRequiredValue>)result).Value)", span="926-926"];
m1_412 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="914-914"];
m1_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="System.StringComparer", span=""];
m1_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="System.StringComparer", span=""];
m1_88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label=firstArg, span=""];
m1_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m1_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m1_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340"];
m1_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347"];
m1_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="350-350"];
m1_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m1_423 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m1_349 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m1_369 [cluster="Unk.HaveCount", file="InstanceChooser.cs", label="Entry Unk.HaveCount", span=""];
m1_198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m1_263 [cluster="string.Equals(string)", file="InstanceChooser.cs", label="Entry string.Equals(string)", span="0-0"];
m1_394 [cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2"];
m1_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="763-763"];
m1_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="768-772"];
m1_321 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceChooser.cs", label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset.Value)", span="777-777"];
m1_322 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceChooser.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset))", span="779-779"];
m1_320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceChooser.cs", label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset != null", span="775-775"];
m1_323 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="763-763"];
m1_424 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="951-951"];
m1_425 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceChooser.cs", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="954-954"];
m1_426 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="957-961"];
m1_427 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceChooser.cs", label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value)", span="964-964"];
m1_428 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="951-951"];
m1_151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m1_194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="InstanceChooser.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="304-304"];
m1_180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="InstanceChooser.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="33-33"];
m1_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m1_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414"];
m1_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.StringSequence)", span="417-417"];
m1_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m1_213 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceChooser.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
m1_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="697-697"];
m1_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="702-706"];
m1_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableInt)", span="709-709"];
m1_295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="697-697"];
m1_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="556-556"];
m1_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="559-559"];
m1_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="562-566"];
m1_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="569-569"];
m1_238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="556-556"];
m1_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="478-478"];
m1_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="480-483"];
m1_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489"];
m1_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionWithRequiredAndSet>)result).Value)", span="492-492"];
m1_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="478-478"];
m1_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="674-674"];
m1_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="677-677"];
m1_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="680-684"];
m1_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceMinMaxEqual>)result).Errors))", span="687-687"];
m1_287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="674-674"];
m1_405 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", span="4-4"];
m1_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m1_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265"];
m1_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithEnum>)result).Value.Colors)", span="268-268"];
m1_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m1_445 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="992-992"];
m1_446 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="997-1001"];
m1_447 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeImmutableOptions>)result).Value)", span="1004-1004"];
m1_448 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="992-992"];
m1_100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m1_368 [cluster="Unk.Should", file="InstanceChooser.cs", label="Entry Unk.Should", span=""];
m1_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="656-656"];
m1_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="661-665"];
m1_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceChooser.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value.StringValue)", span="668-668"];
m1_279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="656-656"];
m1_115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceChooser.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="324-324"];
m1_437 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceChooser.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m1_338 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m1_339 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="800-800"];
m1_340 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="803-807"];
m1_341 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Assert.Throws<ApplicationException>(test)", span="810-810"];
m1_342 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="800-800"];
m1_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m1_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="458-462"];
m1_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469"];
m1_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSets>)result).Errors))", span="472-472"];
m1_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceChooser.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m1_450 [file="InstanceChooser.cs", label=fakeOptions, span=""];
m1_451 [file="InstanceChooser.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_452 [file="InstanceChooser.cs", label=int, span=""];
m1_453 [file="InstanceChooser.cs", label=int, span=""];
m1_454 [file="InstanceChooser.cs", label=int, span=""];
m1_455 [file="InstanceChooser.cs", label=int, span=""];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_9  [key=2, style=dotted];
m1_42 -> m1_10  [key=2, style=dotted];
m1_42 -> m1_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_44  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_36  [key=2, style=dotted];
m1_43 -> m1_12  [key=2, style=dotted];
m1_43 -> m1_41  [color=blue, key=0, style=bold];
m1_44 -> m1_41  [color=blue, key=0, style=bold];
m1_350 -> m1_351  [key=0, style=solid];
m1_351 -> m1_352  [key=0, style=solid];
m1_352 -> m1_353  [key=0, style=solid];
m1_352 -> m1_331  [key=2, style=dotted];
m1_353 -> m1_350  [color=blue, key=0, style=bold];
m1_32 -> m1_81  [key=0, style=solid];
m1_32 -> m1_38  [color=darkorchid, key=3, label="Parameter variable CommandLine.Error[] errors", style=bold];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m1_32 -> m1_173  [color=darkorchid, key=3, label="Parameter variable System.StringComparer nameComparer", style=bold];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_83  [key=2, style=dotted];
m1_81 -> m1_84  [key=2, style=dotted];
m1_82 -> m1_32  [color=blue, key=0, style=bold];
m1_82 -> m1_80  [color=blue, key=0, style=bold];
m1_30 -> m1_28  [color=blue, key=0, style=bold];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_55  [key=2, style=dotted];
m1_63 -> m1_15  [color=green, key=0, style=solid];
m1_63 -> m1_33  [color=green, key=2, style=dotted];
m1_63 -> m1_44  [color=green, key=2, style=dotted];
m1_152 -> m1_153  [key=0, style=solid];
m1_152 -> m1_154  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_9  [key=2, style=dotted];
m1_153 -> m1_10  [key=2, style=dotted];
m1_153 -> m1_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_154 -> m1_155  [key=0, style=solid];
m1_154 -> m1_105  [key=2, style=dotted];
m1_155 -> m1_152  [color=blue, key=0, style=bold];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_55 -> m1_33  [key=2, style=dotted];
m1_55 -> m1_44  [key=2, style=dotted];
m1_55 -> m1_56  [key=0, style=solid];
m1_259 -> m1_260  [key=0, style=solid];
m1_259 -> m1_261  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_260 -> m1_261  [key=0, style=solid];
m1_260 -> m1_9  [key=2, style=dotted];
m1_260 -> m1_10  [key=2, style=dotted];
m1_260 -> m1_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_261 -> m1_262  [key=0, style=solid];
m1_261 -> m1_263  [key=2, style=dotted];
m1_261 -> m1_12  [key=2, style=dotted];
m1_262 -> m1_259  [color=blue, key=0, style=bold];
m1_327 -> m1_328  [key=0, style=solid];
m1_328 -> m1_329  [key=0, style=solid];
m1_329 -> m1_330  [key=0, style=solid];
m1_329 -> m1_331  [key=2, style=dotted];
m1_330 -> m1_327  [color=blue, key=0, style=bold];
m1_3 -> m1_40  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
m1_3 -> m1_19  [key=0, style=solid];
m1_3 -> m1_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m1_3 -> m1_21  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_3 -> m1_22  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_3 -> m1_42  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_3 -> m1_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m1_3 -> m1_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m1_3 -> m1_27  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m1_3 -> m1_28  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
m1_3 -> m1_32  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_10  [key=2, style=dotted];
m1_3 -> m1_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_28 -> m1_40  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_25 -> m1_36  [key=2, style=dotted];
m1_25 -> m1_29  [key=0, style=solid];
m1_25 -> m1_37  [key=2, style=dotted];
m1_25 -> m1_38  [key=2, style=dotted];
m1_25 -> m1_32  [key=2, style=dotted];
m1_25 -> m1_26  [color=red, key=0, style=solid];
m1_25 -> m1_9  [color=red, key=2, style=dotted];
m1_25 -> m1_10  [color=red, key=2, style=dotted];
m1_25 -> m1_28  [color=red, key=1, label="lambda expression", style=dashed];
m1_25 -> m1_173  [color=red, key=3, label="Parameter variable System.StringComparer nameComparer", style=bold];
m1_21 -> m1_33  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_42  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m1_19 -> m1_21  [key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_30  [key=2, style=dotted];
m1_19 -> m1_16  [color=blue, key=0, style=bold];
m1_20 -> m1_29  [key=0, style=solid];
m1_20 -> m1_31  [key=2, style=dotted];
m1_20 -> m1_32  [key=2, style=dotted];
m1_22 -> m1_42  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_22 -> m1_22  [color=darkorchid, key=3, label="Local variable System.Func<string, bool> preprocCompare", style=bold];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_24  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m1_22 -> m1_26  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m1_22 -> m1_6  [key=2, style=dotted];
m1_23 -> m1_28  [color=darkseagreen4, key=1, label=verbs, style=dashed];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=verbs, style=dashed];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_34  [key=2, style=dotted];
m1_23 -> m1_21  [color=blue, key=0, style=bold];
m1_27 -> m1_29  [key=0, style=solid];
m1_27 -> m1_39  [key=2, style=dotted];
m1_27 -> m1_32  [key=2, style=dotted];
m1_27 -> m1_24  [color=blue, key=0, style=bold];
m1_26 -> m1_28  [key=0, style=solid];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_35  [key=2, style=dotted];
m1_26 -> m1_20  [key=2, style=dotted];
m1_24 -> m1_25  [color=red, key=0, style=solid];
m1_24 -> m1_26  [key=0, style=solid];
m1_24 -> m1_35  [key=2, style=dotted];
m1_29 -> m1_3  [color=blue, key=0, style=bold];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_31  [key=2, style=dotted];
m1_300 -> m1_301  [key=0, style=solid];
m1_300 -> m1_302  [color=darkseagreen4, key=1, label="long?", style=dashed];
m1_301 -> m1_302  [key=0, style=solid];
m1_301 -> m1_9  [key=2, style=dotted];
m1_301 -> m1_10  [key=2, style=dotted];
m1_301 -> m1_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_302 -> m1_303  [key=0, style=solid];
m1_302 -> m1_105  [key=2, style=dotted];
m1_303 -> m1_300  [color=blue, key=0, style=bold];
m1_79 -> m1_77  [color=blue, key=0, style=bold];
m1_167 -> m1_168  [key=0, style=solid];
m1_168 -> m1_169  [key=0, style=solid];
m1_168 -> m1_140  [key=2, style=dotted];
m1_168 -> m1_171  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_169 -> m1_170  [key=0, style=solid];
m1_171 -> m1_172  [key=0, style=solid];
m1_171 -> m1_105  [key=2, style=dotted];
m1_170 -> m1_171  [key=0, style=solid];
m1_170 -> m1_9  [key=2, style=dotted];
m1_170 -> m1_173  [key=2, style=dotted];
m1_170 -> m1_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_170 -> m1_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_172 -> m1_167  [color=blue, key=0, style=bold];
m1_251 -> m1_252  [key=0, style=solid];
m1_252 -> m1_253  [key=0, style=solid];
m1_252 -> m1_239  [key=2, style=dotted];
m1_252 -> m1_254  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_253 -> m1_254  [key=0, style=solid];
m1_253 -> m1_9  [key=2, style=dotted];
m1_253 -> m1_10  [key=2, style=dotted];
m1_253 -> m1_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_254 -> m1_255  [key=0, style=solid];
m1_254 -> m1_36  [key=2, style=dotted];
m1_254 -> m1_12  [key=2, style=dotted];
m1_255 -> m1_251  [color=blue, key=0, style=bold];
m1_387 -> m1_388  [key=0, style=solid];
m1_387 -> m1_389  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_388 -> m1_389  [key=0, style=solid];
m1_388 -> m1_9  [key=2, style=dotted];
m1_388 -> m1_10  [key=2, style=dotted];
m1_388 -> m1_391  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_389 -> m1_390  [key=0, style=solid];
m1_389 -> m1_105  [key=2, style=dotted];
m1_390 -> m1_387  [color=blue, key=0, style=bold];
m1_38 -> m1_75  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_38 -> m1_68  [key=0, style=solid];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_40  [key=2, style=dotted];
m1_68 -> m1_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_68 -> m1_69  [key=0, style=solid];
m1_68 -> m1_70  [key=2, style=dotted];
m1_68 -> m1_71  [key=2, style=dotted];
m1_68 -> m1_72  [key=2, style=dotted];
m1_68 -> m1_73  [key=2, style=dotted];
m1_68 -> m1_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_68 -> m1_64  [color=blue, key=0, style=bold];
m1_69 -> m1_38  [color=blue, key=0, style=bold];
m1_74 -> m1_75  [key=0, style=solid];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_79  [key=2, style=dotted];
m1_75 -> m1_77  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_75 -> m1_44  [key=2, style=dotted];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_9  [key=2, style=dotted];
m1_76 -> m1_10  [key=2, style=dotted];
m1_76 -> m1_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_76 -> m1_74  [color=blue, key=0, style=bold];
m1_77 -> m1_78  [key=0, style=solid];
m1_77 -> m1_36  [key=2, style=dotted];
m1_77 -> m1_12  [key=2, style=dotted];
m1_78 -> m1_74  [color=blue, key=0, style=bold];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_80  [key=2, style=dotted];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_75  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_79  [key=2, style=dotted];
m1_93 -> m1_95  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_93 -> m1_75  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_9  [key=2, style=dotted];
m1_94 -> m1_10  [key=2, style=dotted];
m1_94 -> m1_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_36  [key=2, style=dotted];
m1_95 -> m1_12  [key=2, style=dotted];
m1_96 -> m1_92  [color=blue, key=0, style=bold];
m1_0 -> m1_3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<object> Choose", style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_1  [color=darkorchid, key=3, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> ", style=bold];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_63  [key=2, style=dotted];
m1_307 -> m1_308  [key=0, style=solid];
m1_307 -> m1_310  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_307 -> m1_311  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_308 -> m1_309  [key=0, style=solid];
m1_308 -> m1_9  [key=2, style=dotted];
m1_308 -> m1_10  [key=2, style=dotted];
m1_308 -> m1_314  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_308 -> m1_310  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_308 -> m1_311  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_310 -> m1_311  [key=0, style=solid];
m1_310 -> m1_105  [key=2, style=dotted];
m1_311 -> m1_312  [key=0, style=solid];
m1_311 -> m1_313  [key=2, style=dotted];
m1_311 -> m1_105  [key=2, style=dotted];
m1_309 -> m1_310  [key=0, style=solid];
m1_309 -> m1_311  [key=0, style=solid];
m1_312 -> m1_307  [color=blue, key=0, style=bold];
m1_84 -> m1_85  [key=0, style=solid];
m1_432 -> m1_433  [key=0, style=solid];
m1_432 -> m1_435  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_432 -> m1_443  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_433 -> m1_434  [key=0, style=solid];
m1_433 -> m1_9  [key=2, style=dotted];
m1_433 -> m1_10  [key=2, style=dotted];
m1_433 -> m1_438  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_435 -> m1_436  [key=0, style=solid];
m1_435 -> m1_437  [key=2, style=dotted];
m1_435 -> m1_368  [key=2, style=dotted];
m1_435 -> m1_369  [key=2, style=dotted];
m1_435 -> m1_442  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_434 -> m1_435  [key=0, style=solid];
m1_436 -> m1_432  [color=blue, key=0, style=bold];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_10  [key=2, style=dotted];
m1_6 -> m1_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_243 -> m1_244  [key=0, style=solid];
m1_244 -> m1_245  [key=0, style=solid];
m1_244 -> m1_239  [key=2, style=dotted];
m1_244 -> m1_246  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_245 -> m1_246  [key=0, style=solid];
m1_245 -> m1_9  [key=2, style=dotted];
m1_245 -> m1_10  [key=2, style=dotted];
m1_245 -> m1_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_246 -> m1_247  [key=0, style=solid];
m1_246 -> m1_36  [key=2, style=dotted];
m1_246 -> m1_12  [key=2, style=dotted];
m1_247 -> m1_243  [color=blue, key=0, style=bold];
m1_110 -> m1_111  [key=0, style=solid];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_115  [key=2, style=dotted];
m1_111 -> m1_70  [key=2, style=dotted];
m1_111 -> m1_113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_9  [key=2, style=dotted];
m1_112 -> m1_10  [key=2, style=dotted];
m1_112 -> m1_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_36  [key=2, style=dotted];
m1_113 -> m1_12  [key=2, style=dotted];
m1_114 -> m1_110  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_36  [key=2, style=dotted];
m1_34 -> m1_12  [key=2, style=dotted];
m1_8 -> m1_4  [color=blue, key=0, style=bold];
m1_80 -> m1_81  [key=0, style=solid];
m1_416 -> m1_417  [key=0, style=solid];
m1_416 -> m1_418  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m1_417 -> m1_418  [key=0, style=solid];
m1_417 -> m1_9  [key=2, style=dotted];
m1_417 -> m1_10  [key=2, style=dotted];
m1_417 -> m1_420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_418 -> m1_419  [key=0, style=solid];
m1_418 -> m1_105  [key=2, style=dotted];
m1_419 -> m1_416  [color=blue, key=0, style=bold];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=2, style=dotted];
m1_144 -> m1_145  [key=0, style=solid];
m1_144 -> m1_146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m1_145 -> m1_146  [key=0, style=solid];
m1_145 -> m1_9  [key=2, style=dotted];
m1_145 -> m1_10  [key=2, style=dotted];
m1_145 -> m1_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_146 -> m1_147  [key=0, style=solid];
m1_146 -> m1_105  [key=2, style=dotted];
m1_147 -> m1_144  [color=blue, key=0, style=bold];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_56 -> m1_54  [color=blue, key=0, style=bold];
m1_57 -> m1_58  [color=green, key=0, style=solid];
m1_57 -> m1_9  [key=2, style=dotted];
m1_57 -> m1_10  [key=2, style=dotted];
m1_57 -> m1_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_58 -> m1_59  [color=green, key=0, style=solid];
m1_58 -> m1_36  [key=2, style=dotted];
m1_58 -> m1_12  [key=2, style=dotted];
m1_58 -> m1_60  [color=green, key=2, style=dotted];
m1_58 -> m1_61  [color=green, key=2, style=dotted];
m1_58 -> m1_62  [color=green, key=1, label="lambda expression", style=dashed];
m1_59 -> m1_56  [color=blue, key=0, style=bold];
m1_59 -> m1_57  [color=blue, key=0, style=bold];
m1_361 -> m1_362  [key=0, style=solid];
m1_361 -> m1_363  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m1_361 -> m1_364  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_361 -> m1_375  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_361 -> m1_365  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m1_362 -> m1_363  [key=0, style=solid];
m1_362 -> m1_9  [key=2, style=dotted];
m1_362 -> m1_10  [key=2, style=dotted];
m1_362 -> m1_370  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_362 -> m1_364  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_362 -> m1_366  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_363 -> m1_364  [key=0, style=solid];
m1_363 -> m1_365  [key=0, style=solid];
m1_364 -> m1_367  [key=0, style=solid];
m1_364 -> m1_368  [key=2, style=dotted];
m1_364 -> m1_369  [key=2, style=dotted];
m1_364 -> m1_374  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_365 -> m1_366  [key=0, style=solid];
m1_365 -> m1_367  [key=0, style=solid];
m1_366 -> m1_367  [key=0, style=solid];
m1_366 -> m1_368  [key=2, style=dotted];
m1_366 -> m1_331  [key=2, style=dotted];
m1_367 -> m1_361  [color=blue, key=0, style=bold];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_9  [key=2, style=dotted];
m1_33 -> m1_10  [key=2, style=dotted];
m1_33 -> m1_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_35 -> m1_32  [color=blue, key=0, style=bold];
m1_60 -> m1_61  [key=0, style=solid];
m1_71 -> m1_72  [key=0, style=solid];
m1_45 -> m1_46  [key=0, style=solid];
m1_14 -> m1_15  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_11  [color=blue, key=0, style=bold];
m1_15 -> m1_13  [color=blue, key=0, style=bold];
m1_15 -> m1_62  [color=blue, key=0, style=bold];
m1_15 -> m1_16  [key=0, style=solid];
m1_37 -> m1_38  [key=0, style=solid];
m1_39 -> m1_37  [color=blue, key=0, style=bold];
m1_46 -> m1_47  [color=green, key=0, style=solid];
m1_46 -> m1_6  [key=2, style=dotted];
m1_46 -> m1_48  [color=green, key=2, style=dotted];
m1_46 -> m1_331  [color=green, key=2, style=dotted];
m1_46 -> m1_36  [color=green, key=2, style=dotted];
m1_46 -> m1_50  [color=green, key=2, style=dotted];
m1_46 -> m1_51  [color=green, key=2, style=dotted];
m1_46 -> m1_52  [color=green, key=2, style=dotted];
m1_46 -> m1_33  [color=green, key=2, style=dotted];
m1_46 -> m1_53  [color=green, key=2, style=dotted];
m1_46 -> m1_54  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_57  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_65  [color=green, key=1, label="lambda expression", style=dashed];
m1_47 -> m1_45  [color=blue, key=0, style=bold];
m1_47 -> m1_40  [color=blue, key=0, style=bold];
m1_52 -> m1_53  [key=0, style=solid];
m1_54 -> m1_52  [color=blue, key=0, style=bold];
m1_54 -> m1_55  [key=0, style=solid];
m1_62 -> m1_60  [color=blue, key=0, style=bold];
m1_62 -> m1_63  [color=green, key=0, style=solid];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_55  [key=2, style=dotted];
m1_73 -> m1_71  [color=blue, key=0, style=bold];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_58  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_89 -> m1_63  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_89 -> m1_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_90 -> m1_91  [key=0, style=solid];
m1_90 -> m1_63  [key=2, style=dotted];
m1_90 -> m1_58  [color=green, key=1, label="System.StringComparer", style=dashed];
m1_90 -> m1_55  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_91 -> m1_89  [color=blue, key=0, style=bold];
m1_91 -> m1_58  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m1_97 -> m1_98  [key=0, style=solid];
m1_98 -> m1_99  [key=0, style=solid];
m1_98 -> m1_100  [key=2, style=dotted];
m1_99 -> m1_97  [color=blue, key=0, style=bold];
m1_106 -> m1_107  [key=0, style=solid];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_109  [key=2, style=dotted];
m1_108 -> m1_106  [color=blue, key=0, style=bold];
m1_116 -> m1_117  [key=0, style=solid];
m1_117 -> m1_118  [key=0, style=solid];
m1_117 -> m1_109  [key=2, style=dotted];
m1_118 -> m1_116  [color=blue, key=0, style=bold];
m1_124 -> m1_125  [key=0, style=solid];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_109  [key=2, style=dotted];
m1_126 -> m1_124  [color=blue, key=0, style=bold];
m1_132 -> m1_133  [key=0, style=solid];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_109  [key=2, style=dotted];
m1_134 -> m1_132  [color=blue, key=0, style=bold];
m1_141 -> m1_142  [key=0, style=solid];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_140  [key=2, style=dotted];
m1_143 -> m1_141  [color=blue, key=0, style=bold];
m1_148 -> m1_149  [key=0, style=solid];
m1_149 -> m1_150  [key=0, style=solid];
m1_149 -> m1_151  [key=2, style=dotted];
m1_150 -> m1_148  [color=blue, key=0, style=bold];
m1_156 -> m1_157  [key=0, style=solid];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_159  [key=2, style=dotted];
m1_158 -> m1_156  [color=blue, key=0, style=bold];
m1_164 -> m1_165  [key=0, style=solid];
m1_165 -> m1_166  [key=0, style=solid];
m1_165 -> m1_159  [key=2, style=dotted];
m1_166 -> m1_164  [color=blue, key=0, style=bold];
m1_174 -> m1_175  [key=0, style=solid];
m1_177 -> m1_178  [key=0, style=solid];
m1_177 -> m1_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_177 -> m1_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_175 -> m1_176  [key=0, style=solid];
m1_175 -> m1_140  [key=2, style=dotted];
m1_176 -> m1_174  [color=blue, key=0, style=bold];
m1_178 -> m1_179  [key=0, style=solid];
m1_178 -> m1_180  [key=2, style=dotted];
m1_178 -> m1_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_182 -> m1_183  [key=0, style=solid];
m1_182 -> m1_184  [key=2, style=dotted];
m1_182 -> m1_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_186 -> m1_187  [key=0, style=solid];
m1_186 -> m1_188  [key=2, style=dotted];
m1_179 -> m1_177  [color=blue, key=0, style=bold];
m1_181 -> m1_182  [key=0, style=solid];
m1_183 -> m1_181  [color=blue, key=0, style=bold];
m1_185 -> m1_186  [key=0, style=solid];
m1_187 -> m1_185  [color=blue, key=0, style=bold];
m1_195 -> m1_196  [key=0, style=solid];
m1_196 -> m1_197  [key=0, style=solid];
m1_196 -> m1_198  [key=2, style=dotted];
m1_197 -> m1_195  [color=blue, key=0, style=bold];
m1_205 -> m1_206  [key=0, style=solid];
m1_206 -> m1_207  [key=0, style=solid];
m1_206 -> m1_204  [key=2, style=dotted];
m1_207 -> m1_205  [color=blue, key=0, style=bold];
m1_214 -> m1_215  [key=0, style=solid];
m1_215 -> m1_216  [key=0, style=solid];
m1_215 -> m1_204  [key=2, style=dotted];
m1_216 -> m1_214  [color=blue, key=0, style=bold];
m1_222 -> m1_223  [key=0, style=solid];
m1_223 -> m1_224  [key=0, style=solid];
m1_223 -> m1_225  [key=2, style=dotted];
m1_224 -> m1_222  [color=blue, key=0, style=bold];
m1_231 -> m1_232  [key=0, style=solid];
m1_232 -> m1_233  [key=0, style=solid];
m1_232 -> m1_6  [key=2, style=dotted];
m1_233 -> m1_231  [color=blue, key=0, style=bold];
m1_240 -> m1_241  [key=0, style=solid];
m1_241 -> m1_242  [key=0, style=solid];
m1_241 -> m1_6  [key=2, style=dotted];
m1_242 -> m1_240  [color=blue, key=0, style=bold];
m1_248 -> m1_249  [key=0, style=solid];
m1_249 -> m1_250  [key=0, style=solid];
m1_249 -> m1_6  [key=2, style=dotted];
m1_250 -> m1_248  [color=blue, key=0, style=bold];
m1_256 -> m1_257  [key=0, style=solid];
m1_257 -> m1_258  [key=0, style=solid];
m1_257 -> m1_6  [key=2, style=dotted];
m1_258 -> m1_256  [color=blue, key=0, style=bold];
m1_264 -> m1_265  [key=0, style=solid];
m1_265 -> m1_266  [key=0, style=solid];
m1_265 -> m1_6  [key=2, style=dotted];
m1_266 -> m1_264  [color=blue, key=0, style=bold];
m1_272 -> m1_273  [key=0, style=solid];
m1_273 -> m1_274  [key=0, style=solid];
m1_273 -> m1_275  [key=2, style=dotted];
m1_274 -> m1_272  [color=blue, key=0, style=bold];
m1_280 -> m1_281  [key=0, style=solid];
m1_281 -> m1_282  [key=0, style=solid];
m1_281 -> m1_6  [key=2, style=dotted];
m1_282 -> m1_280  [color=blue, key=0, style=bold];
m1_288 -> m1_289  [key=0, style=solid];
m1_289 -> m1_290  [key=0, style=solid];
m1_289 -> m1_291  [key=2, style=dotted];
m1_290 -> m1_288  [color=blue, key=0, style=bold];
m1_296 -> m1_297  [key=0, style=solid];
m1_297 -> m1_298  [key=0, style=solid];
m1_297 -> m1_299  [key=2, style=dotted];
m1_298 -> m1_296  [color=blue, key=0, style=bold];
m1_304 -> m1_305  [key=0, style=solid];
m1_305 -> m1_306  [key=0, style=solid];
m1_305 -> m1_299  [key=2, style=dotted];
m1_306 -> m1_304  [color=blue, key=0, style=bold];
m1_314 -> m1_315  [key=0, style=solid];
m1_315 -> m1_316  [key=0, style=solid];
m1_315 -> m1_317  [key=2, style=dotted];
m1_316 -> m1_314  [color=blue, key=0, style=bold];
m1_324 -> m1_325  [key=0, style=solid];
m1_325 -> m1_326  [key=0, style=solid];
m1_325 -> m1_317  [key=2, style=dotted];
m1_326 -> m1_324  [color=blue, key=0, style=bold];
m1_332 -> m1_333  [key=0, style=solid];
m1_333 -> m1_334  [key=0, style=solid];
m1_333 -> m1_9  [key=2, style=dotted];
m1_333 -> m1_10  [key=2, style=dotted];
m1_333 -> m1_335  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_334 -> m1_332  [color=blue, key=0, style=bold];
m1_335 -> m1_336  [key=0, style=solid];
m1_336 -> m1_337  [key=0, style=solid];
m1_336 -> m1_338  [key=2, style=dotted];
m1_337 -> m1_335  [color=blue, key=0, style=bold];
m1_343 -> m1_344  [key=0, style=solid];
m1_344 -> m1_345  [key=0, style=solid];
m1_344 -> m1_9  [key=2, style=dotted];
m1_344 -> m1_10  [key=2, style=dotted];
m1_344 -> m1_346  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_345 -> m1_343  [color=blue, key=0, style=bold];
m1_346 -> m1_347  [key=0, style=solid];
m1_347 -> m1_348  [key=0, style=solid];
m1_347 -> m1_349  [key=2, style=dotted];
m1_348 -> m1_346  [color=blue, key=0, style=bold];
m1_354 -> m1_355  [key=0, style=solid];
m1_355 -> m1_356  [key=0, style=solid];
m1_355 -> m1_9  [key=2, style=dotted];
m1_355 -> m1_10  [key=2, style=dotted];
m1_355 -> m1_357  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_356 -> m1_354  [color=blue, key=0, style=bold];
m1_357 -> m1_358  [key=0, style=solid];
m1_358 -> m1_359  [key=0, style=solid];
m1_358 -> m1_360  [key=2, style=dotted];
m1_359 -> m1_357  [color=blue, key=0, style=bold];
m1_375 -> m1_376  [key=0, style=solid];
m1_370 -> m1_371  [key=0, style=solid];
m1_374 -> m1_375  [key=0, style=solid];
m1_371 -> m1_372  [key=0, style=solid];
m1_371 -> m1_373  [key=2, style=dotted];
m1_372 -> m1_370  [color=blue, key=0, style=bold];
m1_376 -> m1_374  [color=blue, key=0, style=bold];
m1_385 -> m1_386  [key=0, style=solid];
m1_381 -> m1_382  [key=0, style=solid];
m1_384 -> m1_385  [key=0, style=solid];
m1_382 -> m1_383  [key=0, style=solid];
m1_382 -> m1_6  [key=2, style=dotted];
m1_383 -> m1_381  [color=blue, key=0, style=bold];
m1_386 -> m1_384  [color=blue, key=0, style=bold];
m1_391 -> m1_392  [key=0, style=solid];
m1_392 -> m1_393  [key=0, style=solid];
m1_392 -> m1_394  [key=2, style=dotted];
m1_393 -> m1_391  [color=blue, key=0, style=bold];
m1_407 -> m1_408  [key=0, style=solid];
m1_402 -> m1_403  [key=0, style=solid];
m1_406 -> m1_407  [key=0, style=solid];
m1_403 -> m1_404  [key=0, style=solid];
m1_403 -> m1_405  [key=2, style=dotted];
m1_404 -> m1_402  [color=blue, key=0, style=bold];
m1_408 -> m1_406  [color=blue, key=0, style=bold];
m1_413 -> m1_414  [key=0, style=solid];
m1_414 -> m1_415  [key=0, style=solid];
m1_414 -> m1_275  [key=2, style=dotted];
m1_415 -> m1_413  [color=blue, key=0, style=bold];
m1_420 -> m1_421  [key=0, style=solid];
m1_421 -> m1_422  [key=0, style=solid];
m1_421 -> m1_423  [key=2, style=dotted];
m1_422 -> m1_420  [color=blue, key=0, style=bold];
m1_429 -> m1_430  [key=0, style=solid];
m1_430 -> m1_431  [key=0, style=solid];
m1_430 -> m1_6  [key=2, style=dotted];
m1_431 -> m1_429  [color=blue, key=0, style=bold];
m1_443 -> m1_444  [key=0, style=solid];
m1_438 -> m1_439  [key=0, style=solid];
m1_442 -> m1_443  [key=0, style=solid];
m1_439 -> m1_440  [key=0, style=solid];
m1_439 -> m1_441  [key=2, style=dotted];
m1_440 -> m1_438  [color=blue, key=0, style=bold];
m1_444 -> m1_442  [color=blue, key=0, style=bold];
m1_65 -> m1_66  [color=green, key=0, style=solid];
m1_65 -> m1_69  [key=2, style=dotted];
m1_65 -> m1_70  [key=2, style=dotted];
m1_65 -> m1_67  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_66 -> m1_67  [color=green, key=0, style=solid];
m1_66 -> m1_9  [key=2, style=dotted];
m1_66 -> m1_10  [key=2, style=dotted];
m1_66 -> m1_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_67 -> m1_65  [color=blue, key=0, style=bold];
m1_67 -> m1_68  [key=0, style=solid];
m1_67 -> m1_36  [key=2, style=dotted];
m1_67 -> m1_12  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_9  [key=2, style=dotted];
m1_5 -> m1_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_0  [color=blue, key=0, style=bold];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_4 -> m1_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_4 -> m1_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_4 -> m1_11  [key=2, style=dotted];
m1_4 -> m1_184  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types", style=bold];
m1_11 -> m1_12  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_17 -> m1_15  [color=blue, key=0, style=bold];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_9  [key=2, style=dotted];
m1_17 -> m1_10  [key=2, style=dotted];
m1_17 -> m1_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_377 -> m1_378  [key=0, style=solid];
m1_377 -> m1_379  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_377 -> m1_385  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_378 -> m1_379  [key=0, style=solid];
m1_378 -> m1_9  [key=2, style=dotted];
m1_378 -> m1_10  [key=2, style=dotted];
m1_378 -> m1_381  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_379 -> m1_380  [key=0, style=solid];
m1_379 -> m1_368  [key=2, style=dotted];
m1_379 -> m1_369  [key=2, style=dotted];
m1_379 -> m1_384  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_380 -> m1_377  [color=blue, key=0, style=bold];
m1_40 -> m1_46  [color=green, key=0, style=solid];
m1_40 -> m1_58  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m1_40 -> m1_63  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_40 -> m1_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_395 -> m1_396  [key=0, style=solid];
m1_395 -> m1_397  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m1_395 -> m1_398  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_395 -> m1_407  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_395 -> m1_399  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m1_396 -> m1_397  [key=0, style=solid];
m1_396 -> m1_9  [key=2, style=dotted];
m1_396 -> m1_10  [key=2, style=dotted];
m1_396 -> m1_402  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_396 -> m1_398  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_396 -> m1_400  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_397 -> m1_398  [key=0, style=solid];
m1_397 -> m1_399  [key=0, style=solid];
m1_398 -> m1_401  [key=0, style=solid];
m1_398 -> m1_368  [key=2, style=dotted];
m1_398 -> m1_369  [key=2, style=dotted];
m1_398 -> m1_406  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_399 -> m1_400  [key=0, style=solid];
m1_399 -> m1_401  [key=0, style=solid];
m1_400 -> m1_401  [key=0, style=solid];
m1_400 -> m1_368  [key=2, style=dotted];
m1_400 -> m1_331  [key=2, style=dotted];
m1_401 -> m1_395  [color=blue, key=0, style=bold];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_9  [key=2, style=dotted];
m1_49 -> m1_10  [key=2, style=dotted];
m1_49 -> m1_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_36  [key=2, style=dotted];
m1_50 -> m1_12  [key=2, style=dotted];
m1_51 -> m1_48  [color=blue, key=0, style=bold];
m1_119 -> m1_120  [key=0, style=solid];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_115  [key=2, style=dotted];
m1_120 -> m1_70  [key=2, style=dotted];
m1_120 -> m1_122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_9  [key=2, style=dotted];
m1_121 -> m1_10  [key=2, style=dotted];
m1_121 -> m1_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_122 -> m1_123  [key=0, style=solid];
m1_122 -> m1_36  [key=2, style=dotted];
m1_122 -> m1_12  [key=2, style=dotted];
m1_123 -> m1_119  [color=blue, key=0, style=bold];
m1_267 -> m1_268  [key=0, style=solid];
m1_268 -> m1_269  [key=0, style=solid];
m1_268 -> m1_213  [key=2, style=dotted];
m1_268 -> m1_270  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_269 -> m1_270  [key=0, style=solid];
m1_269 -> m1_9  [key=2, style=dotted];
m1_269 -> m1_10  [key=2, style=dotted];
m1_269 -> m1_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_270 -> m1_271  [key=0, style=solid];
m1_270 -> m1_36  [key=2, style=dotted];
m1_270 -> m1_12  [key=2, style=dotted];
m1_271 -> m1_267  [color=blue, key=0, style=bold];
m1_226 -> m1_227  [key=0, style=solid];
m1_227 -> m1_228  [key=0, style=solid];
m1_227 -> m1_79  [key=2, style=dotted];
m1_227 -> m1_70  [key=2, style=dotted];
m1_227 -> m1_229  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_228 -> m1_229  [key=0, style=solid];
m1_228 -> m1_9  [key=2, style=dotted];
m1_228 -> m1_10  [key=2, style=dotted];
m1_228 -> m1_231  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_229 -> m1_230  [key=0, style=solid];
m1_229 -> m1_36  [key=2, style=dotted];
m1_229 -> m1_12  [key=2, style=dotted];
m1_230 -> m1_226  [color=blue, key=0, style=bold];
m1_217 -> m1_218  [key=0, style=solid];
m1_218 -> m1_219  [key=0, style=solid];
m1_218 -> m1_213  [key=2, style=dotted];
m1_218 -> m1_70  [key=2, style=dotted];
m1_218 -> m1_220  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_219 -> m1_220  [key=0, style=solid];
m1_219 -> m1_9  [key=2, style=dotted];
m1_219 -> m1_10  [key=2, style=dotted];
m1_219 -> m1_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_220 -> m1_221  [key=0, style=solid];
m1_220 -> m1_36  [key=2, style=dotted];
m1_220 -> m1_12  [key=2, style=dotted];
m1_221 -> m1_217  [color=blue, key=0, style=bold];
m1_208 -> m1_209  [key=0, style=solid];
m1_209 -> m1_210  [key=0, style=solid];
m1_209 -> m1_213  [key=2, style=dotted];
m1_209 -> m1_70  [key=2, style=dotted];
m1_209 -> m1_211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_210 -> m1_211  [key=0, style=solid];
m1_210 -> m1_9  [key=2, style=dotted];
m1_210 -> m1_10  [key=2, style=dotted];
m1_210 -> m1_214  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_211 -> m1_212  [key=0, style=solid];
m1_211 -> m1_36  [key=2, style=dotted];
m1_211 -> m1_12  [key=2, style=dotted];
m1_212 -> m1_208  [color=blue, key=0, style=bold];
m1_127 -> m1_128  [key=0, style=solid];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_115  [key=2, style=dotted];
m1_128 -> m1_70  [key=2, style=dotted];
m1_128 -> m1_130  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_9  [key=2, style=dotted];
m1_129 -> m1_10  [key=2, style=dotted];
m1_129 -> m1_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_36  [key=2, style=dotted];
m1_130 -> m1_12  [key=2, style=dotted];
m1_131 -> m1_127  [color=blue, key=0, style=bold];
m1_409 -> m1_410  [key=0, style=solid];
m1_409 -> m1_411  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m1_410 -> m1_411  [key=0, style=solid];
m1_410 -> m1_9  [key=2, style=dotted];
m1_410 -> m1_10  [key=2, style=dotted];
m1_410 -> m1_413  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_411 -> m1_412  [key=0, style=solid];
m1_411 -> m1_105  [key=2, style=dotted];
m1_412 -> m1_409  [color=blue, key=0, style=bold];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_79  [key=2, style=dotted];
m1_85 -> m1_70  [key=2, style=dotted];
m1_85 -> m1_87  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_85 -> m1_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_85 -> m1_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_85 -> m1_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_85 -> m1_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_9  [key=2, style=dotted];
m1_86 -> m1_10  [key=2, style=dotted];
m1_86 -> m1_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_86 -> m1_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_86 -> m1_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_87 -> m1_88  [key=0, style=solid];
m1_87 -> m1_36  [key=2, style=dotted];
m1_87 -> m1_12  [key=2, style=dotted];
m1_87 -> m1_42  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_88 -> m1_84  [color=blue, key=0, style=bold];
m1_88 -> m1_42  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m1_64 -> m1_65  [key=0, style=solid];
m1_135 -> m1_136  [key=0, style=solid];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_140  [key=2, style=dotted];
m1_136 -> m1_138  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_9  [key=2, style=dotted];
m1_137 -> m1_10  [key=2, style=dotted];
m1_137 -> m1_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_105  [key=2, style=dotted];
m1_139 -> m1_135  [color=blue, key=0, style=bold];
m1_318 -> m1_319  [key=0, style=solid];
m1_318 -> m1_321  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_318 -> m1_322  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_319 -> m1_320  [key=0, style=solid];
m1_319 -> m1_9  [key=2, style=dotted];
m1_319 -> m1_10  [key=2, style=dotted];
m1_319 -> m1_324  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_319 -> m1_321  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_319 -> m1_322  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_321 -> m1_322  [key=0, style=solid];
m1_321 -> m1_105  [key=2, style=dotted];
m1_322 -> m1_323  [key=0, style=solid];
m1_322 -> m1_313  [key=2, style=dotted];
m1_322 -> m1_105  [key=2, style=dotted];
m1_320 -> m1_321  [key=0, style=solid];
m1_320 -> m1_322  [key=0, style=solid];
m1_323 -> m1_318  [color=blue, key=0, style=bold];
m1_424 -> m1_425  [key=0, style=solid];
m1_425 -> m1_426  [key=0, style=solid];
m1_425 -> m1_6  [key=2, style=dotted];
m1_425 -> m1_427  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_426 -> m1_427  [key=0, style=solid];
m1_426 -> m1_9  [key=2, style=dotted];
m1_426 -> m1_10  [key=2, style=dotted];
m1_426 -> m1_429  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_427 -> m1_428  [key=0, style=solid];
m1_427 -> m1_105  [key=2, style=dotted];
m1_428 -> m1_424  [color=blue, key=0, style=bold];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_161 -> m1_162  [key=0, style=solid];
m1_161 -> m1_9  [key=2, style=dotted];
m1_161 -> m1_10  [key=2, style=dotted];
m1_161 -> m1_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_162 -> m1_163  [key=0, style=solid];
m1_162 -> m1_105  [key=2, style=dotted];
m1_163 -> m1_160  [color=blue, key=0, style=bold];
m1_292 -> m1_293  [key=0, style=solid];
m1_292 -> m1_294  [color=darkseagreen4, key=1, label="int?", style=dashed];
m1_293 -> m1_294  [key=0, style=solid];
m1_293 -> m1_9  [key=2, style=dotted];
m1_293 -> m1_10  [key=2, style=dotted];
m1_293 -> m1_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_294 -> m1_295  [key=0, style=solid];
m1_294 -> m1_105  [key=2, style=dotted];
m1_295 -> m1_292  [color=blue, key=0, style=bold];
m1_234 -> m1_235  [key=0, style=solid];
m1_235 -> m1_236  [key=0, style=solid];
m1_235 -> m1_239  [key=2, style=dotted];
m1_235 -> m1_237  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_236 -> m1_237  [key=0, style=solid];
m1_236 -> m1_9  [key=2, style=dotted];
m1_236 -> m1_10  [key=2, style=dotted];
m1_236 -> m1_240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_237 -> m1_238  [key=0, style=solid];
m1_237 -> m1_36  [key=2, style=dotted];
m1_237 -> m1_12  [key=2, style=dotted];
m1_238 -> m1_234  [color=blue, key=0, style=bold];
m1_199 -> m1_200  [key=0, style=solid];
m1_200 -> m1_201  [key=0, style=solid];
m1_200 -> m1_204  [key=2, style=dotted];
m1_200 -> m1_202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_201 -> m1_202  [key=0, style=solid];
m1_201 -> m1_9  [key=2, style=dotted];
m1_201 -> m1_10  [key=2, style=dotted];
m1_201 -> m1_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_202 -> m1_203  [key=0, style=solid];
m1_202 -> m1_105  [key=2, style=dotted];
m1_203 -> m1_199  [color=blue, key=0, style=bold];
m1_283 -> m1_284  [key=0, style=solid];
m1_284 -> m1_285  [key=0, style=solid];
m1_284 -> m1_79  [key=2, style=dotted];
m1_284 -> m1_286  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_285 -> m1_286  [key=0, style=solid];
m1_285 -> m1_9  [key=2, style=dotted];
m1_285 -> m1_10  [key=2, style=dotted];
m1_285 -> m1_288  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_286 -> m1_287  [key=0, style=solid];
m1_286 -> m1_36  [key=2, style=dotted];
m1_286 -> m1_12  [key=2, style=dotted];
m1_287 -> m1_283  [color=blue, key=0, style=bold];
m1_101 -> m1_102  [key=0, style=solid];
m1_101 -> m1_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_9  [key=2, style=dotted];
m1_102 -> m1_10  [key=2, style=dotted];
m1_102 -> m1_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_103 -> m1_104  [key=0, style=solid];
m1_103 -> m1_105  [key=2, style=dotted];
m1_103 -> m1_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m1_104 -> m1_101  [color=blue, key=0, style=bold];
m1_445 -> m1_446  [key=0, style=solid];
m1_445 -> m1_447  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeImmutableOptions", style=dashed];
m1_446 -> m1_447  [key=0, style=solid];
m1_446 -> m1_449  [key=2, style=dotted];
m1_446 -> m1_10  [key=2, style=dotted];
m1_447 -> m1_448  [key=0, style=solid];
m1_447 -> m1_105  [key=2, style=dotted];
m1_448 -> m1_445  [color=blue, key=0, style=bold];
m1_276 -> m1_277  [key=0, style=solid];
m1_276 -> m1_278  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_277 -> m1_278  [key=0, style=solid];
m1_277 -> m1_9  [key=2, style=dotted];
m1_277 -> m1_10  [key=2, style=dotted];
m1_277 -> m1_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_278 -> m1_279  [key=0, style=solid];
m1_278 -> m1_105  [key=2, style=dotted];
m1_279 -> m1_276  [color=blue, key=0, style=bold];
m1_339 -> m1_340  [key=0, style=solid];
m1_340 -> m1_341  [key=0, style=solid];
m1_341 -> m1_342  [key=0, style=solid];
m1_341 -> m1_331  [key=2, style=dotted];
m1_342 -> m1_339  [color=blue, key=0, style=bold];
m1_189 -> m1_190  [key=0, style=solid];
m1_190 -> m1_191  [key=0, style=solid];
m1_190 -> m1_194  [key=2, style=dotted];
m1_190 -> m1_70  [key=2, style=dotted];
m1_190 -> m1_192  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_191 -> m1_192  [key=0, style=solid];
m1_191 -> m1_9  [key=2, style=dotted];
m1_191 -> m1_10  [key=2, style=dotted];
m1_191 -> m1_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_192 -> m1_193  [key=0, style=solid];
m1_192 -> m1_36  [key=2, style=dotted];
m1_192 -> m1_12  [key=2, style=dotted];
m1_193 -> m1_189  [color=blue, key=0, style=bold];
m1_450 -> m1_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m1_451 -> m1_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_451 -> m1_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_452 -> m1_375  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_453 -> m1_385  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_454 -> m1_407  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_455 -> m1_443  [color=darkseagreen4, key=1, label=int, style=dashed];
}
