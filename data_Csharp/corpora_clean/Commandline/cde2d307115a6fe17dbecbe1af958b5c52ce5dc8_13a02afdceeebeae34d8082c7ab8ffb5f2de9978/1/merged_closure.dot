digraph  {
n44 [label=specs, span=""];
n45 [label=result, span=""];
n46 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
n47 [label=specs, span=""];
n48 [label=result, span=""];
n49 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
n0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
n1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20"];
n2 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(string), TargetType.Scalar),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<int>), TargetType.Sequence)\r\n                }", span="21-25"];
n6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
n4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34"];
n3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31"];
n7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
n8 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n9 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n10 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
n17 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)", span="30-30"];
n11 [cluster="CommandLine.Core.Token.Name(string)", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
n12 [cluster="CommandLine.Core.Token.Value(string)", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
n13 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
n16 [cluster="lambda expression", label="Entry lambda expression", span="30-30"];
n21 [cluster="lambda expression", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34"];
n5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
n14 [cluster="Unk.All", label="Entry Unk.All", span=""];
n15 [cluster="Unk.True", label="Entry Unk.True", span=""];
n20 [cluster="lambda expression", label="Entry lambda expression", span="34-34"];
n18 [cluster="lambda expression", label="Exit lambda expression", span="30-30"];
n19 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="34-34"];
n23 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n24 [cluster="lambda expression", label="Entry lambda expression", span="34-34"];
n25 [cluster="lambda expression", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34"];
n26 [cluster="lambda expression", label="Exit lambda expression", span="34-34"];
n27 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
n28 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
n29 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
n30 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="43-46"];
n31 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(string), TargetType.Scalar),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<int>), TargetType.Sequence)\r\n                }", span="47-51"];
n33 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="60-60"];
n35 [cluster="lambda expression", label="Entry lambda expression", span="56-56"];
n39 [cluster="lambda expression", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="60-60"];
n34 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
n38 [cluster="lambda expression", label="Entry lambda expression", span="60-60"];
n37 [cluster="lambda expression", label="Exit lambda expression", span="56-56"];
n40 [cluster="lambda expression", label="Exit lambda expression", span="60-60"];
n41 [cluster="lambda expression", label="Entry lambda expression", span="60-60"];
n42 [cluster="lambda expression", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="60-60"];
n43 [cluster="lambda expression", label="Exit lambda expression", span="60-60"];
n44 -> n17  [color=darkseagreen4, key=1, label=specs, style=dashed];
n45 -> n21  [color=darkseagreen4, key=1, label=result, style=dashed];
n46 -> n25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n48 -> n39  [color=darkseagreen4, key=1, label=result, style=dashed];
n49 -> n42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
n2 -> n17  [color=darkseagreen4, key=1, label=specs, style=dashed];
n4 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n21  [color=darkseagreen4, key=1, label=result, style=dashed];
n21 -> n24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n21 -> n25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n25 -> n25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n30 -> n33  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
n33 -> n38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n39 -> n41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n39 -> n42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n42 -> n42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
}
