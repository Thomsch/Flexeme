digraph  {
n458 [label=fakeOptions, span=""];
n459 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n460 [label=int, span=""];
n461 [label=int, span=""];
n462 [label=int, span=""];
n463 [label=int, span=""];
n0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n1 [label="var fakeOptions = new FakeOptions()", span="21-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0];
n2 [label="var expectedResult = new NotParsed<FakeOptions>(\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-23", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0];
n6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
n3 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0];
n14 [label=fakeOptions, span="27-27", cluster="lambda expression", color=red, community=0];
n7 [label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142", cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n8 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="357-357", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
n4 [label="Assert.True(expectedResult.Equals(result))", span="33-33", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0];
n9 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n10 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n13 [label="Entry lambda expression", span="27-27", cluster="lambda expression"];
n5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n11 [label="Entry CommandLine.NotParsed<T>.Equals(object)", span="161-161", cluster="CommandLine.NotParsed<T>.Equals(object)"];
n12 [label="Entry Unk.True", span="", cluster="Unk.True"];
n15 [label="Exit lambda expression", span="27-27", cluster="lambda expression"];
n16 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n17 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=red, community=0];
n18 [label="Assert.Equal(expected, result.Value.LongValue)", span="54-54", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=red, community=0];
n21 [label="Entry lambda expression", span="48-48", cluster="lambda expression"];
n19 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n22 [label="new FakeOptions()", span="48-48", cluster="lambda expression", color=red, community=0];
n23 [label="Exit lambda expression", span="48-48", cluster="lambda expression"];
n24 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n25 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", color=red, community=0];
n26 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", color=red, community=0];
n28 [label="Entry lambda expression", span="71-71", cluster="lambda expression"];
n27 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n29 [label="new FakeOptionsWithDouble()", span="71-71", cluster="lambda expression", color=red, community=0];
n30 [label="Exit lambda expression", span="71-71", cluster="lambda expression"];
n31 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()"];
n32 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n33 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=red, community=0];
n34 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n37 [label="Entry lambda expression", span="95-95", cluster="lambda expression"];
n35 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n36 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
n38 [label="new FakeOptionsWithSequence()", span="95-95", cluster="lambda expression", color=red, community=0];
n39 [label="Exit lambda expression", span="95-95", cluster="lambda expression"];
n40 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()"];
n41 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n42 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n43 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n45 [label="Entry lambda expression", span="117-117", cluster="lambda expression"];
n44 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n46 [label="new FakeOptions()", span="117-117", cluster="lambda expression"];
n47 [label="Exit lambda expression", span="117-117", cluster="lambda expression"];
n48 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n49 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n50 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n52 [label="Entry lambda expression", span="140-140", cluster="lambda expression"];
n51 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n53 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140", cluster="lambda expression"];
n54 [label="Exit lambda expression", span="140-140", cluster="lambda expression"];
n55 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()"];
n56 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n57 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n58 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n60 [label="Entry lambda expression", span="162-162", cluster="lambda expression"];
n59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n61 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162", cluster="lambda expression"];
n62 [label="Exit lambda expression", span="162-162", cluster="lambda expression"];
n63 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()"];
n64 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n65 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n66 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
n70 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
n67 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Errors))", span="187-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n71 [label="Entry lambda expression", span="181-181", cluster="lambda expression"];
n68 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n72 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181", cluster="lambda expression"];
n73 [label="Exit lambda expression", span="181-181", cluster="lambda expression"];
n74 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n75 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n76 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n79 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
n77 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>)result).Errors))", span="206-206", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n80 [label="Entry lambda expression", span="200-200", cluster="lambda expression"];
n78 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n81 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200", cluster="lambda expression"];
n82 [label="Exit lambda expression", span="200-200", cluster="lambda expression"];
n83 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()"];
n84 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n85 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n86 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n87 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraint>)result).Errors))", span="225-225", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n89 [label="Entry lambda expression", span="219-219", cluster="lambda expression"];
n88 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n90 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="219-219", cluster="lambda expression"];
n91 [label="Exit lambda expression", span="219-219", cluster="lambda expression"];
n92 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n93 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="234-234", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n94 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n95 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>)result).Errors))", span="244-244", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n97 [label="Entry lambda expression", span="238-238", cluster="lambda expression"];
n96 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n98 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238", cluster="lambda expression"];
n99 [label="Exit lambda expression", span="238-238", cluster="lambda expression"];
n100 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()"];
n101 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n102 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n103 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="268-268", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n106 [label="Entry lambda expression", span="262-262", cluster="lambda expression"];
n104 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n105 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
n107 [label="new FakeOptionsWithEnum()", span="262-262", cluster="lambda expression"];
n108 [label="Exit lambda expression", span="262-262", cluster="lambda expression"];
n109 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()"];
n110 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n111 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n112 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n115 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="313-313", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
n113 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="287-287", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n116 [label="Entry lambda expression", span="281-281", cluster="lambda expression"];
n114 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n117 [label="new FakeOptionsWithEnum()", span="281-281", cluster="lambda expression"];
n118 [label="Exit lambda expression", span="281-281", cluster="lambda expression"];
n119 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n120 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n121 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n122 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="306-306", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n124 [label="Entry lambda expression", span="300-300", cluster="lambda expression"];
n123 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n125 [label="new FakeOptionsWithEnum()", span="300-300", cluster="lambda expression"];
n126 [label="Exit lambda expression", span="300-300", cluster="lambda expression"];
n127 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n128 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n129 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n130 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="325-325", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n132 [label="Entry lambda expression", span="319-319", cluster="lambda expression"];
n131 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n133 [label="new FakeOptionsWithEnum()", span="319-319", cluster="lambda expression"];
n134 [label="Exit lambda expression", span="319-319", cluster="lambda expression"];
n135 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n136 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n137 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n140 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()"];
n138 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="350-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n141 [label="Entry lambda expression", span="344-344", cluster="lambda expression"];
n139 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n142 [label="new FakeOptionsWithValues()", span="344-344", cluster="lambda expression"];
n143 [label="Exit lambda expression", span="344-344", cluster="lambda expression"];
n144 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n145 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n146 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n148 [label="Entry lambda expression", span="367-367", cluster="lambda expression"];
n147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n149 [label="new FakeOptionsWithSequenceWithoutRange()", span="367-367", cluster="lambda expression"];
n150 [label="Exit lambda expression", span="367-367", cluster="lambda expression"];
n151 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()"];
n152 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n153 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n154 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="395-395", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n156 [label="Entry lambda expression", span="389-389", cluster="lambda expression"];
n155 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n157 [label="new FakeOptionsWithSequenceAndSeparator()", span="389-389", cluster="lambda expression"];
n158 [label="Exit lambda expression", span="389-389", cluster="lambda expression"];
n159 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()"];
n160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n161 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n162 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="417-417", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n164 [label="Entry lambda expression", span="411-411", cluster="lambda expression"];
n163 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n165 [label="new FakeOptionsWithSequenceAndSeparator()", span="411-411", cluster="lambda expression"];
n166 [label="Exit lambda expression", span="411-411", cluster="lambda expression"];
n167 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n168 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n169 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n171 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="449-449", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n170 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n173 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n174 [label="Entry lambda expression", span="440-440", cluster="lambda expression"];
n177 [label="Entry lambda expression", span="441-443", cluster="lambda expression"];
n172 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n175 [label="new FakeOptionsWithValues()", span="440-440", cluster="lambda expression"];
n176 [label="Exit lambda expression", span="440-440", cluster="lambda expression"];
n178 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443", cluster="lambda expression"];
n182 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443", cluster="lambda expression"];
n186 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443", cluster="lambda expression"];
n179 [label="Exit lambda expression", span="441-443", cluster="lambda expression"];
n180 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
n181 [label="Entry lambda expression", span="443-443", cluster="lambda expression"];
n183 [label="Exit lambda expression", span="443-443", cluster="lambda expression"];
n184 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n185 [label="Entry lambda expression", span="443-443", cluster="lambda expression"];
n187 [label="Exit lambda expression", span="443-443", cluster="lambda expression"];
n188 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n189 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n190 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="458-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n191 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n194 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
n192 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSets>)result).Errors))", span="472-472", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n195 [label="Entry lambda expression", span="466-466", cluster="lambda expression"];
n193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n196 [label="new FakeOptionsWithSets()", span="466-466", cluster="lambda expression"];
n197 [label="Exit lambda expression", span="466-466", cluster="lambda expression"];
n198 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()"];
n199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n200 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="480-483", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n201 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n204 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()"];
n202 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="492-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n205 [label="Entry lambda expression", span="486-486", cluster="lambda expression"];
n203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
n206 [label="new FakeOptionWithRequiredAndSet()", span="486-486", cluster="lambda expression"];
n207 [label="Exit lambda expression", span="486-486", cluster="lambda expression"];
n208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n209 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="500-503", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n210 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="505-509", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n211 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="512-512", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n213 [label="Entry lambda expression", span="506-506", cluster="lambda expression"];
n212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n214 [label="new FakeOptionWithRequiredAndSet()", span="506-506", cluster="lambda expression"];
n215 [label="Exit lambda expression", span="506-506", cluster="lambda expression"];
n216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n217 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="519-523", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n218 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="525-529", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n221 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
n219 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequiredAndSet>)result).Errors))", span="532-532", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n222 [label="Entry lambda expression", span="526-526", cluster="lambda expression"];
n220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n223 [label="new FakeOptionWithRequiredAndSet()", span="526-526", cluster="lambda expression"];
n224 [label="Exit lambda expression", span="526-526", cluster="lambda expression"];
n225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n226 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n227 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n228 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequired>)result).Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n230 [label="Entry lambda expression", span="545-545", cluster="lambda expression"];
n229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n231 [label="new FakeOptionWithRequired()", span="545-545", cluster="lambda expression"];
n232 [label="Exit lambda expression", span="545-545", cluster="lambda expression"];
n233 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()"];
n234 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n235 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n236 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n237 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n239 [label="Entry lambda expression", span="564-564", cluster="lambda expression"];
n238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n240 [label="new FakeOptions()", span="564-564", cluster="lambda expression"];
n241 [label="Exit lambda expression", span="564-564", cluster="lambda expression"];
n242 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n243 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n244 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n247 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
n245 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="589-589", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n248 [label="Entry lambda expression", span="583-583", cluster="lambda expression"];
n246 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n249 [label="new FakeOptions()", span="583-583", cluster="lambda expression"];
n250 [label="Exit lambda expression", span="583-583", cluster="lambda expression"];
n251 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n252 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n253 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n254 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="608-608", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n256 [label="Entry lambda expression", span="602-602", cluster="lambda expression"];
n255 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n257 [label="new FakeOptions()", span="602-602", cluster="lambda expression"];
n258 [label="Exit lambda expression", span="602-602", cluster="lambda expression"];
n259 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n260 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n261 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n262 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n264 [label="Entry lambda expression", span="621-621", cluster="lambda expression"];
n263 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n265 [label="new FakeOptions()", span="621-621", cluster="lambda expression"];
n266 [label="Exit lambda expression", span="621-621", cluster="lambda expression"];
n267 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n268 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n269 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n272 [label="Entry lambda expression", span="641-641", cluster="lambda expression"];
n270 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n271 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)"];
n273 [label="new FakeOptions()", span="641-641", cluster="lambda expression"];
n274 [label="Exit lambda expression", span="641-641", cluster="lambda expression"];
n275 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n276 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n277 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n278 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithRequiredValue>)result).Errors))", span="666-666", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n280 [label="Entry lambda expression", span="660-660", cluster="lambda expression"];
n279 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n281 [label="new FakeOptionsWithRequiredValue()", span="660-660", cluster="lambda expression"];
n282 [label="Exit lambda expression", span="660-660", cluster="lambda expression"];
n283 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()"];
n284 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
n285 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
n286 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
n288 [label="Entry lambda expression", span="682-682", cluster="lambda expression"];
n287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
n289 [label="new FakeOptions()", span="682-682", cluster="lambda expression"];
n290 [label="Exit lambda expression", span="682-682", cluster="lambda expression"];
n291 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n292 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n293 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n294 [label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceMinMaxEqual>)result).Errors))", span="707-707", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n296 [label="Entry lambda expression", span="701-701", cluster="lambda expression"];
n295 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n297 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701", cluster="lambda expression"];
n298 [label="Exit lambda expression", span="701-701", cluster="lambda expression"];
n299 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()"];
n300 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
n301 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
n302 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
n304 [label="Entry lambda expression", span="723-723", cluster="lambda expression"];
n303 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
n305 [label="new FakeOptionsWithNullables()", span="723-723", cluster="lambda expression"];
n306 [label="Exit lambda expression", span="723-723", cluster="lambda expression"];
n307 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()"];
n308 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
n309 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
n310 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
n312 [label="Entry lambda expression", span="745-745", cluster="lambda expression"];
n311 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
n313 [label="new FakeOptionsWithNullables()", span="745-745", cluster="lambda expression"];
n314 [label="Exit lambda expression", span="745-745", cluster="lambda expression"];
n315 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n316 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n318 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n319 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n317 [label="result.Value.FileName != null", span="771-771", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n322 [label="Entry lambda expression", span="765-765", cluster="lambda expression"];
n320 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n321 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome"];
n323 [label="new FakeOptionsWithFSharpOption()", span="765-765", cluster="lambda expression"];
n324 [label="Exit lambda expression", span="765-765", cluster="lambda expression"];
n325 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()"];
n326 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n327 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n329 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n330 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n328 [label="result.Value.Offset != null", span="795-795", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n332 [label="Entry lambda expression", span="789-789", cluster="lambda expression"];
n331 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n333 [label="new FakeOptionsWithFSharpOption()", span="789-789", cluster="lambda expression"];
n334 [label="Exit lambda expression", span="789-789", cluster="lambda expression"];
n335 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()"];
n336 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()"];
n337 [label="Assert.Throws<ApplicationException>(test)", span="816-816", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()"];
n338 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()"];
n339 [label="Entry Unk.>", span="", cluster="Unk.>"];
n340 [label="Entry lambda expression", span="809-813", cluster="lambda expression"];
n341 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813", cluster="lambda expression"];
n342 [label="Exit lambda expression", span="809-813", cluster="lambda expression"];
n343 [label="Entry lambda expression", span="810-810", cluster="lambda expression"];
n344 [label="new FakeOptionsWithMinZero()", span="810-810", cluster="lambda expression"];
n345 [label="Exit lambda expression", span="810-810", cluster="lambda expression"];
n346 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()"];
n347 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()"];
n348 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()"];
n349 [label="Assert.Throws<ApplicationException>(test)", span="830-830", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()"];
n350 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()"];
n351 [label="Entry lambda expression", span="823-827", cluster="lambda expression"];
n352 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827", cluster="lambda expression"];
n353 [label="Exit lambda expression", span="823-827", cluster="lambda expression"];
n354 [label="Entry lambda expression", span="824-824", cluster="lambda expression"];
n355 [label="new FakeOptionsWithMaxZero()", span="824-824", cluster="lambda expression"];
n356 [label="Exit lambda expression", span="824-824", cluster="lambda expression"];
n357 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()"];
n358 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()"];
n359 [label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()"];
n360 [label="Assert.Throws<ApplicationException>(test)", span="844-844", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()"];
n361 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()"];
n362 [label="Entry lambda expression", span="837-841", cluster="lambda expression"];
n363 [label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841", cluster="lambda expression"];
n364 [label="Exit lambda expression", span="837-841", cluster="lambda expression"];
n365 [label="Entry lambda expression", span="838-838", cluster="lambda expression"];
n366 [label="new FakeOptionsWithMinMaxZero()", span="838-838", cluster="lambda expression"];
n367 [label="Exit lambda expression", span="838-838", cluster="lambda expression"];
n368 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()"];
n369 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n370 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n371 [label="type == ParserResultType.NotParsed", span="863-863", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n372 [label="((NotParsed<FakeOptionsWithNamedAndEmptySets>)result).Errors.Should().HaveCount(x => x == expected)", span="865-865", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n383 [label="x == expected", span="865-865", cluster="lambda expression"];
n373 [label="type == ParserResultType.Parsed", span="867-867", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n378 [label="Entry lambda expression", span="857-857", cluster="lambda expression"];
n374 [label="result.Should().BeOfType<Parsed<FakeOptionsWithNamedAndEmptySets>>()", span="869-869", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n375 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="853-853", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n376 [label="Entry Unk.Should", span="", cluster="Unk.Should"];
n377 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount"];
n382 [label="Entry lambda expression", span="865-865", cluster="lambda expression"];
n379 [label="new FakeOptionsWithNamedAndEmptySets()", span="857-857", cluster="lambda expression"];
n380 [label="Exit lambda expression", span="857-857", cluster="lambda expression"];
n381 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()"];
n384 [label="Exit lambda expression", span="865-865", cluster="lambda expression"];
n385 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="875-875", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
n386 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="878-882", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
n387 [label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == expected)", span="885-885", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
n393 [label="x == expected", span="885-885", cluster="lambda expression"];
n389 [label="Entry lambda expression", span="879-879", cluster="lambda expression"];
n388 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="875-875", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
n392 [label="Entry lambda expression", span="885-885", cluster="lambda expression"];
n390 [label="new FakeOptions()", span="879-879", cluster="lambda expression"];
n391 [label="Exit lambda expression", span="879-879", cluster="lambda expression"];
n394 [label="Exit lambda expression", span="885-885", cluster="lambda expression"];
n395 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="891-891", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
n396 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="894-898", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
n397 [label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="901-901", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
n399 [label="Entry lambda expression", span="895-895", cluster="lambda expression"];
n398 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="891-891", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
n400 [label="new FakeInterfaceOptions()", span="895-895", cluster="lambda expression"];
n401 [label="Exit lambda expression", span="895-895", cluster="lambda expression"];
n402 [label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2", cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()"];
n403 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="911-911", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n404 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithTwoRequiredAndSets>>(() => new FakeOptionsWithTwoRequiredAndSets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="914-918", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n405 [label="type == ParserResultType.NotParsed", span="921-921", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n406 [label="((NotParsed<FakeOptionsWithTwoRequiredAndSets>)result).Errors.Should().HaveCount(x => x == expected)", span="923-923", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n415 [label="x == expected", span="923-923", cluster="lambda expression"];
n407 [label="type == ParserResultType.Parsed", span="925-925", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n410 [label="Entry lambda expression", span="915-915", cluster="lambda expression"];
n408 [label="result.Should().BeOfType<Parsed<FakeOptionsWithTwoRequiredAndSets>>()", span="927-927", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n409 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="911-911", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n414 [label="Entry lambda expression", span="923-923", cluster="lambda expression"];
n411 [label="new FakeOptionsWithTwoRequiredAndSets()", span="915-915", cluster="lambda expression"];
n412 [label="Exit lambda expression", span="915-915", cluster="lambda expression"];
n413 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()"];
n416 [label="Exit lambda expression", span="923-923", cluster="lambda expression"];
n417 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="933-933", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
n418 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="938-942", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
n419 [label="expected.ShouldBeEquivalentTo(result.Value)", span="945-945", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
n421 [label="Entry lambda expression", span="939-939", cluster="lambda expression"];
n420 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="933-933", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)"];
n422 [label="new FakeOptionsWithRequiredValue()", span="939-939", cluster="lambda expression"];
n423 [label="Exit lambda expression", span="939-939", cluster="lambda expression"];
n424 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="952-952", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
n425 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="957-961", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
n426 [label="expected.ShouldBeEquivalentTo(result.Value)", span="964-964", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
n428 [label="Entry lambda expression", span="958-958", cluster="lambda expression"];
n427 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="952-952", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)"];
n429 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="958-958", cluster="lambda expression"];
n430 [label="Exit lambda expression", span="958-958", cluster="lambda expression"];
n431 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()"];
n432 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="970-970", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n433 [label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="973-973", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n434 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="976-980", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n435 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="983-983", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n437 [label="Entry lambda expression", span="977-977", cluster="lambda expression"];
n436 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="970-970", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n438 [label="new FakeOptions()", span="977-977", cluster="lambda expression"];
n439 [label="Exit lambda expression", span="977-977", cluster="lambda expression"];
n440 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="995-995", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n441 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithTwoRequired>>(() => new FakeOptionWithTwoRequired()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="998-1002", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n443 [label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="1006-1006", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n451 [label="x == expected", span="1006-1006", cluster="lambda expression"];
n442 [label="var errors = ((NotParsed<FakeOptionWithTwoRequired>)result).Errors", span="1005-1005", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n446 [label="Entry lambda expression", span="999-999", cluster="lambda expression"];
n444 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="995-995", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n445 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()"];
n450 [label="Entry lambda expression", span="1006-1006", cluster="lambda expression"];
n447 [label="new FakeOptionWithTwoRequired()", span="999-999", cluster="lambda expression"];
n448 [label="Exit lambda expression", span="999-999", cluster="lambda expression"];
n449 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()"];
n452 [label="Exit lambda expression", span="1006-1006", cluster="lambda expression"];
n453 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="1011-1011", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)"];
n454 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="1016-1020", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)"];
n455 [label="expected.ShouldBeEquivalentTo(result.Value)", span="1023-1023", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)"];
n457 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n456 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="1011-1011", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)"];
m1_3 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="ParserSettingsFixture.cs"];
m1_0 [label="Entry CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9", cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="ParserSettingsFixture.cs"];
m1_1 [label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="11-11", cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="ParserSettingsFixture.cs"];
m1_2 [label="Exit CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", span="9-9", cluster="CommandLine.Core.KeyValuePairHelper.Create(string, params string[])", file="ParserSettingsFixture.cs"];
n458 -> n14  [key=1, style=dashed, color=red, label=fakeOptions];
n459 -> n182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n459 -> n186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n460 -> n383  [key=1, style=dashed, color=darkseagreen4, label=int];
n461 -> n393  [key=1, style=dashed, color=darkseagreen4, label=int];
n462 -> n415  [key=1, style=dashed, color=darkseagreen4, label=int];
n463 -> n451  [key=1, style=dashed, color=darkseagreen4, label=int];
n0 -> n1  [key=0, style=solid, color=red];
n1 -> n2  [key=0, style=solid, color=red];
n1 -> n6  [key=2, style=dotted, color=red];
n1 -> n3  [key=1, style=dashed, color=red, label=fakeOptions];
n1 -> n14  [key=1, style=dashed, color=red, label=fakeOptions];
n2 -> n3  [key=0, style=solid, color=red];
n2 -> n7  [key=2, style=dotted, color=red];
n2 -> n8  [key=2, style=dotted, color=red];
n2 -> n4  [key=1, style=dashed, color=red, label=expectedResult];
n3 -> n4  [key=0, style=solid, color=red];
n3 -> n9  [key=2, style=dotted, color=red];
n3 -> n10  [key=2, style=dotted, color=red];
n3 -> n13  [key=1, style=dashed, color=red, label="lambda expression"];
n14 -> n15  [key=0, style=solid, color=red];
n4 -> n5  [key=0, style=solid, color=red];
n4 -> n11  [key=2, style=dotted, color=red];
n4 -> n12  [key=2, style=dotted, color=red];
n13 -> n14  [key=0, style=solid, color=red];
n5 -> n0  [key=0, style=bold, color=blue];
n15 -> n13  [key=0, style=bold, color=blue];
n16 -> n17  [key=0, style=solid, color=red];
n16 -> n18  [key=1, style=dashed, color=red, label=long];
n17 -> n18  [key=0, style=solid, color=red];
n17 -> n9  [key=2, style=dotted, color=red];
n17 -> n10  [key=2, style=dotted, color=red];
n17 -> n21  [key=1, style=dashed, color=red, label="lambda expression"];
n18 -> n19  [key=0, style=solid, color=red];
n18 -> n20  [key=2, style=dotted, color=red];
n21 -> n22  [key=0, style=solid, color=red];
n19 -> n16  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid, color=red];
n22 -> n6  [key=2, style=dotted, color=red];
n23 -> n21  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid, color=red];
n24 -> n26  [key=1, style=dashed, color=red, label=double];
n25 -> n26  [key=0, style=solid, color=red];
n25 -> n9  [key=2, style=dotted, color=red];
n25 -> n10  [key=2, style=dotted, color=red];
n25 -> n28  [key=1, style=dashed, color=red, label="lambda expression"];
n26 -> n27  [key=0, style=solid, color=red];
n26 -> n20  [key=2, style=dotted, color=red];
n28 -> n29  [key=0, style=solid, color=red];
n27 -> n24  [key=0, style=bold, color=blue];
n29 -> n30  [key=0, style=solid, color=red];
n29 -> n31  [key=2, style=dotted, color=red];
n30 -> n28  [key=0, style=bold, color=blue];
n32 -> n33  [key=0, style=solid, color=red];
n32 -> n34  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n33 -> n34  [key=0, style=solid, color=red];
n33 -> n9  [key=2, style=dotted, color=red];
n33 -> n10  [key=2, style=dotted, color=red];
n33 -> n37  [key=1, style=dashed, color=red, label="lambda expression"];
n34 -> n35  [key=0, style=solid];
n34 -> n36  [key=2, style=dotted];
n34 -> n12  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid, color=red];
n35 -> n32  [key=0, style=bold, color=blue];
n38 -> n39  [key=0, style=solid, color=red];
n38 -> n40  [key=2, style=dotted, color=red];
n39 -> n37  [key=0, style=bold, color=blue];
n41 -> n42  [key=0, style=solid];
n41 -> n43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n42 -> n43  [key=0, style=solid];
n42 -> n9  [key=2, style=dotted];
n42 -> n10  [key=2, style=dotted];
n42 -> n45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n43 -> n44  [key=0, style=solid];
n43 -> n36  [key=2, style=dotted];
n43 -> n12  [key=2, style=dotted];
n45 -> n46  [key=0, style=solid];
n44 -> n41  [key=0, style=bold, color=blue];
n46 -> n47  [key=0, style=solid];
n46 -> n6  [key=2, style=dotted];
n47 -> n45  [key=0, style=bold, color=blue];
n48 -> n49  [key=0, style=solid];
n48 -> n50  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n49 -> n50  [key=0, style=solid];
n49 -> n9  [key=2, style=dotted];
n49 -> n10  [key=2, style=dotted];
n49 -> n52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n50 -> n51  [key=0, style=solid];
n50 -> n36  [key=2, style=dotted];
n50 -> n12  [key=2, style=dotted];
n52 -> n53  [key=0, style=solid];
n51 -> n48  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid];
n53 -> n55  [key=2, style=dotted];
n54 -> n52  [key=0, style=bold, color=blue];
n56 -> n57  [key=0, style=solid];
n56 -> n58  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n57 -> n58  [key=0, style=solid];
n57 -> n9  [key=2, style=dotted];
n57 -> n10  [key=2, style=dotted];
n57 -> n60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n58 -> n59  [key=0, style=solid];
n58 -> n36  [key=2, style=dotted];
n58 -> n12  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n59 -> n56  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=2, style=dotted];
n62 -> n60  [key=0, style=bold, color=blue];
n64 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n69  [key=2, style=dotted];
n65 -> n70  [key=2, style=dotted];
n65 -> n67  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n66 -> n67  [key=0, style=solid];
n66 -> n9  [key=2, style=dotted];
n66 -> n10  [key=2, style=dotted];
n66 -> n71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n67 -> n68  [key=0, style=solid];
n67 -> n36  [key=2, style=dotted];
n67 -> n12  [key=2, style=dotted];
n71 -> n72  [key=0, style=solid];
n68 -> n64  [key=0, style=bold, color=blue];
n72 -> n73  [key=0, style=solid];
n72 -> n55  [key=2, style=dotted];
n73 -> n71  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid];
n75 -> n76  [key=0, style=solid];
n75 -> n79  [key=2, style=dotted];
n75 -> n77  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n76 -> n77  [key=0, style=solid];
n76 -> n9  [key=2, style=dotted];
n76 -> n10  [key=2, style=dotted];
n76 -> n80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n77 -> n78  [key=0, style=solid];
n77 -> n36  [key=2, style=dotted];
n77 -> n12  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n78 -> n74  [key=0, style=bold, color=blue];
n81 -> n82  [key=0, style=solid];
n81 -> n83  [key=2, style=dotted];
n82 -> n80  [key=0, style=bold, color=blue];
n84 -> n85  [key=0, style=solid];
n85 -> n86  [key=0, style=solid];
n85 -> n79  [key=2, style=dotted];
n85 -> n70  [key=2, style=dotted];
n85 -> n87  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n86 -> n87  [key=0, style=solid];
n86 -> n9  [key=2, style=dotted];
n86 -> n10  [key=2, style=dotted];
n86 -> n89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n87 -> n88  [key=0, style=solid];
n87 -> n36  [key=2, style=dotted];
n87 -> n12  [key=2, style=dotted];
n89 -> n90  [key=0, style=solid];
n88 -> n84  [key=0, style=bold, color=blue];
n90 -> n91  [key=0, style=solid];
n90 -> n63  [key=2, style=dotted];
n91 -> n89  [key=0, style=bold, color=blue];
n92 -> n93  [key=0, style=solid];
n93 -> n94  [key=0, style=solid];
n93 -> n79  [key=2, style=dotted];
n93 -> n95  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n94 -> n95  [key=0, style=solid];
n94 -> n9  [key=2, style=dotted];
n94 -> n10  [key=2, style=dotted];
n94 -> n97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n95 -> n96  [key=0, style=solid];
n95 -> n36  [key=2, style=dotted];
n95 -> n12  [key=2, style=dotted];
n97 -> n98  [key=0, style=solid];
n96 -> n92  [key=0, style=bold, color=blue];
n98 -> n99  [key=0, style=solid];
n98 -> n100  [key=2, style=dotted];
n99 -> n97  [key=0, style=bold, color=blue];
n101 -> n102  [key=0, style=solid];
n101 -> n103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
n102 -> n103  [key=0, style=solid];
n102 -> n9  [key=2, style=dotted];
n102 -> n10  [key=2, style=dotted];
n102 -> n106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n103 -> n104  [key=0, style=solid];
n103 -> n105  [key=2, style=dotted];
n103 -> n103  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
n106 -> n107  [key=0, style=solid];
n104 -> n101  [key=0, style=bold, color=blue];
n107 -> n108  [key=0, style=solid];
n107 -> n109  [key=2, style=dotted];
n108 -> n106  [key=0, style=bold, color=blue];
n110 -> n111  [key=0, style=solid];
n111 -> n112  [key=0, style=solid];
n111 -> n115  [key=2, style=dotted];
n111 -> n70  [key=2, style=dotted];
n111 -> n113  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n112 -> n113  [key=0, style=solid];
n112 -> n9  [key=2, style=dotted];
n112 -> n10  [key=2, style=dotted];
n112 -> n116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n113 -> n114  [key=0, style=solid];
n113 -> n36  [key=2, style=dotted];
n113 -> n12  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n114 -> n110  [key=0, style=bold, color=blue];
n117 -> n118  [key=0, style=solid];
n117 -> n109  [key=2, style=dotted];
n118 -> n116  [key=0, style=bold, color=blue];
n119 -> n120  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n120 -> n115  [key=2, style=dotted];
n120 -> n70  [key=2, style=dotted];
n120 -> n122  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n121 -> n122  [key=0, style=solid];
n121 -> n9  [key=2, style=dotted];
n121 -> n10  [key=2, style=dotted];
n121 -> n124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n122 -> n123  [key=0, style=solid];
n122 -> n36  [key=2, style=dotted];
n122 -> n12  [key=2, style=dotted];
n124 -> n125  [key=0, style=solid];
n123 -> n119  [key=0, style=bold, color=blue];
n125 -> n126  [key=0, style=solid];
n125 -> n109  [key=2, style=dotted];
n126 -> n124  [key=0, style=bold, color=blue];
n127 -> n128  [key=0, style=solid];
n128 -> n129  [key=0, style=solid];
n128 -> n115  [key=2, style=dotted];
n128 -> n70  [key=2, style=dotted];
n128 -> n130  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n129 -> n130  [key=0, style=solid];
n129 -> n9  [key=2, style=dotted];
n129 -> n10  [key=2, style=dotted];
n129 -> n132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n130 -> n131  [key=0, style=solid];
n130 -> n36  [key=2, style=dotted];
n130 -> n12  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n131 -> n127  [key=0, style=bold, color=blue];
n133 -> n134  [key=0, style=solid];
n133 -> n109  [key=2, style=dotted];
n134 -> n132  [key=0, style=bold, color=blue];
n135 -> n136  [key=0, style=solid];
n136 -> n137  [key=0, style=solid];
n136 -> n140  [key=2, style=dotted];
n136 -> n138  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n137 -> n138  [key=0, style=solid];
n137 -> n9  [key=2, style=dotted];
n137 -> n10  [key=2, style=dotted];
n137 -> n141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n138 -> n139  [key=0, style=solid];
n138 -> n105  [key=2, style=dotted];
n141 -> n142  [key=0, style=solid];
n139 -> n135  [key=0, style=bold, color=blue];
n142 -> n143  [key=0, style=solid];
n142 -> n140  [key=2, style=dotted];
n143 -> n141  [key=0, style=bold, color=blue];
n144 -> n145  [key=0, style=solid];
n144 -> n146  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
n145 -> n146  [key=0, style=solid];
n145 -> n9  [key=2, style=dotted];
n145 -> n10  [key=2, style=dotted];
n145 -> n148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n146 -> n147  [key=0, style=solid];
n146 -> n105  [key=2, style=dotted];
n148 -> n149  [key=0, style=solid];
n147 -> n144  [key=0, style=bold, color=blue];
n149 -> n150  [key=0, style=solid];
n149 -> n151  [key=2, style=dotted];
n150 -> n148  [key=0, style=bold, color=blue];
n152 -> n153  [key=0, style=solid];
n152 -> n154  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
n153 -> n154  [key=0, style=solid];
n153 -> n9  [key=2, style=dotted];
n153 -> n10  [key=2, style=dotted];
n153 -> n156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n154 -> n155  [key=0, style=solid];
n154 -> n105  [key=2, style=dotted];
n156 -> n157  [key=0, style=solid];
n155 -> n152  [key=0, style=bold, color=blue];
n157 -> n158  [key=0, style=solid];
n157 -> n159  [key=2, style=dotted];
n158 -> n156  [key=0, style=bold, color=blue];
n160 -> n161  [key=0, style=solid];
n160 -> n162  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n161 -> n162  [key=0, style=solid];
n161 -> n9  [key=2, style=dotted];
n161 -> n10  [key=2, style=dotted];
n161 -> n164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n162 -> n163  [key=0, style=solid];
n162 -> n105  [key=2, style=dotted];
n164 -> n165  [key=0, style=solid];
n163 -> n160  [key=0, style=bold, color=blue];
n165 -> n166  [key=0, style=solid];
n165 -> n159  [key=2, style=dotted];
n166 -> n164  [key=0, style=bold, color=blue];
n167 -> n168  [key=0, style=solid];
n168 -> n169  [key=0, style=solid];
n168 -> n140  [key=2, style=dotted];
n168 -> n171  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n169 -> n170  [key=0, style=solid];
n171 -> n172  [key=0, style=solid];
n171 -> n105  [key=2, style=dotted];
n170 -> n171  [key=0, style=solid];
n170 -> n9  [key=2, style=dotted];
n170 -> n173  [key=2, style=dotted];
n170 -> n174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n170 -> n177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n174 -> n175  [key=0, style=solid];
n177 -> n178  [key=0, style=solid];
n177 -> n182  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n177 -> n186  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n172 -> n167  [key=0, style=bold, color=blue];
n175 -> n176  [key=0, style=solid];
n175 -> n140  [key=2, style=dotted];
n176 -> n174  [key=0, style=bold, color=blue];
n178 -> n179  [key=0, style=solid];
n178 -> n180  [key=2, style=dotted];
n178 -> n181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n182 -> n183  [key=0, style=solid];
n182 -> n184  [key=2, style=dotted];
n182 -> n185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n186 -> n187  [key=0, style=solid];
n186 -> n188  [key=2, style=dotted];
n179 -> n177  [key=0, style=bold, color=blue];
n181 -> n182  [key=0, style=solid];
n183 -> n181  [key=0, style=bold, color=blue];
n185 -> n186  [key=0, style=solid];
n187 -> n185  [key=0, style=bold, color=blue];
n189 -> n190  [key=0, style=solid];
n190 -> n191  [key=0, style=solid];
n190 -> n194  [key=2, style=dotted];
n190 -> n70  [key=2, style=dotted];
n190 -> n192  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n191 -> n192  [key=0, style=solid];
n191 -> n9  [key=2, style=dotted];
n191 -> n10  [key=2, style=dotted];
n191 -> n195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n192 -> n193  [key=0, style=solid];
n192 -> n36  [key=2, style=dotted];
n192 -> n12  [key=2, style=dotted];
n195 -> n196  [key=0, style=solid];
n193 -> n189  [key=0, style=bold, color=blue];
n196 -> n197  [key=0, style=solid];
n196 -> n198  [key=2, style=dotted];
n197 -> n195  [key=0, style=bold, color=blue];
n199 -> n200  [key=0, style=solid];
n200 -> n201  [key=0, style=solid];
n200 -> n204  [key=2, style=dotted];
n200 -> n202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n201 -> n202  [key=0, style=solid];
n201 -> n9  [key=2, style=dotted];
n201 -> n10  [key=2, style=dotted];
n201 -> n205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n202 -> n203  [key=0, style=solid];
n202 -> n105  [key=2, style=dotted];
n205 -> n206  [key=0, style=solid];
n203 -> n199  [key=0, style=bold, color=blue];
n206 -> n207  [key=0, style=solid];
n206 -> n204  [key=2, style=dotted];
n207 -> n205  [key=0, style=bold, color=blue];
n208 -> n209  [key=0, style=solid];
n209 -> n210  [key=0, style=solid];
n209 -> n204  [key=2, style=dotted];
n209 -> n211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n210 -> n211  [key=0, style=solid];
n210 -> n9  [key=2, style=dotted];
n210 -> n10  [key=2, style=dotted];
n210 -> n213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n211 -> n212  [key=0, style=solid];
n211 -> n105  [key=2, style=dotted];
n213 -> n214  [key=0, style=solid];
n212 -> n208  [key=0, style=bold, color=blue];
n214 -> n215  [key=0, style=solid];
n214 -> n204  [key=2, style=dotted];
n215 -> n213  [key=0, style=bold, color=blue];
n216 -> n217  [key=0, style=solid];
n217 -> n218  [key=0, style=solid];
n217 -> n221  [key=2, style=dotted];
n217 -> n70  [key=2, style=dotted];
n217 -> n219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n218 -> n219  [key=0, style=solid];
n218 -> n9  [key=2, style=dotted];
n218 -> n10  [key=2, style=dotted];
n218 -> n222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n219 -> n220  [key=0, style=solid];
n219 -> n36  [key=2, style=dotted];
n219 -> n12  [key=2, style=dotted];
n222 -> n223  [key=0, style=solid];
n220 -> n216  [key=0, style=bold, color=blue];
n223 -> n224  [key=0, style=solid];
n223 -> n204  [key=2, style=dotted];
n224 -> n222  [key=0, style=bold, color=blue];
n225 -> n226  [key=0, style=solid];
n226 -> n227  [key=0, style=solid];
n226 -> n221  [key=2, style=dotted];
n226 -> n70  [key=2, style=dotted];
n226 -> n228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n227 -> n228  [key=0, style=solid];
n227 -> n9  [key=2, style=dotted];
n227 -> n10  [key=2, style=dotted];
n227 -> n230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n228 -> n229  [key=0, style=solid];
n228 -> n36  [key=2, style=dotted];
n228 -> n12  [key=2, style=dotted];
n230 -> n231  [key=0, style=solid];
n229 -> n225  [key=0, style=bold, color=blue];
n231 -> n232  [key=0, style=solid];
n231 -> n233  [key=2, style=dotted];
n232 -> n230  [key=0, style=bold, color=blue];
n234 -> n235  [key=0, style=solid];
n235 -> n236  [key=0, style=solid];
n235 -> n79  [key=2, style=dotted];
n235 -> n70  [key=2, style=dotted];
n235 -> n237  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n236 -> n237  [key=0, style=solid];
n236 -> n9  [key=2, style=dotted];
n236 -> n10  [key=2, style=dotted];
n236 -> n239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n237 -> n238  [key=0, style=solid];
n237 -> n36  [key=2, style=dotted];
n237 -> n12  [key=2, style=dotted];
n239 -> n240  [key=0, style=solid];
n238 -> n234  [key=0, style=bold, color=blue];
n240 -> n241  [key=0, style=solid];
n240 -> n6  [key=2, style=dotted];
n241 -> n239  [key=0, style=bold, color=blue];
n242 -> n243  [key=0, style=solid];
n243 -> n244  [key=0, style=solid];
n243 -> n247  [key=2, style=dotted];
n243 -> n245  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n244 -> n245  [key=0, style=solid];
n244 -> n9  [key=2, style=dotted];
n244 -> n10  [key=2, style=dotted];
n244 -> n248  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n245 -> n246  [key=0, style=solid];
n245 -> n36  [key=2, style=dotted];
n245 -> n12  [key=2, style=dotted];
n248 -> n249  [key=0, style=solid];
n246 -> n242  [key=0, style=bold, color=blue];
n249 -> n250  [key=0, style=solid];
n249 -> n6  [key=2, style=dotted];
n250 -> n248  [key=0, style=bold, color=blue];
n251 -> n252  [key=0, style=solid];
n252 -> n253  [key=0, style=solid];
n252 -> n247  [key=2, style=dotted];
n252 -> n254  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n253 -> n254  [key=0, style=solid];
n253 -> n9  [key=2, style=dotted];
n253 -> n10  [key=2, style=dotted];
n253 -> n256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n254 -> n255  [key=0, style=solid];
n254 -> n36  [key=2, style=dotted];
n254 -> n12  [key=2, style=dotted];
n256 -> n257  [key=0, style=solid];
n255 -> n251  [key=0, style=bold, color=blue];
n257 -> n258  [key=0, style=solid];
n257 -> n6  [key=2, style=dotted];
n258 -> n256  [key=0, style=bold, color=blue];
n259 -> n260  [key=0, style=solid];
n260 -> n261  [key=0, style=solid];
n260 -> n247  [key=2, style=dotted];
n260 -> n262  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n261 -> n262  [key=0, style=solid];
n261 -> n9  [key=2, style=dotted];
n261 -> n10  [key=2, style=dotted];
n261 -> n264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n262 -> n263  [key=0, style=solid];
n262 -> n36  [key=2, style=dotted];
n262 -> n12  [key=2, style=dotted];
n264 -> n265  [key=0, style=solid];
n263 -> n259  [key=0, style=bold, color=blue];
n265 -> n266  [key=0, style=solid];
n265 -> n6  [key=2, style=dotted];
n266 -> n264  [key=0, style=bold, color=blue];
n267 -> n268  [key=0, style=solid];
n267 -> n269  [key=1, style=dashed, color=darkseagreen4, label=string];
n268 -> n269  [key=0, style=solid];
n268 -> n9  [key=2, style=dotted];
n268 -> n10  [key=2, style=dotted];
n268 -> n272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n269 -> n270  [key=0, style=solid];
n269 -> n271  [key=2, style=dotted];
n269 -> n12  [key=2, style=dotted];
n272 -> n273  [key=0, style=solid];
n270 -> n267  [key=0, style=bold, color=blue];
n273 -> n274  [key=0, style=solid];
n273 -> n6  [key=2, style=dotted];
n274 -> n272  [key=0, style=bold, color=blue];
n275 -> n276  [key=0, style=solid];
n276 -> n277  [key=0, style=solid];
n276 -> n221  [key=2, style=dotted];
n276 -> n278  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n277 -> n278  [key=0, style=solid];
n277 -> n9  [key=2, style=dotted];
n277 -> n10  [key=2, style=dotted];
n277 -> n280  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n278 -> n279  [key=0, style=solid];
n278 -> n36  [key=2, style=dotted];
n278 -> n12  [key=2, style=dotted];
n280 -> n281  [key=0, style=solid];
n279 -> n275  [key=0, style=bold, color=blue];
n281 -> n282  [key=0, style=solid];
n281 -> n283  [key=2, style=dotted];
n282 -> n280  [key=0, style=bold, color=blue];
n284 -> n285  [key=0, style=solid];
n284 -> n286  [key=1, style=dashed, color=darkseagreen4, label=string];
n285 -> n286  [key=0, style=solid];
n285 -> n9  [key=2, style=dotted];
n285 -> n10  [key=2, style=dotted];
n285 -> n288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n286 -> n287  [key=0, style=solid];
n286 -> n105  [key=2, style=dotted];
n288 -> n289  [key=0, style=solid];
n287 -> n284  [key=0, style=bold, color=blue];
n289 -> n290  [key=0, style=solid];
n289 -> n6  [key=2, style=dotted];
n290 -> n288  [key=0, style=bold, color=blue];
n291 -> n292  [key=0, style=solid];
n292 -> n293  [key=0, style=solid];
n292 -> n79  [key=2, style=dotted];
n292 -> n294  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n293 -> n294  [key=0, style=solid];
n293 -> n9  [key=2, style=dotted];
n293 -> n10  [key=2, style=dotted];
n293 -> n296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n294 -> n295  [key=0, style=solid];
n294 -> n36  [key=2, style=dotted];
n294 -> n12  [key=2, style=dotted];
n296 -> n297  [key=0, style=solid];
n295 -> n291  [key=0, style=bold, color=blue];
n297 -> n298  [key=0, style=solid];
n297 -> n299  [key=2, style=dotted];
n298 -> n296  [key=0, style=bold, color=blue];
n300 -> n301  [key=0, style=solid];
n300 -> n302  [key=1, style=dashed, color=darkseagreen4, label="int?"];
n301 -> n302  [key=0, style=solid];
n301 -> n9  [key=2, style=dotted];
n301 -> n10  [key=2, style=dotted];
n301 -> n304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n302 -> n303  [key=0, style=solid];
n302 -> n105  [key=2, style=dotted];
n304 -> n305  [key=0, style=solid];
n303 -> n300  [key=0, style=bold, color=blue];
n305 -> n306  [key=0, style=solid];
n305 -> n307  [key=2, style=dotted];
n306 -> n304  [key=0, style=bold, color=blue];
n308 -> n309  [key=0, style=solid];
n308 -> n310  [key=1, style=dashed, color=darkseagreen4, label="long?"];
n309 -> n310  [key=0, style=solid];
n309 -> n9  [key=2, style=dotted];
n309 -> n10  [key=2, style=dotted];
n309 -> n312  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n310 -> n311  [key=0, style=solid];
n310 -> n105  [key=2, style=dotted];
n312 -> n313  [key=0, style=solid];
n311 -> n308  [key=0, style=bold, color=blue];
n313 -> n314  [key=0, style=solid];
n313 -> n307  [key=2, style=dotted];
n314 -> n312  [key=0, style=bold, color=blue];
n315 -> n316  [key=0, style=solid];
n315 -> n318  [key=1, style=dashed, color=darkseagreen4, label=string];
n315 -> n319  [key=1, style=dashed, color=darkseagreen4, label=bool];
n316 -> n317  [key=0, style=solid];
n316 -> n9  [key=2, style=dotted];
n316 -> n10  [key=2, style=dotted];
n316 -> n322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n316 -> n318  [key=1, style=dashed, color=darkseagreen4, label=result];
n316 -> n319  [key=1, style=dashed, color=darkseagreen4, label=result];
n318 -> n319  [key=0, style=solid];
n318 -> n105  [key=2, style=dotted];
n319 -> n320  [key=0, style=solid];
n319 -> n321  [key=2, style=dotted];
n319 -> n105  [key=2, style=dotted];
n317 -> n318  [key=0, style=solid];
n317 -> n319  [key=0, style=solid];
n322 -> n323  [key=0, style=solid];
n320 -> n315  [key=0, style=bold, color=blue];
n323 -> n324  [key=0, style=solid];
n323 -> n325  [key=2, style=dotted];
n324 -> n322  [key=0, style=bold, color=blue];
n326 -> n327  [key=0, style=solid];
n326 -> n329  [key=1, style=dashed, color=darkseagreen4, label=int];
n326 -> n330  [key=1, style=dashed, color=darkseagreen4, label=bool];
n327 -> n328  [key=0, style=solid];
n327 -> n9  [key=2, style=dotted];
n327 -> n10  [key=2, style=dotted];
n327 -> n332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n327 -> n329  [key=1, style=dashed, color=darkseagreen4, label=result];
n327 -> n330  [key=1, style=dashed, color=darkseagreen4, label=result];
n329 -> n330  [key=0, style=solid];
n329 -> n105  [key=2, style=dotted];
n330 -> n331  [key=0, style=solid];
n330 -> n321  [key=2, style=dotted];
n330 -> n105  [key=2, style=dotted];
n328 -> n329  [key=0, style=solid];
n328 -> n330  [key=0, style=solid];
n332 -> n333  [key=0, style=solid];
n331 -> n326  [key=0, style=bold, color=blue];
n333 -> n334  [key=0, style=solid];
n333 -> n325  [key=2, style=dotted];
n334 -> n332  [key=0, style=bold, color=blue];
n335 -> n336  [key=0, style=solid];
n336 -> n337  [key=0, style=solid];
n337 -> n338  [key=0, style=solid];
n337 -> n339  [key=2, style=dotted];
n338 -> n335  [key=0, style=bold, color=blue];
n340 -> n341  [key=0, style=solid];
n341 -> n342  [key=0, style=solid];
n341 -> n9  [key=2, style=dotted];
n341 -> n10  [key=2, style=dotted];
n341 -> n343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n342 -> n340  [key=0, style=bold, color=blue];
n343 -> n344  [key=0, style=solid];
n344 -> n345  [key=0, style=solid];
n344 -> n346  [key=2, style=dotted];
n345 -> n343  [key=0, style=bold, color=blue];
n347 -> n348  [key=0, style=solid];
n348 -> n349  [key=0, style=solid];
n349 -> n350  [key=0, style=solid];
n349 -> n339  [key=2, style=dotted];
n350 -> n347  [key=0, style=bold, color=blue];
n351 -> n352  [key=0, style=solid];
n352 -> n353  [key=0, style=solid];
n352 -> n9  [key=2, style=dotted];
n352 -> n10  [key=2, style=dotted];
n352 -> n354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n353 -> n351  [key=0, style=bold, color=blue];
n354 -> n355  [key=0, style=solid];
n355 -> n356  [key=0, style=solid];
n355 -> n357  [key=2, style=dotted];
n356 -> n354  [key=0, style=bold, color=blue];
n358 -> n359  [key=0, style=solid];
n359 -> n360  [key=0, style=solid];
n360 -> n361  [key=0, style=solid];
n360 -> n339  [key=2, style=dotted];
n361 -> n358  [key=0, style=bold, color=blue];
n362 -> n363  [key=0, style=solid];
n363 -> n364  [key=0, style=solid];
n363 -> n9  [key=2, style=dotted];
n363 -> n10  [key=2, style=dotted];
n363 -> n365  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n364 -> n362  [key=0, style=bold, color=blue];
n365 -> n366  [key=0, style=solid];
n366 -> n367  [key=0, style=solid];
n366 -> n368  [key=2, style=dotted];
n367 -> n365  [key=0, style=bold, color=blue];
n369 -> n370  [key=0, style=solid];
n369 -> n371  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
n369 -> n372  [key=1, style=dashed, color=darkseagreen4, label=int];
n369 -> n383  [key=1, style=dashed, color=darkseagreen4, label=int];
n369 -> n373  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
n370 -> n371  [key=0, style=solid];
n370 -> n9  [key=2, style=dotted];
n370 -> n10  [key=2, style=dotted];
n370 -> n378  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n370 -> n372  [key=1, style=dashed, color=darkseagreen4, label=result];
n370 -> n374  [key=1, style=dashed, color=darkseagreen4, label=result];
n371 -> n372  [key=0, style=solid];
n371 -> n373  [key=0, style=solid];
n372 -> n375  [key=0, style=solid];
n372 -> n376  [key=2, style=dotted];
n372 -> n377  [key=2, style=dotted];
n372 -> n382  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n383 -> n384  [key=0, style=solid];
n373 -> n374  [key=0, style=solid];
n373 -> n375  [key=0, style=solid];
n378 -> n379  [key=0, style=solid];
n374 -> n375  [key=0, style=solid];
n374 -> n376  [key=2, style=dotted];
n374 -> n339  [key=2, style=dotted];
n375 -> n369  [key=0, style=bold, color=blue];
n382 -> n383  [key=0, style=solid];
n379 -> n380  [key=0, style=solid];
n379 -> n381  [key=2, style=dotted];
n380 -> n378  [key=0, style=bold, color=blue];
n384 -> n382  [key=0, style=bold, color=blue];
n385 -> n386  [key=0, style=solid];
n385 -> n387  [key=1, style=dashed, color=darkseagreen4, label=int];
n385 -> n393  [key=1, style=dashed, color=darkseagreen4, label=int];
n386 -> n387  [key=0, style=solid];
n386 -> n9  [key=2, style=dotted];
n386 -> n10  [key=2, style=dotted];
n386 -> n389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n387 -> n388  [key=0, style=solid];
n387 -> n376  [key=2, style=dotted];
n387 -> n377  [key=2, style=dotted];
n387 -> n392  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n393 -> n394  [key=0, style=solid];
n389 -> n390  [key=0, style=solid];
n388 -> n385  [key=0, style=bold, color=blue];
n392 -> n393  [key=0, style=solid];
n390 -> n391  [key=0, style=solid];
n390 -> n6  [key=2, style=dotted];
n391 -> n389  [key=0, style=bold, color=blue];
n394 -> n392  [key=0, style=bold, color=blue];
n395 -> n396  [key=0, style=solid];
n395 -> n397  [key=1, style=dashed, color=darkseagreen4, label=string];
n396 -> n397  [key=0, style=solid];
n396 -> n9  [key=2, style=dotted];
n396 -> n10  [key=2, style=dotted];
n396 -> n399  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n397 -> n398  [key=0, style=solid];
n397 -> n105  [key=2, style=dotted];
n399 -> n400  [key=0, style=solid];
n398 -> n395  [key=0, style=bold, color=blue];
n400 -> n401  [key=0, style=solid];
n400 -> n402  [key=2, style=dotted];
n401 -> n399  [key=0, style=bold, color=blue];
n403 -> n404  [key=0, style=solid];
n403 -> n405  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
n403 -> n406  [key=1, style=dashed, color=darkseagreen4, label=int];
n403 -> n415  [key=1, style=dashed, color=darkseagreen4, label=int];
n403 -> n407  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
n404 -> n405  [key=0, style=solid];
n404 -> n9  [key=2, style=dotted];
n404 -> n10  [key=2, style=dotted];
n404 -> n410  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n404 -> n406  [key=1, style=dashed, color=darkseagreen4, label=result];
n404 -> n408  [key=1, style=dashed, color=darkseagreen4, label=result];
n405 -> n406  [key=0, style=solid];
n405 -> n407  [key=0, style=solid];
n406 -> n409  [key=0, style=solid];
n406 -> n376  [key=2, style=dotted];
n406 -> n377  [key=2, style=dotted];
n406 -> n414  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n415 -> n416  [key=0, style=solid];
n407 -> n408  [key=0, style=solid];
n407 -> n409  [key=0, style=solid];
n410 -> n411  [key=0, style=solid];
n408 -> n409  [key=0, style=solid];
n408 -> n376  [key=2, style=dotted];
n408 -> n339  [key=2, style=dotted];
n409 -> n403  [key=0, style=bold, color=blue];
n414 -> n415  [key=0, style=solid];
n411 -> n412  [key=0, style=solid];
n411 -> n413  [key=2, style=dotted];
n412 -> n410  [key=0, style=bold, color=blue];
n416 -> n414  [key=0, style=bold, color=blue];
n417 -> n418  [key=0, style=solid];
n417 -> n419  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
n418 -> n419  [key=0, style=solid];
n418 -> n9  [key=2, style=dotted];
n418 -> n10  [key=2, style=dotted];
n418 -> n421  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n419 -> n420  [key=0, style=solid];
n419 -> n105  [key=2, style=dotted];
n421 -> n422  [key=0, style=solid];
n420 -> n417  [key=0, style=bold, color=blue];
n422 -> n423  [key=0, style=solid];
n422 -> n283  [key=2, style=dotted];
n423 -> n421  [key=0, style=bold, color=blue];
n424 -> n425  [key=0, style=solid];
n424 -> n426  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
n425 -> n426  [key=0, style=solid];
n425 -> n9  [key=2, style=dotted];
n425 -> n10  [key=2, style=dotted];
n425 -> n428  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n426 -> n427  [key=0, style=solid];
n426 -> n105  [key=2, style=dotted];
n428 -> n429  [key=0, style=solid];
n427 -> n424  [key=0, style=bold, color=blue];
n429 -> n430  [key=0, style=solid];
n429 -> n431  [key=2, style=dotted];
n430 -> n428  [key=0, style=bold, color=blue];
n432 -> n433  [key=0, style=solid];
n433 -> n434  [key=0, style=solid];
n433 -> n6  [key=2, style=dotted];
n433 -> n435  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n434 -> n435  [key=0, style=solid];
n434 -> n9  [key=2, style=dotted];
n434 -> n10  [key=2, style=dotted];
n434 -> n437  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n435 -> n436  [key=0, style=solid];
n435 -> n105  [key=2, style=dotted];
n437 -> n438  [key=0, style=solid];
n436 -> n432  [key=0, style=bold, color=blue];
n438 -> n439  [key=0, style=solid];
n438 -> n6  [key=2, style=dotted];
n439 -> n437  [key=0, style=bold, color=blue];
n440 -> n441  [key=0, style=solid];
n440 -> n443  [key=1, style=dashed, color=darkseagreen4, label=int];
n440 -> n451  [key=1, style=dashed, color=darkseagreen4, label=int];
n441 -> n442  [key=0, style=solid];
n441 -> n9  [key=2, style=dotted];
n441 -> n10  [key=2, style=dotted];
n441 -> n446  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n443 -> n444  [key=0, style=solid];
n443 -> n445  [key=2, style=dotted];
n443 -> n376  [key=2, style=dotted];
n443 -> n377  [key=2, style=dotted];
n443 -> n450  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n451 -> n452  [key=0, style=solid];
n442 -> n443  [key=0, style=solid];
n446 -> n447  [key=0, style=solid];
n444 -> n440  [key=0, style=bold, color=blue];
n450 -> n451  [key=0, style=solid];
n447 -> n448  [key=0, style=solid];
n447 -> n449  [key=2, style=dotted];
n448 -> n446  [key=0, style=bold, color=blue];
n452 -> n450  [key=0, style=bold, color=blue];
n453 -> n454  [key=0, style=solid];
n453 -> n455  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeImmutableOptions"];
n454 -> n455  [key=0, style=solid];
n454 -> n457  [key=2, style=dotted];
n454 -> n10  [key=2, style=dotted];
n455 -> n456  [key=0, style=solid];
n455 -> n105  [key=2, style=dotted];
n456 -> n453  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
}
