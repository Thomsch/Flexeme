digraph  {
n0 [label="Entry CommandLine.Text.SentenceBuilder.CreateDefault()", span="17-17", cluster="CommandLine.Text.SentenceBuilder.CreateDefault()"];
n1 [label="return new DefaultSentenceBuilder();", span="19-19", cluster="CommandLine.Text.SentenceBuilder.CreateDefault()"];
n2 [label="Exit CommandLine.Text.SentenceBuilder.CreateDefault()", span="17-17", cluster="CommandLine.Text.SentenceBuilder.CreateDefault()"];
n3 [label="Entry CommandLine.Text.SentenceBuilder.DefaultSentenceBuilder.DefaultSentenceBuilder()", span="44-44", cluster="CommandLine.Text.SentenceBuilder.DefaultSentenceBuilder.DefaultSentenceBuilder()"];
n4 [label="Entry lambda expression", span="50-50", cluster="lambda expression"];
n5 [label="''Required.''", span="50-50", cluster="lambda expression"];
n6 [label="Exit lambda expression", span="50-50", cluster="lambda expression"];
n7 [label="Entry lambda expression", span="58-58", cluster="lambda expression"];
n8 [label="''ERROR(S):''", span="58-58", cluster="lambda expression"];
n9 [label="Exit lambda expression", span="58-58", cluster="lambda expression"];
n10 [label="Entry lambda expression", span="66-68", cluster="lambda expression"];
n11 [label="isOption\r\n                        ? ''Display this help screen.''\r\n                        : ''Display more information on a specific command.''", span="66-68", cluster="lambda expression"];
n12 [label="Exit lambda expression", span="66-68", cluster="lambda expression"];
n13 [label="Entry lambda expression", span="76-110", cluster="lambda expression"];
n14 [label="error.Tag", span="78-78", cluster="lambda expression"];
n16 [label="return ''Token ''' + ((BadFormatTokenError)error).Token + ''' is not recognized.'';", span="81-81", cluster="lambda expression"];
n18 [label="return ''Option ''' + ((MissingValueOptionError)error).NameInfo.NameText\r\n                                                      + ''' has no value.'';", span="83-84", cluster="lambda expression"];
n20 [label="return ''Option ''' + ((UnknownOptionError)error).Token + ''' is unknown.'';", span="86-86", cluster="lambda expression"];
n22 [label="var errMisssing = ((MissingRequiredOptionError)error)", span="88-88", cluster="lambda expression"];
n25 [label="return ''Option ''' + ((MutuallyExclusiveSetError)error).NameInfo.NameText + ''' is defined along with an incompatible one.'';", span="93-93", cluster="lambda expression"];
n27 [label="var badFormat = ((BadFormatConversionError)error)", span="95-95", cluster="lambda expression"];
n30 [label="var seqOutRange = ((SequenceOutOfRangeError)error)", span="100-100", cluster="lambda expression"];
n33 [label="return ''Verb ''' + ((BadVerbSelectedError)error).Token + ''' is not recognized.'';", span="105-105", cluster="lambda expression"];
n15 [label="ErrorType.BadFormatTokenError", span="80-80", cluster="lambda expression"];
n17 [label="ErrorType.MissingValueOptionError", span="82-82", cluster="lambda expression"];
n19 [label="ErrorType.UnknownOptionError", span="85-85", cluster="lambda expression"];
n21 [label="ErrorType.MissingRequiredOptionError", span="87-87", cluster="lambda expression"];
n24 [label="ErrorType.MutuallyExclusiveSetError", span="92-92", cluster="lambda expression"];
n26 [label="ErrorType.BadFormatConversionError", span="94-94", cluster="lambda expression"];
n29 [label="ErrorType.SequenceOutOfRangeError", span="99-99", cluster="lambda expression"];
n32 [label="ErrorType.BadVerbSelectedError", span="104-104", cluster="lambda expression"];
n34 [label="ErrorType.NoVerbSelectedError", span="106-106", cluster="lambda expression"];
n23 [label="return errMisssing.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A required value not bound to option name is missing.''\r\n                                               : ''Required option ''' + errMisssing.NameInfo.NameText + ''' is missing.'';", span="89-91", cluster="lambda expression"];
n28 [label="return badFormat.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A value not bound to option name is defined with a bad format.''\r\n                                               : ''Option ''' + badFormat.NameInfo.NameText + ''' is defined with a bad format.'';", span="96-98", cluster="lambda expression"];
n31 [label="return seqOutRange.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A sequence value not bound to option name is defined with few items than required.''\r\n                                               : ''A sequence option ''' + seqOutRange.NameInfo.NameText + ''' is defined with few items than required.'';", span="101-103", cluster="lambda expression"];
n35 [label="return ''No verb selected.'';", span="107-107", cluster="lambda expression", color=red, community=0];
n36 [label="Exit lambda expression", span="76-110", cluster="lambda expression"];
n37 [label="throw new InvalidOperationException();", span="109-109", cluster="lambda expression"];
n38 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()"];
m1_0 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs"];
m1_1 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-24", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=red, community=0, file="Sequence.cs"];
m1_2 [label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs"];
m1_3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Sequence.cs"];
m1_4 [label="Entry lambda expression", span="16-22", cluster="lambda expression", file="Sequence.cs"];
m1_5 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="17-22", cluster="lambda expression", color=red, community=0, file="Sequence.cs"];
m1_6 [label="Exit lambda expression", span="16-22", cluster="lambda expression", file="Sequence.cs"];
m1_7 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="Sequence.cs"];
m1_8 [label="Entry CommandLine.Core.Token.IsValue()", span="73-73", cluster="CommandLine.Core.Token.IsValue()", color=green, community=0, file="Sequence.cs"];
m1_9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Sequence.cs"];
m1_26 [label="t.Equals(nameToken)", span="29-29", cluster="lambda expression", file="Sequence.cs"];
m1_28 [label="!scalars.Contains(t)", span="26-26", cluster="lambda expression", file="Sequence.cs"];
m1_12 [label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f))\r\n                                        : new Token[] { }", span="19-21", cluster="lambda expression", file="Sequence.cs", color=red, community=0];
m1_18 [label="nameIndex >= 0", span="30-30", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs"];
m1_37 [label="Entry Unk.IsValue", span="", cluster="Unk.IsValue", file="Sequence.cs"];
m1_14 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token)", span="27-27", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token)", file="Sequence.cs"];
m1_22 [label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36", cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="Sequence.cs"];
m1_30 [label="v.IsValue()", span="32-32", cluster="lambda expression", file="Sequence.cs", color=red, community=0];
m1_16 [label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", span="27-27", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs"];
m1_34 [label="CommandLine.Core.Token", span="", cluster="lambda expression", file="Sequence.cs"];
m1_11 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs"];
m1_13 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Sequence.cs"];
m1_25 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="Sequence.cs"];
m1_29 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="Sequence.cs"];
m1_27 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="Sequence.cs"];
m1_31 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="Sequence.cs"];
m1_38 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="Sequence.cs"];
m1_32 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", cluster="lambda expression", color=green, community=0, file="Sequence.cs"];
m1_24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Sequence.cs"];
m1_39 [label="t.Text", span="35-35", cluster="lambda expression", file="Sequence.cs"];
m1_35 [label="CommandLine.Core.Token", span="", cluster="lambda expression", file="Sequence.cs"];
m1_40 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="Sequence.cs"];
m1_23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Sequence.cs"];
m1_21 [label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", span="27-27", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs"];
m1_15 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Sequence.cs"];
m1_10 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Sequence.cs"];
m1_17 [label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs"];
m1_20 [label="return new Token[] { };", span="34-34", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", file="Sequence.cs"];
m1_19 [label="return tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue());", span="32-32", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token)", color=red, community=0, file="Sequence.cs"];
m1_33 [label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span="", file="Sequence.cs"];
m1_43 [label=sequences, span="", file="Sequence.cs"];
m1_41 [label=switches, span="", file="Sequence.cs"];
m1_42 [label=scalars, span="", file="Sequence.cs"];
m2_65 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs"];
m2_14 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate", file="TokenPartitioner.cs"];
m2_101 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="TokenPartitioner.cs"];
m2_95 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="TokenPartitioner.cs"];
m2_140 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="TokenPartitioner.cs"];
m2_88 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="14-14", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TokenPartitioner.cs"];
m2_0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_1 [label="var typeInfo = factory.MapValueOrDefault(f => f().GetType(), typeof(T))", span="22-22", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=red, community=0, file="TokenPartitioner.cs"];
m2_5 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="33-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_7 [label="Func<ParserResult<T>> buildUp = () =>\r\n            {\r\n                var tokenizerResult = tokenizer(arguments, optionSpecs);\r\n\r\n                var tokens = tokenizerResult.SucceededWith();\r\n\r\n                var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer));\r\n\r\n                var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer);\r\n\r\n                var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture));\r\n\r\n                var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification());\r\n\r\n                var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith());\r\n\r\n                Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                };\r\n\r\n                Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                };\r\n\r\n                var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable();\r\n\r\n                var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens));\r\n\r\n                var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize();\r\n\r\n                var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e;\r\n\r\n                return allErrors.Except(warnings).ToParserResult(instance);\r\n            }", span="42-122", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_8 [label="var preprocessorErrors = arguments.Any()\r\n                ? arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))\r\n                : Enumerable.Empty<Error>()", span="124-126", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_9 [label="var result = arguments.Any()\r\n                ? preprocessorErrors.Any()\r\n                    ? notParsed(preprocessorErrors)\r\n                    : buildUp()\r\n                : buildUp()", span="128-132", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_2 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="24-25", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=red, community=0, file="TokenPartitioner.cs"];
m2_3 [label="var specs = from pt in specProps select pt.Specification", span="27-27", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_4 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="29-31", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_6 [label="Func<IEnumerable<Error>, ParserResult<T>> notParsed =\r\n                errs => new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="39-40", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_10 [label="return result;", span="134-134", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_11 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TokenPartitioner.cs"];
m2_38 [label="Entry Unk.>", span="", cluster="Unk.>", file="TokenPartitioner.cs"];
m2_46 [label="Entry System.Type.ToTypeInfo()", span="174-174", cluster="System.Type.ToTypeInfo()", file="TokenPartitioner.cs"];
m2_20 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="TokenPartitioner.cs"];
m2_68 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="TokenPartitioner.cs"];
m2_74 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TokenPartitioner.cs"];
m2_19 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenPartitioner.cs"];
m2_137 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="TokenPartitioner.cs"];
m2_45 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenPartitioner.cs"];
m2_139 [label="Entry System.Type.CreateDefaultForImmutable()", span="149-149", cluster="System.Type.CreateDefaultForImmutable()", file="TokenPartitioner.cs"];
m2_136 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor", file="TokenPartitioner.cs"];
m2_70 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="TokenPartitioner.cs"];
m2_13 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="TokenPartitioner.cs"];
m2_78 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="TokenPartitioner.cs"];
m2_16 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TokenPartitioner.cs"];
m2_21 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="TokenPartitioner.cs"];
m2_25 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="TokenPartitioner.cs"];
m2_145 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_33 [label="typeof(T).IsMutable()\r\n                    ? factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="34-37", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_48 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="44-44", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_50 [label="var partitions = TokenPartitioner.Partition(\r\n                    tokens,\r\n                    name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="48-50", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_82 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="50-50", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_51 [label="var optionSpecPropsResult =\r\n                    OptionMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                        partitions.Options,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                        nameComparer)", span="52-57", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_86 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="56-56", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_52 [label="var valueSpecPropsResult =\r\n                    ValueMapper.MapValues(\r\n                        (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                        partitions.Values,\r\n                        (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="59-63", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_90 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="63-63", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_53 [label="var missingValueErrors = from token in partitions.Errors\r\n                    select\r\n                        new MissingValueOptionError(\r\n                            optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))\r\n                                .FromOptionSpecification())", span="65-69", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_93 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="68-68", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_55 [label="Func<T> buildMutable = () =>\r\n                {\r\n                    var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>());\r\n                    mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray());\r\n                    return mutable;\r\n                }", span="74-90", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_97 [label="var mutable = factory.MapValueOrDefault(f => f(), Activator.CreateInstance<T>())", span="76-76", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_60 [label="var warnings = from e in allErrors where nonFatalErrors.Contains(e.Tag) select e", span="119-119", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_22 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_56 [label="Func<T> buildImmutable = () =>\r\n                {\r\n                    var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray());\r\n                    var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray();\r\n                    var immutable = (T)ctor.Invoke(values);\r\n                    return immutable;\r\n                }", span="92-105", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_131 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="94-94", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_57 [label="var instance = typeInfo.IsMutable() ? buildMutable() : buildImmutable()", span="107-107", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_26 [label="Entry lambda expression", span="24-25", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_43 [label="new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), errs)", span="40-40", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_23 [label="f().GetType()", span="22-22", cluster="lambda expression", color=red, community=0, file="TokenPartitioner.cs"];
m2_24 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_27 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="24-25", cluster="lambda expression", color=red, community=0, file="TokenPartitioner.cs"];
m2_28 [label="Exit lambda expression", span="24-25", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_32 [label="Entry lambda expression", span="33-37", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_34 [label="Exit lambda expression", span="33-37", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_39 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_40 [label="f()", span="35-35", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_41 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_42 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_44 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_47 [label="Entry lambda expression", span="42-122", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_49 [label="var tokens = tokenizerResult.SucceededWith()", span="46-46", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_59 [label="var allErrors =\r\n                    tokenizerResult.SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                        .Memorize()", span="111-117", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_58 [label="var validationErrors = specPropsWithValue.Validate(SpecificationPropertyRules.Lookup(tokens))", span="109-109", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_81 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_85 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_54 [label="var specPropsWithValue =\r\n                    optionSpecPropsResult.SucceededWith().Concat(valueSpecPropsResult.SucceededWith())", span="71-72", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_89 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_92 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_98 [label="mutable =\r\n                        mutable.SetProperties(specPropsWithValue, sp => sp.Value.IsJust(), sp => sp.Value.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                                sp => sp.Specification.DefaultValue.FromJustOrFail())\r\n                            .SetProperties(\r\n                                specPropsWithValue,\r\n                                sp =>\r\n                                    sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing(),\r\n                                sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="77-88", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_132 [label="var values = (from prms in ctor.GetParameters()\r\n                        join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                        select\r\n                            sp.Value.MapValueOrDefault(\r\n                                v => v,\r\n                                sp.Specification.DefaultValue.MapValueOrDefault(\r\n                                    d => d,\r\n                                    sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="95-102", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_61 [label="return allErrors.Except(warnings).ToParserResult(instance);", span="121-121", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_62 [label="Exit lambda expression", span="42-122", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_83 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_87 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_91 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_94 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_96 [label="Entry lambda expression", span="74-90", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_102 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_99 [label="return mutable;", span="89-89", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_105 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_109 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_113 [label="Entry lambda expression", span="81-81", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_117 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_120 [label="Entry lambda expression", span="85-87", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_124 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_100 [label="Exit lambda expression", span="74-90", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_103 [label="f()", span="76-76", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_104 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_106 [label="sp.Value.IsJust()", span="78-78", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_107 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_110 [label="sp.Value.FromJustOrFail()", span="78-78", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_111 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_114 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="81-81", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_115 [label="Exit lambda expression", span="81-81", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_118 [label="sp.Specification.DefaultValue.FromJustOrFail()", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_119 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_121 [label="sp.Value.IsNothing() && sp.Specification.TargetType == TargetType.Sequence\r\n                                    && sp.Specification.DefaultValue.MatchNothing()", span="86-87", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_122 [label="Exit lambda expression", span="85-87", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_125 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="88-88", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_126 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_130 [label="Entry lambda expression", span="92-105", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_133 [label="var immutable = (T)ctor.Invoke(values)", span="103-103", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_142 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_134 [label="return immutable;", span="104-104", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_135 [label="Exit lambda expression", span="92-105", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_143 [label=v, span="99-99", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_144 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_146 [label=d, span="101-101", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_147 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="TokenPartitioner.cs"];
m2_73 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs"];
m2_18 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="TokenPartitioner.cs"];
m2_69 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TokenPartitioner.cs"];
m2_75 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="TokenPartitioner.cs"];
m2_76 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="TokenPartitioner.cs"];
m2_128 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="TokenPartitioner.cs"];
m2_129 [label="Entry System.Type.CreateEmptyArray()", span="125-125", cluster="System.Type.CreateEmptyArray()", file="TokenPartitioner.cs"];
m2_127 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="TokenPartitioner.cs"];
m2_77 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize", file="TokenPartitioner.cs"];
m2_138 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="TokenPartitioner.cs"];
m2_79 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="TokenPartitioner.cs"];
m2_80 [label="Entry Unk.ToParserResult", span="", cluster="Unk.ToParserResult", file="TokenPartitioner.cs"];
m2_84 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitioner.cs"];
m2_30 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="TokenPartitioner.cs"];
m2_36 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="TokenPartitioner.cs"];
m2_64 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="TokenPartitioner.cs"];
m2_12 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitioner.cs"];
m2_66 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="TokenPartitioner.cs"];
m2_116 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334", cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="TokenPartitioner.cs"];
m2_123 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()", file="TokenPartitioner.cs"];
m2_35 [label="Entry System.Type.IsMutable()", span="139-139", cluster="System.Type.IsMutable()", file="TokenPartitioner.cs"];
m2_31 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="TokenPartitioner.cs"];
m2_112 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="TokenPartitioner.cs"];
m2_71 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="TokenPartitioner.cs"];
m2_15 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="TokenPartitioner.cs"];
m2_17 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="TokenPartitioner.cs"];
m2_141 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TokenPartitioner.cs"];
m2_37 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="TokenPartitioner.cs"];
m2_108 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()", file="TokenPartitioner.cs"];
m2_29 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="TokenPartitioner.cs"];
m2_63 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="TokenPartitioner.cs"];
m2_72 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs"];
m2_67 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="TokenPartitioner.cs"];
m2_148 [label="CSharpx.Maybe<System.Func<T>>", span="", file="TokenPartitioner.cs"];
m2_149 [label=specProps, span="", file="TokenPartitioner.cs"];
m2_150 [label=makeDefault, span="", file="TokenPartitioner.cs"];
m2_151 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", span="", file="TokenPartitioner.cs"];
m2_152 [label="System.Collections.Generic.IEnumerable<string>", span="", file="TokenPartitioner.cs"];
m2_153 [label=optionSpecs, span="", file="TokenPartitioner.cs"];
m2_154 [label="System.StringComparer", span="", file="TokenPartitioner.cs"];
m2_155 [label="System.Globalization.CultureInfo", span="", file="TokenPartitioner.cs"];
m2_156 [label=typeInfo, span="", file="TokenPartitioner.cs"];
m2_157 [label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", span="", file="TokenPartitioner.cs"];
m2_158 [label=token, span="", file="TokenPartitioner.cs"];
m2_159 [label=specPropsWithValue, span="", file="TokenPartitioner.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n6 -> n4  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n9 -> n7  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n12 -> n10  [key=0, style=bold, color=blue];
n13 -> n14  [key=0, style=solid];
n13 -> n16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n13 -> n18  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n13 -> n20  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n13 -> n22  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n13 -> n25  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n13 -> n27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n13 -> n30  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n13 -> n33  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Error"];
n14 -> n15  [key=0, style=solid];
n14 -> n17  [key=0, style=solid];
n14 -> n19  [key=0, style=solid];
n14 -> n21  [key=0, style=solid];
n14 -> n24  [key=0, style=solid];
n14 -> n26  [key=0, style=solid];
n14 -> n29  [key=0, style=solid];
n14 -> n32  [key=0, style=solid];
n14 -> n34  [key=0, style=solid];
n16 -> n36  [key=0, style=solid];
n18 -> n36  [key=0, style=solid];
n20 -> n36  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n25 -> n36  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n33 -> n36  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n34 -> n35  [key=0, style=solid, color=red];
n23 -> n36  [key=0, style=solid];
n28 -> n36  [key=0, style=solid];
n31 -> n36  [key=0, style=solid];
n35 -> n36  [key=0, style=solid, color=red];
n36 -> n13  [key=0, style=bold, color=blue];
n37 -> n36  [key=0, style=solid];
n37 -> n38  [key=2, style=dotted];
m1_0 -> m1_1  [key=0, style=solid, color=red];
m1_0 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m1_0 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m1_0 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m1_0 -> m1_5  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_0 -> m1_12  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_1 -> m1_2  [key=0, style=solid, color=red];
m1_1 -> m1_10  [key=2, style=dotted, color=green];
m1_1 -> m1_3  [key=1, style=dashed, color=green, label=tokenList];
m1_1 -> m1_4  [key=1, style=dashed, color=red, label="lambda expression"];
m1_1 -> m1_5  [key=1, style=dashed, color=green, label=tokenList];
m1_1 -> m1_1  [key=1, style=dashed, color=red, label=tseq];
m1_2 -> m1_5  [key=1, style=dashed, color=green, label=switches];
m1_2 -> m1_8  [key=1, style=dashed, color=green, label=switches];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_11  [key=2, style=dotted];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label=switches];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_3 -> m1_5  [key=1, style=dashed, color=green, label=scalars];
m1_3 -> m1_8  [key=1, style=dashed, color=green, label=scalars];
m1_3 -> m1_10  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_12  [key=2, style=dotted];
m1_3 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m1_4 -> m1_5  [key=0, style=solid, color=red];
m1_4 -> m1_8  [key=1, style=dashed, color=green, label=sequences];
m1_4 -> m1_32  [key=1, style=dashed, color=green, label=sequences];
m1_4 -> m1_10  [key=2, style=dotted];
m1_4 -> m1_13  [key=2, style=dotted];
m1_4 -> m1_12  [key=1, style=dashed, color=red, label="CommandLine.Core.Token"];
m1_4 -> m1_24  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid, color=red];
m1_5 -> m1_14  [key=2, style=dotted, color=green];
m1_5 -> m1_15  [key=2, style=dotted, color=green];
m1_5 -> m1_4  [key=1, style=dashed, color=green, label="lambda expression"];
m1_5 -> m1_11  [key=1, style=dashed, color=red, label="lambda expression"];
m1_5 -> m1_29  [key=1, style=dashed, color=green, label="lambda expression"];
m1_5 -> m1_7  [key=1, style=dashed, color=green, label=nonOptions];
m1_5 -> m1_8  [key=2, style=dotted, color=red];
m1_5 -> m1_9  [key=2, style=dotted, color=red];
m1_5 -> m1_10  [key=2, style=dotted, color=red];
m1_6 -> m1_8  [key=1, style=dashed, color=green, label=values];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_14  [key=2, style=dotted];
m1_6 -> m1_15  [key=2, style=dotted];
m1_6 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_6 -> m1_4  [key=0, style=bold, color=blue];
m1_7 -> m1_8  [key=0, style=solid, color=green];
m1_7 -> m1_10  [key=2, style=dotted];
m1_7 -> m1_16  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid, color=green];
m1_8 -> m1_17  [key=2, style=dotted, color=green];
m1_8 -> m1_18  [key=2, style=dotted, color=green];
m1_8 -> m1_15  [key=2, style=dotted, color=green];
m1_8 -> m1_20  [key=2, style=dotted, color=green];
m1_8 -> m1_21  [key=2, style=dotted, color=green];
m1_8 -> m1_22  [key=2, style=dotted, color=green];
m1_8 -> m1_38  [key=1, style=dashed, color=green, label="lambda expression"];
m1_9 -> m1_0  [key=0, style=bold, color=blue];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_28  [key=2, style=dotted];
m1_28 -> m1_30  [key=2, style=dotted];
m1_28 -> m1_13  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid, color=red];
m1_12 -> m1_14  [key=2, style=dotted, color=red];
m1_12 -> m1_15  [key=2, style=dotted, color=red];
m1_18 -> m1_19  [key=0, style=solid, color=red];
m1_18 -> m1_20  [key=0, style=solid];
m1_14 -> m1_1  [key=3, color=red, style=bold, label="Parameter variable CommandLine.Core.Token nameToken"];
m1_30 -> m1_31  [key=0, style=solid, color=red];
m1_30 -> m1_8  [key=2, style=dotted, color=red];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m1_16 -> m1_19  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_12  [key=1, style=dashed, color=red, label="CommandLine.Core.Token"];
m1_11 -> m1_12  [key=0, style=solid, color=red];
m1_11 -> m1_28  [key=0, style=solid];
m1_13 -> m1_11  [key=0, style=bold, color=blue];
m1_25 -> m1_26  [key=0, style=solid];
m1_29 -> m1_30  [key=0, style=solid, color=red];
m1_29 -> m1_32  [key=0, style=solid, color=green];
m1_27 -> m1_25  [key=0, style=bold, color=blue];
m1_27 -> m1_29  [key=0, style=bold, color=green];
m1_31 -> m1_29  [key=0, style=bold, color=blue];
m1_31 -> m1_34  [key=0, style=bold, color=blue];
m1_38 -> m1_39  [key=0, style=solid];
m1_32 -> m1_27  [key=0, style=solid, color=green];
m1_32 -> m1_30  [key=2, style=dotted, color=green];
m1_32 -> m1_5  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_32 -> m1_12  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_24 -> m1_6  [key=0, style=solid];
m1_24 -> m1_26  [key=2, style=dotted];
m1_39 -> m1_40  [key=0, style=solid];
m1_35 -> m1_31  [key=0, style=solid];
m1_35 -> m1_37  [key=2, style=dotted];
m1_35 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m1_40 -> m1_38  [key=0, style=bold, color=blue];
m1_21 -> m1_16  [key=0, style=bold, color=blue];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_22  [key=2, style=dotted];
m1_17 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_17 -> m1_19  [key=1, style=dashed, color=red, label=nameIndex];
m1_20 -> m1_21  [key=0, style=solid];
m1_19 -> m1_21  [key=0, style=solid, color=red];
m1_19 -> m1_23  [key=2, style=dotted, color=red];
m1_19 -> m1_24  [key=2, style=dotted, color=red];
m1_19 -> m1_29  [key=1, style=dashed, color=red, label="lambda expression"];
m1_33 -> m1_5  [key=1, style=dashed, color=red, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m1_43 -> m1_32  [key=1, style=dashed, color=green, label=sequences];
m1_41 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label=switches];
m1_42 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m2_0 -> m2_1  [key=0, style=solid, color=red];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m2_0 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m2_0 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m2_0 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m2_0 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_0 -> m2_82  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_0 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_0 -> m2_86  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m2_0 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m2_0 -> m2_90  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m2_0 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_0 -> m2_93  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_0 -> m2_55  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m2_0 -> m2_97  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m2_0 -> m2_60  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
m2_0 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_0 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_1 -> m2_2  [key=0, style=solid, color=red];
m2_1 -> m2_12  [key=2, style=dotted, color=red];
m2_1 -> m2_22  [key=1, style=dashed, color=red, label="lambda expression"];
m2_1 -> m2_7  [key=1, style=dashed, color=red, label=typeInfo];
m2_1 -> m2_56  [key=1, style=dashed, color=red, label=typeInfo];
m2_1 -> m2_131  [key=1, style=dashed, color=red, label=typeInfo];
m2_1 -> m2_57  [key=1, style=dashed, color=red, label=typeInfo];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label=buildUp];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_16  [key=2, style=dotted];
m2_8 -> m2_17  [key=2, style=dotted];
m2_8 -> m2_18  [key=2, style=dotted];
m2_8 -> m2_19  [key=2, style=dotted];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_16  [key=2, style=dotted];
m2_9 -> m2_20  [key=2, style=dotted];
m2_9 -> m2_21  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid, color=red];
m2_2 -> m2_13  [key=2, style=dotted, color=red];
m2_2 -> m2_26  [key=1, style=dashed, color=red, label="lambda expression"];
m2_2 -> m2_5  [key=1, style=dashed, color=red, label=specProps];
m2_2 -> m2_33  [key=1, style=dashed, color=red, label=specProps];
m2_2 -> m2_7  [key=1, style=dashed, color=red, label=specProps];
m2_2 -> m2_51  [key=1, style=dashed, color=red, label=specProps];
m2_2 -> m2_52  [key=1, style=dashed, color=red, label=specProps];
m2_2 -> m2_56  [key=1, style=dashed, color=red, label=specProps];
m2_2 -> m2_131  [key=1, style=dashed, color=red, label=specProps];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=pt];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_14  [key=2, style=dotted];
m2_4 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m2_4 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m2_4 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m2_4 -> m2_82  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m2_4 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Error>"];
m2_6 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label=notParsed];
m2_10 -> m2_11  [key=0, style=solid];
m2_11 -> m2_0  [key=0, style=bold, color=blue];
m2_145 -> m2_146  [key=0, style=solid];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_35  [key=2, style=dotted];
m2_33 -> m2_36  [key=2, style=dotted];
m2_33 -> m2_12  [key=2, style=dotted];
m2_33 -> m2_37  [key=2, style=dotted];
m2_33 -> m2_38  [key=2, style=dotted];
m2_33 -> m2_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_33 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label=p];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_63  [key=2, style=dotted];
m2_48 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_65  [key=2, style=dotted];
m2_50 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_50 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m2_50 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_84  [key=2, style=dotted];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_66  [key=2, style=dotted];
m2_51 -> m2_67  [key=2, style=dotted];
m2_51 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label=pt];
m2_51 -> m2_85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_51 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label=optionSpecPropsResult];
m2_51 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label=optionSpecPropsResult];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_88  [key=2, style=dotted];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_68  [key=2, style=dotted];
m2_52 -> m2_67  [key=2, style=dotted];
m2_52 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label=pt];
m2_52 -> m2_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_52 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label=valueSpecPropsResult];
m2_52 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label=valueSpecPropsResult];
m2_90 -> m2_91  [key=0, style=solid];
m2_90 -> m2_88  [key=2, style=dotted];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_69  [key=2, style=dotted];
m2_53 -> m2_70  [key=2, style=dotted];
m2_53 -> m2_71  [key=2, style=dotted];
m2_53 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label=token];
m2_53 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_53 -> m2_93  [key=1, style=dashed, color=darkseagreen4, label=token];
m2_53 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_95  [key=2, style=dotted];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label=buildMutable];
m2_97 -> m2_98  [key=0, style=solid];
m2_97 -> m2_36  [key=2, style=dotted];
m2_97 -> m2_12  [key=2, style=dotted];
m2_97 -> m2_102  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_78  [key=2, style=dotted];
m2_60 -> m2_60  [key=1, style=dashed, color=darkseagreen4, label=e];
m2_22 -> m2_23  [key=0, style=solid, color=red];
m2_56 -> m2_57  [key=0, style=solid];
m2_131 -> m2_132  [key=0, style=solid];
m2_131 -> m2_37  [key=2, style=dotted];
m2_131 -> m2_136  [key=2, style=dotted];
m2_131 -> m2_131  [key=1, style=dashed, color=darkseagreen4, label=sp];
m2_131 -> m2_133  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_35  [key=2, style=dotted];
m2_57 -> m2_21  [key=2, style=dotted];
m2_57 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label=instance];
m2_26 -> m2_27  [key=0, style=solid, color=red];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_45  [key=2, style=dotted];
m2_43 -> m2_21  [key=2, style=dotted];
m2_43 -> m2_25  [key=2, style=dotted];
m2_43 -> m2_46  [key=2, style=dotted];
m2_23 -> m2_24  [key=0, style=solid, color=red];
m2_23 -> m2_21  [key=2, style=dotted, color=red];
m2_23 -> m2_25  [key=2, style=dotted, color=red];
m2_24 -> m2_22  [key=0, style=bold, color=blue];
m2_27 -> m2_28  [key=0, style=solid, color=red];
m2_27 -> m2_29  [key=2, style=dotted, color=red];
m2_27 -> m2_30  [key=2, style=dotted, color=red];
m2_27 -> m2_31  [key=2, style=dotted, color=red];
m2_28 -> m2_26  [key=0, style=bold, color=blue];
m2_32 -> m2_33  [key=0, style=solid];
m2_34 -> m2_32  [key=0, style=bold, color=blue];
m2_39 -> m2_40  [key=0, style=solid];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_21  [key=2, style=dotted];
m2_41 -> m2_39  [key=0, style=bold, color=blue];
m2_42 -> m2_43  [key=0, style=solid];
m2_44 -> m2_42  [key=0, style=bold, color=blue];
m2_47 -> m2_48  [key=0, style=solid];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_64  [key=2, style=dotted];
m2_49 -> m2_58  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_75  [key=2, style=dotted];
m2_59 -> m2_76  [key=2, style=dotted];
m2_59 -> m2_77  [key=2, style=dotted];
m2_59 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label=allErrors];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_73  [key=2, style=dotted];
m2_58 -> m2_74  [key=2, style=dotted];
m2_81 -> m2_82  [key=0, style=solid];
m2_85 -> m2_86  [key=0, style=solid];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_64  [key=2, style=dotted];
m2_54 -> m2_72  [key=2, style=dotted];
m2_54 -> m2_98  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m2_54 -> m2_56  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m2_54 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m2_54 -> m2_58  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m2_89 -> m2_90  [key=0, style=solid];
m2_92 -> m2_93  [key=0, style=solid];
m2_98 -> m2_99  [key=0, style=solid];
m2_98 -> m2_101  [key=2, style=dotted];
m2_98 -> m2_98  [key=1, style=dashed, color=darkseagreen4, label=mutable];
m2_98 -> m2_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_98 -> m2_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_98 -> m2_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_98 -> m2_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_98 -> m2_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_98 -> m2_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_132 -> m2_133  [key=0, style=solid];
m2_132 -> m2_137  [key=2, style=dotted];
m2_132 -> m2_138  [key=2, style=dotted];
m2_132 -> m2_139  [key=2, style=dotted];
m2_132 -> m2_12  [key=2, style=dotted];
m2_132 -> m2_140  [key=2, style=dotted];
m2_132 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=prms];
m2_132 -> m2_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_132 -> m2_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_79  [key=2, style=dotted];
m2_61 -> m2_80  [key=2, style=dotted];
m2_62 -> m2_47  [key=0, style=bold, color=blue];
m2_83 -> m2_81  [key=0, style=bold, color=blue];
m2_87 -> m2_85  [key=0, style=bold, color=blue];
m2_91 -> m2_89  [key=0, style=bold, color=blue];
m2_94 -> m2_92  [key=0, style=bold, color=blue];
m2_96 -> m2_97  [key=0, style=solid];
m2_102 -> m2_103  [key=0, style=solid];
m2_99 -> m2_100  [key=0, style=solid];
m2_105 -> m2_106  [key=0, style=solid];
m2_109 -> m2_110  [key=0, style=solid];
m2_113 -> m2_114  [key=0, style=solid];
m2_117 -> m2_118  [key=0, style=solid];
m2_120 -> m2_121  [key=0, style=solid];
m2_124 -> m2_125  [key=0, style=solid];
m2_100 -> m2_96  [key=0, style=bold, color=blue];
m2_103 -> m2_104  [key=0, style=solid];
m2_103 -> m2_21  [key=2, style=dotted];
m2_104 -> m2_102  [key=0, style=bold, color=blue];
m2_106 -> m2_107  [key=0, style=solid];
m2_106 -> m2_108  [key=2, style=dotted];
m2_107 -> m2_105  [key=0, style=bold, color=blue];
m2_110 -> m2_111  [key=0, style=solid];
m2_110 -> m2_112  [key=2, style=dotted];
m2_111 -> m2_109  [key=0, style=bold, color=blue];
m2_114 -> m2_115  [key=0, style=solid];
m2_114 -> m2_116  [key=2, style=dotted];
m2_114 -> m2_108  [key=2, style=dotted];
m2_115 -> m2_113  [key=0, style=bold, color=blue];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_112  [key=2, style=dotted];
m2_119 -> m2_117  [key=0, style=bold, color=blue];
m2_121 -> m2_122  [key=0, style=solid];
m2_121 -> m2_116  [key=2, style=dotted];
m2_121 -> m2_123  [key=2, style=dotted];
m2_122 -> m2_120  [key=0, style=bold, color=blue];
m2_125 -> m2_126  [key=0, style=solid];
m2_125 -> m2_127  [key=2, style=dotted];
m2_125 -> m2_128  [key=2, style=dotted];
m2_125 -> m2_129  [key=2, style=dotted];
m2_126 -> m2_124  [key=0, style=bold, color=blue];
m2_130 -> m2_131  [key=0, style=solid];
m2_133 -> m2_134  [key=0, style=solid];
m2_133 -> m2_141  [key=2, style=dotted];
m2_142 -> m2_143  [key=0, style=solid];
m2_134 -> m2_135  [key=0, style=solid];
m2_135 -> m2_130  [key=0, style=bold, color=blue];
m2_143 -> m2_144  [key=0, style=solid];
m2_144 -> m2_142  [key=0, style=bold, color=blue];
m2_146 -> m2_147  [key=0, style=solid];
m2_147 -> m2_145  [key=0, style=bold, color=blue];
m2_148 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m2_148 -> m2_55  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m2_148 -> m2_97  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
m2_149 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m2_149 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m2_149 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m2_149 -> m2_56  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m2_149 -> m2_131  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m2_150 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
m2_151 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
m2_152 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_153 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m2_153 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m2_153 -> m2_82  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m2_153 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m2_154 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_154 -> m2_82  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_154 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_154 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_154 -> m2_93  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_155 -> m2_51  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m2_155 -> m2_86  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m2_155 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m2_155 -> m2_90  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m2_156 -> m2_56  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m2_156 -> m2_131  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m2_156 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m2_157 -> m2_60  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
m2_158 -> m2_93  [key=1, style=dashed, color=darkseagreen4, label=token];
m2_159 -> m2_98  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m2_159 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
}
