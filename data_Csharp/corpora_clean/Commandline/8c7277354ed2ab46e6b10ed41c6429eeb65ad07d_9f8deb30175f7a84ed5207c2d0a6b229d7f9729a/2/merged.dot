digraph  {
n0 [label="Entry Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", span="5-5", cluster="Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)"];
n1 [label="return new DateTime(date.Year, date.Month, date.Day, hour, min, second, millisecond);", span="7-7", cluster="Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)"];
n2 [label="Exit Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)", span="5-5", cluster="Humanizer.PrepositionsExtensions.At(System.DateTime, int, int, int, int)"];
n3 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, int)"];
n4 [label="Entry Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", span="15-15", cluster="Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)"];
n5 [label="return date.At(0);", span="17-17", cluster="Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", color=red, community=0];
n6 [label="Exit Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)", span="15-15", cluster="Humanizer.PrepositionsExtensions.AtMidnight(System.DateTime)"];
n7 [label="Entry System.DateTime.At(int, int, int, int)", span="5-5", cluster="System.DateTime.At(int, int, int, int)"];
n8 [label="Entry Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", span="25-25", cluster="Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)"];
n9 [label="return date.At(12);", span="27-27", cluster="Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", color=red, community=0];
n10 [label="Exit Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)", span="25-25", cluster="Humanizer.PrepositionsExtensions.AtNoon(System.DateTime)"];
n11 [label="Entry Humanizer.PrepositionsExtensions.In(System.DateTime, int)", span="36-36", cluster="Humanizer.PrepositionsExtensions.In(System.DateTime, int)"];
n12 [label="return new DateTime(year, date.Month, date.Day, date.Hour, date.Minute, date.Second, date.Millisecond);", span="38-38", cluster="Humanizer.PrepositionsExtensions.In(System.DateTime, int)"];
n13 [label="Exit Humanizer.PrepositionsExtensions.In(System.DateTime, int)", span="36-36", cluster="Humanizer.PrepositionsExtensions.In(System.DateTime, int)"];
m0_40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="InstanceBuilderTests.cs"];
m0_150 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilderTests.cs"];
m0_172 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_341 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="825-825", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_343 [label="expected.ShouldBeEquivalentTo(result.Value)", span="837-837", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_342 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="830-834", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_344 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="825-825", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilderTests.cs"];
m0_11 [label="Entry Humanizer.Localisation.Formatters.ArabicFormatter.ArabicFormatter()", span="2-2", cluster="Humanizer.Localisation.Formatters.ArabicFormatter.ArabicFormatter()", file="InstanceBuilderTests.cs"];
m0_324 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceBuilderTests.cs"];
m0_159 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_161 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_160 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_162 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilderTests.cs"];
m0_233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_234 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_274 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_276 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_275 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_277 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_278 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_320 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome", file="InstanceBuilderTests.cs"];
m0_220 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_151 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_153 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_152 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_154 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilderTests.cs"];
m0_62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="InstanceBuilderTests.cs"];
m0_143 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_145 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilderTests.cs"];
m0_299 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_301 [label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_300 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_302 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilderTests.cs"];
m0_55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_243 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_242 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_244 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_245 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_266 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_267 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_268 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_269 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilderTests.cs"];
m0_54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="InstanceBuilderTests.cs"];
m0_207 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_210 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_209 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_208 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_211 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilderTests.cs"];
m0_187 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilderTests.cs"];
m0_31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_32 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_33 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilderTests.cs"];
m0_307 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_309 [label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_308 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithNullables(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_310 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilderTests.cs"];
m0_0 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_3 [label="Entry Humanizer.Localisation.Formatters.RomanianFormatter.RomanianFormatter()", span="2-2", cluster="Humanizer.Localisation.Formatters.RomanianFormatter.RomanianFormatter()", file="InstanceBuilderTests.cs"];
m0_1 [label="new RomanianFormatter()", span="16-16", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_2 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_4 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_5 [label="new RussianFormatter()", span="17-17", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_224 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_226 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_225 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_227 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_228 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilderTests.cs"];
m0_290 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_292 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_291 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_293 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_294 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_8 [label="Entry lambda expression", span="18-18", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_184 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="InstanceBuilderTests.cs"];
m0_9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilderTests.cs"];
m0_10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="InstanceBuilderTests.cs"];
m0_12 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_13 [label=fakeOptions, span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_14 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_17 [label="Assert.Equal(expected, result.Value.LongValue)", span="54-54", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="InstanceBuilderTests.cs"];
m0_20 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_21 [label="new FakeOptions()", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_331 [label="Entry lambda expression", span="789-789", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_332 [label="new FakeOptionsWithFSharpOption()", span="789-789", cluster="lambda expression", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_333 [label="Exit lambda expression", span="789-789", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_321 [label="Entry lambda expression", span="765-765", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_322 [label="new FakeOptionsWithFSharpOption()", span="765-765", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_323 [label="Exit lambda expression", span="765-765", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_27 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_36 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_44 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_51 [label="Entry lambda expression", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_59 [label="Entry lambda expression", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_70 [label="Entry lambda expression", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_79 [label="Entry lambda expression", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_88 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_96 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_105 [label="Entry lambda expression", span="263-263", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_115 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_123 [label="Entry lambda expression", span="301-301", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_131 [label="Entry lambda expression", span="320-320", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_140 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_147 [label="Entry lambda expression", span="368-368", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_155 [label="Entry lambda expression", span="390-390", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_163 [label="Entry lambda expression", span="412-412", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_194 [label="Entry lambda expression", span="467-467", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_204 [label="Entry lambda expression", span="487-487", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_212 [label="Entry lambda expression", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_221 [label="Entry lambda expression", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_229 [label="Entry lambda expression", span="545-545", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_238 [label="Entry lambda expression", span="564-564", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_247 [label="Entry lambda expression", span="583-583", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_255 [label="Entry lambda expression", span="602-602", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_263 [label="Entry lambda expression", span="621-621", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_271 [label="Entry lambda expression", span="641-641", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_279 [label="Entry lambda expression", span="660-660", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_287 [label="Entry lambda expression", span="682-682", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_295 [label="Entry lambda expression", span="701-701", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_303 [label="Entry lambda expression", span="723-723", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_311 [label="Entry lambda expression", span="745-745", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_338 [label="Entry lambda expression", span="812-812", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_345 [label="Entry lambda expression", span="831-831", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_173 [label="Entry lambda expression", span="441-441", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_176 [label="Entry lambda expression", span="442-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_22 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_29 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_28 [label="new FakeOptionsWithDouble()", span="71-71", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_38 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_37 [label="new FakeOptionsWithSequence()", span="95-95", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_46 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_45 [label="new FakeOptions()", span="117-117", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_53 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_61 [label="Exit lambda expression", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_72 [label="Exit lambda expression", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_81 [label="Exit lambda expression", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_90 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_98 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_107 [label="Exit lambda expression", span="263-263", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_106 [label="new FakeOptionsWithEnum()", span="263-263", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_117 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_116 [label="new FakeOptionsWithEnum()", span="282-282", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_125 [label="Exit lambda expression", span="301-301", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_124 [label="new FakeOptionsWithEnum()", span="301-301", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_133 [label="Exit lambda expression", span="320-320", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_132 [label="new FakeOptionsWithEnum()", span="320-320", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_142 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_141 [label="new FakeOptionsWithValues()", span="345-345", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_149 [label="Exit lambda expression", span="368-368", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_148 [label="new FakeOptionsWithSequenceWithoutRange()", span="368-368", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_157 [label="Exit lambda expression", span="390-390", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_156 [label="new FakeOptionsWithSequenceAndSeparator()", span="390-390", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_165 [label="Exit lambda expression", span="412-412", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_164 [label="new FakeOptionsWithSequenceAndSeparator()", span="412-412", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_196 [label="Exit lambda expression", span="467-467", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_195 [label="new FakeOptionsWithSets()", span="467-467", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_206 [label="Exit lambda expression", span="487-487", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_205 [label="new FakeOptionWithRequiredAndSet()", span="487-487", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_214 [label="Exit lambda expression", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_213 [label="new FakeOptionWithRequiredAndSet()", span="507-507", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_223 [label="Exit lambda expression", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_222 [label="new FakeOptionWithRequiredAndSet()", span="527-527", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_231 [label="Exit lambda expression", span="545-545", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_230 [label="new FakeOptionWithRequired()", span="545-545", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_240 [label="Exit lambda expression", span="564-564", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_239 [label="new FakeOptions()", span="564-564", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_249 [label="Exit lambda expression", span="583-583", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_248 [label="new FakeOptions()", span="583-583", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_257 [label="Exit lambda expression", span="602-602", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_256 [label="new FakeOptions()", span="602-602", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_265 [label="Exit lambda expression", span="621-621", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_264 [label="new FakeOptions()", span="621-621", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_273 [label="Exit lambda expression", span="641-641", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_272 [label="new FakeOptions()", span="641-641", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_281 [label="Exit lambda expression", span="660-660", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_280 [label="new FakeOptionsWithRequiredValue()", span="660-660", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_289 [label="Exit lambda expression", span="682-682", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_288 [label="new FakeOptions()", span="682-682", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_297 [label="Exit lambda expression", span="701-701", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_296 [label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_305 [label="Exit lambda expression", span="723-723", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_304 [label="new FakeOptionsWithNullables()", span="723-723", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_313 [label="Exit lambda expression", span="745-745", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_312 [label="new FakeOptionsWithNullables()", span="745-745", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_340 [label="Exit lambda expression", span="812-812", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_339 [label="new FakeOptionsWithRequiredValue()", span="812-812", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_347 [label="Exit lambda expression", span="831-831", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_346 [label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="831-831", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_174 [label="new FakeOptionsWithValues()", span="441-441", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_175 [label="Exit lambda expression", span="441-441", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_178 [label="Exit lambda expression", span="442-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_177 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_181 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_185 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_180 [label="Entry lambda expression", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_182 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_186 [label="Exit lambda expression", span="444-444", cluster="lambda expression", file="InstanceBuilderTests.cs"];
m0_215 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_217 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_216 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_218 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilderTests.cs"];
m0_100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilderTests.cs"];
m0_126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_128 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_127 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_129 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_130 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_166 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_170 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_167 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_169 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_168 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_171 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilderTests.cs"];
m0_35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="InstanceBuilderTests.cs"];
m0_334 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_336 [label="expected.ShouldBeEquivalentTo(result.Value)", span="818-818", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_335 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="811-815", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_337 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="806-806", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilderTests.cs"];
m0_68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_348 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceBuilderTests.cs"];
m0_258 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_260 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_259 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_261 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_262 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_137 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_136 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_135 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_138 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilderTests.cs"];
m0_63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilderTests.cs"];
m0_283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_285 [label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_284 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_286 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilderTests.cs"];
m0_30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="InstanceBuilderTests.cs"];
m0_7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilderTests.cs"];
m0_108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="InstanceBuilderTests.cs"];
m0_203 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="InstanceBuilderTests.cs"];
m0_73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_246 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilderTests.cs"];
m0_91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilderTests.cs"];
m0_198 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_201 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_200 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_199 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="InstanceBuilderTests.cs"];
m0_114 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_158 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilderTests.cs"];
m0_179 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="InstanceBuilderTests.cs"];
m0_270 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="InstanceBuilderTests.cs"];
m0_197 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilderTests.cs"];
m0_183 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilderTests.cs"];
m0_193 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="InstanceBuilderTests.cs"];
m0_188 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_190 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_189 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_191 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_192 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilderTests.cs"];
m0_314 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_317 [label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_315 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_316 [label="result.Value.FileName != null", span="771-771", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_318 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_319 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilderTests.cs"];
m0_298 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="InstanceBuilderTests.cs"];
m0_82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="InstanceBuilderTests.cs"];
m0_15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilderTests.cs"];
m0_232 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="InstanceBuilderTests.cs"];
m0_69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilderTests.cs"];
m0_47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilderTests.cs"];
m0_306 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceBuilderTests.cs"];
m0_39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilderTests.cs"];
m0_250 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_252 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_251 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_253 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_254 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilderTests.cs"];
m0_118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_120 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_119 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_121 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_122 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_110 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_112 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilderTests.cs"];
m0_23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilderTests.cs"];
m0_139 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilderTests.cs"];
m0_282 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="InstanceBuilderTests.cs"];
m0_325 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_326 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithFSharpOption(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", color=green, community=1, file="InstanceBuilderTests.cs"];
m0_327 [label="result.Value.Offset != null", span="795-795", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_328 [label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_329 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", color=green, community=0, file="InstanceBuilderTests.cs"];
m0_330 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilderTests.cs"];
m0_104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="InstanceBuilderTests.cs"];
m0_349 [label=fakeOptions, span="", file="InstanceBuilderTests.cs"];
m0_350 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="InstanceBuilderTests.cs"];
m2_9 [label="Entry string.Pluralize(Humanizer.Plurality)", span="170-170", cluster="string.Pluralize(Humanizer.Plurality)", file="TypeConverter.cs"];
m2_11 [label="Entry int.ToWords()", span="28-28", cluster="int.ToWords()", file="TypeConverter.cs"];
m2_8 [label="Entry string.Singularize(Humanizer.Plurality)", span="194-194", cluster="string.Singularize(Humanizer.Plurality)", file="TypeConverter.cs"];
m2_10 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="TypeConverter.cs"];
m2_0 [label="Entry Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", span="25-25", cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", file="TypeConverter.cs"];
m2_1 [label="var transformedInput = quantity == 1\r\n                ? input.Singularize(Plurality.CouldBeEither)\r\n                : input.Pluralize(Plurality.CouldBeEither)", span="27-29", cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", file="TypeConverter.cs"];
m2_2 [label="showQuantityAs == ShowQuantityAs.None", span="31-31", cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", file="TypeConverter.cs"];
m2_4 [label="showQuantityAs == ShowQuantityAs.Numeric", span="34-34", cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", file="TypeConverter.cs"];
m2_5 [label="return string.Format(''{0} {1}'', quantity, transformedInput);", span="35-35", cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", file="TypeConverter.cs"];
m2_6 [label="return string.Format(''{0} {1}'', quantity.ToWords(), transformedInput);", span="37-37", cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", file="TypeConverter.cs"];
m2_3 [label="return transformedInput;", span="32-32", cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", file="TypeConverter.cs"];
m2_7 [label="Exit Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", span="25-25", cluster="Humanizer.ToQuantityExtensions.ToQuantity(string, int, Humanizer.ShowQuantityAs)", file="TypeConverter.cs"];
n0 -> n1  [key=0, style=solid];
n0 -> n5  [key=3, color=red, style=bold, label="Parameter variable int hour"];
n0 -> n9  [key=3, color=red, style=bold, label="Parameter variable int hour"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid, color=red];
n4 -> n0  [key=3, color=darkorchid, style=bold, label="method methodReturn System.DateTime AtMidnight"];
n5 -> n6  [key=0, style=solid, color=red];
n5 -> n7  [key=2, style=dotted, color=red];
n6 -> n4  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid, color=red];
n8 -> n0  [key=3, color=darkorchid, style=bold, label="method methodReturn System.DateTime AtNoon"];
n9 -> n10  [key=0, style=solid, color=red];
n9 -> n7  [key=2, style=dotted, color=red];
n10 -> n8  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n3  [key=2, style=dotted];
n13 -> n11  [key=0, style=bold, color=blue];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_41 -> m0_9  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_35  [key=2, style=dotted];
m0_42 -> m0_11  [key=2, style=dotted];
m0_43 -> m0_40  [key=0, style=bold, color=blue];
m0_341 -> m0_343  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent"];
m0_341 -> m0_342  [key=0, style=solid];
m0_343 -> m0_104  [key=2, style=dotted];
m0_343 -> m0_344  [key=0, style=solid];
m0_342 -> m0_9  [key=2, style=dotted];
m0_342 -> m0_343  [key=0, style=solid];
m0_342 -> m0_345  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_344 -> m0_341  [key=0, style=bold, color=blue];
m0_159 -> m0_161  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_159 -> m0_160  [key=0, style=solid];
m0_161 -> m0_104  [key=2, style=dotted];
m0_161 -> m0_162  [key=0, style=solid];
m0_160 -> m0_9  [key=2, style=dotted];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_162 -> m0_159  [key=0, style=bold, color=blue];
m0_233 -> m0_234  [key=0, style=solid];
m0_235 -> m0_9  [key=2, style=dotted];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_234 -> m0_235  [key=0, style=solid];
m0_234 -> m0_78  [key=2, style=dotted];
m0_234 -> m0_69  [key=2, style=dotted];
m0_234 -> m0_236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_35  [key=2, style=dotted];
m0_236 -> m0_11  [key=2, style=dotted];
m0_237 -> m0_233  [key=0, style=bold, color=blue];
m0_274 -> m0_275  [key=0, style=solid];
m0_276 -> m0_9  [key=2, style=dotted];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_275 -> m0_276  [key=0, style=solid];
m0_275 -> m0_220  [key=2, style=dotted];
m0_275 -> m0_277  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_35  [key=2, style=dotted];
m0_277 -> m0_11  [key=2, style=dotted];
m0_278 -> m0_274  [key=0, style=bold, color=blue];
m0_151 -> m0_153  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_151 -> m0_152  [key=0, style=solid];
m0_153 -> m0_104  [key=2, style=dotted];
m0_153 -> m0_154  [key=0, style=solid];
m0_152 -> m0_9  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_154 -> m0_151  [key=0, style=bold, color=blue];
m0_143 -> m0_145  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m0_143 -> m0_144  [key=0, style=solid];
m0_145 -> m0_104  [key=2, style=dotted];
m0_145 -> m0_146  [key=0, style=solid];
m0_144 -> m0_9  [key=2, style=dotted];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_146 -> m0_143  [key=0, style=bold, color=blue];
m0_299 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m0_299 -> m0_300  [key=0, style=solid];
m0_301 -> m0_104  [key=2, style=dotted];
m0_301 -> m0_302  [key=0, style=solid];
m0_300 -> m0_9  [key=2, style=dotted];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_302 -> m0_299  [key=0, style=bold, color=blue];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_56 -> m0_9  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_35  [key=2, style=dotted];
m0_57 -> m0_11  [key=2, style=dotted];
m0_58 -> m0_55  [key=0, style=bold, color=blue];
m0_241 -> m0_242  [key=0, style=solid];
m0_243 -> m0_9  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_246  [key=2, style=dotted];
m0_242 -> m0_244  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_35  [key=2, style=dotted];
m0_244 -> m0_11  [key=2, style=dotted];
m0_245 -> m0_241  [key=0, style=bold, color=blue];
m0_266 -> m0_267  [key=0, style=solid];
m0_266 -> m0_268  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_267 -> m0_9  [key=2, style=dotted];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_270  [key=2, style=dotted];
m0_268 -> m0_11  [key=2, style=dotted];
m0_269 -> m0_266  [key=0, style=bold, color=blue];
m0_207 -> m0_208  [key=0, style=solid];
m0_210 -> m0_104  [key=2, style=dotted];
m0_210 -> m0_211  [key=0, style=solid];
m0_209 -> m0_9  [key=2, style=dotted];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_208 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_203  [key=2, style=dotted];
m0_211 -> m0_207  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m0_32 -> m0_9  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_11  [key=2, style=dotted];
m0_34 -> m0_31  [key=0, style=bold, color=blue];
m0_307 -> m0_309  [key=1, style=dashed, color=darkseagreen4, label="long?"];
m0_307 -> m0_308  [key=0, style=solid];
m0_309 -> m0_104  [key=2, style=dotted];
m0_309 -> m0_310  [key=0, style=solid];
m0_308 -> m0_9  [key=2, style=dotted];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_310 -> m0_307  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [key=2, style=dotted];
m0_224 -> m0_225  [key=0, style=solid];
m0_226 -> m0_9  [key=2, style=dotted];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_229  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_220  [key=2, style=dotted];
m0_225 -> m0_69  [key=2, style=dotted];
m0_225 -> m0_227  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_227 -> m0_228  [key=0, style=solid];
m0_227 -> m0_35  [key=2, style=dotted];
m0_227 -> m0_11  [key=2, style=dotted];
m0_228 -> m0_224  [key=0, style=bold, color=blue];
m0_290 -> m0_291  [key=0, style=solid];
m0_292 -> m0_9  [key=2, style=dotted];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_295  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_291 -> m0_292  [key=0, style=solid];
m0_291 -> m0_78  [key=2, style=dotted];
m0_291 -> m0_293  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_293 -> m0_294  [key=0, style=solid];
m0_293 -> m0_35  [key=2, style=dotted];
m0_293 -> m0_11  [key=2, style=dotted];
m0_294 -> m0_290  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_184 -> m0_185  [key=0, style=solid];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_11  [key=2, style=dotted];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=2, style=dotted];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_9  [key=2, style=dotted];
m0_16 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_15  [key=2, style=dotted];
m0_17 -> m0_19  [key=2, style=dotted];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_18 -> m0_15  [key=0, style=bold, color=blue];
m0_19 -> m0_20  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_15  [key=2, style=dotted];
m0_21 -> m0_19  [key=0, style=bold, color=blue];
m0_21 -> m0_6  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_331 -> m0_332  [key=0, style=solid, color=green];
m0_332 -> m0_333  [key=0, style=solid, color=green];
m0_332 -> m0_324  [key=2, style=dotted, color=green];
m0_333 -> m0_331  [key=0, style=bold, color=blue];
m0_321 -> m0_322  [key=0, style=solid];
m0_322 -> m0_324  [key=2, style=dotted];
m0_322 -> m0_323  [key=0, style=solid];
m0_323 -> m0_321  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_36 -> m0_37  [key=0, style=solid];
m0_44 -> m0_45  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_59 -> m0_60  [key=0, style=solid];
m0_70 -> m0_71  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_88 -> m0_89  [key=0, style=solid];
m0_96 -> m0_97  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_115 -> m0_116  [key=0, style=solid];
m0_123 -> m0_124  [key=0, style=solid];
m0_131 -> m0_132  [key=0, style=solid];
m0_140 -> m0_141  [key=0, style=solid];
m0_147 -> m0_148  [key=0, style=solid];
m0_155 -> m0_156  [key=0, style=solid];
m0_163 -> m0_164  [key=0, style=solid];
m0_194 -> m0_195  [key=0, style=solid];
m0_204 -> m0_205  [key=0, style=solid];
m0_212 -> m0_213  [key=0, style=solid];
m0_221 -> m0_222  [key=0, style=solid];
m0_229 -> m0_230  [key=0, style=solid];
m0_238 -> m0_239  [key=0, style=solid];
m0_247 -> m0_248  [key=0, style=solid];
m0_255 -> m0_256  [key=0, style=solid];
m0_263 -> m0_264  [key=0, style=solid];
m0_271 -> m0_272  [key=0, style=solid];
m0_279 -> m0_280  [key=0, style=solid];
m0_287 -> m0_288  [key=0, style=solid];
m0_295 -> m0_296  [key=0, style=solid];
m0_303 -> m0_304  [key=0, style=solid];
m0_311 -> m0_312  [key=0, style=solid];
m0_338 -> m0_339  [key=0, style=solid];
m0_345 -> m0_346  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_176 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_29 -> m0_27  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_38 -> m0_36  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=2, style=dotted];
m0_46 -> m0_44  [key=0, style=bold, color=blue];
m0_45 -> m0_6  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_53 -> m0_51  [key=0, style=bold, color=blue];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=2, style=dotted];
m0_61 -> m0_59  [key=0, style=bold, color=blue];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=2, style=dotted];
m0_72 -> m0_70  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_54  [key=2, style=dotted];
m0_81 -> m0_79  [key=0, style=bold, color=blue];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=2, style=dotted];
m0_90 -> m0_88  [key=0, style=bold, color=blue];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_62  [key=2, style=dotted];
m0_98 -> m0_96  [key=0, style=bold, color=blue];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_99  [key=2, style=dotted];
m0_107 -> m0_105  [key=0, style=bold, color=blue];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_108  [key=2, style=dotted];
m0_117 -> m0_115  [key=0, style=bold, color=blue];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_108  [key=2, style=dotted];
m0_125 -> m0_123  [key=0, style=bold, color=blue];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_108  [key=2, style=dotted];
m0_133 -> m0_131  [key=0, style=bold, color=blue];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_108  [key=2, style=dotted];
m0_142 -> m0_140  [key=0, style=bold, color=blue];
m0_141 -> m0_139  [key=2, style=dotted];
m0_141 -> m0_142  [key=0, style=solid];
m0_149 -> m0_147  [key=0, style=bold, color=blue];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_150  [key=2, style=dotted];
m0_157 -> m0_155  [key=0, style=bold, color=blue];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_158  [key=2, style=dotted];
m0_165 -> m0_163  [key=0, style=bold, color=blue];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_158  [key=2, style=dotted];
m0_196 -> m0_194  [key=0, style=bold, color=blue];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_197  [key=2, style=dotted];
m0_206 -> m0_204  [key=0, style=bold, color=blue];
m0_205 -> m0_203  [key=2, style=dotted];
m0_205 -> m0_206  [key=0, style=solid];
m0_214 -> m0_212  [key=0, style=bold, color=blue];
m0_213 -> m0_203  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_223 -> m0_221  [key=0, style=bold, color=blue];
m0_222 -> m0_203  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_231 -> m0_229  [key=0, style=bold, color=blue];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_232  [key=2, style=dotted];
m0_240 -> m0_238  [key=0, style=bold, color=blue];
m0_239 -> m0_6  [key=2, style=dotted];
m0_239 -> m0_240  [key=0, style=solid];
m0_249 -> m0_247  [key=0, style=bold, color=blue];
m0_248 -> m0_6  [key=2, style=dotted];
m0_248 -> m0_249  [key=0, style=solid];
m0_257 -> m0_255  [key=0, style=bold, color=blue];
m0_256 -> m0_6  [key=2, style=dotted];
m0_256 -> m0_257  [key=0, style=solid];
m0_265 -> m0_263  [key=0, style=bold, color=blue];
m0_264 -> m0_6  [key=2, style=dotted];
m0_264 -> m0_265  [key=0, style=solid];
m0_273 -> m0_271  [key=0, style=bold, color=blue];
m0_272 -> m0_6  [key=2, style=dotted];
m0_272 -> m0_273  [key=0, style=solid];
m0_281 -> m0_279  [key=0, style=bold, color=blue];
m0_280 -> m0_281  [key=0, style=solid];
m0_280 -> m0_282  [key=2, style=dotted];
m0_289 -> m0_287  [key=0, style=bold, color=blue];
m0_288 -> m0_6  [key=2, style=dotted];
m0_288 -> m0_289  [key=0, style=solid];
m0_297 -> m0_295  [key=0, style=bold, color=blue];
m0_296 -> m0_297  [key=0, style=solid];
m0_296 -> m0_298  [key=2, style=dotted];
m0_305 -> m0_303  [key=0, style=bold, color=blue];
m0_304 -> m0_305  [key=0, style=solid];
m0_304 -> m0_306  [key=2, style=dotted];
m0_313 -> m0_311  [key=0, style=bold, color=blue];
m0_312 -> m0_313  [key=0, style=solid];
m0_312 -> m0_306  [key=2, style=dotted];
m0_340 -> m0_338  [key=0, style=bold, color=blue];
m0_339 -> m0_340  [key=0, style=solid];
m0_339 -> m0_282  [key=2, style=dotted];
m0_347 -> m0_345  [key=0, style=bold, color=blue];
m0_346 -> m0_347  [key=0, style=solid];
m0_346 -> m0_348  [key=2, style=dotted];
m0_174 -> m0_139  [key=2, style=dotted];
m0_174 -> m0_175  [key=0, style=solid];
m0_175 -> m0_173  [key=0, style=bold, color=blue];
m0_178 -> m0_176  [key=0, style=bold, color=blue];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_179  [key=2, style=dotted];
m0_177 -> m0_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_183  [key=2, style=dotted];
m0_181 -> m0_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_187  [key=2, style=dotted];
m0_180 -> m0_181  [key=0, style=solid];
m0_182 -> m0_180  [key=0, style=bold, color=blue];
m0_186 -> m0_184  [key=0, style=bold, color=blue];
m0_215 -> m0_216  [key=0, style=solid];
m0_217 -> m0_9  [key=2, style=dotted];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_221  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_220  [key=2, style=dotted];
m0_216 -> m0_69  [key=2, style=dotted];
m0_216 -> m0_218  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_35  [key=2, style=dotted];
m0_218 -> m0_11  [key=2, style=dotted];
m0_219 -> m0_215  [key=0, style=bold, color=blue];
m0_100 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_100 -> m0_101  [key=0, style=solid];
m0_102 -> m0_104  [key=2, style=dotted];
m0_102 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
m0_102 -> m0_103  [key=0, style=solid];
m0_101 -> m0_9  [key=2, style=dotted];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_103 -> m0_100  [key=0, style=bold, color=blue];
m0_126 -> m0_127  [key=0, style=solid];
m0_128 -> m0_9  [key=2, style=dotted];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_114  [key=2, style=dotted];
m0_127 -> m0_69  [key=2, style=dotted];
m0_127 -> m0_129  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_35  [key=2, style=dotted];
m0_129 -> m0_11  [key=2, style=dotted];
m0_130 -> m0_126  [key=0, style=bold, color=blue];
m0_166 -> m0_167  [key=0, style=solid];
m0_170 -> m0_104  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_167 -> m0_170  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_139  [key=2, style=dotted];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_172  [key=2, style=dotted];
m0_169 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_169 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_168 -> m0_169  [key=0, style=solid];
m0_171 -> m0_166  [key=0, style=bold, color=blue];
m0_334 -> m0_336  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue"];
m0_334 -> m0_335  [key=0, style=solid];
m0_336 -> m0_104  [key=2, style=dotted];
m0_336 -> m0_337  [key=0, style=solid];
m0_335 -> m0_9  [key=2, style=dotted];
m0_335 -> m0_336  [key=0, style=solid];
m0_335 -> m0_338  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_337 -> m0_334  [key=0, style=bold, color=blue];
m0_83 -> m0_84  [key=0, style=solid];
m0_85 -> m0_9  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_78  [key=2, style=dotted];
m0_84 -> m0_69  [key=2, style=dotted];
m0_84 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_35  [key=2, style=dotted];
m0_86 -> m0_11  [key=2, style=dotted];
m0_87 -> m0_83  [key=0, style=bold, color=blue];
m0_258 -> m0_259  [key=0, style=solid];
m0_260 -> m0_9  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_246  [key=2, style=dotted];
m0_259 -> m0_261  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_35  [key=2, style=dotted];
m0_261 -> m0_11  [key=2, style=dotted];
m0_262 -> m0_258  [key=0, style=bold, color=blue];
m0_134 -> m0_135  [key=0, style=solid];
m0_137 -> m0_104  [key=2, style=dotted];
m0_137 -> m0_138  [key=0, style=solid];
m0_136 -> m0_9  [key=2, style=dotted];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_135 -> m0_137  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_139  [key=2, style=dotted];
m0_138 -> m0_134  [key=0, style=bold, color=blue];
m0_63 -> m0_64  [key=0, style=solid];
m0_65 -> m0_9  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_68  [key=2, style=dotted];
m0_64 -> m0_69  [key=2, style=dotted];
m0_64 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_35  [key=2, style=dotted];
m0_66 -> m0_11  [key=2, style=dotted];
m0_67 -> m0_63  [key=0, style=bold, color=blue];
m0_283 -> m0_285  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_283 -> m0_284  [key=0, style=solid];
m0_285 -> m0_104  [key=2, style=dotted];
m0_285 -> m0_286  [key=0, style=solid];
m0_284 -> m0_9  [key=2, style=dotted];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_287  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_286 -> m0_283  [key=0, style=bold, color=blue];
m0_73 -> m0_74  [key=0, style=solid];
m0_75 -> m0_9  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_78  [key=2, style=dotted];
m0_74 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_35  [key=2, style=dotted];
m0_76 -> m0_11  [key=2, style=dotted];
m0_77 -> m0_73  [key=0, style=bold, color=blue];
m0_91 -> m0_92  [key=0, style=solid];
m0_93 -> m0_9  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_78  [key=2, style=dotted];
m0_92 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_35  [key=2, style=dotted];
m0_94 -> m0_11  [key=2, style=dotted];
m0_95 -> m0_91  [key=0, style=bold, color=blue];
m0_198 -> m0_199  [key=0, style=solid];
m0_201 -> m0_104  [key=2, style=dotted];
m0_201 -> m0_202  [key=0, style=solid];
m0_200 -> m0_9  [key=2, style=dotted];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_199 -> m0_201  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_203  [key=2, style=dotted];
m0_202 -> m0_198  [key=0, style=bold, color=blue];
m0_188 -> m0_189  [key=0, style=solid];
m0_190 -> m0_9  [key=2, style=dotted];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_193  [key=2, style=dotted];
m0_189 -> m0_69  [key=2, style=dotted];
m0_189 -> m0_191  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_35  [key=2, style=dotted];
m0_191 -> m0_11  [key=2, style=dotted];
m0_192 -> m0_188  [key=0, style=bold, color=blue];
m0_314 -> m0_317  [key=1, style=dashed, color=green, label=string];
m0_314 -> m0_315  [key=0, style=solid];
m0_314 -> m0_318  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_317 -> m0_318  [key=0, style=solid, color=green];
m0_317 -> m0_104  [key=2, style=dotted, color=green];
m0_315 -> m0_317  [key=1, style=dashed, color=green, label=result];
m0_315 -> m0_316  [key=0, style=solid, color=green];
m0_315 -> m0_9  [key=2, style=dotted];
m0_315 -> m0_321  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_315 -> m0_318  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_316 -> m0_317  [key=0, style=solid, color=green];
m0_316 -> m0_318  [key=0, style=solid, color=green];
m0_318 -> m0_319  [key=0, style=solid];
m0_318 -> m0_320  [key=2, style=dotted];
m0_318 -> m0_104  [key=2, style=dotted];
m0_319 -> m0_314  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=long];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_48 -> m0_9  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_35  [key=2, style=dotted];
m0_49 -> m0_11  [key=2, style=dotted];
m0_50 -> m0_47  [key=0, style=bold, color=blue];
m0_250 -> m0_251  [key=0, style=solid];
m0_252 -> m0_9  [key=2, style=dotted];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_255  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_246  [key=2, style=dotted];
m0_251 -> m0_253  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_35  [key=2, style=dotted];
m0_253 -> m0_11  [key=2, style=dotted];
m0_254 -> m0_250  [key=0, style=bold, color=blue];
m0_118 -> m0_119  [key=0, style=solid];
m0_120 -> m0_9  [key=2, style=dotted];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_114  [key=2, style=dotted];
m0_119 -> m0_69  [key=2, style=dotted];
m0_119 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_35  [key=2, style=dotted];
m0_121 -> m0_11  [key=2, style=dotted];
m0_122 -> m0_118  [key=0, style=bold, color=blue];
m0_109 -> m0_110  [key=0, style=solid];
m0_111 -> m0_9  [key=2, style=dotted];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_114  [key=2, style=dotted];
m0_110 -> m0_69  [key=2, style=dotted];
m0_110 -> m0_112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_35  [key=2, style=dotted];
m0_112 -> m0_11  [key=2, style=dotted];
m0_113 -> m0_109  [key=0, style=bold, color=blue];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=double];
m0_24 -> m0_9  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_19  [key=2, style=dotted];
m0_26 -> m0_23  [key=0, style=bold, color=blue];
m0_325 -> m0_326  [key=0, style=solid, color=green];
m0_325 -> m0_328  [key=1, style=dashed, color=green, label=int];
m0_325 -> m0_329  [key=1, style=dashed, color=green, label=bool];
m0_326 -> m0_327  [key=0, style=solid, color=green];
m0_326 -> m0_9  [key=2, style=dotted, color=green];
m0_326 -> m0_331  [key=1, style=dashed, color=green, label="lambda expression"];
m0_326 -> m0_328  [key=1, style=dashed, color=green, label=result];
m0_326 -> m0_329  [key=1, style=dashed, color=green, label=result];
m0_327 -> m0_328  [key=0, style=solid, color=green];
m0_327 -> m0_329  [key=0, style=solid, color=green];
m0_328 -> m0_329  [key=0, style=solid, color=green];
m0_328 -> m0_104  [key=2, style=dotted, color=green];
m0_329 -> m0_330  [key=0, style=solid, color=green];
m0_329 -> m0_320  [key=2, style=dotted, color=green];
m0_329 -> m0_104  [key=2, style=dotted, color=green];
m0_330 -> m0_325  [key=0, style=bold, color=blue];
m0_349 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
m0_350 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_350 -> m0_185  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.ShowQuantityAs"];
m2_0 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="Humanizer.ShowQuantityAs"];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_0 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_8  [key=2, style=dotted];
m2_1 -> m2_9  [key=2, style=dotted];
m2_1 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=transformedInput];
m2_1 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=transformedInput];
m2_1 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=transformedInput];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_4  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_6  [key=0, style=solid];
m2_5 -> m2_7  [key=0, style=solid];
m2_5 -> m2_10  [key=2, style=dotted];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_11  [key=2, style=dotted];
m2_6 -> m2_10  [key=2, style=dotted];
m2_3 -> m2_7  [key=0, style=solid];
m2_7 -> m2_0  [key=0, style=bold, color=blue];
}
