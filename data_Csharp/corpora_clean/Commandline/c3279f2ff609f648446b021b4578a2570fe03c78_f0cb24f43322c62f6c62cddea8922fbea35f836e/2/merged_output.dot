digraph  {
m0_57 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_80 [cluster="NotParsed<T>.cstr", file="InstanceBuilder.cs", label="Entry NotParsed<T>.cstr", span=""];
m0_67 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="InstanceBuilder.cs", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71"];
m0_48 [cluster="Unk.ThrowingValidate", file="InstanceBuilder.cs", label="Entry Unk.ThrowingValidate", span=""];
m0_115 [cluster="string.MatchName(string, string, System.StringComparer)", file="InstanceBuilder.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m0_53 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
m0_3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m0_31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs", label="0: var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="76-80"];
m0_30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74"];
m0_20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45"];
m0_32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs", label="0: var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="82-85"];
m0_34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs", label="0: var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", span="91-92"];
m0_43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs", label="1: var allErrors = tokenizerResult.SuccessfulMessages()\r\n                .Concat(missingValueErrors)\r\n                .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                .Concat(validationErrors)", span="125-129"];
m0_33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="87-89"];
m0_28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68"];
m0_42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="122-123"];
m0_44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return allErrors.Any()\r\n                ? (ParserResult<T>)new NotParsed<T>(instance, allErrors)\r\n                : (ParserResult<T>)new Parsed<T>(instance);", span="131-133"];
m0_35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="T instance", span="94-94"];
m0_38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="98-109"];
m0_40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="114-118"];
m0_19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="42-42"];
m0_23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57"];
m0_24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="arguments.Any()", span="59-59"];
m0_25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61"];
m0_37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="97-97"];
m0_22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51"];
m0_29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var tokens = tokenizerResult.SucceededWith()", span="70-70"];
m0_21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specs = from pt in specProps select pt.Specification", span="47-47"];
m0_39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="113-113"];
m0_26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="preprocessorErrors.Any()", span="62-62"];
m0_41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="instance = (T)ctor.Invoke(values)", span="119-119"];
m0_36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="typeInfo.IsMutable()", span="95-95"];
m0_27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64"];
m0_45 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m0_86 [cluster="Unk.GetType", file="InstanceBuilder.cs", label="Entry Unk.GetType", span=""];
m0_70 [cluster="Unk.GetParameters", file="InstanceBuilder.cs", label="Entry Unk.GetParameters", span=""];
m0_108 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
m0_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
m0_97 [cluster="Unk.>", file="InstanceBuilder.cs", label="Entry Unk.>", span=""];
m0_79 [cluster="Unk.Any", file="InstanceBuilder.cs", label="Entry Unk.Any", span=""];
m0_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_60 [cluster="CommandLine.Core.Specification.IsValue()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m0_76 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
m0_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_69 [cluster="Unk.GetConstructor", file="InstanceBuilder.cs", label="Entry Unk.GetConstructor", span=""];
m0_62 [cluster="Unk.Single", file="InstanceBuilder.cs", label="Entry Unk.Single", span=""];
m0_74 [cluster="Unk.Invoke", file="InstanceBuilder.cs", label="Entry Unk.Invoke", span=""];
m0_50 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_54 [cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_75 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m0_15 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="27-27"];
m0_105 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="79-79"];
m0_109 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="85-85"];
m0_94 [cluster="lambda expression", file="InstanceBuilder.cs", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-57"];
m0_102 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="74-74"];
m0_106 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79"];
m0_110 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="85-85"];
m0_113 [cluster="lambda expression", file="InstanceBuilder.cs", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89"];
m0_101 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="74-74"];
m0_87 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="44-45"];
m0_107 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="79-79"];
m0_112 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="89-89"];
m0_111 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="85-85"];
m0_119 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="100-100"];
m0_123 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="101-101"];
m0_127 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="103-103"];
m0_131 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="104-104"];
m0_134 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="106-108"];
m0_138 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="109-109"];
m0_144 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="116-116"];
m0_147 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="117-117"];
m0_5 [cluster="lambda expression", file="InstanceBuilder.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24"];
m0_12 [cluster="lambda expression", file="InstanceBuilder.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24"];
m0_6 [cluster="lambda expression", file="InstanceBuilder.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-27"];
m0_16 [cluster="lambda expression", file="InstanceBuilder.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27"];
m0_4 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="22-29"];
m0_82 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="42-42"];
m0_93 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="53-57"];
m0_95 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="53-57"];
m0_98 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="55-55"];
m0_103 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="74-74"];
m0_114 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="89-89"];
m0_116 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="97-97"];
m0_89 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="44-45"];
m0_88 [cluster="lambda expression", file="InstanceBuilder.cs", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45"];
m0_121 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="100-100"];
m0_120 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsJust()", span="100-100"];
m0_125 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="101-101"];
m0_124 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.FromJust()", span="101-101"];
m0_129 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="103-103"];
m0_128 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="103-103"];
m0_133 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="104-104"];
m0_132 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Specification.DefaultValue.FromJust()", span="104-104"];
m0_136 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="106-108"];
m0_135 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="106-108"];
m0_140 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="109-109"];
m0_139 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="109-109"];
m0_146 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="116-116"];
m0_145 [cluster="lambda expression", file="InstanceBuilder.cs", label=v, span="116-116"];
m0_149 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="117-117"];
m0_148 [cluster="lambda expression", file="InstanceBuilder.cs", label=d, span="117-117"];
m0_11 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="24-24"];
m0_13 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="24-24"];
m0_7 [cluster="lambda expression", file="InstanceBuilder.cs", label="return explodedTokens;", span="28-28"];
m0_17 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="27-27"];
m0_8 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="22-29"];
m0_84 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="42-42"];
m0_83 [cluster="lambda expression", file="InstanceBuilder.cs", label="f().GetType()", span="42-42"];
m0_100 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="55-55"];
m0_99 [cluster="lambda expression", file="InstanceBuilder.cs", label="f()", span="55-55"];
m0_117 [cluster="lambda expression", file="InstanceBuilder.cs", label="f()", span="97-97"];
m0_118 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="97-97"];
m0_73 [cluster="Unk.CreateDefaultForImmutable", file="InstanceBuilder.cs", label="Entry Unk.CreateDefaultForImmutable", span=""];
m0_77 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="InstanceBuilder.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
m0_0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m0_1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-32"];
m0_2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m0_78 [cluster="Unk.Concat", file="InstanceBuilder.cs", label="Entry Unk.Concat", span=""];
m0_61 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
m0_47 [cluster="Unk.GetSpecifications", file="InstanceBuilder.cs", label="Entry Unk.GetSpecifications", span=""];
m0_81 [cluster="CommandLine.Parsed<T>.Parsed(T)", file="InstanceBuilder.cs", label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72"];
m0_52 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m0_142 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_143 [cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs", label="Entry System.Type.CreateEmptyArray()", span="114-114"];
m0_72 [cluster="string.ToLower()", file="InstanceBuilder.cs", label="Entry string.ToLower()", span="0-0"];
m0_141 [cluster="System.Type.GetGenericArguments()", file="InstanceBuilder.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m0_46 [cluster="Unk.Return", file="InstanceBuilder.cs", label="Entry Unk.Return", span=""];
m0_104 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
m0_90 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
m0_91 [cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m0_66 [cluster="System.Activator.CreateInstance<T>()", file="InstanceBuilder.cs", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
m0_56 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="InstanceBuilder.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
m0_58 [cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m0_126 [cluster="CSharpx.Maybe<T>.FromJust<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
m0_130 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
m0_137 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
m0_85 [cluster="Unk.f", file="InstanceBuilder.cs", label="Entry Unk.f", span=""];
m0_96 [cluster="System.Type.IsMutable()", file="InstanceBuilder.cs", label="Entry System.Type.IsMutable()", span="128-128"];
m0_92 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
m0_71 [cluster="Unk.ToLower", file="InstanceBuilder.cs", label="Entry Unk.ToLower", span=""];
m0_51 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
m0_49 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m0_65 [cluster="Unk.IsMutable", file="InstanceBuilder.cs", label="Entry Unk.IsMutable", span=""];
m0_68 [cluster="Unk.ToArray", file="InstanceBuilder.cs", label="Entry Unk.ToArray", span=""];
m0_122 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
m0_63 [cluster="Unk.FromOptionSpecification", file="InstanceBuilder.cs", label="Entry Unk.FromOptionSpecification", span=""];
m0_55 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilder.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m0_64 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_59 [cluster="Unk.MapValues", file="InstanceBuilder.cs", label="Entry Unk.MapValues", span=""];
m0_152 [file="InstanceBuilder.cs", label="CSharpx.Maybe<System.Func<T>>", span=""];
m0_153 [file="InstanceBuilder.cs", label=specProps, span=""];
m0_154 [file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m0_155 [file="InstanceBuilder.cs", label=optionSpecs, span=""];
m0_156 [file="InstanceBuilder.cs", label="System.Globalization.CultureInfo", span=""];
m0_157 [file="InstanceBuilder.cs", label=token, span=""];
m0_150 [file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m0_151 [file="InstanceBuilder.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_38 [cluster="System.Type.GetVerbSpecification()", file="ParserResult.cs", label="Entry System.Type.GetVerbSpecification()", span="28-28"];
m1_46 [cluster="System.Text.StringBuilder.Append(char)", file="ParserResult.cs", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
m1_123 [cluster="Unk.doubQt", file="ParserResult.cs", label="Entry Unk.doubQt", span=""];
m1_148 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="ParserResult.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="38-38"];
m1_4 [cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()", file="ParserResult.cs", label="Entry CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="53-53"];
m1_5 [cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()", file="ParserResult.cs", label="return new UnParserSettings { UseEqualToken = true };", span="55-55"];
m1_6 [cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()", file="ParserResult.cs", label="Exit CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="53-53"];
m1_125 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="ParserResult.cs", label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="181-181"];
m1_126 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="ParserResult.cs", label="return (spec as OptionSpecification).ToMaybe()\r\n                .Return(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="183-184"];
m1_127 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="ParserResult.cs", label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="181-181"];
m1_87 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="149-149"];
m1_88 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="var builder = new StringBuilder()", span="151-151"];
m1_89 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="spec.TargetType", span="152-152"];
m1_91 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="builder.Append(FormatWithQuotesIfString(value))", span="155-155"];
m1_93 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="var sep = spec.SeperatorOrSpace()", span="158-158"];
m1_95 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="var e = ((IEnumerable)value).GetEnumerator()", span="161-161"];
m1_97 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="builder.Append(format(e.Current)).Append(sep)", span="163-163"];
m1_98 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="builder.TrimEndIfMatch(' ')", span="164-164"];
m1_99 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="return builder.ToString();", span="167-167"];
m1_90 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="TargetType.Scalar", span="154-154"];
m1_92 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="TargetType.Sequence", span="157-157"];
m1_94 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="Func<object, object> format = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="159-160"];
m1_96 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="e.MoveNext()", span="162-162"];
m1_100 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="ParserResult.cs", label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="149-149"];
m1_35 [cluster="System.Action<T>.Invoke(T)", file="ParserResult.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_104 [cluster="System.Collections.IEnumerable.GetEnumerator()", file="ParserResult.cs", label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0"];
m1_45 [cluster="Unk.Any", file="ParserResult.cs", label="Entry Unk.Any", span=""];
m1_41 [cluster="object.IsEmpty()", file="ParserResult.cs", label="Entry object.IsEmpty()", span="219-219"];
m1_106 [cluster="System.Func<T, TResult>.Invoke(T)", file="ParserResult.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m1_136 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", file="ParserResult.cs", label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="195-195"];
m1_137 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", color=red, community=0, file="ParserResult.cs", label="1: var longName =\r\n                optionSpec.LongName.Length > 0\r\n                && !settings.PreferShortName", span="197-199"];
m1_138 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", color=red, community=1, file="ParserResult.cs", label="1: return\r\n                new StringBuilder(longName\r\n                    ? ''--''.JoinTo(optionSpec.LongName)\r\n                    : ''-''.JoinTo(optionSpec.ShortName))\r\n                        .AppendIf(longName && settings.UseEqualToken, ''='', '' '')\r\n                    .ToString();", span="200-205"];
m1_139 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", file="ParserResult.cs", label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="195-195"];
m1_150 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="219-219"];
m1_151 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="value == null", span="221-221"];
m1_153 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="ReflectionHelper.IsFSharpOptionType(value.GetType()) && !FSharpOptionHelper.IsSome(value)", span="222-222"];
m1_155 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="223-223"];
m1_157 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="value is string && ((string)value).Length == 0", span="224-224"];
m1_159 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="225-225"];
m1_152 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="return true;", span="221-221"];
m1_154 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="return true;", span="222-222"];
m1_156 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="return true;", span="223-223"];
m1_158 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="return true;", span="224-224"];
m1_160 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="return true;", span="225-225"];
m1_161 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="return false;", span="226-226"];
m1_162 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="ParserResult.cs", label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="219-219"];
m1_43 [cluster="Unk.Where", file="ParserResult.cs", label="Entry Unk.Where", span=""];
m1_141 [cluster="System.Text.StringBuilder.AppendIf(bool, string, string)", file="ParserResult.cs", label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="34-34"];
m1_52 [cluster="Unk.TrimEndIfMatchWhen", file="ParserResult.cs", label="Entry Unk.TrimEndIfMatchWhen", span=""];
m1_119 [cluster="string.Replace(string, string)", file="ParserResult.cs", label="Entry string.Replace(string, string)", span="0-0"];
m1_40 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="ParserResult.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="17-17"];
m1_72 [cluster="Unk.Contains", file="ParserResult.cs", label="Entry Unk.Contains", span=""];
m1_114 [cluster="T.ToMaybe<T>()", file="ParserResult.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m1_118 [cluster="string.Contains(string)", file="ParserResult.cs", label="Entry string.Contains(string)", span="0-0"];
m1_36 [cluster="object.GetType()", file="ParserResult.cs", label="Entry object.GetType()", span="0-0"];
m1_128 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="184-184"];
m1_11 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="75-75"];
m1_12 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="75-75"];
m1_61 [cluster="lambda expression", file="ParserResult.cs", label="new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) }", span="104-105"];
m1_80 [cluster="lambda expression", file="ParserResult.cs", label="builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' ')", span="139-139"];
m1_57 [cluster="lambda expression", file="ParserResult.cs", label="builder.Append(verb.Name).Append(' ')", span="99-99"];
m1_56 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="99-99"];
m1_60 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="104-105"];
m1_66 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="110-110"];
m1_70 [cluster="lambda expression", file="ParserResult.cs", label="!shortSwitches.Contains(info)", span="124-124"];
m1_69 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="124-124"];
m1_73 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="127-127"];
m1_76 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="134-134"];
m1_84 [cluster="lambda expression", file="ParserResult.cs", label="builder.Append(FormatValue(val.Specification, val.Value)).Append(' ')", span="143-143"];
m1_79 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="139-139"];
m1_83 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="143-143"];
m1_58 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="99-99"];
m1_62 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="104-105"];
m1_67 [cluster="lambda expression", file="ParserResult.cs", label="i.Specification.Tag == SpecificationType.Option", span="110-110"];
m1_68 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="110-110"];
m1_71 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="124-124"];
m1_74 [cluster="lambda expression", file="ParserResult.cs", label="i.Specification.Tag == SpecificationType.Value", span="127-127"];
m1_75 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="127-127"];
m1_77 [cluster="lambda expression", file="ParserResult.cs", label="((OptionSpecification)info.Specification).ShortName", span="134-134"];
m1_78 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="134-134"];
m1_81 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="139-139"];
m1_85 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="143-143"];
m1_109 [cluster="lambda expression", file="ParserResult.cs", label="sep == ' ' ? FormatWithQuotesIfString(v) : v", span="160-160"];
m1_108 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="159-160"];
m1_110 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="159-160"];
m1_116 [cluster="lambda expression", file="ParserResult.cs", label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="173-173"];
m1_121 [cluster="lambda expression", file="ParserResult.cs", label="v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="177-178"];
m1_120 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="177-178"];
m1_115 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="172-173"];
m1_117 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="172-173"];
m1_122 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="177-178"];
m1_129 [cluster="lambda expression", file="ParserResult.cs", label="o.Separator != '\0' ? o.Separator : ' '", span="184-184"];
m1_130 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="184-184"];
m1_135 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="ParserResult.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
m1_55 [cluster="string.TrimEnd(params char[])", file="ParserResult.cs", label="Entry string.TrimEnd(params char[])", span="0-0"];
m1_107 [cluster="System.Text.StringBuilder.TrimEndIfMatch(char)", file="ParserResult.cs", label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="85-85"];
m1_147 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="ParserResult.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35"];
m1_51 [cluster="System.Text.StringBuilder.TrailingSpaces()", file="ParserResult.cs", label="Entry System.Text.StringBuilder.TrailingSpaces()", span="101-101"];
m1_59 [cluster="Unk.Append", file="ParserResult.cs", label="Entry Unk.Append", span=""];
m1_47 [cluster="Unk.Select", file="ParserResult.cs", label="Entry Unk.Select", span=""];
m1_163 [cluster="System.Type.GetDefaultValue()", file="ParserResult.cs", label="Entry System.Type.GetDefaultValue()", span="131-131"];
m1_86 [cluster="Unk.FormatValue", file="ParserResult.cs", label="Entry Unk.FormatValue", span=""];
m1_42 [cluster="Unk.Memorize", file="ParserResult.cs", label="Entry Unk.Memorize", span=""];
m1_82 [cluster="Unk.FormatOption", file="ParserResult.cs", label="Entry Unk.FormatOption", span=""];
m1_44 [cluster="Unk.UniqueName", file="ParserResult.cs", label="Entry Unk.UniqueName", span=""];
m1_149 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="ParserResult.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="30-30"];
m1_124 [cluster="string.JoinTo(params string[])", file="ParserResult.cs", label="Entry string.JoinTo(params string[])", span="45-45"];
m1_65 [cluster="object.NormalizeValue()", file="ParserResult.cs", label="Entry object.NormalizeValue()", span="208-208"];
m1_39 [cluster="Unk.Return", file="ParserResult.cs", label="Entry Unk.Return", span=""];
m1_54 [cluster="System.Text.StringBuilder.ToString()", file="ParserResult.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m1_103 [cluster="CommandLine.Core.Specification.SeperatorOrSpace()", file="ParserResult.cs", label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="181-181"];
m1_50 [cluster="System.Text.StringBuilder.Append(string)", file="ParserResult.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m1_134 [cluster="CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", file="ParserResult.cs", label="Entry CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", span="195-195"];
m1_101 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="ParserResult.cs", label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="170-170"];
m1_111 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="ParserResult.cs", label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="172-173"];
m1_112 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="ParserResult.cs", label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="175-178"];
m1_113 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="ParserResult.cs", label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="170-170"];
m1_0 [cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()", file="ParserResult.cs", label="Entry CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="48-48"];
m1_1 [cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()", file="ParserResult.cs", label="return new UnParserSettings { GroupSwitches = true };", span="50-50"];
m1_2 [cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()", file="ParserResult.cs", label="Exit CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="48-48"];
m1_53 [cluster="Unk.ForEach", file="ParserResult.cs", label="Entry Unk.ForEach", span=""];
m1_102 [cluster="System.Text.StringBuilder.Append(object)", file="ParserResult.cs", label="Entry System.Text.StringBuilder.Append(object)", span="0-0"];
m1_49 [cluster="Unk.Join", file="ParserResult.cs", label="Entry Unk.Join", span=""];
m1_10 [cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="87-87"];
m1_140 [cluster="System.Text.StringBuilder.StringBuilder(string)", file="ParserResult.cs", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
m1_37 [cluster="System.Text.StringBuilder.StringBuilder()", file="ParserResult.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m1_3 [cluster="CommandLine.UnParserSettings.UnParserSettings()", file="ParserResult.cs", label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="15-15"];
m1_164 [cluster="object.Equals(object)", file="ParserResult.cs", label="Entry object.Equals(object)", span="0-0"];
m1_105 [cluster="System.Collections.IEnumerator.MoveNext()", file="ParserResult.cs", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
m1_13 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="87-87"];
m1_14 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="options == null", span="89-89"];
m1_17 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="configuration(settings)", span="92-92"];
m1_19 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="var type = options.GetType()", span="95-95"];
m1_22 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="var specs =\r\n                (from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) })\r\n                where !info.PropertyValue.IsEmpty()\r\n                select info)\r\n                    .Memorize()", span="101-108"];
m1_15 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="throw new ArgumentNullException(''options'');", span="89-89"];
m1_16 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="var settings = new UnParserSettings()", span="91-91"];
m1_18 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="settings.Consumed = true", span="93-93"];
m1_25 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="var optSpecs = settings.GroupSwitches\r\n                ? allOptSpecs.Where(info => !shortSwitches.Contains(info))\r\n                : allOptSpecs", span="123-125"];
m1_27 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="builder = settings.GroupSwitches && shortSwitches.Any()\r\n                ? builder.Append('-').Append(string.Join(string.Empty, shortSwitches.Select(\r\n                    info => ((OptionSpecification)info.Specification).ShortName).ToArray())).Append(' ')\r\n                : builder", span="132-135"];
m1_29 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="optSpecs.ForEach(\r\n                opt => builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings)).Append(' '))", span="138-139"];
m1_20 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="var builder = new StringBuilder()", span="96-96"];
m1_21 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="type.GetVerbSpecification()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="98-99"];
m1_23 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="var allOptSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Option)\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType != TargetType.Switch || (o.TargetType == TargetType.Switch && ((bool)info.Value))\r\n                orderby o.UniqueName()\r\n                select info", span="110-114"];
m1_26 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="127-130"];
m1_24 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="var shortSwitches = from info in allOptSpecs\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType == TargetType.Switch\r\n                where o.ShortName.Length > 0\r\n                orderby o.UniqueName()\r\n                select info", span="116-121"];
m1_28 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="builder\r\n                .TrimEndIfMatchWhen(!optSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="136-137"];
m1_30 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="builder\r\n                .TrimEndIfMatchWhen(!valSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="140-141"];
m1_31 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="valSpecs.ForEach(\r\n                val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="142-143"];
m1_32 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="return builder\r\n                .ToString().TrimEnd(' ');", span="145-146"];
m1_33 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="ParserResult.cs", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="87-87"];
m1_48 [cluster="Unk.ToArray", file="ParserResult.cs", label="Entry Unk.ToArray", span=""];
m1_131 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", file="ParserResult.cs", label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="187-187"];
m1_132 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", file="ParserResult.cs", label="return new StringBuilder()\r\n                    .Append(spec.FormatName(settings))\r\n                    .AppendWhen(spec.TargetType != TargetType.Switch, FormatValue(spec, value))\r\n                .ToString();", span="189-192"];
m1_133 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", file="ParserResult.cs", label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="187-187"];
m1_63 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserResult.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
m1_34 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ParserResult.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_7 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="ParserResult.cs", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="73-73"];
m1_8 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="ParserResult.cs", label="return parser.FormatCommandLine(options, config => {});", span="75-75"];
m1_9 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="ParserResult.cs", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="73-73"];
m1_64 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="ParserResult.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
m1_142 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="ParserResult.cs", label="Entry CommandLine.UnParserExtensions.NormalizeValue(object)", span="208-208"];
m1_143 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="ParserResult.cs", label="value != null\r\n                && ReflectionHelper.IsFSharpOptionType(value.GetType())\r\n                && FSharpOptionHelper.IsSome(value)", span="210-212"];
m1_144 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="ParserResult.cs", label="return FSharpOptionHelper.ValueOf(value);", span="214-214"];
m1_145 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="ParserResult.cs", label="return value;", span="216-216"];
m1_146 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="ParserResult.cs", label="Exit CommandLine.UnParserExtensions.NormalizeValue(object)", span="208-208"];
m1_165 [file="ParserResult.cs", label=builder, span=""];
m1_166 [file="ParserResult.cs", label=T, span=""];
m1_167 [file="ParserResult.cs", label=shortSwitches, span=""];
m1_168 [file="ParserResult.cs", label=settings, span=""];
m1_169 [file="ParserResult.cs", label=sep, span=""];
m1_170 [file="ParserResult.cs", label=doubQt, span=""];
m3_0 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Entry CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="12-12"];
m3_1 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="result.Tag == ResultType.Ok", span="14-14"];
m3_2 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="var ok = (Ok<TSuccess, TMessage>)result", span="16-16"];
m3_4 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="return Enumerable.Empty<TMessage>();", span="19-19"];
m3_3 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="return ok.Value.Messages;", span="17-17"];
m3_5 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Exit CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="12-12"];
m3_6 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ResultExtensions.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_3 -> m0_31  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_32  [color=green, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_19  [key=0, style=solid];
m0_3 -> m0_23  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m0_3 -> m0_94  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m0_3 -> m0_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_3 -> m0_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_3 -> m0_28  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m0_3 -> m0_30  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_102  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_3 -> m0_33  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_113  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_37  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m0_31 -> m0_31  [color=green, key=1, label=pt, style=dashed];
m0_31 -> m0_32  [color=green, key=0, style=solid];
m0_31 -> m0_58  [color=green, key=2, style=dotted];
m0_31 -> m0_59  [color=green, key=2, style=dotted];
m0_31 -> m0_105  [color=green, key=1, label="lambda expression", style=dashed];
m0_31 -> m0_34  [color=green, key=1, label=optionSpecPropsResult, style=dashed];
m0_31 -> m0_43  [color=green, key=1, label=optionSpecPropsResult, style=dashed];
m0_30 -> m0_31  [color=green, key=0, style=solid];
m0_30 -> m0_32  [color=green, key=1, label=partitions, style=dashed];
m0_30 -> m0_57  [key=2, style=dotted];
m0_30 -> m0_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_30 -> m0_33  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m0_20 -> m0_31  [color=green, key=1, label=specProps, style=dashed];
m0_20 -> m0_32  [color=green, key=1, label=specProps, style=dashed];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_47  [key=2, style=dotted];
m0_20 -> m0_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_23  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m0_20 -> m0_94  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m0_20 -> m0_39  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m0_32 -> m0_32  [color=green, key=1, label=pt, style=dashed];
m0_32 -> m0_33  [color=green, key=0, style=solid];
m0_32 -> m0_60  [color=green, key=2, style=dotted];
m0_32 -> m0_59  [color=green, key=2, style=dotted];
m0_32 -> m0_109  [color=green, key=1, label="lambda expression", style=dashed];
m0_32 -> m0_34  [color=green, key=1, label=valueSpecPropsResult, style=dashed];
m0_32 -> m0_43  [color=green, key=1, label=valueSpecPropsResult, style=dashed];
m0_34 -> m0_35  [color=green, key=0, style=solid];
m0_34 -> m0_56  [color=green, key=2, style=dotted];
m0_34 -> m0_64  [color=green, key=2, style=dotted];
m0_34 -> m0_38  [color=green, key=1, label=specPropsWithValue, style=dashed];
m0_34 -> m0_40  [color=green, key=1, label=specPropsWithValue, style=dashed];
m0_34 -> m0_42  [color=green, key=1, label=specPropsWithValue, style=dashed];
m0_43 -> m0_44  [color=green, key=0, style=solid];
m0_43 -> m0_77  [color=green, key=2, style=dotted];
m0_43 -> m0_78  [color=green, key=2, style=dotted];
m0_33 -> m0_43  [color=green, key=1, label=missingValueErrors, style=dashed];
m0_33 -> m0_34  [color=green, key=0, style=solid];
m0_33 -> m0_33  [color=darkseagreen4, key=1, label=token, style=dashed];
m0_33 -> m0_61  [key=2, style=dotted];
m0_33 -> m0_62  [key=2, style=dotted];
m0_33 -> m0_63  [key=2, style=dotted];
m0_33 -> m0_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_33 -> m0_113  [color=darkseagreen4, key=1, label=token, style=dashed];
m0_28 -> m0_43  [color=green, key=1, label=tokenizerResult, style=dashed];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_55  [key=2, style=dotted];
m0_42 -> m0_43  [color=green, key=0, style=solid];
m0_42 -> m0_75  [key=2, style=dotted];
m0_42 -> m0_76  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_79  [key=2, style=dotted];
m0_44 -> m0_80  [key=2, style=dotted];
m0_44 -> m0_81  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_38 -> m0_42  [key=0, style=solid];
m0_38 -> m0_44  [color=darkseagreen4, key=1, label=instance, style=dashed];
m0_38 -> m0_38  [color=darkseagreen4, key=1, label=instance, style=dashed];
m0_38 -> m0_67  [key=2, style=dotted];
m0_38 -> m0_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_134  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_38 -> m0_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_40 -> m0_40  [color=darkseagreen4, key=1, label=prms, style=dashed];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_70  [key=2, style=dotted];
m0_40 -> m0_71  [key=2, style=dotted];
m0_40 -> m0_72  [key=2, style=dotted];
m0_40 -> m0_73  [key=2, style=dotted];
m0_40 -> m0_46  [key=2, style=dotted];
m0_40 -> m0_68  [key=2, style=dotted];
m0_40 -> m0_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_40 -> m0_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_46  [key=2, style=dotted];
m0_19 -> m0_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_19 -> m0_36  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
m0_19 -> m0_39  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
m0_23 -> m0_23  [color=darkorchid, key=3, label="Local variable System.Func<T> makeDefault", style=bold];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_27  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
m0_24 -> m0_28  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_50  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_51  [key=2, style=dotted];
m0_25 -> m0_52  [key=2, style=dotted];
m0_25 -> m0_27  [color=darkseagreen4, key=1, label=preprocessorErrors, style=dashed];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_66  [key=2, style=dotted];
m0_37 -> m0_46  [key=2, style=dotted];
m0_37 -> m0_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_22 -> m0_30  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_22 -> m0_33  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_22 -> m0_28  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_102  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_22 -> m0_48  [key=2, style=dotted];
m0_22 -> m0_49  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_42  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_29 -> m0_56  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_21  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_39  [color=darkseagreen4, key=1, label=sp, style=dashed];
m0_39 -> m0_68  [key=2, style=dotted];
m0_39 -> m0_69  [key=2, style=dotted];
m0_39 -> m0_41  [color=darkseagreen4, key=1, label=ctor, style=dashed];
m0_26 -> m0_28  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_50  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_44  [color=darkseagreen4, key=1, label=instance, style=dashed];
m0_41 -> m0_74  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_39  [key=0, style=solid];
m0_36 -> m0_65  [key=2, style=dotted];
m0_27 -> m0_45  [key=0, style=solid];
m0_27 -> m0_53  [key=2, style=dotted];
m0_27 -> m0_54  [key=2, style=dotted];
m0_45 -> m0_3  [color=blue, key=0, style=bold];
m0_15 -> m0_16  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_109 -> m0_110  [key=0, style=solid];
m0_94 -> m0_94  [color=darkseagreen4, key=1, label=p, style=dashed];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_96  [key=2, style=dotted];
m0_94 -> m0_66  [key=2, style=dotted];
m0_94 -> m0_46  [key=2, style=dotted];
m0_94 -> m0_68  [key=2, style=dotted];
m0_94 -> m0_97  [key=2, style=dotted];
m0_94 -> m0_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_104  [key=2, style=dotted];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_108  [key=2, style=dotted];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_108  [key=2, style=dotted];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_115  [key=2, style=dotted];
m0_101 -> m0_102  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_107 -> m0_105  [color=blue, key=0, style=bold];
m0_112 -> m0_113  [key=0, style=solid];
m0_111 -> m0_109  [color=blue, key=0, style=bold];
m0_119 -> m0_120  [key=0, style=solid];
m0_123 -> m0_124  [key=0, style=solid];
m0_127 -> m0_128  [key=0, style=solid];
m0_131 -> m0_132  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_138 -> m0_139  [key=0, style=solid];
m0_144 -> m0_145  [key=0, style=solid];
m0_147 -> m0_148  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_10  [key=2, style=dotted];
m0_6 -> m0_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_82 -> m0_83  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_95 -> m0_93  [color=blue, key=0, style=bold];
m0_98 -> m0_99  [key=0, style=solid];
m0_103 -> m0_101  [color=blue, key=0, style=bold];
m0_114 -> m0_112  [color=blue, key=0, style=bold];
m0_116 -> m0_117  [key=0, style=solid];
m0_89 -> m0_87  [color=blue, key=0, style=bold];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_90  [key=2, style=dotted];
m0_88 -> m0_91  [key=2, style=dotted];
m0_88 -> m0_92  [key=2, style=dotted];
m0_121 -> m0_119  [color=blue, key=0, style=bold];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_122  [key=2, style=dotted];
m0_125 -> m0_123  [color=blue, key=0, style=bold];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_126  [key=2, style=dotted];
m0_129 -> m0_127  [color=blue, key=0, style=bold];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_130  [key=2, style=dotted];
m0_128 -> m0_122  [key=2, style=dotted];
m0_133 -> m0_131  [color=blue, key=0, style=bold];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_126  [key=2, style=dotted];
m0_136 -> m0_134  [color=blue, key=0, style=bold];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_130  [key=2, style=dotted];
m0_135 -> m0_137  [key=2, style=dotted];
m0_140 -> m0_138  [color=blue, key=0, style=bold];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_141  [key=2, style=dotted];
m0_139 -> m0_142  [key=2, style=dotted];
m0_139 -> m0_143  [key=2, style=dotted];
m0_146 -> m0_144  [color=blue, key=0, style=bold];
m0_145 -> m0_146  [key=0, style=solid];
m0_149 -> m0_147  [color=blue, key=0, style=bold];
m0_148 -> m0_149  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_13 -> m0_11  [color=blue, key=0, style=bold];
m0_7 -> m0_8  [key=0, style=solid];
m0_17 -> m0_15  [color=blue, key=0, style=bold];
m0_8 -> m0_4  [color=blue, key=0, style=bold];
m0_84 -> m0_82  [color=blue, key=0, style=bold];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_85  [key=2, style=dotted];
m0_83 -> m0_86  [key=2, style=dotted];
m0_100 -> m0_98  [color=blue, key=0, style=bold];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_85  [key=2, style=dotted];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_85  [key=2, style=dotted];
m0_118 -> m0_116  [color=blue, key=0, style=bold];
m0_0 -> m0_3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_1  [color=darkorchid, key=3, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> ", style=bold];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_152 -> m0_94  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m0_153 -> m0_94  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m0_154 -> m0_102  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_154 -> m0_113  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_155 -> m0_102  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_156 -> m0_106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_156 -> m0_110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_157 -> m0_113  [color=darkseagreen4, key=1, label=token, style=dashed];
m0_150 -> m0_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_150 -> m0_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_150 -> m0_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_150 -> m0_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_151 -> m0_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_151 -> m0_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_3  [key=2, style=dotted];
m1_6 -> m1_4  [color=blue, key=0, style=bold];
m1_125 -> m1_126  [key=0, style=solid];
m1_126 -> m1_127  [key=0, style=solid];
m1_126 -> m1_114  [key=2, style=dotted];
m1_126 -> m1_39  [key=2, style=dotted];
m1_126 -> m1_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_127 -> m1_125  [color=blue, key=0, style=bold];
m1_87 -> m1_88  [key=0, style=solid];
m1_87 -> m1_89  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_87 -> m1_91  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_87 -> m1_93  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_87 -> m1_95  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_37  [key=2, style=dotted];
m1_88 -> m1_91  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_88 -> m1_97  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_88 -> m1_98  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_88 -> m1_99  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_92  [key=0, style=solid];
m1_91 -> m1_99  [key=0, style=solid];
m1_91 -> m1_101  [key=2, style=dotted];
m1_91 -> m1_102  [key=2, style=dotted];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_103  [key=2, style=dotted];
m1_93 -> m1_109  [color=darkseagreen4, key=1, label=sep, style=dashed];
m1_93 -> m1_97  [color=darkseagreen4, key=1, label=sep, style=dashed];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_104  [key=2, style=dotted];
m1_95 -> m1_97  [color=darkseagreen4, key=1, label=e, style=dashed];
m1_97 -> m1_96  [key=0, style=solid];
m1_97 -> m1_106  [key=2, style=dotted];
m1_97 -> m1_102  [key=2, style=dotted];
m1_97 -> m1_46  [key=2, style=dotted];
m1_98 -> m1_99  [key=0, style=solid];
m1_98 -> m1_107  [key=2, style=dotted];
m1_99 -> m1_100  [key=0, style=solid];
m1_99 -> m1_54  [key=2, style=dotted];
m1_90 -> m1_91  [key=0, style=solid];
m1_92 -> m1_93  [key=0, style=solid];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_109  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_94 -> m1_97  [color=darkseagreen4, key=1, label=format, style=dashed];
m1_96 -> m1_97  [key=0, style=solid];
m1_96 -> m1_98  [key=0, style=solid];
m1_96 -> m1_105  [key=2, style=dotted];
m1_100 -> m1_87  [color=blue, key=0, style=bold];
m1_136 -> m1_137  [color=red, key=0, style=solid];
m1_136 -> m1_138  [color=red, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m1_137 -> m1_138  [color=red, key=0, style=solid];
m1_138 -> m1_139  [color=red, key=0, style=solid];
m1_138 -> m1_140  [color=red, key=2, style=dotted];
m1_138 -> m1_124  [color=red, key=2, style=dotted];
m1_138 -> m1_141  [color=red, key=2, style=dotted];
m1_138 -> m1_54  [color=red, key=2, style=dotted];
m1_139 -> m1_136  [color=blue, key=0, style=bold];
m1_150 -> m1_151  [key=0, style=solid];
m1_150 -> m1_153  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_150 -> m1_155  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_150 -> m1_157  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_150 -> m1_159  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_151 -> m1_152  [key=0, style=solid];
m1_151 -> m1_153  [key=0, style=solid];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_155  [key=0, style=solid];
m1_153 -> m1_36  [key=2, style=dotted];
m1_153 -> m1_147  [key=2, style=dotted];
m1_153 -> m1_148  [key=2, style=dotted];
m1_155 -> m1_156  [key=0, style=solid];
m1_155 -> m1_157  [key=0, style=solid];
m1_155 -> m1_36  [key=2, style=dotted];
m1_155 -> m1_163  [key=2, style=dotted];
m1_155 -> m1_164  [key=2, style=dotted];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_159  [key=0, style=solid];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_161  [key=0, style=solid];
m1_159 -> m1_104  [key=2, style=dotted];
m1_159 -> m1_105  [key=2, style=dotted];
m1_152 -> m1_162  [key=0, style=solid];
m1_154 -> m1_162  [key=0, style=solid];
m1_156 -> m1_162  [key=0, style=solid];
m1_158 -> m1_162  [key=0, style=solid];
m1_160 -> m1_162  [key=0, style=solid];
m1_161 -> m1_162  [key=0, style=solid];
m1_162 -> m1_150  [color=blue, key=0, style=bold];
m1_128 -> m1_129  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid];
m1_12 -> m1_11  [color=blue, key=0, style=bold];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_63  [key=2, style=dotted];
m1_61 -> m1_64  [key=2, style=dotted];
m1_61 -> m1_65  [key=2, style=dotted];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_82  [key=2, style=dotted];
m1_80 -> m1_50  [key=2, style=dotted];
m1_80 -> m1_46  [key=2, style=dotted];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_59  [key=2, style=dotted];
m1_57 -> m1_46  [key=2, style=dotted];
m1_56 -> m1_57  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_66 -> m1_67  [key=0, style=solid];
m1_70 -> m1_71  [key=0, style=solid];
m1_70 -> m1_72  [key=2, style=dotted];
m1_69 -> m1_70  [key=0, style=solid];
m1_73 -> m1_74  [key=0, style=solid];
m1_76 -> m1_77  [key=0, style=solid];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_86  [key=2, style=dotted];
m1_84 -> m1_50  [key=2, style=dotted];
m1_84 -> m1_46  [key=2, style=dotted];
m1_79 -> m1_80  [key=0, style=solid];
m1_83 -> m1_84  [key=0, style=solid];
m1_58 -> m1_56  [color=blue, key=0, style=bold];
m1_62 -> m1_60  [color=blue, key=0, style=bold];
m1_67 -> m1_68  [key=0, style=solid];
m1_68 -> m1_66  [color=blue, key=0, style=bold];
m1_71 -> m1_69  [color=blue, key=0, style=bold];
m1_74 -> m1_75  [key=0, style=solid];
m1_75 -> m1_73  [color=blue, key=0, style=bold];
m1_77 -> m1_78  [key=0, style=solid];
m1_78 -> m1_76  [color=blue, key=0, style=bold];
m1_81 -> m1_79  [color=blue, key=0, style=bold];
m1_85 -> m1_83  [color=blue, key=0, style=bold];
m1_109 -> m1_110  [key=0, style=solid];
m1_109 -> m1_101  [key=2, style=dotted];
m1_108 -> m1_109  [key=0, style=solid];
m1_110 -> m1_108  [color=blue, key=0, style=bold];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_118  [key=2, style=dotted];
m1_116 -> m1_119  [key=2, style=dotted];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_72  [key=2, style=dotted];
m1_121 -> m1_123  [key=2, style=dotted];
m1_121 -> m1_124  [key=2, style=dotted];
m1_120 -> m1_121  [key=0, style=solid];
m1_115 -> m1_116  [key=0, style=solid];
m1_117 -> m1_115  [color=blue, key=0, style=bold];
m1_122 -> m1_120  [color=blue, key=0, style=bold];
m1_129 -> m1_130  [key=0, style=solid];
m1_130 -> m1_128  [color=blue, key=0, style=bold];
m1_101 -> m1_111  [key=0, style=solid];
m1_101 -> m1_112  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_116  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_111 -> m1_121  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_114  [key=2, style=dotted];
m1_112 -> m1_39  [key=2, style=dotted];
m1_112 -> m1_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_113 -> m1_101  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_17  [color=darkseagreen4, key=1, label="System.Action<CommandLine.UnParserSettings>", style=dashed];
m1_13 -> m1_19  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_13 -> m1_22  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_13 -> m1_61  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_16  [key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_35  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_36  [key=2, style=dotted];
m1_19 -> m1_21  [color=darkseagreen4, key=1, label=type, style=dashed];
m1_19 -> m1_22  [color=darkseagreen4, key=1, label=type, style=dashed];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_40  [key=2, style=dotted];
m1_22 -> m1_41  [key=2, style=dotted];
m1_22 -> m1_42  [key=2, style=dotted];
m1_22 -> m1_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_22 -> m1_22  [color=darkseagreen4, key=1, label=info, style=dashed];
m1_22 -> m1_26  [color=darkseagreen4, key=1, label=specs, style=dashed];
m1_15 -> m1_33  [key=0, style=solid];
m1_15 -> m1_34  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_3  [key=2, style=dotted];
m1_16 -> m1_18  [color=darkseagreen4, key=1, label=settings, style=dashed];
m1_16 -> m1_25  [color=darkseagreen4, key=1, label=settings, style=dashed];
m1_16 -> m1_27  [color=darkseagreen4, key=1, label=settings, style=dashed];
m1_16 -> m1_29  [color=darkseagreen4, key=1, label=settings, style=dashed];
m1_16 -> m1_80  [color=darkseagreen4, key=1, label=settings, style=dashed];
m1_18 -> m1_19  [key=0, style=solid];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_43  [key=2, style=dotted];
m1_25 -> m1_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_25 -> m1_28  [color=darkseagreen4, key=1, label=optSpecs, style=dashed];
m1_25 -> m1_29  [color=darkseagreen4, key=1, label=optSpecs, style=dashed];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_45  [key=2, style=dotted];
m1_27 -> m1_46  [key=2, style=dotted];
m1_27 -> m1_47  [key=2, style=dotted];
m1_27 -> m1_48  [key=2, style=dotted];
m1_27 -> m1_49  [key=2, style=dotted];
m1_27 -> m1_50  [key=2, style=dotted];
m1_27 -> m1_27  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_27 -> m1_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_27 -> m1_29  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_27 -> m1_80  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_27 -> m1_30  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_27 -> m1_31  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_27 -> m1_84  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_27 -> m1_32  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_53  [key=2, style=dotted];
m1_29 -> m1_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_37  [key=2, style=dotted];
m1_20 -> m1_57  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_20 -> m1_27  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_38  [key=2, style=dotted];
m1_21 -> m1_39  [key=2, style=dotted];
m1_21 -> m1_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_43  [key=2, style=dotted];
m1_23 -> m1_44  [key=2, style=dotted];
m1_23 -> m1_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_23 -> m1_23  [color=darkseagreen4, key=1, label=info, style=dashed];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=allOptSpecs, style=dashed];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_43  [key=2, style=dotted];
m1_26 -> m1_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_26 -> m1_26  [color=darkseagreen4, key=1, label=info, style=dashed];
m1_26 -> m1_30  [color=darkseagreen4, key=1, label=valSpecs, style=dashed];
m1_26 -> m1_31  [color=darkseagreen4, key=1, label=valSpecs, style=dashed];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_44  [key=2, style=dotted];
m1_24 -> m1_24  [color=darkseagreen4, key=1, label=info, style=dashed];
m1_24 -> m1_70  [color=darkseagreen4, key=1, label=shortSwitches, style=dashed];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label=shortSwitches, style=dashed];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_45  [key=2, style=dotted];
m1_28 -> m1_51  [key=2, style=dotted];
m1_28 -> m1_52  [key=2, style=dotted];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_45  [key=2, style=dotted];
m1_30 -> m1_51  [key=2, style=dotted];
m1_30 -> m1_52  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_53  [key=2, style=dotted];
m1_31 -> m1_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_54  [key=2, style=dotted];
m1_32 -> m1_55  [key=2, style=dotted];
m1_33 -> m1_13  [color=blue, key=0, style=bold];
m1_131 -> m1_132  [key=0, style=solid];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_37  [key=2, style=dotted];
m1_132 -> m1_134  [key=2, style=dotted];
m1_132 -> m1_50  [key=2, style=dotted];
m1_132 -> m1_87  [key=2, style=dotted];
m1_132 -> m1_135  [key=2, style=dotted];
m1_132 -> m1_54  [key=2, style=dotted];
m1_133 -> m1_131  [color=blue, key=0, style=bold];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_10  [key=2, style=dotted];
m1_8 -> m1_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_9 -> m1_7  [color=blue, key=0, style=bold];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_144  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_142 -> m1_145  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_145  [key=0, style=solid];
m1_143 -> m1_36  [key=2, style=dotted];
m1_143 -> m1_147  [key=2, style=dotted];
m1_143 -> m1_148  [key=2, style=dotted];
m1_144 -> m1_146  [key=0, style=solid];
m1_144 -> m1_149  [key=2, style=dotted];
m1_145 -> m1_146  [key=0, style=solid];
m1_146 -> m1_142  [color=blue, key=0, style=bold];
m1_165 -> m1_57  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_165 -> m1_80  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_165 -> m1_84  [color=darkseagreen4, key=1, label=builder, style=dashed];
m1_166 -> m1_61  [color=darkseagreen4, key=1, label=T, style=dashed];
m1_167 -> m1_70  [color=darkseagreen4, key=1, label=shortSwitches, style=dashed];
m1_168 -> m1_80  [color=darkseagreen4, key=1, label=settings, style=dashed];
m1_169 -> m1_109  [color=darkseagreen4, key=1, label=sep, style=dashed];
m1_170 -> m1_121  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_2  [color=darkseagreen4, key=1, label="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>", style=dashed];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_6  [key=2, style=dotted];
m3_3 -> m3_5  [key=0, style=solid];
m3_5 -> m3_0  [color=blue, key=0, style=bold];
}
