digraph  {
n310 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n311 [label=int, span=""];
n312 [label=int, span=""];
n313 [label=int, span=""];
n314 [label=int, span=""];
n0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="17-17"];
n1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", label="return InstanceBuilder.Build(\r\n                Maybe.Just<Func<T>>(() => new T()),\r\n                (args, optionSpecs) => Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="20-26"];
n2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="17-17"];
n3 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
n4 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n5 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
n6 [cluster="lambda expression", label="Entry lambda expression", span="21-21"];
n10 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
n7 [cluster="lambda expression", label="new T()", span="21-21"];
n8 [cluster="lambda expression", label="Exit lambda expression", span="21-21"];
n9 [cluster="T.cstr", label="Entry T.cstr", span=""];
n11 [cluster="lambda expression", label="Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs)", span="22-22"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
n13 [cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", label="Entry CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="109-109"];
n14 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", span="29-29"];
n17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", span="29-29"];
n18 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n19 [cluster="lambda expression", label="Entry lambda expression", span="33-33"];
n21 [cluster="lambda expression", label="Exit lambda expression", span="33-33"];
n22 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="41-41"];
n23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = new NotParsed<Simple_Options>(\r\n                TypeInfo.Create(typeof(Simple_Options)), new Error[] { new HelpRequestedError() })", span="44-45"];
n24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--help'' })", span="48-49"];
n27 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
n28 [cluster="CommandLine.TypeInfo.Create(System.Type)", label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29"];
n29 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393"];
n25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="result.ShouldBeEquivalentTo(expectedResult)", span="52-52"];
n26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="41-41"];
n30 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
n31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="61-61"];
n32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="66-67"];
n33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="((Parsed<Simple_Options>)result).Value.LongValue.ShouldBeEquivalentTo(expected)", span="70-70"];
n34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="61-61"];
n35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="81-81"];
n36 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="var result = InvokeBuild<Simple_Options_With_Double_Value>(\r\n                arguments)", span="86-87"];
n37 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="((Parsed<Simple_Options_With_Double_Value>)result).Value.DoubleValue.ShouldBeEquivalentTo(expected)", span="90-90"];
n38 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="81-81"];
n39 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="102-102"];
n40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="var result = InvokeBuild<Options_With_Sequence>(\r\n                arguments)", span="107-108"];
n41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="((Parsed<Options_With_Sequence>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="111-111"];
n42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="102-102"];
n43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="121-121"];
n44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="126-127"];
n45 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="((Parsed<Simple_Options>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="130-130"];
n46 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="121-121"];
n47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="141-141"];
n48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint>(\r\n                arguments)", span="146-147"];
n49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="((Parsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="150-150"];
n50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="141-141"];
n51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="160-160"];
n52 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint>(\r\n                arguments)", span="165-166"];
n53 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="((Parsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="169-169"];
n54 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="160-160"];
n55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
n56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
n57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint>(\r\n                new[] { ''-s'' })", span="181-182"];
n60 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
n61 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
n58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="185-185"];
n59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
n62 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191"];
n63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="194-194"];
n64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint_For_Value>(\r\n                new string[] { })", span="197-198"];
n67 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
n65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="201-201"];
n66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191"];
n68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="207-207"];
n69 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="210-210"];
n70 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint>(\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' })", span="213-214"];
n71 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="217-217"];
n72 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="207-207"];
n73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="223-223"];
n74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="226-226"];
n75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint_For_Value>(\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' })", span="229-230"];
n76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="233-233"];
n77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="223-223"];
n78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="245-245"];
n79 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                arguments)", span="250-251"];
n80 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Enum>)result).Value.Colors)", span="254-254"];
n81 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="245-245"];
n82 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="260-260"];
n83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="263-263"];
n84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''3'' })", span="266-267"];
n87 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
n85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="270-270"];
n86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="260-260"];
n88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="276-276"];
n89 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="279-279"];
n90 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''Yellow'' })", span="282-283"];
n91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="286-286"];
n92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="276-276"];
n93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="292-292"];
n94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="295-295"];
n95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''RED'' })", span="298-299"];
n96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="302-302"];
n97 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="292-292"];
n98 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="308-308"];
n99 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="311-317"];
n100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InvokeBuild<Simple_Options_With_Values>(\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' })", span="320-321"];
n103 [cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6"];
n101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="324-324"];
n102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="308-308"];
n104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="335-335"];
n105 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="var result = InvokeBuild<Options_With_Sequence_Without_Range_For_Value>(\r\n                arguments)", span="340-341"];
n106 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Without_Range_For_Value>)result).Value.LongSequence)", span="344-344"];
n107 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="335-335"];
n108 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="354-354"];
n109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="var result = InvokeBuild<Options_With_Sequence_Having_Separator_Set>(\r\n                arguments)", span="359-360"];
n110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.LongSequence)", span="363-363"];
n111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="354-354"];
n112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="373-373"];
n113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="var result = InvokeBuild<Options_With_Sequence_Having_Separator_Set>(\r\n                arguments)", span="378-379"];
n114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.StringSequence)", span="382-382"];
n115 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="373-373"];
n116 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="391-391"];
n117 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="394-400"];
n118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="401-401"];
n120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="415-415"];
n119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Values>>(() => new Simple_Options_With_Values()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="404-412"];
n122 [cluster="lambda expression", label="Entry lambda expression", span="405-405"];
n125 [cluster="lambda expression", label="Entry lambda expression", span="406-408"];
n121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="391-391"];
n123 [cluster="lambda expression", label="new Simple_Options_With_Values()", span="405-405"];
n124 [cluster="lambda expression", label="Exit lambda expression", span="405-405"];
n126 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="407-408"];
n130 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="408-408"];
n134 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="408-408"];
n127 [cluster="lambda expression", label="Exit lambda expression", span="406-408"];
n128 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44"];
n129 [cluster="lambda expression", label="Entry lambda expression", span="408-408"];
n131 [cluster="lambda expression", label="Exit lambda expression", span="408-408"];
n132 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13"];
n133 [cluster="lambda expression", label="Entry lambda expression", span="408-408"];
n135 [cluster="lambda expression", label="Exit lambda expression", span="408-408"];
n136 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18"];
n137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="421-421"];
n138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="424-428"];
n139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InvokeBuild<Options_With_Two_Sets>(\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' })", span="431-432"];
n142 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="329-329"];
n140 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="((NotParsed<Options_With_Two_Sets>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="435-435"];
n141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="421-421"];
n143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="441-441"];
n144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new Options_With_Required_Set_To_True_Within_Same_Set {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="443-446"];
n145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InvokeBuild<Options_With_Required_Set_To_True_Within_Same_Set>(\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' })", span="448-449"];
n148 [cluster="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", label="Entry CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", span="4-4"];
n146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Value)", span="452-452"];
n147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="441-441"];
n149 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="457-457"];
n150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="459-463"];
n151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InvokeBuild<Options_With_Required_Set_To_True_Within_Same_Set>(\r\n                new string[] { })", span="465-466"];
n154 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="316-316"];
n152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="((NotParsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="469-469"];
n153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="457-457"];
n155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="475-475"];
n156 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="478-478"];
n157 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InvokeBuild<Options_With_Required_Set_To_True>(\r\n                new string[] { })", span="481-482"];
n158 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="((NotParsed<Options_With_Required_Set_To_True>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="485-485"];
n159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="475-475"];
n160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="491-491"];
n161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="494-494"];
n162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-i'', ''10'' })", span="497-498"];
n163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="501-501"];
n164 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="491-491"];
n165 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="507-507"];
n166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="510-510"];
n167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' })", span="513-514"];
n170 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="305-305"];
n168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="517-517"];
n169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="507-507"];
n171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="523-523"];
n172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="526-526"];
n173 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-z'', ''-x'' })", span="529-530"];
n174 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="533-533"];
n175 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="523-523"];
n176 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="539-539"];
n177 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="542-542"];
n178 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-zx'' })", span="545-546"];
n179 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="549-549"];
n180 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="539-539"];
n181 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="557-557"];
n182 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="562-563"];
n183 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="((Parsed<Simple_Options>)result).Value.StringValue.ShouldBeEquivalentTo(expected)", span="566-566"];
n184 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="557-557"];
n185 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="572-572"];
n186 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="575-575"];
n187 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var result = InvokeBuild<Options_With_Required_Set_To_True_For_Values>(\r\n                new string[] { })", span="578-579"];
n188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="((NotParsed<Options_With_Required_Set_To_True_For_Values>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="582-582"];
n189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="572-572"];
n190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="592-592"];
n191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="597-598"];
n192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value.StringValue)", span="601-601"];
n193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="592-592"];
n194 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="607-607"];
n195 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="610-610"];
n196 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Options_With_Sequence_Having_Both_Min_And_Max_Equal>(\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' })", span="613-614"];
n197 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="((NotParsed<Options_With_Sequence_Having_Both_Min_And_Max_Equal>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="617-617"];
n198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="607-607"];
n199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="627-627"];
n200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="var result = InvokeBuild<Options_With_Nullables>(\r\n                arguments)", span="632-633"];
n201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableInt)", span="636-636"];
n202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="627-627"];
n203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="646-646"];
n204 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="var result = InvokeBuild<Options_With_Nullables>(\r\n                arguments)", span="651-652"];
n205 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableLong)", span="655-655"];
n206 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="646-646"];
n207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="663-663"];
n208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="var result = InvokeBuild<Options_With_FSharpOption>(\r\n                arguments)", span="668-669"];
n210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.FileName.Value)", span="674-674"];
n211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.FileName))", span="676-676"];
n209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="((Parsed<Options_With_FSharpOption>)result).Value.FileName != null", span="672-672"];
n212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="663-663"];
n213 [cluster="Unk.get_IsSome", label="Entry Unk.get_IsSome", span=""];
n214 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="684-684"];
n215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="var result = InvokeBuild<Options_With_FSharpOption>(\r\n                arguments)", span="689-690"];
n217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.Offset.Value)", span="695-695"];
n218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.Offset))", span="697-697"];
n216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="((Parsed<Options_With_FSharpOption>)result).Value.Offset != null", span="693-693"];
n219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="684-684"];
n220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="704-704"];
n221 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Action test = () => InvokeBuild<Options_With_Min_Set_To_Zero>(\r\n                new string[] { })", span="707-708"];
n222 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Assert.Throws<ApplicationException>(test)", span="711-711"];
n223 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="704-704"];
n224 [cluster="Unk.>", label="Entry Unk.>", span=""];
n225 [cluster="lambda expression", label="Entry lambda expression", span="707-708"];
n226 [cluster="lambda expression", label="InvokeBuild<Options_With_Min_Set_To_Zero>(\r\n                new string[] { })", span="707-708"];
n227 [cluster="lambda expression", label="Exit lambda expression", span="707-708"];
n228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="715-715"];
n229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Action test = () => InvokeBuild<Options_With_Max_Set_To_Zero>(\r\n                new string[] { })", span="718-719"];
n230 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Assert.Throws<ApplicationException>(test)", span="722-722"];
n231 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="715-715"];
n232 [cluster="lambda expression", label="Entry lambda expression", span="718-719"];
n233 [cluster="lambda expression", label="InvokeBuild<Options_With_Max_Set_To_Zero>(\r\n                new string[] { })", span="718-719"];
n234 [cluster="lambda expression", label="Exit lambda expression", span="718-719"];
n235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="726-726"];
n236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Action test = () => InvokeBuild<Options_With_Both_Min_And_Max_Set_To_Zero>(\r\n                new string[] { })", span="729-730"];
n237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Assert.Throws<ApplicationException>(test)", span="733-733"];
n238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="726-726"];
n239 [cluster="lambda expression", label="Entry lambda expression", span="729-730"];
n240 [cluster="lambda expression", label="InvokeBuild<Options_With_Both_Min_And_Max_Set_To_Zero>(\r\n                new string[] { })", span="729-730"];
n241 [cluster="lambda expression", label="Exit lambda expression", span="729-730"];
n242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="742-742"];
n243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="var result = InvokeBuild<Options_With_Named_And_Empty_Sets>(\r\n                arguments)", span="745-746"];
n244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="type == ParserResultType.NotParsed", span="749-749"];
n245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="((NotParsed<Options_With_Named_And_Empty_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="751-751"];
n252 [cluster="lambda expression", label="x == expected", span="751-751"];
n246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="type == ParserResultType.Parsed", span="753-753"];
n247 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="result.Should().BeOfType<Parsed<Options_With_Named_And_Empty_Sets>>()", span="755-755"];
n248 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="742-742"];
n249 [cluster="Unk.Should", label="Entry Unk.Should", span=""];
n250 [cluster="Unk.HaveCount", label="Entry Unk.HaveCount", span=""];
n251 [cluster="lambda expression", label="Entry lambda expression", span="751-751"];
n253 [cluster="lambda expression", label="Exit lambda expression", span="751-751"];
n254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="761-761"];
n255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="764-765"];
n256 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == expected)", span="768-768"];
n259 [cluster="lambda expression", label="x == expected", span="768-768"];
n257 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="761-761"];
n258 [cluster="lambda expression", label="Entry lambda expression", span="768-768"];
n260 [cluster="lambda expression", label="Exit lambda expression", span="768-768"];
n261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="774-774"];
n262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="var result = InvokeBuild<Options_With_Interface>(\r\n                arguments)", span="777-778"];
n263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Interface>)result).Value.InputFile)", span="781-781"];
n264 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="774-774"];
n265 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="792-792"];
n266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="var result = InvokeBuild<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(\r\n                arguments)", span="795-796"];
n267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="type == ParserResultType.NotParsed", span="799-799"];
n268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="((NotParsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="801-801"];
n273 [cluster="lambda expression", label="x == expected", span="801-801"];
n269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="type == ParserResultType.Parsed", span="803-803"];
n270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="result.Should().BeOfType<Parsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>>()", span="805-805"];
n271 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="792-792"];
n272 [cluster="lambda expression", label="Entry lambda expression", span="801-801"];
n274 [cluster="lambda expression", label="Exit lambda expression", span="801-801"];
n275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="811-811"];
n276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", label="var result = InvokeBuild<Options_With_Required_Set_To_True_For_Values>(\r\n                arguments)", span="816-817"];
n277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_For_Values>)result).Value)", span="820-820"];
n278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="811-811"];
n279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="827-827"];
n280 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", label="var result = InvokeBuild<Options_With_Scalar_Value_And_Adjacent_SequenceString>(\r\n                arguments)", span="832-833"];
n281 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Scalar_Value_And_Adjacent_SequenceString>)result).Value)", span="836-836"];
n282 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="827-827"];
n283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="842-842"];
n284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="var expectedResult = new Simple_Options { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="845-845"];
n285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' })", span="848-849"];
n288 [cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6"];
n286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value)", span="852-852"];
n287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="842-842"];
n289 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="864-864"];
n290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="var result = InvokeBuild<Options_With_Two_Options_Having_Required_Set_To_True>(\r\n                arguments)", span="867-868"];
n292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="872-872"];
n296 [cluster="lambda expression", label="x == expected", span="872-872"];
n291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="var errors = ((NotParsed<Options_With_Two_Options_Having_Required_Set_To_True>)result).Errors", span="871-871"];
n293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="864-864"];
n294 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
n295 [cluster="lambda expression", label="Entry lambda expression", span="872-872"];
n297 [cluster="lambda expression", label="Exit lambda expression", span="872-872"];
n298 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="877-877"];
n299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", label="var result = InvokeBuildImmutable<Immutable_Simple_Options>(\r\n                arguments)", span="882-883"];
n300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", label="expected.ShouldBeEquivalentTo(((Parsed<Immutable_Simple_Options>)result).Value)", span="886-886"];
n301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="877-877"];
n302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="892-892"];
n303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="var expectedResult = new Options_With_Uri_And_SimpleType { EndPoint = new Uri(''http://localhost/test/''), MyValue = new MySimpleType(''custom-value'') }", span="895-895"];
n304 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="var result = InvokeBuild<Options_With_Uri_And_SimpleType>(\r\n                new[] { ''--endpoint=http://localhost/test/'', ''custom-value'' })", span="898-899"];
n307 [cluster="CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()", label="Entry CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()", span="23-23"];
n308 [cluster="System.Uri.Uri(string)", label="Entry System.Uri.Uri(string)", span="0-0"];
n309 [cluster="CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", label="Entry CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", span="12-12"];
n305 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Uri_And_SimpleType>)result).Value)", span="902-902"];
n306 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="892-892"];
m1_32 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="48-48"];
m1_33 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="50-50"];
m1_34 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(Token.Value)", span="51-51"];
m1_36 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="return tokenizer(arguments);", span="54-54"];
m1_35 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="return tokenizerResult.Map(tokens => tokens.Concat(values));", span="52-52"];
m1_37 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44"];
m1_3 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", span="20-20"];
m1_7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs", label="var errors = new List<Error>()", span="25-25"];
m1_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs", label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token)\r\n                            .Memorize()", span="28-35"];
m1_10 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs", label="var normalized = normalize(tokens)", span="37-37"];
m1_11 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs", label="var unkTokens = (from t in normalized where t.IsName() && nameLookup(t.Text) == NameLookupResult.NoOptionFound select t).Memorize()", span="39-39"];
m1_8 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs", label="Action<Error> onError = errors.Add", span="26-26"];
m1_12 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs", label="return Result.Succeed(normalized.Where(x => !unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="41-41"];
m1_13 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", span="20-20"];
m1_201 [cluster="string.Split(params char[])", file="Tokenizer.cs", label="Entry string.Split(params char[])", span="0-0"];
m1_86 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_97 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78"];
m1_98 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="var indexes =\r\n                from i in\r\n                    tokens.Select(\r\n                        (t, i) =>\r\n                        {\r\n                            var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe();\r\n                            return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();\r\n                        }).Where(i => i.IsJust())\r\n                select i.FromJust()", span="81-92"];
m1_99 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="var toExclude =\r\n                from t in\r\n                    tokens.Select((t, i) => indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>())\r\n                        .Where(t => t.IsJust())\r\n                select t.FromJust()", span="94-98"];
m1_100 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="var normalized = tokens.Except(toExclude)", span="100-100"];
m1_101 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="return normalized;", span="102-102"];
m1_102 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78"];
m1_118 [cluster="Unk.nameLookup", file="Tokenizer.cs", label="Entry Unk.nameLookup", span=""];
m1_18 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", span="132-132"];
m1_162 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="136-136"];
m1_165 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="yield return Token.Value(value);", span="142-142"];
m1_166 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="yield break;", span="143-143"];
m1_168 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="148-148"];
m1_169 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="yield break;", span="149-149"];
m1_176 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="yield return Token.Name(n);", span="160-160"];
m1_179 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="yield return Token.Value(text.Substring(i));", span="167-167"];
m1_163 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="var text = value.Substring(1)", span="138-138"];
m1_167 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="value.Length == 2", span="146-146"];
m1_173 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="var r = nameLookup(n)", span="156-156"];
m1_164 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="char.IsDigit(text[0])", span="140-140"];
m1_171 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label=text, span="153-153"];
m1_178 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="i < text.Length", span="165-165"];
m1_170 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="var i = 0", span="152-152"];
m1_174 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="i > 0 && r == NameLookupResult.NoOptionFound", span="158-158"];
m1_175 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="i++", span="159-159"];
m1_172 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="var n = new string(c, 1)", span="155-155"];
m1_177 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="r == NameLookupResult.OtherOptionFound", span="162-162"];
m1_180 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", span="132-132"];
m1_138 [cluster="Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", file="Tokenizer.cs", label="Entry Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", span=""];
m1_199 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="221-221"];
m1_57 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
m1_58 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var tokens = tokenizerResult.SucceededWith()", span="61-61"];
m1_59 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var replaces = tokens.Select((t, i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="63-66"];
m1_62 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());", span="75-75"];
m1_60 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var exploded = tokens.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[] { t })))", span="68-71"];
m1_61 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="var flattened = exploded.SelectMany(x => x)", span="73-73"];
m1_63 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
m1_15 [cluster="string.StartsWith(string, System.StringComparison)", file="Tokenizer.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m1_65 [cluster="Unk.SkipWhile", file="Tokenizer.cs", label="Entry Unk.SkipWhile", span=""];
m1_183 [cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m1_200 [cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_21 [cluster="CommandLine.Core.Token.IsName()", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m1_38 [cluster="Unk.Any", file="Tokenizer.cs", label="Entry Unk.Any", span=""];
m1_16 [cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m1_117 [cluster="Unk.IsName", file="Tokenizer.cs", label="Entry Unk.IsName", span=""];
m1_22 [cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m1_161 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Tokenizer.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27"];
m1_23 [cluster="Unk.Where", file="Tokenizer.cs", label="Entry Unk.Where", span=""];
m1_76 [cluster="Unk.Create", file="Tokenizer.cs", label="Entry Unk.Create", span=""];
m1_85 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Tokenizer.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_184 [cluster="string.String(char, int)", file="Tokenizer.cs", label="Entry string.String(char, int)", span="0-0"];
m1_109 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", span="0-0"];
m1_129 [cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="109-109"];
m1_130 [cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="Tokenizer.cs", label="return (arguments, optionSpecs) =>\r\n                {\r\n                    var normalize = ignoreUnknownArguments\r\n                        ? toks => Tokenizer.Normalize(toks,\r\n                            name => NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound)\r\n                        : new Func<IEnumerable<Token>, IEnumerable<Token>>(toks => toks);\r\n\r\n                    var tokens = enableDashDash\r\n                        ? Tokenizer.PreprocessDashDash(\r\n                                arguments,\r\n                                args =>\r\n                                    Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize))\r\n                        : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize);\r\n                    var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                    return explodedTokens;\r\n                };", span="114-129"];
m1_131 [cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="109-109"];
m1_145 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Tokenizer.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18"];
m1_30 [cluster="Unk.Contains", file="Tokenizer.cs", label="Entry Unk.Contains", span=""];
m1_84 [cluster="Unk.ToMaybe", file="Tokenizer.cs", label="Entry Unk.ToMaybe", span=""];
m1_110 [cluster="T.ToMaybe<T>()", file="Tokenizer.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m1_71 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="Tokenizer.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m1_112 [cluster="CSharpx.Maybe.Just<T>(T)", file="Tokenizer.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m1_152 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="125-125"];
m1_4 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="17-17"];
m1_5 [cluster="lambda expression", file="Tokenizer.cs", label=tokens, span="17-17"];
m1_6 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="17-17"];
m1_28 [cluster="lambda expression", file="Tokenizer.cs", label="!unkTokens.Contains(x)", span="41-41"];
m1_27 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="41-41"];
m1_29 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="41-41"];
m1_44 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="48-48"];
m1_48 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="50-50"];
m1_51 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="51-51"];
m1_55 [cluster="lambda expression", file="Tokenizer.cs", label="tokens.Concat(values)", span="52-52"];
m1_54 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="52-52"];
m1_45 [cluster="lambda expression", file="Tokenizer.cs", label="arg.EqualsOrdinal(''--'')", span="48-48"];
m1_46 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="48-48"];
m1_49 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="50-50"];
m1_50 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="50-50"];
m1_52 [cluster="lambda expression", file="Tokenizer.cs", label="!arg.EqualsOrdinal(''--'')", span="51-51"];
m1_53 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="51-51"];
m1_56 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="52-52"];
m1_69 [cluster="lambda expression", file="Tokenizer.cs", label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="64-66"];
m1_68 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="63-66"];
m1_77 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="66-66"];
m1_81 [cluster="lambda expression", file="Tokenizer.cs", label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[] { t }))", span="69-71"];
m1_80 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="68-71"];
m1_94 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="73-73"];
m1_74 [cluster="lambda expression", file="Tokenizer.cs", label="Tuple.Create(i + 1, sep)", span="65-65"];
m1_70 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="63-66"];
m1_73 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="65-65"];
m1_75 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="65-65"];
m1_78 [cluster="lambda expression", file="Tokenizer.cs", label="x.Item1 < 0", span="66-66"];
m1_79 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="66-66"];
m1_88 [cluster="lambda expression", file="Tokenizer.cs", label="x.Item1 == i", span="69-69"];
m1_91 [cluster="lambda expression", file="Tokenizer.cs", label="t.Text.Split(r.Item2).Select(Token.Value)", span="70-70"];
m1_82 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="68-71"];
m1_87 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="69-69"];
m1_90 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="70-70"];
m1_89 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="69-69"];
m1_92 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="70-70"];
m1_95 [cluster="lambda expression", file="Tokenizer.cs", label=x, span="73-73"];
m1_96 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="73-73"];
m1_106 [cluster="lambda expression", file="Tokenizer.cs", label="var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe()", span="86-86"];
m1_107 [cluster="lambda expression", file="Tokenizer.cs", label="return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();", span="87-90"];
m1_115 [cluster="lambda expression", file="Tokenizer.cs", label="p.IsName() && !nameLookup(p.Text)", span="88-88"];
m1_105 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="84-91"];
m1_119 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="91-91"];
m1_124 [cluster="lambda expression", file="Tokenizer.cs", label="indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>()", span="96-96"];
m1_123 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="96-96"];
m1_126 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="97-97"];
m1_108 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="84-91"];
m1_114 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="88-88"];
m1_116 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="88-88"];
m1_120 [cluster="lambda expression", file="Tokenizer.cs", label="i.IsJust()", span="91-91"];
m1_121 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="91-91"];
m1_125 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="96-96"];
m1_127 [cluster="lambda expression", file="Tokenizer.cs", label="t.IsJust()", span="97-97"];
m1_128 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="97-97"];
m1_133 [cluster="lambda expression", file="Tokenizer.cs", label="var normalize = ignoreUnknownArguments\r\n                        ? toks => Tokenizer.Normalize(toks,\r\n                            name => NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound)\r\n                        : new Func<IEnumerable<Token>, IEnumerable<Token>>(toks => toks)", span="116-119"];
m1_140 [cluster="lambda expression", file="Tokenizer.cs", label="Tokenizer.Normalize(toks,\r\n                            name => NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound)", span="117-118"];
m1_143 [cluster="lambda expression", file="Tokenizer.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound", span="118-118"];
m1_134 [cluster="lambda expression", file="Tokenizer.cs", label="var tokens = enableDashDash\r\n                        ? Tokenizer.PreprocessDashDash(\r\n                                arguments,\r\n                                args =>\r\n                                    Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize))\r\n                        : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize)", span="121-126"];
m1_150 [cluster="lambda expression", file="Tokenizer.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize)", span="125-125"];
m1_153 [cluster="lambda expression", file="Tokenizer.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="125-125"];
m1_156 [cluster="lambda expression", file="Tokenizer.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="126-126"];
m1_135 [cluster="lambda expression", file="Tokenizer.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="127-127"];
m1_159 [cluster="lambda expression", file="Tokenizer.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="127-127"];
m1_132 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="114-129"];
m1_147 [cluster="lambda expression", file="Tokenizer.cs", label=toks, span="119-119"];
m1_149 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="124-125"];
m1_155 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="126-126"];
m1_136 [cluster="lambda expression", file="Tokenizer.cs", label="return explodedTokens;", span="128-128"];
m1_158 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="127-127"];
m1_137 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="114-129"];
m1_139 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="117-118"];
m1_141 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="117-118"];
m1_142 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="118-118"];
m1_144 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="118-118"];
m1_146 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="119-119"];
m1_148 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="119-119"];
m1_151 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="124-125"];
m1_154 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="125-125"];
m1_157 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="126-126"];
m1_160 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="127-127"];
m1_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m1_17 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="172-172"];
m1_185 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="176-176"];
m1_189 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(text);", span="182-182"];
m1_190 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="183-183"];
m1_193 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield break;", span="188-188"];
m1_195 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Name(parts[0]);", span="191-191"];
m1_196 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="yield return Token.Value(parts[1], true);", span="192-192"];
m1_186 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var text = value.Substring(2)", span="178-178"];
m1_192 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="onError(new BadFormatTokenError(value))", span="187-187"];
m1_187 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var equalIndex = text.IndexOf('=')", span="179-179"];
m1_194 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="var parts = text.Split('=')", span="190-190"];
m1_188 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex <= 0", span="180-180"];
m1_191 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="equalIndex == 1", span="185-185"];
m1_197 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="172-172"];
m1_67 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="Tokenizer.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15"];
m1_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m1_25 [cluster="Unk.Concat", file="Tokenizer.cs", label="Entry Unk.Concat", span=""];
m1_43 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", file="Tokenizer.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", span="534-534"];
m1_47 [cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs", label="Entry string.EqualsOrdinal(string)", span="40-40"];
m1_39 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m1_198 [cluster="string.IndexOf(char)", file="Tokenizer.cs", label="Entry string.IndexOf(char)", span="0-0"];
m1_42 [cluster="Unk.Select", file="Tokenizer.cs", label="Entry Unk.Select", span=""];
m1_122 [cluster="Unk.IsJust", file="Tokenizer.cs", label="Entry Unk.IsJust", span=""];
m1_19 [cluster="Unk.Memorize", file="Tokenizer.cs", label="Entry Unk.Memorize", span=""];
m1_104 [cluster="Unk.Except", file="Tokenizer.cs", label="Entry Unk.Except", span=""];
m1_72 [cluster="Unk.Return", file="Tokenizer.cs", label="Entry Unk.Return", span=""];
m1_113 [cluster="CSharpx.Maybe.Nothing<T>()", file="Tokenizer.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_64 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="Tokenizer.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
m1_111 [cluster="CommandLine.Core.Token.IsValue()", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.IsValue()", span="133-133"];
m1_103 [cluster="Unk.FromJust", file="Tokenizer.cs", label="Entry Unk.FromJust", span=""];
m1_182 [cluster="char.IsDigit(char)", file="Tokenizer.cs", label="Entry char.IsDigit(char)", span="0-0"];
m1_14 [cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_0 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13"];
m1_1 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="return Tokenizer.Tokenize(arguments, nameLookup, tokens => tokens);", span="17-17"];
m1_2 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13"];
m1_202 [cluster="CommandLine.Core.Token.Value(string, bool)", file="Tokenizer.cs", label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29"];
m1_24 [cluster="UnknownOptionError.cstr", file="Tokenizer.cs", label="Entry UnknownOptionError.cstr", span=""];
m1_20 [cluster="Unk.normalize", file="Tokenizer.cs", label="Entry Unk.normalize", span=""];
m1_66 [cluster="Unk.SelectMany", file="Tokenizer.cs", label="Entry Unk.SelectMany", span=""];
m1_83 [cluster="Unk.FirstOrDefault", file="Tokenizer.cs", label="Entry Unk.FirstOrDefault", span=""];
m1_93 [cluster="Unk.Split", file="Tokenizer.cs", label="Entry Unk.Split", span=""];
m1_26 [cluster="Unk.Succeed", file="Tokenizer.cs", label="Entry Unk.Succeed", span=""];
m1_181 [cluster="string.Substring(int)", file="Tokenizer.cs", label="Entry string.Substring(int)", span="0-0"];
m1_203 [file="Tokenizer.cs", label=unkTokens, span=""];
m1_204 [file="Tokenizer.cs", label=values, span=""];
m1_205 [file="Tokenizer.cs", label="System.Func<string, CSharpx.Maybe<char>>", span=""];
m1_206 [file="Tokenizer.cs", label=int, span=""];
m1_207 [file="Tokenizer.cs", label=replaces, span=""];
m1_208 [file="Tokenizer.cs", label=int, span=""];
m1_209 [file="Tokenizer.cs", label="CommandLine.Core.Token", span=""];
m1_210 [file="Tokenizer.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m1_211 [file="Tokenizer.cs", label="System.Func<string, bool>", span=""];
m1_212 [file="Tokenizer.cs", label=indexes, span=""];
m1_213 [file="Tokenizer.cs", label="System.StringComparer", span=""];
m1_214 [file="Tokenizer.cs", label=bool, span=""];
m1_215 [file="Tokenizer.cs", label=bool, span=""];
m1_216 [file="Tokenizer.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_217 [file="Tokenizer.cs", label=normalize, span=""];
m2_0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m2_3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=green, community=0, file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)\r\n                )", prediction=0, span="28-31"];
m2_2 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(string), TargetType.Scalar),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<int>), TargetType.Sequence)\r\n                }", span="21-25"];
m2_4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34"];
m2_1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20"];
m2_5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m2_13 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m2_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m2_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m2_15 [cluster="Unk.True", file="TokenPartitionerTests.cs", label="Entry Unk.True", span=""];
m2_14 [cluster="Unk.All", file="TokenPartitionerTests.cs", label="Entry Unk.All", span=""];
m2_41 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m2_16 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="30-30"];
m2_21 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34"];
m2_17 [cluster="lambda expression", color=green, community=0, file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)", prediction=1, span="30-30"];
m2_18 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="30-30"];
m2_35 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="56-56"];
m2_39 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="60-60"];
m2_36 [cluster="lambda expression", color=green, community=0, file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)", prediction=2, span="56-56"];
m2_37 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="56-56"];
m2_20 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m2_22 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m2_24 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m2_25 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34"];
m2_38 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m2_40 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m2_42 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="60-60"];
m2_26 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m2_43 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m2_27 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m2_19 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m2_11 [cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m2_8 [cluster="CSharpx.Maybe.Nothing<T>()", file="TokenPartitionerTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m2_28 [cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m2_23 [cluster="Unk.Any", file="TokenPartitionerTests.cs", label="Entry Unk.Any", span=""];
m2_12 [cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m2_29 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m2_32 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=green, community=0, file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)\r\n                )", prediction=3, span="54-57"];
m2_31 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(string), TargetType.Scalar),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<int>), TargetType.Sequence)\r\n                }", span="47-51"];
m2_33 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="60-60"];
m2_30 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="43-46"];
m2_34 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m2_9 [cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_44 [file="TokenPartitionerTests.cs", label=specs, span=""];
m2_47 [file="TokenPartitionerTests.cs", label=specs, span=""];
m2_45 [file="TokenPartitionerTests.cs", label=result, span=""];
m2_48 [file="TokenPartitionerTests.cs", label=result, span=""];
m2_46 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m2_49 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m4_3 [cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", file="TypeLookup.cs", label="Entry CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", span="61-61"];
m4_0 [cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="TypeLookup.cs", label="Entry CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", span="47-47"];
m4_1 [cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="TypeLookup.cs", label="Assumes.NotNullOrEmpty(longName, ''longName'')", span="50-50"];
m4_2 [cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="TypeLookup.cs", label="Exit CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", span="47-47"];
n310 -> n130  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n310 -> n134  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n311 -> n252  [color=darkseagreen4, key=1, label=int, style=dashed];
n312 -> n259  [color=darkseagreen4, key=1, label=int, style=dashed];
n313 -> n273  [color=darkseagreen4, key=1, label=int, style=dashed];
n314 -> n296  [color=darkseagreen4, key=1, label=int, style=dashed];
n1 -> n6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n1 -> n10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n23 -> n25  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n31 -> n33  [color=darkseagreen4, key=1, label=long, style=dashed];
n35 -> n37  [color=darkseagreen4, key=1, label=double, style=dashed];
n39 -> n41  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n43 -> n45  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n47 -> n49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n51 -> n53  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n56 -> n58  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n63 -> n65  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n69 -> n71  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n74 -> n76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n78 -> n80  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n80 -> n80  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n83 -> n85  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n89 -> n91  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n94 -> n96  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n99 -> n101  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n104 -> n106  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n108 -> n110  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n112 -> n114  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n117 -> n120  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n119 -> n122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n125 -> n130  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n125 -> n134  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n126 -> n129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n130 -> n133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n138 -> n140  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n144 -> n146  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n150 -> n152  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n156 -> n158  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n161 -> n163  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n166 -> n168  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n172 -> n174  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n177 -> n179  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n181 -> n183  [color=darkseagreen4, key=1, label=string, style=dashed];
n186 -> n188  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n190 -> n192  [color=darkseagreen4, key=1, label=string, style=dashed];
n195 -> n197  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n199 -> n201  [color=darkseagreen4, key=1, label="int?", style=dashed];
n203 -> n205  [color=darkseagreen4, key=1, label="long?", style=dashed];
n207 -> n210  [color=darkseagreen4, key=1, label=string, style=dashed];
n207 -> n211  [color=darkseagreen4, key=1, label=bool, style=dashed];
n208 -> n210  [color=darkseagreen4, key=1, label=result, style=dashed];
n208 -> n211  [color=darkseagreen4, key=1, label=result, style=dashed];
n214 -> n217  [color=darkseagreen4, key=1, label=int, style=dashed];
n214 -> n218  [color=darkseagreen4, key=1, label=bool, style=dashed];
n215 -> n217  [color=darkseagreen4, key=1, label=result, style=dashed];
n215 -> n218  [color=darkseagreen4, key=1, label=result, style=dashed];
n242 -> n244  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
n242 -> n245  [color=darkseagreen4, key=1, label=int, style=dashed];
n242 -> n252  [color=darkseagreen4, key=1, label=int, style=dashed];
n242 -> n246  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
n243 -> n245  [color=darkseagreen4, key=1, label=result, style=dashed];
n243 -> n247  [color=darkseagreen4, key=1, label=result, style=dashed];
n245 -> n251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n254 -> n256  [color=darkseagreen4, key=1, label=int, style=dashed];
n254 -> n259  [color=darkseagreen4, key=1, label=int, style=dashed];
n256 -> n258  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n261 -> n263  [color=darkseagreen4, key=1, label=string, style=dashed];
n265 -> n267  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
n265 -> n268  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n273  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n269  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
n266 -> n268  [color=darkseagreen4, key=1, label=result, style=dashed];
n266 -> n270  [color=darkseagreen4, key=1, label=result, style=dashed];
n268 -> n272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n275 -> n277  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values", style=dashed];
n279 -> n281  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString", style=dashed];
n284 -> n286  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n289 -> n292  [color=darkseagreen4, key=1, label=int, style=dashed];
n289 -> n296  [color=darkseagreen4, key=1, label=int, style=dashed];
n292 -> n295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n298 -> n300  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Immutable_Simple_Options", style=dashed];
n303 -> n305  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_32 -> m1_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_35  [color=darkseagreen4, key=1, label=tokenizerResult, style=dashed];
m1_34 -> m1_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_34 -> m1_55  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_35 -> m1_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_7 -> m1_12  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_10 -> m1_12  [color=darkseagreen4, key=1, label=normalized, style=dashed];
m1_11 -> m1_28  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
m1_12 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_12 -> m1_12  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_97 -> m1_107  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_97 -> m1_115  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_97 -> m1_99  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_98 -> m1_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_98 -> m1_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_98 -> m1_124  [color=darkseagreen4, key=1, label=indexes, style=dashed];
m1_99 -> m1_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_99 -> m1_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_99 -> m1_99  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_18 -> m1_167  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_163 -> m1_168  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_163 -> m1_171  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_163 -> m1_178  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_163 -> m1_179  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_173 -> m1_177  [color=darkseagreen4, key=1, label=r, style=dashed];
m1_170 -> m1_174  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_170 -> m1_175  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_170 -> m1_178  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_170 -> m1_179  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_175 -> m1_175  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_175 -> m1_178  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_175 -> m1_179  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_172 -> m1_176  [color=darkseagreen4, key=1, label=n, style=dashed];
m1_57 -> m1_69  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m1_57 -> m1_62  [color=darkseagreen4, key=1, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>", style=dashed];
m1_59 -> m1_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_59 -> m1_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_59 -> m1_81  [color=darkseagreen4, key=1, label=replaces, style=dashed];
m1_60 -> m1_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_61 -> m1_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_129 -> m1_140  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_129 -> m1_143  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_129 -> m1_150  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_129 -> m1_153  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_129 -> m1_156  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_129 -> m1_159  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_130 -> m1_140  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_130 -> m1_143  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_130 -> m1_150  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_130 -> m1_153  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_130 -> m1_156  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_130 -> m1_159  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_69 -> m1_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_68 -> m1_74  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_81 -> m1_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_81 -> m1_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_80 -> m1_88  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_80 -> m1_91  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_107 -> m1_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_105 -> m1_107  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_133 -> m1_140  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_133 -> m1_147  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_133 -> m1_150  [color=darkseagreen4, key=1, label=normalize, style=dashed];
m1_140 -> m1_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_134 -> m1_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_134 -> m1_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_150 -> m1_152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_135 -> m1_158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_132 -> m1_140  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_132 -> m1_143  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_132 -> m1_150  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_132 -> m1_153  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_132 -> m1_156  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_132 -> m1_159  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_17 -> m1_192  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_186 -> m1_189  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_187 -> m1_191  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
m1_194 -> m1_196  [color=darkseagreen4, key=1, label=parts, style=dashed];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_203 -> m1_28  [color=darkseagreen4, key=1, label=unkTokens, style=dashed];
m1_204 -> m1_55  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_205 -> m1_69  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m1_206 -> m1_74  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_207 -> m1_81  [color=darkseagreen4, key=1, label=replaces, style=dashed];
m1_208 -> m1_88  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_209 -> m1_91  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m1_211 -> m1_107  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_211 -> m1_115  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_212 -> m1_124  [color=darkseagreen4, key=1, label=indexes, style=dashed];
m1_213 -> m1_140  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_213 -> m1_143  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_213 -> m1_150  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_213 -> m1_153  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_213 -> m1_156  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_213 -> m1_159  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_216 -> m1_140  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_216 -> m1_143  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_216 -> m1_150  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_216 -> m1_153  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_216 -> m1_156  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_216 -> m1_159  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_217 -> m1_150  [color=darkseagreen4, key=1, label=normalize, style=dashed];
m2_3 -> m2_16  [color=green, key=1, label="lambda expression", style=dashed];
m2_3 -> m2_21  [color=green, key=1, label=result, style=dashed];
m2_2 -> m2_17  [color=green, key=1, label=specs, style=dashed];
m2_4 -> m2_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1 -> m2_4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m2_21 -> m2_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_21 -> m2_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m2_39 -> m2_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_39 -> m2_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m2_25 -> m2_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m2_42 -> m2_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m2_32 -> m2_35  [color=green, key=1, label="lambda expression", style=dashed];
m2_32 -> m2_39  [color=green, key=1, label=result, style=dashed];
m2_31 -> m2_36  [color=green, key=1, label=specs, style=dashed];
m2_33 -> m2_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_30 -> m2_33  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m2_44 -> m2_17  [color=green, key=1, label=specs, style=dashed];
m2_47 -> m2_36  [color=green, key=1, label=specs, style=dashed];
m2_45 -> m2_21  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_48 -> m2_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_46 -> m2_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m2_49 -> m2_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
}
