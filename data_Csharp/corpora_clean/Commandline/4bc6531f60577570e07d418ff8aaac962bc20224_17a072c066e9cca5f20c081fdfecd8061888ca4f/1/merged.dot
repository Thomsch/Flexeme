digraph  {
n310 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n311 [label=int, span=""];
n312 [label=int, span=""];
n313 [label=int, span=""];
n314 [label=int, span=""];
n0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="17-17", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])"];
n1 [label="return InstanceBuilder.Build(\r\n                Maybe.Just<Func<T>>(() => new T()),\r\n                (args, optionSpecs) => Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="20-26", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])"];
n2 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="17-17", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])"];
n3 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)"];
n4 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()"];
n5 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
n6 [label="Entry lambda expression", span="21-21", cluster="lambda expression"];
n10 [label="Entry lambda expression", span="22-22", cluster="lambda expression"];
n7 [label="new T()", span="21-21", cluster="lambda expression"];
n8 [label="Exit lambda expression", span="21-21", cluster="lambda expression"];
n9 [label="Entry T.cstr", span="", cluster="T.cstr"];
n11 [label="Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs)", span="22-22", cluster="lambda expression"];
n12 [label="Exit lambda expression", span="22-22", cluster="lambda expression"];
n13 [label="Entry CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="109-109", cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)"];
n14 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
n15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", span="29-29", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])"];
n16 [label="return InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<T>>(),\r\n                                (args, optionSpecs) => Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="31-37", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", color=red, community=0];
n17 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", span="29-29", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])"];
n18 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
n19 [label="Entry lambda expression", span="33-33", cluster="lambda expression"];
n20 [label="Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs)", span="33-33", cluster="lambda expression", color=red, community=0];
n21 [label="Exit lambda expression", span="33-33", cluster="lambda expression"];
n22 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n23 [label="var expectedResult = new NotParsed<Simple_Options>(\r\n                TypeInfo.Create(typeof(Simple_Options)), new Error[] { new HelpRequestedError() })", span="44-45", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n24 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--help'' })", span="48-49", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n27 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n28 [label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29", cluster="CommandLine.TypeInfo.Create(System.Type)"];
n29 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
n25 [label="result.ShouldBeEquivalentTo(expectedResult)", span="52-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="41-41", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
n30 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
n31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="61-61", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n32 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="66-67", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n33 [label="((Parsed<Simple_Options>)result).Value.LongValue.ShouldBeEquivalentTo(expected)", span="70-70", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="61-61", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
n35 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="81-81", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n36 [label="var result = InvokeBuild<Simple_Options_With_Double_Value>(\r\n                arguments)", span="86-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n37 [label="((Parsed<Simple_Options_With_Double_Value>)result).Value.DoubleValue.ShouldBeEquivalentTo(expected)", span="90-90", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n38 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="81-81", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
n39 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="102-102", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n40 [label="var result = InvokeBuild<Options_With_Sequence>(\r\n                arguments)", span="107-108", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n41 [label="((Parsed<Options_With_Sequence>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="111-111", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n42 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="102-102", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
n43 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n44 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="126-127", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n45 [label="((Parsed<Simple_Options>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="130-130", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n46 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
n47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="141-141", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n48 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint>(\r\n                arguments)", span="146-147", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n49 [label="((Parsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="150-150", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="141-141", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
n51 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="160-160", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n52 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint>(\r\n                arguments)", span="165-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n53 [label="((Parsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="169-169", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n54 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="160-160", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
n55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n56 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n57 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint>(\r\n                new[] { ''-s'' })", span="181-182", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n60 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
n61 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
n58 [label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="185-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n59 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
n62 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n63 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n64 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint_For_Value>(\r\n                new string[] { })", span="197-198", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n67 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
n65 [label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="201-201", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n66 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n68 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n69 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="210-210", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n70 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint>(\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' })", span="213-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n71 [label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="217-217", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n72 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="207-207", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
n73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="223-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="226-226", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n75 [label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint_For_Value>(\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' })", span="229-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n76 [label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="233-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="223-223", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n78 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n79 [label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                arguments)", span="250-251", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n80 [label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Enum>)result).Value.Colors)", span="254-254", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n81 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="245-245", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
n82 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="260-260", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n83 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="263-263", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n84 [label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''3'' })", span="266-267", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n87 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
n85 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="270-270", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n86 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="260-260", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()"];
n88 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="276-276", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n89 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="279-279", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n90 [label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''Yellow'' })", span="282-283", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n91 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="286-286", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n92 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="276-276", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()"];
n93 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="292-292", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n94 [label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="295-295", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n95 [label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''RED'' })", span="298-299", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n96 [label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="302-302", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n97 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="292-292", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()"];
n98 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="308-308", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n99 [label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="311-317", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n100 [label="var result = InvokeBuild<Simple_Options_With_Values>(\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' })", span="320-321", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n103 [label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()"];
n101 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="324-324", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n102 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="308-308", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
n104 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="335-335", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n105 [label="var result = InvokeBuild<Options_With_Sequence_Without_Range_For_Value>(\r\n                arguments)", span="340-341", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n106 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Without_Range_For_Value>)result).Value.LongSequence)", span="344-344", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n107 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="335-335", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
n108 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="354-354", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n109 [label="var result = InvokeBuild<Options_With_Sequence_Having_Separator_Set>(\r\n                arguments)", span="359-360", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n110 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.LongSequence)", span="363-363", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n111 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="354-354", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
n112 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n113 [label="var result = InvokeBuild<Options_With_Sequence_Having_Separator_Set>(\r\n                arguments)", span="378-379", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n114 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.StringSequence)", span="382-382", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n115 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="373-373", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
n116 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="391-391", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n117 [label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="394-400", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n118 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="401-401", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n120 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="415-415", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n119 [label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Values>>(() => new Simple_Options_With_Values()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="404-412", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n122 [label="Entry lambda expression", span="405-405", cluster="lambda expression"];
n125 [label="Entry lambda expression", span="406-408", cluster="lambda expression"];
n121 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="391-391", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
n123 [label="new Simple_Options_With_Values()", span="405-405", cluster="lambda expression"];
n124 [label="Exit lambda expression", span="405-405", cluster="lambda expression"];
n126 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="407-408", cluster="lambda expression"];
n130 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="408-408", cluster="lambda expression"];
n134 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="408-408", cluster="lambda expression"];
n127 [label="Exit lambda expression", span="406-408", cluster="lambda expression"];
n128 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)"];
n129 [label="Entry lambda expression", span="408-408", cluster="lambda expression"];
n131 [label="Exit lambda expression", span="408-408", cluster="lambda expression"];
n132 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)"];
n133 [label="Entry lambda expression", span="408-408", cluster="lambda expression"];
n135 [label="Exit lambda expression", span="408-408", cluster="lambda expression"];
n136 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n137 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="421-421", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n138 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="424-428", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n139 [label="var result = InvokeBuild<Options_With_Two_Sets>(\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' })", span="431-432", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n142 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="329-329", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)"];
n140 [label="((NotParsed<Options_With_Two_Sets>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="435-435", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n141 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="421-421", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
n143 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="441-441", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n144 [label="var expectedResult = new Options_With_Required_Set_To_True_Within_Same_Set {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="443-446", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n145 [label="var result = InvokeBuild<Options_With_Required_Set_To_True_Within_Same_Set>(\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' })", span="448-449", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n148 [label="Entry CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", span="4-4", cluster="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()"];
n146 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Value)", span="452-452", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n147 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="441-441", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
n149 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="457-457", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n150 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="459-463", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n151 [label="var result = InvokeBuild<Options_With_Required_Set_To_True_Within_Same_Set>(\r\n                new string[] { })", span="465-466", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n154 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
n152 [label="((NotParsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="469-469", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n153 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="457-457", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
n155 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="475-475", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n156 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="478-478", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n157 [label="var result = InvokeBuild<Options_With_Required_Set_To_True>(\r\n                new string[] { })", span="481-482", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n158 [label="((NotParsed<Options_With_Required_Set_To_True>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="485-485", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n159 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="475-475", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
n160 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="491-491", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n161 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="494-494", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n162 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-i'', ''10'' })", span="497-498", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n163 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="501-501", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n164 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="491-491", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
n165 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="507-507", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n166 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="510-510", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n167 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' })", span="513-514", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n170 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="305-305", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
n168 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="517-517", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n169 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="507-507", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
n171 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="523-523", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n172 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="526-526", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n173 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-z'', ''-x'' })", span="529-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n174 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="533-533", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n175 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="523-523", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
n176 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n177 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="542-542", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n178 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-zx'' })", span="545-546", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n179 [label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="549-549", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n180 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="539-539", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
n181 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n182 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="562-563", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n183 [label="((Parsed<Simple_Options>)result).Value.StringValue.ShouldBeEquivalentTo(expected)", span="566-566", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n184 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="557-557", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
n185 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="572-572", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n186 [label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="575-575", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n187 [label="var result = InvokeBuild<Options_With_Required_Set_To_True_For_Values>(\r\n                new string[] { })", span="578-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n188 [label="((NotParsed<Options_With_Required_Set_To_True_For_Values>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="582-582", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n189 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="572-572", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()"];
n190 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="592-592", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
n191 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="597-598", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
n192 [label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value.StringValue)", span="601-601", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
n193 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="592-592", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)"];
n194 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="607-607", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n195 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="610-610", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n196 [label="var result = InvokeBuild<Options_With_Sequence_Having_Both_Min_And_Max_Equal>(\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' })", span="613-614", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n197 [label="((NotParsed<Options_With_Sequence_Having_Both_Min_And_Max_Equal>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="617-617", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n198 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="607-607", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
n199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
n200 [label="var result = InvokeBuild<Options_With_Nullables>(\r\n                arguments)", span="632-633", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
n201 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableInt)", span="636-636", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
n202 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="627-627", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)"];
n203 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="646-646", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
n204 [label="var result = InvokeBuild<Options_With_Nullables>(\r\n                arguments)", span="651-652", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
n205 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableLong)", span="655-655", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
n206 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="646-646", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)"];
n207 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="663-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n208 [label="var result = InvokeBuild<Options_With_FSharpOption>(\r\n                arguments)", span="668-669", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n210 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.FileName.Value)", span="674-674", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n211 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.FileName))", span="676-676", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n209 [label="((Parsed<Options_With_FSharpOption>)result).Value.FileName != null", span="672-672", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="663-663", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)"];
n213 [label="Entry Unk.get_IsSome", span="", cluster="Unk.get_IsSome"];
n214 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="684-684", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n215 [label="var result = InvokeBuild<Options_With_FSharpOption>(\r\n                arguments)", span="689-690", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n217 [label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.Offset.Value)", span="695-695", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n218 [label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.Offset))", span="697-697", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n216 [label="((Parsed<Options_With_FSharpOption>)result).Value.Offset != null", span="693-693", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n219 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="684-684", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)"];
n220 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="704-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()"];
n221 [label="Action test = () => InvokeBuild<Options_With_Min_Set_To_Zero>(\r\n                new string[] { })", span="707-708", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()"];
n222 [label="Assert.Throws<ApplicationException>(test)", span="711-711", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()"];
n223 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="704-704", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()"];
n224 [label="Entry Unk.>", span="", cluster="Unk.>"];
n225 [label="Entry lambda expression", span="707-708", cluster="lambda expression"];
n226 [label="InvokeBuild<Options_With_Min_Set_To_Zero>(\r\n                new string[] { })", span="707-708", cluster="lambda expression"];
n227 [label="Exit lambda expression", span="707-708", cluster="lambda expression"];
n228 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="715-715", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()"];
n229 [label="Action test = () => InvokeBuild<Options_With_Max_Set_To_Zero>(\r\n                new string[] { })", span="718-719", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()"];
n230 [label="Assert.Throws<ApplicationException>(test)", span="722-722", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()"];
n231 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="715-715", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()"];
n232 [label="Entry lambda expression", span="718-719", cluster="lambda expression"];
n233 [label="InvokeBuild<Options_With_Max_Set_To_Zero>(\r\n                new string[] { })", span="718-719", cluster="lambda expression"];
n234 [label="Exit lambda expression", span="718-719", cluster="lambda expression"];
n235 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="726-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()"];
n236 [label="Action test = () => InvokeBuild<Options_With_Both_Min_And_Max_Set_To_Zero>(\r\n                new string[] { })", span="729-730", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()"];
n237 [label="Assert.Throws<ApplicationException>(test)", span="733-733", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()"];
n238 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="726-726", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()"];
n239 [label="Entry lambda expression", span="729-730", cluster="lambda expression"];
n240 [label="InvokeBuild<Options_With_Both_Min_And_Max_Set_To_Zero>(\r\n                new string[] { })", span="729-730", cluster="lambda expression"];
n241 [label="Exit lambda expression", span="729-730", cluster="lambda expression"];
n242 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="742-742", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n243 [label="var result = InvokeBuild<Options_With_Named_And_Empty_Sets>(\r\n                arguments)", span="745-746", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n244 [label="type == ParserResultType.NotParsed", span="749-749", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n245 [label="((NotParsed<Options_With_Named_And_Empty_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="751-751", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n252 [label="x == expected", span="751-751", cluster="lambda expression"];
n246 [label="type == ParserResultType.Parsed", span="753-753", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n247 [label="result.Should().BeOfType<Parsed<Options_With_Named_And_Empty_Sets>>()", span="755-755", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n248 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="742-742", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)"];
n249 [label="Entry Unk.Should", span="", cluster="Unk.Should"];
n250 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount"];
n251 [label="Entry lambda expression", span="751-751", cluster="lambda expression"];
n253 [label="Exit lambda expression", span="751-751", cluster="lambda expression"];
n254 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="761-761", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
n255 [label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="764-765", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
n256 [label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == expected)", span="768-768", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
n259 [label="x == expected", span="768-768", cluster="lambda expression"];
n257 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="761-761", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)"];
n258 [label="Entry lambda expression", span="768-768", cluster="lambda expression"];
n260 [label="Exit lambda expression", span="768-768", cluster="lambda expression"];
n261 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="774-774", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
n262 [label="var result = InvokeBuild<Options_With_Interface>(\r\n                arguments)", span="777-778", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
n263 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Interface>)result).Value.InputFile)", span="781-781", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
n264 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="774-774", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)"];
n265 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="792-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n266 [label="var result = InvokeBuild<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(\r\n                arguments)", span="795-796", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n267 [label="type == ParserResultType.NotParsed", span="799-799", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n268 [label="((NotParsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="801-801", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n273 [label="x == expected", span="801-801", cluster="lambda expression"];
n269 [label="type == ParserResultType.Parsed", span="803-803", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n270 [label="result.Should().BeOfType<Parsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>>()", span="805-805", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n271 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="792-792", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)"];
n272 [label="Entry lambda expression", span="801-801", cluster="lambda expression"];
n274 [label="Exit lambda expression", span="801-801", cluster="lambda expression"];
n275 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="811-811", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)"];
n276 [label="var result = InvokeBuild<Options_With_Required_Set_To_True_For_Values>(\r\n                arguments)", span="816-817", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)"];
n277 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_For_Values>)result).Value)", span="820-820", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)"];
n278 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="811-811", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)"];
n279 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="827-827", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)"];
n280 [label="var result = InvokeBuild<Options_With_Scalar_Value_And_Adjacent_SequenceString>(\r\n                arguments)", span="832-833", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)"];
n281 [label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Scalar_Value_And_Adjacent_SequenceString>)result).Value)", span="836-836", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)"];
n282 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="827-827", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)"];
n283 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="842-842", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n284 [label="var expectedResult = new Simple_Options { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="845-845", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n285 [label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' })", span="848-849", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n288 [label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6", cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()"];
n286 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value)", span="852-852", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n287 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="842-842", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()"];
n289 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="864-864", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n290 [label="var result = InvokeBuild<Options_With_Two_Options_Having_Required_Set_To_True>(\r\n                arguments)", span="867-868", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n292 [label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="872-872", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n296 [label="x == expected", span="872-872", cluster="lambda expression"];
n291 [label="var errors = ((NotParsed<Options_With_Two_Options_Having_Required_Set_To_True>)result).Errors", span="871-871", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n293 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="864-864", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)"];
n294 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()"];
n295 [label="Entry lambda expression", span="872-872", cluster="lambda expression"];
n297 [label="Exit lambda expression", span="872-872", cluster="lambda expression"];
n298 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="877-877", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)"];
n299 [label="var result = InvokeBuildImmutable<Immutable_Simple_Options>(\r\n                arguments)", span="882-883", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)"];
n300 [label="expected.ShouldBeEquivalentTo(((Parsed<Immutable_Simple_Options>)result).Value)", span="886-886", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)"];
n301 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="877-877", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)"];
n302 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="892-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()"];
n303 [label="var expectedResult = new Options_With_Uri_And_SimpleType { EndPoint = new Uri(''http://localhost/test/''), MyValue = new MySimpleType(''custom-value'') }", span="895-895", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()"];
n304 [label="var result = InvokeBuild<Options_With_Uri_And_SimpleType>(\r\n                new[] { ''--endpoint=http://localhost/test/'', ''custom-value'' })", span="898-899", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()"];
n307 [label="Entry CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()", span="23-23", cluster="CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()"];
n308 [label="Entry System.Uri.Uri(string)", span="0-0", cluster="System.Uri.Uri(string)"];
n309 [label="Entry CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", span="12-12", cluster="CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)"];
n305 [label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Uri_And_SimpleType>)result).Value)", span="902-902", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()"];
n306 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="892-892", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()"];
m1_32 [label="arguments.Any(arg => arg.EqualsOrdinal(''--''))", span="48-48", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_33 [label="var tokenizerResult = tokenizer(arguments.TakeWhile(arg => !arg.EqualsOrdinal(''--'')))", span="50-50", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_34 [label="var values = arguments.SkipWhile(arg => !arg.EqualsOrdinal(''--'')).Skip(1).Select(Token.Value)", span="51-51", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_36 [label="return tokenizer(arguments);", span="54-54", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_35 [label="return tokenizerResult.Map(tokens => tokens.Concat(values));", span="52-52", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_37 [label="Exit CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Tokenizer.cs"];
m1_3 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", span="20-20", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs"];
m1_7 [label="var errors = new List<Error>()", span="25-25", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs"];
m1_9 [label="var tokens = (from arg in arguments\r\n                          from token in !arg.StartsWith(''-'', StringComparison.Ordinal)\r\n                               ? new[] { Token.Value(arg) }\r\n                               : arg.StartsWith(''--'', StringComparison.Ordinal)\r\n                                     ? TokenizeLongName(arg, onError)\r\n                                     : TokenizeShortName(arg, nameLookup)\r\n                          select token)\r\n                            .Memorize()", span="28-35", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs"];
m1_10 [label="var normalized = normalize(tokens)", span="37-37", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs"];
m1_11 [label="var unkTokens = (from t in normalized where t.IsName() && nameLookup(t.Text) == NameLookupResult.NoOptionFound select t).Memorize()", span="39-39", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs"];
m1_8 [label="Action<Error> onError = errors.Add", span="26-26", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs"];
m1_12 [label="return Result.Succeed(normalized.Where(x => !unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="41-41", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs"];
m1_13 [label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", span="20-20", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Tokenizer.cs"];
m1_201 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])", file="Tokenizer.cs"];
m1_86 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Tokenizer.cs"];
m1_97 [label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_98 [label="var indexes =\r\n                from i in\r\n                    tokens.Select(\r\n                        (t, i) =>\r\n                        {\r\n                            var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe();\r\n                            return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();\r\n                        }).Where(i => i.IsJust())\r\n                select i.FromJust()", span="81-92", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_99 [label="var toExclude =\r\n                from t in\r\n                    tokens.Select((t, i) => indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>())\r\n                        .Where(t => t.IsJust())\r\n                select t.FromJust()", span="94-98", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_100 [label="var normalized = tokens.Except(toExclude)", span="100-100", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_101 [label="return normalized;", span="102-102", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_102 [label="Exit CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Tokenizer.cs"];
m1_118 [label="Entry Unk.nameLookup", span="", cluster="Unk.nameLookup", file="Tokenizer.cs"];
m1_18 [label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", span="132-132", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_162 [label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="136-136", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_165 [label="yield return Token.Value(value);", span="142-142", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_166 [label="yield break;", span="143-143", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_168 [label="yield return Token.Name(text);", span="148-148", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_169 [label="yield break;", span="149-149", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_176 [label="yield return Token.Name(n);", span="160-160", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_179 [label="yield return Token.Value(text.Substring(i));", span="167-167", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_163 [label="var text = value.Substring(1)", span="138-138", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_167 [label="value.Length == 2", span="146-146", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_173 [label="var r = nameLookup(n)", span="156-156", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_164 [label="char.IsDigit(text[0])", span="140-140", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_171 [label=text, span="153-153", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_178 [label="i < text.Length", span="165-165", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_170 [label="var i = 0", span="152-152", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_174 [label="i > 0 && r == NameLookupResult.NoOptionFound", span="158-158", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_175 [label="i++", span="159-159", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_172 [label="var n = new string(c, 1)", span="155-155", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_177 [label="r == NameLookupResult.OtherOptionFound", span="162-162", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_180 [label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", span="132-132", cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_138 [label="Entry Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", span="", cluster="Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", file="Tokenizer.cs"];
m1_199 [label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="221-221", cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Tokenizer.cs"];
m1_57 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_58 [label="var tokens = tokenizerResult.SucceededWith()", span="61-61", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_59 [label="var replaces = tokens.Select((t, i) =>\r\n                optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))).SkipWhile(x => x.Item1 < 0)", span="63-66", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_62 [label="return Result.Succeed(flattened, tokenizerResult.SuccessfulMessages());", span="75-75", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_60 [label="var exploded = tokens.Select((t, i) =>\r\n                        replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[] { t })))", span="68-71", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_61 [label="var flattened = exploded.SelectMany(x => x)", span="73-73", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_63 [label="Exit CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Tokenizer.cs"];
m1_15 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)", file="Tokenizer.cs"];
m1_65 [label="Entry Unk.SkipWhile", span="", cluster="Unk.SkipWhile", file="Tokenizer.cs"];
m1_183 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs"];
m1_200 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="Tokenizer.cs"];
m1_21 [label="Entry CommandLine.Core.Token.IsName()", span="128-128", cluster="CommandLine.Core.Token.IsName()", file="Tokenizer.cs"];
m1_38 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="Tokenizer.cs"];
m1_16 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs"];
m1_117 [label="Entry Unk.IsName", span="", cluster="Unk.IsName", file="Tokenizer.cs"];
m1_22 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Tokenizer.cs"];
m1_161 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="27-27", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Tokenizer.cs"];
m1_23 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="Tokenizer.cs"];
m1_76 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="Tokenizer.cs"];
m1_85 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="Tokenizer.cs"];
m1_184 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)", file="Tokenizer.cs"];
m1_109 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAtOrDefault<TSource>(int)", file="Tokenizer.cs"];
m1_129 [label="Entry CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="109-109", cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="Tokenizer.cs"];
m1_130 [label="return (arguments, optionSpecs) =>\r\n                {\r\n                    var normalize = ignoreUnknownArguments\r\n                        ? toks => Tokenizer.Normalize(toks,\r\n                            name => NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound)\r\n                        : new Func<IEnumerable<Token>, IEnumerable<Token>>(toks => toks);\r\n\r\n                    var tokens = enableDashDash\r\n                        ? Tokenizer.PreprocessDashDash(\r\n                                arguments,\r\n                                args =>\r\n                                    Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize))\r\n                        : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize);\r\n                    var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                    return explodedTokens;\r\n                };", span="114-129", cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="Tokenizer.cs"];
m1_131 [label="Exit CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="109-109", cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", file="Tokenizer.cs"];
m1_145 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Tokenizer.cs"];
m1_30 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="Tokenizer.cs"];
m1_84 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="Tokenizer.cs"];
m1_110 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="Tokenizer.cs"];
m1_71 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="Tokenizer.cs"];
m1_112 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="Tokenizer.cs"];
m1_152 [label="Entry lambda expression", span="125-125", cluster="lambda expression", file="Tokenizer.cs"];
m1_4 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="Tokenizer.cs"];
m1_5 [label=tokens, span="17-17", cluster="lambda expression", file="Tokenizer.cs"];
m1_6 [label="Exit lambda expression", span="17-17", cluster="lambda expression", file="Tokenizer.cs"];
m1_28 [label="!unkTokens.Contains(x)", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m1_27 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m1_29 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="Tokenizer.cs"];
m1_44 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="Tokenizer.cs"];
m1_48 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="Tokenizer.cs"];
m1_51 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="Tokenizer.cs"];
m1_55 [label="tokens.Concat(values)", span="52-52", cluster="lambda expression", file="Tokenizer.cs"];
m1_54 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="Tokenizer.cs"];
m1_45 [label="arg.EqualsOrdinal(''--'')", span="48-48", cluster="lambda expression", file="Tokenizer.cs"];
m1_46 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="Tokenizer.cs"];
m1_49 [label="!arg.EqualsOrdinal(''--'')", span="50-50", cluster="lambda expression", file="Tokenizer.cs"];
m1_50 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="Tokenizer.cs"];
m1_52 [label="!arg.EqualsOrdinal(''--'')", span="51-51", cluster="lambda expression", file="Tokenizer.cs"];
m1_53 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="Tokenizer.cs"];
m1_56 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="Tokenizer.cs"];
m1_69 [label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", span="64-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_68 [label="Entry lambda expression", span="63-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_77 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_81 [label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[] { t }))", span="69-71", cluster="lambda expression", file="Tokenizer.cs"];
m1_80 [label="Entry lambda expression", span="68-71", cluster="lambda expression", file="Tokenizer.cs"];
m1_94 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="Tokenizer.cs"];
m1_74 [label="Tuple.Create(i + 1, sep)", span="65-65", cluster="lambda expression", file="Tokenizer.cs"];
m1_70 [label="Exit lambda expression", span="63-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_73 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="Tokenizer.cs"];
m1_75 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="Tokenizer.cs"];
m1_78 [label="x.Item1 < 0", span="66-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_79 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="Tokenizer.cs"];
m1_88 [label="x.Item1 == i", span="69-69", cluster="lambda expression", file="Tokenizer.cs"];
m1_91 [label="t.Text.Split(r.Item2).Select(Token.Value)", span="70-70", cluster="lambda expression", file="Tokenizer.cs"];
m1_82 [label="Exit lambda expression", span="68-71", cluster="lambda expression", file="Tokenizer.cs"];
m1_87 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="Tokenizer.cs"];
m1_90 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="Tokenizer.cs"];
m1_89 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="Tokenizer.cs"];
m1_92 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="Tokenizer.cs"];
m1_95 [label=x, span="73-73", cluster="lambda expression", file="Tokenizer.cs"];
m1_96 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="Tokenizer.cs"];
m1_106 [label="var prev = tokens.ElementAtOrDefault(i - 1).ToMaybe()", span="86-86", cluster="lambda expression", file="Tokenizer.cs"];
m1_107 [label="return t.IsValue() && ((Value)t).ExplicitlyAssigned\r\n                                   && prev.Return(p => p.IsName() && !nameLookup(p.Text), false)\r\n                                ? Maybe.Just(i)\r\n                                : Maybe.Nothing<int>();", span="87-90", cluster="lambda expression", file="Tokenizer.cs"];
m1_115 [label="p.IsName() && !nameLookup(p.Text)", span="88-88", cluster="lambda expression", file="Tokenizer.cs"];
m1_105 [label="Entry lambda expression", span="84-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_119 [label="Entry lambda expression", span="91-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_124 [label="indexes.Contains(i) ? Maybe.Just(t) : Maybe.Nothing<Token>()", span="96-96", cluster="lambda expression", file="Tokenizer.cs"];
m1_123 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="Tokenizer.cs"];
m1_126 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="Tokenizer.cs"];
m1_108 [label="Exit lambda expression", span="84-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_114 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="Tokenizer.cs"];
m1_116 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="Tokenizer.cs"];
m1_120 [label="i.IsJust()", span="91-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_121 [label="Exit lambda expression", span="91-91", cluster="lambda expression", file="Tokenizer.cs"];
m1_125 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="Tokenizer.cs"];
m1_127 [label="t.IsJust()", span="97-97", cluster="lambda expression", file="Tokenizer.cs"];
m1_128 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="Tokenizer.cs"];
m1_133 [label="var normalize = ignoreUnknownArguments\r\n                        ? toks => Tokenizer.Normalize(toks,\r\n                            name => NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound)\r\n                        : new Func<IEnumerable<Token>, IEnumerable<Token>>(toks => toks)", span="116-119", cluster="lambda expression", file="Tokenizer.cs"];
m1_140 [label="Tokenizer.Normalize(toks,\r\n                            name => NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound)", span="117-118", cluster="lambda expression", file="Tokenizer.cs"];
m1_143 [label="NameLookup.Contains(name, optionSpecs, nameComparer) != NameLookupResult.NoOptionFound", span="118-118", cluster="lambda expression", file="Tokenizer.cs"];
m1_134 [label="var tokens = enableDashDash\r\n                        ? Tokenizer.PreprocessDashDash(\r\n                                arguments,\r\n                                args =>\r\n                                    Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize))\r\n                        : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize)", span="121-126", cluster="lambda expression", file="Tokenizer.cs"];
m1_150 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer), normalize)", span="125-125", cluster="lambda expression", file="Tokenizer.cs"];
m1_153 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="125-125", cluster="lambda expression", file="Tokenizer.cs"];
m1_156 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="126-126", cluster="lambda expression", file="Tokenizer.cs"];
m1_135 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="127-127", cluster="lambda expression", file="Tokenizer.cs"];
m1_159 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="127-127", cluster="lambda expression", file="Tokenizer.cs"];
m1_132 [label="Entry lambda expression", span="114-129", cluster="lambda expression", file="Tokenizer.cs"];
m1_147 [label=toks, span="119-119", cluster="lambda expression", file="Tokenizer.cs"];
m1_149 [label="Entry lambda expression", span="124-125", cluster="lambda expression", file="Tokenizer.cs"];
m1_155 [label="Entry lambda expression", span="126-126", cluster="lambda expression", file="Tokenizer.cs"];
m1_136 [label="return explodedTokens;", span="128-128", cluster="lambda expression", file="Tokenizer.cs"];
m1_158 [label="Entry lambda expression", span="127-127", cluster="lambda expression", file="Tokenizer.cs"];
m1_137 [label="Exit lambda expression", span="114-129", cluster="lambda expression", file="Tokenizer.cs"];
m1_139 [label="Entry lambda expression", span="117-118", cluster="lambda expression", file="Tokenizer.cs"];
m1_141 [label="Exit lambda expression", span="117-118", cluster="lambda expression", file="Tokenizer.cs"];
m1_142 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="Tokenizer.cs"];
m1_144 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="Tokenizer.cs"];
m1_146 [label="Entry lambda expression", span="119-119", cluster="lambda expression", file="Tokenizer.cs"];
m1_148 [label="Exit lambda expression", span="119-119", cluster="lambda expression", file="Tokenizer.cs"];
m1_151 [label="Exit lambda expression", span="124-125", cluster="lambda expression", file="Tokenizer.cs"];
m1_154 [label="Exit lambda expression", span="125-125", cluster="lambda expression", file="Tokenizer.cs"];
m1_157 [label="Exit lambda expression", span="126-126", cluster="lambda expression", file="Tokenizer.cs"];
m1_160 [label="Exit lambda expression", span="127-127", cluster="lambda expression", file="Tokenizer.cs"];
m1_41 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="Tokenizer.cs"];
m1_17 [label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="172-172", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_185 [label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="176-176", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_189 [label="yield return Token.Name(text);", span="182-182", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_190 [label="yield break;", span="183-183", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_193 [label="yield break;", span="188-188", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_195 [label="yield return Token.Name(parts[0]);", span="191-191", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_196 [label="yield return Token.Value(parts[1], true);", span="192-192", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_186 [label="var text = value.Substring(2)", span="178-178", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_192 [label="onError(new BadFormatTokenError(value))", span="187-187", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_187 [label="var equalIndex = text.IndexOf('=')", span="179-179", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_194 [label="var parts = text.Split('=')", span="190-190", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_188 [label="equalIndex <= 0", span="180-180", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_191 [label="equalIndex == 1", span="185-185", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_197 [label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="172-172", cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="Tokenizer.cs"];
m1_67 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="15-15", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", file="Tokenizer.cs"];
m1_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m1_25 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="Tokenizer.cs"];
m1_43 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", span="534-534", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", file="Tokenizer.cs"];
m1_47 [label="Entry string.EqualsOrdinal(string)", span="40-40", cluster="string.EqualsOrdinal(string)", file="Tokenizer.cs"];
m1_39 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="Tokenizer.cs"];
m1_198 [label="Entry string.IndexOf(char)", span="0-0", cluster="string.IndexOf(char)", file="Tokenizer.cs"];
m1_42 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="Tokenizer.cs"];
m1_122 [label="Entry Unk.IsJust", span="", cluster="Unk.IsJust", file="Tokenizer.cs"];
m1_19 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize", file="Tokenizer.cs"];
m1_104 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="Tokenizer.cs"];
m1_72 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="Tokenizer.cs"];
m1_113 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="Tokenizer.cs"];
m1_64 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="Tokenizer.cs"];
m1_111 [label="Entry CommandLine.Core.Token.IsValue()", span="133-133", cluster="CommandLine.Core.Token.IsValue()", file="Tokenizer.cs"];
m1_103 [label="Entry Unk.FromJust", span="", cluster="Unk.FromJust", file="Tokenizer.cs"];
m1_182 [label="Entry char.IsDigit(char)", span="0-0", cluster="char.IsDigit(char)", file="Tokenizer.cs"];
m1_14 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="Tokenizer.cs"];
m1_0 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_1 [label="return Tokenizer.Tokenize(arguments, nameLookup, tokens => tokens);", span="17-17", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_2 [label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="Tokenizer.cs"];
m1_202 [label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29", cluster="CommandLine.Core.Token.Value(string, bool)", file="Tokenizer.cs"];
m1_24 [label="Entry UnknownOptionError.cstr", span="", cluster="UnknownOptionError.cstr", file="Tokenizer.cs"];
m1_20 [label="Entry Unk.normalize", span="", cluster="Unk.normalize", file="Tokenizer.cs"];
m1_66 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="Tokenizer.cs"];
m1_83 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault", file="Tokenizer.cs"];
m1_93 [label="Entry Unk.Split", span="", cluster="Unk.Split", file="Tokenizer.cs"];
m1_26 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed", file="Tokenizer.cs"];
m1_181 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="Tokenizer.cs"];
m1_203 [label=unkTokens, span="", file="Tokenizer.cs"];
m1_204 [label=values, span="", file="Tokenizer.cs"];
m1_205 [label="System.Func<string, CSharpx.Maybe<char>>", span="", file="Tokenizer.cs"];
m1_206 [label=int, span="", file="Tokenizer.cs"];
m1_207 [label=replaces, span="", file="Tokenizer.cs"];
m1_208 [label=int, span="", file="Tokenizer.cs"];
m1_209 [label="CommandLine.Core.Token", span="", file="Tokenizer.cs"];
m1_210 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span="", file="Tokenizer.cs"];
m1_211 [label="System.Func<string, bool>", span="", file="Tokenizer.cs"];
m1_212 [label=indexes, span="", file="Tokenizer.cs"];
m1_213 [label="System.StringComparer", span="", file="Tokenizer.cs"];
m1_214 [label=bool, span="", file="Tokenizer.cs"];
m1_215 [label=bool, span="", file="Tokenizer.cs"];
m1_216 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="Tokenizer.cs"];
m1_217 [label=normalize, span="", file="Tokenizer.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m2_3 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=green, community=0, file="TokenPartitionerTests.cs"];
m2_2 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(string), TargetType.Scalar),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<int>), TargetType.Sequence)\r\n                }", span="21-25", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m2_4 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m2_1 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m2_5 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs"];
m2_13 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs"];
m2_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs"];
m2_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TokenPartitionerTests.cs"];
m2_15 [label="Entry Unk.True", span="", cluster="Unk.True", file="TokenPartitionerTests.cs"];
m2_14 [label="Entry Unk.All", span="", cluster="Unk.All", file="TokenPartitionerTests.cs"];
m2_41 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_16 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_21 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_17 [label="TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)", span="30-30", cluster="lambda expression", color=green, community=0, file="TokenPartitionerTests.cs"];
m2_18 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_35 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_39 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_36 [label="TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)", span="56-56", cluster="lambda expression", color=green, community=0, file="TokenPartitionerTests.cs"];
m2_37 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_20 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_22 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_24 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_25 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_38 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_40 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_42 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_26 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_43 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="TokenPartitionerTests.cs"];
m2_27 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TokenPartitionerTests.cs"];
m2_19 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs"];
m2_11 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs"];
m2_8 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="TokenPartitionerTests.cs"];
m2_28 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs"];
m2_23 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="TokenPartitionerTests.cs"];
m2_12 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs"];
m2_29 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m2_32 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)\r\n                )", span="54-57", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=green, community=0, file="TokenPartitionerTests.cs"];
m2_31 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(string), TargetType.Scalar),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<int>), TargetType.Sequence)\r\n                }", span="47-51", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m2_33 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="60-60", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m2_30 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="43-46", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m2_34 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs"];
m2_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs"];
m2_44 [label=specs, span="", file="TokenPartitionerTests.cs"];
m2_47 [label=specs, span="", file="TokenPartitionerTests.cs"];
m2_45 [label=result, span="", file="TokenPartitionerTests.cs"];
m2_48 [label=result, span="", file="TokenPartitionerTests.cs"];
m2_46 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span="", file="TokenPartitionerTests.cs"];
m2_49 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span="", file="TokenPartitionerTests.cs"];
m4_3 [label="Entry CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", span="61-61", cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", file="TypeLookup.cs"];
m4_0 [label="Entry CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", span="47-47", cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="TypeLookup.cs"];
m4_1 [label="Assumes.NotNullOrEmpty(longName, ''longName'')", span="50-50", cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="TypeLookup.cs"];
m4_2 [label="Exit CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", span="47-47", cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="TypeLookup.cs"];
n310 -> n130  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n310 -> n134  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n311 -> n252  [key=1, style=dashed, color=darkseagreen4, label=int];
n312 -> n259  [key=1, style=dashed, color=darkseagreen4, label=int];
n313 -> n273  [key=1, style=dashed, color=darkseagreen4, label=int];
n314 -> n296  [key=1, style=dashed, color=darkseagreen4, label=int];
n0 -> n1  [key=0, style=solid];
n0 -> n31  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n35  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n39  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n43  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n47  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n51  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n78  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n104  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n108  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n112  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n181  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n190  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n199  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n203  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n207  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n214  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n242  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n254  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n261  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n265  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n275  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n279  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n0 -> n289  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n1 -> n6  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n1 -> n10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n0  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=2, style=dotted];
n8 -> n6  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n11 -> n13  [key=2, style=dotted];
n11 -> n14  [key=2, style=dotted];
n12 -> n10  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid, color=red];
n15 -> n298  [key=3, color=darkorchid, style=bold, label="Parameter variable string[] arguments"];
n16 -> n17  [key=0, style=solid, color=red];
n16 -> n18  [key=2, style=dotted, color=red];
n16 -> n4  [key=2, style=dotted, color=red];
n16 -> n5  [key=2, style=dotted, color=red];
n16 -> n19  [key=1, style=dashed, color=red, label="lambda expression"];
n17 -> n15  [key=0, style=bold, color=blue];
n19 -> n20  [key=0, style=solid, color=red];
n20 -> n21  [key=0, style=solid, color=red];
n20 -> n13  [key=2, style=dotted, color=red];
n20 -> n14  [key=2, style=dotted, color=red];
n21 -> n19  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n27  [key=2, style=dotted];
n23 -> n28  [key=2, style=dotted];
n23 -> n29  [key=2, style=dotted];
n23 -> n25  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n24 -> n25  [key=0, style=solid];
n24 -> n0  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n30  [key=2, style=dotted];
n26 -> n22  [key=0, style=bold, color=blue];
n31 -> n32  [key=0, style=solid];
n31 -> n33  [key=1, style=dashed, color=darkseagreen4, label=long];
n32 -> n33  [key=0, style=solid];
n32 -> n0  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n30  [key=2, style=dotted];
n34 -> n31  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [key=1, style=dashed, color=darkseagreen4, label=double];
n36 -> n37  [key=0, style=solid];
n36 -> n0  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n30  [key=2, style=dotted];
n38 -> n35  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n40 -> n41  [key=0, style=solid];
n40 -> n0  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n30  [key=2, style=dotted];
n42 -> n39  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n44 -> n45  [key=0, style=solid];
n44 -> n0  [key=2, style=dotted];
n45 -> n46  [key=0, style=solid];
n45 -> n30  [key=2, style=dotted];
n46 -> n43  [key=0, style=bold, color=blue];
n47 -> n48  [key=0, style=solid];
n47 -> n49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n48 -> n49  [key=0, style=solid];
n48 -> n0  [key=2, style=dotted];
n49 -> n50  [key=0, style=solid];
n49 -> n30  [key=2, style=dotted];
n50 -> n47  [key=0, style=bold, color=blue];
n51 -> n52  [key=0, style=solid];
n51 -> n53  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n52 -> n53  [key=0, style=solid];
n52 -> n0  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n30  [key=2, style=dotted];
n54 -> n51  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n60  [key=2, style=dotted];
n56 -> n61  [key=2, style=dotted];
n56 -> n58  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n57 -> n58  [key=0, style=solid];
n57 -> n0  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n30  [key=2, style=dotted];
n59 -> n55  [key=0, style=bold, color=blue];
n62 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n67  [key=2, style=dotted];
n63 -> n65  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n64 -> n65  [key=0, style=solid];
n64 -> n0  [key=2, style=dotted];
n65 -> n66  [key=0, style=solid];
n65 -> n30  [key=2, style=dotted];
n66 -> n62  [key=0, style=bold, color=blue];
n68 -> n69  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n67  [key=2, style=dotted];
n69 -> n61  [key=2, style=dotted];
n69 -> n71  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n70 -> n71  [key=0, style=solid];
n70 -> n0  [key=2, style=dotted];
n71 -> n72  [key=0, style=solid];
n71 -> n30  [key=2, style=dotted];
n72 -> n68  [key=0, style=bold, color=blue];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n67  [key=2, style=dotted];
n74 -> n76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n75 -> n76  [key=0, style=solid];
n75 -> n0  [key=2, style=dotted];
n76 -> n77  [key=0, style=solid];
n76 -> n30  [key=2, style=dotted];
n77 -> n73  [key=0, style=bold, color=blue];
n78 -> n79  [key=0, style=solid];
n78 -> n80  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
n79 -> n80  [key=0, style=solid];
n79 -> n0  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n80 -> n30  [key=2, style=dotted];
n80 -> n80  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
n81 -> n78  [key=0, style=bold, color=blue];
n82 -> n83  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n83 -> n87  [key=2, style=dotted];
n83 -> n61  [key=2, style=dotted];
n83 -> n85  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n84 -> n85  [key=0, style=solid];
n84 -> n0  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n85 -> n30  [key=2, style=dotted];
n86 -> n82  [key=0, style=bold, color=blue];
n88 -> n89  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n87  [key=2, style=dotted];
n89 -> n61  [key=2, style=dotted];
n89 -> n91  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n90 -> n91  [key=0, style=solid];
n90 -> n0  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n91 -> n30  [key=2, style=dotted];
n92 -> n88  [key=0, style=bold, color=blue];
n93 -> n94  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n94 -> n87  [key=2, style=dotted];
n94 -> n61  [key=2, style=dotted];
n94 -> n96  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n95 -> n96  [key=0, style=solid];
n95 -> n0  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n96 -> n30  [key=2, style=dotted];
n97 -> n93  [key=0, style=bold, color=blue];
n98 -> n99  [key=0, style=solid];
n99 -> n100  [key=0, style=solid];
n99 -> n103  [key=2, style=dotted];
n99 -> n101  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n100 -> n101  [key=0, style=solid];
n100 -> n0  [key=2, style=dotted];
n101 -> n102  [key=0, style=solid];
n101 -> n30  [key=2, style=dotted];
n102 -> n98  [key=0, style=bold, color=blue];
n104 -> n105  [key=0, style=solid];
n104 -> n106  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
n105 -> n106  [key=0, style=solid];
n105 -> n0  [key=2, style=dotted];
n106 -> n107  [key=0, style=solid];
n106 -> n30  [key=2, style=dotted];
n107 -> n104  [key=0, style=bold, color=blue];
n108 -> n109  [key=0, style=solid];
n108 -> n110  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
n109 -> n110  [key=0, style=solid];
n109 -> n0  [key=2, style=dotted];
n110 -> n111  [key=0, style=solid];
n110 -> n30  [key=2, style=dotted];
n111 -> n108  [key=0, style=bold, color=blue];
n112 -> n113  [key=0, style=solid];
n112 -> n114  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
n113 -> n114  [key=0, style=solid];
n113 -> n0  [key=2, style=dotted];
n114 -> n115  [key=0, style=solid];
n114 -> n30  [key=2, style=dotted];
n115 -> n112  [key=0, style=bold, color=blue];
n116 -> n117  [key=0, style=solid];
n117 -> n118  [key=0, style=solid];
n117 -> n103  [key=2, style=dotted];
n117 -> n120  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n118 -> n119  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n120 -> n30  [key=2, style=dotted];
n119 -> n120  [key=0, style=solid];
n119 -> n3  [key=2, style=dotted];
n119 -> n4  [key=2, style=dotted];
n119 -> n5  [key=2, style=dotted];
n119 -> n122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n119 -> n125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n122 -> n123  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n125 -> n130  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n125 -> n134  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n121 -> n116  [key=0, style=bold, color=blue];
n123 -> n124  [key=0, style=solid];
n123 -> n103  [key=2, style=dotted];
n124 -> n122  [key=0, style=bold, color=blue];
n126 -> n127  [key=0, style=solid];
n126 -> n128  [key=2, style=dotted];
n126 -> n129  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n130 -> n131  [key=0, style=solid];
n130 -> n132  [key=2, style=dotted];
n130 -> n133  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n134 -> n135  [key=0, style=solid];
n134 -> n136  [key=2, style=dotted];
n127 -> n125  [key=0, style=bold, color=blue];
n129 -> n130  [key=0, style=solid];
n131 -> n129  [key=0, style=bold, color=blue];
n133 -> n134  [key=0, style=solid];
n135 -> n133  [key=0, style=bold, color=blue];
n137 -> n138  [key=0, style=solid];
n138 -> n139  [key=0, style=solid];
n138 -> n142  [key=2, style=dotted];
n138 -> n61  [key=2, style=dotted];
n138 -> n140  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n139 -> n140  [key=0, style=solid];
n139 -> n0  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n140 -> n30  [key=2, style=dotted];
n141 -> n137  [key=0, style=bold, color=blue];
n143 -> n144  [key=0, style=solid];
n144 -> n145  [key=0, style=solid];
n144 -> n148  [key=2, style=dotted];
n144 -> n146  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n145 -> n146  [key=0, style=solid];
n145 -> n0  [key=2, style=dotted];
n146 -> n147  [key=0, style=solid];
n146 -> n30  [key=2, style=dotted];
n147 -> n143  [key=0, style=bold, color=blue];
n149 -> n150  [key=0, style=solid];
n150 -> n151  [key=0, style=solid];
n150 -> n154  [key=2, style=dotted];
n150 -> n61  [key=2, style=dotted];
n150 -> n152  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n151 -> n152  [key=0, style=solid];
n151 -> n0  [key=2, style=dotted];
n152 -> n153  [key=0, style=solid];
n152 -> n30  [key=2, style=dotted];
n153 -> n149  [key=0, style=bold, color=blue];
n155 -> n156  [key=0, style=solid];
n156 -> n157  [key=0, style=solid];
n156 -> n154  [key=2, style=dotted];
n156 -> n61  [key=2, style=dotted];
n156 -> n158  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n157 -> n158  [key=0, style=solid];
n157 -> n0  [key=2, style=dotted];
n158 -> n159  [key=0, style=solid];
n158 -> n30  [key=2, style=dotted];
n159 -> n155  [key=0, style=bold, color=blue];
n160 -> n161  [key=0, style=solid];
n161 -> n162  [key=0, style=solid];
n161 -> n67  [key=2, style=dotted];
n161 -> n61  [key=2, style=dotted];
n161 -> n163  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n162 -> n163  [key=0, style=solid];
n162 -> n0  [key=2, style=dotted];
n163 -> n164  [key=0, style=solid];
n163 -> n30  [key=2, style=dotted];
n164 -> n160  [key=0, style=bold, color=blue];
n165 -> n166  [key=0, style=solid];
n166 -> n167  [key=0, style=solid];
n166 -> n170  [key=2, style=dotted];
n166 -> n168  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n167 -> n168  [key=0, style=solid];
n167 -> n0  [key=2, style=dotted];
n168 -> n169  [key=0, style=solid];
n168 -> n30  [key=2, style=dotted];
n169 -> n165  [key=0, style=bold, color=blue];
n171 -> n172  [key=0, style=solid];
n172 -> n173  [key=0, style=solid];
n172 -> n170  [key=2, style=dotted];
n172 -> n174  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n173 -> n174  [key=0, style=solid];
n173 -> n0  [key=2, style=dotted];
n174 -> n175  [key=0, style=solid];
n174 -> n30  [key=2, style=dotted];
n175 -> n171  [key=0, style=bold, color=blue];
n176 -> n177  [key=0, style=solid];
n177 -> n178  [key=0, style=solid];
n177 -> n170  [key=2, style=dotted];
n177 -> n179  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n178 -> n179  [key=0, style=solid];
n178 -> n0  [key=2, style=dotted];
n179 -> n180  [key=0, style=solid];
n179 -> n30  [key=2, style=dotted];
n180 -> n176  [key=0, style=bold, color=blue];
n181 -> n182  [key=0, style=solid];
n181 -> n183  [key=1, style=dashed, color=darkseagreen4, label=string];
n182 -> n183  [key=0, style=solid];
n182 -> n0  [key=2, style=dotted];
n183 -> n184  [key=0, style=solid];
n183 -> n30  [key=2, style=dotted];
n184 -> n181  [key=0, style=bold, color=blue];
n185 -> n186  [key=0, style=solid];
n186 -> n187  [key=0, style=solid];
n186 -> n154  [key=2, style=dotted];
n186 -> n188  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n187 -> n188  [key=0, style=solid];
n187 -> n0  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n188 -> n30  [key=2, style=dotted];
n189 -> n185  [key=0, style=bold, color=blue];
n190 -> n191  [key=0, style=solid];
n190 -> n192  [key=1, style=dashed, color=darkseagreen4, label=string];
n191 -> n192  [key=0, style=solid];
n191 -> n0  [key=2, style=dotted];
n192 -> n193  [key=0, style=solid];
n192 -> n30  [key=2, style=dotted];
n193 -> n190  [key=0, style=bold, color=blue];
n194 -> n195  [key=0, style=solid];
n195 -> n196  [key=0, style=solid];
n195 -> n67  [key=2, style=dotted];
n195 -> n197  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n196 -> n197  [key=0, style=solid];
n196 -> n0  [key=2, style=dotted];
n197 -> n198  [key=0, style=solid];
n197 -> n30  [key=2, style=dotted];
n198 -> n194  [key=0, style=bold, color=blue];
n199 -> n200  [key=0, style=solid];
n199 -> n201  [key=1, style=dashed, color=darkseagreen4, label="int?"];
n200 -> n201  [key=0, style=solid];
n200 -> n0  [key=2, style=dotted];
n201 -> n202  [key=0, style=solid];
n201 -> n30  [key=2, style=dotted];
n202 -> n199  [key=0, style=bold, color=blue];
n203 -> n204  [key=0, style=solid];
n203 -> n205  [key=1, style=dashed, color=darkseagreen4, label="long?"];
n204 -> n205  [key=0, style=solid];
n204 -> n0  [key=2, style=dotted];
n205 -> n206  [key=0, style=solid];
n205 -> n30  [key=2, style=dotted];
n206 -> n203  [key=0, style=bold, color=blue];
n207 -> n208  [key=0, style=solid];
n207 -> n210  [key=1, style=dashed, color=darkseagreen4, label=string];
n207 -> n211  [key=1, style=dashed, color=darkseagreen4, label=bool];
n208 -> n209  [key=0, style=solid];
n208 -> n0  [key=2, style=dotted];
n208 -> n210  [key=1, style=dashed, color=darkseagreen4, label=result];
n208 -> n211  [key=1, style=dashed, color=darkseagreen4, label=result];
n210 -> n211  [key=0, style=solid];
n210 -> n30  [key=2, style=dotted];
n211 -> n212  [key=0, style=solid];
n211 -> n213  [key=2, style=dotted];
n211 -> n30  [key=2, style=dotted];
n209 -> n210  [key=0, style=solid];
n209 -> n211  [key=0, style=solid];
n212 -> n207  [key=0, style=bold, color=blue];
n214 -> n215  [key=0, style=solid];
n214 -> n217  [key=1, style=dashed, color=darkseagreen4, label=int];
n214 -> n218  [key=1, style=dashed, color=darkseagreen4, label=bool];
n215 -> n216  [key=0, style=solid];
n215 -> n0  [key=2, style=dotted];
n215 -> n217  [key=1, style=dashed, color=darkseagreen4, label=result];
n215 -> n218  [key=1, style=dashed, color=darkseagreen4, label=result];
n217 -> n218  [key=0, style=solid];
n217 -> n30  [key=2, style=dotted];
n218 -> n219  [key=0, style=solid];
n218 -> n213  [key=2, style=dotted];
n218 -> n30  [key=2, style=dotted];
n216 -> n217  [key=0, style=solid];
n216 -> n218  [key=0, style=solid];
n219 -> n214  [key=0, style=bold, color=blue];
n220 -> n221  [key=0, style=solid];
n221 -> n222  [key=0, style=solid];
n221 -> n221  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
n222 -> n223  [key=0, style=solid];
n222 -> n224  [key=2, style=dotted];
n223 -> n220  [key=0, style=bold, color=blue];
n225 -> n226  [key=0, style=solid];
n226 -> n227  [key=0, style=solid];
n226 -> n0  [key=2, style=dotted];
n227 -> n225  [key=0, style=bold, color=blue];
n228 -> n229  [key=0, style=solid];
n229 -> n230  [key=0, style=solid];
n229 -> n229  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
n230 -> n231  [key=0, style=solid];
n230 -> n224  [key=2, style=dotted];
n231 -> n228  [key=0, style=bold, color=blue];
n232 -> n233  [key=0, style=solid];
n233 -> n234  [key=0, style=solid];
n233 -> n0  [key=2, style=dotted];
n234 -> n232  [key=0, style=bold, color=blue];
n235 -> n236  [key=0, style=solid];
n236 -> n237  [key=0, style=solid];
n236 -> n236  [key=3, color=darkorchid, style=bold, label="Local variable System.Action test"];
n237 -> n238  [key=0, style=solid];
n237 -> n224  [key=2, style=dotted];
n238 -> n235  [key=0, style=bold, color=blue];
n239 -> n240  [key=0, style=solid];
n240 -> n241  [key=0, style=solid];
n240 -> n0  [key=2, style=dotted];
n241 -> n239  [key=0, style=bold, color=blue];
n242 -> n243  [key=0, style=solid];
n242 -> n244  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
n242 -> n245  [key=1, style=dashed, color=darkseagreen4, label=int];
n242 -> n252  [key=1, style=dashed, color=darkseagreen4, label=int];
n242 -> n246  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
n243 -> n244  [key=0, style=solid];
n243 -> n0  [key=2, style=dotted];
n243 -> n245  [key=1, style=dashed, color=darkseagreen4, label=result];
n243 -> n247  [key=1, style=dashed, color=darkseagreen4, label=result];
n244 -> n245  [key=0, style=solid];
n244 -> n246  [key=0, style=solid];
n245 -> n248  [key=0, style=solid];
n245 -> n249  [key=2, style=dotted];
n245 -> n250  [key=2, style=dotted];
n245 -> n251  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n252 -> n253  [key=0, style=solid];
n246 -> n247  [key=0, style=solid];
n246 -> n248  [key=0, style=solid];
n247 -> n248  [key=0, style=solid];
n247 -> n249  [key=2, style=dotted];
n247 -> n224  [key=2, style=dotted];
n248 -> n242  [key=0, style=bold, color=blue];
n251 -> n252  [key=0, style=solid];
n253 -> n251  [key=0, style=bold, color=blue];
n254 -> n255  [key=0, style=solid];
n254 -> n256  [key=1, style=dashed, color=darkseagreen4, label=int];
n254 -> n259  [key=1, style=dashed, color=darkseagreen4, label=int];
n255 -> n256  [key=0, style=solid];
n255 -> n0  [key=2, style=dotted];
n256 -> n257  [key=0, style=solid];
n256 -> n249  [key=2, style=dotted];
n256 -> n250  [key=2, style=dotted];
n256 -> n258  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n259 -> n260  [key=0, style=solid];
n257 -> n254  [key=0, style=bold, color=blue];
n258 -> n259  [key=0, style=solid];
n260 -> n258  [key=0, style=bold, color=blue];
n261 -> n262  [key=0, style=solid];
n261 -> n263  [key=1, style=dashed, color=darkseagreen4, label=string];
n262 -> n263  [key=0, style=solid];
n262 -> n0  [key=2, style=dotted];
n263 -> n264  [key=0, style=solid];
n263 -> n30  [key=2, style=dotted];
n264 -> n261  [key=0, style=bold, color=blue];
n265 -> n266  [key=0, style=solid];
n265 -> n267  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
n265 -> n268  [key=1, style=dashed, color=darkseagreen4, label=int];
n265 -> n273  [key=1, style=dashed, color=darkseagreen4, label=int];
n265 -> n269  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResultType"];
n266 -> n267  [key=0, style=solid];
n266 -> n0  [key=2, style=dotted];
n266 -> n268  [key=1, style=dashed, color=darkseagreen4, label=result];
n266 -> n270  [key=1, style=dashed, color=darkseagreen4, label=result];
n267 -> n268  [key=0, style=solid];
n267 -> n269  [key=0, style=solid];
n268 -> n271  [key=0, style=solid];
n268 -> n249  [key=2, style=dotted];
n268 -> n250  [key=2, style=dotted];
n268 -> n272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n273 -> n274  [key=0, style=solid];
n269 -> n270  [key=0, style=solid];
n269 -> n271  [key=0, style=solid];
n270 -> n271  [key=0, style=solid];
n270 -> n249  [key=2, style=dotted];
n270 -> n224  [key=2, style=dotted];
n271 -> n265  [key=0, style=bold, color=blue];
n272 -> n273  [key=0, style=solid];
n274 -> n272  [key=0, style=bold, color=blue];
n275 -> n276  [key=0, style=solid];
n275 -> n277  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values"];
n276 -> n277  [key=0, style=solid];
n276 -> n0  [key=2, style=dotted];
n277 -> n278  [key=0, style=solid];
n277 -> n30  [key=2, style=dotted];
n278 -> n275  [key=0, style=bold, color=blue];
n279 -> n280  [key=0, style=solid];
n279 -> n281  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString"];
n280 -> n281  [key=0, style=solid];
n280 -> n0  [key=2, style=dotted];
n281 -> n282  [key=0, style=solid];
n281 -> n30  [key=2, style=dotted];
n282 -> n279  [key=0, style=bold, color=blue];
n283 -> n284  [key=0, style=solid];
n284 -> n285  [key=0, style=solid];
n284 -> n288  [key=2, style=dotted];
n284 -> n286  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n285 -> n286  [key=0, style=solid];
n285 -> n0  [key=2, style=dotted];
n286 -> n287  [key=0, style=solid];
n286 -> n30  [key=2, style=dotted];
n287 -> n283  [key=0, style=bold, color=blue];
n289 -> n290  [key=0, style=solid];
n289 -> n292  [key=1, style=dashed, color=darkseagreen4, label=int];
n289 -> n296  [key=1, style=dashed, color=darkseagreen4, label=int];
n290 -> n291  [key=0, style=solid];
n290 -> n0  [key=2, style=dotted];
n292 -> n293  [key=0, style=solid];
n292 -> n294  [key=2, style=dotted];
n292 -> n249  [key=2, style=dotted];
n292 -> n250  [key=2, style=dotted];
n292 -> n295  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n296 -> n297  [key=0, style=solid];
n291 -> n292  [key=0, style=solid];
n293 -> n289  [key=0, style=bold, color=blue];
n295 -> n296  [key=0, style=solid];
n297 -> n295  [key=0, style=bold, color=blue];
n298 -> n299  [key=0, style=solid];
n298 -> n300  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Immutable_Simple_Options"];
n299 -> n300  [key=0, style=solid];
n299 -> n15  [key=2, style=dotted];
n300 -> n301  [key=0, style=solid];
n300 -> n30  [key=2, style=dotted];
n301 -> n298  [key=0, style=bold, color=blue];
n302 -> n303  [key=0, style=solid];
n303 -> n304  [key=0, style=solid];
n303 -> n307  [key=2, style=dotted];
n303 -> n308  [key=2, style=dotted];
n303 -> n309  [key=2, style=dotted];
n303 -> n305  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
n304 -> n305  [key=0, style=solid];
n304 -> n0  [key=2, style=dotted];
n305 -> n306  [key=0, style=solid];
n305 -> n30  [key=2, style=dotted];
n306 -> n302  [key=0, style=bold, color=blue];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_36  [key=0, style=solid];
m1_32 -> m1_38  [key=2, style=dotted];
m1_32 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_39  [key=2, style=dotted];
m1_33 -> m1_22  [key=2, style=dotted];
m1_33 -> m1_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_33 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_40  [key=2, style=dotted];
m1_34 -> m1_41  [key=2, style=dotted];
m1_34 -> m1_42  [key=2, style=dotted];
m1_34 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_34 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label=values];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_22  [key=2, style=dotted];
m1_35 -> m1_37  [key=0, style=solid];
m1_35 -> m1_43  [key=2, style=dotted];
m1_35 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_37 -> n128  [key=0, style=bold, color=blue];
m1_3 -> m1_7  [key=0, style=solid];
m1_3 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_3 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>"];
m1_3 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Core.NameLookupResult>"];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_14  [key=2, style=dotted];
m1_7 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label=errors];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_15  [key=2, style=dotted];
m1_9 -> m1_16  [key=2, style=dotted];
m1_9 -> m1_17  [key=2, style=dotted];
m1_9 -> m1_18  [key=2, style=dotted];
m1_9 -> m1_19  [key=2, style=dotted];
m1_9 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label=arg];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_20  [key=2, style=dotted];
m1_10 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label=normalized];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_21  [key=2, style=dotted];
m1_11 -> m1_22  [key=2, style=dotted];
m1_11 -> m1_19  [key=2, style=dotted];
m1_11 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_11 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
m1_8 -> m1_9  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_23  [key=2, style=dotted];
m1_12 -> m1_24  [key=2, style=dotted];
m1_12 -> m1_25  [key=2, style=dotted];
m1_12 -> m1_26  [key=2, style=dotted];
m1_12 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_12 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_13 -> m1_3  [key=0, style=bold, color=blue];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_97 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_97 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_97 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_97 -> m1_100  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_98 -> m1_99  [key=0, style=solid];
m1_98 -> m1_42  [key=2, style=dotted];
m1_98 -> m1_23  [key=2, style=dotted];
m1_98 -> m1_103  [key=2, style=dotted];
m1_98 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_98 -> m1_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_98 -> m1_98  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_98 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m1_99 -> m1_100  [key=0, style=solid];
m1_99 -> m1_42  [key=2, style=dotted];
m1_99 -> m1_23  [key=2, style=dotted];
m1_99 -> m1_103  [key=2, style=dotted];
m1_99 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_99 -> m1_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_99 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_100 -> m1_101  [key=0, style=solid];
m1_100 -> m1_104  [key=2, style=dotted];
m1_101 -> m1_102  [key=0, style=solid];
m1_102 -> m1_97  [key=0, style=bold, color=blue];
m1_18 -> m1_162  [key=0, style=solid];
m1_18 -> m1_165  [key=0, style=bold, color=crimson];
m1_18 -> m1_166  [key=0, style=bold, color=crimson];
m1_18 -> m1_168  [key=0, style=bold, color=crimson];
m1_18 -> m1_169  [key=0, style=bold, color=crimson];
m1_18 -> m1_176  [key=0, style=bold, color=crimson];
m1_18 -> m1_179  [key=0, style=bold, color=crimson];
m1_18 -> m1_163  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_18 -> m1_167  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_18 -> m1_173  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Core.NameLookupResult>"];
m1_162 -> m1_163  [key=0, style=solid];
m1_162 -> m1_180  [key=0, style=solid];
m1_165 -> m1_166  [key=0, style=solid];
m1_165 -> m1_16  [key=2, style=dotted];
m1_166 -> m1_167  [key=0, style=solid];
m1_168 -> m1_169  [key=0, style=solid];
m1_168 -> m1_183  [key=2, style=dotted];
m1_169 -> m1_170  [key=0, style=solid];
m1_176 -> m1_177  [key=0, style=solid];
m1_176 -> m1_183  [key=2, style=dotted];
m1_179 -> m1_180  [key=0, style=solid];
m1_179 -> m1_181  [key=2, style=dotted];
m1_179 -> m1_16  [key=2, style=dotted];
m1_163 -> m1_164  [key=0, style=solid];
m1_163 -> m1_181  [key=2, style=dotted];
m1_163 -> m1_168  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_163 -> m1_171  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_163 -> m1_178  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_163 -> m1_179  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_170  [key=0, style=solid];
m1_173 -> m1_174  [key=0, style=solid];
m1_173 -> m1_22  [key=2, style=dotted];
m1_173 -> m1_177  [key=1, style=dashed, color=darkseagreen4, label=r];
m1_164 -> m1_165  [key=0, style=solid];
m1_164 -> m1_167  [key=0, style=solid];
m1_164 -> m1_182  [key=2, style=dotted];
m1_171 -> m1_172  [key=0, style=solid];
m1_171 -> m1_178  [key=0, style=solid];
m1_178 -> m1_179  [key=0, style=solid];
m1_178 -> m1_180  [key=0, style=solid];
m1_170 -> m1_171  [key=0, style=solid];
m1_170 -> m1_174  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_170 -> m1_175  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_170 -> m1_178  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_170 -> m1_179  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_170 -> m1_170  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m1_174 -> m1_175  [key=0, style=solid];
m1_174 -> m1_178  [key=0, style=solid];
m1_175 -> m1_176  [key=0, style=solid];
m1_175 -> m1_175  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_175 -> m1_178  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_175 -> m1_179  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_172 -> m1_173  [key=0, style=solid];
m1_172 -> m1_184  [key=2, style=dotted];
m1_172 -> m1_176  [key=1, style=dashed, color=darkseagreen4, label=n];
m1_177 -> m1_171  [key=0, style=solid];
m1_177 -> m1_178  [key=0, style=solid];
m1_180 -> m1_18  [key=0, style=bold, color=blue];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m1_57 -> m1_69  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m1_57 -> m1_62  [key=1, style=dashed, color=darkseagreen4, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>"];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_64  [key=2, style=dotted];
m1_58 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_42  [key=2, style=dotted];
m1_59 -> m1_65  [key=2, style=dotted];
m1_59 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_59 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_59 -> m1_81  [key=1, style=dashed, color=darkseagreen4, label=replaces];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_67  [key=2, style=dotted];
m1_62 -> m1_26  [key=2, style=dotted];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_42  [key=2, style=dotted];
m1_60 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_66  [key=2, style=dotted];
m1_61 -> m1_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_63 -> m1_57  [key=0, style=bold, color=blue];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_133  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_129 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_129 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_129 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_129 -> m1_150  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_129 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_129 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_129 -> m1_135  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_129 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_133  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_130 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_130 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_130 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_130 -> m1_150  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_130 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_130 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_130 -> m1_135  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_130 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_130 -> m1_57  [key=3, color=darkorchid, style=bold, label="Local variable RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> explodedTokens"];
m1_130 -> m1_130  [key=3, color=darkorchid, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> "];
m1_131 -> m1_129  [key=0, style=bold, color=blue];
m1_152 -> m1_153  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_4  [key=0, style=bold, color=blue];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_29 -> m1_27  [key=0, style=bold, color=blue];
m1_44 -> m1_45  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_51 -> m1_52  [key=0, style=solid];
m1_55 -> m1_56  [key=0, style=solid];
m1_55 -> m1_25  [key=2, style=dotted];
m1_54 -> m1_55  [key=0, style=solid];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_47  [key=2, style=dotted];
m1_46 -> m1_44  [key=0, style=bold, color=blue];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_47  [key=2, style=dotted];
m1_50 -> m1_48  [key=0, style=bold, color=blue];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_47  [key=2, style=dotted];
m1_53 -> m1_51  [key=0, style=bold, color=blue];
m1_56 -> m1_54  [key=0, style=bold, color=blue];
m1_69 -> m1_70  [key=0, style=solid];
m1_69 -> m1_22  [key=2, style=dotted];
m1_69 -> m1_71  [key=2, style=dotted];
m1_69 -> m1_72  [key=2, style=dotted];
m1_69 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_68 -> m1_69  [key=0, style=solid];
m1_68 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_77 -> m1_78  [key=0, style=solid];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_83  [key=2, style=dotted];
m1_81 -> m1_84  [key=2, style=dotted];
m1_81 -> m1_85  [key=2, style=dotted];
m1_81 -> m1_86  [key=2, style=dotted];
m1_81 -> m1_72  [key=2, style=dotted];
m1_81 -> m1_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_81 -> m1_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_80 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m1_94 -> m1_95  [key=0, style=solid];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_76  [key=2, style=dotted];
m1_70 -> m1_68  [key=0, style=bold, color=blue];
m1_73 -> m1_74  [key=0, style=solid];
m1_75 -> m1_73  [key=0, style=bold, color=blue];
m1_78 -> m1_79  [key=0, style=solid];
m1_79 -> m1_77  [key=0, style=bold, color=blue];
m1_88 -> m1_89  [key=0, style=solid];
m1_91 -> m1_92  [key=0, style=solid];
m1_91 -> m1_93  [key=2, style=dotted];
m1_91 -> m1_42  [key=2, style=dotted];
m1_82 -> m1_80  [key=0, style=bold, color=blue];
m1_87 -> m1_88  [key=0, style=solid];
m1_90 -> m1_91  [key=0, style=solid];
m1_89 -> m1_87  [key=0, style=bold, color=blue];
m1_92 -> m1_90  [key=0, style=bold, color=blue];
m1_95 -> m1_96  [key=0, style=solid];
m1_96 -> m1_94  [key=0, style=bold, color=blue];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_109  [key=2, style=dotted];
m1_106 -> m1_110  [key=2, style=dotted];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_111  [key=2, style=dotted];
m1_107 -> m1_72  [key=2, style=dotted];
m1_107 -> m1_112  [key=2, style=dotted];
m1_107 -> m1_113  [key=2, style=dotted];
m1_107 -> m1_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_115 -> m1_116  [key=0, style=solid];
m1_115 -> m1_117  [key=2, style=dotted];
m1_115 -> m1_118  [key=2, style=dotted];
m1_105 -> m1_106  [key=0, style=solid];
m1_105 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m1_119 -> m1_120  [key=0, style=solid];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_30  [key=2, style=dotted];
m1_124 -> m1_112  [key=2, style=dotted];
m1_124 -> m1_113  [key=2, style=dotted];
m1_123 -> m1_124  [key=0, style=solid];
m1_126 -> m1_127  [key=0, style=solid];
m1_108 -> m1_105  [key=0, style=bold, color=blue];
m1_114 -> m1_115  [key=0, style=solid];
m1_116 -> m1_114  [key=0, style=bold, color=blue];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_122  [key=2, style=dotted];
m1_121 -> m1_119  [key=0, style=bold, color=blue];
m1_125 -> m1_123  [key=0, style=bold, color=blue];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_122  [key=2, style=dotted];
m1_128 -> m1_126  [key=0, style=bold, color=blue];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_138  [key=2, style=dotted];
m1_133 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_133 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_133 -> m1_150  [key=1, style=dashed, color=darkseagreen4, label=normalize];
m1_140 -> m1_141  [key=0, style=solid];
m1_140 -> m1_97  [key=2, style=dotted];
m1_140 -> m1_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_145  [key=2, style=dotted];
m1_134 -> m1_135  [key=0, style=solid];
m1_134 -> n128  [key=2, style=dotted];
m1_134 -> m1_3  [key=2, style=dotted];
m1_134 -> m1_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_134 -> m1_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_150 -> m1_151  [key=0, style=solid];
m1_150 -> m1_3  [key=2, style=dotted];
m1_150 -> m1_152  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_145  [key=2, style=dotted];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_145  [key=2, style=dotted];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_57  [key=2, style=dotted];
m1_135 -> m1_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_161  [key=2, style=dotted];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_132 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_132 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_132 -> m1_150  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_132 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_132 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_132 -> m1_135  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_132 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_147 -> m1_148  [key=0, style=solid];
m1_149 -> m1_150  [key=0, style=solid];
m1_155 -> m1_156  [key=0, style=solid];
m1_136 -> m1_137  [key=0, style=solid];
m1_158 -> m1_159  [key=0, style=solid];
m1_137 -> m1_132  [key=0, style=bold, color=blue];
m1_139 -> m1_140  [key=0, style=solid];
m1_141 -> m1_139  [key=0, style=bold, color=blue];
m1_142 -> m1_143  [key=0, style=solid];
m1_144 -> m1_142  [key=0, style=bold, color=blue];
m1_146 -> m1_147  [key=0, style=solid];
m1_148 -> m1_146  [key=0, style=bold, color=blue];
m1_151 -> m1_149  [key=0, style=bold, color=blue];
m1_154 -> m1_152  [key=0, style=bold, color=blue];
m1_157 -> m1_155  [key=0, style=bold, color=blue];
m1_160 -> m1_158  [key=0, style=bold, color=blue];
m1_17 -> m1_185  [key=0, style=solid];
m1_17 -> m1_189  [key=0, style=bold, color=crimson];
m1_17 -> m1_190  [key=0, style=bold, color=crimson];
m1_17 -> m1_193  [key=0, style=bold, color=crimson];
m1_17 -> m1_195  [key=0, style=bold, color=crimson];
m1_17 -> m1_196  [key=0, style=bold, color=crimson];
m1_17 -> m1_186  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_17 -> m1_192  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_185 -> m1_186  [key=0, style=solid];
m1_185 -> m1_197  [key=0, style=solid];
m1_185 -> m1_15  [key=2, style=dotted];
m1_189 -> m1_190  [key=0, style=solid];
m1_189 -> m1_183  [key=2, style=dotted];
m1_190 -> m1_191  [key=0, style=solid];
m1_193 -> m1_194  [key=0, style=solid];
m1_195 -> m1_196  [key=0, style=solid];
m1_195 -> m1_183  [key=2, style=dotted];
m1_196 -> m1_197  [key=0, style=solid];
m1_196 -> m1_202  [key=2, style=dotted];
m1_186 -> m1_187  [key=0, style=solid];
m1_186 -> m1_181  [key=2, style=dotted];
m1_186 -> m1_189  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_186 -> m1_194  [key=1, style=dashed, color=darkseagreen4, label=text];
m1_192 -> m1_193  [key=0, style=solid];
m1_192 -> m1_199  [key=2, style=dotted];
m1_192 -> m1_200  [key=2, style=dotted];
m1_187 -> m1_188  [key=0, style=solid];
m1_187 -> m1_198  [key=2, style=dotted];
m1_187 -> m1_191  [key=1, style=dashed, color=darkseagreen4, label=equalIndex];
m1_194 -> m1_195  [key=0, style=solid];
m1_194 -> m1_201  [key=2, style=dotted];
m1_194 -> m1_196  [key=1, style=dashed, color=darkseagreen4, label=parts];
m1_188 -> m1_189  [key=0, style=solid];
m1_188 -> m1_191  [key=0, style=solid];
m1_191 -> m1_192  [key=0, style=solid];
m1_191 -> m1_194  [key=0, style=solid];
m1_197 -> m1_17  [key=0, style=bold, color=blue];
m1_111 -> m1_9  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_3  [key=3, color=darkorchid, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> Tokenize"];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_203 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label=unkTokens];
m1_204 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label=values];
m1_205 -> m1_69  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<char>>"];
m1_206 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_207 -> m1_81  [key=1, style=dashed, color=darkseagreen4, label=replaces];
m1_208 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_209 -> m1_91  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m1_210 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_211 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_211 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, bool>"];
m1_212 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m1_213 -> m1_133  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_213 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_213 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_213 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_213 -> m1_150  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_213 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_213 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_213 -> m1_135  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_213 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_214 -> m1_133  [key=1, style=dashed, color=darkseagreen4, label=bool];
m1_215 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label=bool];
m1_216 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_216 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_216 -> m1_150  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_216 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_216 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_216 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_217 -> m1_150  [key=1, style=dashed, color=darkseagreen4, label=normalize];
m2_0 -> m2_1  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_3 -> m2_11  [key=2, style=dotted, color=green];
m2_3 -> m2_12  [key=2, style=dotted, color=green];
m2_3 -> m2_13  [key=2, style=dotted, color=green];
m2_3 -> m2_16  [key=1, style=dashed, color=green, label="lambda expression"];
m2_3 -> m2_21  [key=1, style=dashed, color=green, label=result];
m2_2 -> m2_3  [key=0, style=solid, color=green];
m2_2 -> m2_17  [key=1, style=dashed, color=green, label=specs];
m2_2 -> m2_7  [key=2, style=dotted];
m2_2 -> m2_8  [key=2, style=dotted];
m2_2 -> m2_9  [key=2, style=dotted];
m2_2 -> n3  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_14  [key=2, style=dotted];
m2_4 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
m2_1 -> m2_6  [key=2, style=dotted];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_41 -> m2_42  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid, color=green];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_23  [key=2, style=dotted];
m2_21 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_21 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m2_17 -> m2_18  [key=0, style=solid, color=green];
m2_17 -> m2_19  [key=2, style=dotted, color=green];
m2_18 -> m2_16  [key=0, style=bold, color=blue];
m2_35 -> m2_36  [key=0, style=solid, color=green];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_23  [key=2, style=dotted];
m2_39 -> m2_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_39 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m2_36 -> m2_37  [key=0, style=solid, color=green];
m2_36 -> m2_19  [key=2, style=dotted, color=green];
m2_37 -> m2_35  [key=0, style=bold, color=blue];
m2_20 -> m2_21  [key=0, style=solid];
m2_22 -> m2_20  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_25 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_27  [key=2, style=dotted];
m2_25 -> m2_28  [key=2, style=dotted];
m2_38 -> m2_39  [key=0, style=solid];
m2_40 -> m2_38  [key=0, style=bold, color=blue];
m2_42 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_27  [key=2, style=dotted];
m2_42 -> m2_28  [key=2, style=dotted];
m2_26 -> m2_24  [key=0, style=bold, color=blue];
m2_43 -> m2_41  [key=0, style=bold, color=blue];
m2_29 -> m2_30  [key=0, style=solid];
m2_32 -> m2_33  [key=0, style=solid, color=green];
m2_32 -> m2_11  [key=2, style=dotted, color=green];
m2_32 -> m2_12  [key=2, style=dotted, color=green];
m2_32 -> m2_13  [key=2, style=dotted, color=green];
m2_32 -> m2_35  [key=1, style=dashed, color=green, label="lambda expression"];
m2_32 -> m2_39  [key=1, style=dashed, color=green, label=result];
m2_31 -> m2_32  [key=0, style=solid, color=green];
m2_31 -> m2_36  [key=1, style=dashed, color=green, label=specs];
m2_31 -> m2_7  [key=2, style=dotted];
m2_31 -> m2_8  [key=2, style=dotted];
m2_31 -> m2_9  [key=2, style=dotted];
m2_31 -> n3  [key=2, style=dotted];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_14  [key=2, style=dotted];
m2_33 -> m2_15  [key=2, style=dotted];
m2_33 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
m2_30 -> m2_6  [key=2, style=dotted];
m2_34 -> m2_29  [key=0, style=bold, color=blue];
m2_44 -> m2_17  [key=1, style=dashed, color=green, label=specs];
m2_47 -> m2_36  [key=1, style=dashed, color=green, label=specs];
m2_45 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_48 -> m2_39  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_46 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m2_49 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=2, style=dotted];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
}
