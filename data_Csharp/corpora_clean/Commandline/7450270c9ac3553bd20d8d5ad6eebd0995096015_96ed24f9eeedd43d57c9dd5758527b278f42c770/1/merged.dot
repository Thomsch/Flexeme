digraph  {
n42 [label=specs, span=""];
n43 [label=result, span=""];
n44 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
n45 [label=specs, span=""];
n46 [label=result, span=""];
n47 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
n0 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n1 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="16-19", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n2 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="20-24", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)"];
n4 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="33-33", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n3 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="27-30", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)"];
n8 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n15 [label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="29-29", cluster="lambda expression"];
n9 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)"];
n10 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)"];
n11 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)"];
n14 [label="Entry lambda expression", span="29-29", cluster="lambda expression"];
n19 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="33-33", cluster="lambda expression"];
n5 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n12 [label="Entry Unk.All", span="", cluster="Unk.All"];
n13 [label="Entry Unk.True", span="", cluster="Unk.True"];
n18 [label="Entry lambda expression", span="33-33", cluster="lambda expression"];
n16 [label="Exit lambda expression", span="29-29", cluster="lambda expression"];
n17 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n20 [label="Exit lambda expression", span="33-33", cluster="lambda expression"];
n21 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n22 [label="Entry lambda expression", span="33-33", cluster="lambda expression"];
n23 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="33-33", cluster="lambda expression"];
n24 [label="Exit lambda expression", span="33-33", cluster="lambda expression"];
n25 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)"];
n26 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
n27 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n28 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="42-45", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n29 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="46-50", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n31 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="59-59", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n30 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="53-56", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n34 [label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="55-55", cluster="lambda expression"];
n33 [label="Entry lambda expression", span="55-55", cluster="lambda expression"];
n37 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="59-59", cluster="lambda expression"];
n32 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n36 [label="Entry lambda expression", span="59-59", cluster="lambda expression"];
n35 [label="Exit lambda expression", span="55-55", cluster="lambda expression"];
n38 [label="Exit lambda expression", span="59-59", cluster="lambda expression"];
n39 [label="Entry lambda expression", span="59-59", cluster="lambda expression"];
n40 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="59-59", cluster="lambda expression"];
n41 [label="Exit lambda expression", span="59-59", cluster="lambda expression"];
m0_11 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="NameLookup.cs"];
m0_0 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs"];
m0_1 [label="return specifications.Any(a => name.MatchName(a.ShortName, a.LongName, comparer));", span="13-13", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=green, community=0, file="NameLookup.cs"];
m0_2 [label="Exit CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs"];
m0_7 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="NameLookup.cs"];
m0_12 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="NameLookup.cs"];
m0_21 [label="Entry Unk.Just", span="", cluster="Unk.Just", file="NameLookup.cs"];
m0_18 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="NameLookup.cs"];
m0_4 [label="Entry lambda expression", span="13-13", cluster="lambda expression", file="NameLookup.cs"];
m0_5 [label="name.MatchName(a.ShortName, a.LongName, comparer)", span="13-13", cluster="lambda expression", color=green, community=0, file="NameLookup.cs"];
m0_6 [label="Exit lambda expression", span="13-13", cluster="lambda expression", file="NameLookup.cs"];
m0_15 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="NameLookup.cs"];
m0_16 [label="name.MatchName(a.ShortName, a.LongName, comparer) && a.Separator != '\0'", span="20-20", cluster="lambda expression", color=green, community=0, file="NameLookup.cs"];
m0_17 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="NameLookup.cs"];
m0_19 [label="Maybe.Just(spec.Separator)", span="22-22", cluster="lambda expression", color=green, community=0, file="NameLookup.cs"];
m0_20 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="NameLookup.cs"];
m0_14 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="NameLookup.cs"];
m0_13 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="NameLookup.cs"];
m0_8 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs"];
m0_9 [label="return specifications.SingleOrDefault(\r\n                a => name.MatchName(a.ShortName, a.LongName, comparer) && a.Separator != '\0')\r\n                .ToMaybe()\r\n                .Return(spec => Maybe.Just(spec.Separator), Maybe.Nothing<char>());", span="19-22", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=green, community=0, file="NameLookup.cs"];
m0_10 [label="Exit CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs"];
m0_22 [label=string, span="", file="NameLookup.cs"];
m0_23 [label="System.StringComparer", span="", file="NameLookup.cs"];
m0_24 [label=string, span="", file="NameLookup.cs"];
m0_25 [label="System.StringComparer", span="", file="NameLookup.cs"];
m1_10 [label="throw new ArgumentNullException(''configuration'');", span="39-39", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs"];
m1_8 [label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22", cluster="lambda expression", file="Parser.cs", color=green, community=0];
m1_9 [label="configuration == null", span="39-39", cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs"];
m1_12 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="Parser.cs"];
m1_11 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Parser.cs"];
m1_13 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="Parser.cs"];
m1_14 [label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Parser.cs"];
m1_37 [label="Entry CommandLine.Parser.HandleUnknownArguments(bool)", span="198-198", cluster="CommandLine.Parser.HandleUnknownArguments(bool)", file="Parser.cs"];
m1_118 [label="return ignoreUnknownArguments\r\n                ? Enumerable.Empty<ErrorType>().Concat(ErrorType.UnknownOptionError)\r\n                : Enumerable.Empty<ErrorType>();", span="200-202", cluster="CommandLine.Parser.HandleUnknownArguments(bool)", file="Parser.cs"];
m1_119 [label="Exit CommandLine.Parser.HandleUnknownArguments(bool)", span="198-198", cluster="CommandLine.Parser.HandleUnknownArguments(bool)", file="Parser.cs"];
m1_87 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Parser.cs"];
m1_93 [label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78", cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Parser.cs"];
m1_20 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="Parser.cs"];
m1_21 [label="Dispose(false)", span="57-57", cluster="CommandLine.Parser.~Parser()", file="Parser.cs"];
m1_22 [label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41", cluster="lambda expression", file="Parser.cs"];
m1_86 [label="Entry Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", span="", cluster="Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", file="Parser.cs"];
m1_38 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Parser.cs"];
m1_89 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Parser.cs"];
m1_16 [label="var result = Switch.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Parser.cs"];
m1_59 [label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m1_60 [label="args == null", span="146-146", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m1_62 [label="types == null", span="147-147", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m1_64 [label="types.Length == 0", span="148-148", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m1_66 [label="return MakeParserResult(\r\n                () => InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments)),\r\n                settings);", span="150-158", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m1_61 [label="throw new ArgumentNullException(''args'');", span="146-146", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m1_63 [label="throw new ArgumentNullException(''types'');", span="147-147", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m1_65 [label="throw new ArgumentOutOfRangeException(''types'');", span="148-148", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m1_67 [label="Exit CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144", cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs"];
m1_3 [label="expected.ShouldAllBeEquivalentTo(result)", span="24-24", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Parser.cs"];
m1_17 [label="expected.ShouldAllBeEquivalentTo(result)", span="43-43", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Parser.cs"];
m1_18 [label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Parser.cs"];
m1_19 [label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="46-46", cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Parser.cs"];
m1_68 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="Parser.cs"];
m1_43 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="114-114", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_44 [label="factory == null", span="117-117", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_48 [label="args == null", span="119-119", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_50 [label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments)),\r\n                settings);", span="121-129", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_45 [label="throw new ArgumentNullException(''factory'');", span="117-117", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_46 [label="!typeof(T).IsMutable()", span="118-118", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_47 [label="throw new ArgumentException(''factory'');", span="118-118", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_49 [label="throw new ArgumentNullException(''args'');", span="119-119", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_51 [label="Exit CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="114-114", cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_113 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Parser.cs"];
m1_52 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="Parser.cs"];
m1_88 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", span="20-20", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Parser.cs"];
m1_120 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="Parser.cs"];
m1_4 [label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Parser.cs"];
m1_97 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Parser.cs"];
m1_5 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Parser.cs"];
m1_6 [label="Entry Unk.ShouldAllBeEquivalentTo", span="", cluster="Unk.ShouldAllBeEquivalentTo", file="Parser.cs"];
m1_7 [label="Exit CommandLine.Parser.Parser()", span="26-26", cluster="CommandLine.Parser.Parser()", file="Parser.cs"];
m1_31 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="Parser.cs"];
m1_116 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="Parser.cs"];
m1_117 [label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="205-205", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m1_122 [label="parserResult.Tag == ParserResultType.NotParsed", span="207-207", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m1_123 [label="((NotParsed<T>)parserResult).Errors.Any()", span="209-209", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m1_124 [label="helpWriter.ToMaybe().Do(writer => writer.Write(HelpText.AutoBuild(parserResult)))", span="211-211", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m1_125 [label="return parserResult;", span="215-215", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m1_126 [label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="205-205", cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs"];
m1_130 [label="Entry lambda expression", span="211-211", cluster="lambda expression", file="Parser.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Parser.cs"];
m1_1 [label="var expected = new Token[] { }", span="15-15", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", color=red, community=0, file="Parser.cs"];
m1_2 [label="var result = Switch.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Parser.cs", color=green, community=0];
m1_35 [label="InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments))", span="94-100", cluster="lambda expression", file="Parser.cs"];
m1_34 [label="Entry lambda expression", span="94-100", cluster="lambda expression", file="Parser.cs"];
m1_36 [label="Exit lambda expression", span="94-100", cluster="lambda expression", file="Parser.cs"];
m1_39 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="Parser.cs"];
m1_40 [label="Tokenize(arguments, optionSpecs, settings)", span="96-96", cluster="lambda expression", file="Parser.cs"];
m1_41 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="Parser.cs"];
m1_54 [label="InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments))", span="122-128", cluster="lambda expression", file="Parser.cs"];
m1_53 [label="Entry lambda expression", span="122-128", cluster="lambda expression", file="Parser.cs"];
m1_55 [label="Exit lambda expression", span="122-128", cluster="lambda expression", file="Parser.cs"];
m1_56 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="Parser.cs"];
m1_57 [label="Tokenize(arguments, optionSpecs, settings)", span="124-124", cluster="lambda expression", file="Parser.cs"];
m1_58 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="Parser.cs"];
m1_70 [label="InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments))", span="151-157", cluster="lambda expression", file="Parser.cs"];
m1_69 [label="Entry lambda expression", span="151-157", cluster="lambda expression", file="Parser.cs"];
m1_71 [label="Exit lambda expression", span="151-157", cluster="lambda expression", file="Parser.cs"];
m1_73 [label="Entry lambda expression", span="152-152", cluster="lambda expression", file="Parser.cs"];
m1_74 [label="Tokenize(arguments, optionSpecs, settings)", span="152-152", cluster="lambda expression", file="Parser.cs"];
m1_75 [label="Exit lambda expression", span="152-152", cluster="lambda expression", file="Parser.cs"];
m1_91 [label="Tokenizer.Normalize(toks,\r\n                    name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))", span="177-178", cluster="lambda expression", color=red, community=0, file="Parser.cs"];
m1_95 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="178-178", cluster="lambda expression", color=red, community=0, file="Parser.cs"];
m1_102 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer), normalize)", span="185-185", cluster="lambda expression", file="Parser.cs"];
m1_105 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="185-185", cluster="lambda expression", file="Parser.cs"];
m1_108 [label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="186-186", cluster="lambda expression", file="Parser.cs"];
m1_111 [label="NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer)", span="187-187", cluster="lambda expression", file="Parser.cs"];
m1_99 [label=toks, span="179-179", cluster="lambda expression", file="Parser.cs"];
m1_101 [label="Entry lambda expression", span="184-185", cluster="lambda expression", file="Parser.cs"];
m1_107 [label="Entry lambda expression", span="186-186", cluster="lambda expression", file="Parser.cs"];
m1_110 [label="Entry lambda expression", span="187-187", cluster="lambda expression", file="Parser.cs"];
m1_90 [label="Entry lambda expression", span="177-178", cluster="lambda expression", file="Parser.cs"];
m1_92 [label="Exit lambda expression", span="177-178", cluster="lambda expression", file="Parser.cs"];
m1_94 [label="Entry lambda expression", span="178-178", cluster="lambda expression", file="Parser.cs"];
m1_96 [label="Exit lambda expression", span="178-178", cluster="lambda expression", file="Parser.cs"];
m1_98 [label="Entry lambda expression", span="179-179", cluster="lambda expression", file="Parser.cs"];
m1_100 [label="Exit lambda expression", span="179-179", cluster="lambda expression", file="Parser.cs"];
m1_103 [label="Exit lambda expression", span="184-185", cluster="lambda expression", file="Parser.cs"];
m1_104 [label="Entry lambda expression", span="185-185", cluster="lambda expression", file="Parser.cs"];
m1_106 [label="Exit lambda expression", span="185-185", cluster="lambda expression", file="Parser.cs"];
m1_109 [label="Exit lambda expression", span="186-186", cluster="lambda expression", file="Parser.cs"];
m1_112 [label="Exit lambda expression", span="187-187", cluster="lambda expression", file="Parser.cs"];
m1_131 [label="writer.Write(HelpText.AutoBuild(parserResult))", span="211-211", cluster="lambda expression", file="Parser.cs"];
m1_132 [label="Exit lambda expression", span="211-211", cluster="lambda expression", file="Parser.cs"];
m1_127 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Parser.cs"];
m1_128 [label="Entry T.ToMaybe<T>()", span="249-249", cluster="T.ToMaybe<T>()", file="Parser.cs"];
m1_121 [label="Entry System.Collections.Generic.IEnumerable<T>.Concat<T>(T)", span="94-94", cluster="System.Collections.Generic.IEnumerable<T>.Concat<T>(T)", file="Parser.cs"];
m1_129 [label="Entry CSharpx.Maybe<T>.Do<T>(System.Action<T>)", span="300-300", cluster="CSharpx.Maybe<T>.Do<T>(System.Action<T>)", file="Parser.cs"];
m1_133 [label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="260-260", cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Parser.cs"];
m1_15 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Parser.cs"];
m1_80 [label="Entry System.GC.SuppressFinalize(object)", span="0-0", cluster="System.GC.SuppressFinalize(object)", file="Parser.cs"];
m1_32 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="Parser.cs"];
m1_142 [label="Entry CommandLine.ParserSettings.Dispose()", span="119-119", cluster="CommandLine.ParserSettings.Dispose()", file="Parser.cs"];
m1_72 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="35-35", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Parser.cs"];
m1_30 [label="Entry System.Type.IsMutable()", span="139-139", cluster="System.Type.IsMutable()", file="Parser.cs"];
m1_33 [label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="191-191", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs"];
m1_114 [label="return DisplayHelp(\r\n                parseFunc(),\r\n                settings.HelpWriter);", span="193-195", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs"];
m1_115 [label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="191-191", cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs"];
m1_76 [label="Entry CommandLine.Parser.Dispose()", span="164-164", cluster="CommandLine.Parser.Dispose()", file="Parser.cs"];
m1_77 [label="Dispose(true)", span="166-166", cluster="CommandLine.Parser.Dispose()", file="Parser.cs"];
m1_78 [label="GC.SuppressFinalize(this)", span="168-168", cluster="CommandLine.Parser.Dispose()", file="Parser.cs"];
m1_79 [label="Exit CommandLine.Parser.Dispose()", span="164-164", cluster="CommandLine.Parser.Dispose()", file="Parser.cs"];
m1_24 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_25 [label="args == null", span="87-87", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_28 [label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments)),\r\n                settings);", span="93-101", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_26 [label="throw new ArgumentNullException(''args'');", span="87-87", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_27 [label="var factory = typeof(T).IsMutable()\r\n                ? Maybe.Just<Func<T>>(Activator.CreateInstance<T>)\r\n                : Maybe.Nothing<Func<T>>()", span="89-91", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_29 [label="Exit CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m1_42 [label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="171-171", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs"];
m1_81 [label="var normalize = settings.IgnoreUnknownArguments\r\n                ? toks => Tokenizer.Normalize(toks,\r\n                    name => NameLookup.Contains(name, optionSpecs, settings.NameComparer))\r\n                : new Func<IEnumerable<Token>, IEnumerable<Token>>(toks => toks)", span="176-179", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", color=red, community=0, file="Parser.cs"];
m1_82 [label="var tokens = settings.EnableDashDash\r\n                ? Tokenizer.PreprocessDashDash(\r\n                        arguments,\r\n                        args =>\r\n                            Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer), normalize))\r\n                : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer), normalize)", span="181-186", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs"];
m1_83 [label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer))", span="187-187", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs"];
m1_84 [label="return explodedTokens;", span="188-188", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs"];
m1_85 [label="Exit CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="171-171", cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs"];
m1_23 [label="Entry CommandLine.Parser.Dispose(bool)", span="218-218", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m1_135 [label=disposed, span="220-220", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m1_137 [label=disposing, span="225-225", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m1_136 [label="return;", span="222-222", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m1_138 [label="settings != null", span="227-227", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m1_139 [label="settings.Dispose()", span="229-229", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m1_140 [label="disposed = true", span="232-232", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m1_141 [label="Exit CommandLine.Parser.Dispose(bool)", span="218-218", cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs"];
m1_134 [label="Entry System.IO.TextWriter.Write(string)", span="0-0", cluster="System.IO.TextWriter.Write(string)", file="Parser.cs"];
m1_143 [label="CommandLine.Parser", span="", file="Parser.cs"];
m1_144 [label="System.Collections.Generic.IEnumerable<string>", span="", file="Parser.cs"];
m1_145 [label=factory, span="", file="Parser.cs"];
m1_146 [label="System.Func<T>", span="", file="Parser.cs"];
m1_147 [label="System.Collections.Generic.IEnumerable<string>", span="", file="Parser.cs"];
m1_148 [label="System.Collections.Generic.IEnumerable<string>", span="", file="Parser.cs"];
m1_149 [label="params System.Type[]", span="", file="Parser.cs"];
m1_150 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="Parser.cs"];
m1_151 [label="CommandLine.ParserSettings", span="", file="Parser.cs"];
m1_152 [label=normalize, span="", file="Parser.cs"];
m1_153 [label="CommandLine.ParserResult<T>", span="", file="Parser.cs"];
m2_52 [label="Entry CommandLine.Core.Specification.GetSetName()", span="80-80", cluster="CommandLine.Core.Specification.GetSetName()", file="ParserTests.cs"];
m2_0 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="ParserTests.cs"];
m2_1 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="ParserTests.cs"];
m2_2 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="ParserTests.cs"];
m2_19 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="ParserTests.cs"];
m2_59 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="ParserTests.cs"];
m2_60 [label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="54-70", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="ParserTests.cs"];
m2_61 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="ParserTests.cs"];
m2_57 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="ParserTests.cs"];
m2_10 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="ParserTests.cs"];
m2_14 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="ParserTests.cs"];
m2_58 [label="Entry Unk.FromSpecification", span="", cluster="Unk.FromSpecification", file="ParserTests.cs"];
m2_73 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="ParserTests.cs"];
m2_51 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="ParserTests.cs"];
m2_78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ParserTests.cs"];
m2_75 [label="Entry lambda expression", span="66-67", cluster="lambda expression", file="ParserTests.cs"];
m2_4 [label="var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22", cluster="lambda expression", file="ParserTests.cs"];
m2_3 [label="Entry lambda expression", span="20-29", cluster="lambda expression", file="ParserTests.cs"];
m2_5 [label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23", cluster="lambda expression", file="ParserTests.cs"];
m2_15 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="ParserTests.cs"];
m2_7 [label="return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26", cluster="lambda expression", file="ParserTests.cs"];
m2_6 [label="groups.Count() > 1", span="24-24", cluster="lambda expression", file="ParserTests.cs"];
m2_20 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="ParserTests.cs"];
m2_8 [label="return Enumerable.Empty<Nothing<Error>>();", span="28-28", cluster="lambda expression", file="ParserTests.cs"];
m2_9 [label="Exit lambda expression", span="20-29", cluster="lambda expression", file="ParserTests.cs"];
m2_23 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="ParserTests.cs"];
m2_16 [label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22", cluster="lambda expression", file="ParserTests.cs"];
m2_17 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="ParserTests.cs"];
m2_21 [label="((OptionSpecification)g.Specification).SetName", span="23-23", cluster="lambda expression", file="ParserTests.cs"];
m2_22 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="ParserTests.cs"];
m2_24 [label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26", cluster="lambda expression", file="ParserTests.cs"];
m2_25 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="ParserTests.cs"];
m2_33 [label="List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList()", span="36-38", cluster="lambda expression", file="ParserTests.cs"];
m2_34 [label="var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList()", span="40-43", cluster="lambda expression", file="ParserTests.cs"];
m2_32 [label="Entry lambda expression", span="34-49", cluster="lambda expression", file="ParserTests.cs"];
m2_41 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="ParserTests.cs"];
m2_44 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="ParserTests.cs"];
m2_49 [label="sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())", span="41-43", cluster="lambda expression", file="ParserTests.cs"];
m2_35 [label="requiredButEmpty.Any()", span="44-44", cluster="lambda expression", file="ParserTests.cs"];
m2_48 [label="Entry lambda expression", span="41-43", cluster="lambda expression", file="ParserTests.cs"];
m2_36 [label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="45-46", cluster="lambda expression", file="ParserTests.cs"];
m2_37 [label="return Enumerable.Empty<Nothing<Error>>();", span="48-48", cluster="lambda expression", file="ParserTests.cs"];
m2_38 [label="Exit lambda expression", span="34-49", cluster="lambda expression", file="ParserTests.cs"];
m2_54 [label="Entry lambda expression", span="45-46", cluster="lambda expression", file="ParserTests.cs"];
m2_42 [label="sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required", span="37-37", cluster="lambda expression", file="ParserTests.cs"];
m2_43 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="ParserTests.cs"];
m2_45 [label="x.Specification.GetSetName()", span="38-38", cluster="lambda expression", file="ParserTests.cs"];
m2_46 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="ParserTests.cs"];
m2_50 [label="Exit lambda expression", span="41-43", cluster="lambda expression", file="ParserTests.cs"];
m2_55 [label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="45-46", cluster="lambda expression", file="ParserTests.cs"];
m2_56 [label="Exit lambda expression", span="45-46", cluster="lambda expression", file="ParserTests.cs"];
m2_63 [label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    )", span="56-63", cluster="lambda expression", file="ParserTests.cs"];
m2_62 [label="Entry lambda expression", span="54-70", cluster="lambda expression", file="ParserTests.cs"];
m2_64 [label="options.Any()", span="64-64", cluster="lambda expression", file="ParserTests.cs"];
m2_68 [label="Entry lambda expression", span="57-62", cluster="lambda expression", file="ParserTests.cs"];
m2_65 [label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="66-67", cluster="lambda expression", file="ParserTests.cs"];
m2_66 [label="return Enumerable.Empty<Nothing<Error>>();", span="69-69", cluster="lambda expression", file="ParserTests.cs"];
m2_67 [label="Exit lambda expression", span="54-70", cluster="lambda expression", file="ParserTests.cs"];
m2_69 [label="sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )", span="57-62", cluster="lambda expression", file="ParserTests.cs"];
m2_70 [label="Exit lambda expression", span="57-62", cluster="lambda expression", file="ParserTests.cs"];
m2_76 [label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="66-67", cluster="lambda expression", file="ParserTests.cs"];
m2_77 [label="Exit lambda expression", span="66-67", cluster="lambda expression", file="ParserTests.cs"];
m2_72 [label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70", cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="ParserTests.cs"];
m2_29 [label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="ParserTests.cs"];
m2_30 [label="return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-49", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="ParserTests.cs"];
m2_31 [label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32", cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="ParserTests.cs"];
m2_28 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ParserTests.cs"];
m2_13 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ParserTests.cs"];
m2_71 [label="Entry System.Type.ToDescriptorKind()", span="22-22", cluster="System.Type.ToDescriptorKind()", file="ParserTests.cs"];
m2_39 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="ParserTests.cs"];
m2_26 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="ParserTests.cs"];
m2_18 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="ParserTests.cs"];
m2_27 [label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60", cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="ParserTests.cs"];
m2_47 [label="Entry Unk.GetSetName", span="", cluster="Unk.GetSetName", file="ParserTests.cs"];
m2_11 [label="Entry Unk.GroupBy", span="", cluster="Unk.GroupBy", file="ParserTests.cs"];
m2_12 [label="Entry Unk.Count", span="", cluster="Unk.Count", file="ParserTests.cs"];
m2_53 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="ParserTests.cs"];
m2_74 [label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75", cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="ParserTests.cs"];
m2_79 [label=setsWithTrue, span="", file="ParserTests.cs"];
m6_6 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="VerbAttribute.cs"];
m6_5 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)", file="VerbAttribute.cs"];
m6_0 [label="Entry CommandLine.VerbAttribute.VerbAttribute(string)", span="20-20", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs"];
m6_1 [label="string.IsNullOrWhiteSpace(name)", span="22-22", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs"];
m6_3 [label="this.name = name", span="24-24", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs"];
m6_2 [label="throw new ArgumentException(''name'');", span="22-22", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs"];
m6_4 [label="Exit CommandLine.VerbAttribute.VerbAttribute(string)", span="20-20", cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs"];
m6_7 [label="CommandLine.VerbAttribute", span="", file="VerbAttribute.cs"];
n42 -> n15  [key=1, style=dashed, color=darkseagreen4, label=specs];
n43 -> n19  [key=1, style=dashed, color=darkseagreen4, label=result];
n44 -> n23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n45 -> n34  [key=1, style=dashed, color=darkseagreen4, label=specs];
n46 -> n37  [key=1, style=dashed, color=darkseagreen4, label=result];
n47 -> n40  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n6  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
n2 -> n3  [key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=2, style=dotted];
n2 -> n15  [key=1, style=dashed, color=darkseagreen4, label=specs];
n4 -> n5  [key=0, style=solid];
n4 -> n12  [key=2, style=dotted];
n4 -> n13  [key=2, style=dotted];
n4 -> n18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n3 -> n10  [key=2, style=dotted];
n3 -> n11  [key=2, style=dotted];
n3 -> n14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n3 -> n19  [key=1, style=dashed, color=darkseagreen4, label=result];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n21  [key=2, style=dotted];
n19 -> n22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n19 -> n23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n5 -> n0  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n16 -> n14  [key=0, style=bold, color=blue];
n20 -> n18  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n25  [key=2, style=dotted];
n23 -> n26  [key=2, style=dotted];
n23 -> n23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n24 -> n22  [key=0, style=bold, color=blue];
n27 -> n28  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n28 -> n6  [key=2, style=dotted];
n28 -> n31  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
n29 -> n30  [key=0, style=solid];
n29 -> n7  [key=2, style=dotted];
n29 -> n8  [key=2, style=dotted];
n29 -> n34  [key=1, style=dashed, color=darkseagreen4, label=specs];
n31 -> n32  [key=0, style=solid];
n31 -> n12  [key=2, style=dotted];
n31 -> n13  [key=2, style=dotted];
n31 -> n36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n30 -> n31  [key=0, style=solid];
n30 -> n9  [key=2, style=dotted];
n30 -> n10  [key=2, style=dotted];
n30 -> n11  [key=2, style=dotted];
n30 -> n33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n30 -> n37  [key=1, style=dashed, color=darkseagreen4, label=result];
n34 -> n35  [key=0, style=solid];
n34 -> n17  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n21  [key=2, style=dotted];
n37 -> n39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n37 -> n40  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n32 -> n27  [key=0, style=bold, color=blue];
n36 -> n37  [key=0, style=solid];
n35 -> n33  [key=0, style=bold, color=blue];
n38 -> n36  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n25  [key=2, style=dotted];
n40 -> n26  [key=2, style=dotted];
n40 -> n40  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n41 -> n39  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_0 -> m0_5  [key=1, style=dashed, color=green, label=string];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> n21  [key=2, style=dotted, color=green];
m0_1 -> m0_4  [key=1, style=dashed, color=green, label="lambda expression"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_18 -> m0_19  [key=0, style=solid, color=green];
m0_4 -> m0_5  [key=0, style=solid, color=green];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_5 -> m0_7  [key=2, style=dotted, color=green];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid, color=green];
m0_16 -> m0_17  [key=0, style=solid, color=green];
m0_16 -> m0_7  [key=2, style=dotted, color=green];
m0_17 -> m0_15  [key=0, style=bold, color=blue];
m0_19 -> m0_20  [key=0, style=solid, color=green];
m0_19 -> m0_21  [key=2, style=dotted, color=green];
m0_20 -> m0_18  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid, color=green];
m0_8 -> m0_16  [key=1, style=dashed, color=green, label=string];
m0_9 -> m0_10  [key=0, style=solid, color=green];
m0_9 -> m0_11  [key=2, style=dotted, color=green];
m0_9 -> m0_12  [key=2, style=dotted, color=green];
m0_9 -> m0_13  [key=2, style=dotted, color=green];
m0_9 -> m0_14  [key=2, style=dotted, color=green];
m0_9 -> m0_15  [key=1, style=dashed, color=green, label="lambda expression"];
m0_9 -> m0_18  [key=1, style=dashed, color=green, label="lambda expression"];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_22 -> m0_5  [key=1, style=dashed, color=green, label=string];
m0_23 -> m0_5  [key=1, style=dashed, color=green, label="System.StringComparer"];
m0_24 -> m0_16  [key=1, style=dashed, color=green, label=string];
m0_25 -> m0_16  [key=1, style=dashed, color=green, label="System.StringComparer"];
m1_10 -> m1_14  [key=0, style=solid];
m1_10 -> m1_15  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="System.Action<CommandLine.ParserSettings>"];
m1_8 -> m1_2  [key=0, style=solid, color=green];
m1_8 -> m1_10  [key=2, style=dotted, color=green];
m1_8 -> m1_11  [key=2, style=dotted, color=green];
m1_8 -> m1_13  [key=2, style=dotted, color=green];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_11  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_16  [key=2, style=dotted];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_4  [key=2, style=dotted];
m1_13 -> m1_14  [key=0, style=solid];
m1_14 -> m1_8  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid];
m1_37 -> m1_118  [key=0, style=solid];
m1_118 -> m1_119  [key=0, style=solid];
m1_118 -> m1_120  [key=2, style=dotted];
m1_118 -> m1_121  [key=2, style=dotted];
m1_119 -> m1_37  [key=0, style=bold, color=blue];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_22 -> m1_10  [key=2, style=dotted];
m1_22 -> m1_11  [key=2, style=dotted];
m1_22 -> m1_12  [key=2, style=dotted];
m1_22 -> m1_13  [key=2, style=dotted];
m1_22 -> m1_92  [key=0, style=solid];
m1_16 -> m1_5  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> n9  [key=2, style=dotted];
m1_16 -> m1_20  [key=2, style=dotted];
m1_16 -> m1_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_62  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
m1_59 -> m1_64  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
m1_59 -> m1_66  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_59 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_59 -> m1_33  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<object> ParseArguments"];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_62  [key=0, style=solid];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_64  [key=0, style=solid];
m1_64 -> m1_65  [key=0, style=solid];
m1_64 -> m1_66  [key=0, style=solid];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_33  [key=2, style=dotted];
m1_66 -> m1_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_61 -> m1_67  [key=0, style=solid];
m1_61 -> m1_15  [key=2, style=dotted];
m1_63 -> m1_67  [key=0, style=solid];
m1_63 -> m1_15  [key=2, style=dotted];
m1_65 -> m1_67  [key=0, style=solid];
m1_65 -> m1_68  [key=2, style=dotted];
m1_67 -> m1_59  [key=0, style=bold, color=blue];
m1_3 -> m1_17  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_6  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_6  [key=2, style=dotted];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_14  [key=0, style=bold, color=blue];
m1_19 -> m1_3  [key=0, style=bold, color=blue];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_43 -> m1_50  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
m1_43 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
m1_43 -> m1_33  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> ParseArguments"];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_46  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_50  [key=0, style=solid];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_33  [key=2, style=dotted];
m1_50 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_45 -> m1_51  [key=0, style=solid];
m1_45 -> m1_15  [key=2, style=dotted];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_48  [key=0, style=solid];
m1_46 -> m1_30  [key=2, style=dotted];
m1_47 -> m1_51  [key=0, style=solid];
m1_47 -> m1_52  [key=2, style=dotted];
m1_49 -> m1_51  [key=0, style=solid];
m1_49 -> m1_15  [key=2, style=dotted];
m1_51 -> m1_43  [key=0, style=bold, color=blue];
m1_4 -> m1_0  [key=0, style=bold, color=blue];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_4  [key=2, style=dotted];
m1_7 -> m1_5  [key=0, style=bold, color=blue];
m1_117 -> m1_122  [key=0, style=solid];
m1_117 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m1_117 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m1_117 -> m1_131  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m1_117 -> m1_125  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m1_117 -> m1_117  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> DisplayHelp"];
m1_122 -> m1_123  [key=0, style=solid];
m1_122 -> m1_125  [key=0, style=solid];
m1_123 -> m1_124  [key=0, style=solid];
m1_123 -> m1_125  [key=0, style=solid];
m1_123 -> m1_127  [key=2, style=dotted];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_128  [key=2, style=dotted];
m1_124 -> m1_129  [key=2, style=dotted];
m1_124 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_125 -> m1_126  [key=0, style=solid];
m1_126 -> m1_117  [key=0, style=bold, color=blue];
m1_130 -> m1_131  [key=0, style=solid];
m1_0 -> m1_1  [key=0, style=solid, color=red];
m1_0 -> m1_8  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_3  [key=2, style=dotted, color=red];
m1_1 -> m1_4  [key=2, style=dotted, color=red];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_2 -> m1_5  [key=2, style=dotted, color=green];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_37  [key=2, style=dotted];
m1_35 -> m1_38  [key=2, style=dotted];
m1_35 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_34 -> m1_35  [key=0, style=solid];
m1_36 -> m1_34  [key=0, style=bold, color=blue];
m1_39 -> m1_40  [key=0, style=solid];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_42  [key=2, style=dotted];
m1_41 -> m1_39  [key=0, style=bold, color=blue];
m1_54 -> m1_55  [key=0, style=solid];
m1_54 -> m1_31  [key=2, style=dotted];
m1_54 -> m1_37  [key=2, style=dotted];
m1_54 -> m1_38  [key=2, style=dotted];
m1_54 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_53 -> m1_54  [key=0, style=solid];
m1_55 -> m1_53  [key=0, style=bold, color=blue];
m1_56 -> m1_57  [key=0, style=solid];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_42  [key=2, style=dotted];
m1_58 -> m1_56  [key=0, style=bold, color=blue];
m1_70 -> m1_71  [key=0, style=solid];
m1_70 -> m1_37  [key=2, style=dotted];
m1_70 -> m1_72  [key=2, style=dotted];
m1_70 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_69 -> m1_70  [key=0, style=solid];
m1_71 -> m1_69  [key=0, style=bold, color=blue];
m1_73 -> m1_74  [key=0, style=solid];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_42  [key=2, style=dotted];
m1_75 -> m1_73  [key=0, style=bold, color=blue];
m1_91 -> m1_92  [key=0, style=solid, color=red];
m1_91 -> m1_93  [key=2, style=dotted, color=red];
m1_91 -> m1_94  [key=1, style=dashed, color=red, label="lambda expression"];
m1_95 -> m1_96  [key=0, style=solid, color=red];
m1_95 -> m1_97  [key=2, style=dotted, color=red];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_88  [key=2, style=dotted];
m1_102 -> m1_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_105 -> m1_106  [key=0, style=solid];
m1_105 -> m1_97  [key=2, style=dotted];
m1_108 -> m1_109  [key=0, style=solid];
m1_108 -> m1_97  [key=2, style=dotted];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_113  [key=2, style=dotted];
m1_99 -> m1_100  [key=0, style=solid];
m1_101 -> m1_102  [key=0, style=solid];
m1_107 -> m1_108  [key=0, style=solid];
m1_110 -> m1_111  [key=0, style=solid];
m1_90 -> m1_91  [key=0, style=solid, color=red];
m1_90 -> m1_22  [key=0, style=solid];
m1_92 -> m1_90  [key=0, style=bold, color=blue];
m1_94 -> m1_95  [key=0, style=solid, color=red];
m1_96 -> m1_94  [key=0, style=bold, color=blue];
m1_98 -> m1_99  [key=0, style=solid];
m1_100 -> m1_98  [key=0, style=bold, color=blue];
m1_103 -> m1_101  [key=0, style=bold, color=blue];
m1_104 -> m1_105  [key=0, style=solid];
m1_106 -> m1_104  [key=0, style=bold, color=blue];
m1_109 -> m1_107  [key=0, style=bold, color=blue];
m1_112 -> m1_110  [key=0, style=bold, color=blue];
m1_131 -> m1_132  [key=0, style=solid];
m1_131 -> m1_133  [key=2, style=dotted];
m1_131 -> m1_134  [key=2, style=dotted];
m1_132 -> m1_130  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=expected];
m1_15 -> n9  [key=2, style=dotted];
m1_33 -> m1_114  [key=0, style=solid];
m1_33 -> m1_28  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<CommandLine.ParserResult<T>> parseFunc"];
m1_33 -> m1_50  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<CommandLine.ParserResult<T>> parseFunc"];
m1_33 -> m1_66  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<CommandLine.ParserResult<T>> parseFunc"];
m1_33 -> m1_117  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> MakeParserResult"];
m1_114 -> m1_115  [key=0, style=solid];
m1_114 -> m1_116  [key=2, style=dotted];
m1_114 -> m1_117  [key=2, style=dotted];
m1_115 -> m1_33  [key=0, style=bold, color=blue];
m1_76 -> m1_77  [key=0, style=solid];
m1_77 -> m1_78  [key=0, style=solid];
m1_77 -> m1_23  [key=2, style=dotted];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_80  [key=2, style=dotted];
m1_79 -> m1_76  [key=0, style=bold, color=blue];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_24 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_24 -> m1_33  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> ParseArguments"];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_33  [key=2, style=dotted];
m1_28 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_26 -> m1_29  [key=0, style=solid];
m1_26 -> m1_15  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_30  [key=2, style=dotted];
m1_27 -> m1_31  [key=2, style=dotted];
m1_27 -> m1_32  [key=2, style=dotted];
m1_27 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label=factory];
m1_29 -> m1_24  [key=0, style=bold, color=blue];
m1_42 -> m1_81  [key=0, style=solid, color=red];
m1_42 -> m1_91  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_42 -> m1_95  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_42 -> m1_82  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_42 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_42 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_42 -> m1_108  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_42 -> m1_83  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_42 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_81 -> m1_82  [key=0, style=solid, color=red];
m1_81 -> m1_86  [key=2, style=dotted, color=red];
m1_81 -> m1_91  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_81 -> m1_99  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
m1_81 -> m1_102  [key=1, style=dashed, color=red, label=normalize];
m1_82 -> m1_83  [key=0, style=solid];
m1_82 -> m1_87  [key=2, style=dotted];
m1_82 -> m1_88  [key=2, style=dotted];
m1_82 -> m1_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_82 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_83 -> m1_84  [key=0, style=solid];
m1_83 -> m1_89  [key=2, style=dotted];
m1_83 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_84 -> m1_85  [key=0, style=solid];
m1_85 -> m1_42  [key=0, style=bold, color=blue];
m1_23 -> m1_135  [key=0, style=solid];
m1_23 -> m1_137  [key=1, style=dashed, color=darkseagreen4, label=bool];
m1_23 -> m1_21  [key=3, color=darkorchid, style=bold, label="Parameter variable bool disposing"];
m1_23 -> m1_77  [key=3, color=darkorchid, style=bold, label="Parameter variable bool disposing"];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_137  [key=0, style=solid];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_141  [key=0, style=solid];
m1_136 -> m1_141  [key=0, style=solid];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_140  [key=0, style=solid];
m1_139 -> m1_140  [key=0, style=solid];
m1_139 -> m1_142  [key=2, style=dotted];
m1_140 -> m1_141  [key=0, style=solid];
m1_141 -> m1_23  [key=0, style=bold, color=blue];
m1_143 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_50  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_57  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_66  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_78  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_135  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_138  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_139  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_143 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_144 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_145 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label=factory];
m1_146 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="System.Func<T>"];
m1_147 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_148 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_149 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="params System.Type[]"];
m1_150 -> m1_91  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_150 -> m1_95  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_150 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_150 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_150 -> m1_108  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_150 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m1_151 -> m1_91  [key=1, style=dashed, color=red, label="CommandLine.ParserSettings"];
m1_151 -> m1_95  [key=1, style=dashed, color=red, label="CommandLine.ParserSettings"];
m1_151 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m1_151 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m1_151 -> m1_108  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m1_151 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserSettings"];
m1_152 -> m1_102  [key=1, style=dashed, color=darkseagreen4, label=normalize];
m1_153 -> m1_131  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.ParserResult<T>"];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_59 -> m2_60  [key=0, style=solid];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_63  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_61 -> m2_59  [key=0, style=bold, color=blue];
m2_75 -> m2_76  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_10  [key=2, style=dotted];
m2_4 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_4 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_3 -> m2_4  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_11  [key=2, style=dotted];
m2_5 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_15 -> m2_16  [key=0, style=solid];
m2_7 -> m2_9  [key=0, style=solid];
m2_7 -> m2_13  [key=2, style=dotted];
m2_7 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_8  [key=0, style=solid];
m2_6 -> m2_12  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_14  [key=2, style=dotted];
m2_9 -> m2_3  [key=0, style=bold, color=blue];
m2_23 -> m2_24  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_18  [key=2, style=dotted];
m2_16 -> m2_19  [key=2, style=dotted];
m2_17 -> m2_15  [key=0, style=bold, color=blue];
m2_21 -> m2_22  [key=0, style=solid];
m2_22 -> m2_20  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=2, style=dotted];
m2_24 -> m2_27  [key=2, style=dotted];
m2_24 -> m2_28  [key=2, style=dotted];
m2_25 -> m2_23  [key=0, style=bold, color=blue];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_10  [key=2, style=dotted];
m2_33 -> m2_13  [key=2, style=dotted];
m2_33 -> m2_39  [key=2, style=dotted];
m2_33 -> m2_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_33 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_33 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label=setsWithTrue];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_10  [key=2, style=dotted];
m2_34 -> m2_39  [key=2, style=dotted];
m2_34 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_34 -> m2_36  [key=1, style=dashed, color=darkseagreen4, label=requiredButEmpty];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_41 -> m2_42  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_51  [key=2, style=dotted];
m2_49 -> m2_52  [key=2, style=dotted];
m2_49 -> m2_53  [key=2, style=dotted];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_37  [key=0, style=solid];
m2_35 -> n21  [key=2, style=dotted];
m2_48 -> m2_49  [key=0, style=solid];
m2_36 -> m2_38  [key=0, style=solid];
m2_36 -> m2_13  [key=2, style=dotted];
m2_36 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_14  [key=2, style=dotted];
m2_38 -> m2_32  [key=0, style=bold, color=blue];
m2_54 -> m2_55  [key=0, style=solid];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_18  [key=2, style=dotted];
m2_42 -> m2_19  [key=2, style=dotted];
m2_43 -> m2_41  [key=0, style=bold, color=blue];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_47  [key=2, style=dotted];
m2_46 -> m2_44  [key=0, style=bold, color=blue];
m2_50 -> m2_48  [key=0, style=bold, color=blue];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_57  [key=2, style=dotted];
m2_55 -> m2_58  [key=2, style=dotted];
m2_55 -> m2_28  [key=2, style=dotted];
m2_56 -> m2_54  [key=0, style=bold, color=blue];
m2_63 -> m2_64  [key=0, style=solid];
m2_63 -> m2_10  [key=2, style=dotted];
m2_63 -> m2_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_63 -> m2_65  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_62 -> m2_63  [key=0, style=solid];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_66  [key=0, style=solid];
m2_64 -> n21  [key=2, style=dotted];
m2_68 -> m2_69  [key=0, style=solid];
m2_65 -> m2_67  [key=0, style=solid];
m2_65 -> m2_13  [key=2, style=dotted];
m2_65 -> m2_75  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_14  [key=2, style=dotted];
m2_67 -> m2_62  [key=0, style=bold, color=blue];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_71  [key=2, style=dotted];
m2_69 -> m2_19  [key=2, style=dotted];
m2_69 -> m2_72  [key=2, style=dotted];
m2_69 -> m2_73  [key=2, style=dotted];
m2_69 -> m2_74  [key=2, style=dotted];
m2_70 -> m2_68  [key=0, style=bold, color=blue];
m2_76 -> m2_77  [key=0, style=solid];
m2_76 -> m2_78  [key=2, style=dotted];
m2_76 -> m2_58  [key=2, style=dotted];
m2_76 -> m2_28  [key=2, style=dotted];
m2_77 -> m2_75  [key=0, style=bold, color=blue];
m2_29 -> m2_30  [key=0, style=solid];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_30 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m2_31 -> m2_29  [key=0, style=bold, color=blue];
m2_79 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label=setsWithTrue];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=0, style=solid];
m6_1 -> m6_5  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid];
m6_2 -> m6_4  [key=0, style=solid];
m6_2 -> m6_6  [key=2, style=dotted];
m6_4 -> m6_0  [key=0, style=bold, color=blue];
m6_7 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.VerbAttribute"];
}
