digraph  {
n42 [label=specs, span=""];
n43 [label=result, span=""];
n44 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
n45 [label=specs, span=""];
n46 [label=result, span=""];
n47 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
n0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13"];
n1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="16-19"];
n2 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="20-24"];
n6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
n4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="33-33"];
n3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="27-30"];
n7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
n8 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n15 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="29-29"];
n9 [cluster="CommandLine.Core.Token.Name(string)", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
n10 [cluster="CommandLine.Core.Token.Value(string)", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
n11 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
n14 [cluster="lambda expression", label="Entry lambda expression", span="29-29"];
n19 [cluster="lambda expression", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="33-33"];
n5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13"];
n12 [cluster="Unk.All", label="Entry Unk.All", span=""];
n13 [cluster="Unk.True", label="Entry Unk.True", span=""];
n18 [cluster="lambda expression", label="Entry lambda expression", span="33-33"];
n16 [cluster="lambda expression", label="Exit lambda expression", span="29-29"];
n17 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n20 [cluster="lambda expression", label="Exit lambda expression", span="33-33"];
n21 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n22 [cluster="lambda expression", label="Entry lambda expression", span="33-33"];
n23 [cluster="lambda expression", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="33-33"];
n24 [cluster="lambda expression", label="Exit lambda expression", span="33-33"];
n25 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
n26 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
n27 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39"];
n28 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="42-45"];
n29 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="46-50"];
n31 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="59-59"];
n30 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="53-56"];
n34 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="55-55"];
n33 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
n37 [cluster="lambda expression", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="59-59"];
n32 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39"];
n36 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
n35 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
n38 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
n39 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
n40 [cluster="lambda expression", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="59-59"];
n41 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
m0_11 [cluster="Unk.SingleOrDefault", file="NameLookup.cs", label="Entry Unk.SingleOrDefault", span=""];
m0_0 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_1 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=green, community=0, file="NameLookup.cs", label="return specifications.Any(a => name.MatchName(a.ShortName, a.LongName, comparer));", prediction=0, span="13-13"];
m0_2 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Exit CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_7 [cluster="string.MatchName(string, string, System.StringComparer)", file="NameLookup.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m0_12 [cluster="Unk.ToMaybe", file="NameLookup.cs", label="Entry Unk.ToMaybe", span=""];
m0_21 [cluster="Unk.Just", file="NameLookup.cs", label="Entry Unk.Just", span=""];
m0_18 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="22-22"];
m0_4 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="13-13"];
m0_5 [cluster="lambda expression", color=green, community=0, file="NameLookup.cs", label="name.MatchName(a.ShortName, a.LongName, comparer)", prediction=1, span="13-13"];
m0_6 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="13-13"];
m0_15 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="20-20"];
m0_16 [cluster="lambda expression", color=green, community=0, file="NameLookup.cs", label="name.MatchName(a.ShortName, a.LongName, comparer) && a.Separator != '\0'", prediction=2, span="20-20"];
m0_17 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="20-20"];
m0_19 [cluster="lambda expression", color=green, community=0, file="NameLookup.cs", label="Maybe.Just(spec.Separator)", prediction=3, span="22-22"];
m0_20 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="22-22"];
m0_14 [cluster="Unk.Return", file="NameLookup.cs", label="Entry Unk.Return", span=""];
m0_13 [cluster="CSharpx.Maybe.Nothing<T>()", file="NameLookup.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m0_8 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_9 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=green, community=0, file="NameLookup.cs", label="return specifications.SingleOrDefault(\r\n                a => name.MatchName(a.ShortName, a.LongName, comparer) && a.Separator != '\0')\r\n                .ToMaybe()\r\n                .Return(spec => Maybe.Just(spec.Separator), Maybe.Nothing<char>());", prediction=4, span="19-22"];
m0_10 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Exit CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_22 [file="NameLookup.cs", label=string, span=""];
m0_23 [file="NameLookup.cs", label="System.StringComparer", span=""];
m0_24 [file="NameLookup.cs", label=string, span=""];
m0_25 [file="NameLookup.cs", label="System.StringComparer", span=""];
m1_10 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs", label="throw new ArgumentNullException(''configuration'');", span="39-39"];
m1_8 [cluster="lambda expression", color=green, community=0, file="Parser.cs", label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", prediction=5, span="20-22"];
m1_9 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="Parser.cs", label="configuration == null", span="39-39"];
m1_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="Parser.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
m1_11 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Parser.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m1_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="Parser.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m1_14 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Parser.cs", label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28"];
m1_37 [cluster="CommandLine.Parser.HandleUnknownArguments(bool)", file="Parser.cs", label="Entry CommandLine.Parser.HandleUnknownArguments(bool)", span="198-198"];
m1_118 [cluster="CommandLine.Parser.HandleUnknownArguments(bool)", file="Parser.cs", label="return ignoreUnknownArguments\r\n                ? Enumerable.Empty<ErrorType>().Concat(ErrorType.UnknownOptionError)\r\n                : Enumerable.Empty<ErrorType>();", span="200-202"];
m1_119 [cluster="CommandLine.Parser.HandleUnknownArguments(bool)", file="Parser.cs", label="Exit CommandLine.Parser.HandleUnknownArguments(bool)", span="198-198"];
m1_87 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="Parser.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44"];
m1_93 [cluster="CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", file="Parser.cs", label="Entry CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, bool>)", span="78-78"];
m1_20 [cluster="CommandLine.Core.Token.Value(string)", file="Parser.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m1_21 [cluster="CommandLine.Parser.~Parser()", file="Parser.cs", label="Dispose(false)", span="57-57"];
m1_22 [cluster="lambda expression", file="Parser.cs", label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41"];
m1_86 [cluster="Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", file="Parser.cs", label="Entry Func<IEnumerable<Token>, IEnumerable<Token>>.cstr", span=""];
m1_38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Parser.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
m1_89 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="Parser.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="57-57"];
m1_16 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Parser.cs", label="var result = Switch.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41"];
m1_59 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144"];
m1_60 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="args == null", span="146-146"];
m1_62 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="types == null", span="147-147"];
m1_64 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="types.Length == 0", span="148-148"];
m1_66 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="return MakeParserResult(\r\n                () => InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments)),\r\n                settings);", span="150-158"];
m1_61 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="throw new ArgumentNullException(''args'');", span="146-146"];
m1_63 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="throw new ArgumentNullException(''types'');", span="147-147"];
m1_65 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="throw new ArgumentOutOfRangeException(''types'');", span="148-148"];
m1_67 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Parser.cs", label="Exit CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Parser.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
m1_17 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Parser.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="43-43"];
m1_18 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Parser.cs", label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28"];
m1_19 [cluster="CommandLine.Parser.Parser(CommandLine.ParserSettings)", file="Parser.cs", label="Exit CommandLine.Parser.Parser(CommandLine.ParserSettings)", span="46-46"];
m1_68 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="Parser.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m1_43 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="114-114"];
m1_44 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="factory == null", span="117-117"];
m1_48 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="args == null", span="119-119"];
m1_50 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments)),\r\n                settings);", span="121-129"];
m1_45 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="throw new ArgumentNullException(''factory'');", span="117-117"];
m1_46 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="!typeof(T).IsMutable()", span="118-118"];
m1_47 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="throw new ArgumentException(''factory'');", span="118-118"];
m1_49 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="throw new ArgumentNullException(''args'');", span="119-119"];
m1_51 [cluster="CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Exit CommandLine.Parser.ParseArguments<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>)", span="114-114"];
m1_113 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Parser.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m1_52 [cluster="System.ArgumentException.ArgumentException(string)", file="Parser.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m1_88 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", file="Parser.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>)", span="20-20"];
m1_120 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Parser.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Parser.cs", label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13"];
m1_97 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Parser.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m1_5 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Parser.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m1_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="Parser.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m1_7 [cluster="CommandLine.Parser.Parser()", file="Parser.cs", label="Exit CommandLine.Parser.Parser()", span="26-26"];
m1_31 [cluster="CSharpx.Maybe.Just<T>(T)", file="Parser.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m1_116 [cluster="System.Func<TResult>.Invoke()", file="Parser.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m1_117 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="Entry CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="205-205"];
m1_122 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="parserResult.Tag == ParserResultType.NotParsed", span="207-207"];
m1_123 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="((NotParsed<T>)parserResult).Errors.Any()", span="209-209"];
m1_124 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="helpWriter.ToMaybe().Do(writer => writer.Write(HelpText.AutoBuild(parserResult)))", span="211-211"];
m1_125 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="return parserResult;", span="215-215"];
m1_126 [cluster="CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", file="Parser.cs", label="Exit CommandLine.Parser.DisplayHelp<T>(CommandLine.ParserResult<T>, System.IO.TextWriter)", span="205-205"];
m1_130 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="211-211"];
m1_0 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Parser.cs", label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", color=green, community=0, file="Parser.cs", label="var result = Switch.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", prediction=6, span="17-22"];
m1_35 [cluster="lambda expression", file="Parser.cs", label="InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments))", span="94-100"];
m1_34 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="94-100"];
m1_36 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="94-100"];
m1_39 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="96-96"];
m1_40 [cluster="lambda expression", file="Parser.cs", label="Tokenize(arguments, optionSpecs, settings)", span="96-96"];
m1_41 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="96-96"];
m1_54 [cluster="lambda expression", file="Parser.cs", label="InstanceBuilder.Build(\r\n                    Maybe.Just(factory),\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments))", span="122-128"];
m1_53 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="122-128"];
m1_55 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="122-128"];
m1_56 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="124-124"];
m1_57 [cluster="lambda expression", file="Parser.cs", label="Tokenize(arguments, optionSpecs, settings)", span="124-124"];
m1_58 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="124-124"];
m1_70 [cluster="lambda expression", file="Parser.cs", label="InstanceChooser.Choose(\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    types,\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments))", span="151-157"];
m1_69 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="151-157"];
m1_71 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="151-157"];
m1_73 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="152-152"];
m1_74 [cluster="lambda expression", file="Parser.cs", label="Tokenize(arguments, optionSpecs, settings)", span="152-152"];
m1_75 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="152-152"];
m1_102 [cluster="lambda expression", file="Parser.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer), normalize)", span="185-185"];
m1_105 [cluster="lambda expression", file="Parser.cs", label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="185-185"];
m1_108 [cluster="lambda expression", file="Parser.cs", label="NameLookup.Contains(name, optionSpecs, settings.NameComparer)", span="186-186"];
m1_111 [cluster="lambda expression", file="Parser.cs", label="NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer)", span="187-187"];
m1_99 [cluster="lambda expression", file="Parser.cs", label=toks, span="179-179"];
m1_101 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="184-185"];
m1_107 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="186-186"];
m1_110 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="187-187"];
m1_90 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="177-178"];
m1_92 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="177-178"];
m1_94 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="178-178"];
m1_96 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="178-178"];
m1_98 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="179-179"];
m1_100 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="179-179"];
m1_103 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="184-185"];
m1_104 [cluster="lambda expression", file="Parser.cs", label="Entry lambda expression", span="185-185"];
m1_106 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="185-185"];
m1_109 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="186-186"];
m1_112 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="187-187"];
m1_131 [cluster="lambda expression", file="Parser.cs", label="writer.Write(HelpText.AutoBuild(parserResult))", span="211-211"];
m1_132 [cluster="lambda expression", file="Parser.cs", label="Exit lambda expression", span="211-211"];
m1_127 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="Parser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m1_128 [cluster="T.ToMaybe<T>()", file="Parser.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m1_121 [cluster="System.Collections.Generic.IEnumerable<T>.Concat<T>(T)", file="Parser.cs", label="Entry System.Collections.Generic.IEnumerable<T>.Concat<T>(T)", span="94-94"];
m1_129 [cluster="CSharpx.Maybe<T>.Do<T>(System.Action<T>)", file="Parser.cs", label="Entry CSharpx.Maybe<T>.Do<T>(System.Action<T>)", span="300-300"];
m1_133 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="Parser.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="260-260"];
m1_15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Parser.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_80 [cluster="System.GC.SuppressFinalize(object)", file="Parser.cs", label="Entry System.GC.SuppressFinalize(object)", span="0-0"];
m1_32 [cluster="CSharpx.Maybe.Nothing<T>()", file="Parser.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_142 [cluster="CommandLine.ParserSettings.Dispose()", file="Parser.cs", label="Entry CommandLine.ParserSettings.Dispose()", span="119-119"];
m1_72 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="Parser.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="35-35"];
m1_30 [cluster="System.Type.IsMutable()", file="Parser.cs", label="Entry System.Type.IsMutable()", span="139-139"];
m1_33 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs", label="Entry CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="191-191"];
m1_114 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs", label="return DisplayHelp(\r\n                parseFunc(),\r\n                settings.HelpWriter);", span="193-195"];
m1_115 [cluster="CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", file="Parser.cs", label="Exit CommandLine.Parser.MakeParserResult<T>(System.Func<CommandLine.ParserResult<T>>, CommandLine.ParserSettings)", span="191-191"];
m1_76 [cluster="CommandLine.Parser.Dispose()", file="Parser.cs", label="Entry CommandLine.Parser.Dispose()", span="164-164"];
m1_77 [cluster="CommandLine.Parser.Dispose()", file="Parser.cs", label="Dispose(true)", span="166-166"];
m1_78 [cluster="CommandLine.Parser.Dispose()", file="Parser.cs", label="GC.SuppressFinalize(this)", span="168-168"];
m1_79 [cluster="CommandLine.Parser.Dispose()", file="Parser.cs", label="Exit CommandLine.Parser.Dispose()", span="164-164"];
m1_24 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m1_25 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="args == null", span="87-87"];
m1_28 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="return MakeParserResult(\r\n                () => InstanceBuilder.Build(\r\n                    factory,\r\n                    (arguments, optionSpecs) => Tokenize(arguments, optionSpecs, settings),\r\n                    args,\r\n                    settings.NameComparer,\r\n                    settings.ParsingCulture,\r\n                    HandleUnknownArguments(settings.IgnoreUnknownArguments)),\r\n                settings);", span="93-101"];
m1_26 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="throw new ArgumentNullException(''args'');", span="87-87"];
m1_27 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="var factory = typeof(T).IsMutable()\r\n                ? Maybe.Just<Func<T>>(Activator.CreateInstance<T>)\r\n                : Maybe.Nothing<Func<T>>()", span="89-91"];
m1_29 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Exit CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m1_42 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs", label="Entry CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="171-171"];
m1_82 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs", label="var tokens = settings.EnableDashDash\r\n                ? Tokenizer.PreprocessDashDash(\r\n                        arguments,\r\n                        args =>\r\n                            Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer), normalize))\r\n                : Tokenizer.Tokenize(arguments, name => NameLookup.Contains(name, optionSpecs, settings.NameComparer), normalize)", span="181-186"];
m1_83 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, settings.NameComparer))", span="187-187"];
m1_84 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs", label="return explodedTokens;", span="188-188"];
m1_85 [cluster="CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", file="Parser.cs", label="Exit CommandLine.Parser.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.ParserSettings)", span="171-171"];
m1_23 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="Entry CommandLine.Parser.Dispose(bool)", span="218-218"];
m1_135 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label=disposed, span="220-220"];
m1_137 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label=disposing, span="225-225"];
m1_136 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="return;", span="222-222"];
m1_138 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="settings != null", span="227-227"];
m1_139 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="settings.Dispose()", span="229-229"];
m1_140 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="disposed = true", span="232-232"];
m1_141 [cluster="CommandLine.Parser.Dispose(bool)", file="Parser.cs", label="Exit CommandLine.Parser.Dispose(bool)", span="218-218"];
m1_134 [cluster="System.IO.TextWriter.Write(string)", file="Parser.cs", label="Entry System.IO.TextWriter.Write(string)", span="0-0"];
m1_143 [file="Parser.cs", label="CommandLine.Parser", span=""];
m1_144 [file="Parser.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m1_145 [file="Parser.cs", label=factory, span=""];
m1_146 [file="Parser.cs", label="System.Func<T>", span=""];
m1_147 [file="Parser.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m1_148 [file="Parser.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m1_149 [file="Parser.cs", label="params System.Type[]", span=""];
m1_150 [file="Parser.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_151 [file="Parser.cs", label="CommandLine.ParserSettings", span=""];
m1_152 [file="Parser.cs", label=normalize, span=""];
m1_153 [file="Parser.cs", label="CommandLine.ParserResult<T>", span=""];
m2_52 [cluster="CommandLine.Core.Specification.GetSetName()", file="ParserTests.cs", label="Entry CommandLine.Core.Specification.GetSetName()", span="80-80"];
m2_0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="ParserTests.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m2_1 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="ParserTests.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29"];
m2_2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="ParserTests.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m2_19 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="152-152"];
m2_59 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="ParserTests.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
m2_60 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="ParserTests.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="54-70"];
m2_61 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="ParserTests.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
m2_57 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="ParserTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m2_10 [cluster="Unk.Where", file="ParserTests.cs", label="Entry Unk.Where", span=""];
m2_14 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ParserTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m2_58 [cluster="Unk.FromSpecification", file="ParserTests.cs", label="Entry Unk.FromSpecification", span=""];
m2_73 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137"];
m2_51 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="147-147"];
m2_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ParserTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m2_75 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="66-67"];
m2_4 [cluster="lambda expression", file="ParserTests.cs", label="var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22"];
m2_3 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="20-29"];
m2_5 [cluster="lambda expression", file="ParserTests.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23"];
m2_15 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="22-22"];
m2_7 [cluster="lambda expression", file="ParserTests.cs", label="return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26"];
m2_6 [cluster="lambda expression", file="ParserTests.cs", label="groups.Count() > 1", span="24-24"];
m2_20 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="23-23"];
m2_8 [cluster="lambda expression", file="ParserTests.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="28-28"];
m2_9 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="20-29"];
m2_23 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="26-26"];
m2_16 [cluster="lambda expression", file="ParserTests.cs", label="sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22"];
m2_17 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="22-22"];
m2_21 [cluster="lambda expression", file="ParserTests.cs", label="((OptionSpecification)g.Specification).SetName", span="23-23"];
m2_22 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="23-23"];
m2_24 [cluster="lambda expression", file="ParserTests.cs", label="Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26"];
m2_25 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="26-26"];
m2_33 [cluster="lambda expression", file="ParserTests.cs", label="List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList()", span="36-38"];
m2_34 [cluster="lambda expression", file="ParserTests.cs", label="var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList()", span="40-43"];
m2_32 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="34-49"];
m2_41 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="37-37"];
m2_44 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="38-38"];
m2_49 [cluster="lambda expression", file="ParserTests.cs", label="sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())", span="41-43"];
m2_35 [cluster="lambda expression", file="ParserTests.cs", label="requiredButEmpty.Any()", span="44-44"];
m2_48 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="41-43"];
m2_36 [cluster="lambda expression", file="ParserTests.cs", label="return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="45-46"];
m2_37 [cluster="lambda expression", file="ParserTests.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="48-48"];
m2_38 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="34-49"];
m2_54 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="45-46"];
m2_42 [cluster="lambda expression", file="ParserTests.cs", label="sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required", span="37-37"];
m2_43 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="37-37"];
m2_45 [cluster="lambda expression", file="ParserTests.cs", label="x.Specification.GetSetName()", span="38-38"];
m2_46 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="38-38"];
m2_50 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="41-43"];
m2_55 [cluster="lambda expression", file="ParserTests.cs", label="Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="45-46"];
m2_56 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="45-46"];
m2_63 [cluster="lambda expression", file="ParserTests.cs", label="var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    )", span="56-63"];
m2_62 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="54-70"];
m2_64 [cluster="lambda expression", file="ParserTests.cs", label="options.Any()", span="64-64"];
m2_68 [cluster="lambda expression", file="ParserTests.cs", label="Entry lambda expression", span="57-62"];
m2_65 [cluster="lambda expression", file="ParserTests.cs", label="return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="66-67"];
m2_66 [cluster="lambda expression", file="ParserTests.cs", label="return Enumerable.Empty<Nothing<Error>>();", span="69-69"];
m2_67 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="54-70"];
m2_69 [cluster="lambda expression", file="ParserTests.cs", label="sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )", span="57-62"];
m2_70 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="57-62"];
m2_76 [cluster="lambda expression", file="ParserTests.cs", label="Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="66-67"];
m2_77 [cluster="lambda expression", file="ParserTests.cs", label="Exit lambda expression", span="66-67"];
m2_72 [cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="ParserTests.cs", label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70"];
m2_29 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="ParserTests.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m2_30 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="ParserTests.cs", label="return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-49"];
m2_31 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="ParserTests.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m2_28 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ParserTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m2_13 [cluster="Unk.Select", file="ParserTests.cs", label="Entry Unk.Select", span=""];
m2_71 [cluster="System.Type.ToDescriptorKind()", file="ParserTests.cs", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
m2_39 [cluster="Unk.ToList", file="ParserTests.cs", label="Entry Unk.ToList", span=""];
m2_26 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="ParserTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m2_18 [cluster="CommandLine.Core.Specification.IsOption()", file="ParserTests.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m2_27 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="ParserTests.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m2_47 [cluster="Unk.GetSetName", file="ParserTests.cs", label="Entry Unk.GetSetName", span=""];
m2_11 [cluster="Unk.GroupBy", file="ParserTests.cs", label="Entry Unk.GroupBy", span=""];
m2_12 [cluster="Unk.Count", file="ParserTests.cs", label="Entry Unk.Count", span=""];
m2_53 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="ParserTests.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m2_74 [cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="ParserTests.cs", label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75"];
m2_79 [file="ParserTests.cs", label=setsWithTrue, span=""];
m6_6 [cluster="System.ArgumentException.ArgumentException(string)", file="VerbAttribute.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m6_5 [cluster="string.IsNullOrWhiteSpace(string)", file="VerbAttribute.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m6_0 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs", label="Entry CommandLine.VerbAttribute.VerbAttribute(string)", span="20-20"];
m6_1 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs", label="string.IsNullOrWhiteSpace(name)", span="22-22"];
m6_3 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs", label="this.name = name", span="24-24"];
m6_2 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs", label="throw new ArgumentException(''name'');", span="22-22"];
m6_4 [cluster="CommandLine.VerbAttribute.VerbAttribute(string)", file="VerbAttribute.cs", label="Exit CommandLine.VerbAttribute.VerbAttribute(string)", span="20-20"];
m6_7 [file="VerbAttribute.cs", label="CommandLine.VerbAttribute", span=""];
n42 -> n15  [color=darkseagreen4, key=1, label=specs, style=dashed];
n43 -> n19  [color=darkseagreen4, key=1, label=result, style=dashed];
n44 -> n23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n45 -> n34  [color=darkseagreen4, key=1, label=specs, style=dashed];
n46 -> n37  [color=darkseagreen4, key=1, label=result, style=dashed];
n47 -> n40  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
n2 -> n15  [color=darkseagreen4, key=1, label=specs, style=dashed];
n4 -> n18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n3 -> n19  [color=darkseagreen4, key=1, label=result, style=dashed];
n19 -> n22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n19 -> n23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n23 -> n23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n28 -> n31  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
n29 -> n34  [color=darkseagreen4, key=1, label=specs, style=dashed];
n31 -> n36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n30 -> n33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n30 -> n37  [color=darkseagreen4, key=1, label=result, style=dashed];
n37 -> n39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n37 -> n40  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
n40 -> n40  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m0_0 -> m0_5  [color=green, key=1, label=string, style=dashed];
m0_1 -> m0_4  [color=green, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_16  [color=green, key=1, label=string, style=dashed];
m0_9 -> m0_15  [color=green, key=1, label="lambda expression", style=dashed];
m0_9 -> m0_18  [color=green, key=1, label="lambda expression", style=dashed];
m0_22 -> m0_5  [color=green, key=1, label=string, style=dashed];
m0_23 -> m0_5  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_24 -> m0_16  [color=green, key=1, label=string, style=dashed];
m0_25 -> m0_16  [color=green, key=1, label="System.StringComparer", style=dashed];
m1_8 -> m1_12  [color=darkseagreen4, key=1, label="System.Action<CommandLine.ParserSettings>", style=dashed];
m1_16 -> m1_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_59 -> m1_62  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m1_59 -> m1_64  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m1_59 -> m1_66  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_59 -> m1_70  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_66 -> m1_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_43 -> m1_48  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_43 -> m1_50  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m1_43 -> m1_54  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m1_50 -> m1_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_117 -> m1_123  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m1_117 -> m1_124  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m1_117 -> m1_131  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m1_117 -> m1_125  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m1_124 -> m1_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_35 -> m1_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_54 -> m1_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_70 -> m1_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_102 -> m1_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_15 -> m1_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m1_24 -> m1_28  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_24 -> m1_35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_28 -> m1_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_27 -> m1_35  [color=darkseagreen4, key=1, label=factory, style=dashed];
m1_42 -> m1_102  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_42 -> m1_105  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_42 -> m1_108  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_42 -> m1_111  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_82 -> m1_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_82 -> m1_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_83 -> m1_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_23 -> m1_137  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_143 -> m1_6  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_11  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_12  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_13  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_17  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_18  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_21  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_28  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_35  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_40  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_50  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_54  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_57  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_66  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_70  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_74  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_77  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_78  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_135  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_138  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_143 -> m1_139  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_144 -> m1_35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_145 -> m1_35  [color=darkseagreen4, key=1, label=factory, style=dashed];
m1_146 -> m1_54  [color=darkseagreen4, key=1, label="System.Func<T>", style=dashed];
m1_147 -> m1_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_148 -> m1_70  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_149 -> m1_70  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m1_150 -> m1_102  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_150 -> m1_105  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_150 -> m1_108  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_150 -> m1_111  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_151 -> m1_102  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m1_151 -> m1_105  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m1_151 -> m1_108  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m1_151 -> m1_111  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m1_152 -> m1_102  [color=darkseagreen4, key=1, label=normalize, style=dashed];
m1_153 -> m1_131  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m2_4 -> m2_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_4 -> m2_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m2_5 -> m2_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_7 -> m2_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_49  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m2_34 -> m2_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_34 -> m2_36  [color=darkseagreen4, key=1, label=requiredButEmpty, style=dashed];
m2_32 -> m2_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m2_36 -> m2_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_63 -> m2_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_63 -> m2_65  [color=darkseagreen4, key=1, label=options, style=dashed];
m2_65 -> m2_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_30 -> m2_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m2_30 -> m2_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m2_79 -> m2_49  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
}
