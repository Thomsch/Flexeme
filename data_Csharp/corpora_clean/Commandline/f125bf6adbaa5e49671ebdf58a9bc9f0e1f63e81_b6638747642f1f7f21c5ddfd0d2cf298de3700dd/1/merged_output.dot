digraph  {
n19 [label="out CommandLine.Core.TypeDescriptor", span=""];
n0 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13"];
n1 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", label="this.targetType = targetType", span="15-15"];
n2 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", label="this.maxItems = maxItems", span="16-16"];
n3 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", label="this.nextValue = nextValue", span="17-17"];
n4 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="13-13"];
n5 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
n6 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", label="maximumItems == null", span="37-37"];
n8 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", label="return new TypeDescriptor(tag, maximumItems, next.ToMaybe());", span="39-39"];
n7 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", label="throw new ArgumentNullException(''maximumItems'');", span="37-37"];
n9 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
n11 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="249-249"];
n10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n12 [cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", label="Entry CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45"];
n13 [cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", label="return TypeDescriptor.Create(descriptor.TargetType, descriptor.MaxItems, nextValue.MapValueOrDefault(n => n, default(TypeDescriptor)));", span="47-47"];
n14 [cluster="CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", label="Exit CommandLine.Core.TypeDescriptorExtensions.WithNextValue(CommandLine.Core.TypeDescriptor, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>)", span="45-45"];
n15 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
n16 [cluster="lambda expression", label="Entry lambda expression", span="47-47"];
n17 [cluster="lambda expression", label=n, span="47-47"];
n18 [cluster="lambda expression", label="Exit lambda expression", span="47-47"];
m1_12 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="23-23"];
m1_13 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="25-30"];
m1_14 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var converted = values.Select(value => ChangeType(value, type, conversionCulture))", span="32-32"];
m1_15 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToArray(type));", span="34-36"];
m1_16 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="23-23"];
m1_26 [cluster="Unk.Just", file="TypeConverter.cs", label="Entry Unk.Just", span=""];
m1_0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m1_1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="values == null", span="14-14"];
m1_3 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="conversionType == null", span="15-15"];
m1_5 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="conversionCulture == null", span="16-16"];
m1_7 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return scalar\r\n                ? ChangeType(values.Single(), conversionType, conversionCulture)\r\n                : ChangeType(values, conversionType, conversionCulture);", span="18-20"];
m1_2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="throw new ArgumentNullException(''values'');", span="14-14"];
m1_4 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="throw new ArgumentNullException(''conversionType'');", span="15-15"];
m1_6 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="throw new ArgumentNullException(''conversionCulture'');", span="16-16"];
m1_8 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m1_61 [cluster="System.Enum.IsDefined(System.Type, object)", file="TypeConverter.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m1_20 [cluster="System.ApplicationException.ApplicationException(string)", file="TypeConverter.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m1_23 [cluster="Unk.Any", file="TypeConverter.cs", label="Entry Unk.Any", span=""];
m1_21 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="137-137"];
m1_47 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="75-75"];
m1_62 [cluster="System.FormatException.FormatException()", file="TypeConverter.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m1_46 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="70-70"];
m1_53 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="TypeConverter.cs", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="72-72"];
m1_54 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="70-70"];
m1_55 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", color=green, community=0, file="TypeConverter.cs", label="8: System.Globalization.CultureInfo", span=""];
m1_56 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", color=green, community=0, file="TypeConverter.cs", label="8: type", span=""];
m1_57 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", color=green, community=0, file="TypeConverter.cs", label="8: return parsedValue;", span="80-80"];
m1_58 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", color=green, community=0, file="TypeConverter.cs", label="8: throw new FormatException();", span="82-82"];
m1_59 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="75-75"];
m1_34 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="36-36"];
m1_28 [cluster="lambda expression", file="TypeConverter.cs", label="ChangeType(value, type, conversionCulture)", span="32-32"];
m1_27 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="32-32"];
m1_30 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="34-34"];
m1_29 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="32-32"];
m1_31 [cluster="lambda expression", file="TypeConverter.cs", label="a.MatchNothing()", span="34-34"];
m1_32 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="34-34"];
m1_35 [cluster="lambda expression", file="TypeConverter.cs", label="((Just<object>)c).Value", span="36-36"];
m1_36 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="36-36"];
m1_52 [cluster="string.Equals(string, System.StringComparison)", file="TypeConverter.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m1_48 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="TypeConverter.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m1_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m1_11 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="39-39"];
m1_37 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="14: return Maybe.Just(\r\n                    MatchBoolString(value)\r\n                        ? ConvertBoolString(value)\r\n                        : conversionType.IsEnum\r\n                            ? ConvertEnumString(value, conversionType)\r\n                            : Convert.ChangeType(value, conversionType, conversionCulture));", span="43-48"];
m1_38 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label=InvalidCastException, span="50-50"];
m1_39 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return Maybe.Nothing<object>();", span="52-52"];
m1_40 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label=FormatException, span="54-54"];
m1_41 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return Maybe.Nothing<object>();", span="56-56"];
m1_42 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label=OverflowException, span="58-58"];
m1_43 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return Maybe.Nothing<object>();", span="60-60"];
m1_44 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="39-39"];
m1_49 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m1_22 [cluster="Unk.Select", file="TypeConverter.cs", label="Entry Unk.Select", span=""];
m1_17 [cluster="System.Type.GetGenericArguments()", file="TypeConverter.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m1_24 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66"];
m1_33 [cluster="Unk.MatchNothing", file="TypeConverter.cs", label="Entry Unk.MatchNothing", span=""];
m1_25 [cluster="Unk.ToArray", file="TypeConverter.cs", label="Entry Unk.ToArray", span=""];
m1_45 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.MatchBoolString(string)", span="64-64"];
m1_50 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="TypeConverter.cs", label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                   || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="66-67"];
m1_51 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.MatchBoolString(string)", span="64-64"];
m1_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeConverter.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_18 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [color=darkseagreen4, key=1, label="CSharpx.Maybe<int>", style=dashed];
n0 -> n3  [color=darkseagreen4, key=1, label="CSharpx.Maybe<CommandLine.Core.TypeDescriptor>", style=dashed];
n1 -> n2  [key=0, style=solid];
n1 -> n19  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n19  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
n3 -> n4  [key=0, style=solid];
n3 -> n19  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
n4 -> n0  [color=blue, key=0, style=bold];
n5 -> n6  [key=0, style=solid];
n5 -> n8  [color=darkseagreen4, key=1, label="CommandLine.Core.TargetType", style=dashed];
n6 -> n7  [key=0, style=solid];
n6 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n0  [key=2, style=dotted];
n8 -> n11  [key=2, style=dotted];
n7 -> n9  [key=0, style=solid];
n7 -> n10  [key=2, style=dotted];
n9 -> n5  [color=blue, key=0, style=bold];
n12 -> n13  [key=0, style=solid];
n12 -> n5  [color=darkorchid, key=3, label="method methodReturn CommandLine.Core.TypeDescriptor WithNextValue", style=bold];
n13 -> n14  [key=0, style=solid];
n13 -> n15  [key=2, style=dotted];
n13 -> n5  [key=2, style=dotted];
n13 -> n13  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
n13 -> n16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n14 -> n12  [color=blue, key=0, style=bold];
n16 -> n17  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n18 -> n16  [color=blue, key=0, style=bold];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_12 -> m1_28  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_12 -> m1_0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_17  [key=2, style=dotted];
m1_13 -> m1_18  [key=2, style=dotted];
m1_13 -> n11  [key=2, style=dotted];
m1_13 -> m1_20  [key=2, style=dotted];
m1_13 -> m1_21  [key=2, style=dotted];
m1_13 -> m1_28  [color=darkseagreen4, key=1, label=type, style=dashed];
m1_13 -> m1_15  [color=darkseagreen4, key=1, label=type, style=dashed];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_22  [key=2, style=dotted];
m1_14 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_23  [key=2, style=dotted];
m1_15 -> m1_24  [key=2, style=dotted];
m1_15 -> m1_22  [key=2, style=dotted];
m1_15 -> m1_25  [key=2, style=dotted];
m1_15 -> m1_26  [key=2, style=dotted];
m1_15 -> m1_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_15 -> m1_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_16 -> m1_12  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_0 -> m1_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_10  [key=2, style=dotted];
m1_7 -> m1_11  [key=2, style=dotted];
m1_7 -> m1_12  [key=2, style=dotted];
m1_2 -> m1_8  [key=0, style=solid];
m1_2 -> m1_9  [key=2, style=dotted];
m1_4 -> m1_8  [key=0, style=solid];
m1_4 -> m1_9  [key=2, style=dotted];
m1_6 -> m1_8  [key=0, style=solid];
m1_6 -> m1_9  [key=2, style=dotted];
m1_8 -> m1_0  [color=blue, key=0, style=bold];
m1_47 -> m1_55  [color=green, key=0, style=solid];
m1_47 -> m1_56  [color=green, key=1, label="System.Type", style=dashed];
m1_47 -> m1_11  [color=darkorchid, key=3, label="Parameter variable System.Type conversionType", style=bold];
m1_46 -> m1_53  [key=0, style=solid];
m1_46 -> m1_11  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_52  [key=2, style=dotted];
m1_54 -> m1_46  [color=blue, key=0, style=bold];
m1_55 -> m1_56  [color=green, key=0, style=solid];
m1_55 -> m1_47  [color=green, key=2, style=dotted];
m1_55 -> m1_57  [color=green, key=1, label=parsedValue, style=dashed];
m1_55 -> m1_28  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_56 -> m1_57  [color=green, key=0, style=solid];
m1_56 -> m1_58  [color=green, key=0, style=solid];
m1_56 -> m1_61  [color=green, key=2, style=dotted];
m1_56 -> m1_28  [color=darkseagreen4, key=1, label=type, style=dashed];
m1_57 -> m1_59  [color=green, key=0, style=solid];
m1_58 -> m1_59  [color=green, key=0, style=solid];
m1_58 -> m1_62  [color=green, key=2, style=dotted];
m1_59 -> m1_47  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_11  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_29 -> m1_27  [color=blue, key=0, style=bold];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_33  [key=2, style=dotted];
m1_32 -> m1_30  [color=blue, key=0, style=bold];
m1_35 -> m1_36  [key=0, style=solid];
m1_36 -> m1_34  [color=blue, key=0, style=bold];
m1_11 -> m1_37  [color=green, key=0, style=solid];
m1_11 -> m1_0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m1_11 -> m1_13  [color=darkorchid, key=3, label="Parameter variable System.Type conversionType", style=bold];
m1_11 -> m1_12  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m1_11 -> m1_14  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m1_37 -> m1_44  [color=green, key=0, style=solid];
m1_37 -> m1_45  [color=green, key=2, style=dotted];
m1_37 -> m1_46  [color=green, key=2, style=dotted];
m1_37 -> m1_47  [color=green, key=2, style=dotted];
m1_37 -> m1_48  [color=green, key=2, style=dotted];
m1_37 -> m1_49  [color=green, key=2, style=dotted];
m1_38 -> m1_39  [key=0, style=solid];
m1_39 -> m1_44  [key=0, style=solid];
m1_39 -> m1_24  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_41 -> m1_44  [key=0, style=solid];
m1_41 -> m1_24  [key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_24  [key=2, style=dotted];
m1_44 -> m1_11  [color=blue, key=0, style=bold];
m1_45 -> m1_50  [key=0, style=solid];
m1_45 -> m1_11  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_52  [key=2, style=dotted];
m1_51 -> m1_45  [color=blue, key=0, style=bold];
}
