digraph  {
m1_47 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", file="NameLookupTests.cs"];
m1_36 [label="Entry System.Type.IsScalar()", span="33-33", cluster="System.Type.IsScalar()", file="NameLookupTests.cs"];
m1_28 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="81-81", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="NameLookupTests.cs"];
m1_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="NameLookupTests.cs"];
m1_3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="11-11", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_7 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="NameLookupTests.cs"];
m1_0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="11-11", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="16-16", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", color=green, community=0, file="NameLookupTests.cs"];
m1_2 [label="return StatePair.Create(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="18-22", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs", color=red, community=0];
m1_35 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="NameLookupTests.cs"];
m1_52 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="NameLookupTests.cs"];
m1_44 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="NameLookupTests.cs"];
m1_8 [label="Entry lambda expression", span="19-19", cluster="lambda expression", file="NameLookupTests.cs"];
m1_11 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="NameLookupTests.cs"];
m1_14 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="NameLookupTests.cs"];
m1_9 [label="pe.Item1", span="19-19", cluster="lambda expression", color=red, community=0, file="NameLookupTests.cs"];
m1_10 [label="Exit lambda expression", span="19-19", cluster="lambda expression", file="NameLookupTests.cs"];
m1_12 [label="pe.Item2", span="20-20", cluster="lambda expression", file="NameLookupTests.cs"];
m1_13 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="NameLookupTests.cs"];
m1_15 [label="e.Value", span="21-21", cluster="lambda expression", file="NameLookupTests.cs"];
m1_16 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="NameLookupTests.cs"];
m1_45 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="46-46", cluster="lambda expression", file="NameLookupTests.cs"];
m1_41 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="NameLookupTests.cs"];
m1_42 [label=n, span="35-35", cluster="lambda expression", file="NameLookupTests.cs"];
m1_43 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="NameLookupTests.cs"];
m1_46 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="NameLookupTests.cs"];
m1_29 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="NameLookupTests.cs"];
m1_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="NameLookupTests.cs"];
m1_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="NameLookupTests.cs"];
m1_37 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="NameLookupTests.cs"];
m1_51 [label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70", cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="NameLookupTests.cs"];
m1_34 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="56-56", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="NameLookupTests.cs"];
m1_49 [label="return !specification.IsMinNotSpecified()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="58-60", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="NameLookupTests.cs"];
m1_50 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="56-56", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="NameLookupTests.cs"];
m1_39 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NameLookupTests.cs"];
m1_5 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="NameLookupTests.cs"];
m1_38 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="NameLookupTests.cs"];
m1_48 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NameLookupTests.cs"];
m1_30 [label="Entry CommandLine.Core.Specification.GetMaxValueCount()", span="51-51", cluster="CommandLine.Core.Specification.GetMaxValueCount()", file="NameLookupTests.cs"];
m1_31 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="NameLookupTests.cs"];
m1_4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_17 [label="specProps.Empty()", span="30-30", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_18 [label="yield break;", span="32-32", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_22 [label="yield return\r\n                    Tuple.Create(pt, MakeErrorInCaseOfMinConstraint(pt.Specification));", span="38-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_23 [label="yield break;", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_24 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="43-48", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_26 [label="yield return value;", span="52-52", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_19 [label="var pt = specProps.First()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_20 [label="var taken = values.Take(pt.Specification.GetMaxValueCount().Return(n => n, values.Count()))", span="35-35", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_25 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="50-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_21 [label="taken.Empty()", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_27 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="NameLookupTests.cs"];
m1_32 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="NameLookupTests.cs"];
m1_53 [label=pt, span="", file="NameLookupTests.cs"];
m2_12 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapper.cs"];
m2_6 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="OptionMapper.cs"];
m2_10 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="OptionMapper.cs"];
m2_31 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", file="OptionMapper.cs"];
m2_26 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionMapper.cs"];
m2_4 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="OptionMapper.cs"];
m2_0 [label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", span="13-13", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs"];
m2_1 [label="var sequencesAndErrors = propertyTuples\r\n                .Select(pt =>\r\n                    options.SingleOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))\r\n                )", span="19-35", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", color=green, community=0, file="OptionMapper.cs"];
m2_2 [label="return StatePair.Create(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="36-38", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs"];
m2_3 [label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", span="13-13", cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs"];
m2_22 [label="Entry System.Type.IsScalar()", span="33-33", cluster="System.Type.IsScalar()", file="OptionMapper.cs"];
m2_18 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="OptionMapper.cs"];
m2_24 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="OptionMapper.cs"];
m2_11 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="OptionMapper.cs"];
m2_25 [label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60", cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="OptionMapper.cs"];
m2_13 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="OptionMapper.cs"];
m2_38 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m2_7 [label="Entry lambda expression", span="20-34", cluster="lambda expression", file="OptionMapper.cs"];
m2_8 [label="options.SingleOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))", span="21-34", cluster="lambda expression", color=green, community=0, file="OptionMapper.cs"];
m2_9 [label="Exit lambda expression", span="20-34", cluster="lambda expression", file="OptionMapper.cs"];
m2_15 [label="Entry lambda expression", span="22-23", cluster="lambda expression", file="OptionMapper.cs"];
m2_19 [label="Entry lambda expression", span="25-33", cluster="lambda expression", file="OptionMapper.cs"];
m2_20 [label="converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification)))))", span="26-33", cluster="lambda expression", color=green, community=0, file="OptionMapper.cs"];
m2_21 [label="Exit lambda expression", span="25-33", cluster="lambda expression", file="OptionMapper.cs"];
m2_28 [label="Entry lambda expression", span="27-30", cluster="lambda expression", file="OptionMapper.cs"];
m2_16 [label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", span="23-23", cluster="lambda expression", file="OptionMapper.cs"];
m2_32 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="OptionMapper.cs"];
m2_35 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m2_29 [label="Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>())", span="28-30", cluster="lambda expression", file="OptionMapper.cs"];
m2_17 [label="Exit lambda expression", span="22-23", cluster="lambda expression", file="OptionMapper.cs"];
m2_30 [label="Exit lambda expression", span="27-30", cluster="lambda expression", file="OptionMapper.cs"];
m2_34 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="OptionMapper.cs"];
m2_33 [label="se.Item1", span="37-37", cluster="lambda expression", file="OptionMapper.cs"];
m2_37 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m2_36 [label="se.Item2", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m2_39 [label="se.Value", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m2_40 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="OptionMapper.cs"];
m2_14 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="OptionMapper.cs"];
m2_23 [label="Entry Unk.converter", span="", cluster="Unk.converter", file="OptionMapper.cs"];
m2_5 [label="Entry Unk.>", span="", cluster="Unk.>", file="OptionMapper.cs"];
m2_27 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="OptionMapper.cs"];
m2_41 [label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span="", file="OptionMapper.cs"];
m2_42 [label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", span="", file="OptionMapper.cs"];
m2_43 [label="System.StringComparer", span="", file="OptionMapper.cs"];
m2_44 [label="CommandLine.Core.SpecificationProperty", span="", file="OptionMapper.cs"];
m3_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapperTests.cs"];
m3_12 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="OptionMapperTests.cs"];
m3_13 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="OptionMapperTests.cs"];
m3_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs"];
m3_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs"];
m3_11 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="OptionMapperTests.cs"];
m3_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="OptionMapperTests.cs"];
m3_27 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs"];
m3_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m3_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m3_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=red, community=0, file="OptionMapperTests.cs"];
m3_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m3_4 [label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="39-42", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m3_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs"];
m3_28 [label="Entry lambda expression", span="40-42", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_16 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_20 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_24 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_18 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_21 [label="pt.Specification.IsOption()", span="33-33", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_22 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_25 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_26 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_29 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="40-42", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_30 [label="Exit lambda expression", span="40-42", cluster="lambda expression", file="OptionMapperTests.cs"];
m3_31 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="OptionMapperTests.cs"];
m3_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs"];
m3_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs"];
m3_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="OptionMapperTests.cs"];
m3_10 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="OptionMapperTests.cs"];
m3_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs"];
m4_0 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_3 [label="var scalars = Scalar.Partition(tokenList, typeLookup).Memorize()", span="18-18", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="OptionSpecification.cs"];
m4_1 [label="var tokenList = tokens.Memorize()", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_2 [label="var switches = Switch.Partition(tokenList, typeLookup).Memorize()", span="17-17", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_4 [label="var sequences = Sequence.Partition(tokenList, typeLookup).Memorize()", span="19-19", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="OptionSpecification.cs"];
m4_5 [label="var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).Memorize()", span="20-23", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="OptionSpecification.cs"];
m4_8 [label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="27-32", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_6 [label="var values = nonOptions.Where(v => v.IsValue()).Memorize()", span="24-24", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_7 [label="var errors = nonOptions.Except(values).Memorize()", span="25-25", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_9 [label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_14 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="OptionSpecification.cs"];
m4_26 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="OptionSpecification.cs"];
m4_22 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="OptionSpecification.cs"];
m4_13 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_21 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="OptionSpecification.cs"];
m4_15 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize", file="OptionSpecification.cs"];
m4_30 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="OptionSpecification.cs"];
m4_11 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_16 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="OptionSpecification.cs"];
m4_34 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="OptionSpecification.cs"];
m4_28 [label="!scalars.Contains(t)", span="22-22", cluster="lambda expression", file="OptionSpecification.cs"];
m4_32 [label="!sequences.Contains(t)", span="23-23", cluster="lambda expression", file="OptionSpecification.cs"];
m4_23 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="OptionSpecification.cs"];
m4_27 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="OptionSpecification.cs"];
m4_31 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="OptionSpecification.cs"];
m4_24 [label="!switches.Contains(t)", span="21-21", cluster="lambda expression", color=green, community=0, file="OptionSpecification.cs"];
m4_25 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="OptionSpecification.cs"];
m4_29 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="OptionSpecification.cs"];
m4_38 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="OptionSpecification.cs"];
m4_33 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="OptionSpecification.cs"];
m4_40 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="OptionSpecification.cs"];
m4_39 [label="t.Text", span="31-31", cluster="lambda expression", file="OptionSpecification.cs"];
m4_35 [label="v.IsValue()", span="24-24", cluster="lambda expression", file="OptionSpecification.cs"];
m4_36 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="OptionSpecification.cs"];
m4_10 [label="Entry System.Collections.Generic.IEnumerable<T>.Memorize<T>()", span="389-389", cluster="System.Collections.Generic.IEnumerable<T>.Memorize<T>()", file="OptionSpecification.cs"];
m4_17 [label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10", cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="OptionSpecification.cs"];
m4_12 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionSpecification.cs"];
m4_18 [label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16", cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="OptionSpecification.cs"];
m4_37 [label="Entry Unk.IsValue", span="", cluster="Unk.IsValue", file="OptionSpecification.cs"];
m4_19 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="OptionSpecification.cs"];
m4_20 [label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22", cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="OptionSpecification.cs"];
m4_41 [label=switches, span="", file="OptionSpecification.cs"];
m4_42 [label=scalars, span="", file="OptionSpecification.cs"];
m4_43 [label=sequences, span="", file="OptionSpecification.cs"];
m7_11 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ScalarTests.cs"];
m7_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="ScalarTests.cs"];
m7_5 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="ScalarTests.cs"];
m7_13 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ScalarTests.cs"];
m7_14 [label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs"];
m7_15 [label="var expected = new [] { Token.Name(''str''), Token.Value(''strvalue'') }", span="30-30", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs"];
m7_16 [label="var result = Scalar.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", color=red, community=0, file="ScalarTests.cs"];
m7_17 [label="expected.ShouldAllBeEquivalentTo(result)", span="43-43", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs"];
m7_18 [label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs"];
m7_0 [label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs"];
m7_1 [label="var expected = new Token[] { }", span="15-15", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs"];
m7_2 [label="var result = Scalar.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", color=red, community=0, file="ScalarTests.cs"];
m7_3 [label="expected.ShouldAllBeEquivalentTo(result)", span="24-24", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs"];
m7_4 [label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs"];
m7_6 [label="Entry Unk.ShouldAllBeEquivalentTo", span="", cluster="Unk.ShouldAllBeEquivalentTo", file="ScalarTests.cs"];
m7_21 [label="Entry lambda expression", span="38-41", cluster="lambda expression", file="ScalarTests.cs"];
m7_7 [label="Entry lambda expression", span="19-22", cluster="lambda expression", file="ScalarTests.cs"];
m7_8 [label="new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22", cluster="lambda expression", color=red, community=0, file="ScalarTests.cs"];
m7_9 [label="Exit lambda expression", span="19-22", cluster="lambda expression", file="ScalarTests.cs"];
m7_22 [label="new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41", cluster="lambda expression", color=red, community=0, file="ScalarTests.cs"];
m7_23 [label="Exit lambda expression", span="38-41", cluster="lambda expression", file="ScalarTests.cs"];
m7_12 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="ScalarTests.cs"];
m7_19 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="ScalarTests.cs"];
m7_20 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="ScalarTests.cs"];
m8_31 [label="Entry CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", span="73-73", cluster="CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", file="Sequence.cs"];
m8_32 [label="return token.Tag == TokenType.Value;", span="75-75", cluster="CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", file="Sequence.cs"];
m8_33 [label="Exit CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", span="73-73", cluster="CommandLine.Core.TokenExtensions.IsValue(CommandLine.Core.Token)", file="Sequence.cs"];
m8_28 [label="Entry CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", span="68-68", cluster="CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", file="Sequence.cs"];
m8_29 [label="return token.Tag == TokenType.Name;", span="70-70", cluster="CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", file="Sequence.cs"];
m8_30 [label="Exit CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", span="68-68", cluster="CommandLine.Core.TokenExtensions.IsName(CommandLine.Core.Token)", file="Sequence.cs"];
m8_21 [label="Entry object.GetHashCode()", span="0-0", cluster="object.GetHashCode()", file="Sequence.cs"];
m8_0 [label="Entry CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", span="13-13", cluster="CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", file="Sequence.cs"];
m8_1 [label="this.tag = tag", span="15-15", cluster="CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", file="Sequence.cs"];
m8_2 [label="this.text = text", span="16-16", cluster="CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", file="Sequence.cs"];
m8_3 [label="Exit CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", span="13-13", cluster="CommandLine.Core.Token.Token(CommandLine.Core.TokenType, string)", file="Sequence.cs"];
m8_17 [label="Entry object.Equals(object)", span="0-0", cluster="object.Equals(object)", file="Sequence.cs"];
m8_26 [label="Entry System.Enum.Equals(object)", span="0-0", cluster="System.Enum.Equals(object)", file="Sequence.cs"];
m8_27 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="Sequence.cs"];
m8_16 [label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="Sequence.cs"];
m8_22 [label="other == null", span="57-57", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="Sequence.cs"];
m8_24 [label="return this.Tag.Equals(other.Tag) && this.Text.Equals(other.Text);", span="62-62", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="Sequence.cs"];
m8_23 [label="return false;", span="59-59", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="Sequence.cs"];
m8_25 [label="Exit CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="Sequence.cs"];
m8_4 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="Sequence.cs"];
m8_5 [label="return new Token(TokenType.Name, text);", span="21-21", cluster="CommandLine.Core.Token.Name(string)", file="Sequence.cs"];
m8_6 [label="Exit CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="Sequence.cs"];
m8_18 [label="Entry CommandLine.Core.Token.GetHashCode()", span="50-50", cluster="CommandLine.Core.Token.GetHashCode()", file="Sequence.cs"];
m8_19 [label="return new {this.Tag, this.Text}.GetHashCode();", span="52-52", cluster="CommandLine.Core.Token.GetHashCode()", file="Sequence.cs"];
m8_20 [label="Exit CommandLine.Core.Token.GetHashCode()", span="50-50", cluster="CommandLine.Core.Token.GetHashCode()", file="Sequence.cs"];
m8_7 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="Sequence.cs"];
m8_8 [label="return new Token(TokenType.Value, text);", span="26-26", cluster="CommandLine.Core.Token.Value(string)", file="Sequence.cs"];
m8_9 [label="Exit CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="Sequence.cs"];
m8_10 [label="Entry CommandLine.Core.Token.Equals(object)", span="39-39", cluster="CommandLine.Core.Token.Equals(object)", file="Sequence.cs"];
m8_11 [label="var other = obj as Token", span="41-41", cluster="CommandLine.Core.Token.Equals(object)", file="Sequence.cs"];
m8_14 [label="return base.Equals(obj);", span="47-47", cluster="CommandLine.Core.Token.Equals(object)", file="Sequence.cs"];
m8_12 [label="other != null", span="42-42", cluster="CommandLine.Core.Token.Equals(object)", file="Sequence.cs"];
m8_13 [label="return this.Equals(other);", span="44-44", cluster="CommandLine.Core.Token.Equals(object)", file="Sequence.cs"];
m8_15 [label="Exit CommandLine.Core.Token.Equals(object)", span="39-39", cluster="CommandLine.Core.Token.Equals(object)", file="Sequence.cs"];
m8_34 [label="CommandLine.Core.Token", span="", file="Sequence.cs"];
m9_3 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="Specification.cs"];
m9_23 [label="Entry System.Type.InstanceProperty(string, object)", span="188-188", cluster="System.Type.InstanceProperty(string, object)", file="Specification.cs"];
m9_17 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="34-34", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="Specification.cs"];
m9_18 [label="var optionType = typeof(FSharpOption<>)", span="36-36", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", color=green, community=0, file="Specification.cs"];
m9_19 [label="var typedType = optionType.MakeGenericType(GetUnderlyingType(value.GetType()))", span="37-37", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="Specification.cs"];
m9_20 [label="return typedType.InstanceProperty(\r\n                ''Value'',\r\n                value);", span="39-41", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="Specification.cs"];
m9_21 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="34-34", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="Specification.cs"];
m9_24 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="44-44", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="Specification.cs"];
m9_26 [label="var typedType = optionType.MakeGenericType(GetUnderlyingType(value.GetType()))", span="47-47", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="Specification.cs"];
m9_27 [label="return (bool)typedType.StaticMethod(\r\n                ''get_IsSome'', value);", span="49-50", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="Specification.cs"];
m9_25 [label="var optionType = typeof(FSharpOption<>)", span="46-46", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="Specification.cs"];
m9_28 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="44-44", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="Specification.cs"];
m9_9 [label="Entry System.Type.MakeGenericType(params System.Type[])", span="0-0", cluster="System.Type.MakeGenericType(params System.Type[])", file="Specification.cs"];
m9_22 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="Specification.cs"];
m9_16 [label="Entry System.Type.StaticProperty(string)", span="178-178", cluster="System.Type.StaticProperty(string)", file="Specification.cs"];
m9_4 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="16-16", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="Specification.cs"];
m9_5 [label="var optionType = typeof(FSharpOption<>)", span="18-18", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", color=green, community=0, file="Specification.cs"];
m9_6 [label="var typedType = optionType.MakeGenericType(type)", span="19-19", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", color=green, community=0, file="Specification.cs"];
m9_7 [label="return typedType.StaticMethod(\r\n                ''Some'', value);", span="21-22", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", color=green, community=0, file="Specification.cs"];
m9_8 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="16-16", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="Specification.cs"];
m9_11 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="25-25", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="Specification.cs"];
m9_13 [label="var typedType = optionType.MakeGenericType(type)", span="28-28", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="Specification.cs"];
m9_12 [label="var optionType = typeof(FSharpOption<>)", span="27-27", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="Specification.cs"];
m9_14 [label="return typedType.StaticProperty(\r\n                ''None'');", span="30-31", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="Specification.cs"];
m9_15 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="25-25", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="Specification.cs"];
m9_0 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="11-11", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="Specification.cs"];
m9_1 [label="return type.GetGenericArguments()[0];", span="13-13", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="Specification.cs"];
m9_2 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="11-11", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="Specification.cs"];
m9_10 [label="Entry System.Type.StaticMethod(string, params object[])", span="168-168", cluster="System.Type.StaticMethod(string, params object[])", file="Specification.cs"];
m10_10 [label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="37-37", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m10_11 [label=guardsLookup, span="39-39", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m10_12 [label="specifications.Any(spec => guard.Item1(spec))", span="41-41", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m10_14 [label="return specifications;", span="47-47", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m10_13 [label="throw new ApplicationException(guard.Item2);", span="43-43", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m10_15 [label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="37-37", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs"];
m10_30 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="SpecificationExtensions.cs"];
m10_22 [label="Entry CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="50-50", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs"];
m10_23 [label="int min", span="52-52", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs"];
m10_25 [label="specification.Min.MatchJust(out min) && specification.Max.MatchJust(out max)", span="54-54", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs"];
m10_26 [label="return predicate(min, max);", span="56-56", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs"];
m10_24 [label="int max", span="53-53", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs"];
m10_27 [label="return false;", span="58-58", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs"];
m10_28 [label="Exit CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="50-50", cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs"];
m10_0 [label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="10-10", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m10_1 [label="return specification.Tag == SpecificationType.Option;", span="12-12", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m10_2 [label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="10-10", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m10_9 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs"];
m10_29 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", span="31-31", cluster="CommandLine.Infrastructure.Maybe<T>.MatchJust(out T)", file="SpecificationExtensions.cs"];
m10_3 [label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="15-15", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m10_4 [label="return specification.Tag == SpecificationType.Value;", span="17-17", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m10_5 [label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="15-15", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs"];
m10_18 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="SpecificationExtensions.cs"];
m10_19 [label="guard.Item1(spec)", span="41-41", cluster="lambda expression", file="SpecificationExtensions.cs"];
m10_20 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="SpecificationExtensions.cs"];
m10_37 [label="Entry CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="71-71", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_38 [label="int max", span="73-73", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_39 [label="specification.Max.MatchJust(out max)", span="74-74", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_40 [label="return predicate(max);", span="76-76", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_41 [label="return false;", span="78-78", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_42 [label="Exit CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="71-71", cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_31 [label="Entry CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="61-61", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_32 [label="int min", span="63-63", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_33 [label="specification.Min.MatchJust(out min)", span="64-64", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_34 [label="return predicate(min);", span="66-66", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_35 [label="return false;", span="68-68", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_36 [label="Exit CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="61-61", cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs"];
m10_17 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)", file="SpecificationExtensions.cs"];
m10_16 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="SpecificationExtensions.cs"];
m10_6 [label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs"];
m10_7 [label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", span="22-34", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", color=green, community=0];
m10_8 [label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs"];
m10_21 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="SpecificationExtensions.cs"];
m10_43 [label=guard, span="", file="SpecificationExtensions.cs"];
m11_6 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="SpecificationGuards.cs"];
m11_12 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="SpecificationGuards.cs"];
m11_7 [label="Entry CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", span="21-21", cluster="CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", file="SpecificationGuards.cs"];
m11_8 [label="builder == null", span="23-23", cluster="CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", file="SpecificationGuards.cs"];
m11_10 [label="return builder.ToString();", span="27-27", cluster="CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", color=red, community=0, file="SpecificationGuards.cs"];
m11_9 [label="return string.Empty;", span="25-25", cluster="CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", file="SpecificationGuards.cs"];
m11_11 [label="Exit CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", span="21-21", cluster="CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", file="SpecificationGuards.cs"];
m11_0 [label="Entry CommandLine.Text.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", span="9-9", cluster="CommandLine.Text.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="SpecificationGuards.cs"];
m11_1 [label=condition, span="11-11", cluster="CommandLine.Text.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="SpecificationGuards.cs"];
m11_2 [label=values, span="13-13", cluster="CommandLine.Text.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="SpecificationGuards.cs"];
m11_3 [label="builder.Append(value)", span="15-15", cluster="CommandLine.Text.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="SpecificationGuards.cs"];
m11_4 [label="return builder;", span="18-18", cluster="CommandLine.Text.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="SpecificationGuards.cs"];
m11_5 [label="Exit CommandLine.Text.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", span="9-9", cluster="CommandLine.Text.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="SpecificationGuards.cs"];
m14_5 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="Switch.cs"];
m14_6 [label="t.IsName() && info.TargetType == TargetType.Boolean", span="16-16", cluster="lambda expression", color=green, community=0, file="Switch.cs"];
m14_7 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="Switch.cs"];
m14_0 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Switch.cs"];
m14_1 [label="return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.TargetType == TargetType.Boolean, false)\r\n                   select t;", span="15-17", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Switch.cs"];
m14_2 [label="Exit CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Switch.cs"];
m14_4 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Switch.cs"];
m14_8 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="Switch.cs"];
m14_3 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="Switch.cs"];
m14_9 [label=t, span="", file="Switch.cs"];
m15_10 [label="Exit lambda expression", span="19-19", cluster="lambda expression", file="SwitchTests.cs"];
m15_47 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", file="SwitchTests.cs"];
m15_36 [label="Entry System.Type.IsScalar()", span="33-33", cluster="System.Type.IsScalar()", file="SwitchTests.cs"];
m15_28 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="81-81", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="SwitchTests.cs"];
m15_6 [label="Entry Unk.ShouldAllBeEquivalentTo", span="", cluster="Unk.ShouldAllBeEquivalentTo", file="SwitchTests.cs"];
m15_19 [label="var pt = specProps.First()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_20 [label="var taken = values.Take(pt.Specification.GetMaxValueCount().Return(n => n, values.Count()))", span="35-35", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_7 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="SwitchTests.cs"];
m15_12 [label="pe.Item2", span="20-20", cluster="lambda expression", file="SwitchTests.cs"];
m15_0 [label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs"];
m15_1 [label="var expected = new Token[] { }", span="15-15", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs"];
m15_2 [label="var result = Switch.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", color=green, community=0, file="SwitchTests.cs"];
m15_3 [label="expected.ShouldAllBeEquivalentTo(result)", span="24-24", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs"];
m15_35 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="SwitchTests.cs"];
m15_52 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SwitchTests.cs"];
m15_21 [label="taken.Empty()", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_8 [label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22", cluster="lambda expression", file="SwitchTests.cs", color=green, community=0];
m15_11 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="SwitchTests.cs"];
m15_14 [label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs"];
m15_9 [label="pe.Item1", span="19-19", cluster="lambda expression", file="SwitchTests.cs"];
m15_13 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="SwitchTests.cs"];
m15_15 [label="var expected = new [] { Token.Name(''x'') }", span="30-30", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", color=red, community=0, file="SwitchTests.cs"];
m15_16 [label="var result = Switch.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs", color=green, community=0];
m15_45 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="46-46", cluster="lambda expression", file="SwitchTests.cs"];
m15_41 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="SwitchTests.cs"];
m15_44 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="SwitchTests.cs"];
m15_42 [label=n, span="35-35", cluster="lambda expression", file="SwitchTests.cs"];
m15_43 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="SwitchTests.cs"];
m15_46 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="SwitchTests.cs"];
m15_22 [label="yield return\r\n                    Tuple.Create(pt, MakeErrorInCaseOfMinConstraint(pt.Specification));", span="38-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", color=green, community=0, file="SwitchTests.cs"];
m15_23 [label="yield break;", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs", color=red, community=0];
m15_29 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="SwitchTests.cs"];
m15_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="SwitchTests.cs"];
m15_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="SwitchTests.cs"];
m15_37 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="SwitchTests.cs"];
m15_51 [label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70", cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="SwitchTests.cs"];
m15_34 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="56-56", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="SwitchTests.cs"];
m15_49 [label="return !specification.IsMinNotSpecified()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="58-60", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="SwitchTests.cs"];
m15_50 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="56-56", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="SwitchTests.cs"];
m15_39 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SwitchTests.cs"];
m15_5 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="SwitchTests.cs"];
m15_17 [label="specProps.Empty()", span="30-30", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_18 [label="yield break;", span="32-32", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_38 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="SwitchTests.cs"];
m15_4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_48 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="SwitchTests.cs"];
m15_30 [label="Entry CommandLine.Core.Specification.GetMaxValueCount()", span="51-51", cluster="CommandLine.Core.Specification.GetMaxValueCount()", file="SwitchTests.cs"];
m15_31 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="SwitchTests.cs"];
m15_24 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="43-48", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_26 [label="yield return value;", span="52-52", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_25 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="50-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_27 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="SwitchTests.cs"];
m15_32 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="SwitchTests.cs"];
m15_53 [label=pt, span="", file="SwitchTests.cs"];
m16_9 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenizerTests.cs"];
m16_11 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs"];
m16_13 [label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="58-58", cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenizerTests.cs"];
m16_21 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_22 [label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="41-42", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_23 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="43-44", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=red, community=0, file="TokenizerTests.cs"];
m16_25 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="56-56", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_24 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="47-53", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_26 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_20 [label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs"];
m16_8 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs"];
m16_16 [label="Entry Unk.True", span="", cluster="Unk.True", file="TokenizerTests.cs"];
m16_0 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_1 [label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="17-18", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="19-20", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=red, community=0, file="TokenizerTests.cs"];
m16_4 [label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="32-32", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_3 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="23-29", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_5 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m16_27 [label="Entry lambda expression", span="53-53", cluster="lambda expression", file="TokenizerTests.cs"];
m16_18 [label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m16_17 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m16_19 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="TokenizerTests.cs"];
m16_28 [label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="53-53", cluster="lambda expression", file="TokenizerTests.cs"];
m16_29 [label="Exit lambda expression", span="53-53", cluster="lambda expression", file="TokenizerTests.cs"];
m16_6 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs"];
m16_15 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TokenizerTests.cs"];
m16_14 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TokenizerTests.cs"];
m16_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs"];
m16_7 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs"];
m16_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs"];
m16_30 [label=specs, span="", file="TokenizerTests.cs"];
m16_31 [label=specs, span="", file="TokenizerTests.cs"];
m18_9 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeDescriptor.cs"];
m18_4 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="29-29", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_7 [label="return new TypeDescriptor(tag, maximumItems);", span="33-33", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_5 [label="maximumItems == null", span="31-31", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_6 [label="throw new ArgumentNullException(''maximumItems'');", span="31-31", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_8 [label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="29-29", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_0 [label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_1 [label="this.targetType = targetType", span="15-15", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", color=green, community=1, file="TypeDescriptor.cs"];
m18_2 [label="this.maxItems = maxItems", span="16-16", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_3 [label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="13-13", cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs"];
m18_10 [label="CommandLine.Core.TypeDescriptor", span="", file="TypeDescriptor.cs"];
m19_14 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="TypeLookup.cs"];
m19_4 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="TypeLookup.cs"];
m19_10 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="TypeLookup.cs"];
m19_6 [label="Entry Unk.Map", span="", cluster="Unk.Map", file="TypeLookup.cs"];
m19_5 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="TypeLookup.cs"];
m19_0 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs"];
m19_1 [label="var info = specifications.SingleOrDefault(a => name.MatchName(a.ShortName, a.LongName, comparer))\r\n                .ToMaybe()\r\n                    .Map(\r\n                        s => TypeDescriptor.Create(s.TargetType, s.Max))", span="17-20", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=green, community=0, file="TypeLookup.cs"];
m19_2 [label="return info;", span="21-21", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs"];
m19_3 [label="Exit CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs"];
m19_11 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="TypeLookup.cs"];
m19_7 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="TypeLookup.cs"];
m19_12 [label="TypeDescriptor.Create(s.TargetType, s.Max)", span="20-20", cluster="lambda expression", color=green, community=0, file="TypeLookup.cs"];
m19_13 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="TypeLookup.cs"];
m19_8 [label="name.MatchName(a.ShortName, a.LongName, comparer)", span="17-17", cluster="lambda expression", file="TypeLookup.cs"];
m19_9 [label="Exit lambda expression", span="17-17", cluster="lambda expression", file="TypeLookup.cs"];
m19_15 [label=string, span="", file="TypeLookup.cs"];
m19_16 [label="System.StringComparer", span="", file="TypeLookup.cs"];
m21_6 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ValueSpecification.cs"];
m21_9 [label="Entry System.Type.ToTargetType()", span="22-22", cluster="System.Type.ToTargetType()", file="ValueSpecification.cs"];
m21_7 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ValueSpecification.cs"];
m21_8 [label="Entry T.ToMaybe<T>()", span="79-79", cluster="T.ToMaybe<T>()", file="ValueSpecification.cs"];
m21_0 [label="Entry CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="11-11", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs"];
m21_1 [label="this.index = index", span="15-15", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs"];
m21_2 [label="Exit CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="11-11", cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ValueSpecification.cs"];
m21_3 [label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueSpecification.cs"];
m21_4 [label="return new ValueSpecification(\r\n                attribute.Index,\r\n                attribute.Required,\r\n                attribute.Min == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Min),\r\n                attribute.Max == -1 ? Maybe.Nothing<int>() : Maybe.Just(attribute.Max),\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                conversionType.ToTargetType());", span="20-27", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", color=green, community=0, file="ValueSpecification.cs"];
m21_5 [label="Exit CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueSpecification.cs"];
m21_10 [label="CommandLine.Core.ValueSpecification", span="", file="ValueSpecification.cs"];
m1_3 -> m1_0  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=red];
m1_1 -> m1_3  [key=2, style=dotted, color=green];
m1_1 -> m1_4  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid, color=red];
m1_2 -> m1_5  [key=2, style=dotted, color=red];
m1_2 -> m1_6  [key=2, style=dotted, color=red];
m1_2 -> m1_7  [key=2, style=dotted, color=red];
m1_2 -> m1_8  [key=1, style=dashed, color=red, label="lambda expression"];
m1_2 -> m1_11  [key=1, style=dashed, color=red, label="lambda expression"];
m1_2 -> m1_14  [key=1, style=dashed, color=red, label="lambda expression"];
m1_44 -> m1_45  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid, color=red];
m1_11 -> m1_12  [key=0, style=solid];
m1_14 -> m1_15  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid, color=red];
m1_10 -> m1_8  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_11  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid];
m1_16 -> m1_14  [key=0, style=bold, color=blue];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_39  [key=2, style=dotted];
m1_45 -> m1_47  [key=2, style=dotted];
m1_45 -> m1_48  [key=2, style=dotted];
m1_45 -> m1_35  [key=2, style=dotted];
m1_41 -> m1_42  [key=0, style=solid];
m1_42 -> m1_43  [key=0, style=solid];
m1_43 -> m1_41  [key=0, style=bold, color=blue];
m1_46 -> m1_44  [key=0, style=bold, color=blue];
m1_34 -> m1_49  [key=0, style=solid];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_51  [key=2, style=dotted];
m1_49 -> m1_52  [key=2, style=dotted];
m1_49 -> m1_39  [key=2, style=dotted];
m1_49 -> m1_48  [key=2, style=dotted];
m1_50 -> m1_34  [key=0, style=bold, color=blue];
m1_4 -> m1_17  [key=0, style=solid];
m1_4 -> m1_18  [key=0, style=bold, color=crimson];
m1_4 -> m1_22  [key=0, style=bold, color=crimson];
m1_4 -> m1_23  [key=0, style=bold, color=crimson];
m1_4 -> m1_24  [key=0, style=bold, color=crimson];
m1_4 -> m1_26  [key=0, style=bold, color=crimson];
m1_4 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_4 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m1_4 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=0, style=solid];
m1_17 -> m1_28  [key=2, style=dotted];
m1_18 -> m1_19  [key=0, style=solid];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_34  [key=2, style=dotted];
m1_22 -> m1_35  [key=2, style=dotted];
m1_23 -> m1_24  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_36  [key=2, style=dotted];
m1_24 -> m1_37  [key=2, style=dotted];
m1_24 -> m1_38  [key=2, style=dotted];
m1_24 -> m1_39  [key=2, style=dotted];
m1_24 -> m1_35  [key=2, style=dotted];
m1_24 -> m1_32  [key=2, style=dotted];
m1_24 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_26 -> m1_25  [key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_29  [key=2, style=dotted];
m1_19 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_19 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_19 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label=pt];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_30  [key=2, style=dotted];
m1_20 -> m1_31  [key=2, style=dotted];
m1_20 -> m1_32  [key=2, style=dotted];
m1_20 -> m1_33  [key=2, style=dotted];
m1_20 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_20 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label=taken];
m1_20 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=taken];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=0, style=solid];
m1_25 -> m1_40  [key=2, style=dotted];
m1_25 -> m1_31  [key=2, style=dotted];
m1_25 -> m1_4  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_24  [key=0, style=solid];
m1_21 -> m1_28  [key=2, style=dotted];
m1_27 -> m1_4  [key=0, style=bold, color=blue];
m1_53 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label=pt];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_0 -> m2_8  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
m2_0 -> m2_20  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>"];
m2_0 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_4  [key=2, style=dotted, color=green];
m2_1 -> m2_7  [key=1, style=dashed, color=green, label="lambda expression"];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_4  [key=2, style=dotted];
m2_2 -> m2_5  [key=2, style=dotted];
m2_2 -> m2_6  [key=2, style=dotted];
m2_2 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_2 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_2 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_3 -> m2_0  [key=0, style=bold, color=blue];
m2_38 -> m2_39  [key=0, style=solid];
m2_7 -> m2_8  [key=0, style=solid, color=green];
m2_7 -> m2_20  [key=1, style=dashed, color=green, label="CommandLine.Core.SpecificationProperty"];
m2_7 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m2_7 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m2_8 -> m2_9  [key=0, style=solid, color=green];
m2_8 -> m2_10  [key=2, style=dotted, color=green];
m2_8 -> m2_11  [key=2, style=dotted, color=green];
m2_8 -> m2_12  [key=2, style=dotted, color=green];
m2_8 -> m2_13  [key=2, style=dotted, color=green];
m2_8 -> m2_14  [key=2, style=dotted, color=green];
m2_8 -> m2_15  [key=1, style=dashed, color=green, label="lambda expression"];
m2_8 -> m2_19  [key=1, style=dashed, color=green, label="lambda expression"];
m2_9 -> m2_7  [key=0, style=bold, color=blue];
m2_15 -> m2_16  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid, color=green];
m2_20 -> m2_21  [key=0, style=solid, color=green];
m2_20 -> m2_22  [key=2, style=dotted, color=green];
m2_20 -> m2_23  [key=2, style=dotted, color=green];
m2_20 -> m2_24  [key=2, style=dotted, color=green];
m2_20 -> m2_25  [key=2, style=dotted, color=green];
m2_20 -> m2_26  [key=2, style=dotted, color=green];
m2_20 -> m2_13  [key=2, style=dotted, color=green];
m2_20 -> m2_27  [key=2, style=dotted, color=green];
m2_20 -> m2_28  [key=1, style=dashed, color=green, label="lambda expression"];
m2_21 -> m2_19  [key=0, style=bold, color=blue];
m2_28 -> m2_29  [key=0, style=solid];
m2_16 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_18  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid];
m2_35 -> m2_36  [key=0, style=solid];
m2_29 -> m2_12  [key=2, style=dotted];
m2_29 -> m2_13  [key=2, style=dotted];
m2_29 -> m2_26  [key=2, style=dotted];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_31  [key=2, style=dotted];
m2_17 -> m2_15  [key=0, style=bold, color=blue];
m2_30 -> m2_28  [key=0, style=bold, color=blue];
m2_34 -> m2_32  [key=0, style=bold, color=blue];
m2_33 -> m2_34  [key=0, style=solid];
m2_37 -> m2_35  [key=0, style=bold, color=blue];
m2_36 -> m2_37  [key=0, style=solid];
m2_39 -> m2_40  [key=0, style=solid];
m2_40 -> m2_38  [key=0, style=bold, color=blue];
m2_41 -> m2_8  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>"];
m2_42 -> m2_8  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>"];
m2_42 -> m2_20  [key=1, style=dashed, color=green, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>"];
m2_43 -> m2_8  [key=1, style=dashed, color=green, label="System.StringComparer"];
m2_43 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m2_44 -> m2_20  [key=1, style=dashed, color=green, label="CommandLine.Core.SpecificationProperty"];
m2_44 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m2_44 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.SpecificationProperty"];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid, color=red];
m3_1 -> m3_6  [key=2, style=dotted];
m3_1 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label=tokenPartitions];
m3_2 -> m3_3  [key=0, style=solid, color=red];
m3_2 -> m3_7  [key=2, style=dotted, color=red];
m3_2 -> m3_8  [key=2, style=dotted, color=red];
m3_2 -> m3_9  [key=2, style=dotted, color=red];
m3_2 -> m3_10  [key=2, style=dotted, color=red];
m3_2 -> m3_11  [key=2, style=dotted, color=red];
m3_2 -> m3_12  [key=2, style=dotted, color=red];
m3_2 -> m3_16  [key=1, style=dashed, color=red, label="lambda expression"];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_13  [key=2, style=dotted];
m3_3 -> m3_14  [key=2, style=dotted];
m3_3 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_3 -> m3_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_11  [key=2, style=dotted];
m3_4 -> m3_15  [key=2, style=dotted];
m3_4 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_5 -> m3_0  [key=0, style=bold, color=blue];
m3_28 -> m3_29  [key=0, style=solid];
m3_16 -> m3_17  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid];
m3_24 -> m3_25  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_19  [key=2, style=dotted];
m3_18 -> m3_16  [key=0, style=bold, color=blue];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_23  [key=2, style=dotted];
m3_22 -> m3_20  [key=0, style=bold, color=blue];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_27  [key=2, style=dotted];
m3_26 -> m3_24  [key=0, style=bold, color=blue];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_23  [key=2, style=dotted];
m3_29 -> m3_31  [key=2, style=dotted];
m3_30 -> m3_28  [key=0, style=bold, color=blue];
m4_0 -> m4_3  [key=1, style=dashed, color=green, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m4_0 -> m4_4  [key=1, style=dashed, color=green, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>"];
m4_3 -> m4_4  [key=0, style=solid, color=green];
m4_3 -> m4_12  [key=2, style=dotted, color=green];
m4_3 -> m4_10  [key=2, style=dotted, color=green];
m4_3 -> m4_5  [key=1, style=dashed, color=green, label=scalars];
m4_3 -> m4_28  [key=1, style=dashed, color=green, label=scalars];
m4_3 -> m4_8  [key=1, style=dashed, color=green, label=scalars];
m4_1 -> m4_3  [key=1, style=dashed, color=green, label=tokenList];
m4_1 -> m4_4  [key=1, style=dashed, color=green, label=tokenList];
m4_1 -> m4_5  [key=1, style=dashed, color=green, label=tokenList];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_10  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid, color=green];
m4_2 -> m4_5  [key=1, style=dashed, color=green, label=switches];
m4_2 -> m4_24  [key=1, style=dashed, color=green, label=switches];
m4_2 -> m4_11  [key=2, style=dotted];
m4_2 -> m4_10  [key=2, style=dotted];
m4_2 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=switches];
m4_4 -> m4_5  [key=0, style=solid, color=green];
m4_4 -> m4_13  [key=2, style=dotted, color=green];
m4_4 -> m4_10  [key=2, style=dotted, color=green];
m4_4 -> m4_32  [key=1, style=dashed, color=green, label=sequences];
m4_4 -> m4_8  [key=1, style=dashed, color=green, label=sequences];
m4_5 -> m4_6  [key=0, style=solid, color=green];
m4_5 -> m4_14  [key=2, style=dotted, color=green];
m4_5 -> m4_15  [key=2, style=dotted, color=green];
m4_5 -> m4_23  [key=1, style=dashed, color=green, label="lambda expression"];
m4_5 -> m4_27  [key=1, style=dashed, color=green, label="lambda expression"];
m4_5 -> m4_31  [key=1, style=dashed, color=green, label="lambda expression"];
m4_5 -> m4_7  [key=1, style=dashed, color=green, label=nonOptions];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_17  [key=2, style=dotted];
m4_8 -> m4_18  [key=2, style=dotted];
m4_8 -> m4_19  [key=2, style=dotted];
m4_8 -> m4_20  [key=2, style=dotted];
m4_8 -> m4_21  [key=2, style=dotted];
m4_8 -> m4_22  [key=2, style=dotted];
m4_8 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_6 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=values];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_14  [key=2, style=dotted];
m4_6 -> m4_15  [key=2, style=dotted];
m4_6 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_7 -> m4_10  [key=2, style=dotted];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_16  [key=2, style=dotted];
m4_9 -> m4_0  [key=0, style=bold, color=blue];
m4_34 -> m4_35  [key=0, style=solid];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_30  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_30  [key=2, style=dotted];
m4_23 -> m4_24  [key=0, style=solid, color=green];
m4_27 -> m4_28  [key=0, style=solid];
m4_31 -> m4_32  [key=0, style=solid];
m4_24 -> m4_25  [key=0, style=solid, color=green];
m4_24 -> m4_26  [key=2, style=dotted, color=green];
m4_25 -> m4_23  [key=0, style=bold, color=blue];
m4_29 -> m4_27  [key=0, style=bold, color=blue];
m4_38 -> m4_39  [key=0, style=solid];
m4_33 -> m4_31  [key=0, style=bold, color=blue];
m4_40 -> m4_38  [key=0, style=bold, color=blue];
m4_39 -> m4_40  [key=0, style=solid];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_37  [key=2, style=dotted];
m4_36 -> m4_34  [key=0, style=bold, color=blue];
m4_41 -> m4_24  [key=1, style=dashed, color=green, label=switches];
m4_42 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label=scalars];
m4_43 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label=sequences];
m7_14 -> m7_15  [key=0, style=solid];
m7_15 -> m7_16  [key=0, style=solid, color=red];
m7_15 -> m7_19  [key=2, style=dotted];
m7_15 -> m7_20  [key=2, style=dotted];
m7_15 -> m7_17  [key=1, style=dashed, color=darkseagreen4, label=expected];
m7_16 -> m7_17  [key=0, style=solid, color=red];
m7_16 -> m7_19  [key=2, style=dotted, color=red];
m7_16 -> m7_20  [key=2, style=dotted, color=red];
m7_16 -> m7_5  [key=2, style=dotted, color=red];
m7_16 -> m7_21  [key=1, style=dashed, color=red, label="lambda expression"];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_6  [key=2, style=dotted];
m7_18 -> m7_14  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid, color=red];
m7_1 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label=expected];
m7_2 -> m7_3  [key=0, style=solid, color=red];
m7_2 -> m7_5  [key=2, style=dotted, color=red];
m7_2 -> m7_7  [key=1, style=dashed, color=red, label="lambda expression"];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_6  [key=2, style=dotted];
m7_4 -> m7_0  [key=0, style=bold, color=blue];
m7_21 -> m7_22  [key=0, style=solid, color=red];
m7_7 -> m7_8  [key=0, style=solid, color=red];
m7_8 -> m7_9  [key=0, style=solid, color=red];
m7_8 -> m7_10  [key=2, style=dotted, color=red];
m7_8 -> m7_11  [key=2, style=dotted, color=red];
m7_8 -> m7_12  [key=2, style=dotted, color=red];
m7_8 -> m7_13  [key=2, style=dotted, color=red];
m7_9 -> m7_7  [key=0, style=bold, color=blue];
m7_22 -> m7_23  [key=0, style=solid, color=red];
m7_22 -> m7_10  [key=2, style=dotted, color=red];
m7_22 -> m7_11  [key=2, style=dotted, color=red];
m7_22 -> m7_12  [key=2, style=dotted, color=red];
m7_22 -> m7_13  [key=2, style=dotted, color=red];
m7_23 -> m7_21  [key=0, style=bold, color=blue];
m8_31 -> m8_32  [key=0, style=solid];
m8_32 -> m8_33  [key=0, style=solid];
m8_33 -> m8_31  [key=0, style=bold, color=blue];
m8_28 -> m8_29  [key=0, style=solid];
m8_29 -> m8_30  [key=0, style=solid];
m8_30 -> m8_28  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_0 -> m8_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_1 -> m8_2  [key=0, style=solid];
m8_2 -> m8_3  [key=0, style=solid];
m8_3 -> m8_0  [key=0, style=bold, color=blue];
m8_16 -> m8_22  [key=0, style=solid];
m8_16 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_22 -> m8_23  [key=0, style=solid];
m8_22 -> m8_24  [key=0, style=solid];
m8_24 -> m8_25  [key=0, style=solid];
m8_24 -> m8_26  [key=2, style=dotted];
m8_24 -> m8_27  [key=2, style=dotted];
m8_23 -> m8_25  [key=0, style=solid];
m8_25 -> m8_16  [key=0, style=bold, color=blue];
m8_4 -> m8_5  [key=0, style=solid];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_0  [key=2, style=dotted];
m8_5 -> m8_7  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> "];
m8_6 -> m8_4  [key=0, style=bold, color=blue];
m8_18 -> m8_19  [key=0, style=solid];
m8_19 -> m8_20  [key=0, style=solid];
m8_19 -> m8_21  [key=2, style=dotted];
m8_19 -> m8_19  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
m8_20 -> m8_18  [key=0, style=bold, color=blue];
m8_7 -> m8_8  [key=0, style=solid];
m8_8 -> m8_9  [key=0, style=solid];
m8_8 -> m8_0  [key=2, style=dotted];
m8_9 -> m8_7  [key=0, style=bold, color=blue];
m8_10 -> m8_11  [key=0, style=solid];
m8_10 -> m8_14  [key=1, style=dashed, color=darkseagreen4, label=object];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_13  [key=1, style=dashed, color=darkseagreen4, label=other];
m8_14 -> m8_15  [key=0, style=solid];
m8_14 -> m8_17  [key=2, style=dotted];
m8_12 -> m8_13  [key=0, style=solid];
m8_12 -> m8_14  [key=0, style=solid];
m8_13 -> m8_15  [key=0, style=solid];
m8_13 -> m8_16  [key=2, style=dotted];
m8_15 -> m8_10  [key=0, style=bold, color=blue];
m8_34 -> m8_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_34 -> m8_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_34 -> m8_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_34 -> m8_14  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_34 -> m8_19  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m8_34 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m9_17 -> m9_18  [key=0, style=solid, color=green];
m9_17 -> m9_19  [key=1, style=dashed, color=darkseagreen4, label=object];
m9_17 -> m9_20  [key=1, style=dashed, color=darkseagreen4, label=object];
m9_18 -> m9_19  [key=0, style=solid, color=green];
m9_19 -> m9_9  [key=2, style=dotted];
m9_19 -> m9_20  [key=0, style=solid];
m9_19 -> m9_22  [key=2, style=dotted];
m9_19 -> m9_0  [key=2, style=dotted];
m9_20 -> m9_21  [key=0, style=solid];
m9_20 -> m9_23  [key=2, style=dotted];
m9_21 -> m9_17  [key=0, style=bold, color=blue];
m9_24 -> m9_26  [key=1, style=dashed, color=darkseagreen4, label=object];
m9_24 -> m9_27  [key=1, style=dashed, color=darkseagreen4, label=object];
m9_24 -> m9_25  [key=0, style=solid];
m9_26 -> m9_9  [key=2, style=dotted];
m9_26 -> m9_27  [key=0, style=solid];
m9_26 -> m9_22  [key=2, style=dotted];
m9_26 -> m9_0  [key=2, style=dotted];
m9_27 -> m9_10  [key=2, style=dotted];
m9_27 -> m9_28  [key=0, style=solid];
m9_25 -> m9_26  [key=0, style=solid];
m9_28 -> m9_24  [key=0, style=bold, color=blue];
m9_4 -> m9_5  [key=0, style=solid, color=green];
m9_4 -> m9_6  [key=1, style=dashed, color=green, label="System.Type"];
m9_4 -> m9_7  [key=1, style=dashed, color=green, label=object];
m9_5 -> m9_6  [key=0, style=solid, color=green];
m9_6 -> m9_7  [key=0, style=solid, color=green];
m9_6 -> m9_9  [key=2, style=dotted, color=green];
m9_7 -> m9_8  [key=0, style=solid, color=green];
m9_7 -> m9_10  [key=2, style=dotted, color=green];
m9_8 -> m9_4  [key=0, style=bold, color=blue];
m9_11 -> m9_13  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m9_11 -> m9_12  [key=0, style=solid];
m9_13 -> m9_9  [key=2, style=dotted];
m9_13 -> m9_14  [key=0, style=solid];
m9_12 -> m9_13  [key=0, style=solid];
m9_14 -> m9_15  [key=0, style=solid];
m9_14 -> m9_16  [key=2, style=dotted];
m9_15 -> m9_11  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_3  [key=2, style=dotted];
m9_2 -> m9_0  [key=0, style=bold, color=blue];
m10_10 -> m10_11  [key=0, style=solid];
m10_10 -> m10_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m10_10 -> m10_14  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m10_10 -> m10_10  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Core.Specification> ThrowingValidate"];
m10_11 -> m10_12  [key=0, style=solid];
m10_11 -> m10_14  [key=0, style=solid];
m10_11 -> m10_19  [key=1, style=dashed, color=darkseagreen4, label=guard];
m10_11 -> m10_13  [key=1, style=dashed, color=darkseagreen4, label=guard];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_11  [key=0, style=solid];
m10_12 -> m10_16  [key=2, style=dotted];
m10_12 -> m10_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_14 -> m10_15  [key=0, style=solid];
m10_13 -> m10_15  [key=0, style=solid];
m10_13 -> m10_17  [key=2, style=dotted];
m10_15 -> m10_10  [key=0, style=bold, color=blue];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_25  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m10_22 -> m10_26  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, int, bool>"];
m10_22 -> m10_27  [key=3, color=darkorchid, style=bold, label="method methodReturn bool HavingRange"];
m10_23 -> m10_24  [key=0, style=solid];
m10_25 -> m10_26  [key=0, style=solid];
m10_25 -> m10_27  [key=0, style=solid];
m10_25 -> m10_29  [key=2, style=dotted];
m10_26 -> m10_28  [key=0, style=solid];
m10_26 -> m10_30  [key=2, style=dotted];
m10_24 -> m10_25  [key=0, style=solid];
m10_27 -> m10_28  [key=0, style=solid];
m10_28 -> m10_22  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_2 -> m10_0  [key=0, style=bold, color=blue];
m10_3 -> m10_4  [key=0, style=solid];
m10_4 -> m10_5  [key=0, style=solid];
m10_5 -> m10_3  [key=0, style=bold, color=blue];
m10_18 -> m10_19  [key=0, style=solid];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_21  [key=2, style=dotted];
m10_20 -> m10_18  [key=0, style=bold, color=blue];
m10_37 -> m10_38  [key=0, style=solid];
m10_37 -> m10_39  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m10_37 -> m10_40  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, bool>"];
m10_37 -> m10_27  [key=3, color=darkorchid, style=bold, label="method methodReturn bool HavingMax"];
m10_38 -> m10_39  [key=0, style=solid];
m10_39 -> m10_40  [key=0, style=solid];
m10_39 -> m10_41  [key=0, style=solid];
m10_39 -> m10_29  [key=2, style=dotted];
m10_40 -> m10_42  [key=0, style=solid];
m10_40 -> m10_21  [key=2, style=dotted];
m10_41 -> m10_42  [key=0, style=solid];
m10_42 -> m10_37  [key=0, style=bold, color=blue];
m10_31 -> m10_32  [key=0, style=solid];
m10_31 -> m10_33  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m10_31 -> m10_34  [key=1, style=dashed, color=darkseagreen4, label="System.Func<int, bool>"];
m10_31 -> m10_27  [key=3, color=darkorchid, style=bold, label="method methodReturn bool HavingMin"];
m10_32 -> m10_33  [key=0, style=solid];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_35  [key=0, style=solid];
m10_33 -> m10_29  [key=2, style=dotted];
m10_34 -> m10_36  [key=0, style=solid];
m10_34 -> m10_21  [key=2, style=dotted];
m10_35 -> m10_36  [key=0, style=solid];
m10_36 -> m10_31  [key=0, style=bold, color=blue];
m10_6 -> m10_7  [key=0, style=solid, color=green];
m10_7 -> m10_8  [key=0, style=solid, color=green];
m10_7 -> m10_9  [key=2, style=dotted, color=green];
m10_8 -> m10_6  [key=0, style=bold, color=blue];
m10_43 -> m10_19  [key=1, style=dashed, color=darkseagreen4, label=guard];
m11_7 -> m11_8  [key=0, style=solid];
m11_7 -> m11_10  [key=1, style=dashed, color=red, label="System.Text.StringBuilder"];
m11_8 -> m11_9  [key=0, style=solid];
m11_8 -> m11_10  [key=0, style=solid, color=red];
m11_10 -> m11_11  [key=0, style=solid, color=red];
m11_10 -> m11_12  [key=2, style=dotted, color=red];
m11_9 -> m11_11  [key=0, style=solid];
m11_9 -> m11_10  [key=3, color=red, style=bold, label="method methodReturn System.Func<CommandLine.Core.Specification, bool> GuardAgainstSequenceWithWrongRange"];
m11_11 -> m11_7  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_2  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m11_0 -> m11_3  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m11_0 -> m11_4  [key=1, style=dashed, color=darkseagreen4, label="System.Text.StringBuilder"];
m11_0 -> m11_0  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Text.StringBuilder AppendWhen"];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_4  [key=0, style=solid];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> m11_4  [key=0, style=solid];
m11_3 -> m11_2  [key=0, style=solid];
m11_3 -> m11_6  [key=2, style=dotted];
m11_4 -> m11_5  [key=0, style=solid];
m11_5 -> m11_0  [key=0, style=bold, color=blue];
m14_5 -> m14_6  [key=0, style=solid, color=green];
m14_6 -> m14_7  [key=0, style=solid, color=green];
m14_6 -> m14_8  [key=2, style=dotted, color=green];
m14_7 -> m14_5  [key=0, style=bold, color=blue];
m14_0 -> m14_1  [key=0, style=solid, color=green];
m14_1 -> m14_2  [key=0, style=solid, color=green];
m14_1 -> m14_3  [key=2, style=dotted, color=green];
m14_1 -> m14_4  [key=2, style=dotted, color=green];
m14_1 -> m14_1  [key=1, style=dashed, color=green, label=t];
m14_1 -> m14_5  [key=1, style=dashed, color=green, label="lambda expression"];
m14_1 -> m14_6  [key=1, style=dashed, color=green, label=t];
m14_2 -> m14_0  [key=0, style=bold, color=blue];
m14_9 -> m14_6  [key=1, style=dashed, color=green, label=t];
m15_10 -> m15_8  [key=0, style=bold, color=blue];
m15_19 -> m15_20  [key=0, style=solid];
m15_19 -> m15_29  [key=2, style=dotted];
m15_19 -> m15_22  [key=1, style=dashed, color=darkseagreen4, label=pt];
m15_19 -> m15_24  [key=1, style=dashed, color=darkseagreen4, label=pt];
m15_19 -> m15_45  [key=1, style=dashed, color=darkseagreen4, label=pt];
m15_20 -> m15_21  [key=0, style=solid];
m15_20 -> m15_30  [key=2, style=dotted];
m15_20 -> m15_31  [key=2, style=dotted];
m15_20 -> m15_32  [key=2, style=dotted];
m15_20 -> m15_33  [key=2, style=dotted];
m15_20 -> m15_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_20 -> m15_24  [key=1, style=dashed, color=darkseagreen4, label=taken];
m15_20 -> m15_25  [key=1, style=dashed, color=darkseagreen4, label=taken];
m15_12 -> m15_13  [key=0, style=solid];
m15_0 -> m15_1  [key=0, style=solid];
m15_1 -> m15_2  [key=0, style=solid, color=green];
m15_1 -> m15_4  [key=2, style=dotted];
m15_1 -> m15_3  [key=1, style=dashed, color=darkseagreen4, label=expected];
m15_2 -> m15_3  [key=0, style=solid, color=green];
m15_2 -> m15_5  [key=2, style=dotted, color=green];
m15_2 -> m15_6  [key=2, style=dotted, color=red];
m15_2 -> m15_7  [key=2, style=dotted, color=red];
m15_2 -> m15_8  [key=1, style=dashed, color=red, label="lambda expression"];
m15_2 -> m15_11  [key=1, style=dashed, color=red, label="lambda expression"];
m15_2 -> m15_14  [key=1, style=dashed, color=green, label="lambda expression"];
m15_3 -> m15_0  [key=0, style=bold, color=blue];
m15_3 -> m15_4  [key=0, style=solid];
m15_3 -> m15_6  [key=2, style=dotted];
m15_21 -> m15_22  [key=0, style=solid, color=green];
m15_21 -> m15_24  [key=0, style=solid];
m15_21 -> m15_28  [key=2, style=dotted];
m15_8 -> m15_9  [key=0, style=solid];
m15_8 -> m15_16  [key=0, style=solid, color=green];
m15_8 -> m15_10  [key=2, style=dotted, color=green];
m15_8 -> m15_48  [key=2, style=dotted, color=green];
m15_8 -> m15_12  [key=2, style=dotted, color=green];
m15_8 -> m15_39  [key=2, style=dotted, color=green];
m15_11 -> m15_12  [key=0, style=solid];
m15_14 -> m15_15  [key=0, style=solid, color=red];
m15_14 -> m15_8  [key=0, style=solid, color=green];
m15_9 -> m15_10  [key=0, style=solid];
m15_13 -> m15_11  [key=0, style=bold, color=blue];
m15_15 -> m15_16  [key=0, style=solid, color=green];
m15_15 -> m15_19  [key=2, style=dotted];
m15_15 -> m15_17  [key=1, style=dashed, color=darkseagreen4, label=expected];
m15_16 -> m15_14  [key=0, style=bold, color=blue];
m15_16 -> m15_17  [key=0, style=solid, color=green];
m15_16 -> m15_19  [key=2, style=dotted, color=green];
m15_16 -> m15_20  [key=2, style=dotted, color=green];
m15_16 -> m15_5  [key=2, style=dotted, color=green];
m15_16 -> m15_21  [key=1, style=dashed, color=green, label="lambda expression"];
m15_45 -> m15_46  [key=0, style=solid];
m15_45 -> m15_39  [key=2, style=dotted];
m15_45 -> m15_47  [key=2, style=dotted];
m15_45 -> m15_48  [key=2, style=dotted];
m15_45 -> m15_35  [key=2, style=dotted];
m15_41 -> m15_42  [key=0, style=solid];
m15_44 -> m15_45  [key=0, style=solid];
m15_42 -> m15_43  [key=0, style=solid];
m15_43 -> m15_41  [key=0, style=bold, color=blue];
m15_46 -> m15_44  [key=0, style=bold, color=blue];
m15_22 -> m15_23  [key=0, style=solid, color=red];
m15_22 -> m15_10  [key=2, style=dotted, color=green];
m15_22 -> m15_48  [key=2, style=dotted, color=green];
m15_22 -> m15_12  [key=2, style=dotted, color=green];
m15_22 -> m15_39  [key=2, style=dotted, color=green];
m15_22 -> m15_34  [key=2, style=dotted];
m15_22 -> m15_35  [key=2, style=dotted];
m15_23 -> m15_21  [key=0, style=bold, color=blue];
m15_23 -> m15_24  [key=0, style=solid, color=red];
m15_34 -> m15_49  [key=0, style=solid];
m15_49 -> m15_50  [key=0, style=solid];
m15_49 -> m15_51  [key=2, style=dotted];
m15_49 -> m15_52  [key=2, style=dotted];
m15_49 -> m15_39  [key=2, style=dotted];
m15_49 -> m15_48  [key=2, style=dotted];
m15_50 -> m15_34  [key=0, style=bold, color=blue];
m15_17 -> m15_18  [key=0, style=solid];
m15_17 -> m15_6  [key=2, style=dotted];
m15_17 -> m15_19  [key=0, style=solid];
m15_17 -> m15_28  [key=2, style=dotted];
m15_18 -> m15_14  [key=0, style=bold, color=blue];
m15_18 -> m15_19  [key=0, style=solid];
m15_4 -> m15_0  [key=0, style=bold, color=blue];
m15_4 -> m15_17  [key=0, style=solid];
m15_4 -> m15_18  [key=0, style=bold, color=crimson];
m15_4 -> m15_22  [key=0, style=bold, color=crimson];
m15_4 -> m15_23  [key=0, style=bold, color=red];
m15_4 -> m15_24  [key=0, style=bold, color=crimson];
m15_4 -> m15_26  [key=0, style=bold, color=crimson];
m15_4 -> m15_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m15_4 -> m15_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m15_4 -> m15_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m15_24 -> m15_25  [key=0, style=solid];
m15_24 -> m15_36  [key=2, style=dotted];
m15_24 -> m15_37  [key=2, style=dotted];
m15_24 -> m15_38  [key=2, style=dotted];
m15_24 -> m15_39  [key=2, style=dotted];
m15_24 -> m15_35  [key=2, style=dotted];
m15_24 -> m15_32  [key=2, style=dotted];
m15_24 -> m15_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_26 -> m15_25  [key=0, style=solid];
m15_25 -> m15_26  [key=0, style=solid];
m15_25 -> m15_27  [key=0, style=solid];
m15_25 -> m15_40  [key=2, style=dotted];
m15_25 -> m15_31  [key=2, style=dotted];
m15_25 -> m15_4  [key=2, style=dotted];
m15_27 -> m15_4  [key=0, style=bold, color=blue];
m15_53 -> m15_45  [key=1, style=dashed, color=darkseagreen4, label=pt];
m16_21 -> m16_22  [key=0, style=solid];
m16_22 -> m16_23  [key=0, style=solid, color=red];
m16_22 -> m16_6  [key=2, style=dotted];
m16_22 -> m16_7  [key=2, style=dotted];
m16_22 -> m16_25  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m16_23 -> m16_24  [key=0, style=solid, color=red];
m16_23 -> m16_8  [key=2, style=dotted, color=red];
m16_23 -> m16_9  [key=2, style=dotted, color=red];
m16_23 -> m16_10  [key=2, style=dotted, color=red];
m16_23 -> m16_28  [key=1, style=dashed, color=red, label=specs];
m16_25 -> m16_26  [key=0, style=solid];
m16_25 -> m16_15  [key=2, style=dotted];
m16_25 -> m16_16  [key=2, style=dotted];
m16_24 -> m16_25  [key=0, style=solid];
m16_24 -> m16_11  [key=2, style=dotted];
m16_24 -> m16_6  [key=2, style=dotted];
m16_24 -> m16_7  [key=2, style=dotted];
m16_24 -> m16_12  [key=2, style=dotted];
m16_24 -> m16_13  [key=2, style=dotted];
m16_24 -> m16_14  [key=2, style=dotted];
m16_24 -> m16_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_26 -> m16_21  [key=0, style=bold, color=blue];
m16_0 -> m16_1  [key=0, style=solid];
m16_1 -> m16_2  [key=0, style=solid, color=red];
m16_1 -> m16_6  [key=2, style=dotted];
m16_1 -> m16_7  [key=2, style=dotted];
m16_1 -> m16_4  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m16_2 -> m16_3  [key=0, style=solid, color=red];
m16_2 -> m16_8  [key=2, style=dotted, color=red];
m16_2 -> m16_9  [key=2, style=dotted, color=red];
m16_2 -> m16_10  [key=2, style=dotted, color=red];
m16_2 -> m16_18  [key=1, style=dashed, color=red, label=specs];
m16_4 -> m16_5  [key=0, style=solid];
m16_4 -> m16_15  [key=2, style=dotted];
m16_4 -> m16_16  [key=2, style=dotted];
m16_3 -> m16_4  [key=0, style=solid];
m16_3 -> m16_11  [key=2, style=dotted];
m16_3 -> m16_6  [key=2, style=dotted];
m16_3 -> m16_7  [key=2, style=dotted];
m16_3 -> m16_12  [key=2, style=dotted];
m16_3 -> m16_13  [key=2, style=dotted];
m16_3 -> m16_14  [key=2, style=dotted];
m16_3 -> m16_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_5 -> m16_0  [key=0, style=bold, color=blue];
m16_27 -> m16_28  [key=0, style=solid];
m16_18 -> m16_19  [key=0, style=solid];
m16_18 -> m16_20  [key=2, style=dotted];
m16_17 -> m16_18  [key=0, style=solid];
m16_19 -> m16_17  [key=0, style=bold, color=blue];
m16_28 -> m16_29  [key=0, style=solid];
m16_28 -> m16_20  [key=2, style=dotted];
m16_29 -> m16_27  [key=0, style=bold, color=blue];
m16_30 -> m16_18  [key=1, style=dashed, color=darkseagreen4, label=specs];
m16_31 -> m16_28  [key=1, style=dashed, color=darkseagreen4, label=specs];
m18_4 -> m18_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TargetType"];
m18_4 -> m18_5  [key=0, style=solid];
m18_7 -> m18_0  [key=2, style=dotted];
m18_7 -> m18_8  [key=0, style=solid];
m18_5 -> m18_7  [key=0, style=solid];
m18_5 -> m18_6  [key=0, style=solid];
m18_6 -> m18_8  [key=0, style=solid];
m18_6 -> m18_9  [key=2, style=dotted];
m18_8 -> m18_4  [key=0, style=bold, color=blue];
m18_0 -> m18_1  [key=0, style=solid, color=green];
m18_0 -> m18_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<int>"];
m18_1 -> m18_2  [key=0, style=solid, color=green];
m18_2 -> m18_3  [key=0, style=solid];
m18_3 -> m18_0  [key=0, style=bold, color=blue];
m18_10 -> m18_1  [key=1, style=dashed, color=green, label="CommandLine.Core.TypeDescriptor"];
m18_10 -> m18_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TypeDescriptor"];
m19_0 -> m19_1  [key=0, style=solid, color=green];
m19_0 -> m19_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m19_1 -> m19_2  [key=0, style=solid, color=green];
m19_1 -> m19_4  [key=2, style=dotted, color=green];
m19_1 -> m19_5  [key=2, style=dotted, color=green];
m19_1 -> m19_6  [key=2, style=dotted, color=green];
m19_1 -> m19_7  [key=1, style=dashed, color=green, label="lambda expression"];
m19_1 -> m19_11  [key=1, style=dashed, color=green, label="lambda expression"];
m19_2 -> m19_3  [key=0, style=solid];
m19_3 -> m19_0  [key=0, style=bold, color=blue];
m19_11 -> m19_12  [key=0, style=solid, color=green];
m19_7 -> m19_8  [key=0, style=solid];
m19_12 -> m19_13  [key=0, style=solid, color=green];
m19_12 -> m19_14  [key=2, style=dotted, color=green];
m19_13 -> m19_11  [key=0, style=bold, color=blue];
m19_8 -> m19_9  [key=0, style=solid];
m19_8 -> m19_10  [key=2, style=dotted];
m19_9 -> m19_7  [key=0, style=bold, color=blue];
m19_15 -> m19_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m19_16 -> m19_8  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m21_0 -> m21_1  [key=0, style=solid];
m21_1 -> m21_2  [key=0, style=solid];
m21_2 -> m21_0  [key=0, style=bold, color=blue];
m21_3 -> m21_4  [key=0, style=solid, color=green];
m21_4 -> m21_5  [key=0, style=solid, color=green];
m21_4 -> m21_0  [key=2, style=dotted, color=green];
m21_4 -> m21_6  [key=2, style=dotted, color=green];
m21_4 -> m21_7  [key=2, style=dotted, color=green];
m21_4 -> m21_8  [key=2, style=dotted, color=green];
m21_4 -> m21_9  [key=2, style=dotted, color=green];
m21_5 -> m21_3  [key=0, style=bold, color=blue];
m21_10 -> m21_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.ValueSpecification"];
}
