digraph  {
m0_38 [cluster="System.Type.GetVerbSpecification()", file="EnumerableExtensions.cs", label="Entry System.Type.GetVerbSpecification()", span="27-27"];
m0_46 [cluster="System.Text.StringBuilder.Append(char)", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
m0_124 [cluster="Unk.doubQt", file="EnumerableExtensions.cs", label="Entry Unk.doubQt", span=""];
m0_149 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", file="EnumerableExtensions.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="38-38"];
m0_4 [cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="61-61"];
m0_5 [cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()", color=red, community=0, file="EnumerableExtensions.cs", label="21: return new UnParserSettings { UseEqualToken = true };", span="63-63"];
m0_6 [cluster="CommandLine.UnParserSettings.WithUseEqualTokenOnly()", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserSettings.WithUseEqualTokenOnly()", span="61-61"];
m0_126 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="194-194"];
m0_127 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", color=red, community=0, file="EnumerableExtensions.cs", label="9: return (spec as OptionSpecification).ToMaybe()\r\n                .MapMaybe(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="196-197"];
m0_128 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="194-194"];
m0_88 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="162-162"];
m0_89 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="30: var builder = new StringBuilder()", span="164-164"];
m0_90 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="2: spec.TargetType", span="165-165"];
m0_92 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="2: builder.Append(FormatWithQuotesIfString(value))", span="168-168"];
m0_94 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="34: var sep = spec.SeperatorOrSpace()", span="171-171"];
m0_96 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="23: var e = ((IEnumerable)value).GetEnumerator()", span="174-174"];
m0_98 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="14: builder.Append(format(e.Current)).Append(sep)", span="176-176"];
m0_99 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="26: builder.TrimEndIfMatch(' ')", span="177-177"];
m0_100 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="30: return builder.ToString();", span="180-180"];
m0_91 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="30: TargetType.Scalar", span="167-167"];
m0_93 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="16: TargetType.Sequence", span="170-170"];
m0_95 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="34: Func<object, object> format = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="172-173"];
m0_97 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", color=red, community=0, file="EnumerableExtensions.cs", label="23: e.MoveNext()", span="175-175"];
m0_101 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="162-162"];
m0_35 [cluster="System.Action<T>.Invoke(T)", file="EnumerableExtensions.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m0_105 [cluster="System.Collections.IEnumerable.GetEnumerator()", file="EnumerableExtensions.cs", label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0"];
m0_45 [cluster="Unk.Any", file="EnumerableExtensions.cs", label="Entry Unk.Any", span=""];
m0_41 [cluster="object.IsEmpty()", file="EnumerableExtensions.cs", label="Entry object.IsEmpty()", span="233-233"];
m0_107 [cluster="System.Func<T, TResult>.Invoke(T)", file="EnumerableExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_137 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="208-208"];
m0_138 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", color=red, community=0, file="EnumerableExtensions.cs", label="5: var longName =\r\n                optionSpec.LongName.Length > 0\r\n                && !settings.PreferShortName", span="210-212"];
m0_139 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", color=red, community=0, file="EnumerableExtensions.cs", label="31: return\r\n                new StringBuilder(longName\r\n                    ? ''--''.JoinTo(optionSpec.LongName)\r\n                    : ''-''.JoinTo(optionSpec.ShortName))\r\n                        .AppendIf(longName && settings.UseEqualToken && optionSpec.ConversionType != typeof(bool), ''='', '' '')\r\n                    .ToString();", span="214-219"];
m0_140 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification, CommandLine.UnParserSettings)", span="208-208"];
m0_151 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="233-233"];
m0_152 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="18: value == null", span="235-235"];
m0_154 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="32: ReflectionHelper.IsFSharpOptionType(value.GetType()) && !FSharpOptionHelper.IsSome(value)", span="236-236"];
m0_156 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="18: value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="237-237"];
m0_158 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="18: value is string && ((string)value).Length == 0", span="238-238"];
m0_160 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="18: value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="239-239"];
m0_153 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="24: return true;", span="235-235"];
m0_155 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="24: return true;", span="236-236"];
m0_157 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="24: return true;", span="237-237"];
m0_159 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="24: return true;", span="238-238"];
m0_161 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="24: return true;", span="239-239"];
m0_162 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", color=red, community=0, file="EnumerableExtensions.cs", label="24: return false;", span="240-240"];
m0_163 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="233-233"];
m0_43 [cluster="Unk.Where", file="EnumerableExtensions.cs", label="Entry Unk.Where", span=""];
m0_142 [cluster="System.Text.StringBuilder.AppendIf(bool, string, string)", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="34-34"];
m0_52 [cluster="Unk.TrimEndIfMatchWhen", file="EnumerableExtensions.cs", label="Entry Unk.TrimEndIfMatchWhen", span=""];
m0_120 [cluster="string.Replace(string, string)", file="EnumerableExtensions.cs", label="Entry string.Replace(string, string)", span="0-0"];
m0_40 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="EnumerableExtensions.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m0_72 [cluster="Unk.Contains", file="EnumerableExtensions.cs", label="Entry Unk.Contains", span=""];
m0_115 [cluster="T.ToMaybe<T>()", file="EnumerableExtensions.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m0_119 [cluster="string.Contains(string)", file="EnumerableExtensions.cs", label="Entry string.Contains(string)", span="0-0"];
m0_36 [cluster="object.GetType()", file="EnumerableExtensions.cs", label="Entry object.GetType()", span="0-0"];
m0_129 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="197-197"];
m0_11 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="83-83"];
m0_12 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="83-83"];
m0_61 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="26: new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) }", span="112-113"];
m0_80 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="1: builder\r\n                        .TrimEndIfMatchWhen(builder.TrailingSpaces() > 1, ' ')\r\n                        .Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings))\r\n                        .Append(' ')", span="148-151"];
m0_57 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="20: builder.Append(verb.Name).Append(' ')", span="107-107"];
m0_56 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="107-107"];
m0_60 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="112-113"];
m0_66 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="118-118"];
m0_70 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="27: !shortSwitches.Contains(info)", span="132-132"];
m0_69 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="132-132"];
m0_73 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="135-135"];
m0_76 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="142-142"];
m0_85 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="14: builder.Append(FormatValue(val.Specification, val.Value)).Append(' ')", span="156-156"];
m0_79 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="147-151"];
m0_84 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="156-156"];
m0_58 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="107-107"];
m0_62 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="112-113"];
m0_67 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="31: i.Specification.Tag == SpecificationType.Option", span="118-118"];
m0_68 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="118-118"];
m0_71 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="132-132"];
m0_74 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="35: i.Specification.Tag == SpecificationType.Value", span="135-135"];
m0_75 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="135-135"];
m0_77 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="21: ((OptionSpecification)info.Specification).ShortName", span="142-142"];
m0_78 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="142-142"];
m0_81 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="147-151"];
m0_86 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="156-156"];
m0_110 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="28: sep == ' ' ? FormatWithQuotesIfString(v) : v", span="173-173"];
m0_109 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="172-173"];
m0_111 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="172-173"];
m0_117 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="18: v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="186-186"];
m0_122 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="20: v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="190-191"];
m0_121 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="190-191"];
m0_116 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Entry lambda expression", span="185-186"];
m0_118 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="185-186"];
m0_123 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="190-191"];
m0_130 [cluster="lambda expression", color=red, community=0, file="EnumerableExtensions.cs", label="9: o.Separator != '\0' ? o.Separator : ' '", span="197-197"];
m0_131 [cluster="lambda expression", file="EnumerableExtensions.cs", label="Exit lambda expression", span="197-197"];
m0_136 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
m0_55 [cluster="string.TrimEnd(params char[])", file="EnumerableExtensions.cs", label="Entry string.TrimEnd(params char[])", span="0-0"];
m0_108 [cluster="System.Text.StringBuilder.TrimEndIfMatch(char)", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="85-85"];
m0_148 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="EnumerableExtensions.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35"];
m0_51 [cluster="System.Text.StringBuilder.TrailingSpaces()", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.TrailingSpaces()", span="101-101"];
m0_59 [cluster="Unk.Append", file="EnumerableExtensions.cs", label="Entry Unk.Append", span=""];
m0_47 [cluster="Unk.Select", file="EnumerableExtensions.cs", label="Entry Unk.Select", span=""];
m0_164 [cluster="System.Type.GetDefaultValue()", file="EnumerableExtensions.cs", label="Entry System.Type.GetDefaultValue()", span="130-130"];
m0_87 [cluster="Unk.FormatValue", file="EnumerableExtensions.cs", label="Entry Unk.FormatValue", span=""];
m0_42 [cluster="Unk.Memorize", file="EnumerableExtensions.cs", label="Entry Unk.Memorize", span=""];
m0_83 [cluster="Unk.FormatOption", file="EnumerableExtensions.cs", label="Entry Unk.FormatOption", span=""];
m0_44 [cluster="Unk.UniqueName", file="EnumerableExtensions.cs", label="Entry Unk.UniqueName", span=""];
m0_150 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", file="EnumerableExtensions.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="30-30"];
m0_125 [cluster="string.JoinTo(params string[])", file="EnumerableExtensions.cs", label="Entry string.JoinTo(params string[])", span="55-55"];
m0_65 [cluster="object.NormalizeValue()", file="EnumerableExtensions.cs", label="Entry object.NormalizeValue()", span="222-222"];
m0_54 [cluster="System.Text.StringBuilder.ToString()", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m0_104 [cluster="CommandLine.Core.Specification.SeperatorOrSpace()", file="EnumerableExtensions.cs", label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="194-194"];
m0_50 [cluster="System.Text.StringBuilder.Append(string)", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m0_135 [cluster="CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", file="EnumerableExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.FormatName(CommandLine.UnParserSettings)", span="208-208"];
m0_102 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="183-183"];
m0_112 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", color=red, community=0, file="EnumerableExtensions.cs", label="5: Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="185-186"];
m0_113 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", color=red, community=0, file="EnumerableExtensions.cs", label="23: return (value as string)\r\n                .ToMaybe()\r\n                .MapMaybe(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="188-191"];
m0_114 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="183-183"];
m0_0 [cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="52-52"];
m0_1 [cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()", color=red, community=0, file="EnumerableExtensions.cs", label="11: return new UnParserSettings { GroupSwitches = true };", span="54-54"];
m0_2 [cluster="CommandLine.UnParserSettings.WithGroupSwitchesOnly()", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserSettings.WithGroupSwitchesOnly()", span="52-52"];
m0_53 [cluster="Unk.ForEach", file="EnumerableExtensions.cs", label="Entry Unk.ForEach", span=""];
m0_103 [cluster="System.Text.StringBuilder.Append(object)", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.Append(object)", span="0-0"];
m0_49 [cluster="Unk.Join", file="EnumerableExtensions.cs", label="Entry Unk.Join", span=""];
m0_10 [cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", file="EnumerableExtensions.cs", label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="95-95"];
m0_141 [cluster="System.Text.StringBuilder.StringBuilder(string)", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
m0_37 [cluster="System.Text.StringBuilder.StringBuilder()", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m0_3 [cluster="CommandLine.UnParserSettings.UnParserSettings()", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="15-15"];
m0_165 [cluster="object.Equals(object)", file="EnumerableExtensions.cs", label="Entry object.Equals(object)", span="0-0"];
m0_106 [cluster="System.Collections.IEnumerator.MoveNext()", file="EnumerableExtensions.cs", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
m0_82 [cluster="System.Text.StringBuilder.TrimEndIfMatchWhen(bool, char)", file="EnumerableExtensions.cs", label="Entry System.Text.StringBuilder.TrimEndIfMatchWhen(bool, char)", span="94-94"];
m0_13 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="95-95"];
m0_14 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="31: options == null", span="97-97"];
m0_17 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="12: configuration(settings)", span="100-100"];
m0_19 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="26: var type = options.GetType()", span="103-103"];
m0_22 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="7: var specs =\r\n                (from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi),\r\n                            Value = pi.GetValue(options, null).NormalizeValue(), PropertyValue = pi.GetValue(options, null) })\r\n                where !info.PropertyValue.IsEmpty()\r\n                select info)\r\n                    .Memorize()", span="109-116"];
m0_15 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="23: throw new ArgumentNullException(''options'');", span="97-97"];
m0_16 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="7: var settings = new UnParserSettings()", span="99-99"];
m0_18 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="20: settings.Consumed = true", span="101-101"];
m0_25 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="27: var optSpecs = settings.GroupSwitches\r\n                ? allOptSpecs.Where(info => !shortSwitches.Contains(info))\r\n                : allOptSpecs", span="131-133"];
m0_27 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="2: builder = settings.GroupSwitches && shortSwitches.Any()\r\n                ? builder.Append('-').Append(string.Join(string.Empty, shortSwitches.Select(\r\n                    info => ((OptionSpecification)info.Specification).ShortName).ToArray())).Append(' ')\r\n                : builder", span="140-143"];
m0_29 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="2: optSpecs.ForEach(\r\n                opt =>\r\n                    builder\r\n                        .TrimEndIfMatchWhen(builder.TrailingSpaces() > 1, ' ')\r\n                        .Append(FormatOption((OptionSpecification)opt.Specification, opt.Value, settings))\r\n                        .Append(' ')\r\n                )", span="146-152"];
m0_20 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="5: var builder = new StringBuilder()", span="104-104"];
m0_21 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="7: type.GetVerbSpecification()\r\n                .MapMaybe(verb => builder.Append(verb.Name).Append(' '), builder)", span="106-107"];
m0_23 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="31: var allOptSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Option)\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType != TargetType.Switch || (o.TargetType == TargetType.Switch && ((bool)info.Value))\r\n                orderby o.UniqueName()\r\n                select info", span="118-122"];
m0_26 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="35: var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="135-138"];
m0_24 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="27: var shortSwitches = from info in allOptSpecs\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType == TargetType.Switch\r\n                where o.ShortName.Length > 0\r\n                orderby o.UniqueName()\r\n                select info", span="124-129"];
m0_28 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="14: builder\r\n                .TrimEndIfMatchWhen(!optSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="144-145"];
m0_30 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="14: builder\r\n                .TrimEndIfMatchWhen(!valSpecs.Any() || builder.TrailingSpaces() > 1, ' ')", span="153-154"];
m0_31 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="2: valSpecs.ForEach(\r\n                val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="155-156"];
m0_32 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", color=red, community=0, file="EnumerableExtensions.cs", label="23: return builder\r\n                .ToString().TrimEnd(' ');", span="158-159"];
m0_33 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T, System.Action<CommandLine.UnParserSettings>)", span="95-95"];
m0_39 [cluster="Unk.MapMaybe", file="EnumerableExtensions.cs", label="Entry Unk.MapMaybe", span=""];
m0_48 [cluster="Unk.ToArray", file="EnumerableExtensions.cs", label="Entry Unk.ToArray", span=""];
m0_132 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="200-200"];
m0_133 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", color=red, community=0, file="EnumerableExtensions.cs", label="8: return new StringBuilder()\r\n                    .Append(spec.FormatName(settings))\r\n                    .AppendWhen(spec.TargetType != TargetType.Switch, FormatValue(spec, value))\r\n                .ToString();", span="202-205"];
m0_134 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object, CommandLine.UnParserSettings)", span="200-200"];
m0_63 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="EnumerableExtensions.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="103-103"];
m0_34 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="EnumerableExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_7 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="81-81"];
m0_8 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", color=red, community=0, file="EnumerableExtensions.cs", label="19: return parser.FormatCommandLine(options, config => {});", span="83-83"];
m0_9 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="81-81"];
m0_64 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="EnumerableExtensions.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
m0_143 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="EnumerableExtensions.cs", label="Entry CommandLine.UnParserExtensions.NormalizeValue(object)", span="222-222"];
m0_144 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", color=red, community=0, file="EnumerableExtensions.cs", label="8: value != null\r\n                && ReflectionHelper.IsFSharpOptionType(value.GetType())\r\n                && FSharpOptionHelper.IsSome(value)", span="224-226"];
m0_145 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", color=red, community=0, file="EnumerableExtensions.cs", label="5: return FSharpOptionHelper.ValueOf(value);", span="228-228"];
m0_146 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", color=red, community=0, file="EnumerableExtensions.cs", label="25: return value;", span="230-230"];
m0_147 [cluster="CommandLine.UnParserExtensions.NormalizeValue(object)", file="EnumerableExtensions.cs", label="Exit CommandLine.UnParserExtensions.NormalizeValue(object)", span="222-222"];
m0_166 [file="EnumerableExtensions.cs", label=builder, span=""];
m0_167 [file="EnumerableExtensions.cs", label=T, span=""];
m0_168 [file="EnumerableExtensions.cs", label=shortSwitches, span=""];
m0_169 [file="EnumerableExtensions.cs", label=settings, span=""];
m0_170 [file="EnumerableExtensions.cs", label=sep, span=""];
m0_171 [file="EnumerableExtensions.cs", label=doubQt, span=""];
m1_30 [cluster="Unk.WithValue", file="ErrorHandling.cs", label="Entry Unk.WithValue", span=""];
m1_4 [cluster="Unk.Select", file="ErrorHandling.cs", label="Entry Unk.Select", span=""];
m1_18 [cluster="string.MatchName(string, string, System.StringComparer)", file="ErrorHandling.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m1_24 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="ErrorHandling.cs", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
m1_23 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ErrorHandling.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m1_11 [cluster="Unk.ToMaybe", file="ErrorHandling.cs", label="Entry Unk.ToMaybe", span=""];
m1_10 [cluster="Unk.FirstOrDefault", file="ErrorHandling.cs", label="Entry Unk.FirstOrDefault", span=""];
m1_25 [cluster="CSharpx.Maybe.Just<T>(T)", file="ErrorHandling.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m1_13 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ErrorHandling.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m1_29 [cluster="Unk.Just", file="ErrorHandling.cs", label="Entry Unk.Just", span=""];
m1_26 [cluster="lambda expression", file="ErrorHandling.cs", label="Entry lambda expression", span="28-31"];
m1_8 [cluster="lambda expression", color=red, community=0, file="ErrorHandling.cs", label="10: options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .MapMaybeOrDefault(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapMaybeOrDefault(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification())))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))", span="22-35"];
m1_16 [cluster="lambda expression", color=red, community=0, file="ErrorHandling.cs", label="10: s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", span="24-24"];
m1_20 [cluster="lambda expression", color=red, community=0, file="ErrorHandling.cs", label="34: converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapMaybeOrDefault(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification()))))", span="27-34"];
m1_7 [cluster="lambda expression", file="ErrorHandling.cs", label="Entry lambda expression", span="21-35"];
m1_31 [cluster="lambda expression", file="ErrorHandling.cs", label="Entry lambda expression", span="38-38"];
m1_34 [cluster="lambda expression", file="ErrorHandling.cs", label="Entry lambda expression", span="39-39"];
m1_37 [cluster="lambda expression", file="ErrorHandling.cs", label="Entry lambda expression", span="39-39"];
m1_27 [cluster="lambda expression", color=red, community=0, file="ErrorHandling.cs", label="18: Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>())", span="29-31"];
m1_9 [cluster="lambda expression", file="ErrorHandling.cs", label="Exit lambda expression", span="21-35"];
m1_15 [cluster="lambda expression", file="ErrorHandling.cs", label="Entry lambda expression", span="23-24"];
m1_19 [cluster="lambda expression", file="ErrorHandling.cs", label="Entry lambda expression", span="26-34"];
m1_17 [cluster="lambda expression", file="ErrorHandling.cs", label="Exit lambda expression", span="23-24"];
m1_21 [cluster="lambda expression", file="ErrorHandling.cs", label="Exit lambda expression", span="26-34"];
m1_28 [cluster="lambda expression", file="ErrorHandling.cs", label="Exit lambda expression", span="28-31"];
m1_32 [cluster="lambda expression", color=red, community=0, file="ErrorHandling.cs", label="6: se.Item1", span="38-38"];
m1_33 [cluster="lambda expression", file="ErrorHandling.cs", label="Exit lambda expression", span="38-38"];
m1_35 [cluster="lambda expression", color=red, community=0, file="ErrorHandling.cs", label="15: se.Item2", span="39-39"];
m1_36 [cluster="lambda expression", file="ErrorHandling.cs", label="Exit lambda expression", span="39-39"];
m1_38 [cluster="lambda expression", color=red, community=0, file="ErrorHandling.cs", label="13: se.Value", span="39-39"];
m1_39 [cluster="lambda expression", file="ErrorHandling.cs", label="Exit lambda expression", span="39-39"];
m1_22 [cluster="Unk.converter", file="ErrorHandling.cs", label="Entry Unk.converter", span=""];
m1_5 [cluster="Unk.>", file="ErrorHandling.cs", label="Entry Unk.>", span=""];
m1_12 [cluster="CSharpx.Maybe.Nothing<T>()", file="ErrorHandling.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_6 [cluster="Unk.Succeed", file="ErrorHandling.cs", label="Entry Unk.Succeed", span=""];
m1_14 [cluster="Unk.MapMaybeOrDefault", file="ErrorHandling.cs", label="Entry Unk.MapMaybeOrDefault", span=""];
m1_0 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="ErrorHandling.cs", label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
m1_1 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", color=red, community=0, file="ErrorHandling.cs", label="8: var sequencesAndErrors = propertyTuples\r\n                .Select(pt =>\r\n                    options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .MapMaybeOrDefault(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapMaybeOrDefault(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification())))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))\r\n                )", span="20-36"];
m1_2 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", color=red, community=0, file="ErrorHandling.cs", label="1: return Result.Succeed(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="37-39"];
m1_3 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="ErrorHandling.cs", label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
m1_40 [file="ErrorHandling.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
m1_41 [file="ErrorHandling.cs", label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", span=""];
m1_42 [file="ErrorHandling.cs", label="System.StringComparer", span=""];
m1_43 [file="ErrorHandling.cs", label="CommandLine.Core.SpecificationProperty", span=""];
m2_4 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Maybe.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m2_0 [cluster="CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="Maybe.cs", label="Entry CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m2_1 [cluster="CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", color=red, community=0, file="Maybe.cs", label="16: return preprocessorLookup.TryHead().MapMaybe(\r\n                func =>\r\n                    {\r\n                        var errors = func(arguments);\r\n                        return errors.Any()\r\n                            ? errors\r\n                            : arguments.Preprocess(preprocessorLookup.TailNoFail());\r\n                    },\r\n                Enumerable.Empty<Error>());", span="17-25"];
m2_2 [cluster="CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="Maybe.cs", label="Exit CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m2_5 [cluster="Unk.MapMaybe", file="Maybe.cs", label="Entry Unk.MapMaybe", span=""];
m2_6 [cluster="lambda expression", file="Maybe.cs", label="Entry lambda expression", span="18-24"];
m2_7 [cluster="lambda expression", color=red, community=0, file="Maybe.cs", label="24: var errors = func(arguments)", span="20-20"];
m2_8 [cluster="lambda expression", color=red, community=0, file="Maybe.cs", label="7: return errors.Any()\r\n                            ? errors\r\n                            : arguments.Preprocess(preprocessorLookup.TailNoFail());", span="21-23"];
m2_9 [cluster="lambda expression", file="Maybe.cs", label="Exit lambda expression", span="18-24"];
m2_10 [cluster="Unk.func", file="Maybe.cs", label="Entry Unk.func", span=""];
m2_13 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="Maybe.cs", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m2_11 [cluster="Unk.Any", file="Maybe.cs", label="Entry Unk.Any", span=""];
m2_3 [cluster="System.Collections.Generic.IEnumerable<T>.TryHead<T>()", file="Maybe.cs", label="Entry System.Collections.Generic.IEnumerable<T>.TryHead<T>()", span="318-318"];
m2_12 [cluster="System.Collections.Generic.IEnumerable<T>.TailNoFail<T>()", file="Maybe.cs", label="Entry System.Collections.Generic.IEnumerable<T>.TailNoFail<T>()", span="361-361"];
m2_14 [file="Maybe.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m2_15 [file="Maybe.cs", label="System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>", span=""];
m3_86 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="UnParserExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m3_17 [cluster="System.Type.GetVerbSpecification()", file="UnParserExtensions.cs", label="Entry System.Type.GetVerbSpecification()", span="27-27"];
m3_31 [cluster="System.Text.StringBuilder.Append(char)", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
m3_18 [cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="UnParserExtensions.cs", label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126"];
m3_88 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="UnParserExtensions.cs", label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="90-90"];
m3_89 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="UnParserExtensions.cs", label="return (spec as OptionSpecification).ToMaybe()\r\n                .Return(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="92-93"];
m3_90 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="UnParserExtensions.cs", label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="90-90"];
m3_51 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="58-58"];
m3_52 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="var builder = new StringBuilder()", span="60-60"];
m3_53 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="spec.TargetType", span="61-61"];
m3_55 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="builder.Append(FormatWithQuotesIfString(value))", span="64-64"];
m3_57 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="var sep = spec.SeperatorOrSpace()", span="67-67"];
m3_59 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="var e = ((IEnumerable)value).GetEnumerator()", span="70-70"];
m3_61 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="builder.Append(fmtWithQuotesIfStr(e.Current)).Append(sep)", span="72-72"];
m3_62 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="builder.TrimEndIfMatch(' ')", span="73-73"];
m3_63 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="return builder.ToString();", span="76-76"];
m3_54 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="TargetType.Scalar", span="63-63"];
m3_56 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="TargetType.Sequence", span="66-66"];
m3_58 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="Func<object, object> fmtWithQuotesIfStr = v\r\n                        => sep == ' ' ? FormatWithQuotesIfString(v) : v", span="68-69"];
m3_60 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="e.MoveNext()", span="71-71"];
m3_64 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="UnParserExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="58-58"];
m3_68 [cluster="System.Collections.IEnumerable.GetEnumerator()", file="UnParserExtensions.cs", label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0"];
m3_20 [cluster="object.IsEmpty()", file="UnParserExtensions.cs", label="Entry object.IsEmpty()", span="111-111"];
m3_70 [cluster="System.Func<T, TResult>.Invoke(T)", file="UnParserExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m3_102 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="Entry CommandLine.UnParserExtensions.IsEmpty(object)", span="111-111"];
m3_103 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="value == null", span="113-113"];
m3_105 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="value is ValueType && value.Equals(value.GetType().GetDefaultValue())", span="114-114"];
m3_107 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="value is string && ((string)value).Length == 0", span="115-115"];
m3_109 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="value is IEnumerable && !((IEnumerable)value).GetEnumerator().MoveNext()", span="116-116"];
m3_104 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="return true;", span="113-113"];
m3_106 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="return true;", span="114-114"];
m3_108 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="return true;", span="115-115"];
m3_110 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="return true;", span="116-116"];
m3_111 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="return false;", span="117-117"];
m3_112 [cluster="CommandLine.UnParserExtensions.IsEmpty(object)", file="UnParserExtensions.cs", label="Exit CommandLine.UnParserExtensions.IsEmpty(object)", span="111-111"];
m3_21 [cluster="Unk.Where", file="UnParserExtensions.cs", label="Entry Unk.Where", span=""];
m3_82 [cluster="string.Replace(string, string)", file="UnParserExtensions.cs", label="Entry string.Replace(string, string)", span="0-0"];
m3_94 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object)", file="UnParserExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object)", span="96-96"];
m3_95 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object)", file="UnParserExtensions.cs", label="return new StringBuilder()\r\n                    .Append(spec.FormatName())\r\n                    .Append(' ')\r\n                    .AppendWhen(spec.TargetType != TargetType.Switch, FormatValue(spec, value))\r\n                .ToString();", span="98-102"];
m3_96 [cluster="CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object)", file="UnParserExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatOption(CommandLine.Core.OptionSpecification, object)", span="96-96"];
m3_19 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="UnParserExtensions.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m3_77 [cluster="T.ToMaybe<T>()", file="UnParserExtensions.cs", label="Entry T.ToMaybe<T>()", span="105-105"];
m3_81 [cluster="string.Contains(string)", file="UnParserExtensions.cs", label="Entry string.Contains(string)", span="0-0"];
m3_15 [cluster="object.GetType()", file="UnParserExtensions.cs", label="Entry object.GetType()", span="0-0"];
m3_91 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="93-93"];
m3_33 [cluster="lambda expression", file="UnParserExtensions.cs", label="new { Specification = Specification.FromProperty(pi), Value = pi.GetValue(options, null) }", span="37-37"];
m3_28 [cluster="lambda expression", file="UnParserExtensions.cs", label="builder.Append(verb.Name).Append(' ')", span="32-32"];
m3_44 [cluster="lambda expression", file="UnParserExtensions.cs", label="builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value)).Append(' ')", span="50-50"];
m3_48 [cluster="lambda expression", file="UnParserExtensions.cs", label="builder.Append(FormatValue(val.Specification, val.Value)).Append(' ')", span="52-52"];
m3_27 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="32-32"];
m3_32 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="37-37"];
m3_37 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="40-40"];
m3_40 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="45-45"];
m3_43 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="50-50"];
m3_47 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="52-52"];
m3_29 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="32-32"];
m3_34 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="37-37"];
m3_38 [cluster="lambda expression", file="UnParserExtensions.cs", label="i.Specification.Tag == SpecificationType.Option", span="40-40"];
m3_39 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="40-40"];
m3_41 [cluster="lambda expression", file="UnParserExtensions.cs", label="i.Specification.Tag == SpecificationType.Value", span="45-45"];
m3_42 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="45-45"];
m3_45 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="50-50"];
m3_49 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="52-52"];
m3_72 [cluster="lambda expression", file="UnParserExtensions.cs", label="sep == ' ' ? FormatWithQuotesIfString(v) : v", span="69-69"];
m3_71 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="68-69"];
m3_73 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="68-69"];
m3_79 [cluster="lambda expression", file="UnParserExtensions.cs", label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="82-82"];
m3_84 [cluster="lambda expression", file="UnParserExtensions.cs", label="v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="86-87"];
m3_83 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="86-87"];
m3_78 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="81-82"];
m3_80 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="81-82"];
m3_85 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="86-87"];
m3_92 [cluster="lambda expression", file="UnParserExtensions.cs", label="o.Separator != '\0' ? o.Separator : ' '", span="93-93"];
m3_93 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="93-93"];
m3_98 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
m3_26 [cluster="string.TrimEnd(params char[])", file="UnParserExtensions.cs", label="Entry string.TrimEnd(params char[])", span="0-0"];
m3_24 [cluster="System.Text.StringBuilder.TrimEndIfMatch(char)", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="87-87"];
m3_113 [cluster="System.Type.GetDefaultValue()", file="UnParserExtensions.cs", label="Entry System.Type.GetDefaultValue()", span="119-119"];
m3_50 [cluster="Unk.FormatValue", file="UnParserExtensions.cs", label="Entry Unk.FormatValue", span=""];
m3_46 [cluster="Unk.FormatOption", file="UnParserExtensions.cs", label="Entry Unk.FormatOption", span=""];
m3_22 [cluster="Unk.UniqueName", file="UnParserExtensions.cs", label="Entry Unk.UniqueName", span=""];
m3_87 [cluster="string.JoinTo(params string[])", file="UnParserExtensions.cs", label="Entry string.JoinTo(params string[])", span="45-45"];
m3_25 [cluster="System.Text.StringBuilder.ToString()", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m3_67 [cluster="CommandLine.Core.Specification.SeperatorOrSpace()", file="UnParserExtensions.cs", label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="90-90"];
m3_30 [cluster="System.Text.StringBuilder.Append(string)", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m3_97 [cluster="CommandLine.Core.OptionSpecification.FormatName()", file="UnParserExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.FormatName()", span="105-105"];
m3_65 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="UnParserExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="79-79"];
m3_74 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="UnParserExtensions.cs", label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="81-82"];
m3_75 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="UnParserExtensions.cs", label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') || v.Contains(''\'''')\r\n                    ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="84-87"];
m3_76 [cluster="CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", file="UnParserExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatWithQuotesIfString(object)", span="79-79"];
m3_23 [cluster="Unk.ForEach", file="UnParserExtensions.cs", label="Entry Unk.ForEach", span=""];
m3_66 [cluster="System.Text.StringBuilder.Append(object)", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.Append(object)", span="0-0"];
m3_16 [cluster="System.Text.StringBuilder.StringBuilder()", file="UnParserExtensions.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m3_114 [cluster="object.Equals(object)", file="UnParserExtensions.cs", label="Entry object.Equals(object)", span="0-0"];
m3_69 [cluster="System.Collections.IEnumerator.MoveNext()", file="UnParserExtensions.cs", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
m3_99 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", file="UnParserExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", span="105-105"];
m3_100 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", file="UnParserExtensions.cs", label="return optionSpec.LongName.Length > 0\r\n                ? ''--''.JoinTo(optionSpec.LongName) : ''-''.JoinTo(optionSpec.ShortName);", span="107-108"];
m3_101 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", file="UnParserExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", span="105-105"];
m3_35 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="UnParserExtensions.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
m3_14 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="UnParserExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_0 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="24-24"];
m3_1 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="options == null", span="26-26"];
m3_3 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="var type = options.GetType()", span="28-28"];
m3_6 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="var specs =\r\n                from info in\r\n                    type.GetSpecifications(\r\n                        pi => new { Specification = Specification.FromProperty(pi), Value = pi.GetValue(options, null) })\r\n                where !info.Value.IsEmpty()\r\n                select info", span="34-39"];
m3_2 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="throw new ArgumentNullException(''options'');", span="26-26"];
m3_4 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="var builder = new StringBuilder()", span="29-29"];
m3_5 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="type.GetVerbSpecification()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="31-32"];
m3_9 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="optSpecs.ForEach(opt => builder.Append(FormatOption((OptionSpecification)opt.Specification, opt.Value)).Append(' '))", span="50-50"];
m3_10 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="builder.TrimEndIfMatch(' ')", span="51-51"];
m3_11 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="valSpecs.ForEach(val => builder.Append(FormatValue(val.Specification, val.Value)).Append(' '))", span="52-52"];
m3_12 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="return builder\r\n                .ToString().TrimEnd(' ');", span="54-55"];
m3_7 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="var optSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Option)\r\n                let o = (OptionSpecification)info.Specification\r\n                where o.TargetType != TargetType.Switch || (o.TargetType == TargetType.Switch && ((bool)info.Value))\r\n                orderby o.UniqueName()\r\n                select info", span="40-44"];
m3_8 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="var valSpecs = from info in specs.Where(i => i.Specification.Tag == SpecificationType.Value)\r\n                let v = (ValueSpecification)info.Specification\r\n                orderby v.Index\r\n                select info", span="45-48"];
m3_13 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", file="UnParserExtensions.cs", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(CommandLine.Parser, T)", span="24-24"];
m3_36 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="UnParserExtensions.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
m3_115 [file="UnParserExtensions.cs", label=builder, span=""];
m3_116 [file="UnParserExtensions.cs", label=T, span=""];
m3_117 [file="UnParserExtensions.cs", label=sep, span=""];
m3_118 [file="UnParserExtensions.cs", label=doubQt, span=""];
m0_4 -> m0_5  [color=red, key=0, style=solid];
m0_5 -> m0_6  [color=red, key=0, style=solid];
m0_5 -> m0_3  [color=red, key=2, style=dotted];
m0_6 -> m0_4  [color=blue, key=0, style=bold];
m0_126 -> m0_127  [color=red, key=0, style=solid];
m0_127 -> m0_128  [color=red, key=0, style=solid];
m0_127 -> m0_115  [color=red, key=2, style=dotted];
m0_127 -> m0_39  [color=red, key=2, style=dotted];
m0_127 -> m0_129  [color=red, key=1, label="lambda expression", style=dashed];
m0_128 -> m0_126  [color=blue, key=0, style=bold];
m0_88 -> m0_89  [color=red, key=0, style=solid];
m0_88 -> m0_90  [color=red, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_88 -> m0_92  [color=red, key=1, label=object, style=dashed];
m0_88 -> m0_94  [color=red, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_88 -> m0_96  [color=red, key=1, label=object, style=dashed];
m0_89 -> m0_90  [color=red, key=0, style=solid];
m0_89 -> m0_37  [color=red, key=2, style=dotted];
m0_89 -> m0_92  [color=red, key=1, label=builder, style=dashed];
m0_89 -> m0_98  [color=red, key=1, label=builder, style=dashed];
m0_89 -> m0_99  [color=red, key=1, label=builder, style=dashed];
m0_89 -> m0_100  [color=red, key=1, label=builder, style=dashed];
m0_90 -> m0_91  [color=red, key=0, style=solid];
m0_90 -> m0_93  [color=red, key=0, style=solid];
m0_92 -> m0_100  [color=red, key=0, style=solid];
m0_92 -> m0_102  [color=red, key=2, style=dotted];
m0_92 -> m0_103  [color=red, key=2, style=dotted];
m0_94 -> m0_95  [color=red, key=0, style=solid];
m0_94 -> m0_104  [color=red, key=2, style=dotted];
m0_94 -> m0_110  [color=red, key=1, label=sep, style=dashed];
m0_94 -> m0_98  [color=red, key=1, label=sep, style=dashed];
m0_96 -> m0_97  [color=red, key=0, style=solid];
m0_96 -> m0_105  [color=red, key=2, style=dotted];
m0_96 -> m0_98  [color=red, key=1, label=e, style=dashed];
m0_98 -> m0_97  [color=red, key=0, style=solid];
m0_98 -> m0_107  [color=red, key=2, style=dotted];
m0_98 -> m0_103  [color=red, key=2, style=dotted];
m0_98 -> m0_46  [color=red, key=2, style=dotted];
m0_99 -> m0_100  [color=red, key=0, style=solid];
m0_99 -> m0_108  [color=red, key=2, style=dotted];
m0_100 -> m0_101  [color=red, key=0, style=solid];
m0_100 -> m0_54  [color=red, key=2, style=dotted];
m0_91 -> m0_92  [color=red, key=0, style=solid];
m0_93 -> m0_94  [color=red, key=0, style=solid];
m0_95 -> m0_96  [color=red, key=0, style=solid];
m0_95 -> m0_110  [color=red, key=1, label=object, style=dashed];
m0_95 -> m0_98  [color=red, key=1, label=format, style=dashed];
m0_97 -> m0_98  [color=red, key=0, style=solid];
m0_97 -> m0_99  [color=red, key=0, style=solid];
m0_97 -> m0_106  [color=red, key=2, style=dotted];
m0_101 -> m0_88  [color=blue, key=0, style=bold];
m0_137 -> m0_138  [color=red, key=0, style=solid];
m0_137 -> m0_139  [color=red, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m0_138 -> m0_139  [color=red, key=0, style=solid];
m0_139 -> m0_140  [color=red, key=0, style=solid];
m0_139 -> m0_141  [color=red, key=2, style=dotted];
m0_139 -> m0_125  [color=red, key=2, style=dotted];
m0_139 -> m0_142  [color=red, key=2, style=dotted];
m0_139 -> m0_54  [color=red, key=2, style=dotted];
m0_140 -> m0_137  [color=blue, key=0, style=bold];
m0_151 -> m0_152  [color=red, key=0, style=solid];
m0_151 -> m0_154  [color=red, key=1, label=object, style=dashed];
m0_151 -> m0_156  [color=red, key=1, label=object, style=dashed];
m0_151 -> m0_158  [color=red, key=1, label=object, style=dashed];
m0_151 -> m0_160  [color=red, key=1, label=object, style=dashed];
m0_152 -> m0_153  [color=red, key=0, style=solid];
m0_152 -> m0_154  [color=red, key=0, style=solid];
m0_154 -> m0_155  [color=red, key=0, style=solid];
m0_154 -> m0_156  [color=red, key=0, style=solid];
m0_154 -> m0_36  [color=red, key=2, style=dotted];
m0_154 -> m0_148  [color=red, key=2, style=dotted];
m0_154 -> m0_149  [color=red, key=2, style=dotted];
m0_156 -> m0_157  [color=red, key=0, style=solid];
m0_156 -> m0_158  [color=red, key=0, style=solid];
m0_156 -> m0_36  [color=red, key=2, style=dotted];
m0_156 -> m0_164  [color=red, key=2, style=dotted];
m0_156 -> m0_165  [color=red, key=2, style=dotted];
m0_158 -> m0_159  [color=red, key=0, style=solid];
m0_158 -> m0_160  [color=red, key=0, style=solid];
m0_160 -> m0_161  [color=red, key=0, style=solid];
m0_160 -> m0_162  [color=red, key=0, style=solid];
m0_160 -> m0_105  [color=red, key=2, style=dotted];
m0_160 -> m0_106  [color=red, key=2, style=dotted];
m0_153 -> m0_163  [color=red, key=0, style=solid];
m0_155 -> m0_163  [color=red, key=0, style=solid];
m0_157 -> m0_163  [color=red, key=0, style=solid];
m0_159 -> m0_163  [color=red, key=0, style=solid];
m0_161 -> m0_163  [color=red, key=0, style=solid];
m0_162 -> m0_163  [color=red, key=0, style=solid];
m0_163 -> m0_151  [color=blue, key=0, style=bold];
m0_129 -> m0_130  [color=red, key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_12 -> m0_11  [color=blue, key=0, style=bold];
m0_61 -> m0_62  [color=red, key=0, style=solid];
m0_61 -> m0_63  [color=red, key=2, style=dotted];
m0_61 -> m0_64  [color=red, key=2, style=dotted];
m0_61 -> m0_65  [color=red, key=2, style=dotted];
m0_80 -> m0_81  [color=red, key=0, style=solid];
m0_80 -> m0_51  [color=red, key=2, style=dotted];
m0_80 -> m0_82  [color=red, key=2, style=dotted];
m0_80 -> m0_83  [color=red, key=2, style=dotted];
m0_80 -> m0_50  [color=red, key=2, style=dotted];
m0_80 -> m0_46  [color=red, key=2, style=dotted];
m0_57 -> m0_58  [color=red, key=0, style=solid];
m0_57 -> m0_59  [color=red, key=2, style=dotted];
m0_57 -> m0_46  [color=red, key=2, style=dotted];
m0_56 -> m0_57  [color=red, key=0, style=solid];
m0_60 -> m0_61  [color=red, key=0, style=solid];
m0_66 -> m0_67  [color=red, key=0, style=solid];
m0_70 -> m0_71  [color=red, key=0, style=solid];
m0_70 -> m0_72  [color=red, key=2, style=dotted];
m0_69 -> m0_70  [color=red, key=0, style=solid];
m0_73 -> m0_74  [color=red, key=0, style=solid];
m0_76 -> m0_77  [color=red, key=0, style=solid];
m0_85 -> m0_86  [color=red, key=0, style=solid];
m0_85 -> m0_87  [color=red, key=2, style=dotted];
m0_85 -> m0_50  [color=red, key=2, style=dotted];
m0_85 -> m0_46  [color=red, key=2, style=dotted];
m0_79 -> m0_80  [color=red, key=0, style=solid];
m0_84 -> m0_85  [color=red, key=0, style=solid];
m0_58 -> m0_56  [color=blue, key=0, style=bold];
m0_62 -> m0_60  [color=blue, key=0, style=bold];
m0_67 -> m0_68  [color=red, key=0, style=solid];
m0_68 -> m0_66  [color=blue, key=0, style=bold];
m0_71 -> m0_69  [color=blue, key=0, style=bold];
m0_74 -> m0_75  [color=red, key=0, style=solid];
m0_75 -> m0_73  [color=blue, key=0, style=bold];
m0_77 -> m0_78  [color=red, key=0, style=solid];
m0_78 -> m0_76  [color=blue, key=0, style=bold];
m0_81 -> m0_79  [color=blue, key=0, style=bold];
m0_86 -> m0_84  [color=blue, key=0, style=bold];
m0_110 -> m0_111  [color=red, key=0, style=solid];
m0_110 -> m0_102  [color=red, key=2, style=dotted];
m0_109 -> m0_110  [color=red, key=0, style=solid];
m0_111 -> m0_109  [color=blue, key=0, style=bold];
m0_117 -> m0_118  [color=red, key=0, style=solid];
m0_117 -> m0_119  [color=red, key=2, style=dotted];
m0_117 -> m0_120  [color=red, key=2, style=dotted];
m0_122 -> m0_123  [color=red, key=0, style=solid];
m0_122 -> m0_72  [color=red, key=2, style=dotted];
m0_122 -> m0_124  [color=red, key=2, style=dotted];
m0_122 -> m0_125  [color=red, key=2, style=dotted];
m0_121 -> m0_122  [color=red, key=0, style=solid];
m0_116 -> m0_117  [color=red, key=0, style=solid];
m0_118 -> m0_116  [color=blue, key=0, style=bold];
m0_123 -> m0_121  [color=blue, key=0, style=bold];
m0_130 -> m0_131  [color=red, key=0, style=solid];
m0_131 -> m0_129  [color=blue, key=0, style=bold];
m0_102 -> m0_112  [color=red, key=0, style=solid];
m0_102 -> m0_113  [color=red, key=1, label=object, style=dashed];
m0_112 -> m0_113  [color=red, key=0, style=solid];
m0_112 -> m0_117  [color=red, key=1, label=string, style=dashed];
m0_112 -> m0_122  [color=red, key=1, label=doubQt, style=dashed];
m0_113 -> m0_114  [color=red, key=0, style=solid];
m0_113 -> m0_115  [color=red, key=2, style=dotted];
m0_113 -> m0_39  [color=red, key=2, style=dotted];
m0_113 -> m0_121  [color=red, key=1, label="lambda expression", style=dashed];
m0_114 -> m0_102  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=red, key=0, style=solid];
m0_1 -> m0_2  [color=red, key=0, style=solid];
m0_1 -> m0_3  [color=red, key=2, style=dotted];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_13 -> m0_14  [color=red, key=0, style=solid];
m0_13 -> m0_17  [color=red, key=1, label="System.Action<CommandLine.UnParserSettings>", style=dashed];
m0_13 -> m0_19  [color=red, key=1, label=T, style=dashed];
m0_13 -> m0_22  [color=red, key=1, label=T, style=dashed];
m0_13 -> m0_61  [color=red, key=1, label=T, style=dashed];
m0_14 -> m0_15  [color=red, key=0, style=solid];
m0_14 -> m0_16  [color=red, key=0, style=solid];
m0_17 -> m0_18  [color=red, key=0, style=solid];
m0_17 -> m0_35  [color=red, key=2, style=dotted];
m0_19 -> m0_20  [color=red, key=0, style=solid];
m0_19 -> m0_36  [color=red, key=2, style=dotted];
m0_19 -> m0_21  [color=red, key=1, label=type, style=dashed];
m0_19 -> m0_22  [color=red, key=1, label=type, style=dashed];
m0_22 -> m0_23  [color=red, key=0, style=solid];
m0_22 -> m0_40  [color=red, key=2, style=dotted];
m0_22 -> m0_41  [color=red, key=2, style=dotted];
m0_22 -> m0_42  [color=red, key=2, style=dotted];
m0_22 -> m0_60  [color=red, key=1, label="lambda expression", style=dashed];
m0_22 -> m0_22  [color=red, key=1, label=info, style=dashed];
m0_22 -> m0_26  [color=red, key=1, label=specs, style=dashed];
m0_15 -> m0_33  [color=red, key=0, style=solid];
m0_15 -> m0_34  [color=red, key=2, style=dotted];
m0_16 -> m0_17  [color=red, key=0, style=solid];
m0_16 -> m0_3  [color=red, key=2, style=dotted];
m0_16 -> m0_18  [color=red, key=1, label=settings, style=dashed];
m0_16 -> m0_25  [color=red, key=1, label=settings, style=dashed];
m0_16 -> m0_27  [color=red, key=1, label=settings, style=dashed];
m0_16 -> m0_29  [color=red, key=1, label=settings, style=dashed];
m0_16 -> m0_80  [color=red, key=1, label=settings, style=dashed];
m0_18 -> m0_19  [color=red, key=0, style=solid];
m0_25 -> m0_26  [color=red, key=0, style=solid];
m0_25 -> m0_43  [color=red, key=2, style=dotted];
m0_25 -> m0_69  [color=red, key=1, label="lambda expression", style=dashed];
m0_25 -> m0_28  [color=red, key=1, label=optSpecs, style=dashed];
m0_25 -> m0_29  [color=red, key=1, label=optSpecs, style=dashed];
m0_27 -> m0_28  [color=red, key=0, style=solid];
m0_27 -> m0_45  [color=red, key=2, style=dotted];
m0_27 -> m0_46  [color=red, key=2, style=dotted];
m0_27 -> m0_47  [color=red, key=2, style=dotted];
m0_27 -> m0_48  [color=red, key=2, style=dotted];
m0_27 -> m0_49  [color=red, key=2, style=dotted];
m0_27 -> m0_50  [color=red, key=2, style=dotted];
m0_27 -> m0_27  [color=red, key=1, label=builder, style=dashed];
m0_27 -> m0_76  [color=red, key=1, label="lambda expression", style=dashed];
m0_27 -> m0_29  [color=red, key=1, label=builder, style=dashed];
m0_27 -> m0_80  [color=red, key=1, label=builder, style=dashed];
m0_27 -> m0_30  [color=red, key=1, label=builder, style=dashed];
m0_27 -> m0_31  [color=red, key=1, label=builder, style=dashed];
m0_27 -> m0_85  [color=red, key=1, label=builder, style=dashed];
m0_27 -> m0_32  [color=red, key=1, label=builder, style=dashed];
m0_29 -> m0_30  [color=red, key=0, style=solid];
m0_29 -> m0_53  [color=red, key=2, style=dotted];
m0_29 -> m0_79  [color=red, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_21  [color=red, key=0, style=solid];
m0_20 -> m0_37  [color=red, key=2, style=dotted];
m0_20 -> m0_57  [color=red, key=1, label=builder, style=dashed];
m0_20 -> m0_27  [color=red, key=1, label=builder, style=dashed];
m0_21 -> m0_22  [color=red, key=0, style=solid];
m0_21 -> m0_38  [color=red, key=2, style=dotted];
m0_21 -> m0_39  [color=red, key=2, style=dotted];
m0_21 -> m0_56  [color=red, key=1, label="lambda expression", style=dashed];
m0_23 -> m0_24  [color=red, key=0, style=solid];
m0_23 -> m0_43  [color=red, key=2, style=dotted];
m0_23 -> m0_44  [color=red, key=2, style=dotted];
m0_23 -> m0_66  [color=red, key=1, label="lambda expression", style=dashed];
m0_23 -> m0_23  [color=red, key=1, label=info, style=dashed];
m0_23 -> m0_25  [color=red, key=1, label=allOptSpecs, style=dashed];
m0_26 -> m0_27  [color=red, key=0, style=solid];
m0_26 -> m0_43  [color=red, key=2, style=dotted];
m0_26 -> m0_73  [color=red, key=1, label="lambda expression", style=dashed];
m0_26 -> m0_26  [color=red, key=1, label=info, style=dashed];
m0_26 -> m0_30  [color=red, key=1, label=valSpecs, style=dashed];
m0_26 -> m0_31  [color=red, key=1, label=valSpecs, style=dashed];
m0_24 -> m0_25  [color=red, key=0, style=solid];
m0_24 -> m0_44  [color=red, key=2, style=dotted];
m0_24 -> m0_24  [color=red, key=1, label=info, style=dashed];
m0_24 -> m0_70  [color=red, key=1, label=shortSwitches, style=dashed];
m0_24 -> m0_27  [color=red, key=1, label=shortSwitches, style=dashed];
m0_28 -> m0_29  [color=red, key=0, style=solid];
m0_28 -> m0_45  [color=red, key=2, style=dotted];
m0_28 -> m0_51  [color=red, key=2, style=dotted];
m0_28 -> m0_52  [color=red, key=2, style=dotted];
m0_30 -> m0_31  [color=red, key=0, style=solid];
m0_30 -> m0_45  [color=red, key=2, style=dotted];
m0_30 -> m0_51  [color=red, key=2, style=dotted];
m0_30 -> m0_52  [color=red, key=2, style=dotted];
m0_31 -> m0_32  [color=red, key=0, style=solid];
m0_31 -> m0_53  [color=red, key=2, style=dotted];
m0_31 -> m0_84  [color=red, key=1, label="lambda expression", style=dashed];
m0_32 -> m0_33  [color=red, key=0, style=solid];
m0_32 -> m0_54  [color=red, key=2, style=dotted];
m0_32 -> m0_55  [color=red, key=2, style=dotted];
m0_33 -> m0_13  [color=blue, key=0, style=bold];
m0_132 -> m0_133  [color=red, key=0, style=solid];
m0_133 -> m0_134  [color=red, key=0, style=solid];
m0_133 -> m0_37  [color=red, key=2, style=dotted];
m0_133 -> m0_135  [color=red, key=2, style=dotted];
m0_133 -> m0_50  [color=red, key=2, style=dotted];
m0_133 -> m0_88  [color=red, key=2, style=dotted];
m0_133 -> m0_136  [color=red, key=2, style=dotted];
m0_133 -> m0_54  [color=red, key=2, style=dotted];
m0_134 -> m0_132  [color=blue, key=0, style=bold];
m0_7 -> m0_8  [color=red, key=0, style=solid];
m0_8 -> m0_9  [color=red, key=0, style=solid];
m0_8 -> m0_10  [color=red, key=2, style=dotted];
m0_8 -> m0_11  [color=red, key=1, label="lambda expression", style=dashed];
m0_9 -> m0_7  [color=blue, key=0, style=bold];
m0_143 -> m0_144  [color=red, key=0, style=solid];
m0_143 -> m0_145  [color=red, key=1, label=object, style=dashed];
m0_143 -> m0_146  [color=red, key=1, label=object, style=dashed];
m0_144 -> m0_145  [color=red, key=0, style=solid];
m0_144 -> m0_146  [color=red, key=0, style=solid];
m0_144 -> m0_36  [color=red, key=2, style=dotted];
m0_144 -> m0_148  [color=red, key=2, style=dotted];
m0_144 -> m0_149  [color=red, key=2, style=dotted];
m0_145 -> m0_147  [color=red, key=0, style=solid];
m0_145 -> m0_150  [color=red, key=2, style=dotted];
m0_146 -> m0_147  [color=red, key=0, style=solid];
m0_147 -> m0_143  [color=blue, key=0, style=bold];
m0_166 -> m0_57  [color=red, key=1, label=builder, style=dashed];
m0_166 -> m0_80  [color=red, key=1, label=builder, style=dashed];
m0_166 -> m0_85  [color=red, key=1, label=builder, style=dashed];
m0_167 -> m0_61  [color=red, key=1, label=T, style=dashed];
m0_168 -> m0_70  [color=red, key=1, label=shortSwitches, style=dashed];
m0_169 -> m0_80  [color=red, key=1, label=settings, style=dashed];
m0_170 -> m0_110  [color=red, key=1, label=sep, style=dashed];
m0_171 -> m0_122  [color=red, key=1, label=doubQt, style=dashed];
m1_26 -> m1_27  [color=red, key=0, style=solid];
m1_8 -> m1_9  [color=red, key=0, style=solid];
m1_8 -> m1_10  [color=red, key=2, style=dotted];
m1_8 -> m1_11  [color=red, key=2, style=dotted];
m1_8 -> m1_12  [color=red, key=2, style=dotted];
m1_8 -> m1_13  [color=red, key=2, style=dotted];
m1_8 -> m1_14  [color=red, key=2, style=dotted];
m1_8 -> m1_15  [color=red, key=1, label="lambda expression", style=dashed];
m1_8 -> m1_19  [color=red, key=1, label="lambda expression", style=dashed];
m1_16 -> m1_17  [color=red, key=0, style=solid];
m1_16 -> m1_18  [color=red, key=2, style=dotted];
m1_16 -> m1_16  [color=red, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m1_20 -> m1_21  [color=red, key=0, style=solid];
m1_20 -> m1_22  [color=red, key=2, style=dotted];
m1_20 -> m1_23  [color=red, key=2, style=dotted];
m1_20 -> m1_24  [color=red, key=2, style=dotted];
m1_20 -> m1_25  [color=red, key=2, style=dotted];
m1_20 -> m1_13  [color=red, key=2, style=dotted];
m1_20 -> m1_14  [color=red, key=2, style=dotted];
m1_20 -> m1_26  [color=red, key=1, label="lambda expression", style=dashed];
m1_7 -> m1_8  [color=red, key=0, style=solid];
m1_7 -> m1_16  [color=red, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_7 -> m1_20  [color=red, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_7 -> m1_27  [color=red, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_31 -> m1_32  [color=red, key=0, style=solid];
m1_34 -> m1_35  [color=red, key=0, style=solid];
m1_37 -> m1_38  [color=red, key=0, style=solid];
m1_27 -> m1_28  [color=red, key=0, style=solid];
m1_27 -> m1_29  [color=red, key=2, style=dotted];
m1_27 -> m1_30  [color=red, key=2, style=dotted];
m1_27 -> m1_12  [color=red, key=2, style=dotted];
m1_27 -> m1_13  [color=red, key=2, style=dotted];
m1_9 -> m1_7  [color=blue, key=0, style=bold];
m1_15 -> m1_16  [color=red, key=0, style=solid];
m1_19 -> m1_20  [color=red, key=0, style=solid];
m1_17 -> m1_15  [color=blue, key=0, style=bold];
m1_21 -> m1_19  [color=blue, key=0, style=bold];
m1_28 -> m1_26  [color=blue, key=0, style=bold];
m1_32 -> m1_33  [color=red, key=0, style=solid];
m1_33 -> m1_31  [color=blue, key=0, style=bold];
m1_35 -> m1_36  [color=red, key=0, style=solid];
m1_36 -> m1_34  [color=blue, key=0, style=bold];
m1_38 -> m1_39  [color=red, key=0, style=solid];
m1_39 -> m1_37  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [color=red, key=0, style=solid];
m1_0 -> m1_8  [color=red, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m1_0 -> m1_16  [color=red, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_20  [color=red, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m1_1 -> m1_2  [color=red, key=0, style=solid];
m1_1 -> m1_4  [color=red, key=2, style=dotted];
m1_1 -> m1_7  [color=red, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_3  [color=red, key=0, style=solid];
m1_2 -> m1_4  [color=red, key=2, style=dotted];
m1_2 -> m1_5  [color=red, key=2, style=dotted];
m1_2 -> m1_6  [color=red, key=2, style=dotted];
m1_2 -> m1_31  [color=red, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_34  [color=red, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_37  [color=red, key=1, label="lambda expression", style=dashed];
m1_3 -> m1_0  [color=blue, key=0, style=bold];
m1_40 -> m1_8  [color=red, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m1_41 -> m1_8  [color=red, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m1_41 -> m1_20  [color=red, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m1_42 -> m1_8  [color=red, key=1, label="System.StringComparer", style=dashed];
m1_42 -> m1_16  [color=red, key=1, label="System.StringComparer", style=dashed];
m1_43 -> m1_16  [color=red, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_43 -> m1_20  [color=red, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_43 -> m1_27  [color=red, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m2_0 -> m2_1  [color=red, key=0, style=solid];
m2_0 -> m2_7  [color=red, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_0 -> m2_8  [color=red, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_1 -> m2_2  [color=red, key=0, style=solid];
m2_1 -> m2_3  [color=red, key=2, style=dotted];
m2_1 -> m2_4  [color=red, key=2, style=dotted];
m2_1 -> m2_5  [color=red, key=2, style=dotted];
m2_1 -> m2_6  [color=red, key=1, label="lambda expression", style=dashed];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_6 -> m2_7  [color=red, key=0, style=solid];
m2_7 -> m2_8  [color=red, key=0, style=solid];
m2_7 -> m2_10  [color=red, key=2, style=dotted];
m2_8 -> m2_9  [color=red, key=0, style=solid];
m2_8 -> m2_11  [color=red, key=2, style=dotted];
m2_8 -> m2_12  [color=red, key=2, style=dotted];
m2_8 -> m2_13  [color=red, key=2, style=dotted];
m2_9 -> m2_6  [color=blue, key=0, style=bold];
m2_14 -> m2_7  [color=red, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_14 -> m2_8  [color=red, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_15 -> m2_8  [color=red, key=1, label="System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>", style=dashed];
m3_88 -> m3_89  [key=0, style=solid];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_77  [key=2, style=dotted];
m3_89 -> m3_18  [key=2, style=dotted];
m3_89 -> m3_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_90 -> m3_88  [color=blue, key=0, style=bold];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_53  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m3_51 -> m3_55  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_51 -> m3_57  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m3_51 -> m3_59  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_51 -> m3_94  [color=darkorchid, key=3, label="Parameter variable object value", style=bold];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_16  [key=2, style=dotted];
m3_52 -> m3_55  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_52 -> m3_61  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_52 -> m3_62  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_52 -> m3_63  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_56  [key=0, style=solid];
m3_55 -> m3_63  [key=0, style=solid];
m3_55 -> m3_65  [key=2, style=dotted];
m3_55 -> m3_66  [key=2, style=dotted];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_67  [key=2, style=dotted];
m3_57 -> m3_72  [color=darkseagreen4, key=1, label=sep, style=dashed];
m3_57 -> m3_61  [color=darkseagreen4, key=1, label=sep, style=dashed];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_68  [key=2, style=dotted];
m3_59 -> m3_61  [color=darkseagreen4, key=1, label=e, style=dashed];
m3_61 -> m3_60  [key=0, style=solid];
m3_61 -> m3_70  [key=2, style=dotted];
m3_61 -> m3_66  [key=2, style=dotted];
m3_61 -> m3_31  [key=2, style=dotted];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_24  [key=2, style=dotted];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_25  [key=2, style=dotted];
m3_54 -> m3_55  [key=0, style=solid];
m3_56 -> m3_57  [key=0, style=solid];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_72  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_58 -> m3_61  [color=darkseagreen4, key=1, label=fmtWithQuotesIfStr, style=dashed];
m3_58 -> m3_58  [color=darkorchid, key=3, label="Local variable System.Func<object, object> fmtWithQuotesIfStr", style=bold];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_62  [key=0, style=solid];
m3_60 -> m3_69  [key=2, style=dotted];
m3_64 -> m3_51  [color=blue, key=0, style=bold];
m3_20 -> m3_103  [color=darkorchid, key=3, label="method methodReturn bool IsEmpty", style=bold];
m3_20 -> m3_111  [color=darkorchid, key=3, label="method methodReturn bool IsEmpty", style=bold];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_105  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_102 -> m3_107  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_102 -> m3_109  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_105  [key=0, style=solid];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_107  [key=0, style=solid];
m3_105 -> m3_15  [key=2, style=dotted];
m3_105 -> m3_113  [key=2, style=dotted];
m3_105 -> m3_114  [key=2, style=dotted];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_109  [key=0, style=solid];
m3_109 -> m3_110  [key=0, style=solid];
m3_109 -> m3_111  [key=0, style=solid];
m3_109 -> m3_68  [key=2, style=dotted];
m3_109 -> m3_69  [key=2, style=dotted];
m3_104 -> m3_112  [key=0, style=solid];
m3_106 -> m3_112  [key=0, style=solid];
m3_108 -> m3_112  [key=0, style=solid];
m3_110 -> m3_112  [key=0, style=solid];
m3_111 -> m3_112  [key=0, style=solid];
m3_112 -> m3_102  [color=blue, key=0, style=bold];
m3_94 -> m3_95  [key=0, style=solid];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_16  [key=2, style=dotted];
m3_95 -> m3_97  [key=2, style=dotted];
m3_95 -> m3_30  [key=2, style=dotted];
m3_95 -> m3_31  [key=2, style=dotted];
m3_95 -> m3_51  [key=2, style=dotted];
m3_95 -> m3_98  [key=2, style=dotted];
m3_95 -> m3_25  [key=2, style=dotted];
m3_96 -> m3_94  [color=blue, key=0, style=bold];
m3_91 -> m3_92  [key=0, style=solid];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_35  [key=2, style=dotted];
m3_33 -> m3_36  [key=2, style=dotted];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_30  [key=2, style=dotted];
m3_28 -> m3_31  [key=2, style=dotted];
m3_44 -> m3_45  [key=0, style=solid];
m3_44 -> m3_46  [key=2, style=dotted];
m3_44 -> m3_30  [key=2, style=dotted];
m3_44 -> m3_31  [key=2, style=dotted];
m3_48 -> m3_49  [key=0, style=solid];
m3_48 -> m3_50  [key=2, style=dotted];
m3_48 -> m3_30  [key=2, style=dotted];
m3_48 -> m3_31  [key=2, style=dotted];
m3_27 -> m3_28  [key=0, style=solid];
m3_32 -> m3_33  [key=0, style=solid];
m3_37 -> m3_38  [key=0, style=solid];
m3_40 -> m3_41  [key=0, style=solid];
m3_43 -> m3_44  [key=0, style=solid];
m3_47 -> m3_48  [key=0, style=solid];
m3_29 -> m3_27  [color=blue, key=0, style=bold];
m3_34 -> m3_32  [color=blue, key=0, style=bold];
m3_38 -> m3_39  [key=0, style=solid];
m3_39 -> m3_37  [color=blue, key=0, style=bold];
m3_41 -> m3_42  [key=0, style=solid];
m3_42 -> m3_40  [color=blue, key=0, style=bold];
m3_45 -> m3_43  [color=blue, key=0, style=bold];
m3_49 -> m3_47  [color=blue, key=0, style=bold];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_65  [key=2, style=dotted];
m3_71 -> m3_72  [key=0, style=solid];
m3_73 -> m3_71  [color=blue, key=0, style=bold];
m3_79 -> m3_80  [key=0, style=solid];
m3_79 -> m3_81  [key=2, style=dotted];
m3_79 -> m3_82  [key=2, style=dotted];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_86  [key=2, style=dotted];
m3_84 -> m3_81  [key=2, style=dotted];
m3_84 -> m3_70  [key=2, style=dotted];
m3_84 -> m3_87  [key=2, style=dotted];
m3_83 -> m3_84  [key=0, style=solid];
m3_78 -> m3_79  [key=0, style=solid];
m3_80 -> m3_78  [color=blue, key=0, style=bold];
m3_85 -> m3_83  [color=blue, key=0, style=bold];
m3_92 -> m3_93  [key=0, style=solid];
m3_93 -> m3_91  [color=blue, key=0, style=bold];
m3_65 -> m3_74  [key=0, style=solid];
m3_65 -> m3_75  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_65 -> m3_51  [color=darkorchid, key=3, label="Parameter variable object value", style=bold];
m3_65 -> m3_58  [color=darkorchid, key=3, label="Parameter variable object value", style=bold];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_79  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_74 -> m3_84  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
m3_74 -> m3_74  [color=darkorchid, key=3, label="Local variable System.Func<string, string> doubQt", style=bold];
m3_75 -> m3_76  [key=0, style=solid];
m3_75 -> m3_77  [key=2, style=dotted];
m3_75 -> m3_18  [key=2, style=dotted];
m3_75 -> m3_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_76 -> m3_65  [color=blue, key=0, style=bold];
m3_99 -> m3_100  [key=0, style=solid];
m3_100 -> m3_101  [key=0, style=solid];
m3_100 -> m3_87  [key=2, style=dotted];
m3_101 -> m3_99  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label=T, style=dashed];
m3_0 -> m3_6  [color=darkseagreen4, key=1, label=T, style=dashed];
m3_0 -> m3_33  [color=darkseagreen4, key=1, label=T, style=dashed];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_15  [key=2, style=dotted];
m3_3 -> m3_5  [color=darkseagreen4, key=1, label=type, style=dashed];
m3_3 -> m3_6  [color=darkseagreen4, key=1, label=type, style=dashed];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_19  [key=2, style=dotted];
m3_6 -> m3_20  [key=2, style=dotted];
m3_6 -> m3_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_6 -> m3_6  [color=darkseagreen4, key=1, label=info, style=dashed];
m3_6 -> m3_8  [color=darkseagreen4, key=1, label=specs, style=dashed];
m3_2 -> m3_13  [key=0, style=solid];
m3_2 -> m3_14  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_16  [key=2, style=dotted];
m3_4 -> m3_28  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_4 -> m3_9  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_4 -> m3_44  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_4 -> m3_10  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_4 -> m3_11  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_4 -> m3_48  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_4 -> m3_12  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_17  [key=2, style=dotted];
m3_5 -> m3_18  [key=2, style=dotted];
m3_5 -> m3_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_23  [key=2, style=dotted];
m3_9 -> m3_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_24  [key=2, style=dotted];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_23  [key=2, style=dotted];
m3_11 -> m3_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_25  [key=2, style=dotted];
m3_12 -> m3_26  [key=2, style=dotted];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_21  [key=2, style=dotted];
m3_7 -> m3_22  [key=2, style=dotted];
m3_7 -> m3_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_7 -> m3_7  [color=darkseagreen4, key=1, label=info, style=dashed];
m3_7 -> m3_9  [color=darkseagreen4, key=1, label=optSpecs, style=dashed];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_21  [key=2, style=dotted];
m3_8 -> m3_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_8 -> m3_8  [color=darkseagreen4, key=1, label=info, style=dashed];
m3_8 -> m3_11  [color=darkseagreen4, key=1, label=valSpecs, style=dashed];
m3_13 -> m3_0  [color=blue, key=0, style=bold];
m3_115 -> m3_28  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_115 -> m3_44  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_115 -> m3_48  [color=darkseagreen4, key=1, label=builder, style=dashed];
m3_116 -> m3_33  [color=darkseagreen4, key=1, label=T, style=dashed];
m3_117 -> m3_72  [color=darkseagreen4, key=1, label=sep, style=dashed];
m3_118 -> m3_84  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
}
