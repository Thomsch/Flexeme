digraph  {
m1_3 [cluster="CommandLine.Tests.CultureInfoExtensions.MakeCultureHandlers(System.Globalization.CultureInfo)", file="SentenceBuilder.cs", label="Action resetter = () => Thread.CurrentThread.CurrentCulture = currentCulutre", span="26-26"];
m1_4 [cluster="CommandLine.Tests.CultureInfoExtensions.MakeCultureHandlers(System.Globalization.CultureInfo)", color=green, community=0, file="SentenceBuilder.cs", label="0: return new CultureHandlers { ChangeCulture = changer, ResetCulture = resetter };", span="28-28"];
m1_5 [cluster="CommandLine.Tests.CultureInfoExtensions.MakeCultureHandlers(System.Globalization.CultureInfo)", file="SentenceBuilder.cs", label="Exit CommandLine.Tests.CultureInfoExtensions.MakeCultureHandlers(System.Globalization.CultureInfo)", span="20-20"];
m1_6 [cluster="CommandLine.Tests.CultureHandlers.CultureHandlers()", file="SentenceBuilder.cs", label="Entry CommandLine.Tests.CultureHandlers.CultureHandlers()", span="12-12"];
m1_7 [cluster="lambda expression", file="SentenceBuilder.cs", label="Entry lambda expression", span="24-24"];
m1_8 [cluster="lambda expression", file="SentenceBuilder.cs", label="Thread.CurrentThread.CurrentCulture = newCulture", span="24-24"];
m1_0 [cluster="CommandLine.Error.Error(CommandLine.ErrorType)", file="SentenceBuilder.cs", label="Entry CommandLine.Error.Error(CommandLine.ErrorType)", span="65-65"];
m1_1 [cluster="CommandLine.Error.Error(CommandLine.ErrorType)", file="SentenceBuilder.cs", label="this.tag = tag", span="67-67"];
m1_2 [cluster="CommandLine.Error.Error(CommandLine.ErrorType)", file="SentenceBuilder.cs", label="Exit CommandLine.Error.Error(CommandLine.ErrorType)", span="65-65"];
m1_9 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="24-24"];
m1_15 [cluster="CommandLine.Error.Equals(CommandLine.Error)", file="SentenceBuilder.cs", label="other == null", span="110-110"];
m1_17 [cluster="CommandLine.Error.Equals(CommandLine.Error)", file="SentenceBuilder.cs", label="return this.Tag.Equals(other.Tag);", span="115-115"];
m1_16 [cluster="CommandLine.Error.Equals(CommandLine.Error)", file="SentenceBuilder.cs", label="return false;", span="112-112"];
m1_18 [cluster="CommandLine.Error.Equals(CommandLine.Error)", file="SentenceBuilder.cs", label="Exit CommandLine.Error.Equals(CommandLine.Error)", span="108-108"];
m1_11 [cluster="lambda expression", file="SentenceBuilder.cs", label="Thread.CurrentThread.CurrentCulture = currentCulutre", span="26-26"];
m1_12 [cluster="lambda expression", file="SentenceBuilder.cs", label="Exit lambda expression", span="26-26"];
m1_13 [cluster="CommandLine.Error.GetHashCode()", file="SentenceBuilder.cs", label="System.Globalization.CultureInfo", span=""];
m1_19 [cluster="System.Enum.Equals(object)", file="SentenceBuilder.cs", label="Entry System.Enum.Equals(object)", span="0-0"];
m1_10 [cluster="object.Equals(object)", file="SentenceBuilder.cs", label="Entry object.Equals(object)", span="0-0"];
m1_32 [cluster="CommandLine.TokenError.Equals(CommandLine.TokenError)", file="SentenceBuilder.cs", label="Entry CommandLine.TokenError.Equals(CommandLine.TokenError)", span="172-172"];
m1_37 [cluster="CommandLine.TokenError.Equals(CommandLine.TokenError)", file="SentenceBuilder.cs", label="other == null", span="174-174"];
m1_39 [cluster="CommandLine.TokenError.Equals(CommandLine.TokenError)", file="SentenceBuilder.cs", label="return this.Tag.Equals(other.Tag) && this.Token.Equals(other.Token);", span="179-179"];
m1_38 [cluster="CommandLine.TokenError.Equals(CommandLine.TokenError)", file="SentenceBuilder.cs", label="return false;", span="176-176"];
m1_40 [cluster="CommandLine.TokenError.Equals(CommandLine.TokenError)", file="SentenceBuilder.cs", label="Exit CommandLine.TokenError.Equals(CommandLine.TokenError)", span="172-172"];
m1_53 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="SentenceBuilder.cs", label="Entry CommandLine.NamedError.Equals(CommandLine.NamedError)", span="245-245"];
m1_58 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="SentenceBuilder.cs", label="other == null", span="247-247"];
m1_60 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="SentenceBuilder.cs", label="return this.Tag.Equals(other.Tag) && this.NameInfo.Equals(other.NameInfo);", span="252-252"];
m1_59 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="SentenceBuilder.cs", label="return false;", span="249-249"];
m1_61 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="SentenceBuilder.cs", label="Exit CommandLine.NamedError.Equals(CommandLine.NamedError)", span="245-245"];
m1_26 [cluster="CommandLine.TokenError.Equals(object)", file="SentenceBuilder.cs", label="Entry CommandLine.TokenError.Equals(object)", span="147-147"];
m1_30 [cluster="CommandLine.TokenError.Equals(object)", file="SentenceBuilder.cs", label="return base.Equals(obj);", span="155-155"];
m1_27 [cluster="CommandLine.TokenError.Equals(object)", file="SentenceBuilder.cs", label="var other = obj as TokenError", span="149-149"];
m1_28 [cluster="CommandLine.TokenError.Equals(object)", file="SentenceBuilder.cs", label="other != null", span="150-150"];
m1_29 [cluster="CommandLine.TokenError.Equals(object)", file="SentenceBuilder.cs", label="return this.Equals(other);", span="152-152"];
m1_31 [cluster="CommandLine.TokenError.Equals(object)", file="SentenceBuilder.cs", label="Exit CommandLine.TokenError.Equals(object)", span="147-147"];
m1_36 [cluster="object.GetHashCode()", file="SentenceBuilder.cs", label="Entry object.GetHashCode()", span="0-0"];
m1_54 [cluster="CommandLine.NamedError.GetHashCode()", file="SentenceBuilder.cs", label="Entry CommandLine.NamedError.GetHashCode()", span="235-235"];
m1_55 [cluster="CommandLine.NamedError.GetHashCode()", file="SentenceBuilder.cs", label="return this.Tag.GetHashCode() ^ this.NameInfo.GetHashCode();", span="237-237"];
m1_56 [cluster="CommandLine.NamedError.GetHashCode()", file="SentenceBuilder.cs", label="Exit CommandLine.NamedError.GetHashCode()", span="235-235"];
m1_33 [cluster="CommandLine.TokenError.GetHashCode()", file="SentenceBuilder.cs", label="Entry CommandLine.TokenError.GetHashCode()", span="162-162"];
m1_34 [cluster="CommandLine.TokenError.GetHashCode()", file="SentenceBuilder.cs", label="return new { this.Tag, this.Token }.GetHashCode();", span="164-164"];
m1_35 [cluster="CommandLine.TokenError.GetHashCode()", file="SentenceBuilder.cs", label="Exit CommandLine.TokenError.GetHashCode()", span="162-162"];
m1_62 [cluster="CommandLine.NameInfo.Equals(CommandLine.NameInfo)", file="SentenceBuilder.cs", label="Entry CommandLine.NameInfo.Equals(CommandLine.NameInfo)", span="108-108"];
m1_41 [cluster="string.Equals(string)", file="SentenceBuilder.cs", label="Entry string.Equals(string)", span="0-0"];
m1_14 [cluster="System.Enum.GetHashCode()", file="SentenceBuilder.cs", label=currentCulutre, span=""];
m1_57 [cluster="CommandLine.NameInfo.GetHashCode()", file="SentenceBuilder.cs", label="Entry CommandLine.NameInfo.GetHashCode()", span="98-98"];
m1_44 [cluster="CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", file="SentenceBuilder.cs", label="Entry CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", span="201-201"];
m1_45 [cluster="CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", file="SentenceBuilder.cs", label="this.nameInfo = nameInfo", span="204-204"];
m1_46 [cluster="CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", file="SentenceBuilder.cs", label="Exit CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", span="201-201"];
m1_25 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SentenceBuilder.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_47 [cluster="CommandLine.NamedError.Equals(object)", file="SentenceBuilder.cs", label="Entry CommandLine.NamedError.Equals(object)", span="220-220"];
m1_51 [cluster="CommandLine.NamedError.Equals(object)", file="SentenceBuilder.cs", label="return base.Equals(obj);", span="228-228"];
m1_48 [cluster="CommandLine.NamedError.Equals(object)", file="SentenceBuilder.cs", label="var other = obj as NamedError", span="222-222"];
m1_49 [cluster="CommandLine.NamedError.Equals(object)", file="SentenceBuilder.cs", label="other != null", span="223-223"];
m1_50 [cluster="CommandLine.NamedError.Equals(object)", file="SentenceBuilder.cs", label="return this.Equals(other);", span="225-225"];
m1_52 [cluster="CommandLine.NamedError.Equals(object)", file="SentenceBuilder.cs", label="Exit CommandLine.NamedError.Equals(object)", span="220-220"];
m1_20 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="SentenceBuilder.cs", label="Entry CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", span="126-126"];
m1_23 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="SentenceBuilder.cs", label="this.token = token", span="131-131"];
m1_21 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="SentenceBuilder.cs", label="token == null", span="129-129"];
m1_22 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="SentenceBuilder.cs", label="throw new ArgumentNullException(''token'');", span="129-129"];
m1_24 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="SentenceBuilder.cs", label="Exit CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", span="126-126"];
m1_86 [file="SentenceBuilder.cs", label="CommandLine.Error", span=""];
m1_87 [file="SentenceBuilder.cs", label="CommandLine.TokenError", span=""];
m1_88 [file="SentenceBuilder.cs", label="CommandLine.NamedError", span=""];
m3_37 [cluster="CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.NameExtensions.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="15-15"];
m3_103 [cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs", label="Entry NameInfo.cstr", span=""];
m3_53 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m3_4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m3_8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40"];
m3_9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m3_6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="74-74"];
m3_75 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="76-92"];
m3_76 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="74-74"];
m3_73 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
m3_107 [cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m3_49 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m3_68 [cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m3_17 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m3_21 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m3_63 [cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs", label="Entry Unk.IsNothing", span=""];
m3_74 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m3_86 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m3_7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="95-95"];
m3_91 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="97-115"];
m3_92 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="95-95"];
m3_69 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m3_64 [cluster="Unk.Contains", file="SpecificationPropertyRules.cs", label="Entry Unk.Contains", span=""];
m3_90 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
m3_0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m3_1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
m3_2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m3_104 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="102-102"];
m3_11 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31"];
m3_10 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-40"];
m3_12 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32"];
m3_22 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="29-29"];
m3_26 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="30-31"];
m3_14 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));", span="35-37"];
m3_13 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="33-33"];
m3_30 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="32-32"];
m3_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="39-39"];
m3_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-40"];
m3_33 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="35-37"];
m3_23 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption()", span="29-29"];
m3_24 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="29-29"];
m3_27 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31"];
m3_28 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="30-31"];
m3_31 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)g.Specification).SetName", span="32-32"];
m3_32 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="32-32"];
m3_34 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification())", span="36-37"];
m3_35 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="35-37"];
m3_41 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", span="47-51"];
m3_42 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && (\r\n                                ((OptionSpecification)sp.Specification).SetName.Length == 0 ||\r\n                                !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)\r\n                            ))                          \r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", span="53-65"];
m3_40 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="45-71"];
m3_50 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="49-50"];
m3_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="51-51"];
m3_61 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && (\r\n                                ((OptionSpecification)sp.Specification).SetName.Length == 0 ||\r\n                                !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)\r\n                            )", span="56-61"];
m3_43 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="requiredButEmpty.Any()", span="66-66"];
m3_57 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="55-55"];
m3_60 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="56-61"];
m3_65 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="63-65"];
m3_44 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            s.Specification.FromSpecification()));", span="67-68"];
m3_45 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="70-70"];
m3_46 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="45-71"];
m3_70 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="67-68"];
m3_51 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", span="49-50"];
m3_52 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="49-50"];
m3_55 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)s.Specification).SetName", span="51-51"];
m3_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="51-51"];
m3_58 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsOption()", span="55-55"];
m3_59 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="55-55"];
m3_62 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="56-61"];
m3_66 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="63-65"];
m3_67 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="63-65"];
m3_71 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: new MissingRequiredOptionError(\r\n                            s.Specification.FromSpecification())", span="67-68"];
m3_72 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="67-68"];
m3_78 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="78-85"];
m3_77 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="76-92"];
m3_79 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="86-86"];
m3_83 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="79-84"];
m3_80 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));", span="88-89"];
m3_81 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="91-91"];
m3_82 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="76-92"];
m3_87 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="88-89"];
m3_84 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="79-84"];
m3_85 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="79-84"];
m3_88 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification())", span="88-89"];
m3_89 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="88-89"];
m3_95 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="102-106"];
m3_94 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="99-101"];
m3_93 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="97-115"];
m3_96 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="107-110"];
m3_97 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="111-113"];
m3_98 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return errors;", span="114-114"];
m3_99 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="97-115"];
m3_105 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="t.IsName()", span="102-102"];
m3_106 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="102-102"];
m3_102 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335"];
m3_48 [cluster="Unk.Concat", file="SpecificationPropertyRules.cs", label="Entry Unk.Concat", span=""];
m3_5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m3_38 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n            {\r\n                var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && (\r\n                                ((OptionSpecification)sp.Specification).SetName.Length == 0 ||\r\n                                !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)\r\n                            ))                          \r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            s.Specification.FromSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="45-71"];
m3_39 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m3_20 [cluster="Unk.Select", file="SpecificationPropertyRules.cs", label="Entry Unk.Select", span=""];
m3_29 [cluster="Unk.IsJust", file="SpecificationPropertyRules.cs", label="Entry Unk.IsJust", span=""];
m3_100 [cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs", label="Entry Unk.UniqueName", span=""];
m3_47 [cluster="Unk.ToList", file="SpecificationPropertyRules.cs", label="Entry Unk.ToList", span=""];
m3_36 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302"];
m3_101 [cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m3_25 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m3_3 [cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_18 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m3_19 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m3_108 [file="SpecificationPropertyRules.cs", label=setsWithTrue, span=""];
m3_109 [file="SpecificationPropertyRules.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m1_3 -> m1_4  [color=green, key=0, style=solid];
m1_3 -> m1_7  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_3 -> m1_9  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m1_3 -> m1_26  [color=darkorchid, key=3, label="Parameter variable object obj", style=bold];
m1_3 -> m1_47  [color=darkorchid, key=3, label="Parameter variable object obj", style=bold];
m1_4 -> m1_5  [color=green, key=0, style=solid];
m1_4 -> m1_6  [color=green, key=1, label=other, style=dashed];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_7  [key=0, style=solid];
m1_5 -> m1_0  [color=blue, key=0, style=bold];
m1_6 -> m1_9  [key=2, style=dotted];
m1_6 -> m1_8  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_10  [key=2, style=dotted];
m1_8 -> m1_3  [color=blue, key=0, style=bold];
m1_8 -> m1_9  [key=0, style=solid];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_0 -> m1_8  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [color=darkseagreen4, key=1, label=currentCulutre, style=dashed];
m1_1 -> m1_11  [color=darkseagreen4, key=1, label=currentCulutre, style=dashed];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_4  [color=darkseagreen4, key=1, label=changer, style=dashed];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_9 -> m1_4  [color=green, key=3, label="Parameter variable CommandLine.Error other", style=bold];
m1_9 -> m1_15  [key=0, style=solid];
m1_9 -> m1_17  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_9 -> m1_16  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m1_9 -> m1_7  [color=blue, key=0, style=bold];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_17  [key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=2, style=dotted];
m1_16 -> m1_18  [key=0, style=solid];
m1_18 -> m1_9  [color=blue, key=0, style=bold];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_33  [color=darkorchid, key=3, label="method methodReturn int GetHashCode", style=bold];
m1_11 -> m1_54  [color=darkorchid, key=3, label="method methodReturn int GetHashCode", style=bold];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [key=2, style=dotted];
m1_12 -> m1_10  [color=blue, key=0, style=bold];
m1_13 -> m1_11  [color=blue, key=0, style=bold];
m1_13 -> m1_8  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_10 -> m1_11  [key=0, style=solid];
m1_32 -> m1_16  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m1_32 -> m1_27  [color=darkorchid, key=3, label="Parameter variable CommandLine.TokenError other", style=bold];
m1_32 -> m1_37  [key=0, style=solid];
m1_32 -> m1_39  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_39  [key=0, style=solid];
m1_39 -> m1_19  [key=2, style=dotted];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_41  [key=2, style=dotted];
m1_38 -> m1_40  [key=0, style=solid];
m1_40 -> m1_32  [color=blue, key=0, style=bold];
m1_53 -> m1_16  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m1_53 -> m1_48  [color=darkorchid, key=3, label="Parameter variable CommandLine.NamedError other", style=bold];
m1_53 -> m1_58  [key=0, style=solid];
m1_53 -> m1_60  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_60  [key=0, style=solid];
m1_60 -> m1_19  [key=2, style=dotted];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_62  [key=2, style=dotted];
m1_59 -> m1_61  [key=0, style=solid];
m1_61 -> m1_53  [color=blue, key=0, style=bold];
m1_26 -> m1_3  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_30  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_26 -> m1_32  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m1_30 -> m1_3  [key=2, style=dotted];
m1_30 -> m1_31  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_29  [color=darkseagreen4, key=1, label=other, style=dashed];
m1_28 -> m1_30  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_29 -> m1_31  [key=0, style=solid];
m1_29 -> m1_32  [key=2, style=dotted];
m1_31 -> m1_26  [color=blue, key=0, style=bold];
m1_54 -> m1_55  [key=0, style=solid];
m1_55 -> m1_56  [key=0, style=solid];
m1_55 -> m1_14  [key=2, style=dotted];
m1_55 -> m1_57  [key=2, style=dotted];
m1_56 -> m1_54  [color=blue, key=0, style=bold];
m1_33 -> m1_34  [key=0, style=solid];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_36  [key=2, style=dotted];
m1_35 -> m1_33  [color=blue, key=0, style=bold];
m1_14 -> m1_11  [color=darkseagreen4, key=1, label=currentCulutre, style=dashed];
m1_44 -> m1_45  [key=0, style=solid];
m1_45 -> m1_46  [key=0, style=solid];
m1_46 -> m1_44  [color=blue, key=0, style=bold];
m1_47 -> m1_3  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_51  [color=darkseagreen4, key=1, label=object, style=dashed];
m1_47 -> m1_53  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m1_51 -> m1_3  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_50  [color=darkseagreen4, key=1, label=other, style=dashed];
m1_49 -> m1_51  [key=0, style=solid];
m1_49 -> m1_50  [key=0, style=solid];
m1_50 -> m1_52  [key=0, style=solid];
m1_50 -> m1_53  [key=2, style=dotted];
m1_52 -> m1_47  [color=blue, key=0, style=bold];
m1_20 -> m1_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_20 -> m1_21  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_21 -> m1_23  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_22 -> m1_24  [key=0, style=solid];
m1_22 -> m1_25  [key=2, style=dotted];
m1_24 -> m1_20  [color=blue, key=0, style=bold];
m1_86 -> m1_6  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_86 -> m1_7  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_86 -> m1_17  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_86 -> m1_1  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_86 -> m1_12  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m1_87 -> m1_30  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m1_87 -> m1_23  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m1_87 -> m1_29  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m1_87 -> m1_34  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m1_87 -> m1_39  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m1_88 -> m1_51  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m1_88 -> m1_45  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m1_88 -> m1_50  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m1_88 -> m1_55  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m1_88 -> m1_60  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m3_4 -> m3_8  [color=green, key=0, style=solid];
m3_8 -> m3_9  [color=green, key=0, style=solid];
m3_8 -> m3_11  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_9 -> m3_4  [color=blue, key=0, style=bold];
m3_6 -> m3_75  [color=green, key=0, style=solid];
m3_75 -> m3_76  [color=green, key=0, style=solid];
m3_75 -> m3_78  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_76 -> m3_6  [color=blue, key=0, style=bold];
m3_7 -> m3_91  [key=0, style=solid];
m3_7 -> m3_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_94  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_91 -> m3_91  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> ", style=bold];
m3_92 -> m3_7  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=2, style=dotted];
m3_1 -> m3_5  [key=2, style=dotted];
m3_1 -> m3_6  [key=2, style=dotted];
m3_1 -> m3_7  [key=2, style=dotted];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
m3_104 -> m3_105  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_17  [key=2, style=dotted];
m3_11 -> m3_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_11 -> m3_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_11 -> m3_14  [color=green, key=1, label=options, style=dashed];
m3_10 -> m3_11  [key=0, style=solid];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_18  [key=2, style=dotted];
m3_12 -> m3_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_22 -> m3_23  [key=0, style=solid];
m3_26 -> m3_27  [key=0, style=solid];
m3_14 -> m3_16  [color=green, key=0, style=solid];
m3_14 -> m3_20  [color=green, key=2, style=dotted];
m3_14 -> m3_33  [color=green, key=1, label="lambda expression", style=dashed];
m3_13 -> m3_14  [color=green, key=0, style=solid];
m3_13 -> m3_15  [key=0, style=solid];
m3_13 -> m3_19  [key=2, style=dotted];
m3_30 -> m3_31  [key=0, style=solid];
m3_15 -> m3_16  [key=0, style=solid];
m3_15 -> m3_21  [key=2, style=dotted];
m3_16 -> m3_10  [color=blue, key=0, style=bold];
m3_33 -> m3_34  [color=green, key=0, style=solid];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_25  [key=2, style=dotted];
m3_24 -> m3_22  [color=blue, key=0, style=bold];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_29  [key=2, style=dotted];
m3_28 -> m3_26  [color=blue, key=0, style=bold];
m3_31 -> m3_32  [key=0, style=solid];
m3_32 -> m3_30  [color=blue, key=0, style=bold];
m3_34 -> m3_35  [color=green, key=0, style=solid];
m3_34 -> m3_36  [color=green, key=2, style=dotted];
m3_34 -> m3_37  [color=green, key=2, style=dotted];
m3_35 -> m3_33  [color=blue, key=0, style=bold];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_17  [key=2, style=dotted];
m3_41 -> m3_20  [key=2, style=dotted];
m3_41 -> m3_47  [key=2, style=dotted];
m3_41 -> m3_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_41 -> m3_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_41 -> m3_61  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_17  [key=2, style=dotted];
m3_42 -> m3_48  [key=2, style=dotted];
m3_42 -> m3_47  [key=2, style=dotted];
m3_42 -> m3_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_42 -> m3_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_42 -> m3_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_42 -> m3_44  [color=green, key=1, label=requiredButEmpty, style=dashed];
m3_40 -> m3_41  [key=0, style=solid];
m3_40 -> m3_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_50 -> m3_51  [key=0, style=solid];
m3_54 -> m3_55  [key=0, style=solid];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_63  [key=2, style=dotted];
m3_61 -> m3_64  [key=2, style=dotted];
m3_43 -> m3_44  [color=green, key=0, style=solid];
m3_43 -> m3_45  [key=0, style=solid];
m3_43 -> m3_49  [key=2, style=dotted];
m3_57 -> m3_58  [key=0, style=solid];
m3_60 -> m3_61  [key=0, style=solid];
m3_65 -> m3_66  [key=0, style=solid];
m3_44 -> m3_46  [color=green, key=0, style=solid];
m3_44 -> m3_20  [color=green, key=2, style=dotted];
m3_44 -> m3_70  [color=green, key=1, label="lambda expression", style=dashed];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_21  [key=2, style=dotted];
m3_46 -> m3_40  [color=blue, key=0, style=bold];
m3_70 -> m3_71  [color=green, key=0, style=solid];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_25  [key=2, style=dotted];
m3_51 -> m3_53  [key=2, style=dotted];
m3_52 -> m3_50  [color=blue, key=0, style=bold];
m3_55 -> m3_56  [key=0, style=solid];
m3_56 -> m3_54  [color=blue, key=0, style=bold];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_25  [key=2, style=dotted];
m3_59 -> m3_57  [color=blue, key=0, style=bold];
m3_62 -> m3_60  [color=blue, key=0, style=bold];
m3_66 -> m3_67  [key=0, style=solid];
m3_66 -> m3_68  [key=2, style=dotted];
m3_66 -> m3_69  [key=2, style=dotted];
m3_67 -> m3_65  [color=blue, key=0, style=bold];
m3_71 -> m3_72  [color=green, key=0, style=solid];
m3_71 -> m3_73  [color=green, key=2, style=dotted];
m3_71 -> m3_74  [color=green, key=2, style=dotted];
m3_72 -> m3_70  [color=blue, key=0, style=bold];
m3_78 -> m3_79  [key=0, style=solid];
m3_78 -> m3_17  [key=2, style=dotted];
m3_78 -> m3_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_78 -> m3_80  [color=green, key=1, label=options, style=dashed];
m3_77 -> m3_78  [key=0, style=solid];
m3_79 -> m3_80  [color=green, key=0, style=solid];
m3_79 -> m3_81  [key=0, style=solid];
m3_79 -> m3_49  [key=2, style=dotted];
m3_83 -> m3_84  [key=0, style=solid];
m3_80 -> m3_82  [color=green, key=0, style=solid];
m3_80 -> m3_20  [color=green, key=2, style=dotted];
m3_80 -> m3_87  [color=green, key=1, label="lambda expression", style=dashed];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_21  [key=2, style=dotted];
m3_82 -> m3_77  [color=blue, key=0, style=bold];
m3_87 -> m3_88  [color=green, key=0, style=solid];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_53  [key=2, style=dotted];
m3_84 -> m3_86  [key=2, style=dotted];
m3_85 -> m3_83  [color=blue, key=0, style=bold];
m3_88 -> m3_89  [color=green, key=0, style=solid];
m3_88 -> m3_90  [color=green, key=2, style=dotted];
m3_88 -> m3_74  [color=green, key=2, style=dotted];
m3_89 -> m3_87  [color=blue, key=0, style=bold];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_17  [key=2, style=dotted];
m3_95 -> m3_100  [key=2, style=dotted];
m3_95 -> m3_101  [key=2, style=dotted];
m3_95 -> m3_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_95 -> m3_95  [color=darkseagreen4, key=1, label=t, style=dashed];
m3_94 -> m3_95  [key=0, style=solid];
m3_94 -> m3_25  [key=2, style=dotted];
m3_94 -> m3_53  [key=2, style=dotted];
m3_94 -> m3_94  [color=darkseagreen4, key=1, label=sp, style=dashed];
m3_93 -> m3_94  [key=0, style=solid];
m3_96 -> m3_97  [key=0, style=solid];
m3_96 -> m3_19  [key=2, style=dotted];
m3_96 -> m3_96  [color=darkseagreen4, key=1, label=x, style=dashed];
m3_97 -> m3_98  [key=0, style=solid];
m3_97 -> m3_102  [key=2, style=dotted];
m3_97 -> m3_103  [key=2, style=dotted];
m3_97 -> m3_97  [color=darkseagreen4, key=1, label=y, style=dashed];
m3_98 -> m3_99  [key=0, style=solid];
m3_99 -> m3_93  [color=blue, key=0, style=bold];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_107  [key=2, style=dotted];
m3_106 -> m3_104  [color=blue, key=0, style=bold];
m3_5 -> m3_38  [color=green, key=0, style=solid];
m3_38 -> m3_39  [color=green, key=0, style=solid];
m3_38 -> m3_41  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_38 -> m3_42  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m3_39 -> m3_5  [color=blue, key=0, style=bold];
m3_108 -> m3_61  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m3_109 -> m3_95  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
}
