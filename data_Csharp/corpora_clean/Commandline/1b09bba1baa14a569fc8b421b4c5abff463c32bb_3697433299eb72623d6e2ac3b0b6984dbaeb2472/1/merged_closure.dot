digraph  {
n387 [label="CommandLine.Text.HelpText", span=""];
n388 [label=auto, span=""];
n389 [label="CommandLine.ParserResult<T>", span=""];
n390 [label=pr, span=""];
n391 [label="CommandLine.Text.HelpText", span=""];
n392 [label="System.Func<CommandLine.Error, string>", span=""];
n393 [label=int, span=""];
n394 [label=text, span=""];
n395 [label=groups, span=""];
n396 [label=string, span=""];
n397 [label=maxLength, span=""];
n398 [label=remainingSpace, span=""];
n399 [label=int, span=""];
n400 [label="CommandLine.Core.Specification", span=""];
n401 [label=optionHelpText, span=""];
n402 [label="CommandLine.Core.OptionSpecification", span=""];
n403 [label="CommandLine.Core.ValueSpecification", span=""];
n0 [cluster="CommandLine.Text.HelpText.HelpText()", label="Entry CommandLine.Text.HelpText.HelpText()", span="36-36"];
n1 [cluster="CommandLine.Text.HelpText.HelpText()", label="Exit CommandLine.Text.HelpText.HelpText()", span="36-36"];
n2 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", span="48-48"];
n3 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", span="48-48"];
n4 [cluster="CommandLine.Text.HelpText.HelpText(string)", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="59-59"];
n5 [cluster="CommandLine.Text.HelpText.HelpText(string)", label="Exit CommandLine.Text.HelpText.HelpText(string)", span="59-59"];
n6 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", span="70-70"];
n7 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", span="70-70"];
n8 [cluster="CommandLine.Text.HelpText.HelpText(string, string)", label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="82-82"];
n9 [cluster="CommandLine.Text.HelpText.HelpText(string, string)", label="Exit CommandLine.Text.HelpText.HelpText(string, string)", span="82-82"];
n10 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="95-95"];
n11 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="sentenceBuilder == null", span="97-97"];
n13 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="heading == null", span="98-98"];
n15 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="copyright == null", span="99-99"];
n19 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="this.sentenceBuilder = sentenceBuilder", span="104-104"];
n20 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="this.heading = heading", span="105-105"];
n21 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="this.copyright = copyright", span="106-106"];
n12 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="throw new ArgumentNullException(''sentenceBuilder'');", span="97-97"];
n14 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="throw new ArgumentNullException(''heading'');", span="98-98"];
n16 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="throw new ArgumentNullException(''copyright'');", span="99-99"];
n17 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="preOptionsHelp = new StringBuilder(BuilderCapacity)", span="101-101"];
n18 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="postOptionsHelp = new StringBuilder(BuilderCapacity)", span="102-102"];
n24 [cluster="System.Text.StringBuilder.StringBuilder(int)", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
n22 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="95-95"];
n23 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n25 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", span="195-195"];
n26 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="var auto = new HelpText {\r\n                Heading = HeadingInfo.Default,\r\n                Copyright = CopyrightInfo.Default,\r\n                AdditionalNewLineAfterOption = true,\r\n                AddDashesToOption = !verbsIndex\r\n            }", span="200-205"];
n28 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="onError != null && parserResult.Tag == ParserResultType.NotParsed", span="209-209"];
n29 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="errors = ((NotParsed<T>)parserResult).Errors", span="211-211"];
n31 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="auto = onError(auto)", span="215-215"];
n37 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="auto.AddOptions(parserResult)", span="231-231"];
n27 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="var errors = Enumerable.Empty<Error>()", span="207-207"];
n32 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="ReflectionHelper.GetAttribute<AssemblyLicenseAttribute>()\r\n                .Do(license => license.AddToHelpText(auto, true))", span="219-220"];
n51 [cluster="lambda expression", label="license.AddToHelpText(auto, true)", span="220-220"];
n33 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="ReflectionHelper.GetAttribute<AssemblyUsageAttribute>()\r\n                .Do(usage => usage.AddToHelpText(auto, true))", span="222-223"];
n55 [cluster="lambda expression", label="usage.AddToHelpText(auto, true)", span="223-223"];
n35 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="auto.AddDashesToOption = false", span="227-227"];
n38 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="return auto;", span="233-233"];
n40 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n30 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="FilterMeaningfulErrors(errors).Any()", span="213-213"];
n41 [cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="450-450"];
n42 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n43 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n44 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="12-12"];
n45 [cluster="CSharpx.Maybe<T>.Do<T>(System.Action<T>)", label="Entry CSharpx.Maybe<T>.Do<T>(System.Action<T>)", span="300-300"];
n50 [cluster="lambda expression", label="Entry lambda expression", span="220-220"];
n54 [cluster="lambda expression", label="Entry lambda expression", span="223-223"];
n46 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n57 [cluster="lambda expression", label="Entry lambda expression", span="225-225"];
n47 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
n48 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", label="Entry CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="348-348"];
n49 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", label="Entry CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="331-331"];
n39 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", span="195-195"];
n52 [cluster="lambda expression", label="Exit lambda expression", span="220-220"];
n53 [cluster="CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)", label="Entry CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)", span="155-155"];
n56 [cluster="lambda expression", label="Exit lambda expression", span="223-223"];
n59 [cluster="lambda expression", label="Exit lambda expression", span="225-225"];
n60 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="246-246"];
n61 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="parserResult.Tag != ParserResultType.NotParsed", span="248-248"];
n63 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="var errors = ((NotParsed<T>)parserResult).Errors", span="251-251"];
n67 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="return AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current));", span="257-257"];
n85 [cluster="lambda expression", label="DefaultParsingErrorsHandler(parserResult, current)", span="257-257"];
n70 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="return err.Matched\r\n                ? AutoBuild(pr, current => DefaultParsingErrorsHandler(pr, current))\r\n                : AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current), true);", span="261-263"];
n92 [cluster="lambda expression", label="DefaultParsingErrorsHandler(parserResult, current)", span="263-263"];
n62 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="throw new ArgumentException(''Excepting NotParsed<T> type.'', ''parserResult'');", span="249-249"];
n64 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="errors.Any(e => e.Tag == ErrorType.VersionRequestedError)", span="253-253"];
n66 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="!errors.Any(e => e.Tag == ErrorType.HelpVerbRequestedError)", span="256-256"];
n68 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="var err = errors.OfType<HelpVerbRequestedError>().Single()", span="259-259"];
n65 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="return new HelpText(HeadingInfo.Default).AddPreOptionsLine(Environment.NewLine);", span="254-254"];
n78 [cluster="lambda expression", label="Entry lambda expression", span="253-253"];
n81 [cluster="lambda expression", label="Entry lambda expression", span="256-256"];
n69 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="var pr = new NotParsed<object>(TypeInfo.Create(err.Type), Enumerable.Empty<Error>())", span="260-260"];
n74 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
n75 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n76 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
n77 [cluster="CommandLine.TypeInfo.Create(System.Type)", label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29"];
n89 [cluster="lambda expression", label="DefaultParsingErrorsHandler(pr, current)", span="262-262"];
n71 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="246-246"];
n73 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="311-311"];
n72 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
n84 [cluster="lambda expression", label="Entry lambda expression", span="257-257"];
n88 [cluster="lambda expression", label="Entry lambda expression", span="262-262"];
n91 [cluster="lambda expression", label="Entry lambda expression", span="263-263"];
n79 [cluster="lambda expression", label="e.Tag == ErrorType.VersionRequestedError", span="253-253"];
n80 [cluster="lambda expression", label="Exit lambda expression", span="253-253"];
n82 [cluster="lambda expression", label="e.Tag == ErrorType.HelpVerbRequestedError", span="256-256"];
n83 [cluster="lambda expression", label="Exit lambda expression", span="256-256"];
n86 [cluster="lambda expression", label="Exit lambda expression", span="257-257"];
n87 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="271-271"];
n90 [cluster="lambda expression", label="Exit lambda expression", span="262-262"];
n93 [cluster="lambda expression", label="Exit lambda expression", span="263-263"];
n94 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="parserResult == null", span="273-273"];
n96 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="current == null", span="274-274"];
n98 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="FilterMeaningfulErrors(((NotParsed<T>)parserResult).Errors).Empty()", span="276-276"];
n99 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="return current;", span="277-277"];
n100 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="var errors = RenderParsingErrorsText(parserResult,\r\n                current.SentenceBuilder.FormatError,\r\n                current.SentenceBuilder.FormatMutuallyExclusiveSetErrors,\r\n                2)", span="279-282"];
n102 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="return current;", span="284-284"];
n103 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="current.AddPreOptionsLine(\r\n                string.Concat(Environment.NewLine, current.SentenceBuilder.ErrorsHeadingText()))", span="286-287"];
n105 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="lines.ForEach(\r\n                line => current.AddPreOptionsLine(line))", span="290-291"];
n116 [cluster="lambda expression", label="current.AddPreOptionsLine(line)", span="291-291"];
n106 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="return current;", span="293-293"];
n95 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="throw new ArgumentNullException(''parserResult'');", span="273-273"];
n97 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="throw new ArgumentNullException(''current'');", span="274-274"];
n108 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
n101 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="string.IsNullOrEmpty(errors)", span="283-283"];
n109 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="398-398"];
n104 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="var lines = errors.Split(\r\n                new[] { Environment.NewLine }, StringSplitOptions.None)", span="288-289"];
n110 [cluster="string.IsNullOrEmpty(string)", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
n111 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n112 [cluster="string.Concat(string, string)", label="Entry string.Concat(string, string)", span="0-0"];
n113 [cluster="string.Split(string[], System.StringSplitOptions)", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
n114 [cluster="System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)", label="Entry System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)", span="231-231"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="291-291"];
n107 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", label="Exit CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="271-271"];
n117 [cluster="lambda expression", label="Exit lambda expression", span="291-291"];
n118 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", label="Entry CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="301-301"];
n119 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", label="return info.ToString();", span="303-303"];
n120 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", label="Exit CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="301-301"];
n121 [cluster="CommandLine.Text.HelpText.ToString()", label="Entry CommandLine.Text.HelpText.ToString()", span="432-432"];
n122 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", label="return AddPreOptionsLine(value, MaximumDisplayWidth);", span="313-313"];
n123 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="311-311"];
n124 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="574-574"];
n125 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="321-321"];
n126 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", label="return AddLine(postOptionsHelp, value);", span="323-323"];
n127 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", label="Exit CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="321-321"];
n128 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="680-680"];
n129 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", label="result == null", span="334-334"];
n130 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", label="throw new ArgumentNullException(''result'');", span="334-334"];
n132 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", label="Exit CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="331-331"];
n133 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", label="Entry CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", span="491-491"];
n134 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="Entry CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="536-536"];
n135 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", label="types == null", span="350-350"];
n137 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", label="types.Length == 0", span="351-351"];
n139 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", label="return AddOptionsImpl(\r\n                AdaptVerbsToSpecifications(types),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="353-356"];
n136 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", label="throw new ArgumentNullException(''types'');", span="350-350"];
n138 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", label="throw new ArgumentOutOfRangeException(''types'');", span="351-351"];
n140 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", label="Exit CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="348-348"];
n141 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
n142 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", label="Entry CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="524-524"];
n143 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", label="Entry CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", span="365-365"];
n144 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", label="result == null", span="367-367"];
n145 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", label="throw new ArgumentNullException(''result'');", span="367-367"];
n147 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", label="Exit CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", span="365-365"];
n148 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", label="Entry CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="382-382"];
n149 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", label="types == null", span="384-384"];
n151 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", label="types.Length == 0", span="385-385"];
n153 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", label="return AddOptionsImpl(AdaptVerbsToSpecifications(types), SentenceBuilder.RequiredWord(), maximumLength);", span="387-387"];
n150 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", label="throw new ArgumentNullException(''types'');", span="384-384"];
n152 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", label="throw new ArgumentOutOfRangeException(''types'');", span="385-385"];
n154 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", label="Exit CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="382-382"];
n155 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="parserResult == null", span="404-404"];
n157 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="var meaningfulErrors =\r\n                FilterMeaningfulErrors(((NotParsed<T>)parserResult).Errors)", span="406-407"];
n161 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="meaningfulErrors\r\n                .Where(e => e.Tag != ErrorType.MutuallyExclusiveSetError)\r\n                .ForEach(\r\n                    error =>\r\n                        {\r\n                            var line = new StringBuilder(indent.Spaces())\r\n                                .Append(formatError(error)); \r\n                            text.AppendLine(line.ToString());\r\n                        })", span="412-420"];
n173 [cluster="lambda expression", label="var line = new StringBuilder(indent.Spaces())\r\n                                .Append(formatError(error))", span="417-418"];
n162 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="return text.AppendIfNotEmpty(\r\n                formatMutuallyExclusiveSetErrors(\r\n                    meaningfulErrors.OfType<MutuallyExclusiveSetError>()))\r\n                .ToString();", span="422-425"];
n156 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="throw new ArgumentNullException(''parserResult'');", span="404-404"];
n158 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="meaningfulErrors.Empty()", span="408-408"];
n159 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="return string.Empty;", span="409-409"];
n160 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="var text = new StringBuilder()", span="411-411"];
n164 [cluster="System.Text.StringBuilder.StringBuilder()", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
n174 [cluster="lambda expression", label="text.AppendLine(line.ToString())", span="419-419"];
n165 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n166 [cluster="Unk.ForEach", label="Entry Unk.ForEach", span=""];
n169 [cluster="lambda expression", label="Entry lambda expression", span="413-413"];
n172 [cluster="lambda expression", label="Entry lambda expression", span="415-420"];
n163 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", label="Exit CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="398-398"];
n167 [cluster="System.Text.StringBuilder.AppendIfNotEmpty(params string[])", label="Entry System.Text.StringBuilder.AppendIfNotEmpty(params string[])", span="57-57"];
n168 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n170 [cluster="lambda expression", label="e.Tag != ErrorType.MutuallyExclusiveSetError", span="413-413"];
n171 [cluster="lambda expression", label="Exit lambda expression", span="413-413"];
n176 [cluster="System.Text.StringBuilder.StringBuilder(string)", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
n177 [cluster="int.Spaces()", label="Entry int.Spaces()", span="30-30"];
n178 [cluster="Unk.formatError", label="Entry Unk.formatError", span=""];
n179 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
n175 [cluster="lambda expression", label="Exit lambda expression", span="415-420"];
n180 [cluster="System.Text.StringBuilder.AppendLine(string)", label="Entry System.Text.StringBuilder.AppendLine(string)", span="0-0"];
n181 [cluster="CommandLine.Text.HelpText.ToString()", label="int ExtraLength = 10", span="434-434"];
n182 [cluster="CommandLine.Text.HelpText.ToString()", label="return\r\n                new StringBuilder(\r\n                    heading.SafeLength() + copyright.SafeLength() + preOptionsHelp.SafeLength() +\r\n                        optionsHelp.SafeLength() + ExtraLength).Append(heading)\r\n                    .AppendWhen(!string.IsNullOrEmpty(copyright), Environment.NewLine, copyright)\r\n                    .AppendWhen(preOptionsHelp.Length > 0, Environment.NewLine, preOptionsHelp.ToString())\r\n                    .AppendWhen(\r\n                        optionsHelp != null && optionsHelp.Length > 0,\r\n                        Environment.NewLine,\r\n                        Environment.NewLine,\r\n                        optionsHelp.SafeToString())\r\n                    .AppendWhen(postOptionsHelp.Length > 0, Environment.NewLine, postOptionsHelp.ToString())\r\n                .ToString();", span="435-447"];
n183 [cluster="CommandLine.Text.HelpText.ToString()", label="Exit CommandLine.Text.HelpText.ToString()", span="432-432"];
n184 [cluster="string.SafeLength()", label="Entry string.SafeLength()", span="40-40"];
n185 [cluster="System.Text.StringBuilder.SafeLength()", label="Entry System.Text.StringBuilder.SafeLength()", span="73-73"];
n186 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
n187 [cluster="System.Text.StringBuilder.SafeToString()", label="Entry System.Text.StringBuilder.SafeToString()", span="66-66"];
n188 [cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="return errors.Where(e => e.Tag != ErrorType.HelpRequestedError && e.Tag != ErrorType.HelpVerbRequestedError);", span="452-452"];
n189 [cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Exit CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="450-450"];
n190 [cluster="lambda expression", label="Entry lambda expression", span="452-452"];
n191 [cluster="lambda expression", label="e.Tag != ErrorType.HelpRequestedError && e.Tag != ErrorType.HelpVerbRequestedError", span="452-452"];
n192 [cluster="lambda expression", label="Exit lambda expression", span="452-452"];
n193 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="455-455"];
n194 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="builder.AppendWhen(builder.Length > 0, Environment.NewLine)", span="457-457"];
n196 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="var words = value.Split(' ')", span="461-461"];
n199 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="words[i].Length < (maximumLength - wordBuffer)", span="464-464"];
n200 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="builder.Append(words[i])", span="466-466"];
n202 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="(maximumLength - wordBuffer) > 1 && i != words.Length - 1", span="468-468"];
n203 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="builder.Append('' '')", span="470-470"];
n205 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="words[i].Length >= maximumLength && wordBuffer == 0", span="474-474"];
n206 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="builder.Append(words[i].Substring(0, maximumLength))", span="476-476"];
n207 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="wordBuffer = maximumLength", span="477-477"];
n209 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="value = value.Substring(Math.Min(wordBuffer, value.Length))", span="483-483"];
n210 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="builder.AppendWhen(value.Length > 0, Environment.NewLine)", span="484-484"];
n211 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="value.Length > maximumLength", span="486-486"];
n212 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="builder.Append(value)", span="488-488"];
n195 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="var wordBuffer = 0", span="460-460"];
n201 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="wordBuffer += words[i].Length", span="467-467"];
n197 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="var i = 0", span="462-462"];
n214 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
n198 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="i < words.Length", span="462-462"];
n208 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="i++", span="462-462"];
n204 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="wordBuffer++", span="471-471"];
n215 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n216 [cluster="System.Math.Min(int, int)", label="Entry System.Math.Min(int, int)", span="0-0"];
n217 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
n213 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="455-455"];
n218 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", label="var specs = type.GetSpecifications(Specification.FromProperty)", span="493-493"];
n219 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", label="var optionSpecs = specs\r\n                .OfType<OptionSpecification>()\r\n                .Concat(new[] { MakeHelpEntry(), MakeVersionEntry() })", span="494-496"];
n223 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="17-17"];
n220 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", label="var valueSpecs = specs\r\n                .OfType<ValueSpecification>()\r\n                .OrderBy(v => v.Index)", span="497-499"];
n224 [cluster="CommandLine.Text.HelpText.MakeHelpEntry()", label="Entry CommandLine.Text.HelpText.MakeHelpEntry()", span="554-554"];
n225 [cluster="CommandLine.Text.HelpText.MakeVersionEntry()", label="Entry CommandLine.Text.HelpText.MakeVersionEntry()", span="564-564"];
n226 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n221 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", label="return Enumerable.Empty<Specification>()\r\n                .Concat(optionSpecs)\r\n                .Concat(valueSpecs);", span="500-502"];
n227 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
n228 [cluster="lambda expression", label="Entry lambda expression", span="499-499"];
n222 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", label="Exit CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", span="491-491"];
n229 [cluster="lambda expression", label="v.Index", span="499-499"];
n230 [cluster="lambda expression", label="Exit lambda expression", span="499-499"];
n231 [cluster="CommandLine.Text.HelpText.GetUsageFromType(System.Type)", label="Entry CommandLine.Text.HelpText.GetUsageFromType(System.Type)", span="505-505"];
n233 [cluster="CommandLine.Text.HelpText.GetUsageFromType(System.Type)", label="Exit CommandLine.Text.HelpText.GetUsageFromType(System.Type)", span="505-505"];
n234 [cluster="System.Type.GetUsageData()", label="Entry System.Type.GetUsageData()", span="39-39"];
n235 [cluster="Unk.Map", label="Entry Unk.Map", span=""];
n236 [cluster="lambda expression", label="Entry lambda expression", span="508-521"];
n237 [cluster="lambda expression", label="var prop = tuple.Item1", span="510-510"];
n238 [cluster="lambda expression", label="var attr = tuple.Item2", span="511-511"];
n239 [cluster="lambda expression", label="var examples = (IEnumerable<Example>)prop\r\n                        .GetValue(null, BindingFlags.Public | BindingFlags.Static | BindingFlags.GetProperty, null, null, null)", span="513-514"];
n240 [cluster="lambda expression", label="var groups = attr.Groups", span="515-515"];
n243 [cluster="System.Reflection.PropertyInfo.GetValue(object, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo)", label="Entry System.Reflection.PropertyInfo.GetValue(object, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo)", span="0-0"];
n242 [cluster="lambda expression", label="Exit lambda expression", span="508-521"];
n244 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n245 [cluster="lambda expression", label="Entry lambda expression", span="518-520"];
n247 [cluster="lambda expression", label="Exit lambda expression", span="518-520"];
n248 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
n249 [cluster="CommandLine.Text.Example.WithGroupDescription(string)", label="Entry CommandLine.Text.Example.WithGroupDescription(string)", span="117-117"];
n250 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", label="return (from verbTuple in Verb.SelectFromTypes(types)\r\n                    select\r\n                        OptionSpecification.NewSwitch(\r\n                            string.Empty,\r\n                            verbTuple.Item1.Name,\r\n                            false,\r\n                            verbTuple.Item1.HelpText,\r\n                            string.Empty)).Concat(new[] { MakeHelpEntry(), MakeVersionEntry() });", span="526-533"];
n251 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", label="Exit CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="524-524"];
n252 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
n253 [cluster="CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", label="Entry CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", span="45-45"];
n254 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
n255 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="var maxLength = GetMaxLength(specifications)", span="541-541"];
n257 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="var remainingSpace = maximumLength - (maxLength + 6)", span="545-545"];
n258 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="specifications.ForEach(\r\n                option =>\r\n                    AddOption(requiredWord, maxLength, option, remainingSpace))", span="547-549"];
n263 [cluster="lambda expression", label="AddOption(requiredWord, maxLength, option, remainingSpace)", span="549-549"];
n256 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="optionsHelp = new StringBuilder(BuilderCapacity)", span="543-543"];
n261 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", label="Entry CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="687-687"];
n259 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="return this;", span="551-551"];
n262 [cluster="lambda expression", label="Entry lambda expression", span="548-549"];
n260 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="Exit CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="536-536"];
n264 [cluster="lambda expression", label="Exit lambda expression", span="548-549"];
n265 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="Entry CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="581-581"];
n266 [cluster="CommandLine.Text.HelpText.MakeHelpEntry()", label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''help'',\r\n                false,\r\n                sentenceBuilder.HelpCommandText(AddDashesToOption),\r\n                string.Empty);", span="556-561"];
n267 [cluster="CommandLine.Text.HelpText.MakeHelpEntry()", label="Exit CommandLine.Text.HelpText.MakeHelpEntry()", span="554-554"];
n268 [cluster="CommandLine.Text.HelpText.MakeVersionEntry()", label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''version'',\r\n                false,\r\n                sentenceBuilder.VersionCommandText(AddDashesToOption),\r\n                string.Empty);", span="566-571"];
n269 [cluster="CommandLine.Text.HelpText.MakeVersionEntry()", label="Exit CommandLine.Text.HelpText.MakeVersionEntry()", span="564-564"];
n270 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", label="AddLine(preOptionsHelp, value, maximumLength)", span="576-576"];
n271 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", label="return this;", span="578-578"];
n272 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="574-574"];
n273 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.Append(''  '')", span="583-583"];
n274 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="var name = new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.Tag == SpecificationType.Option,\r\n                    it => it.Append(AddOptionName(maxLength, (OptionSpecification)specification)),\r\n                    it => it.Append(AddValueName(maxLength, (ValueSpecification)specification)))", span="584-588"];
n310 [cluster="lambda expression", label="it.Append(AddOptionName(maxLength, (OptionSpecification)specification))", span="587-587"];
n314 [cluster="lambda expression", label="it.Append(AddValueName(maxLength, (ValueSpecification)specification))", span="588-588"];
n275 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp\r\n                .Append(name.Length < maxLength ? name.ToString().PadRight(maxLength) : name.ToString())\r\n                .Append(''    '')", span="590-592"];
n276 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="var optionHelpText = specification.HelpText", span="594-594"];
n277 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="addEnumValuesToHelpText && specification.EnumValues.Any()", span="596-596"];
n278 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionHelpText += '' Valid values: '' + string.Join('', '', specification.EnumValues)", span="597-597"];
n279 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="specification.DefaultValue.Do(\r\n                defaultValue => optionHelpText = ''(Default: {0}) ''.FormatLocal(defaultValue) + optionHelpText)", span="599-600"];
n280 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="specification.Required", span="602-602"];
n281 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionHelpText = ''{0} ''.FormatInvariant(requiredWord) + optionHelpText", span="603-603"];
n287 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="words[i].Length < (widthOfHelpText - wordBuffer)", span="613-613"];
n290 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="(widthOfHelpText - wordBuffer) > 1 && i != words.Length - 1", span="617-617"];
n293 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="words[i].Length >= widthOfHelpText && wordBuffer == 0", span="623-623"];
n294 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.Append(words[i].Substring(0, widthOfHelpText))", span="625-625"];
n295 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="wordBuffer = widthOfHelpText", span="626-626"];
n298 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.AppendWhen(optionHelpText.Length > 0, Environment.NewLine,\r\n                        new string(' ', maxLength + 6))", span="634-635"];
n299 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionHelpText.Length > widthOfHelpText", span="637-637"];
n303 [cluster="System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", label="Entry System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="41-41"];
n309 [cluster="lambda expression", label="Entry lambda expression", span="587-587"];
n313 [cluster="lambda expression", label="Entry lambda expression", span="588-588"];
n304 [cluster="string.PadRight(int)", label="Entry string.PadRight(int)", span="0-0"];
n305 [cluster="string.Join(string, System.Collections.Generic.IEnumerable<string>)", label="Entry string.Join(string, System.Collections.Generic.IEnumerable<string>)", span="0-0"];
n317 [cluster="lambda expression", label="Entry lambda expression", span="600-600"];
n318 [cluster="lambda expression", label="optionHelpText = ''(Default: {0}) ''.FormatLocal(defaultValue) + optionHelpText", span="600-600"];
n282 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="!string.IsNullOrEmpty(optionHelpText)", span="605-605"];
n284 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="var words = optionHelpText.Split(' ')", span="610-610"];
n297 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionHelpText = optionHelpText.Substring(Math.Min(wordBuffer, optionHelpText.Length)).Trim()", span="633-633"];
n300 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp\r\n                .Append(optionHelpText)\r\n                .Append(Environment.NewLine)\r\n                .AppendWhen(additionalNewLineAfterOption, Environment.NewLine)", span="640-643"];
n306 [cluster="string.FormatInvariant(params object[])", label="Entry string.FormatInvariant(params object[])", span="20-20"];
n283 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="var wordBuffer = 0", span="609-609"];
n289 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="wordBuffer += words[i].Length", span="616-616"];
n285 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="var i = 0", span="611-611"];
n286 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="i < words.Length", span="611-611"];
n288 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.Append(words[i])", span="615-615"];
n296 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="i++", span="611-611"];
n292 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="wordBuffer++", span="620-620"];
n291 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.Append('' '')", span="619-619"];
n307 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
n308 [cluster="string.String(char, int)", label="Entry string.String(char, int)", span="0-0"];
n301 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="return this;", span="645-645"];
n302 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", label="Exit CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="581-581"];
n311 [cluster="lambda expression", label="Exit lambda expression", span="587-587"];
n312 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", label="Entry CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="648-648"];
n315 [cluster="lambda expression", label="Exit lambda expression", span="588-588"];
n316 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", label="Entry CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="668-668"];
n319 [cluster="lambda expression", label="Exit lambda expression", span="600-600"];
n320 [cluster="string.FormatLocal(params object[])", label="Entry string.FormatLocal(params object[])", span="25-25"];
n321 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", label="return\r\n                new StringBuilder(maxLength)\r\n                    .MapIf(\r\n                        specification.ShortName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', ''))\r\n                    .MapIf(\r\n                        specification.LongName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue))\r\n                    .ToString();", span="650-665"];
n325 [cluster="lambda expression", label="it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', '')", span="654-658"];
n331 [cluster="lambda expression", label="it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue)", span="661-664"];
n322 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", label="Exit CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="648-648"];
n323 [cluster="System.Text.StringBuilder.MapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", label="Entry System.Text.StringBuilder.MapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="49-49"];
n324 [cluster="lambda expression", label="Entry lambda expression", span="654-658"];
n330 [cluster="lambda expression", label="Entry lambda expression", span="661-664"];
n326 [cluster="lambda expression", label="Exit lambda expression", span="654-658"];
n327 [cluster="System.Text.StringBuilder.AppendWhen(bool, params char[])", label="Entry System.Text.StringBuilder.AppendWhen(bool, params char[])", span="18-18"];
n328 [cluster="System.Text.StringBuilder.AppendFormat(string, object)", label="Entry System.Text.StringBuilder.AppendFormat(string, object)", span="0-0"];
n329 [cluster="System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])", label="Entry System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])", span="27-27"];
n332 [cluster="lambda expression", label="Exit lambda expression", span="661-664"];
n333 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", label="return new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.MetaName.Length > 0,\r\n                    it => it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index),\r\n                    it => it.AppendFormat(''value pos. {0}'', specification.Index))\r\n                .AppendFormatWhen(\r\n                    specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                .ToString();", span="670-677"];
n336 [cluster="lambda expression", label="it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index)", span="673-673"];
n340 [cluster="lambda expression", label="it.AppendFormat(''value pos. {0}'', specification.Index)", span="674-674"];
n334 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", label="Exit CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="668-668"];
n335 [cluster="lambda expression", label="Entry lambda expression", span="673-673"];
n339 [cluster="lambda expression", label="Entry lambda expression", span="674-674"];
n337 [cluster="lambda expression", label="Exit lambda expression", span="673-673"];
n338 [cluster="System.Text.StringBuilder.AppendFormat(string, object, object)", label="Entry System.Text.StringBuilder.AppendFormat(string, object, object)", span="0-0"];
n341 [cluster="lambda expression", label="Exit lambda expression", span="674-674"];
n342 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", label="AddLine(builder, value, MaximumDisplayWidth)", span="682-682"];
n343 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", label="return this;", span="684-684"];
n344 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="680-680"];
n345 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", label="return specifications.Aggregate(0,\r\n                (length, spec) =>\r\n                    {\r\n                        var specLength = spec.Tag == SpecificationType.Option\r\n                            ? GetMaxOptionLength((OptionSpecification)spec)\r\n                            : GetMaxValueLength((ValueSpecification)spec);\r\n\r\n                        return Math.Max(length, specLength);\r\n                    });", span="689-697"];
n346 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", label="Exit CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="687-687"];
n347 [cluster="Unk.Aggregate", label="Entry Unk.Aggregate", span=""];
n348 [cluster="lambda expression", label="Entry lambda expression", span="690-697"];
n349 [cluster="lambda expression", label="var specLength = spec.Tag == SpecificationType.Option\r\n                            ? GetMaxOptionLength((OptionSpecification)spec)\r\n                            : GetMaxValueLength((ValueSpecification)spec)", span="692-694"];
n350 [cluster="lambda expression", label="return Math.Max(length, specLength);", span="696-696"];
n352 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="Entry CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="701-701"];
n353 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="Entry CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="736-736"];
n351 [cluster="lambda expression", label="Exit lambda expression", span="690-697"];
n354 [cluster="System.Math.Max(int, int)", label="Entry System.Math.Max(int, int)", span="0-0"];
n355 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="var specLength = 0", span="703-703"];
n356 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="var hasShort = spec.ShortName.Length > 0", span="705-705"];
n357 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="var hasLong = spec.LongName.Length > 0", span="706-706"];
n359 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="spec.MetaValue.Length > 0", span="709-709"];
n360 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="metaLength = spec.MetaValue.Length + 1", span="710-710"];
n367 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="specLength += spec.LongName.Length", span="723-723"];
n362 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="++specLength", span="714-714"];
n372 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="specLength += 2", span="731-731"];
n373 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="return specLength;", span="733-733"];
n361 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label=hasShort, span="712-712"];
n371 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="hasShort && hasLong", span="730-730"];
n358 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="var metaLength = 0", span="708-708"];
n366 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label=hasLong, span="721-721"];
n365 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="specLength += metaLength", span="718-718"];
n370 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="specLength += metaLength", span="727-727"];
n363 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label=AddDashesToOption, span="715-715"];
n364 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="++specLength", span="716-716"];
n368 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label=AddDashesToOption, span="724-724"];
n369 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="specLength += 2", span="725-725"];
n374 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", label="Exit CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="701-701"];
n375 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="var specLength = 0", span="738-738"];
n376 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="var hasMeta = spec.MetaName.Length > 0", span="740-740"];
n378 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="spec.MetaValue.Length > 0", span="743-743"];
n379 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="metaLength = spec.MetaValue.Length + 1", span="744-744"];
n381 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="specLength += spec.MetaName.Length + spec.Index.ToStringInvariant().Length + 8", span="747-747"];
n382 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="specLength += spec.Index.ToStringInvariant().Length + 11", span="749-749"];
n377 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="var metaLength = 0", span="742-742"];
n380 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label=hasMeta, span="746-746"];
n383 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="specLength += metaLength", span="751-751"];
n386 [cluster="T.ToStringInvariant<T>()", label="Entry T.ToStringInvariant<T>()", span="15-15"];
n384 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="return specLength;", span="753-753"];
n385 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", label="Exit CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="736-736"];
d34 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", color=green, community=0, label="(verbsIndex && parserResult.TypeInfo.Choices.Any()) || errors.Any(e => e.Tag == ErrorType.NoVerbSelectedError)", prediction=0, span="225-225"];
d46 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d36 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", color=green, community=0, label="auto.AddVerbs(parserResult.TypeInfo.Choices.ToArray())", prediction=0, span="228-228"];
d58 [cluster="lambda expression", color=green, community=0, label="e.Tag == ErrorType.NoVerbSelectedError", prediction=2, span="225-225"];
d131 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", color=green, community=0, label="return AddOptionsImpl(\r\n                GetSpecificationsFromType(result.TypeInfo.Current),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", prediction=3, span="336-339"];
d133 [cluster="Unk.GetSpecificationsFromType", label="Entry Unk.GetSpecificationsFromType", span=""];
d134 [cluster="Unk.AddOptionsImpl", label="Entry Unk.AddOptionsImpl", span=""];
d146 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", color=green, community=0, label="return AddOptionsImpl(\r\n                GetSpecificationsFromType(result.TypeInfo.Current),\r\n                SentenceBuilder.RequiredWord(),\r\n                maximumLength);", prediction=3, span="369-372"];
d243 [cluster="<invalid-global-code>.GetUsageFromType(System.Type)", color=green, community=0, label="return type.GetUsageData().Map(\r\n                tuple =>\r\n                {\r\n                    var prop = tuple.Item1;\r\n                    var attr = tuple.Item2;\r\n\r\n                    var examples = (IEnumerable<Example>)prop\r\n                        .GetValue(null, BindingFlags.Public | BindingFlags.Static | BindingFlags.GetProperty, null, null, null);\r\n                    var groups = attr.Groups;\r\n\r\n                    return examples.Select(example => groups.ContainsKey(example.Group)\r\n                        ? example.WithGroupDescription(groups[example.Group])\r\n                        : example)\r\n                            .OrderBy(x => x.Group)\r\n                            .ThenBy(x => x.GroupDescription)\r\n                        .Memorize();\r\n                });", prediction=5, span="536-552"];
d242 [cluster="<invalid-global-code>.GetUsageFromType(System.Type)", label="Entry <invalid-global-code>.GetUsageFromType(System.Type)", span="534-534"];
d244 [cluster="<invalid-global-code>.GetUsageFromType(System.Type)", label="Exit <invalid-global-code>.GetUsageFromType(System.Type)", span="534-534"];
d252 [cluster="lambda expression", color=green, community=0, label="return examples.Select(example => groups.ContainsKey(example.Group)\r\n                        ? example.WithGroupDescription(groups[example.Group])\r\n                        : example)\r\n                            .OrderBy(x => x.Group)\r\n                            .ThenBy(x => x.GroupDescription)\r\n                        .Memorize();", prediction=6, span="546-551"];
d256 [cluster="Unk.OrderBy", label="Entry Unk.OrderBy", span=""];
d257 [cluster="Unk.ThenBy", label="Entry Unk.ThenBy", span=""];
d258 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
d264 [cluster="lambda expression", label="Entry lambda expression", span="549-549"];
d267 [cluster="lambda expression", label="Entry lambda expression", span="550-550"];
d306 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="addEnumValuesToHelpText && specification.EnumValues.Any()", span="627-627"];
d139 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", label="return AddOptionsImpl(\r\n                AdaptVerbsToSpecifications(types),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="353-356"];
d153 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", label="return AddOptionsImpl(AdaptVerbsToSpecifications(types), SentenceBuilder.RequiredWord(), maximumLength);", span="387-387"];
d266 [cluster="lambda expression", label="Exit lambda expression", span="549-549"];
d265 [cluster="lambda expression", label="x.Group", span="549-549"];
d269 [cluster="lambda expression", label="Exit lambda expression", span="550-550"];
d268 [cluster="lambda expression", label="x.GroupDescription", span="550-550"];
d301 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="Entry <invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", span="612-612"];
d305 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="var optionHelpText = specification.HelpText", span="625-625"];
d307 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionHelpText += '' Valid values: '' + string.Join('', '', specification.EnumValues)", span="628-628"];
d308 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="specification.DefaultValue.Do(\r\n                defaultValue => optionHelpText = ''(Default: {0}) ''.FormatLocal(defaultValue) + optionHelpText)", span="630-631"];
d142 [cluster="Unk.AdaptVerbsToSpecifications", label="Entry Unk.AdaptVerbsToSpecifications", span=""];
d312 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="var wordBuffer = 0", span="640-640"];
d331 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="Exit <invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", span="612-612"];
d302 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.Append(''  '')", span="614-614"];
d303 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="var name = new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.Tag == SpecificationType.Option,\r\n                    it => it.Append(AddOptionName(maxLength, (OptionSpecification)specification)),\r\n                    it => it.Append(AddValueName(maxLength, (ValueSpecification)specification)))", span="615-619"];
d340 [cluster="lambda expression", label="it.Append(AddOptionName(maxLength, (OptionSpecification)specification))", span="618-618"];
d344 [cluster="lambda expression", label="it.Append(AddValueName(maxLength, (ValueSpecification)specification))", span="619-619"];
d304 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp\r\n                .Append(name.Length < maxLength ? name.ToString().PadRight(maxLength) : name.ToString())\r\n                .Append(''    '')", span="621-623"];
d309 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="specification.Required", span="633-633"];
d310 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionHelpText = ''{0} ''.FormatInvariant(requiredWord) + optionHelpText", span="634-634"];
d316 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="words[i].Length < (widthOfHelpText - wordBuffer)", span="644-644"];
d319 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="(widthOfHelpText - wordBuffer) > 1 && i != words.Length - 1", span="648-648"];
d322 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="words[i].Length >= widthOfHelpText && wordBuffer == 0", span="654-654"];
d323 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.Append(words[i].Substring(0, widthOfHelpText))", span="656-656"];
d324 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="wordBuffer = widthOfHelpText", span="657-657"];
d327 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.AppendWhen(optionHelpText.Length > 0, Environment.NewLine,\r\n                        new string(' ', maxLength + 6))", span="665-666"];
d328 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionHelpText.Length > widthOfHelpText", span="668-668"];
d311 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="!string.IsNullOrEmpty(optionHelpText)", span="636-636"];
d313 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="var words = optionHelpText.Split(' ')", span="641-641"];
d326 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionHelpText = optionHelpText.Substring(Math.Min(wordBuffer, optionHelpText.Length)).Trim()", span="664-664"];
d329 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp\r\n                .Append(optionHelpText)\r\n                .Append(Environment.NewLine)\r\n                .AppendWhen(additionalNewLineAfterOption, Environment.NewLine)", span="671-674"];
d318 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="wordBuffer += words[i].Length", span="647-647"];
d330 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="return this;", span="676-676"];
d191 [cluster="Unk.Append", label="Entry Unk.Append", span=""];
d24 [cluster="System.Text.StringBuilder.StringBuilder(int)", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
d332 [cluster="Unk.BimapIf", label="Entry Unk.BimapIf", span=""];
d342 [cluster="Unk.AddOptionName", label="Entry Unk.AddOptionName", span=""];
d346 [cluster="Unk.AddValueName", label="Entry Unk.AddValueName", span=""];
d334 [cluster="System.Collections.Generic.IEnumerable<TSource>.Append<TSource>(TSource)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Append<TSource>(TSource)", span="0-0"];
d314 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="var i = 0", span="642-642"];
d315 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="i < words.Length", span="642-642"];
d317 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.Append(words[i])", span="646-646"];
d320 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="optionsHelp.Append('' '')", span="650-650"];
d325 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="i++", span="642-642"];
d193 [cluster="Unk.AppendWhen", label="Entry Unk.AppendWhen", span=""];
d110 [cluster="string.IsNullOrEmpty(string)", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
d321 [cluster="<invalid-global-code>.AddOption(string, int, CommandLine.Core.Specification, int)", label="wordBuffer++", span="651-651"];
d432 [label=<invalid-global-code>, span=""];
d187 [cluster="<invalid-global-code>.ToString()", label="return\r\n                new StringBuilder(\r\n                    heading.SafeLength() + copyright.SafeLength() + preOptionsHelp.SafeLength() +\r\n                        optionsHelp.SafeLength() + ExtraLength).Append(heading)\r\n                    .AppendWhen(!string.IsNullOrEmpty(copyright), Environment.NewLine, copyright)\r\n                    .AppendWhen(preOptionsHelp.Length > 0, Environment.NewLine, preOptionsHelp.ToString())\r\n                    .AppendWhen(\r\n                        optionsHelp != null && optionsHelp.Length > 0,\r\n                        Environment.NewLine,\r\n                        Environment.NewLine,\r\n                        optionsHelp.SafeToString())\r\n                    .AppendWhen(postOptionsHelp.Length > 0, Environment.NewLine, postOptionsHelp.ToString())\r\n                .ToString();", span="464-476"];
d352 [cluster="<invalid-global-code>.AddOptionName(int, CommandLine.Core.OptionSpecification)", label="return\r\n                new StringBuilder(maxLength)\r\n                    .MapIf(\r\n                        specification.ShortName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', ''))\r\n                    .MapIf(\r\n                        specification.LongName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue))\r\n                    .ToString();", span="681-696"];
d364 [cluster="<invalid-global-code>.AddValueName(int, CommandLine.Core.ValueSpecification)", label="return new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.MetaName.Length > 0,\r\n                    it => it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index),\r\n                    it => it.AppendFormat(''value pos. {0}'', specification.Index))\r\n                .AppendFormatWhen(\r\n                    specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                .ToString();", span="701-708"];
d356 [cluster="lambda expression", label="it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', '')", span="685-689"];
d361 [cluster="lambda expression", label="it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue)", span="692-695"];
d281 [cluster="<invalid-global-code>.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="return this;", span="582-582"];
d299 [cluster="<invalid-global-code>.AddPreOptionsLine(string, int)", label="return this;", span="609-609"];
d376 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string)", label="return this;", span="715-715"];
d186 [cluster="<invalid-global-code>.ToString()", label="int ExtraLength = 10", span="463-463"];
d188 [cluster="<invalid-global-code>.ToString()", label="Exit <invalid-global-code>.ToString()", span="461-461"];
d189 [cluster="StringBuilder.cstr", label="Entry StringBuilder.cstr", span=""];
d190 [cluster="Unk.SafeLength", label="Entry Unk.SafeLength", span=""];
d192 [cluster="Unk.IsNullOrEmpty", label="Entry Unk.IsNullOrEmpty", span=""];
d194 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
d195 [cluster="Unk.SafeToString", label="Entry Unk.SafeToString", span=""];
d351 [cluster="<invalid-global-code>.AddOptionName(int, CommandLine.Core.OptionSpecification)", label="Entry <invalid-global-code>.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="679-679"];
d353 [cluster="<invalid-global-code>.AddOptionName(int, CommandLine.Core.OptionSpecification)", label="Exit <invalid-global-code>.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="679-679"];
d354 [cluster="Unk.MapIf", label="Entry Unk.MapIf", span=""];
d363 [cluster="<invalid-global-code>.AddValueName(int, CommandLine.Core.ValueSpecification)", label="Entry <invalid-global-code>.AddValueName(int, CommandLine.Core.ValueSpecification)", span="699-699"];
d365 [cluster="<invalid-global-code>.AddValueName(int, CommandLine.Core.ValueSpecification)", label="Exit <invalid-global-code>.AddValueName(int, CommandLine.Core.ValueSpecification)", span="699-699"];
d366 [cluster="System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", label="Entry System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="41-41"];
d223 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
d280 [cluster="<invalid-global-code>.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="specifications.ForEach(\r\n                option =>\r\n                    AddOption(requiredWord, maxLength, option, remainingSpace))", span="578-580"];
d282 [cluster="<invalid-global-code>.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="Exit <invalid-global-code>.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="567-567"];
d298 [cluster="<invalid-global-code>.AddPreOptionsLine(string, int)", label="AddLine(preOptionsHelp, value, maximumLength)", span="607-607"];
d300 [cluster="<invalid-global-code>.AddPreOptionsLine(string, int)", label="Exit <invalid-global-code>.AddPreOptionsLine(string, int)", span="605-605"];
d375 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string)", label="AddLine(builder, value, MaximumDisplayWidth)", span="713-713"];
d377 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string)", label="Exit <invalid-global-code>.AddLine(System.Text.StringBuilder, string)", span="711-711"];
d185 [cluster="<invalid-global-code>.ToString()", label="Entry <invalid-global-code>.ToString()", span="461-461"];
d278 [cluster="<invalid-global-code>.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="optionsHelp = new StringBuilder(BuilderCapacity)", span="574-574"];
d368 [cluster="lambda expression", label="it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index)", span="704-704"];
d372 [cluster="lambda expression", label="it.AppendFormat(''value pos. {0}'', specification.Index)", span="705-705"];
d203 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="builder.AppendWhen(builder.Length > 0, Environment.NewLine)", span="486-486"];
d219 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="builder.AppendWhen(value.Length > 0, Environment.NewLine)", span="513-513"];
d276 [cluster="<invalid-global-code>.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="Entry <invalid-global-code>.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="567-567"];
d277 [cluster="<invalid-global-code>.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="var maxLength = GetMaxLength(specifications)", span="572-572"];
d279 [cluster="<invalid-global-code>.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", label="var remainingSpace = maximumLength - (maxLength + 6)", span="576-576"];
d297 [cluster="<invalid-global-code>.AddPreOptionsLine(string, int)", label="Entry <invalid-global-code>.AddPreOptionsLine(string, int)", span="605-605"];
d128 [cluster="Unk.AddLine", label="Entry Unk.AddLine", span=""];
d374 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string)", label="Entry <invalid-global-code>.AddLine(System.Text.StringBuilder, string)", span="711-711"];
d202 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="Entry <invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", span="484-484"];
d220 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="value.Length > maximumLength", span="515-515"];
d204 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="var wordBuffer = 0", span="489-489"];
d218 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="value = value.Substring(Math.Min(wordBuffer, value.Length))", span="512-512"];
d285 [cluster="lambda expression", label="AddOption(requiredWord, maxLength, option, remainingSpace)", span="580-580"];
d283 [cluster="Unk.GetMaxLength", label="Entry Unk.GetMaxLength", span=""];
d126 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", label="return AddLine(postOptionsHelp, value);", span="323-323"];
d222 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="Exit <invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", span="484-484"];
d205 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="var words = value.Split(' ')", span="490-490"];
d208 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="words[i].Length < (maximumLength - wordBuffer)", span="493-493"];
d209 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="builder.Append(words[i])", span="495-495"];
d211 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="(maximumLength - wordBuffer) > 1 && i != words.Length - 1", span="497-497"];
d212 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="builder.Append('' '')", span="499-499"];
d214 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="words[i].Length >= maximumLength && wordBuffer == 0", span="503-503"];
d215 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="builder.Append(words[i].Substring(0, maximumLength))", span="505-505"];
d216 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="wordBuffer = maximumLength", span="506-506"];
d221 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="builder.Append(value)", span="517-517"];
d210 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="wordBuffer += words[i].Length", span="496-496"];
d207 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="i < words.Length", span="491-491"];
d213 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="wordBuffer++", span="500-500"];
d287 [cluster="Unk.AddOption", label="Entry Unk.AddOption", span=""];
d206 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="var i = 0", span="491-491"];
d181 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
d217 [cluster="<invalid-global-code>.AddLine(System.Text.StringBuilder, string, int)", label="i++", span="491-491"];
m0_4 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36"];
m0_31 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture)", span="38-38"];
m0_32 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="result.Match(_ => { }, e => e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="39-40"];
m0_33 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="return Maybe.OfEither(result);", span="41-41"];
m0_34 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="36-36"];
m0_35 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
m0_44 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Func<string, object> changeType = input =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                };\r\n\r\n                return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();\r\n            }", span="46-74"];
m0_45 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Func<string, object> makeType = input =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { input });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="76-87"];
m0_46 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="return Either.Protect(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType, value);", span="89-92"];
m0_47 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="44-44"];
m0_0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
m0_2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
m0_101 [cluster="System.Enum.IsDefined(System.Type, object)", file="ParserResult.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m0_13 [cluster="System.ApplicationException.ApplicationException(string)", file="ParserResult.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m0_76 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="ParserResult.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="14-14"];
m0_70 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="ParserResult.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8"];
m0_71 [cluster="System.Nullable.GetUnderlyingType(System.Type)", file="ParserResult.cs", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
m0_99 [cluster="System.Enum.Parse(System.Type, string)", file="ParserResult.cs", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
m0_12 [cluster="T.ToMaybe<T>()", file="ParserResult.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m0_19 [cluster="CSharpx.Maybe.Just<T>(T)", file="ParserResult.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m0_58 [cluster="System.Func<TResult>.Invoke()", file="ParserResult.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_81 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="76-87"];
m0_21 [cluster="lambda expression", file="ParserResult.cs", label="ChangeTypeScalar(value, type, conversionCulture)", span="29-29"];
m0_20 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="29-29"];
m0_24 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="31-31"];
m0_28 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="33-33"];
m0_22 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="29-29"];
m0_25 [cluster="lambda expression", file="ParserResult.cs", label="a.MatchNothing()", span="31-31"];
m0_26 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="31-31"];
m0_29 [cluster="lambda expression", file="ParserResult.cs", label="((Just<object>)c).Value", span="33-33"];
m0_30 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="33-33"];
m0_38 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="39-39"];
m0_40 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="39-40"];
m0_39 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="39-39"];
m0_41 [cluster="lambda expression", file="ParserResult.cs", label="e.RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="39-40"];
m0_42 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="39-40"];
m0_52 [cluster="lambda expression", file="ParserResult.cs", label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (input == null) ? empty() : withValue();\r\n                }", span="48-69"];
m0_60 [cluster="lambda expression", file="ParserResult.cs", label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="50-50"];
m0_61 [cluster="lambda expression", file="ParserResult.cs", label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="52-56"];
m0_68 [cluster="lambda expression", file="ParserResult.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="54-56"];
m0_62 [cluster="lambda expression", file="ParserResult.cs", label="var type = getUnderlyingType() ?? conversionType", span="58-58"];
m0_63 [cluster="lambda expression", file="ParserResult.cs", label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="60-64"];
m0_73 [cluster="lambda expression", file="ParserResult.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(input, type, conversionCulture))\r\n                                : Convert.ChangeType(input, type, conversionCulture)", span="62-64"];
m0_53 [cluster="lambda expression", file="ParserResult.cs", label="return input.IsBooleanString()\r\n                    ? input.ToBoolean() : conversionType.IsEnum\r\n                        ? input.ToEnum(conversionType) : safeChangeType();", span="71-73"];
m0_82 [cluster="lambda expression", file="ParserResult.cs", label="var ctor = conversionType.GetConstructor(new[] { typeof(string) })", span="80-80"];
m0_65 [cluster="lambda expression", file="ParserResult.cs", label="return (input == null) ? empty() : withValue();", span="68-68"];
m0_83 [cluster="lambda expression", file="ParserResult.cs", label="return ctor.Invoke(new object[] { input });", span="81-81"];
m0_51 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="46-74"];
m0_54 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="46-74"];
m0_59 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="48-69"];
m0_64 [cluster="lambda expression", file="ParserResult.cs", label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66"];
m0_78 [cluster="lambda expression", file="ParserResult.cs", label="isFsOption ? FSharpOptionHelper.None(type) : null", span="66-66"];
m0_66 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="48-69"];
m0_67 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="53-56"];
m0_69 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="53-56"];
m0_72 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="61-64"];
m0_74 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="61-64"];
m0_77 [cluster="lambda expression", file="ParserResult.cs", label="Entry lambda expression", span="66-66"];
m0_79 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="66-66"];
m0_84 [cluster="lambda expression", file="ParserResult.cs", label=Exception, span="83-83"];
m0_85 [cluster="lambda expression", file="ParserResult.cs", label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="85-85"];
m0_86 [cluster="lambda expression", file="ParserResult.cs", label="Exit lambda expression", span="76-87"];
m0_43 [cluster="Unk.RethrowWhenAbsentIn", file="ParserResult.cs", label="Entry Unk.RethrowWhenAbsentIn", span=""];
m0_75 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="ParserResult.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m0_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="ParserResult.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_57 [cluster="string.ToEnum(System.Type)", file="ParserResult.cs", label="Entry string.ToEnum(System.Type)", span="95-95"];
m0_49 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="ParserResult.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="35-35"];
m0_48 [cluster="System.Type.IsPrimitiveEx()", file="ParserResult.cs", label="Entry System.Type.IsPrimitiveEx()", span="209-209"];
m0_5 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
m0_7 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture))", span="29-29"];
m0_8 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="31-33"];
m0_9 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="ParserResult.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="20-20"];
m0_15 [cluster="Unk.Select", file="ParserResult.cs", label="Entry Unk.Select", span=""];
m0_23 [cluster="Unk.ChangeTypeScalar", file="ParserResult.cs", label="Entry Unk.ChangeTypeScalar", span=""];
m0_37 [cluster="Unk.OfEither", file="ParserResult.cs", label="Entry Unk.OfEither", span=""];
m0_36 [cluster="Unk.Match", file="ParserResult.cs", label="Entry Unk.Match", span=""];
m0_10 [cluster="System.Type.GetGenericArguments()", file="ParserResult.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_50 [cluster="Unk.Protect", file="ParserResult.cs", label="Entry Unk.Protect", span=""];
m0_56 [cluster="string.ToBoolean()", file="ParserResult.cs", label="Entry string.ToBoolean()", span="66-66"];
m0_89 [cluster="System.FormatException.FormatException(string)", file="ParserResult.cs", label="Entry System.FormatException.FormatException(string)", span="0-0"];
m0_87 [cluster="System.Type.GetConstructor(System.Type[])", file="ParserResult.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m0_17 [cluster="CSharpx.Maybe.Nothing<T>()", file="ParserResult.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m0_14 [cluster="Unk.FromJust", file="ParserResult.cs", label="Entry Unk.FromJust", span=""];
m0_90 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="ParserResult.cs", label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
m0_91 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="ParserResult.cs", label="object parsedValue", span="97-97"];
m0_92 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="ParserResult.cs", label="parsedValue = Enum.Parse(conversionType, value)", span="100-100"];
m0_95 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="ParserResult.cs", label="Enum.IsDefined(conversionType, parsedValue)", span="106-106"];
m0_93 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="ParserResult.cs", label=ArgumentException, span="102-102"];
m0_96 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="ParserResult.cs", label="return parsedValue;", span="108-108"];
m0_94 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="ParserResult.cs", label="throw new FormatException();", span="104-104"];
m0_97 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="ParserResult.cs", label="throw new FormatException();", span="110-110"];
m0_98 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="ParserResult.cs", label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="95-95"];
m0_55 [cluster="string.IsBooleanString()", file="ParserResult.cs", label="Entry string.IsBooleanString()", span="60-60"];
m0_27 [cluster="Unk.MatchNothing", file="ParserResult.cs", label="Entry Unk.MatchNothing", span=""];
m0_88 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="ParserResult.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m0_18 [cluster="Unk.ToUntypedArray", file="ParserResult.cs", label="Entry Unk.ToUntypedArray", span=""];
m0_100 [cluster="System.FormatException.FormatException()", file="ParserResult.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m0_80 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="ParserResult.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="22-22"];
m0_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="ParserResult.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m0_102 [file="ParserResult.cs", label="System.Globalization.CultureInfo", span=""];
m0_103 [file="ParserResult.cs", label=type, span=""];
m0_104 [file="ParserResult.cs", label="System.Type", span=""];
m0_105 [file="ParserResult.cs", label="System.Globalization.CultureInfo", span=""];
m0_106 [file="ParserResult.cs", label=string, span=""];
m0_107 [file="ParserResult.cs", label=isFsOption, span=""];
m0_108 [file="ParserResult.cs", label=type, span=""];
n387 -> n122  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n126  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n139  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n153  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n182  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n250  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n258  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n263  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n259  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n266  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n268  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n270  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n271  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n273  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n310  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n314  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n275  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n277  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n288  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n291  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n294  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n298  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n300  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n301  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n321  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n325  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n331  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n342  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n343  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n363  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> n368  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> d131  [color=green, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> d146  [color=green, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> d139  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> d153  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n387 -> d126  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n388 -> n51  [color=darkseagreen4, key=1, label=auto, style=dashed];
n388 -> n55  [color=darkseagreen4, key=1, label=auto, style=dashed];
n389 -> n85  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n389 -> n92  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n390 -> n89  [color=darkseagreen4, key=1, label=pr, style=dashed];
n391 -> n116  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n394 -> n174  [color=darkseagreen4, key=1, label=text, style=dashed];
n396 -> n263  [color=darkseagreen4, key=1, label=string, style=dashed];
n396 -> d285  [color=darkseagreen4, key=1, label=string, style=dashed];
n397 -> n263  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
n397 -> d285  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
n398 -> n263  [color=darkseagreen4, key=1, label=remainingSpace, style=dashed];
n398 -> d285  [color=darkseagreen4, key=1, label=remainingSpace, style=dashed];
n399 -> n310  [color=darkseagreen4, key=1, label=int, style=dashed];
n399 -> n314  [color=darkseagreen4, key=1, label=int, style=dashed];
n399 -> d340  [color=darkseagreen4, key=1, label=int, style=dashed];
n399 -> d344  [color=darkseagreen4, key=1, label=int, style=dashed];
n400 -> n310  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n400 -> n314  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n400 -> d340  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n400 -> d344  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n402 -> n325  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
n402 -> n331  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
n402 -> d356  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
n402 -> d361  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
n403 -> n336  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
n403 -> n340  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
n403 -> d368  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
n403 -> d372  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
n10 -> n13  [color=darkseagreen4, key=1, label=string, style=dashed];
n10 -> n15  [color=darkseagreen4, key=1, label=string, style=dashed];
n25 -> n28  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n25 -> n37  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n25 -> d34  [color=green, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n25 -> d36  [color=green, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n26 -> n32  [color=darkseagreen4, key=1, label=auto, style=dashed];
n26 -> n51  [color=darkseagreen4, key=1, label=auto, style=dashed];
n26 -> n33  [color=darkseagreen4, key=1, label=auto, style=dashed];
n26 -> n55  [color=darkseagreen4, key=1, label=auto, style=dashed];
n26 -> n37  [color=darkseagreen4, key=1, label=auto, style=dashed];
n26 -> n38  [color=darkseagreen4, key=1, label=auto, style=dashed];
n26 -> d36  [color=green, key=1, label=auto, style=dashed];
n29 -> d34  [color=green, key=1, label=errors, style=dashed];
n31 -> n51  [color=darkseagreen4, key=1, label=auto, style=dashed];
n31 -> n33  [color=darkseagreen4, key=1, label=auto, style=dashed];
n31 -> n55  [color=darkseagreen4, key=1, label=auto, style=dashed];
n31 -> n37  [color=darkseagreen4, key=1, label=auto, style=dashed];
n31 -> n38  [color=darkseagreen4, key=1, label=auto, style=dashed];
n31 -> d36  [color=green, key=1, label=auto, style=dashed];
n27 -> d34  [color=green, key=1, label=errors, style=dashed];
n32 -> n50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n48 -> n137  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
n48 -> n139  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
n48 -> d139  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
n49 -> d131  [color=green, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n60 -> n67  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n60 -> n85  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n60 -> n70  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n60 -> n92  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n63 -> n66  [color=darkseagreen4, key=1, label=errors, style=dashed];
n67 -> n84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n70 -> n88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n70 -> n91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n64 -> n78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n66 -> n81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n68 -> n70  [color=darkseagreen4, key=1, label=err, style=dashed];
n69 -> n89  [color=darkseagreen4, key=1, label=pr, style=dashed];
n87 -> n96  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n87 -> n98  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n87 -> n99  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n87 -> n102  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n87 -> n103  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n87 -> n105  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n87 -> n116  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n87 -> n106  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
n105 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n109 -> n157  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
n109 -> n162  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>", style=dashed];
n134 -> n258  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
n134 -> n263  [color=darkseagreen4, key=1, label=string, style=dashed];
n143 -> d146  [color=green, key=1, label=int, style=dashed];
n148 -> n151  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
n148 -> n153  [color=darkseagreen4, key=1, label=int, style=dashed];
n148 -> d153  [color=darkseagreen4, key=1, label=int, style=dashed];
n157 -> n162  [color=darkseagreen4, key=1, label=meaningfulErrors, style=dashed];
n161 -> n169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n161 -> n172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n160 -> n174  [color=darkseagreen4, key=1, label=text, style=dashed];
n160 -> n162  [color=darkseagreen4, key=1, label=text, style=dashed];
n188 -> n190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n193 -> n199  [color=darkseagreen4, key=1, label=int, style=dashed];
n193 -> n200  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
n193 -> n202  [color=darkseagreen4, key=1, label=int, style=dashed];
n193 -> n203  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
n193 -> n205  [color=darkseagreen4, key=1, label=int, style=dashed];
n193 -> n206  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
n193 -> n210  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
n193 -> n211  [color=darkseagreen4, key=1, label=int, style=dashed];
n193 -> n212  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
n196 -> n198  [color=darkseagreen4, key=1, label=words, style=dashed];
n196 -> n199  [color=darkseagreen4, key=1, label=words, style=dashed];
n196 -> n200  [color=darkseagreen4, key=1, label=words, style=dashed];
n196 -> n202  [color=darkseagreen4, key=1, label=words, style=dashed];
n196 -> n205  [color=darkseagreen4, key=1, label=words, style=dashed];
n196 -> n206  [color=darkseagreen4, key=1, label=words, style=dashed];
n209 -> n211  [color=darkseagreen4, key=1, label=string, style=dashed];
n209 -> n212  [color=darkseagreen4, key=1, label=string, style=dashed];
n195 -> n199  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
n195 -> n205  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
n201 -> n204  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
n197 -> n199  [color=darkseagreen4, key=1, label=i, style=dashed];
n197 -> n200  [color=darkseagreen4, key=1, label=i, style=dashed];
n197 -> n202  [color=darkseagreen4, key=1, label=i, style=dashed];
n197 -> n205  [color=darkseagreen4, key=1, label=i, style=dashed];
n197 -> n206  [color=darkseagreen4, key=1, label=i, style=dashed];
n197 -> n208  [color=darkseagreen4, key=1, label=i, style=dashed];
n208 -> n208  [color=darkseagreen4, key=1, label=i, style=dashed];
n204 -> n204  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
n219 -> n221  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
n220 -> n228  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n239 -> d252  [color=green, key=1, label=examples, style=dashed];
n250 -> n250  [color=darkseagreen4, key=1, label=verbTuple, style=dashed];
n255 -> n258  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
n255 -> n263  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
n257 -> n263  [color=darkseagreen4, key=1, label=remainingSpace, style=dashed];
n258 -> n262  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n265 -> n310  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n314  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n275  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n277  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n265 -> n280  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
n265 -> n287  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n290  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n293  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n294  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n298  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n299  [color=darkseagreen4, key=1, label=int, style=dashed];
n274 -> n309  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n274 -> n313  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n279 -> n317  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n279 -> n282  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
n279 -> n300  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
n281 -> n300  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
n284 -> n286  [color=darkseagreen4, key=1, label=words, style=dashed];
n284 -> n287  [color=darkseagreen4, key=1, label=words, style=dashed];
n284 -> n288  [color=darkseagreen4, key=1, label=words, style=dashed];
n284 -> n290  [color=darkseagreen4, key=1, label=words, style=dashed];
n284 -> n293  [color=darkseagreen4, key=1, label=words, style=dashed];
n284 -> n294  [color=darkseagreen4, key=1, label=words, style=dashed];
n297 -> n299  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
n297 -> n300  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
n283 -> n287  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
n283 -> n293  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
n289 -> n292  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
n285 -> n287  [color=darkseagreen4, key=1, label=i, style=dashed];
n285 -> n288  [color=darkseagreen4, key=1, label=i, style=dashed];
n285 -> n290  [color=darkseagreen4, key=1, label=i, style=dashed];
n285 -> n293  [color=darkseagreen4, key=1, label=i, style=dashed];
n285 -> n294  [color=darkseagreen4, key=1, label=i, style=dashed];
n285 -> n296  [color=darkseagreen4, key=1, label=i, style=dashed];
n296 -> n296  [color=darkseagreen4, key=1, label=i, style=dashed];
n292 -> n292  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
n312 -> n325  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
n312 -> n331  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
n316 -> n336  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
n316 -> n340  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
n321 -> n324  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n321 -> n330  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n333 -> n335  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n333 -> n339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n345 -> n348  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n348 -> n350  [color=darkseagreen4, key=1, label=int, style=dashed];
n352 -> n359  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
n353 -> n378  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
n355 -> n362  [color=darkseagreen4, key=1, label=specLength, style=dashed];
n355 -> n373  [color=darkseagreen4, key=1, label=specLength, style=dashed];
n356 -> n361  [color=darkseagreen4, key=1, label=hasShort, style=dashed];
n356 -> n371  [color=darkseagreen4, key=1, label=hasShort, style=dashed];
n357 -> n366  [color=darkseagreen4, key=1, label=hasLong, style=dashed];
n357 -> n371  [color=darkseagreen4, key=1, label=hasLong, style=dashed];
n362 -> n362  [color=darkseagreen4, key=1, label=specLength, style=dashed];
n362 -> n364  [color=darkseagreen4, key=1, label=specLength, style=dashed];
n365 -> n373  [color=darkseagreen4, key=1, label=specLength, style=dashed];
n370 -> n373  [color=darkseagreen4, key=1, label=specLength, style=dashed];
n364 -> n364  [color=darkseagreen4, key=1, label=specLength, style=dashed];
n376 -> n380  [color=darkseagreen4, key=1, label=hasMeta, style=dashed];
d34 -> n57  [color=green, key=1, label="lambda expression", style=dashed];
d243 -> n236  [color=green, key=1, label="lambda expression", style=dashed];
d252 -> n245  [color=green, key=1, label="lambda expression", style=dashed];
d252 -> d264  [color=green, key=1, label="lambda expression", style=dashed];
d252 -> d267  [color=green, key=1, label="lambda expression", style=dashed];
d301 -> d306  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
d301 -> d340  [color=darkseagreen4, key=1, label=int, style=dashed];
d301 -> d344  [color=darkseagreen4, key=1, label=int, style=dashed];
d301 -> d304  [color=darkseagreen4, key=1, label=int, style=dashed];
d301 -> d309  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
d301 -> d316  [color=darkseagreen4, key=1, label=int, style=dashed];
d301 -> d319  [color=darkseagreen4, key=1, label=int, style=dashed];
d301 -> d322  [color=darkseagreen4, key=1, label=int, style=dashed];
d301 -> d323  [color=darkseagreen4, key=1, label=int, style=dashed];
d301 -> d327  [color=darkseagreen4, key=1, label=int, style=dashed];
d301 -> d328  [color=darkseagreen4, key=1, label=int, style=dashed];
d308 -> n317  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d308 -> d311  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
d308 -> d329  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
d312 -> d316  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
d312 -> d322  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
d303 -> n309  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d303 -> n313  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d310 -> d329  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
d313 -> d316  [color=darkseagreen4, key=1, label=words, style=dashed];
d313 -> d319  [color=darkseagreen4, key=1, label=words, style=dashed];
d313 -> d322  [color=darkseagreen4, key=1, label=words, style=dashed];
d313 -> d323  [color=darkseagreen4, key=1, label=words, style=dashed];
d313 -> d315  [color=darkseagreen4, key=1, label=words, style=dashed];
d313 -> d317  [color=darkseagreen4, key=1, label=words, style=dashed];
d326 -> d328  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
d326 -> d329  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
d318 -> d321  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
d314 -> d316  [color=darkseagreen4, key=1, label=i, style=dashed];
d314 -> d319  [color=darkseagreen4, key=1, label=i, style=dashed];
d314 -> d322  [color=darkseagreen4, key=1, label=i, style=dashed];
d314 -> d323  [color=darkseagreen4, key=1, label=i, style=dashed];
d314 -> d317  [color=darkseagreen4, key=1, label=i, style=dashed];
d314 -> d325  [color=darkseagreen4, key=1, label=i, style=dashed];
d325 -> d325  [color=darkseagreen4, key=1, label=i, style=dashed];
d321 -> d321  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
d432 -> d330  [color=darkseagreen4, key=1, label=<invalid-global-code>, style=dashed];
d432 -> d281  [color=darkseagreen4, key=1, label=<invalid-global-code>, style=dashed];
d432 -> d299  [color=darkseagreen4, key=1, label=<invalid-global-code>, style=dashed];
d432 -> d376  [color=darkseagreen4, key=1, label=<invalid-global-code>, style=dashed];
d352 -> n324  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d352 -> n330  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d364 -> n335  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d364 -> n339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d351 -> d356  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
d351 -> d361  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
d363 -> d368  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
d363 -> d372  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
d280 -> n262  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d276 -> d280  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
d276 -> d285  [color=darkseagreen4, key=1, label=string, style=dashed];
d277 -> d280  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
d277 -> d285  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
d279 -> d285  [color=darkseagreen4, key=1, label=remainingSpace, style=dashed];
d202 -> d219  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
d202 -> d208  [color=darkseagreen4, key=1, label=int, style=dashed];
d202 -> d209  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
d202 -> d211  [color=darkseagreen4, key=1, label=int, style=dashed];
d202 -> d212  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
d202 -> d214  [color=darkseagreen4, key=1, label=int, style=dashed];
d202 -> d215  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
d202 -> d220  [color=darkseagreen4, key=1, label=int, style=dashed];
d202 -> d221  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
d204 -> d208  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
d204 -> d214  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
d218 -> d220  [color=darkseagreen4, key=1, label=string, style=dashed];
d218 -> d221  [color=darkseagreen4, key=1, label=string, style=dashed];
d205 -> d207  [color=darkseagreen4, key=1, label=words, style=dashed];
d205 -> d208  [color=darkseagreen4, key=1, label=words, style=dashed];
d205 -> d209  [color=darkseagreen4, key=1, label=words, style=dashed];
d205 -> d211  [color=darkseagreen4, key=1, label=words, style=dashed];
d205 -> d214  [color=darkseagreen4, key=1, label=words, style=dashed];
d205 -> d215  [color=darkseagreen4, key=1, label=words, style=dashed];
d210 -> d213  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
d213 -> d213  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
d206 -> d208  [color=darkseagreen4, key=1, label=i, style=dashed];
d206 -> d209  [color=darkseagreen4, key=1, label=i, style=dashed];
d206 -> d211  [color=darkseagreen4, key=1, label=i, style=dashed];
d206 -> d214  [color=darkseagreen4, key=1, label=i, style=dashed];
d206 -> d215  [color=darkseagreen4, key=1, label=i, style=dashed];
d206 -> d217  [color=darkseagreen4, key=1, label=i, style=dashed];
d217 -> d217  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_31 -> m0_33  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_32 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_32 -> m0_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_35 -> m0_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_68  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_63  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_35 -> m0_73  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_35 -> m0_53  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_35 -> m0_46  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_44 -> m0_63  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_44 -> m0_73  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_44 -> m0_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_44 -> m0_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_44 -> m0_46  [color=darkseagreen4, key=1, label=changeType, style=dashed];
m0_45 -> m0_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_81 -> m0_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_60 -> m0_68  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_60 -> m0_63  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_60 -> m0_73  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_60 -> m0_78  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_62 -> m0_73  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_62 -> m0_78  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_63 -> m0_65  [color=darkseagreen4, key=1, label=withValue, style=dashed];
m0_51 -> m0_63  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_51 -> m0_73  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_51 -> m0_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_51 -> m0_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_5 -> m0_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_7 -> m0_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_90 -> m0_95  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_92 -> m0_96  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
m0_102 -> m0_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_103 -> m0_21  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_104 -> m0_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_104 -> m0_68  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_104 -> m0_53  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_105 -> m0_63  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_105 -> m0_73  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_106 -> m0_63  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_106 -> m0_73  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_106 -> m0_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_107 -> m0_68  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_107 -> m0_73  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_107 -> m0_78  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m0_108 -> m0_73  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_108 -> m0_78  [color=darkseagreen4, key=1, label=type, style=dashed];
}
