digraph  {
n0 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Entry CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="10-10"];
n1 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="source == null", span="12-12"];
n3 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="selector == null", span="13-13"];
n5 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="return source.PairwiseImpl(selector);", span="15-15"];
n2 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="throw new ArgumentNullException(''source'');", span="12-12"];
n4 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="throw new ArgumentNullException(''selector'');", span="13-13"];
n6 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Exit CommandLine.Infrastructure.EnumerableExtensions.Pairwise<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="10-10"];
n7 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n8 [cluster="System.Collections.Generic.IEnumerable<TSource>.PairwiseImpl<TSource, TResult>(System.Func<TSource, TSource, TResult>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.PairwiseImpl<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="18-18"];
n9 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Entry CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="18-18"];
n10 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="var enumerator = source.GetEnumerator()", span="20-20"];
n15 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="yield return selector(left, right);", span="29-29"];
n11 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="enumerator.MoveNext()", span="22-22"];
n18 [cluster="System.Collections.Generic.IEnumerable<T>.GetEnumerator()", label="Entry System.Collections.Generic.IEnumerable<T>.GetEnumerator()", span="0-0"];
n12 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="var left = enumerator.Current", span="24-24"];
n13 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="enumerator.MoveNext()", span="26-26"];
n14 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="var right = enumerator.Current", span="28-28"];
n17 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="Exit CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="18-18"];
n19 [cluster="System.Collections.IEnumerator.MoveNext()", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
n16 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", label="left = right", span="30-30"];
n20 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n21 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", label="Entry CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", span="55-55"];
n22 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", label="var index = -1", span="57-57"];
n23 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", label=source, span="58-58"];
n25 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", label="predicate(item)", span="61-61"];
n24 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", label="index++", span="60-60"];
n26 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", label="return index;", span="66-66"];
n28 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n27 [cluster="CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", label="Exit CommandLine.Infrastructure.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", span="55-55"];
n29 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.IEnumerable<T>)", label="Entry CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.IEnumerable<T>)", span="69-69"];
n30 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.IEnumerable<T>)", label="return value;", span="71-71"];
n31 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.IEnumerable<T>)", label="Exit CommandLine.Infrastructure.EnumerableExtensions.ToEnumerable<T>(System.Collections.Generic.IEnumerable<T>)", span="69-69"];
n32 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", label="Entry CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="74-74"];
n33 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", label="var array = Array.CreateInstance(type, value.Count())", span="76-76"];
n34 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", label="value.ToArray().CopyTo(array, 0)", span="77-77"];
n37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
n38 [cluster="System.Array.CreateInstance(System.Type, int)", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
n35 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", label="return array;", span="78-78"];
n39 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
n40 [cluster="System.Array.CopyTo(System.Array, int)", label="Entry System.Array.CopyTo(System.Array, int)", span="0-0"];
n36 [cluster="CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", label="Exit CommandLine.Infrastructure.EnumerableExtensions.ToArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="74-74"];
n41 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="81-81"];
n42 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="return !source.Any();", span="83-83"];
n43 [cluster="CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Exit CommandLine.Infrastructure.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="81-81"];
n44 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_0 [cluster="CommandLine.Error.Error(CommandLine.ErrorType)", file="Error.cs", label="Entry CommandLine.Error.Error(CommandLine.ErrorType)", span="65-65"];
m0_4 [cluster="CommandLine.Error.Equals(object)", file="Error.cs", label="var other = obj as Error", span="85-85"];
m0_1 [cluster="CommandLine.Error.Error(CommandLine.ErrorType)", file="Error.cs", label="this.tag = tag", span="67-67"];
m0_2 [cluster="CommandLine.Error.Error(CommandLine.ErrorType)", file="Error.cs", label="Exit CommandLine.Error.Error(CommandLine.ErrorType)", span="65-65"];
m0_3 [cluster="CommandLine.Error.Equals(object)", file="Error.cs", label="Entry CommandLine.Error.Equals(object)", span="83-83"];
m0_5 [cluster="CommandLine.Error.Equals(object)", file="Error.cs", label="other != null", span="86-86"];
m0_6 [cluster="CommandLine.Error.Equals(object)", file="Error.cs", label="return Equals(other);", span="88-88"];
m0_8 [cluster="CommandLine.Error.Equals(object)", file="Error.cs", label="Exit CommandLine.Error.Equals(object)", span="83-83"];
m0_93 [cluster="CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", file="Error.cs", label="Entry CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", span="36-36"];
m0_9 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="Error.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m0_15 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32"];
m0_17 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="Error.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="36-36"];
m0_16 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="Error.cs", label="var writer = new StringWriter()", span="35-35"];
m0_18 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="Error.cs", label="sut.ParseArguments(new string[] { }, typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="39-39"];
m0_147 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281"];
m0_151 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="Error.cs", label="var result = help.ToString()", span="289-289"];
m0_152 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="Error.cs", label="result.Length.Should().BeGreaterThan(0)", span="292-292"];
m0_148 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="Error.cs", label="var help = new StringWriter()", span="284-284"];
m0_149 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="Error.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="285-285"];
m0_150 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="Error.cs", label="sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="288-288"];
m0_153 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281"];
m0_60 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="Error.cs", label="Exit CommandLine.NamedError.Equals(CommandLine.NamedError)", span="245-245"];
m0_108 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207"];
m0_110 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="Error.cs", label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="213-215"];
m0_109 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="Error.cs", label="var sut = Parser.Default", span="210-210"];
m0_111 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="Error.cs", label="Assert.IsType<NotParsed<object>>(result)", span="218-218"];
m0_112 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207"];
m0_71 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="Error.cs", label="Exit CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m0_73 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="Error.cs", label="Exit CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m0_74 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="Error.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="327-327"];
m0_72 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="Error.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m0_75 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="Error.cs", label="Exit CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="327-327"];
m0_76 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="Error.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m0_77 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="Error.cs", label="Exit CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m0_7 [cluster="CommandLine.Error.Equals(object)", file="Error.cs", label="return base.Equals(obj);", span="91-91"];
m0_32 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="Error.cs", label="var text = writer.ToString()", span="58-58"];
m0_37 [cluster="lambda expression", file="Error.cs", label="with.HelpWriter = writer", span="52-52"];
m0_39 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options()", span="64-64"];
m0_38 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="52-52"];
m0_40 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="Error.cs", label="var expectedOptions = new FakeOptions { StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 } }", span="67-67"];
m0_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", file="Error.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", span="4-4"];
m0_55 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", span="98-98"];
m0_56 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="Error.cs", label="var sut = Parser.Default", span="101-101"];
m0_61 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112"];
m0_10 [cluster="object.Equals(object)", file="Error.cs", label="Entry object.Equals(object)", span="0-0"];
m0_64 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="Error.cs", label="var result =\r\n                sut.ParseArguments<FakeOptionsWithValues>(\r\n                    new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="125-127"];
m0_65 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="Error.cs", label="((Parsed<FakeOptionsWithValues>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="130-130"];
m0_78 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="Error.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="353-353"];
m0_45 [cluster="CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", file="Error.cs", label="this.nameInfo = nameInfo", span="204-204"];
m0_228 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383"];
m0_232 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="var result = help.ToString()", span="391-391"];
m0_233 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="result.Length.Should().BeGreaterThan(0)", span="394-394"];
m0_235 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="lines.Should().HaveCount(x => x == 1)", span="396-396"];
m0_236 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="397-397"];
m0_229 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="var help = new StringWriter()", span="386-386"];
m0_230 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="387-387"];
m0_231 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { command })", span="390-390"];
m0_234 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="395-395"];
m0_237 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383"];
m0_137 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="Error.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368"];
m0_47 [cluster="CommandLine.NamedError.Equals(object)", file="Error.cs", label="Entry CommandLine.NamedError.Equals(object)", span="220-220"];
m0_97 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="189-189"];
m0_100 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="Error.cs", label="var result = sut.ParseArguments(\r\n                args,\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="196-198"];
m0_99 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="Error.cs", label="var sut = new Parser()", span="193-193"];
m0_101 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="Error.cs", label="Assert.IsType<CommitOptions>(((Parsed<object>)result).Value)", span="201-201"];
m0_102 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="Error.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="202-202"];
m0_98 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="Error.cs", label="var expectedOptions = new CommitOptions() { Message = message }", span="192-192"];
m0_103 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="189-189"];
m0_35 [cluster="CommandLine.TokenError.GetHashCode()", file="Error.cs", label="Exit CommandLine.TokenError.GetHashCode()", span="162-162"];
m0_57 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="Error.cs", label="other == null", span="247-247"];
m0_58 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="Error.cs", label="return false;", span="249-249"];
m0_59 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="Error.cs", label="return Tag.Equals(other.Tag) && NameInfo.Equals(other.NameInfo);", span="252-252"];
m0_154 [cluster="Unk.BeGreaterThan", file="Error.cs", label="Entry Unk.BeGreaterThan", span=""];
m0_48 [cluster="CommandLine.NamedError.Equals(object)", file="Error.cs", label="var other = obj as NamedError", span="222-222"];
m0_51 [cluster="CommandLine.NamedError.Equals(object)", file="Error.cs", label="return base.Equals(obj);", span="228-228"];
m0_52 [cluster="CommandLine.NamedError.Equals(object)", file="Error.cs", label="Exit CommandLine.NamedError.Equals(object)", span="220-220"];
m0_50 [cluster="CommandLine.NamedError.Equals(object)", file="Error.cs", label="return Equals(other);", span="225-225"];
m0_49 [cluster="CommandLine.NamedError.Equals(object)", file="Error.cs", label="other != null", span="223-223"];
m0_53 [cluster="CommandLine.NamedError.Equals(CommandLine.NamedError)", file="Error.cs", label="Entry CommandLine.NamedError.Equals(CommandLine.NamedError)", span="245-245"];
m0_211 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358"];
m0_215 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="var result = help.ToString()", span="366-366"];
m0_217 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="370-370"];
m0_212 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="var help = new StringWriter()", span="361-361"];
m0_213 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="362-362"];
m0_214 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { ''--help'' })", span="365-365"];
m0_216 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="369-369"];
m0_218 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="371-371"];
m0_219 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="372-372"];
m0_220 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="373-373"];
m0_221 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="374-374"];
m0_222 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="375-375"];
m0_223 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="376-376"];
m0_224 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358"];
m0_309 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="490-490"];
m0_188 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="326-326"];
m0_189 [cluster="lambda expression", color=green, community=0, file="Error.cs", label="0: x == 1", span="326-326"];
m0_190 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="326-326"];
m0_209 [cluster="lambda expression", color=green, community=0, file="Error.cs", label="0: config.HelpWriter = help", span="336-336"];
m0_208 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="336-336"];
m0_210 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="336-336"];
m0_26 [cluster="CommandLine.TokenError.Equals(object)", file="Error.cs", label="Entry CommandLine.TokenError.Equals(object)", span="147-147"];
m0_25 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="36-36"];
m0_27 [cluster="CommandLine.TokenError.Equals(object)", file="Error.cs", label="var other = obj as TokenError", span="149-149"];
m0_143 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="276-276"];
m0_140 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="275-275"];
m0_169 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="308-308"];
m0_166 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="307-307"];
m0_241 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="396-396"];
m0_13 [cluster="CommandLine.Error.GetHashCode()", file="Error.cs", label="Exit CommandLine.Error.GetHashCode()", span="98-98"];
m0_156 [cluster="lambda expression", file="Error.cs", label="config.HelpWriter = help", span="285-285"];
m0_186 [cluster="lambda expression", file="Error.cs", label="config.HelpWriter = help", span="317-317"];
m0_226 [cluster="lambda expression", file="Error.cs", label="config.HelpWriter = help", span="362-362"];
m0_239 [cluster="lambda expression", file="Error.cs", label="config.HelpWriter = help", span="387-387"];
m0_262 [cluster="lambda expression", file="Error.cs", label="config.HelpWriter = help", span="406-406"];
m0_272 [cluster="lambda expression", file="Error.cs", label="config.HelpWriter = help", span="432-432"];
m0_297 [cluster="lambda expression", file="Error.cs", label="config.HelpWriter = help", span="448-448"];
m0_69 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="Error.cs", label="Exit CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m0_80 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="Error.cs", label="this.type = type", span="357-357"];
m0_307 [cluster="lambda expression", file="Error.cs", label="config.IgnoreUnknownArguments = true", span="483-483"];
m0_319 [cluster="lambda expression", file="Error.cs", label="config.IgnoreUnknownArguments = true", span="502-502"];
m0_144 [cluster="lambda expression", file="Error.cs", label="e.Equals(expectedError)", span="276-276"];
m0_145 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="276-276"];
m0_142 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="275-275"];
m0_141 [cluster="lambda expression", file="Error.cs", label="x == 1", span="275-275"];
m0_170 [cluster="lambda expression", file="Error.cs", label="e.Equals(expectedError)", span="308-308"];
m0_171 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="308-308"];
m0_168 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="307-307"];
m0_167 [cluster="lambda expression", file="Error.cs", label="x == 1", span="307-307"];
m0_243 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="396-396"];
m0_242 [cluster="lambda expression", file="Error.cs", label="x == 1", span="396-396"];
m0_12 [cluster="CommandLine.Error.GetHashCode()", file="Error.cs", label="return Tag.GetHashCode();", span="100-100"];
m0_14 [cluster="System.Enum.GetHashCode()", file="Error.cs", label="Entry System.Enum.GetHashCode()", span="0-0"];
m0_36 [cluster="object.GetHashCode()", file="Error.cs", label="Entry object.GetHashCode()", span="0-0"];
m0_155 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="285-285"];
m0_157 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="285-285"];
m0_185 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="317-317"];
m0_187 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="317-317"];
m0_225 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="362-362"];
m0_227 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="362-362"];
m0_238 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="387-387"];
m0_240 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="387-387"];
m0_261 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="406-406"];
m0_263 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="406-406"];
m0_271 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="432-432"];
m0_273 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="432-432"];
m0_296 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="448-448"];
m0_298 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="448-448"];
m0_68 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="Error.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m0_70 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="Error.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m0_79 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="Error.cs", label="this.verb = verb", span="356-356"];
m0_81 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="Error.cs", label="this.matched = matched", span="358-358"];
m0_310 [cluster="lambda expression", file="Error.cs", label="opts.ShouldBeEquivalentTo(expected)", span="490-490"];
m0_306 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="483-483"];
m0_308 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="483-483"];
m0_322 [cluster="lambda expression", file="Error.cs", label="opts.ShouldBeEquivalentTo(expected)", span="509-509"];
m0_318 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="502-502"];
m0_320 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="502-502"];
m0_82 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="Error.cs", label="Exit CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="353-353"];
m0_94 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="180-180"];
m0_105 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="202-202"];
m0_120 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="245-245"];
m0_321 [cluster="lambda expression", file="Error.cs", label="Entry lambda expression", span="509-509"];
m0_311 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="490-490"];
m0_323 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="509-509"];
m0_84 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="Error.cs", label="Exit CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="391-391"];
m0_83 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="Error.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="391-391"];
m0_96 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="180-180"];
m0_95 [cluster="lambda expression", file="Error.cs", label="o.RespectingRuntimeTypes()", span="180-180"];
m0_107 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="202-202"];
m0_106 [cluster="lambda expression", file="Error.cs", label="o.RespectingRuntimeTypes()", span="202-202"];
m0_121 [cluster="lambda expression", file="Error.cs", label="o.RespectingRuntimeTypes()", span="245-245"];
m0_122 [cluster="lambda expression", file="Error.cs", label="Exit lambda expression", span="245-245"];
m0_28 [cluster="CommandLine.TokenError.Equals(object)", file="Error.cs", label="other != null", span="150-150"];
m0_33 [cluster="CommandLine.TokenError.GetHashCode()", file="Error.cs", label="Entry CommandLine.TokenError.GetHashCode()", span="162-162"];
m0_29 [cluster="CommandLine.TokenError.Equals(object)", file="Error.cs", label="return Equals(other);", span="152-152"];
m0_30 [cluster="CommandLine.TokenError.Equals(object)", file="Error.cs", label="return base.Equals(obj);", span="155-155"];
m0_31 [cluster="CommandLine.TokenError.Equals(object)", file="Error.cs", label="Exit CommandLine.TokenError.Equals(object)", span="147-147"];
m0_34 [cluster="CommandLine.TokenError.GetHashCode()", file="Error.cs", label="return new {Tag, Token}.GetHashCode();", span="164-164"];
m0_146 [cluster="Unk.Equals", file="Error.cs", label="Entry Unk.Equals", span=""];
m0_184 [cluster="Unk.StartWithEquivalent", file="Error.cs", label="Entry Unk.StartWithEquivalent", span=""];
m0_299 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", span="478-478"];
m0_300 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="Error.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="483-483"];
m0_301 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="Error.cs", label="var result = sut.ParseArguments<FakeOptions>(arguments)", span="486-486"];
m0_303 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="Error.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="490-490"];
m0_302 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="Error.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="489-489"];
m0_304 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", span="478-478"];
m0_42 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Error.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188"];
m0_43 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="Error.cs", label="Exit CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="188-188"];
m0_41 [cluster="string.Equals(string)", file="Error.cs", label="Entry string.Equals(string)", span="0-0"];
m0_44 [cluster="CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", file="Error.cs", label="Entry CommandLine.NamedError.NamedError(CommandLine.ErrorType, CommandLine.NameInfo)", span="201-201"];
m0_172 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313"];
m0_179 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0, file="Error.cs", label="0: lines.Should().HaveCount(x => x == 1)", span="326-326"];
m0_178 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="Error.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="325-325"];
m0_180 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", color=green, community=0, file="Error.cs", label="0: lines[0].Should().StartWithEquivalent(''CommandLine'')", span="327-327"];
m0_176 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="Error.cs", label="var result = help.ToString()", span="321-321"];
m0_177 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="Error.cs", label="result.Length.Should().BeGreaterThan(0)", span="324-324"];
m0_173 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="Error.cs", label="var help = new StringWriter()", span="316-316"];
m0_174 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="Error.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="317-317"];
m0_175 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="Error.cs", label="sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="320-320"];
m0_181 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313"];
m0_19 [cluster="System.Enum.Equals(object)", color=green, community=0, file="Error.cs", label="0: Entry System.Enum.Equals(object)", span="0-0"];
m0_20 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", color=green, community=0, file="Error.cs", label="0: Entry CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", span="126-126"];
m0_21 [cluster="CommandLine.TokenError.TokenError(CommandLine.ErrorType, string)", file="Error.cs", label="token == null", span="129-129"];
m0_182 [cluster="string.ToNotEmptyLines()", file="Error.cs", label="Entry string.ToNotEmptyLines()", span="10-10"];
m0_46 [cluster="CommandLine.Parser.Parser()", file="Error.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m0_67 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="Error.cs", label="Exit CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m0_312 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", span="497-497"];
m0_313 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="Error.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="502-502"];
m0_314 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="Error.cs", label="var result = sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(arguments)", span="505-505"];
m0_315 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="Error.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="508-508"];
m0_316 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="Error.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="509-509"];
m0_317 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", span="497-497"];
m0_23 [cluster="Unk.Should", file="Error.cs", label="Entry Unk.Should", span=""];
m0_22 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="Error.cs", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144"];
m0_24 [cluster="Unk.NotBeEmpty", file="Error.cs", label="Entry Unk.NotBeEmpty", span=""];
m0_130 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265"];
m0_135 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="Error.cs", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="276-276"];
m0_134 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="Error.cs", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="275-275"];
m0_131 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="Error.cs", label="var expectedError = new HelpRequestedError()", span="268-268"];
m0_133 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="Error.cs", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="272-272"];
m0_132 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="Error.cs", label="var sut = new Parser()", span="269-269"];
m0_136 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265"];
m0_11 [cluster="CommandLine.Error.GetHashCode()", file="Error.cs", label="Entry CommandLine.Error.GetHashCode()", span="98-98"];
m0_63 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="Error.cs", label="Exit CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m0_62 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="Error.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m0_66 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="Error.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m0_139 [cluster="Unk.ContainSingle", file="Error.cs", label="Entry Unk.ContainSingle", span=""];
m0_104 [cluster="CommandLine.Tests.Fakes.CommitOptions.CommitOptions()", file="Error.cs", label="Entry CommandLine.Tests.Fakes.CommitOptions.CommitOptions()", span="22-22"];
m0_183 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="Error.cs", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
m0_113 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223"];
m0_116 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="Error.cs", label="var result =\r\n                sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="239-241"];
m0_115 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="Error.cs", label="var sut = new Parser()", span="236-236"];
m0_117 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="Error.cs", label="Assert.IsType<CloneOptions>(((Parsed<object>)result).Value)", span="244-244"];
m0_118 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="Error.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="245-245"];
m0_114 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="Error.cs", label="var expectedOptions = new CloneOptions\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="226-235"];
m0_119 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223"];
m0_85 [cluster="Unk.RespectingRuntimeTypes", file="Error.cs", label="CommandLine.Error", span=""];
m0_158 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297"];
m0_163 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="Error.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="308-308"];
m0_162 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="Error.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="307-307"];
m0_159 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="Error.cs", label="var expectedError = new VersionRequestedError()", span="300-300"];
m0_161 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="Error.cs", label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="304-304"];
m0_160 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="Error.cs", label="var sut = new Parser()", span="301-301"];
m0_164 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297"];
m0_244 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402"];
m0_248 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="var result = help.ToString()", span="410-410"];
m0_250 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="414-414"];
m0_245 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="var help = new StringWriter()", span="405-405"];
m0_246 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="406-406"];
m0_247 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="sut.ParseArguments<FakeOptionsWithTwoRequiredAndSets>(new[] { ''--weburl=value.com'', ''--ftpurl=value.org'' })", span="409-409"];
m0_249 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="413-413"];
m0_251 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="415-415"];
m0_252 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="416-416"];
m0_253 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[3].ShouldBeEquivalentTo(''Option: 'weburl' is not compatible with: 'ftpurl'.'')", span="417-417"];
m0_254 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[4].ShouldBeEquivalentTo(''Option: 'ftpurl' is not compatible with: 'weburl'.'')", span="418-418"];
m0_255 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[5].ShouldBeEquivalentTo(''--weburl     Required.'')", span="419-419"];
m0_256 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[6].ShouldBeEquivalentTo(''--ftpurl     Required.'')", span="420-420"];
m0_257 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[7].ShouldBeEquivalentTo(''-a'')", span="421-421"];
m0_258 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[8].ShouldBeEquivalentTo(''--help       Display this help screen.'')", span="422-422"];
m0_259 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="lines[9].ShouldBeEquivalentTo(''--version    Display version information.'')", span="423-423"];
m0_260 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402"];
m0_138 [cluster="Unk.HaveCount", file="Error.cs", label="Entry Unk.HaveCount", span=""];
m0_191 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332"];
m0_192 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", color=green, community=0, file="Error.cs", label="0: var help = new StringWriter()", span="335-335"];
m0_193 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", color=green, community=0, file="Error.cs", label="0: var sut = new Parser(config => config.HelpWriter = help)", span="336-336"];
m0_195 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="var result = help.ToString()", span="340-340"];
m0_194 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string[] { })", span="339-339"];
m0_196 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="result.Length.Should().BeGreaterThan(0)", span="343-343"];
m0_198 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="345-345"];
m0_197 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="344-344"];
m0_199 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="346-346"];
m0_206 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="lines[8].ShouldBeEquivalentTo(''version    Display version information.'')", span="353-353"];
m0_200 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="347-347"];
m0_201 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="348-348"];
m0_202 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="349-349"];
m0_203 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="lines[5].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="350-350"];
m0_204 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="lines[6].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="351-351"];
m0_205 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="lines[7].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="352-352"];
m0_207 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332"];
m0_274 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444"];
m0_278 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="var result = help.ToString()", span="453-453"];
m0_280 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="457-457"];
m0_275 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="var help = new StringWriter()", span="447-447"];
m0_276 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="448-448"];
m0_277 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="sut.ParseArguments<AddOptionsWithUsage, CommitOptionsWithUsage, CloneOptionsWithUsage>(\r\n                new[] { ''clone'', ''--badoption=@bad?value'' })", span="451-452"];
m0_279 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="456-456"];
m0_281 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="458-458"];
m0_282 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="459-459"];
m0_283 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[3].ShouldBeEquivalentTo(''Option 'badoption' is unknown.'')", span="460-460"];
m0_284 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="461-461"];
m0_285 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[5].ShouldBeEquivalentTo(''Cloning quietly:'')", span="462-462"];
m0_286 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[6].ShouldBeEquivalentTo(''git clone --quiet https://github.com/gsscoder/railwaysharp'')", span="463-463"];
m0_287 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[7].ShouldBeEquivalentTo(''Cloning without hard links:'')", span="464-464"];
m0_288 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[8].ShouldBeEquivalentTo(''git clone --no-hardlinks https://github.com/gsscoder/csharpx'')", span="465-465"];
m0_289 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[9].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="466-466"];
m0_290 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[10].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="467-467"];
m0_291 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[11].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="468-468"];
m0_292 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[12].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="469-469"];
m0_293 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[13].ShouldBeEquivalentTo(''--version         Display version information.'')", span="470-470"];
m0_294 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="lines[14].ShouldBeEquivalentTo(''URLS (pos. 0)     A list of url(s) to clone.'')", span="471-471"];
m0_295 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444"];
m0_264 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428"];
m0_268 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="Error.cs", label="var result = help.ToString()", span="436-436"];
m0_269 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="Error.cs", label="result.Length.Should().BeGreaterThan(0)", span="439-439"];
m0_265 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="Error.cs", label="var help = new StringWriter()", span="431-431"];
m0_266 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="Error.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="432-432"];
m0_267 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="Error.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { ''commit'', ''--help'' })", span="435-435"];
m0_270 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428"];
m0_165 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="Error.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m0_129 [cluster="CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", file="Error.cs", label="Entry CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13"];
m0_123 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="Error.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250"];
m0_126 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="Error.cs", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="257-257"];
m0_127 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="Error.cs", label="((Parsed<FakeImmutableOptions>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="260-260"];
m0_125 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="Error.cs", label="var sut = new Parser()", span="254-254"];
m0_124 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="Error.cs", label="var expectedOptions = new FakeImmutableOptions(''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="253-253"];
m0_128 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250"];
m0_305 [cluster="Unk.WithParsed", file="Error.cs", label="Entry Unk.WithParsed", span=""];
m0_86 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="Error.cs", label="CommandLine.TokenError", span=""];
m0_89 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="Error.cs", label="var result =\r\n                sut.ParseArguments(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                    typeof(AddOptions),\r\n                    typeof(CommitOptions),\r\n                    typeof(CloneOptions))", span="171-176"];
m0_88 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="Error.cs", label="CommandLine.HelpVerbRequestedError", span=""];
m0_90 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="Error.cs", label="Assert.IsType<CloneOptions>(((Parsed<object>)result).Value)", span="179-179"];
m0_91 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="Error.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="180-180"];
m0_87 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="Error.cs", label="CommandLine.NamedError", span=""];
m0_92 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="Error.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="155-155"];
m0_331 [file="Error.cs", label=help, span=""];
m0_325 [file="Error.cs", label=writer, span=""];
m0_324 [file="Error.cs", label=writer, span=""];
m0_326 [file="Error.cs", label=writer, span=""];
m0_328 [file="Error.cs", label=help, span=""];
m0_330 [file="Error.cs", label=help, span=""];
m0_332 [file="Error.cs", label=help, span=""];
m0_333 [file="Error.cs", label=help, span=""];
m0_334 [file="Error.cs", label=help, span=""];
m0_335 [file="Error.cs", label=help, span=""];
m0_336 [file="Error.cs", label=help, span=""];
m0_327 [file="Error.cs", label=expectedError, span=""];
m0_329 [file="Error.cs", label=expectedError, span=""];
m0_337 [file="Error.cs", label="CommandLine.Tests.Fakes.FakeOptions", span=""];
m0_338 [file="Error.cs", label="CommandLine.Tests.Fakes.CommitOptions", span=""];
m12_40 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m12_41 [cluster="object.GetType()", file="InstanceBuilder.cs", label="Entry object.GetType()", span="0-0"];
m12_42 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="InstanceBuilder.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
m12_43 [cluster="Unk.ThrowingValidate", file="InstanceBuilder.cs", label="Entry Unk.ThrowingValidate", span=""];
m12_223 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequired.FakeOptionsWithRequired()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequired.FakeOptionsWithRequired()", span="4-4"];
m12_347 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="852-852"];
m12_348 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="855-860"];
m12_349 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Assert.Throws<ApplicationException>(test)", span="863-863"];
m12_350 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="852-852"];
m12_171 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
m12_328 [cluster="Unk.>", file="InstanceBuilder.cs", label="Entry Unk.>", span=""];
m12_62 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="67-67"];
m12_150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="400-400"];
m12_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="405-410"];
m12_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.LongSequence)", span="413-413"];
m12_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="400-400"];
m12_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilder.cs", label="((Parsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="152-152"];
m12_54 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="InstanceBuilder.cs", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="38-38"];
m12_257 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="643-643"];
m12_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="648-653"];
m12_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilder.cs", label="((Parsed<FakeOptions>)result).Value.StringValue.ShouldBeEquivalentTo(expected)", span="656-656"];
m12_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="643-643"];
m12_324 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="822-822"];
m12_325 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="825-830"];
m12_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Assert.Throws<ApplicationException>(test)", span="833-833"];
m12_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="822-822"];
m12_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="221-221"];
m12_297 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="752-752"];
m12_298 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="757-762"];
m12_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableLong)", span="765-765"];
m12_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="752-752"];
m12_78 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="78-78"];
m12_8 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="20-27"];
m12_165 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="445-445"];
m12_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilder.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="448-454"];
m12_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilder.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="455-455"];
m12_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilder.cs", label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="469-469"];
m12_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="458-466"];
m12_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="445-445"];
m12_104 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="273-273"];
m12_249 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="621-621"];
m12_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="624-624"];
m12_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="627-632"];
m12_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptions>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="635-635"];
m12_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="621-621"];
m12_384 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="912-912"];
m12_385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="915-920"];
m12_386 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeInterfaceOptions>)result).Value.InputFile)", span="923-923"];
m12_387 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="912-912"];
m12_107 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: e.Value", span="96-96"];
m12_73 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="74-74"];
m12_74 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="74-74"];
m12_75 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="74-74"];
m12_76 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="78-78"];
m12_77 [cluster="lambda expression", file="InstanceBuilder.cs", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="78-78"];
m12_237 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="InstanceBuilder.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280"];
m12_91 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m12_92 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="88-88"];
m12_93 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: sp.Specification.DefaultValue.FromJust()", span="88-88"];
m12_94 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="88-88"];
m12_95 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="90-92"];
m12_9 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="InstanceBuilder.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368"];
m12_446 [cluster="CSharpx.Maybe.Nothing<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m12_304 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="773-773"];
m12_305 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="778-783"];
m12_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilder.cs", label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName.Value)", span="788-788"];
m12_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilder.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName))", span="790-790"];
m12_306 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilder.cs", label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.FileName != null", span="786-786"];
m12_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="773-773"];
m12_288 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m12_296 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m12_182 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13"];
m12_429 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="1022-1022"];
m12_430 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithTwoRequired>>(() => new FakeOptionsWithTwoRequired()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="1025-1030"];
m12_432 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilder.cs", label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="1034-1034"];
m12_431 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilder.cs", label="var errors = ((NotParsed<FakeOptionsWithTwoRequired>)result).Errors", span="1033-1033"];
m12_433 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="1022-1022"];
m12_6 [cluster="lambda expression", file="InstanceBuilder.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer))", span="23-25"];
m12_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="601-601"];
m12_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="604-604"];
m12_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="607-612"];
m12_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptions>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="615-615"];
m12_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="601-601"];
m12_108 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="286-286"];
m12_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m12_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m12_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m12_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label=optionSpecs, span=""];
m12_52 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="145-145"];
m12_370 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m12_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="144-149"];
m12_13 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="22-22"];
m12_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="26-31"];
m12_20 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=green, community=0, file="InstanceBuilder.cs", label="1: Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m12_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=red, community=0, file="InstanceBuilder.cs", label="0: ((Parsed<FakeOptions>)result).Value.LongValue.ShouldBeEquivalentTo(expected)", span="56-56"];
m12_21 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: Entry lambda expression", span="49-49"];
m12_22 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: new FakeOptions()", span="49-49"];
m12_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", color=green, community=0, file="InstanceBuilder.cs", label="0: Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67"];
m12_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilder.cs", label="((Parsed<FakeOptionsWithDouble>)result).Value.DoubleValue.ShouldBeEquivalentTo(expected)", span="80-80"];
m12_28 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="73-73"];
m12_30 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="73-73"];
m12_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=green, community=0, file="InstanceBuilder.cs", label="0: var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="97-102"];
m12_23 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="49-49"];
m12_31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", color=green, community=1, file="InstanceBuilder.cs", label="0: Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m12_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", color=green, community=0, file="InstanceBuilder.cs", label="0: Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="92-92"];
m12_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="67-67"];
m12_29 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithDouble()", span="73-73"];
m12_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="72-77"];
m12_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="InstanceBuilder.cs", label="((Parsed<FakeOptionsWithSequence>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="105-105"];
m12_413 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="977-977"];
m12_414 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="982-987"];
m12_415 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithScalarValueAndSequenceStringAdjacent>)result).Value)", span="990-990"];
m12_416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="977-977"];
m12_79 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="208-208"];
m12_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m12_82 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="84-84"];
m12_142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="377-377"];
m12_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="382-387"];
m12_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceWithoutRange>)result).Value.LongSequence)", span="390-390"];
m12_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="377-377"];
m12_55 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Infrastructure.Maybe<CommandLine.Error>>>>)", span="40-40"];
m12_56 [cluster="Unk.Select", file="InstanceBuilder.cs", label="Entry Unk.Select", span=""];
m12_57 [cluster="Unk.Concat", file="InstanceBuilder.cs", label="Entry Unk.Concat", span=""];
m12_58 [cluster="Unk.Create", file="InstanceBuilder.cs", label="Entry Unk.Create", span=""];
m12_358 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="872-872"];
m12_359 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="875-880"];
m12_360 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="type == ParserResultType.NotParsed", span="883-883"];
m12_361 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithNamedAndEmptySets>)result).Errors.Should().HaveCount(x => x == expected)", span="885-885"];
m12_362 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="type == ParserResultType.Parsed", span="887-887"];
m12_363 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="result.Should().BeOfType<Parsed<FakeOptionsWithNamedAndEmptySets>>()", span="889-889"];
m12_364 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="872-872"];
m12_35 [cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m12_38 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="98-98"];
m12_51 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="145-145"];
m12_11 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="InstanceBuilder.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m12_15 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="25-25"];
m12_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m12_16 [cluster="lambda expression", file="InstanceBuilder.cs", label="NameLookup.WithSeparator(name, optionSpecs, nameComparer)", span="25-25"];
m12_36 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m12_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m12_44 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m12_45 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptions()", span="121-121"];
m12_46 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m12_53 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m12_59 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="168-168"];
m12_60 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="50-51"];
m12_61 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="168-168"];
m12_70 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="68-68"];
m12_71 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="68-68"];
m12_72 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m12_80 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="84-84"];
m12_81 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsJust()", span="84-84"];
m12_88 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="228-228"];
m12_89 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="87-87"];
m12_90 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="228-228"];
m12_96 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="0: sp.Value.IsNothing()\r\n                        && sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing()", span="90-92"];
m12_97 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="90-92"];
m12_98 [cluster="System.Type.ToDescriptorKind()", file="InstanceBuilder.cs", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
m12_105 [cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs", label="Entry System.Type.CreateEmptyArray()", span="81-81"];
m12_106 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="96-96"];
m12_114 [cluster="lambda expression", file="InstanceBuilder.cs", label=token, span=""];
m12_115 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithEnum()", span="293-293"];
m12_116 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="293-293"];
m12_122 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="313-313"];
m12_123 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithEnum()", span="313-313"];
m12_124 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="313-313"];
m12_130 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="333-333"];
m12_131 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithEnum()", span="333-333"];
m12_132 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="333-333"];
m12_139 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="359-359"];
m12_140 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithValues()", span="359-359"];
m12_141 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="359-359"];
m12_146 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="383-383"];
m12_147 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="383-383"];
m12_148 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="383-383"];
m12_154 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="406-406"];
m12_155 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="406-406"];
m12_156 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="406-406"];
m12_162 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="429-429"];
m12_163 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="429-429"];
m12_164 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="429-429"];
m12_172 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="459-459"];
m12_175 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="460-462"];
m12_173 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithValues()", span="459-459"];
m12_174 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="459-459"];
m12_176 [cluster="lambda expression", file="InstanceBuilder.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="461-462"];
m12_180 [cluster="lambda expression", file="InstanceBuilder.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="462-462"];
m12_184 [cluster="lambda expression", file="InstanceBuilder.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="462-462"];
m12_177 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="460-462"];
m12_179 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="462-462"];
m12_181 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="462-462"];
m12_183 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="462-462"];
m12_185 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="462-462"];
m12_193 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="486-486"];
m12_194 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithSets()", span="486-486"];
m12_195 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="486-486"];
m12_203 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="507-507"];
m12_204 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithRequiredAndSet()", span="507-507"];
m12_205 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="507-507"];
m12_212 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="528-528"];
m12_213 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithRequiredAndSet()", span="528-528"];
m12_214 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="528-528"];
m12_220 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="548-548"];
m12_221 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithRequired()", span="548-548"];
m12_222 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="548-548"];
m12_229 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="568-568"];
m12_230 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptions()", span="568-568"];
m12_231 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="568-568"];
m12_238 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="588-588"];
m12_239 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptions()", span="588-588"];
m12_240 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="588-588"];
m12_246 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="608-608"];
m12_247 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptions()", span="608-608"];
m12_248 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="608-608"];
m12_254 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="628-628"];
m12_255 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptions()", span="628-628"];
m12_256 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="628-628"];
m12_261 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="649-649"];
m12_262 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptions()", span="649-649"];
m12_263 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="649-649"];
m12_269 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="669-669"];
m12_270 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithRequiredValue()", span="669-669"];
m12_271 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="669-669"];
m12_277 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="692-692"];
m12_278 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptions()", span="692-692"];
m12_279 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="692-692"];
m12_285 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="712-712"];
m12_286 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="712-712"];
m12_287 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="712-712"];
m12_293 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="735-735"];
m12_294 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithNullables()", span="735-735"];
m12_295 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="735-735"];
m12_301 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="758-758"];
m12_302 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithNullables()", span="758-758"];
m12_303 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="758-758"];
m12_311 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="779-779"];
m12_312 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithFSharpOption()", span="779-779"];
m12_313 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="779-779"];
m12_321 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="804-804"];
m12_322 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithFSharpOption()", span="804-804"];
m12_323 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="804-804"];
m12_329 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="825-830"];
m12_330 [cluster="lambda expression", file="InstanceBuilder.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="825-830"];
m12_331 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="825-830"];
m12_332 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="826-826"];
m12_333 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithMinZero()", span="826-826"];
m12_334 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="826-826"];
m12_340 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="840-845"];
m12_341 [cluster="lambda expression", file="InstanceBuilder.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="840-845"];
m12_342 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="840-845"];
m12_343 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="841-841"];
m12_344 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithMaxZero()", span="841-841"];
m12_345 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="841-841"];
m12_351 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="855-860"];
m12_352 [cluster="lambda expression", file="InstanceBuilder.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="855-860"];
m12_353 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="855-860"];
m12_354 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="856-856"];
m12_355 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithMinMaxZero()", span="856-856"];
m12_356 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="856-856"];
m12_372 [cluster="lambda expression", file="InstanceBuilder.cs", label="x == expected", span="885-885"];
m12_367 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="876-876"];
m12_371 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="885-885"];
m12_368 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="876-876"];
m12_369 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="876-876"];
m12_373 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="885-885"];
m12_382 [cluster="lambda expression", file="InstanceBuilder.cs", label="x == expected", span="906-906"];
m12_378 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="899-899"];
m12_381 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="906-906"];
m12_379 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptions()", span="899-899"];
m12_380 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="899-899"];
m12_383 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="906-906"];
m12_388 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="916-916"];
m12_389 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeInterfaceOptions()", span="916-916"];
m12_390 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="916-916"];
m12_404 [cluster="lambda expression", file="InstanceBuilder.cs", label="x == expected", span="947-947"];
m12_399 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="938-938"];
m12_403 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="947-947"];
m12_400 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithTwoRequiredAndSets()", span="938-938"];
m12_401 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="938-938"];
m12_405 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="947-947"];
m12_410 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="963-963"];
m12_411 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithRequiredValue()", span="963-963"];
m12_412 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="963-963"];
m12_417 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="983-983"];
m12_418 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="983-983"];
m12_419 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="983-983"];
m12_426 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="1003-1003"];
m12_427 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptions()", span="1003-1003"];
m12_428 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="1003-1003"];
m12_440 [cluster="lambda expression", file="InstanceBuilder.cs", label="x == expected", span="1034-1034"];
m12_435 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="1026-1026"];
m12_439 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="1034-1034"];
m12_436 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithTwoRequired()", span="1026-1026"];
m12_437 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="1026-1026"];
m12_441 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="1034-1034"];
m12_455 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="1065-1065"];
m12_456 [cluster="lambda expression", file="InstanceBuilder.cs", label="new FakeOptionsWithSimpleType()", span="1065-1065"];
m12_457 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="1065-1065"];
m12_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", color=red, community=0, file="InstanceBuilder.cs", label="0: result.ShouldBeEquivalentTo(expectedResult)", span="34-34"];
m12_7 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", color=green, community=0, file="InstanceBuilder.cs", label="0: Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
m12_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilder.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m12_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="224-224"];
m12_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="267-267"];
m12_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", color=green, community=0, file="InstanceBuilder.cs", label="0: var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="227-232"];
m12_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="235-235"];
m12_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", color=green, community=0, file="InstanceBuilder.cs", label="0: var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="272-277"];
m12_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithEnum>)result).Value.Colors)", span="280-280"];
m12_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m12_12 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m12_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="195-195"];
m12_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="187-192"];
m12_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
m12_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="181-181"];
m12_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="267-267"];
m12_157 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m12_374 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="895-895"];
m12_375 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="898-903"];
m12_376 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilder.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == expected)", span="906-906"];
m12_377 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="895-895"];
m12_392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="934-934"];
m12_393 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithTwoRequiredAndSets>>(() => new FakeOptionsWithTwoRequiredAndSets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="937-942"];
m12_394 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="type == ParserResultType.NotParsed", span="945-945"];
m12_395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithTwoRequiredAndSets>)result).Errors.Should().HaveCount(x => x == expected)", span="947-947"];
m12_396 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="type == ParserResultType.Parsed", span="949-949"];
m12_397 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="result.Should().BeOfType<Parsed<FakeOptionsWithTwoRequiredAndSets>>()", span="951-951"];
m12_398 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="934-934"];
m12_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="181-181"];
m12_47 [cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m12_50 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m12_117 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="306-306"];
m12_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="309-309"];
m12_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="312-317"];
m12_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithEnum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="320-320"];
m12_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="306-306"];
m12_138 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m12_272 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m12_357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m12_202 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredAndSet.FakeOptionsWithRequiredAndSet()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredAndSet.FakeOptionsWithRequiredAndSet()", span="4-4"];
m12_453 [cluster="System.Uri.Uri(string)", file="InstanceBuilder.cs", label="Entry System.Uri.Uri(string)", span="0-0"];
m12_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="221-221"];
m12_264 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="662-662"];
m12_265 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="665-665"];
m12_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="668-673"];
m12_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithRequiredValue>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="676-676"];
m12_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="662-662"];
m12_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="561-561"];
m12_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="564-564"];
m12_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="567-572"];
m12_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptions>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="575-575"];
m12_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="561-561"];
m12_314 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m12_310 [cluster="Unk.get_IsSome", file="InstanceBuilder.cs", label="Entry Unk.get_IsSome", span=""];
m12_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="184-184"];
m12_186 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18"];
m12_0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m12_1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs", label="0: return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.WithSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-30"];
m12_2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m12_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="541-541"];
m12_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="544-544"];
m12_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequired>>(() => new FakeOptionsWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="547-552"];
m12_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithRequired>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="555-555"];
m12_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="541-541"];
m12_452 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSimpleType.FakeOptionsWithSimpleType()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSimpleType.FakeOptionsWithSimpleType()", span="23-23"];
m12_206 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519"];
m12_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilder.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="521-525"];
m12_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredAndSet>>(() => new FakeOptionsWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="527-532"];
m12_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithRequiredAndSet>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="535-535"];
m12_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="519-519"];
m12_125 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="326-326"];
m12_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="329-329"];
m12_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="332-337"];
m12_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithEnum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="340-340"];
m12_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="326-326"];
m12_68 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m12_406 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="957-957"];
m12_407 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="962-967"];
m12_408 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithRequiredValue>)result).Value)", span="970-970"];
m12_409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="957-957"];
m12_133 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="346-346"];
m12_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilder.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="349-355"];
m12_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="358-363"];
m12_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilder.cs", label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithValues>)result).Value)", span="366-366"];
m12_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="346-346"];
m12_420 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m12_346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m12_366 [cluster="Unk.HaveCount", file="InstanceBuilder.cs", label="Entry Unk.HaveCount", span=""];
m12_196 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m12_18 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="InstanceBuilder.cs", label="0: Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m12_391 [cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2"];
m12_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="798-798"];
m12_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="803-808"];
m12_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilder.cs", label="expectedValue.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset.Value)", span="813-813"];
m12_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilder.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset))", span="815-815"];
m12_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilder.cs", label="((Parsed<FakeOptionsWithFSharpOption>)result).Value.Offset != null", span="811-811"];
m12_320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="798-798"];
m12_421 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="996-996"];
m12_422 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilder.cs", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="999-999"];
m12_423 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="1002-1007"];
m12_424 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilder.cs", label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value)", span="1010-1010"];
m12_425 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="996-996"];
m12_149 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m12_192 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="InstanceBuilder.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="304-304"];
m12_178 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44"];
m12_158 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="423-423"];
m12_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="428-433"];
m12_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSequenceAndSeparator>)result).Value.StringSequence)", span="436-436"];
m12_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="423-423"];
m12_211 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
m12_289 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="729-729"];
m12_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="734-739"];
m12_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithNullables>)result).Value.NullableInt)", span="742-742"];
m12_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="729-729"];
m12_232 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="581-581"];
m12_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="584-584"];
m12_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="587-592"];
m12_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptions>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="595-595"];
m12_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="581-581"];
m12_197 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m12_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilder.cs", label="var expectedResult = new FakeOptionsWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m12_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredAndSet>>(() => new FakeOptionsWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="506-511"];
m12_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilder.cs", label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithRequiredAndSet>)result).Value)", span="514-514"];
m12_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m12_280 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="705-705"];
m12_281 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="708-708"];
m12_282 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="711-716"];
m12_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithSequenceMinMaxEqual>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="719-719"];
m12_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="705-705"];
m12_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m12_402 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithTwoRequiredAndSets.FakeOptionsWithTwoRequiredAndSets()", span="4-4"];
m12_442 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="1039-1039"];
m12_443 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="1044-1049"];
m12_444 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeImmutableOptions>)result).Value)", span="1052-1052"];
m12_445 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="1039-1039"];
m12_365 [cluster="Unk.Should", file="InstanceBuilder.cs", label="Entry Unk.Should", span=""];
m12_454 [cluster="CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", span="12-12"];
m12_273 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="686-686"];
m12_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="691-696"];
m12_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilder.cs", label="expected.ShouldBeEquivalentTo(((Parsed<FakeOptions>)result).Value.StringValue)", span="699-699"];
m12_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="686-686"];
m12_113 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="InstanceBuilder.cs", label="System.Globalization.CultureInfo", span=""];
m12_447 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="1058-1058"];
m12_448 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="InstanceBuilder.cs", label="var expectedResult = new FakeOptionsWithSimpleType { EndPoint = new Uri(''http://localhost/test/''), MyValue = new MySimpleType(''custom-value'') }", span="1061-1061"];
m12_449 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSimpleType>>(() => new FakeOptionsWithSimpleType()),\r\n                new[] { ''--endpoint=http://localhost/test/'', ''custom-value'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="1064-1069"];
m12_450 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="InstanceBuilder.cs", label="expectedResult.ShouldBeEquivalentTo(((Parsed<FakeOptionsWithSimpleType>)result).Value)", span="1072-1072"];
m12_451 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="1058-1058"];
m12_438 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithTwoRequired.FakeOptionsWithTwoRequired()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithTwoRequired.FakeOptionsWithTwoRequired()", span="4-4"];
m12_434 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m12_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m12_335 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m12_336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="837-837"];
m12_337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="840-845"];
m12_338 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Assert.Throws<ApplicationException>(test)", span="848-848"];
m12_339 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="837-837"];
m12_187 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="475-475"];
m12_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilder.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="478-482"];
m12_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilder.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="485-490"];
m12_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilder.cs", label="((NotParsed<FakeOptionsWithSets>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="493-493"];
m12_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="475-475"];
m12_458 [file="InstanceBuilder.cs", label=fakeOptions, span=""];
m12_459 [file="InstanceBuilder.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m12_460 [file="InstanceBuilder.cs", label=int, span=""];
m12_461 [file="InstanceBuilder.cs", label=int, span=""];
m12_462 [file="InstanceBuilder.cs", label=int, span=""];
m12_463 [file="InstanceBuilder.cs", label=int, span=""];
m13_0 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string)", file="InstanceBuilderTests.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(string, string)", span="46-46"];
m13_1 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string)", file="InstanceBuilderTests.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(string, string)", span="46-46"];
m13_2 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", file="InstanceBuilderTests.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", span="57-57"];
m13_3 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", file="InstanceBuilderTests.cs", label="Separator = separator", span="60-60"];
m13_4 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", file="InstanceBuilderTests.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(string, string, char)", span="57-57"];
m13_5 [file="InstanceBuilderTests.cs", label="CommandLine.OptionListAttribute", span=""];
m15_0 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="Entry CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m15_1 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="return value.Length == 1\r\n               ? comparer.Equals(value, shortName)\r\n               : comparer.Equals(value, longName);", span="10-12"];
m15_2 [cluster="CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", file="NameExtensions.cs", label="Exit CommandLine.Core.NameExtensions.MatchName(string, string, string, System.StringComparer)", span="8-8"];
m15_3 [cluster="System.StringComparer.Equals(string, string)", file="NameExtensions.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m16_0 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="16-16"];
m16_1 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="NameInfo.cs", label="var writer = new StringWriter()", span="19-19"];
m16_2 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="NameInfo.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="20-20"];
m16_4 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="NameInfo.cs", label="var text = writer.ToString()", span="26-26"];
m16_3 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="NameInfo.cs", label="sut.ParseArguments<FakeOptionsWithRequired>(new string[] { })", span="23-23"];
m16_5 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="NameInfo.cs", label="Assert.True(text.Length > 0)", span="27-27"];
m16_6 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated()", span="16-16"];
m16_97 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="189-189"];
m16_98 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="NameInfo.cs", label="var expectedOptions = new CommitOptions() { Message = message }", span="192-192"];
m16_100 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="NameInfo.cs", label="var result = sut.ParseArguments(\r\n                args,\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="196-198"];
m16_99 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="NameInfo.cs", label="var sut = new Parser()", span="193-193"];
m16_102 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="NameInfo.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="202-202"];
m16_101 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="NameInfo.cs", label="Assert.IsType<CommitOptions>(((Parsed<object>)result).Value)", span="201-201"];
m16_103 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name_in_verbs_scenario(string, string[])", span="189-189"];
m16_130 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265"];
m16_131 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="NameInfo.cs", label="var expectedError = new HelpRequestedError()", span="268-268"];
m16_132 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="NameInfo.cs", label="var sut = new Parser()", span="269-269"];
m16_135 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="NameInfo.cs", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="276-276"];
m16_133 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="NameInfo.cs", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="272-272"];
m16_134 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="NameInfo.cs", label="((NotParsed<FakeImmutableOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="275-275"];
m16_136 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="265-265"];
m16_191 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332"];
m16_192 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="var help = new StringWriter()", span="335-335"];
m16_193 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="336-336"];
m16_195 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="var result = help.ToString()", span="340-340"];
m16_194 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string[] { })", span="339-339"];
m16_196 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="result.Length.Should().BeGreaterThan(0)", span="343-343"];
m16_197 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="344-344"];
m16_198 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="345-345"];
m16_199 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="346-346"];
m16_200 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="347-347"];
m16_201 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="348-348"];
m16_202 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="349-349"];
m16_203 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="lines[5].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="350-350"];
m16_204 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="lines[6].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="351-351"];
m16_205 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="lines[7].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="352-352"];
m16_206 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="lines[8].ShouldBeEquivalentTo(''version    Display version information.'')", span="353-353"];
m16_207 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="332-332"];
m16_274 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444"];
m16_275 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="var help = new StringWriter()", span="447-447"];
m16_276 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="448-448"];
m16_278 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="var result = help.ToString()", span="453-453"];
m16_277 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="sut.ParseArguments<AddOptionsWithUsage, CommitOptionsWithUsage, CloneOptionsWithUsage>(\r\n                new[] { ''clone'', ''--badoption=@bad?value'' })", span="451-452"];
m16_279 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="456-456"];
m16_280 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="457-457"];
m16_281 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="458-458"];
m16_282 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="459-459"];
m16_283 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[3].ShouldBeEquivalentTo(''Option 'badoption' is unknown.'')", span="460-460"];
m16_284 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="461-461"];
m16_285 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[5].ShouldBeEquivalentTo(''Cloning quietly:'')", span="462-462"];
m16_286 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[6].ShouldBeEquivalentTo(''git clone --quiet https://github.com/gsscoder/railwaysharp'')", span="463-463"];
m16_287 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[7].ShouldBeEquivalentTo(''Cloning without hard links:'')", span="464-464"];
m16_288 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[8].ShouldBeEquivalentTo(''git clone --no-hardlinks https://github.com/gsscoder/csharpx'')", span="465-465"];
m16_289 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[9].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="466-466"];
m16_290 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[10].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="467-467"];
m16_291 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[11].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="468-468"];
m16_292 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[12].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="469-469"];
m16_293 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[13].ShouldBeEquivalentTo(''--version         Display version information.'')", span="470-470"];
m16_294 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="lines[14].ShouldBeEquivalentTo(''URLS (pos. 0)     A list of url(s) to clone.'')", span="471-471"];
m16_295 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="444-444"];
m16_8 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="NameInfo.cs", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="37-37"];
m16_93 [cluster="CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", file="NameInfo.cs", label="Entry CommandLine.Tests.Fakes.CloneOptions.CloneOptions()", span="36-36"];
m16_11 [cluster="Unk.True", file="NameInfo.cs", label="Entry Unk.True", span=""];
m16_147 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281"];
m16_148 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="NameInfo.cs", label="var help = new StringWriter()", span="284-284"];
m16_149 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="NameInfo.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="285-285"];
m16_151 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="NameInfo.cs", label="var result = help.ToString()", span="289-289"];
m16_150 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="NameInfo.cs", label="sut.ParseArguments<FakeImmutableOptions>(new[] { ''--help'' })", span="288-288"];
m16_152 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="NameInfo.cs", label="result.Length.Should().BeGreaterThan(0)", span="292-292"];
m16_153 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", span="281-281"];
m16_61 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112"];
m16_62 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="NameInfo.cs", label="var expectedOptions = new FakeOptionsWithValues\r\n                                  {\r\n                                      StringValue = ''astring'',\r\n                                      LongValue = 20L,\r\n                                      StringSequence = new[] { ''--aaa'', ''-b'', ''--ccc'' },\r\n                                      IntValue = 30\r\n                                  }", span="115-121"];
m16_63 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="NameInfo.cs", label="var sut = new Parser(with => with.EnableDashDash = true)", span="122-122"];
m16_65 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="NameInfo.cs", label="((Parsed<FakeOptionsWithValues>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="130-130"];
m16_64 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="NameInfo.cs", label="var result =\r\n                sut.ParseArguments<FakeOptionsWithValues>(\r\n                    new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="125-127"];
m16_66 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112"];
m16_139 [cluster="Unk.ContainSingle", file="NameInfo.cs", label="Entry Unk.ContainSingle", span=""];
m16_264 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428"];
m16_265 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="NameInfo.cs", label="var help = new StringWriter()", span="431-431"];
m16_266 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="NameInfo.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="432-432"];
m16_268 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="NameInfo.cs", label="var result = help.ToString()", span="436-436"];
m16_267 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="NameInfo.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { ''commit'', ''--help'' })", span="435-435"];
m16_269 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="NameInfo.cs", label="result.Length.Should().BeGreaterThan(0)", span="439-439"];
m16_270 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="428-428"];
m16_60 [cluster="Unk.>", file="NameInfo.cs", label="Entry Unk.>", span=""];
m16_22 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="NameInfo.cs", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="144-144"];
m16_35 [cluster="CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", file="NameInfo.cs", label="Entry CommandLine.Parser.ParseArguments<T1, T2, T3>(System.Collections.Generic.IEnumerable<string>)", span="46-46"];
m16_104 [cluster="CommandLine.Tests.Fakes.CommitOptions.CommitOptions()", file="NameInfo.cs", label="Entry CommandLine.Tests.Fakes.CommitOptions.CommitOptions()", span="22-22"];
m16_108 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207"];
m16_109 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="NameInfo.cs", label="var sut = Parser.Default", span="210-210"];
m16_110 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="NameInfo.cs", label="var result = sut.ParseArguments(\r\n                new[] { ''clone'', ''-q'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="213-215"];
m16_111 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="NameInfo.cs", label="Assert.IsType<NotParsed<object>>(result)", span="218-218"];
m16_112 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser_in_verbs_scenario()", span="207-207"];
m16_113 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223"];
m16_114 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="NameInfo.cs", label="var expectedOptions = new CloneOptions\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="226-235"];
m16_115 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="NameInfo.cs", label="var sut = new Parser()", span="236-236"];
m16_118 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="NameInfo.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="245-245"];
m16_116 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="NameInfo.cs", label="var result =\r\n                sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="239-241"];
m16_117 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="NameInfo.cs", label="Assert.IsType<CloneOptions>(((Parsed<object>)result).Value)", span="244-244"];
m16_119 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="223-223"];
m16_183 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="NameInfo.cs", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
m16_71 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135"];
m16_72 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="NameInfo.cs", label="var expectedOptions = new AddOptions { Patch = true, FileName = ''--strange-fn'' }", span="138-138"];
m16_73 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="NameInfo.cs", label="var sut = new Parser(with => with.EnableDashDash = true)", span="139-139"];
m16_76 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="NameInfo.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="150-150"];
m16_74 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="NameInfo.cs", label="var result = sut.ParseArguments(\r\n                new[] { ''add'', ''-p'', ''--'', ''--strange-fn'' },\r\n                typeof(AddOptions),\r\n                typeof(CommitOptions),\r\n                typeof(CloneOptions))", span="142-146"];
m16_75 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="NameInfo.cs", label="Assert.IsType<AddOptions>(((Parsed<object>)result).Value)", span="149-149"];
m16_77 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash_in_verbs_scenario()", span="135-135"];
m16_55 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", span="98-98"];
m16_56 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="NameInfo.cs", label="var sut = Parser.Default", span="101-101"];
m16_57 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="NameInfo.cs", label="var result = sut.ParseArguments<FakeOptionsWithSwitches>(new[] { ''-i'', ''-i'', ''-o'', ''file'' })", span="104-104"];
m16_58 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="NameInfo.cs", label="Assert.IsType<NotParsed<FakeOptionsWithSwitches>>(result)", span="107-107"];
m16_59 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", span="98-98"];
m16_7 [cluster="System.IO.StringWriter.StringWriter()", file="NameInfo.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m16_85 [cluster="Unk.RespectingRuntimeTypes", file="NameInfo.cs", label="Entry Unk.RespectingRuntimeTypes", span=""];
m16_154 [cluster="Unk.BeGreaterThan", file="NameInfo.cs", label="Entry Unk.BeGreaterThan", span=""];
m16_158 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297"];
m16_159 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="NameInfo.cs", label="var expectedError = new VersionRequestedError()", span="300-300"];
m16_160 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="NameInfo.cs", label="var sut = new Parser()", span="301-301"];
m16_163 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="NameInfo.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="308-308"];
m16_161 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="NameInfo.cs", label="var result = sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="304-304"];
m16_162 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="NameInfo.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == 1)", span="307-307"];
m16_164 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="297-297"];
m16_165 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="NameInfo.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m16_48 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", span="83-83"];
m16_49 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="NameInfo.cs", label="var expectedOptions = new FakeOptionsWithSwitches { OutputFile = outputFile }", span="86-86"];
m16_51 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="NameInfo.cs", label="var result = sut.ParseArguments<FakeOptionsWithSwitches>(args)", span="90-90"];
m16_50 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="NameInfo.cs", label="var sut = new Parser()", span="87-87"];
m16_52 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="NameInfo.cs", label="((Parsed<FakeOptionsWithSwitches>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="93-93"];
m16_53 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", span="83-83"];
m16_46 [cluster="CommandLine.Parser.Parser()", file="NameInfo.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m16_211 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358"];
m16_212 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="var help = new StringWriter()", span="361-361"];
m16_213 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="362-362"];
m16_215 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="var result = help.ToString()", span="366-366"];
m16_214 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { ''--help'' })", span="365-365"];
m16_216 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="369-369"];
m16_217 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="370-370"];
m16_218 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="371-371"];
m16_219 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="372-372"];
m16_220 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="373-373"];
m16_221 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="374-374"];
m16_222 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="375-375"];
m16_223 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="376-376"];
m16_224 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="358-358"];
m16_318 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="502-502"];
m16_13 [cluster="lambda expression", file="NameInfo.cs", label="with.HelpWriter = writer", span="20-20"];
m16_12 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="20-20"];
m16_14 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="20-20"];
m16_26 [cluster="lambda expression", file="NameInfo.cs", label="with.HelpWriter = writer", span="36-36"];
m16_25 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="36-36"];
m16_27 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="36-36"];
m16_37 [cluster="lambda expression", file="NameInfo.cs", label="with.HelpWriter = writer", span="52-52"];
m16_36 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="52-52"];
m16_38 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="52-52"];
m16_69 [cluster="lambda expression", file="NameInfo.cs", label="with.EnableDashDash = true", span="122-122"];
m16_68 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="122-122"];
m16_70 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="122-122"];
m16_80 [cluster="lambda expression", file="NameInfo.cs", label="with.EnableDashDash = true", span="139-139"];
m16_82 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="150-150"];
m16_79 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="139-139"];
m16_81 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="139-139"];
m16_83 [cluster="lambda expression", file="NameInfo.cs", label="o.RespectingRuntimeTypes()", span="150-150"];
m16_84 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="150-150"];
m16_94 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="180-180"];
m16_95 [cluster="lambda expression", file="NameInfo.cs", label="o.RespectingRuntimeTypes()", span="180-180"];
m16_96 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="180-180"];
m16_105 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="202-202"];
m16_106 [cluster="lambda expression", file="NameInfo.cs", label="o.RespectingRuntimeTypes()", span="202-202"];
m16_107 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="202-202"];
m16_120 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="245-245"];
m16_121 [cluster="lambda expression", file="NameInfo.cs", label="o.RespectingRuntimeTypes()", span="245-245"];
m16_122 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="245-245"];
m16_144 [cluster="lambda expression", file="NameInfo.cs", label="e.Equals(expectedError)", span="276-276"];
m16_140 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="275-275"];
m16_143 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="276-276"];
m16_141 [cluster="lambda expression", file="NameInfo.cs", label="x == 1", span="275-275"];
m16_142 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="275-275"];
m16_145 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="276-276"];
m16_156 [cluster="lambda expression", file="NameInfo.cs", label="config.HelpWriter = help", span="285-285"];
m16_155 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="285-285"];
m16_157 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="285-285"];
m16_170 [cluster="lambda expression", file="NameInfo.cs", label="e.Equals(expectedError)", span="308-308"];
m16_166 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="307-307"];
m16_169 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="308-308"];
m16_167 [cluster="lambda expression", file="NameInfo.cs", label="x == 1", span="307-307"];
m16_168 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="307-307"];
m16_171 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="308-308"];
m16_186 [cluster="lambda expression", file="NameInfo.cs", label="config.HelpWriter = help", span="317-317"];
m16_188 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="326-326"];
m16_185 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="317-317"];
m16_187 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="317-317"];
m16_189 [cluster="lambda expression", file="NameInfo.cs", label="x == 1", span="326-326"];
m16_190 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="326-326"];
m16_209 [cluster="lambda expression", file="NameInfo.cs", label="config.HelpWriter = help", span="336-336"];
m16_208 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="336-336"];
m16_210 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="336-336"];
m16_226 [cluster="lambda expression", file="NameInfo.cs", label="config.HelpWriter = help", span="362-362"];
m16_225 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="362-362"];
m16_227 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="362-362"];
m16_239 [cluster="lambda expression", file="NameInfo.cs", label="config.HelpWriter = help", span="387-387"];
m16_241 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="396-396"];
m16_238 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="387-387"];
m16_240 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="387-387"];
m16_242 [cluster="lambda expression", file="NameInfo.cs", label="x == 1", span="396-396"];
m16_243 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="396-396"];
m16_262 [cluster="lambda expression", file="NameInfo.cs", label="config.HelpWriter = help", span="406-406"];
m16_261 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="406-406"];
m16_263 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="406-406"];
m16_272 [cluster="lambda expression", file="NameInfo.cs", label="config.HelpWriter = help", span="432-432"];
m16_271 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="432-432"];
m16_273 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="432-432"];
m16_297 [cluster="lambda expression", file="NameInfo.cs", label="config.HelpWriter = help", span="448-448"];
m16_296 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="448-448"];
m16_298 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="448-448"];
m16_310 [cluster="lambda expression", file="NameInfo.cs", label="opts.ShouldBeEquivalentTo(expected)", span="490-490"];
m16_307 [cluster="lambda expression", file="NameInfo.cs", label="config.IgnoreUnknownArguments = true", span="483-483"];
m16_309 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="490-490"];
m16_306 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="483-483"];
m16_308 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="483-483"];
m16_311 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="490-490"];
m16_322 [cluster="lambda expression", file="NameInfo.cs", label="opts.ShouldBeEquivalentTo(expected)", span="509-509"];
m16_319 [cluster="lambda expression", file="NameInfo.cs", label="config.IgnoreUnknownArguments = true", span="502-502"];
m16_321 [cluster="lambda expression", file="NameInfo.cs", label="Entry lambda expression", span="509-509"];
m16_320 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="502-502"];
m16_323 [cluster="lambda expression", file="NameInfo.cs", label="Exit lambda expression", span="509-509"];
m16_244 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402"];
m16_245 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="var help = new StringWriter()", span="405-405"];
m16_246 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="406-406"];
m16_248 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="var result = help.ToString()", span="410-410"];
m16_247 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="sut.ParseArguments<FakeOptionsWithTwoRequiredAndSets>(new[] { ''--weburl=value.com'', ''--ftpurl=value.org'' })", span="409-409"];
m16_249 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="413-413"];
m16_250 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="414-414"];
m16_251 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="415-415"];
m16_252 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="416-416"];
m16_253 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[3].ShouldBeEquivalentTo(''Option: 'weburl' is not compatible with: 'ftpurl'.'')", span="417-417"];
m16_254 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[4].ShouldBeEquivalentTo(''Option: 'ftpurl' is not compatible with: 'weburl'.'')", span="418-418"];
m16_255 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[5].ShouldBeEquivalentTo(''--weburl     Required.'')", span="419-419"];
m16_256 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[6].ShouldBeEquivalentTo(''--ftpurl     Required.'')", span="420-420"];
m16_257 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[7].ShouldBeEquivalentTo(''-a'')", span="421-421"];
m16_258 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[8].ShouldBeEquivalentTo(''--help       Display this help screen.'')", span="422-422"];
m16_259 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="lines[9].ShouldBeEquivalentTo(''--version    Display version information.'')", span="423-423"];
m16_260 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="402-402"];
m16_28 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48"];
m16_29 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="NameInfo.cs", label="var writer = new StringWriter()", span="51-51"];
m16_30 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="NameInfo.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="52-52"];
m16_32 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="NameInfo.cs", label="var text = writer.ToString()", span="58-58"];
m16_31 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="NameInfo.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new string[] { })", span="55-55"];
m16_33 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="NameInfo.cs", label="text.Should().NotBeEmpty()", span="59-59"];
m16_34 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario_using_generic_overload()", span="48-48"];
m16_23 [cluster="Unk.Should", file="NameInfo.cs", label="Entry Unk.Should", span=""];
m16_146 [cluster="Unk.Equals", file="NameInfo.cs", label="Entry Unk.Equals", span=""];
m16_24 [cluster="Unk.NotBeEmpty", file="NameInfo.cs", label="Entry Unk.NotBeEmpty", span=""];
m16_10 [cluster="System.IO.StringWriter.ToString()", file="NameInfo.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m16_184 [cluster="Unk.StartWithEquivalent", file="NameInfo.cs", label="Entry Unk.StartWithEquivalent", span=""];
m16_299 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", span="478-478"];
m16_300 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="NameInfo.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="483-483"];
m16_301 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="NameInfo.cs", label="var result = sut.ParseArguments<FakeOptions>(arguments)", span="486-486"];
m16_303 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="NameInfo.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="490-490"];
m16_302 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="NameInfo.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="489-489"];
m16_304 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.FakeOptions)", span="478-478"];
m16_138 [cluster="Unk.HaveCount", file="NameInfo.cs", label="Entry Unk.HaveCount", span=""];
m16_129 [cluster="CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", file="NameInfo.cs", label="Entry CommandLine.Tests.Fakes.FakeImmutableOptions.FakeImmutableOptions(string, System.Collections.Generic.IEnumerable<int>, bool, long)", span="13-13"];
m16_78 [cluster="CommandLine.Tests.Fakes.AddOptions.AddOptions()", file="NameInfo.cs", label="Entry CommandLine.Tests.Fakes.AddOptions.AddOptions()", span="7-7"];
m16_39 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options()", span="64-64"];
m16_40 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", color=red, community=0, file="NameInfo.cs", label="1: var expectedOptions = new FakeOptions { StringValue = ''strvalue'', IntSequence = new[] { 1, 2, 3 } }", span="67-67"];
m16_41 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", color=red, community=0, file="NameInfo.cs", label="0: var sut = new Parser()", span="68-68"];
m16_43 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", color=red, community=0, file="NameInfo.cs", label="0: ((Parsed<FakeOptions>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="74-74"];
m16_42 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", color=red, community=0, file="NameInfo.cs", label="0: var result = sut.ParseArguments<FakeOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="71-71"];
m16_44 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options()", span="64-64"];
m16_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", file="NameInfo.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", span="4-4"];
m16_172 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313"];
m16_173 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="var help = new StringWriter()", span="316-316"];
m16_174 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="317-317"];
m16_176 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="var result = help.ToString()", span="321-321"];
m16_175 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="sut.ParseArguments<FakeOptions>(new[] { ''--version'' })", span="320-320"];
m16_177 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="result.Length.Should().BeGreaterThan(0)", span="324-324"];
m16_178 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="325-325"];
m16_179 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="lines.Should().HaveCount(x => x == 1)", span="326-326"];
m16_180 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="327-327"];
m16_181 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="313-313"];
m16_123 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250"];
m16_124 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="NameInfo.cs", label="var expectedOptions = new FakeImmutableOptions(''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="253-253"];
m16_125 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="NameInfo.cs", label="var sut = new Parser()", span="254-254"];
m16_127 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="NameInfo.cs", label="((Parsed<FakeImmutableOptions>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="260-260"];
m16_126 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="NameInfo.cs", label="var result = sut.ParseArguments<FakeImmutableOptions>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="257-257"];
m16_128 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="250-250"];
m16_15 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32"];
m16_16 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="NameInfo.cs", label="var writer = new StringWriter()", span="35-35"];
m16_17 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="NameInfo.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="36-36"];
m16_19 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="NameInfo.cs", label="var text = writer.ToString()", span="42-42"];
m16_18 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="NameInfo.cs", label="sut.ParseArguments(new string[] { }, typeof(AddOptions), typeof(CommitOptions), typeof(CloneOptions))", span="39-39"];
m16_20 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="NameInfo.cs", label="text.Should().NotBeEmpty()", span="43-43"];
m16_21 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32"];
m16_182 [cluster="string.ToNotEmptyLines()", file="NameInfo.cs", label="Entry string.ToNotEmptyLines()", span="10-10"];
m16_305 [cluster="Unk.WithParsed", file="NameInfo.cs", label="Entry Unk.WithParsed", span=""];
m16_9 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="NameInfo.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m16_86 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="155-155"];
m16_87 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="NameInfo.cs", label="var expectedOptions = new CloneOptions\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="158-167"];
m16_88 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="NameInfo.cs", label="var sut = new Parser()", span="168-168"];
m16_91 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="NameInfo.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="180-180"];
m16_89 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="NameInfo.cs", label="var result =\r\n                sut.ParseArguments(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                    typeof(AddOptions),\r\n                    typeof(CommitOptions),\r\n                    typeof(CloneOptions))", span="171-176"];
m16_90 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="NameInfo.cs", label="Assert.IsType<CloneOptions>(((Parsed<object>)result).Value)", span="179-179"];
m16_92 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="155-155"];
m16_45 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="NameInfo.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m16_228 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383"];
m16_229 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="var help = new StringWriter()", span="386-386"];
m16_231 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(new[] { command })", span="390-390"];
m16_230 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="387-387"];
m16_232 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="var result = help.ToString()", span="391-391"];
m16_233 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="result.Length.Should().BeGreaterThan(0)", span="394-394"];
m16_234 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="395-395"];
m16_235 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="lines.Should().HaveCount(x => x == 1)", span="396-396"];
m16_236 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="397-397"];
m16_237 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="383-383"];
m16_67 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="NameInfo.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m16_312 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="NameInfo.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", span="497-497"];
m16_313 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="NameInfo.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="502-502"];
m16_314 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="NameInfo.cs", label="var result = sut.ParseArguments<AddOptions, CommitOptions, CloneOptions>(arguments)", span="505-505"];
m16_316 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="NameInfo.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="509-509"];
m16_315 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="NameInfo.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="508-508"];
m16_317 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", file="NameInfo.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.CommitOptions)", span="497-497"];
m16_137 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="NameInfo.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="368-368"];
m16_47 [cluster="Unk.ShouldBeEquivalentTo", file="NameInfo.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m16_324 [file="NameInfo.cs", label=writer, span=""];
m16_325 [file="NameInfo.cs", label=writer, span=""];
m16_326 [file="NameInfo.cs", label=writer, span=""];
m16_327 [file="NameInfo.cs", label=expectedError, span=""];
m16_328 [file="NameInfo.cs", label=help, span=""];
m16_329 [file="NameInfo.cs", label=expectedError, span=""];
m16_330 [file="NameInfo.cs", label=help, span=""];
m16_331 [file="NameInfo.cs", label=help, span=""];
m16_332 [file="NameInfo.cs", label=help, span=""];
m16_333 [file="NameInfo.cs", label=help, span=""];
m16_334 [file="NameInfo.cs", label=help, span=""];
m16_335 [file="NameInfo.cs", label=help, span=""];
m16_336 [file="NameInfo.cs", label=help, span=""];
m16_337 [file="NameInfo.cs", label="CommandLine.Tests.Fakes.FakeOptions", span=""];
m16_338 [file="NameInfo.cs", label="CommandLine.Tests.Fakes.CommitOptions", span=""];
m17_13 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NameLookup.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m17_11 [cluster="Unk.SingleOrDefault", file="NameLookup.cs", label="Entry Unk.SingleOrDefault", span=""];
m17_8 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m17_9 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="return specifications.SingleOrDefault(\r\n                a => name.MatchName(a.ShortName, a.LongName, comparer) && a.Separator != '\0')\r\n                .ToMaybe()\r\n                .Return(spec => Maybe.Just(spec.Separator), Maybe.Nothing<char>());", span="19-22"];
m17_10 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Exit CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m17_0 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m17_1 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="return specifications.Any(a => name.MatchName(a.ShortName, a.LongName, comparer));", span="13-13"];
m17_2 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookup.cs", label="Exit CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m17_7 [cluster="string.MatchName(string, string, System.StringComparer)", file="NameLookup.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m17_12 [cluster="Unk.ToMaybe", file="NameLookup.cs", label="Entry Unk.ToMaybe", span=""];
m17_21 [cluster="Unk.Just", file="NameLookup.cs", label="Entry Unk.Just", span=""];
m17_18 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="22-22"];
m17_5 [cluster="lambda expression", file="NameLookup.cs", label="name.MatchName(a.ShortName, a.LongName, comparer)", span="13-13"];
m17_4 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="13-13"];
m17_6 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="13-13"];
m17_16 [cluster="lambda expression", file="NameLookup.cs", label="name.MatchName(a.ShortName, a.LongName, comparer) && a.Separator != '\0'", span="20-20"];
m17_15 [cluster="lambda expression", file="NameLookup.cs", label="Entry lambda expression", span="20-20"];
m17_17 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="20-20"];
m17_19 [cluster="lambda expression", file="NameLookup.cs", label="Maybe.Just(spec.Separator)", span="22-22"];
m17_20 [cluster="lambda expression", file="NameLookup.cs", label="Exit lambda expression", span="22-22"];
m17_14 [cluster="Unk.Return", file="NameLookup.cs", label="Entry Unk.Return", span=""];
m17_3 [cluster="Unk.Any", file="NameLookup.cs", label="Entry Unk.Any", span=""];
m17_22 [file="NameLookup.cs", label=string, span=""];
m17_23 [file="NameLookup.cs", label="System.StringComparer", span=""];
m17_24 [file="NameLookup.cs", label=string, span=""];
m17_25 [file="NameLookup.cs", label="System.StringComparer", span=""];
m18_6 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NameLookupTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m18_9 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m18_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="NameLookupTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m18_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m18_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var expected = Maybe.Just(''.'')", span="17-17"];
m18_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=red, community=0, file="NameLookupTests.cs", label="0: var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, '.', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="18-19"];
m18_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m18_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=red, community=0, file="NameLookupTests.cs", label="0: var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m18_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m18_10 [cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m18_8 [cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m20_12 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m20_6 [cluster="Unk.Create", file="OptionMapper.cs", label="Entry Unk.Create", span=""];
m20_10 [cluster="Unk.SingleOrDefault", file="OptionMapper.cs", label="Entry Unk.SingleOrDefault", span=""];
m20_31 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", file="OptionMapper.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18"];
m20_26 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m20_4 [cluster="Unk.Select", file="OptionMapper.cs", label="Entry Unk.Select", span=""];
m20_0 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs", label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", span="13-13"];
m20_1 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", color=green, community=0, file="OptionMapper.cs", label="0: var sequencesAndErrors = propertyTuples\r\n                .Select(pt =>\r\n                    options.SingleOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))\r\n                )", span="19-35"];
m20_2 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs", label="return StatePair.Create(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="36-38"];
m20_3 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", file="OptionMapper.cs", label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>, System.StringComparer)", span="13-13"];
m20_22 [cluster="System.Type.IsScalar()", file="OptionMapper.cs", label="Entry System.Type.IsScalar()", span="33-33"];
m20_18 [cluster="string.MatchName(string, string, System.StringComparer)", file="OptionMapper.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m20_24 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="OptionMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m20_11 [cluster="Unk.ToMaybe", file="OptionMapper.cs", label="Entry Unk.ToMaybe", span=""];
m20_25 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="OptionMapper.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m20_13 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="OptionMapper.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m20_28 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="27-30"];
m20_8 [cluster="lambda expression", color=green, community=0, file="OptionMapper.cs", label="0: options.SingleOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .Return(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification))))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))", span="21-34"];
m20_16 [cluster="lambda expression", file="OptionMapper.cs", label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", span="23-23"];
m20_20 [cluster="lambda expression", color=green, community=0, file="OptionMapper.cs", label="0: converter(sequence.Value, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                                    .Return(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(NameInfo.FromOptionSpecification((OptionSpecification)pt.Specification)))))", span="26-33"];
m20_7 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="20-34"];
m20_32 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="37-37"];
m20_35 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="38-38"];
m20_38 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="38-38"];
m20_29 [cluster="lambda expression", file="OptionMapper.cs", label="Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>())", span="28-30"];
m20_9 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="20-34"];
m20_15 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="22-23"];
m20_19 [cluster="lambda expression", file="OptionMapper.cs", label="Entry lambda expression", span="25-33"];
m20_17 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="22-23"];
m20_21 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="25-33"];
m20_30 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="27-30"];
m20_33 [cluster="lambda expression", file="OptionMapper.cs", label="se.Item1", span="37-37"];
m20_34 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="37-37"];
m20_36 [cluster="lambda expression", file="OptionMapper.cs", label="se.Item2", span="38-38"];
m20_37 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="38-38"];
m20_39 [cluster="lambda expression", file="OptionMapper.cs", label="se.Value", span="38-38"];
m20_40 [cluster="lambda expression", file="OptionMapper.cs", label="Exit lambda expression", span="38-38"];
m20_14 [cluster="Unk.Return", file="OptionMapper.cs", label="Entry Unk.Return", span=""];
m20_23 [cluster="Unk.converter", file="OptionMapper.cs", label="Entry Unk.converter", span=""];
m20_5 [cluster="Unk.>", file="OptionMapper.cs", label="Entry Unk.>", span=""];
m20_27 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="OptionMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m20_41 [file="OptionMapper.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
m20_42 [file="OptionMapper.cs", label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", span=""];
m20_43 [file="OptionMapper.cs", label="System.StringComparer", span=""];
m20_44 [file="OptionMapper.cs", label="CommandLine.Core.SpecificationProperty", span=""];
m21_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapperTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m21_12 [cluster="Unk.Create", file="OptionMapperTests.cs", label="Entry Unk.Create", span=""];
m21_13 [cluster="Unk.Where", file="OptionMapperTests.cs", label="Entry Unk.Where", span=""];
m21_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m21_11 [cluster="Unk.Single", file="OptionMapperTests.cs", label="Entry Unk.Single", span=""];
m21_15 [cluster="Unk.NotNull", file="OptionMapperTests.cs", label="Entry Unk.NotNull", span=""];
m21_27 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m21_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m21_2 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=green, community=0, file="OptionMapperTests.cs", label="0: var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, -1, -1, '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29"];
m21_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22"];
m21_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36"];
m21_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="39-42"];
m21_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m21_28 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="40-42"];
m21_16 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="27-27"];
m21_20 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="33-33"];
m21_24 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="35-35"];
m21_18 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="27-27"];
m21_17 [cluster="lambda expression", file="OptionMapperTests.cs", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27"];
m21_22 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="33-33"];
m21_21 [cluster="lambda expression", file="OptionMapperTests.cs", label="pt.Specification.IsOption()", span="33-33"];
m21_26 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="35-35"];
m21_25 [cluster="lambda expression", file="OptionMapperTests.cs", label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35"];
m21_29 [cluster="lambda expression", file="OptionMapperTests.cs", label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="40-42"];
m21_30 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="40-42"];
m21_31 [cluster="string.Equals(string)", file="OptionMapperTests.cs", label="Entry string.Equals(string)", span="0-0"];
m21_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m21_19 [cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m21_23 [cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m21_14 [cluster="Unk.MapValues", file="OptionMapperTests.cs", label="Entry Unk.MapValues", span=""];
m21_10 [cluster="System.Type.GetProperties()", file="OptionMapperTests.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m21_9 [cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m22_9 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m22_10 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="OptionSpecification.cs", label="0: return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.Separator,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                attribute.HelpText,\r\n                attribute.MetaValue,\r\n                enumValues);", span="31-43"];
m22_11 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m22_12 [cluster="T.ToMaybe<T>()", file="OptionSpecification.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m22_0 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m22_1 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="OptionSpecification.cs", label="1: this.shortName = shortName", span="20-20"];
m22_2 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="OptionSpecification.cs", label="0: this.longName = longName", span="21-21"];
m22_3 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.separator = separator", span="22-22"];
m22_4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.setName = setName", span="23-23"];
m22_5 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.helpText = helpText", span="24-24"];
m22_6 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.metaValue = metaValue", span="25-25"];
m22_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.enumValues = enumValues", span="26-26"];
m22_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m22_13 [file="OptionSpecification.cs", label="CommandLine.Core.OptionSpecification", span=""];
m26_9 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ReflectionHelper.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m26_1 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="ReflectionHelper.cs", label="var assembly = Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly()", span="12-12"];
m26_0 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="ReflectionHelper.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="9-9"];
m26_2 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="ReflectionHelper.cs", label="var attributes = assembly.GetCustomAttributes(typeof(TAttribute), false)", span="13-13"];
m26_3 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="ReflectionHelper.cs", label="return attributes.Length > 0\r\n                ? Maybe.Just((TAttribute)attributes[0])\r\n                : Maybe.Nothing<TAttribute>();", span="15-17"];
m26_4 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="ReflectionHelper.cs", label="Exit CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="9-9"];
m26_8 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ReflectionHelper.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m26_7 [cluster="System.Reflection.Assembly.GetCustomAttributes(System.Type, bool)", file="ReflectionHelper.cs", label="Entry System.Reflection.Assembly.GetCustomAttributes(System.Type, bool)", span="0-0"];
m26_6 [cluster="System.Reflection.Assembly.GetExecutingAssembly()", file="ReflectionHelper.cs", label="Entry System.Reflection.Assembly.GetExecutingAssembly()", span="0-0"];
m26_5 [cluster="System.Reflection.Assembly.GetEntryAssembly()", file="ReflectionHelper.cs", label="Entry System.Reflection.Assembly.GetEntryAssembly()", span="0-0"];
m26_14 [cluster="System.Reflection.Assembly.GetName()", file="ReflectionHelper.cs", label="Entry System.Reflection.Assembly.GetName()", span="0-0"];
m26_16 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="ReflectionHelper.cs", label="var assembly = Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly()", span="28-28"];
m26_15 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="ReflectionHelper.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", span="26-26"];
m26_17 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="ReflectionHelper.cs", label="return assembly.GetName().Version.ToStringInvariant();", span="29-29"];
m26_18 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", file="ReflectionHelper.cs", label="Exit CommandLine.Infrastructure.ReflectionHelper.GetAssemblyVersion()", span="26-26"];
m26_19 [cluster="T.ToStringInvariant<T>()", file="ReflectionHelper.cs", label="Entry T.ToStringInvariant<T>()", span="14-14"];
m26_11 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", file="ReflectionHelper.cs", label="var assembly = Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly()", span="22-22"];
m26_10 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", file="ReflectionHelper.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", span="20-20"];
m26_12 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", file="ReflectionHelper.cs", label="return assembly.GetName().Name;", span="23-23"];
m26_13 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", file="ReflectionHelper.cs", label="Exit CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", span="20-20"];
m28_0 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m28_1 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Scalar.cs", label="0: return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-22"];
m28_2 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Scalar.cs", label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m28_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="Scalar.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m28_11 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="18-19"];
m28_5 [cluster="lambda expression", color=green, community=0, file="Scalar.cs", label="0: f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="17-20"];
m28_4 [cluster="lambda expression", file="Scalar.cs", label="Entry lambda expression", span="16-20"];
m28_12 [cluster="lambda expression", color=green, community=0, file="Scalar.cs", label="0: info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }", span="19-19"];
m28_6 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="16-20"];
m28_13 [cluster="lambda expression", file="Scalar.cs", label="Exit lambda expression", span="18-19"];
m28_10 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Scalar.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m28_7 [cluster="CommandLine.Core.Token.IsName()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m28_8 [cluster="CommandLine.Core.Token.IsValue()", file="Scalar.cs", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
m28_14 [file="Scalar.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m28_15 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m28_16 [file="Scalar.cs", label="CommandLine.Core.Token", span=""];
m29_11 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ScalarTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m29_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="ScalarTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m29_5 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="ScalarTests.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m29_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ScalarTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m29_14 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs", label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28"];
m29_15 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs", label="var expected = new [] { Token.Name(''str''), Token.Value(''strvalue'') }", span="30-30"];
m29_16 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", color=red, community=0, file="ScalarTests.cs", label="0: var result = Scalar.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41"];
m29_17 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="43-43"];
m29_18 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="ScalarTests.cs", label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28"];
m29_0 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs", label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13"];
m29_1 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs", label="var expected = new Token[] { }", span="15-15"];
m29_2 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", color=red, community=0, file="ScalarTests.cs", label="0: var result = Scalar.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22"];
m29_3 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
m29_4 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="ScalarTests.cs", label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13"];
m29_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="ScalarTests.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m29_21 [cluster="lambda expression", file="ScalarTests.cs", label="Entry lambda expression", span="38-41"];
m29_7 [cluster="lambda expression", file="ScalarTests.cs", label="Entry lambda expression", span="19-22"];
m29_8 [cluster="lambda expression", color=red, community=0, file="ScalarTests.cs", label="0: new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22"];
m29_9 [cluster="lambda expression", file="ScalarTests.cs", label="Exit lambda expression", span="19-22"];
m29_22 [cluster="lambda expression", color=red, community=0, file="ScalarTests.cs", label="0: new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41"];
m29_23 [cluster="lambda expression", file="ScalarTests.cs", label="Exit lambda expression", span="38-41"];
m29_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="ScalarTests.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
m29_19 [cluster="CommandLine.Core.Token.Name(string)", file="ScalarTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m29_20 [cluster="CommandLine.Core.Token.Value(string)", file="ScalarTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m31_11 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="SequenceTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m31_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="SequenceTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m31_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SequenceTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m31_5 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="SequenceTests.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m31_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="SequenceTests.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m31_37 [cluster="lambda expression", file="SequenceTests.cs", label="Entry lambda expression", span="88-91"];
m31_7 [cluster="lambda expression", file="SequenceTests.cs", label="Entry lambda expression", span="19-22"];
m31_8 [cluster="lambda expression", color=green, community=0, file="SequenceTests.cs", label="0: new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22"];
m31_9 [cluster="lambda expression", file="SequenceTests.cs", label="Exit lambda expression", span="19-22"];
m31_21 [cluster="lambda expression", file="SequenceTests.cs", label="Entry lambda expression", span="42-45"];
m31_22 [cluster="lambda expression", color=green, community=0, file="SequenceTests.cs", label="0: new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="43-45"];
m31_23 [cluster="lambda expression", file="SequenceTests.cs", label="Exit lambda expression", span="42-45"];
m31_29 [cluster="lambda expression", file="SequenceTests.cs", label="Entry lambda expression", span="67-70"];
m31_30 [cluster="lambda expression", color=green, community=0, file="SequenceTests.cs", label="0: new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="68-70"];
m31_31 [cluster="lambda expression", file="SequenceTests.cs", label="Exit lambda expression", span="67-70"];
m31_38 [cluster="lambda expression", color=green, community=0, file="SequenceTests.cs", label="0: new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="89-91"];
m31_39 [cluster="lambda expression", file="SequenceTests.cs", label="Exit lambda expression", span="88-91"];
m31_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="SequenceTests.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
m31_14 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="SequenceTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28"];
m31_15 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="SequenceTests.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="30-33"];
m31_16 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", color=green, community=0, file="SequenceTests.cs", label="0: var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="35-45"];
m31_17 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="SequenceTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="47-47"];
m31_18 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="SequenceTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28"];
m31_19 [cluster="CommandLine.Core.Token.Name(string)", file="SequenceTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m31_0 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="SequenceTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13"];
m31_1 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="SequenceTests.cs", label="var expected = new Token[] { }", span="15-15"];
m31_2 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", color=green, community=0, file="SequenceTests.cs", label="0: var result = Sequence.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22"];
m31_3 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="SequenceTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
m31_4 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="SequenceTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13"];
m31_32 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="SequenceTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76"];
m31_33 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="SequenceTests.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="78-81"];
m31_34 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", color=green, community=0, file="SequenceTests.cs", label="0: var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="83-91"];
m31_35 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="SequenceTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="93-93"];
m31_36 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="SequenceTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76"];
m31_20 [cluster="CommandLine.Core.Token.Value(string)", file="SequenceTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m31_24 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="SequenceTests.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51"];
m31_25 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="SequenceTests.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                    Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                }", span="53-57"];
m31_26 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", color=green, community=0, file="SequenceTests.cs", label="0: var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2''),\r\n                        Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="59-70"];
m31_27 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="SequenceTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="72-72"];
m31_28 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="SequenceTests.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51"];
m33_26 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Specification.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m33_27 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="Specification.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m33_22 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="Specification.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m33_28 [cluster="string.ToLowerInvariant()", file="Specification.cs", label="Entry string.ToLowerInvariant()", span="0-0"];
m33_25 [cluster="System.Enum.GetNames(System.Type)", file="Specification.cs", label="Entry System.Enum.GetNames(System.Type)", span="0-0"];
m33_30 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="Specification.cs", label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="16-16"];
m33_8 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="67-67"];
m33_14 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs", label="0: return spec.WithLongName(property.Name.ToLowerInvariant());", span="79-79"];
m33_12 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="var spec = OptionSpecification.FromAttribute(oa.Single(), property.PropertyType,\r\n                    property.PropertyType.IsEnum\r\n                        ? Enum.GetNames(property.PropertyType)\r\n                        : Enumerable.Empty<string>())", span="73-76"];
m33_13 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs", label="1: spec.ShortName.Length == 0 && spec.LongName.Length == 0", span="77-77"];
m33_15 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", color=green, community=0, file="Specification.cs", label="0: return spec;", span="81-81"];
m33_9 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="var attrs = property.GetCustomAttributes(true)", span="69-69"];
m33_18 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="return ValueSpecification.FromAttribute(va.Single(), property.PropertyType);", span="87-87"];
m33_10 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="var oa = attrs.OfType<OptionAttribute>()", span="70-70"];
m33_11 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="oa.Count() == 1", span="71-71"];
m33_19 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="throw new InvalidOperationException();", span="90-90"];
m33_16 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="var va = attrs.OfType<ValueAttribute>()", span="84-84"];
m33_17 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="va.Count() == 1", span="85-85"];
m33_20 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="Exit CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="67-67"];
m33_31 [cluster="System.InvalidOperationException.InvalidOperationException()", file="Specification.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m33_21 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="Specification.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m33_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m33_29 [cluster="CommandLine.Core.OptionSpecification.WithLongName(string)", file="Specification.cs", label="Entry CommandLine.Core.OptionSpecification.WithLongName(string)", span="21-21"];
m33_0 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="Entry CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="27-27"];
m33_5 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", color=green, community=0, file="Specification.cs", label="0: this.defaultValue = defaultValue", span="33-33"];
m33_4 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.max = max", span="32-32"];
m33_6 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.conversionType = conversionType", span="34-34"];
m33_1 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.tag = tag", span="29-29"];
m33_2 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.required = required", span="30-30"];
m33_3 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="this.min = min", span="31-31"];
m33_7 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="Specification.cs", label="Exit CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="27-27"];
m33_32 [file="Specification.cs", label="CommandLine.Core.Specification", span=""];
m35_6 [cluster="System.Type.ToDescriptorKind()", file="SpecificationGuards.cs", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
m35_0 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16"];
m35_1 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", color=red, community=0, file="SpecificationGuards.cs", label="0: return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0);", span="18-18"];
m35_2 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", file="SpecificationGuards.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstScalarWithRange()", span="16-16"];
m35_7 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21"];
m35_8 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", color=red, community=1, file="SpecificationGuards.cs", label="0: return spec => spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max;", span="23-24"];
m35_9 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", file="SpecificationGuards.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstSequenceWithWrongRange()", span="21-21"];
m35_18 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="29-29"];
m35_4 [cluster="lambda expression", color=red, community=0, file="SpecificationGuards.cs", label="0: spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Scalar && (spec.Min > 0 || spec.Max > 0)", span="18-18"];
m35_3 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="18-18"];
m35_5 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="18-18"];
m35_11 [cluster="lambda expression", color=red, community=1, file="SpecificationGuards.cs", label="0: spec.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                && !spec.IsMinNotSpecified() && !spec.IsMaxNotSpecified() && spec.Min > spec.Max", span="23-24"];
m35_10 [cluster="lambda expression", file="SpecificationGuards.cs", label="Entry lambda expression", span="23-24"];
m35_12 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="23-24"];
m35_19 [cluster="lambda expression", file="SpecificationGuards.cs", label="spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1", span="29-29"];
m35_20 [cluster="lambda expression", file="SpecificationGuards.cs", label="Exit lambda expression", span="29-29"];
m35_15 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27"];
m35_16 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="SpecificationGuards.cs", label="return spec => spec.IsOption() && ((OptionSpecification)spec).LongName.Length == 1;", span="29-29"];
m35_17 [cluster="CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", file="SpecificationGuards.cs", label="Exit CommandLine.Core.SpecificationGuards.GuardAgainstOneCharLongName()", span="27-27"];
m35_21 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m35_13 [cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70"];
m35_14 [cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="SpecificationGuards.cs", label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75"];
m36_12 [cluster="Unk.Create", file="SpecificationPropertyExtensions.cs", label="Entry Unk.Create", span=""];
m36_13 [cluster="Unk.Where", color=green, community=0, file="SpecificationPropertyExtensions.cs", label="0: Entry Unk.Where", span=""];
m36_14 [cluster="Unk.MapValues", color=green, community=0, file="SpecificationPropertyExtensions.cs", label="0: Entry Unk.MapValues", span=""];
m36_16 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="28-28"];
m36_15 [cluster="Unk.NotNull", file="SpecificationPropertyExtensions.cs", label="Entry Unk.NotNull", span=""];
m36_17 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="28-28"];
m36_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m36_27 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
m36_31 [cluster="Unk.IsOption", file="SpecificationPropertyExtensions.cs", label="Entry Unk.IsOption", span=""];
m36_23 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m36_11 [cluster="Unk.Single", file="SpecificationPropertyExtensions.cs", label="Entry Unk.Single", span=""];
m36_21 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="pt.Specification.IsOption()", span="34-34"];
m36_28 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="41-43"];
m36_20 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="SpecificationPropertyExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m36_24 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Entry lambda expression", span="36-36"];
m36_18 [cluster="System.Type.ToDescriptorKind()", file="SpecificationPropertyExtensions.cs", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
m36_22 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SpecificationPropertyExtensions.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m36_25 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="36-36"];
m36_26 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="36-36"];
m36_29 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyExtensions.cs", label="0: a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="41-43"];
m36_30 [cluster="lambda expression", file="SpecificationPropertyExtensions.cs", label="Exit lambda expression", span="41-43"];
m36_19 [cluster="System.Type.GetGenericArguments()", file="SpecificationPropertyExtensions.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m36_10 [cluster="System.Type.GetProperties()", file="SpecificationPropertyExtensions.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m36_32 [cluster="string.Equals(string)", file="SpecificationPropertyExtensions.cs", label="Entry string.Equals(string)", span="0-0"];
m36_8 [cluster="CSharpx.Maybe.Nothing<T>()", file="SpecificationPropertyExtensions.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m36_9 [cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyExtensions.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m36_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="SpecificationPropertyExtensions.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m36_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationPropertyExtensions.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17"];
m36_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationPropertyExtensions.cs", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="20-23"];
m36_2 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=red, community=0, file="SpecificationPropertyExtensions.cs", label="0: var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), string.Empty, string.Empty, new List<string>(), typeof(bool), TargetType.Switch), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="24-30"];
m36_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationPropertyExtensions.cs", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="33-37"];
m36_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=red, community=0, file="SpecificationPropertyExtensions.cs", label="0: Assert.NotNull(((Ok<IEnumerable<SpecificationProperty>, Error>)result).Value.Success.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="40-43"];
m36_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="SpecificationPropertyExtensions.cs", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="17-17"];
m37_52 [cluster="CommandLine.Core.Specification.GetSetName()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.GetSetName()", span="80-80"];
m37_0 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m37_1 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust());\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="20-29"];
m37_2 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="18-18"];
m37_19 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m37_59 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
m37_60 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="54-70"];
m37_61 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="52-52"];
m37_57 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m37_40 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m37_10 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m37_14 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m37_58 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m37_73 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m37_51 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m37_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m37_75 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="66-67"];
m37_4 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: var options = specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust())", span="22-22"];
m37_3 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="20-29"];
m37_5 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="23-23"];
m37_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="22-22"];
m37_7 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return options.Select(s => Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))));", span="26-26"];
m37_6 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="24-24"];
m37_20 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="23-23"];
m37_8 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return Enumerable.Empty<Nothing<Error>>();", span="28-28"];
m37_9 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="20-29"];
m37_23 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-26"];
m37_16 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption() && sp.Value.IsJust()", span="22-22"];
m37_17 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="22-22"];
m37_21 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)g.Specification).SetName", span="23-23"];
m37_22 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="23-23"];
m37_24 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: Maybe.Just<Error>(new MutuallyExclusiveSetError(NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)))", span="26-26"];
m37_25 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-26"];
m37_33 [cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs", label="0: List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList()", span="36-38"];
m37_34 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList()", span="40-43"];
m37_32 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="34-49"];
m37_41 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="37-37"];
m37_44 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="38-38"];
m37_49 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())", span="41-43"];
m37_35 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="requiredButEmpty.Any()", span="44-44"];
m37_48 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="41-43"];
m37_36 [cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs", label="0: return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="45-46"];
m37_37 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return Enumerable.Empty<Nothing<Error>>();", span="48-48"];
m37_38 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="34-49"];
m37_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="45-46"];
m37_42 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required", span="37-37"];
m37_43 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="37-37"];
m37_45 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: x.Specification.GetSetName()", span="38-38"];
m37_46 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="38-38"];
m37_50 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="41-43"];
m37_55 [cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs", label="0: Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="45-46"];
m37_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="45-46"];
m37_63 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: var options = specProps.Where(\r\n                        sp => sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )\r\n                    )", span="56-63"];
m37_62 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="54-70"];
m37_64 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="64-64"];
m37_68 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="57-62"];
m37_65 [cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs", label="0: return options.Select(s => Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))));", span="66-67"];
m37_66 [cluster="lambda expression", color=red, community=0, file="SpecificationPropertyRules.cs", label="0: return Enumerable.Empty<Nothing<Error>>();", span="69-69"];
m37_67 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="54-70"];
m37_69 [cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs", label="0: sp.Specification.ConversionType.ToDescriptorKind() == TypeDescriptorKind.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (!sp.Specification.IsMinNotSpecified() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min)\r\n                            || (!sp.Specification.IsMaxNotSpecified() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max)\r\n                        )", span="57-62"];
m37_70 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="57-62"];
m37_76 [cluster="lambda expression", color=red, community=1, file="SpecificationPropertyRules.cs", label="0: Maybe.Just<Error>(new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)))", span="66-67"];
m37_77 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="66-67"];
m37_72 [cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70"];
m37_29 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m37_30 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=red, community=0, file="SpecificationPropertyRules.cs", label="1: return specProps =>\r\n            {\r\n                List<string> setsWithTrue =\r\n                    specProps.Where(sp => sp.Specification.IsOption() && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(x => x.Specification.GetSetName()).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps.Where(sp => sp.Value.IsNothing() && \r\n                                          sp.Specification.Required &&\r\n                                          !setsWithTrue.Contains(sp.Specification.GetSetName())).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s => Maybe.Just<Error>(new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))));\r\n                    }\r\n                    return Enumerable.Empty<Nothing<Error>>();\r\n                };", span="34-49"];
m37_31 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="32-32"];
m37_28 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m37_13 [cluster="Unk.Select", file="SpecificationPropertyRules.cs", label="Entry Unk.Select", span=""];
m37_71 [cluster="System.Type.ToDescriptorKind()", file="SpecificationPropertyRules.cs", label="Entry System.Type.ToDescriptorKind()", span="22-22"];
m37_39 [cluster="Unk.ToList", file="SpecificationPropertyRules.cs", label="Entry Unk.ToList", span=""];
m37_26 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m37_18 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="11-11"];
m37_27 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m37_47 [cluster="Unk.GetSetName", file="SpecificationPropertyRules.cs", label="Entry Unk.GetSetName", span=""];
m37_11 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m37_12 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m37_53 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m37_74 [cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75"];
m37_79 [file="SpecificationPropertyRules.cs", label=setsWithTrue, span=""];
m38_5 [cluster="lambda expression", file="Switch.cs", label="Entry lambda expression", span="16-16"];
m38_6 [cluster="lambda expression", color=green, community=0, file="Switch.cs", label="0: t.IsName() && info.Tag == TypeDescriptorKind.Boolean", span="16-16"];
m38_7 [cluster="lambda expression", file="Switch.cs", label="Exit lambda expression", span="16-16"];
m38_0 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Switch.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m38_1 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Switch.cs", label="0: return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.Tag == TypeDescriptorKind.Boolean, false)\r\n                   select t;", span="15-17"];
m38_2 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Switch.cs", label="Exit CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m38_4 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="Switch.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m38_8 [cluster="CommandLine.Core.Token.IsName()", file="Switch.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m38_9 [file="Switch.cs", label=t, span=""];
m39_11 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="SwitchTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m39_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="SwitchTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m39_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="SwitchTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m39_14 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs", label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28"];
m39_15 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs", label="var expected = new [] { Token.Name(''x'') }", span="30-30"];
m39_16 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", color=green, community=0, file="SwitchTests.cs", label="0: var result = Switch.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41"];
m39_17 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="43-43"];
m39_18 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="SwitchTests.cs", label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28"];
m39_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="SwitchTests.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m39_21 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="38-41"];
m39_7 [cluster="lambda expression", file="SwitchTests.cs", label="Entry lambda expression", span="19-22"];
m39_8 [cluster="lambda expression", color=green, community=0, file="SwitchTests.cs", label="0: new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22"];
m39_9 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="19-22"];
m39_22 [cluster="lambda expression", color=green, community=0, file="SwitchTests.cs", label="0: new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41"];
m39_23 [cluster="lambda expression", file="SwitchTests.cs", label="Exit lambda expression", span="38-41"];
m39_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="SwitchTests.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
m39_19 [cluster="CommandLine.Core.Token.Name(string)", file="SwitchTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m39_5 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="SwitchTests.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m39_20 [cluster="CommandLine.Core.Token.Value(string)", file="SwitchTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m39_0 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs", label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13"];
m39_1 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs", label="var expected = new Token[] { }", span="15-15"];
m39_2 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", color=green, community=0, file="SwitchTests.cs", label="0: var result = Switch.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22"];
m39_3 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
m39_4 [cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="SwitchTests.cs", label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13"];
m40_10 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m40_12 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="58-58"];
m40_20 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="37-37"];
m40_21 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="40-41"];
m40_22 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=red, community=0, file="TokenizerTests.cs", label="0: var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, ',', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="42-43"];
m40_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="55-55"];
m40_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=red, community=0, file="TokenizerTests.cs", label="0: var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="46-52"];
m40_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="37-37"];
m40_19 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m40_15 [cluster="Unk.True", file="TokenizerTests.cs", label="Entry Unk.True", span=""];
m40_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="13-13"];
m40_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="16-17"];
m40_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=red, community=0, file="TokenizerTests.cs", label="0: var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, ',', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="18-19"];
m40_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="31-31"];
m40_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=red, community=0, file="TokenizerTests.cs", label="0: var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", span="22-28"];
m40_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="13-13"];
m40_26 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="52-52"];
m40_17 [cluster="lambda expression", color=red, community=0, file="TokenizerTests.cs", label="0: NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="28-28"];
m40_16 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="28-28"];
m40_18 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="28-28"];
m40_27 [cluster="lambda expression", color=red, community=0, file="TokenizerTests.cs", label="0: NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", span="52-52"];
m40_28 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="52-52"];
m40_6 [cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m40_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m40_13 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m40_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m40_7 [cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m40_14 [cluster="Unk.SequenceEqual", file="TokenizerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m40_9 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m40_29 [file="TokenizerTests.cs", label=specs, span=""];
m40_30 [file="TokenizerTests.cs", label=specs, span=""];
m41_14 [cluster="Unk.Where", file="TokenPartitioner.cs", label="Entry Unk.Where", span=""];
m41_22 [cluster="Unk.Create", file="TokenPartitioner.cs", label="Entry Unk.Create", span=""];
m41_21 [cluster="Unk.Select", file="TokenPartitioner.cs", label="Entry Unk.Select", span=""];
m41_18 [cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16"];
m41_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m41_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var tokenList = tokens.ToList()", span="16-16"];
m41_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="var switches = Switch.Partition(tokenList, typeLookup).ToList()", span="17-17"];
m41_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var scalars = Scalar.Partition(tokensExceptSwitches, typeLookup).ToList()", span="19-19"];
m41_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var sequences = Sequence.Partition(tokensExceptSwitchesAndScalars, typeLookup).ToList()", span="21-21"];
m41_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var tokensExceptSwitches = tokenList.Where(x => !switches.Contains(x)).ToList()", span="18-18"];
m41_10 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="26-31"];
m41_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var tokensExceptSwitchesAndScalars = (tokensExceptSwitches.Where(x => !scalars.Contains(x))).ToList()", span="20-20"];
m41_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var tokensExceptSwitchesAndScalarsAndSeq = tokensExceptSwitchesAndScalars.Where(x => !sequences.Contains(x)).ToList()", span="22-22"];
m41_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var values = tokensExceptSwitchesAndScalarsAndSeq.Where(v => v.IsValue()).ToList()", span="23-23"];
m41_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="TokenPartitioner.cs", label="0: var errors = tokensExceptSwitchesAndScalarsAndSeq.Where(x => !values.Contains(x))", span="24-24"];
m41_11 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m41_30 [cluster="Unk.Contains", file="TokenPartitioner.cs", label="Entry Unk.Contains", span=""];
m41_41 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="30-30"];
m41_24 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: !switches.Contains(x)", span="18-18"];
m41_23 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="18-18"];
m41_28 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: !scalars.Contains(x)", span="20-20"];
m41_27 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="20-20"];
m41_32 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: !sequences.Contains(x)", span="22-22"];
m41_31 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="22-22"];
m41_34 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="23-23"];
m41_39 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: !values.Contains(x)", span="24-24"];
m41_38 [cluster="lambda expression", file="TokenPartitioner.cs", label="Entry lambda expression", span="24-24"];
m41_25 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="18-18"];
m41_29 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="20-20"];
m41_33 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="22-22"];
m41_35 [cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs", label="0: v.IsValue()", span="23-23"];
m41_36 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="23-23"];
m41_40 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="24-24"];
m41_42 [cluster="lambda expression", file="TokenPartitioner.cs", label="t.Text", span="30-30"];
m41_43 [cluster="lambda expression", file="TokenPartitioner.cs", label="Exit lambda expression", span="30-30"];
m41_15 [cluster="Unk.ToList", file="TokenPartitioner.cs", label="Entry Unk.ToList", span=""];
m41_16 [cluster="Unk.Partition", file="TokenPartitioner.cs", label="Entry Unk.Partition", span=""];
m41_17 [cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10"];
m41_13 [cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m41_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m41_37 [cluster="Unk.IsValue", file="TokenPartitioner.cs", label="Entry Unk.IsValue", span=""];
m41_19 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m41_20 [cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TokenPartitioner.cs", label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22"];
m41_26 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="TokenPartitioner.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m41_44 [file="TokenPartitioner.cs", label=switches, span=""];
m41_45 [file="TokenPartitioner.cs", label=scalars, span=""];
m41_46 [file="TokenPartitioner.cs", label=sequences, span=""];
m41_47 [file="TokenPartitioner.cs", label=values, span=""];
m42_0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13"];
m42_1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="16-19"];
m42_2 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=green, community=0, file="TokenPartitionerTests.cs", label="0: var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="20-24"];
m42_4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="33-33"];
m42_3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="27-30"];
m42_5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="13-13"];
m42_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m42_11 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m42_13 [cluster="Unk.True", file="TokenPartitionerTests.cs", label="Entry Unk.True", span=""];
m42_12 [cluster="Unk.All", file="TokenPartitionerTests.cs", label="Entry Unk.All", span=""];
m42_39 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="59-59"];
m42_15 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="29-29"];
m42_14 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="29-29"];
m42_19 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="33-33"];
m42_18 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="33-33"];
m42_16 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="29-29"];
m42_20 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="33-33"];
m42_22 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="33-33"];
m42_23 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="33-33"];
m42_24 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="33-33"];
m42_34 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="55-55"];
m42_33 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="55-55"];
m42_37 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="59-59"];
m42_36 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="59-59"];
m42_35 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="55-55"];
m42_38 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="59-59"];
m42_40 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="59-59"];
m42_41 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="59-59"];
m42_17 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m42_25 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m42_9 [cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m42_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m42_21 [cluster="Unk.Any", file="TokenPartitionerTests.cs", label="Entry Unk.Any", span=""];
m42_10 [cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m42_26 [cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m42_27 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39"];
m42_28 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="42-45"];
m42_29 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=green, community=0, file="TokenPartitionerTests.cs", label="0: var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, -1, -1, '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, 3, 4, '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="46-50"];
m42_31 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="59-59"];
m42_30 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="53-56"];
m42_32 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="39-39"];
m42_8 [cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m42_42 [file="TokenPartitionerTests.cs", label=specs, span=""];
m42_43 [file="TokenPartitionerTests.cs", label=result, span=""];
m42_44 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m42_45 [file="TokenPartitionerTests.cs", label=specs, span=""];
m42_46 [file="TokenPartitionerTests.cs", label=result, span=""];
m42_47 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m43_5 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19"];
m43_6 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="21-26"];
m43_7 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var converted = values.Select(value => ChangeType(value, type, conversionCulture))", span="28-28"];
m43_8 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToArray(type));", span="30-32"];
m43_9 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19"];
m43_19 [cluster="Unk.Just", file="TypeConverter.cs", label="Entry Unk.Just", span=""];
m43_0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m43_1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return scalar\r\n                ? ChangeType(values.Single(), conversionType, conversionCulture)\r\n                : ChangeType(values, conversionType, conversionCulture);", span="14-16"];
m43_2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m43_58 [cluster="System.Enum.IsDefined(System.Type, object)", file="TypeConverter.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m43_13 [cluster="System.ApplicationException.ApplicationException(string)", file="TypeConverter.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m43_16 [cluster="Unk.Any", file="TypeConverter.cs", label="Entry Unk.Any", span=""];
m43_14 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m43_56 [cluster="System.Enum.Parse(System.Type, string)", file="TypeConverter.cs", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
m43_39 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="66-66"];
m43_46 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", color=green, community=0, file="TypeConverter.cs", label="0: return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="68-68"];
m43_47 [cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="66-66"];
m43_40 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="71-71"];
m43_48 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="object parsedValue", span="73-73"];
m43_49 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="parsedValue = Enum.Parse(conversionType, value)", span="76-76"];
m43_52 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="Enum.IsDefined(conversionType, parsedValue)", span="82-82"];
m43_53 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="return parsedValue;", span="84-84"];
m43_51 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="throw new FormatException();", span="80-80"];
m43_54 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="throw new FormatException();", span="86-86"];
m43_50 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label=ArgumentException, span="78-78"];
m43_55 [cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="71-71"];
m43_12 [cluster="T.ToMaybe<T>()", file="TypeConverter.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m43_27 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="32-32"];
m43_21 [cluster="lambda expression", file="TypeConverter.cs", label="ChangeType(value, type, conversionCulture)", span="28-28"];
m43_20 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="28-28"];
m43_22 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="28-28"];
m43_23 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="30-30"];
m43_25 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="30-30"];
m43_24 [cluster="lambda expression", file="TypeConverter.cs", label="a.MatchNothing()", span="30-30"];
m43_28 [cluster="lambda expression", file="TypeConverter.cs", label="((Just<object>)c).Value", span="32-32"];
m43_29 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="32-32"];
m43_45 [cluster="string.Equals(string, System.StringComparison)", file="TypeConverter.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m43_41 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="TypeConverter.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m43_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m43_4 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35"];
m43_30 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="0: return Maybe.Just(\r\n                    MatchBoolString(value)\r\n                        ? ConvertBoolString(value)\r\n                        : conversionType.IsEnum\r\n                            ? ConvertEnumString(value, conversionType)\r\n                            : Convert.ChangeType(value, conversionType, conversionCulture));", span="39-44"];
m43_31 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="1: InvalidCastException", span="46-46"];
m43_32 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="0: return Maybe.Nothing<object>();", span="48-48"];
m43_33 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="1: FormatException", span="50-50"];
m43_34 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="0: return Maybe.Nothing<object>();", span="52-52"];
m43_35 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="1: OverflowException", span="54-54"];
m43_36 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="0: return Maybe.Nothing<object>();", span="56-56"];
m43_37 [cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35"];
m43_42 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m43_15 [cluster="Unk.Select", file="TypeConverter.cs", label="Entry Unk.Select", span=""];
m43_10 [cluster="System.Type.GetGenericArguments()", file="TypeConverter.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m43_17 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m43_26 [cluster="Unk.MatchNothing", file="TypeConverter.cs", label="Entry Unk.MatchNothing", span=""];
m43_38 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.MatchBoolString(string)", span="60-60"];
m43_43 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", color=green, community=0, file="TypeConverter.cs", label="0: return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                   || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="62-63"];
m43_44 [cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.MatchBoolString(string)", span="60-60"];
m43_18 [cluster="Unk.ToArray", file="TypeConverter.cs", label="Entry Unk.ToArray", span=""];
m43_57 [cluster="System.FormatException.FormatException()", file="TypeConverter.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m43_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m43_59 [file="TypeConverter.cs", label="System.Globalization.CultureInfo", span=""];
m43_60 [file="TypeConverter.cs", label=type, span=""];
m44_0 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="20-20"];
m44_1 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", color=green, community=0, file="TypeDescriptor.cs", label="1: this.tag = tag", span="22-22"];
m44_2 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", color=red, community=0, file="TypeDescriptor.cs", label="0: this.maximumItems = maximumItems", span="23-23"];
m44_3 [cluster="CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.TypeDescriptor(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="20-20"];
m44_4 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
m44_5 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="maximumItems == null", span="38-38"];
m44_7 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", color=green, community=0, file="TypeDescriptor.cs", label="0: return new TypeDescriptor(tag, maximumItems);", span="40-40"];
m44_6 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="throw new ArgumentNullException(''maximumItems'');", span="38-38"];
m44_8 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
m44_10 [file="TypeDescriptor.cs", label="CommandLine.Core.TypeDescriptor", span=""];
m45_15 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TypeLookup.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m45_17 [cluster="Unk.Create", file="TypeLookup.cs", label="Entry Unk.Create", span=""];
m45_4 [cluster="Unk.SingleOrDefault", file="TypeLookup.cs", label="Entry Unk.SingleOrDefault", span=""];
m45_10 [cluster="string.MatchName(string, string, System.StringComparer)", file="TypeLookup.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m45_6 [cluster="Unk.Map", file="TypeLookup.cs", label="Entry Unk.Map", span=""];
m45_5 [cluster="Unk.ToMaybe", file="TypeLookup.cs", label="Entry Unk.ToMaybe", span=""];
m45_16 [cluster="Unk.Just", file="TypeLookup.cs", label="Entry Unk.Just", span=""];
m45_0 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m45_1 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", color=red, community=0, file="TypeLookup.cs", label="0: var info = specifications.SingleOrDefault(a => name.MatchName(a.ShortName, a.LongName, comparer))\r\n                .ToMaybe()\r\n                    .Map(\r\n                        s => TypeDescriptor.Create(\r\n                            s.ConversionType.ToDescriptorKind(), (s.Min < 0 && s.Max < 0) ? Maybe.Nothing<int>() : Maybe.Just(s.Max)))", span="16-20"];
m45_2 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="return info;", span="21-21"];
m45_3 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeLookup.cs", label="Exit CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m45_11 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="19-20"];
m45_8 [cluster="lambda expression", file="TypeLookup.cs", label="name.MatchName(a.ShortName, a.LongName, comparer)", span="16-16"];
m45_7 [cluster="lambda expression", file="TypeLookup.cs", label="Entry lambda expression", span="16-16"];
m45_9 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="16-16"];
m45_12 [cluster="lambda expression", color=red, community=1, file="TypeLookup.cs", label="0: TypeDescriptor.Create(\r\n                            s.ConversionType.ToDescriptorKind(), (s.Min < 0 && s.Max < 0) ? Maybe.Nothing<int>() : Maybe.Just(s.Max))", span="19-20"];
m45_13 [cluster="lambda expression", file="TypeLookup.cs", label="Exit lambda expression", span="19-20"];
m45_14 [cluster="Unk.ToDescriptorKind", file="TypeLookup.cs", label="Entry Unk.ToDescriptorKind", span=""];
m45_18 [file="TypeLookup.cs", label=string, span=""];
m45_19 [file="TypeLookup.cs", label="System.StringComparer", span=""];
m46_0 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="21-21"];
m46_1 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="this.index = index", span="23-23"];
m46_2 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="min = -1", span="24-24"];
m46_3 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="max = -1", span="25-25"];
m46_4 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="ValueAttribute.cs", label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="21-21"];
m46_5 [file="ValueAttribute.cs", label="CommandLine.ValueAttribute", span=""];
m47_61 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", file="ValueMapper.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18"];
m47_48 [cluster="System.Type.IsScalar()", file="ValueMapper.cs", label="Entry System.Type.IsScalar()", span="33-33"];
m47_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="81-81"];
m47_6 [cluster="Unk.>", file="ValueMapper.cs", label="Entry Unk.>", span=""];
m47_57 [cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="16-16"];
m47_7 [cluster="Unk.Create", file="ValueMapper.cs", label="Entry Unk.Create", span=""];
m47_44 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m47_42 [cluster="Unk.ToMaybe", file="ValueMapper.cs", label="Entry Unk.ToMaybe", span=""];
m47_46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m47_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="11-11"];
m47_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="16-16"];
m47_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="return StatePair.Create(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="18-22"];
m47_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="11-11"];
m47_39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m47_58 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="57-57"];
m47_8 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="19-19"];
m47_11 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="20-20"];
m47_14 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="21-21"];
m47_9 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item1", span="19-19"];
m47_10 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="19-19"];
m47_12 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item2", span="20-20"];
m47_13 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="20-20"];
m47_15 [cluster="lambda expression", file="ValueMapper.cs", label="e.Value", span="21-21"];
m47_16 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="21-21"];
m47_59 [cluster="lambda expression", file="ValueMapper.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="57-57"];
m47_51 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="35-35"];
m47_54 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="43-43"];
m47_52 [cluster="lambda expression", color=red, community=0, file="ValueMapper.cs", label="0: n", span="35-35"];
m47_53 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="35-35"];
m47_55 [cluster="lambda expression", file="ValueMapper.cs", label="s.Specification.IsValue()", span="43-43"];
m47_56 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="43-43"];
m47_60 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="57-57"];
m47_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m47_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m47_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m47_49 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="ValueMapper.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m47_65 [cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70"];
m47_38 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="67-67"];
m47_63 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", color=red, community=1, file="ValueMapper.cs", label="0: return !specification.IsMinNotSpecified()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="69-71"];
m47_64 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="67-67"];
m47_47 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m47_5 [cluster="Unk.Select", file="ValueMapper.cs", label="Entry Unk.Select", span=""];
m47_50 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m47_62 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m47_34 [cluster="CommandLine.Core.Specification.GetMaxValueCount()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.GetMaxValueCount()", span="51-51"];
m47_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m47_41 [cluster="Unk.FirstOrDefault", file="ValueMapper.cs", label="Entry Unk.FirstOrDefault", span=""];
m47_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25"];
m47_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", color=red, community=0, file="ValueMapper.cs", label="0: specProps.Empty()", span="30-30"];
m47_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="32-32"];
m47_22 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create(pt, MakeErrorInCaseOfMinConstraint(pt.Specification));", span="38-39"];
m47_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="40-40"];
m47_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="48-50"];
m47_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="51-51"];
m47_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", color=red, community=0, file="ValueMapper.cs", label="0: yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="54-59"];
m47_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield return value;", span="63-63"];
m47_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var pt = specProps.First()", span="34-34"];
m47_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", color=red, community=0, file="ValueMapper.cs", label="0: var taken = values.Take(pt.Specification.GetMaxValueCount().Return(n => n, values.Count()))", span="35-35"];
m47_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="43-43"];
m47_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", color=red, community=1, file="ValueMapper.cs", label="0: !pt.Specification.IsMaxNotSpecified()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="44-46"];
m47_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="61-61"];
m47_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="taken.Empty()", span="36-36"];
m47_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25"];
m47_36 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m47_43 [cluster="CommandLine.Core.Specification.IsMaxNotSpecified()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.IsMaxNotSpecified()", span="75-75"];
m47_66 [file="ValueMapper.cs", label=pt, span=""];
m48_0 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="10-10"];
m48_1 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", color=green, community=0, file="ValueSpecification.cs", label="0: this.index = index", span="13-13"];
m48_2 [cluster="CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ValueSpecification.ValueSpecification(int, bool, int, int, CommandLine.Infrastructure.Maybe<object>, System.Type)", span="10-10"];
m48_3 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="16-16"];
m48_4 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", color=green, community=0, file="ValueSpecification.cs", label="0: return new ValueSpecification(\r\n                attribute.Index,\r\n                attribute.Required,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType);", span="18-24"];
m48_5 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="16-16"];
m48_6 [cluster="T.ToMaybe<T>()", file="ValueSpecification.cs", label="Entry T.ToMaybe<T>()", span="79-79"];
m48_7 [file="ValueSpecification.cs", label="CommandLine.Core.ValueSpecification", span=""];
n0 -> n1  [key=0, style=solid];
n0 -> n3  [color=darkseagreen4, key=1, label="System.Func<TSource, TSource, TResult>", style=dashed];
n0 -> n5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n0 -> n8  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<TResult> Pairwise", style=bold];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n8  [key=2, style=dotted];
n2 -> n6  [key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n4 -> n6  [key=0, style=solid];
n4 -> n7  [key=2, style=dotted];
n6 -> n0  [color=blue, key=0, style=bold];
n8 -> n0  [color=darkorchid, key=3, label="Parameter variable System.Func<TSource, TSource, TResult> selector", style=bold];
n9 -> n10  [key=0, style=solid];
n9 -> n15  [color=crimson, key=0, style=bold];
n10 -> n11  [key=0, style=solid];
n10 -> n18  [key=2, style=dotted];
n10 -> n12  [color=darkseagreen4, key=1, label=enumerator, style=dashed];
n10 -> n13  [color=darkseagreen4, key=1, label=enumerator, style=dashed];
n10 -> n14  [color=darkseagreen4, key=1, label=enumerator, style=dashed];
n15 -> n16  [key=0, style=solid];
n15 -> n20  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n11 -> n17  [key=0, style=solid];
n11 -> n19  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n12 -> n15  [color=darkseagreen4, key=1, label=left, style=dashed];
n12 -> n14  [color=darkorchid, key=3, label="Local variable TSource left", style=bold];
n13 -> n14  [key=0, style=solid];
n13 -> n17  [key=0, style=solid];
n13 -> n19  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [color=darkseagreen4, key=1, label=right, style=dashed];
n17 -> n9  [color=blue, key=0, style=bold];
n16 -> n13  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
n21 -> n25  [color=darkseagreen4, key=1, label="System.Func<TSource, bool>", style=dashed];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [color=darkseagreen4, key=1, label=index, style=dashed];
n22 -> n26  [color=darkseagreen4, key=1, label=index, style=dashed];
n22 -> n22  [color=darkorchid, key=3, label="Local variable int index", style=bold];
n23 -> n24  [key=0, style=solid];
n23 -> n26  [key=0, style=solid];
n23 -> n25  [color=darkseagreen4, key=1, label=item, style=dashed];
n25 -> n23  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n28  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n24  [color=darkseagreen4, key=1, label=index, style=dashed];
n24 -> n26  [color=darkseagreen4, key=1, label=index, style=dashed];
n26 -> n27  [key=0, style=solid];
n27 -> n21  [color=blue, key=0, style=bold];
n29 -> n30  [key=0, style=solid];
n29 -> n29  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<T> ToEnumerable", style=bold];
n30 -> n31  [key=0, style=solid];
n31 -> n29  [color=blue, key=0, style=bold];
n32 -> n33  [key=0, style=solid];
n32 -> n34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
n33 -> n34  [key=0, style=solid];
n33 -> n37  [key=2, style=dotted];
n33 -> n38  [key=2, style=dotted];
n33 -> n35  [color=darkseagreen4, key=1, label=array, style=dashed];
n34 -> n35  [key=0, style=solid];
n34 -> n39  [key=2, style=dotted];
n34 -> n40  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n36 -> n32  [color=blue, key=0, style=bold];
n41 -> n42  [key=0, style=solid];
n42 -> n43  [key=0, style=solid];
n42 -> n44  [key=2, style=dotted];
n43 -> n41  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [color=darkseagreen4, key=1, label=other, style=dashed];
m0_1 -> m0_7  [key=2, style=dotted];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_13  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_7  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_3 -> m0_26  [color=darkorchid, key=3, label="Parameter variable object obj", style=bold];
m0_3 -> m0_47  [color=darkorchid, key=3, label="Parameter variable object obj", style=bold];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_7  [key=0, style=solid];
m0_6 -> m0_0  [color=blue, key=0, style=bold];
m0_6 -> m0_8  [key=0, style=solid];
m0_6 -> m0_9  [key=2, style=dotted];
m0_8 -> m0_3  [color=blue, key=0, style=bold];
m0_9 -> m0_15  [key=0, style=solid];
m0_9 -> m0_17  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_9 -> m0_4  [color=darkorchid, key=3, label="Parameter variable CommandLine.Error other", style=bold];
m0_9 -> m0_16  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_8  [key=2, style=dotted];
m0_17 -> m0_26  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_16 -> m0_18  [key=0, style=solid];
m0_16 -> m0_19  [color=green, key=1, label=writer, style=dashed];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_7  [key=2, style=dotted];
m0_16 -> m0_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_18 -> m0_9  [color=blue, key=0, style=bold];
m0_18 -> m0_19  [color=green, key=0, style=solid];
m0_18 -> m0_22  [key=2, style=dotted];
m0_147 -> m0_148  [key=0, style=solid];
m0_151 -> m0_10  [key=2, style=dotted];
m0_151 -> m0_152  [key=0, style=solid];
m0_152 -> m0_23  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_154  [key=2, style=dotted];
m0_148 -> m0_7  [key=2, style=dotted];
m0_148 -> m0_151  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_156  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_149 -> m0_8  [key=2, style=dotted];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_156  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_9  [key=2, style=dotted];
m0_153 -> m0_147  [color=blue, key=0, style=bold];
m0_60 -> m0_53  [color=blue, key=0, style=bold];
m0_108 -> m0_109  [key=0, style=solid];
m0_110 -> m0_22  [key=2, style=dotted];
m0_110 -> m0_111  [key=0, style=solid];
m0_109 -> m0_110  [key=0, style=solid];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_60  [key=2, style=dotted];
m0_112 -> m0_108  [color=blue, key=0, style=bold];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_70  [color=blue, key=0, style=bold];
m0_73 -> m0_8  [key=2, style=dotted];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_80  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_73 -> m0_72  [color=blue, key=0, style=bold];
m0_74 -> m0_22  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_76  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_78  [key=2, style=dotted];
m0_72 -> m0_76  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_60  [key=2, style=dotted];
m0_75 -> m0_74  [color=blue, key=0, style=bold];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_47  [key=2, style=dotted];
m0_76 -> m0_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_77 -> m0_71  [color=blue, key=0, style=bold];
m0_77 -> m0_76  [color=blue, key=0, style=bold];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_10  [key=2, style=dotted];
m0_32 -> m0_37  [key=0, style=solid];
m0_32 -> m0_39  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_32 -> m0_27  [color=darkorchid, key=3, label="Parameter variable CommandLine.TokenError other", style=bold];
m0_32 -> m0_16  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m0_32 -> m0_10  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_19  [key=2, style=dotted];
m0_39 -> m0_41  [key=2, style=dotted];
m0_38 -> m0_40  [key=0, style=solid];
m0_38 -> m0_36  [color=blue, key=0, style=bold];
m0_40 -> m0_32  [color=blue, key=0, style=bold];
m0_40 -> m0_43  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_45  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_36  [key=2, style=dotted];
m0_55 -> m0_87  [color=darkorchid, key=3, label="method methodReturn int GetHashCode", style=bold];
m0_55 -> m0_114  [color=darkorchid, key=3, label="method methodReturn int GetHashCode", style=bold];
m0_56 -> m0_54  [color=blue, key=0, style=bold];
m0_56 -> m0_57  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_9  [key=2, style=dotted];
m0_65 -> m0_64  [color=blue, key=0, style=bold];
m0_65 -> m0_47  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_80  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_78 -> m0_81  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_45 -> m0_46  [key=0, style=solid];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_231  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_232 -> m0_10  [key=2, style=dotted];
m0_232 -> m0_233  [key=0, style=solid];
m0_232 -> m0_234  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_233 -> m0_23  [key=2, style=dotted];
m0_233 -> m0_234  [key=0, style=solid];
m0_233 -> m0_154  [key=2, style=dotted];
m0_235 -> m0_23  [key=2, style=dotted];
m0_235 -> m0_138  [key=2, style=dotted];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_236 -> m0_23  [key=2, style=dotted];
m0_236 -> m0_184  [key=2, style=dotted];
m0_236 -> m0_237  [key=0, style=solid];
m0_229 -> m0_7  [key=2, style=dotted];
m0_229 -> m0_232  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_239  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_230 -> m0_8  [key=2, style=dotted];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_239  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_231 -> m0_232  [key=0, style=solid];
m0_231 -> m0_35  [key=2, style=dotted];
m0_234 -> m0_235  [key=0, style=solid];
m0_234 -> m0_236  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_234 -> m0_182  [key=2, style=dotted];
m0_234 -> m0_183  [key=2, style=dotted];
m0_237 -> m0_228  [color=blue, key=0, style=bold];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_51  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_47 -> m0_3  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m0_47 -> m0_53  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m0_97 -> m0_100  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_97 -> m0_98  [key=0, style=solid];
m0_100 -> m0_22  [key=2, style=dotted];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_102  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_46  [key=2, style=dotted];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_60  [key=2, style=dotted];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_47  [key=2, style=dotted];
m0_102 -> m0_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_102  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_98 -> m0_104  [key=2, style=dotted];
m0_103 -> m0_97  [color=blue, key=0, style=bold];
m0_35 -> m0_33  [color=blue, key=0, style=bold];
m0_57 -> m0_9  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_59  [key=0, style=solid];
m0_58 -> m0_60  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_59 -> m0_55  [color=blue, key=0, style=bold];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_19  [key=2, style=dotted];
m0_59 -> m0_61  [key=2, style=dotted];
m0_48 -> m0_51  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [color=darkseagreen4, key=1, label=other, style=dashed];
m0_51 -> m0_9  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_3  [key=2, style=dotted];
m0_52 -> m0_47  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_50 -> m0_46  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_52  [key=0, style=solid];
m0_50 -> m0_53  [key=2, style=dotted];
m0_49 -> m0_52  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_54  [key=2, style=dotted];
m0_49 -> m0_51  [key=0, style=solid];
m0_53 -> m0_48  [color=blue, key=0, style=bold];
m0_53 -> m0_57  [key=0, style=solid];
m0_53 -> m0_59  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_53 -> m0_16  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m0_211 -> m0_212  [key=0, style=solid];
m0_215 -> m0_10  [key=2, style=dotted];
m0_215 -> m0_216  [key=0, style=solid];
m0_217 -> m0_23  [key=2, style=dotted];
m0_217 -> m0_184  [key=2, style=dotted];
m0_217 -> m0_218  [key=0, style=solid];
m0_212 -> m0_7  [key=2, style=dotted];
m0_212 -> m0_215  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_226  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_213 -> m0_8  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_213 -> m0_226  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_214 -> m0_215  [key=0, style=solid];
m0_214 -> m0_35  [key=2, style=dotted];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_182  [key=2, style=dotted];
m0_216 -> m0_183  [key=2, style=dotted];
m0_216 -> m0_218  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_216 -> m0_219  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_216 -> m0_220  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_216 -> m0_221  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_216 -> m0_222  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_216 -> m0_223  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_47  [key=2, style=dotted];
m0_219 -> m0_203  [color=darkorchid, key=3, label="Property variable System.Type Type", style=bold];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_47  [key=2, style=dotted];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_47  [key=2, style=dotted];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_47  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_47  [key=2, style=dotted];
m0_223 -> m0_224  [key=0, style=solid];
m0_223 -> m0_47  [key=2, style=dotted];
m0_224 -> m0_211  [color=blue, key=0, style=bold];
m0_309 -> m0_310  [key=0, style=solid];
m0_188 -> m0_189  [color=green, key=0, style=solid];
m0_189 -> m0_190  [color=green, key=0, style=solid];
m0_190 -> m0_188  [color=blue, key=0, style=bold];
m0_209 -> m0_210  [color=green, key=0, style=solid];
m0_208 -> m0_209  [color=green, key=0, style=solid];
m0_210 -> m0_208  [color=blue, key=0, style=bold];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_30  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_26 -> m0_3  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m0_26 -> m0_32  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m0_25 -> m0_26  [key=0, style=solid];
m0_27 -> m0_25  [color=blue, key=0, style=bold];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [color=darkseagreen4, key=1, label=other, style=dashed];
m0_143 -> m0_144  [key=0, style=solid];
m0_140 -> m0_141  [key=0, style=solid];
m0_169 -> m0_170  [key=0, style=solid];
m0_166 -> m0_167  [key=0, style=solid];
m0_241 -> m0_242  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_11  [color=blue, key=0, style=bold];
m0_156 -> m0_157  [key=0, style=solid];
m0_186 -> m0_187  [key=0, style=solid];
m0_226 -> m0_227  [key=0, style=solid];
m0_239 -> m0_240  [key=0, style=solid];
m0_262 -> m0_263  [key=0, style=solid];
m0_272 -> m0_273  [key=0, style=solid];
m0_297 -> m0_298  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_68  [color=blue, key=0, style=bold];
m0_80 -> m0_81  [key=0, style=solid];
m0_307 -> m0_308  [key=0, style=solid];
m0_319 -> m0_320  [key=0, style=solid];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_146  [key=2, style=dotted];
m0_145 -> m0_143  [color=blue, key=0, style=bold];
m0_142 -> m0_140  [color=blue, key=0, style=bold];
m0_141 -> m0_142  [key=0, style=solid];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_146  [key=2, style=dotted];
m0_171 -> m0_169  [color=blue, key=0, style=bold];
m0_168 -> m0_166  [color=blue, key=0, style=bold];
m0_167 -> m0_168  [key=0, style=solid];
m0_243 -> m0_241  [color=blue, key=0, style=bold];
m0_242 -> m0_243  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_14 -> m0_12  [color=blue, key=0, style=bold];
m0_36 -> m0_37  [key=0, style=solid];
m0_155 -> m0_156  [key=0, style=solid];
m0_157 -> m0_155  [color=blue, key=0, style=bold];
m0_185 -> m0_186  [key=0, style=solid];
m0_187 -> m0_185  [color=blue, key=0, style=bold];
m0_225 -> m0_226  [key=0, style=solid];
m0_227 -> m0_225  [color=blue, key=0, style=bold];
m0_238 -> m0_239  [key=0, style=solid];
m0_240 -> m0_238  [color=blue, key=0, style=bold];
m0_261 -> m0_262  [key=0, style=solid];
m0_263 -> m0_261  [color=blue, key=0, style=bold];
m0_271 -> m0_272  [key=0, style=solid];
m0_273 -> m0_271  [color=blue, key=0, style=bold];
m0_296 -> m0_297  [key=0, style=solid];
m0_298 -> m0_296  [color=blue, key=0, style=bold];
m0_68 -> m0_69  [key=0, style=solid];
m0_70 -> m0_68  [color=blue, key=0, style=bold];
m0_70 -> m0_71  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_81 -> m0_79  [color=blue, key=0, style=bold];
m0_81 -> m0_82  [key=0, style=solid];
m0_310 -> m0_47  [key=2, style=dotted];
m0_310 -> m0_311  [key=0, style=solid];
m0_306 -> m0_307  [key=0, style=solid];
m0_308 -> m0_306  [color=blue, key=0, style=bold];
m0_322 -> m0_47  [key=2, style=dotted];
m0_322 -> m0_323  [key=0, style=solid];
m0_318 -> m0_319  [key=0, style=solid];
m0_320 -> m0_318  [color=blue, key=0, style=bold];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_78  [color=blue, key=0, style=bold];
m0_94 -> m0_95  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_120 -> m0_121  [key=0, style=solid];
m0_321 -> m0_322  [key=0, style=solid];
m0_311 -> m0_309  [color=blue, key=0, style=bold];
m0_323 -> m0_321  [color=blue, key=0, style=bold];
m0_84 -> m0_82  [color=blue, key=0, style=bold];
m0_84 -> m0_83  [color=blue, key=0, style=bold];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_85  [key=2, style=dotted];
m0_96 -> m0_94  [color=blue, key=0, style=bold];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_85  [key=2, style=dotted];
m0_107 -> m0_105  [color=blue, key=0, style=bold];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_85  [key=2, style=dotted];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_85  [key=2, style=dotted];
m0_122 -> m0_120  [color=blue, key=0, style=bold];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=0, style=solid];
m0_33 -> m0_23  [key=2, style=dotted];
m0_33 -> m0_24  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_29 -> m0_7  [key=2, style=dotted];
m0_29 -> m0_32  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_37  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_29 -> m0_31  [key=0, style=solid];
m0_30 -> m0_8  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_37  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_30 -> m0_3  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_35  [key=2, style=dotted];
m0_31 -> m0_26  [color=blue, key=0, style=bold];
m0_34 -> m0_28  [color=blue, key=0, style=bold];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_299 -> m0_300  [key=0, style=solid];
m0_299 -> m0_301  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_299 -> m0_303  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptions", style=dashed];
m0_299 -> m0_310  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptions", style=dashed];
m0_300 -> m0_8  [key=2, style=dotted];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_307  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_9  [key=2, style=dotted];
m0_301 -> m0_303  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_303 -> m0_304  [key=0, style=solid];
m0_303 -> m0_305  [key=2, style=dotted];
m0_303 -> m0_309  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_302 -> m0_47  [key=2, style=dotted];
m0_302 -> m0_303  [key=0, style=solid];
m0_304 -> m0_299  [color=blue, key=0, style=bold];
m0_42 -> m0_9  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_43 -> m0_47  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_42  [color=blue, key=0, style=bold];
m0_41 -> m0_46  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_44 -> m0_39  [color=blue, key=0, style=bold];
m0_44 -> m0_45  [key=0, style=solid];
m0_172 -> m0_173  [key=0, style=solid];
m0_179 -> m0_180  [color=green, key=0, style=solid];
m0_179 -> m0_23  [color=green, key=2, style=dotted];
m0_179 -> m0_138  [color=green, key=2, style=dotted];
m0_179 -> m0_188  [color=green, key=1, label="lambda expression", style=dashed];
m0_178 -> m0_179  [color=green, key=0, style=solid];
m0_178 -> m0_180  [color=green, key=1, label=lines, style=dashed];
m0_178 -> m0_182  [key=2, style=dotted];
m0_178 -> m0_183  [key=2, style=dotted];
m0_180 -> m0_181  [color=green, key=0, style=solid];
m0_180 -> m0_23  [color=green, key=2, style=dotted];
m0_180 -> m0_184  [color=green, key=2, style=dotted];
m0_176 -> m0_10  [key=2, style=dotted];
m0_176 -> m0_178  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_176 -> m0_177  [key=0, style=solid];
m0_177 -> m0_23  [key=2, style=dotted];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_154  [key=2, style=dotted];
m0_173 -> m0_7  [key=2, style=dotted];
m0_173 -> m0_176  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_173 -> m0_174  [key=0, style=solid];
m0_173 -> m0_186  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_174 -> m0_8  [key=2, style=dotted];
m0_174 -> m0_175  [key=0, style=solid];
m0_174 -> m0_186  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_175 -> m0_176  [key=0, style=solid];
m0_175 -> m0_9  [key=2, style=dotted];
m0_181 -> m0_172  [color=blue, key=0, style=bold];
m0_19 -> m0_20  [color=green, key=0, style=solid];
m0_19 -> m0_10  [color=green, key=2, style=dotted];
m0_20 -> m0_21  [color=green, key=0, style=solid];
m0_20 -> m0_23  [color=green, key=2, style=dotted];
m0_20 -> m0_24  [color=green, key=2, style=dotted];
m0_21 -> m0_15  [color=blue, key=0, style=bold];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=0, style=solid];
m0_46 -> m0_44  [color=blue, key=0, style=bold];
m0_67 -> m0_66  [color=blue, key=0, style=bold];
m0_312 -> m0_313  [key=0, style=solid];
m0_312 -> m0_314  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_312 -> m0_316  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.CommitOptions", style=dashed];
m0_312 -> m0_322  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.CommitOptions", style=dashed];
m0_313 -> m0_8  [key=2, style=dotted];
m0_313 -> m0_314  [key=0, style=solid];
m0_313 -> m0_319  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_314 -> m0_35  [key=2, style=dotted];
m0_314 -> m0_315  [key=0, style=solid];
m0_314 -> m0_316  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_315 -> m0_47  [key=2, style=dotted];
m0_315 -> m0_316  [key=0, style=solid];
m0_316 -> m0_317  [key=0, style=solid];
m0_316 -> m0_305  [key=2, style=dotted];
m0_316 -> m0_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_317 -> m0_312  [color=blue, key=0, style=bold];
m0_23 -> m0_24  [key=0, style=solid];
m0_22 -> m0_24  [key=0, style=solid];
m0_22 -> n7  [key=2, style=dotted];
m0_24 -> m0_20  [color=blue, key=0, style=bold];
m0_130 -> m0_131  [key=0, style=solid];
m0_135 -> m0_23  [key=2, style=dotted];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_139  [key=2, style=dotted];
m0_135 -> m0_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_134 -> m0_23  [key=2, style=dotted];
m0_134 -> m0_138  [key=2, style=dotted];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_131 -> m0_135  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_137  [key=2, style=dotted];
m0_131 -> m0_144  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_133 -> m0_135  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_9  [key=2, style=dotted];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_46  [key=2, style=dotted];
m0_136 -> m0_130  [color=blue, key=0, style=bold];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_33  [color=darkorchid, key=3, label="method methodReturn int GetHashCode", style=bold];
m0_11 -> m0_54  [color=darkorchid, key=3, label="method methodReturn int GetHashCode", style=bold];
m0_63 -> m0_8  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_69  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_63 -> m0_62  [color=blue, key=0, style=bold];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_67  [key=2, style=dotted];
m0_62 -> m0_65  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_66 -> m0_61  [color=blue, key=0, style=bold];
m0_66 -> m0_67  [key=0, style=solid];
m0_113 -> m0_114  [key=0, style=solid];
m0_116 -> m0_35  [key=2, style=dotted];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_118  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_46  [key=2, style=dotted];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_60  [key=2, style=dotted];
m0_118 -> m0_61  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m0_118 -> m0_47  [key=2, style=dotted];
m0_118 -> m0_119  [key=0, style=solid];
m0_118 -> m0_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_118  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_114 -> m0_93  [key=2, style=dotted];
m0_119 -> m0_113  [color=blue, key=0, style=bold];
m0_85 -> m0_1  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_85 -> m0_6  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_85 -> m0_7  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_85 -> m0_12  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_85 -> m0_17  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m0_158 -> m0_159  [key=0, style=solid];
m0_163 -> m0_23  [key=2, style=dotted];
m0_163 -> m0_164  [key=0, style=solid];
m0_163 -> m0_139  [key=2, style=dotted];
m0_163 -> m0_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_162 -> m0_23  [key=2, style=dotted];
m0_162 -> m0_138  [key=2, style=dotted];
m0_162 -> m0_163  [key=0, style=solid];
m0_162 -> m0_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_159 -> m0_163  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_165  [key=2, style=dotted];
m0_159 -> m0_170  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_161 -> m0_163  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_9  [key=2, style=dotted];
m0_160 -> m0_161  [key=0, style=solid];
m0_160 -> m0_46  [key=2, style=dotted];
m0_164 -> m0_158  [color=blue, key=0, style=bold];
m0_244 -> m0_245  [key=0, style=solid];
m0_248 -> m0_10  [key=2, style=dotted];
m0_248 -> m0_249  [key=0, style=solid];
m0_250 -> m0_23  [key=2, style=dotted];
m0_250 -> m0_184  [key=2, style=dotted];
m0_250 -> m0_251  [key=0, style=solid];
m0_245 -> m0_7  [key=2, style=dotted];
m0_245 -> m0_248  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_262  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_246 -> m0_8  [key=2, style=dotted];
m0_246 -> m0_247  [key=0, style=solid];
m0_246 -> m0_262  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_247 -> m0_248  [key=0, style=solid];
m0_247 -> m0_9  [key=2, style=dotted];
m0_249 -> m0_250  [key=0, style=solid];
m0_249 -> m0_182  [key=2, style=dotted];
m0_249 -> m0_183  [key=2, style=dotted];
m0_249 -> m0_251  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_249 -> m0_252  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_249 -> m0_253  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_249 -> m0_254  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_249 -> m0_255  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_249 -> m0_256  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_249 -> m0_257  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_249 -> m0_258  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_249 -> m0_259  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_47  [key=2, style=dotted];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_47  [key=2, style=dotted];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_47  [key=2, style=dotted];
m0_254 -> m0_255  [key=0, style=solid];
m0_254 -> m0_47  [key=2, style=dotted];
m0_255 -> m0_256  [key=0, style=solid];
m0_255 -> m0_47  [key=2, style=dotted];
m0_256 -> m0_257  [key=0, style=solid];
m0_256 -> m0_47  [key=2, style=dotted];
m0_257 -> m0_258  [key=0, style=solid];
m0_257 -> m0_47  [key=2, style=dotted];
m0_258 -> m0_259  [key=0, style=solid];
m0_258 -> m0_47  [key=2, style=dotted];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_47  [key=2, style=dotted];
m0_260 -> m0_244  [color=blue, key=0, style=bold];
m0_191 -> m0_192  [color=green, key=0, style=solid];
m0_192 -> m0_193  [color=green, key=0, style=solid];
m0_192 -> m0_7  [color=green, key=2, style=dotted];
m0_192 -> m0_209  [color=green, key=1, label=help, style=dashed];
m0_192 -> m0_195  [color=green, key=1, label=help, style=dashed];
m0_193 -> m0_194  [color=green, key=0, style=solid];
m0_193 -> m0_8  [color=green, key=2, style=dotted];
m0_193 -> m0_209  [color=green, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_195 -> m0_10  [key=2, style=dotted];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_197  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_194 -> m0_195  [key=0, style=solid];
m0_194 -> m0_35  [key=2, style=dotted];
m0_196 -> m0_23  [key=2, style=dotted];
m0_196 -> m0_197  [key=0, style=solid];
m0_196 -> m0_154  [key=2, style=dotted];
m0_198 -> m0_23  [key=2, style=dotted];
m0_198 -> m0_184  [key=2, style=dotted];
m0_198 -> m0_199  [key=0, style=solid];
m0_197 -> m0_198  [key=0, style=solid];
m0_197 -> m0_182  [key=2, style=dotted];
m0_197 -> m0_183  [key=2, style=dotted];
m0_197 -> m0_199  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_197 -> m0_200  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_197 -> m0_201  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_197 -> m0_202  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_197 -> m0_203  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_197 -> m0_204  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_197 -> m0_205  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_197 -> m0_206  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_47  [key=2, style=dotted];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_47  [key=2, style=dotted];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_47  [key=2, style=dotted];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_47  [key=2, style=dotted];
m0_202 -> m0_206  [color=darkorchid, key=3, label="Field variable string verb", style=bold];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_47  [key=2, style=dotted];
m0_203 -> m0_206  [color=darkorchid, key=3, label="Field variable System.Type type", style=bold];
m0_203 -> m0_204  [key=0, style=solid];
m0_203 -> m0_47  [key=2, style=dotted];
m0_204 -> m0_206  [color=darkorchid, key=3, label="Field variable bool matched", style=bold];
m0_204 -> m0_205  [key=0, style=solid];
m0_204 -> m0_47  [key=2, style=dotted];
m0_205 -> m0_206  [key=0, style=solid];
m0_205 -> m0_47  [key=2, style=dotted];
m0_207 -> m0_191  [color=blue, key=0, style=bold];
m0_274 -> m0_275  [key=0, style=solid];
m0_278 -> m0_10  [key=2, style=dotted];
m0_278 -> m0_279  [key=0, style=solid];
m0_280 -> m0_23  [key=2, style=dotted];
m0_280 -> m0_184  [key=2, style=dotted];
m0_280 -> m0_281  [key=0, style=solid];
m0_275 -> m0_7  [key=2, style=dotted];
m0_275 -> m0_278  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_275 -> m0_276  [key=0, style=solid];
m0_275 -> m0_297  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_276 -> m0_8  [key=2, style=dotted];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_297  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_35  [key=2, style=dotted];
m0_279 -> m0_280  [key=0, style=solid];
m0_279 -> m0_182  [key=2, style=dotted];
m0_279 -> m0_183  [key=2, style=dotted];
m0_279 -> m0_281  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_282  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_283  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_284  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_285  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_286  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_287  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_288  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_289  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_290  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_291  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_292  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_293  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_279 -> m0_294  [color=darkseagreen4, key=1, label=lines, style=dashed];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_47  [key=2, style=dotted];
m0_282 -> m0_283  [key=0, style=solid];
m0_282 -> m0_47  [key=2, style=dotted];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_47  [key=2, style=dotted];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_47  [key=2, style=dotted];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_47  [key=2, style=dotted];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_47  [key=2, style=dotted];
m0_287 -> m0_288  [key=0, style=solid];
m0_287 -> m0_47  [key=2, style=dotted];
m0_288 -> m0_289  [key=0, style=solid];
m0_288 -> m0_47  [key=2, style=dotted];
m0_289 -> m0_290  [key=0, style=solid];
m0_289 -> m0_47  [key=2, style=dotted];
m0_290 -> m0_291  [key=0, style=solid];
m0_290 -> m0_47  [key=2, style=dotted];
m0_291 -> m0_292  [key=0, style=solid];
m0_291 -> m0_47  [key=2, style=dotted];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_47  [key=2, style=dotted];
m0_293 -> m0_294  [key=0, style=solid];
m0_293 -> m0_47  [key=2, style=dotted];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_47  [key=2, style=dotted];
m0_295 -> m0_274  [color=blue, key=0, style=bold];
m0_264 -> m0_265  [key=0, style=solid];
m0_268 -> m0_10  [key=2, style=dotted];
m0_268 -> m0_269  [key=0, style=solid];
m0_269 -> m0_23  [key=2, style=dotted];
m0_269 -> m0_270  [key=0, style=solid];
m0_269 -> m0_154  [key=2, style=dotted];
m0_265 -> m0_7  [key=2, style=dotted];
m0_265 -> m0_268  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_265 -> m0_266  [key=0, style=solid];
m0_265 -> m0_272  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_266 -> m0_8  [key=2, style=dotted];
m0_266 -> m0_267  [key=0, style=solid];
m0_266 -> m0_272  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m0_267 -> m0_268  [key=0, style=solid];
m0_267 -> m0_35  [key=2, style=dotted];
m0_270 -> m0_264  [color=blue, key=0, style=bold];
m0_123 -> m0_124  [key=0, style=solid];
m0_126 -> m0_9  [key=2, style=dotted];
m0_126 -> m0_127  [key=0, style=solid];
m0_127 -> m0_47  [key=2, style=dotted];
m0_127 -> m0_128  [key=0, style=solid];
m0_125 -> m0_46  [key=2, style=dotted];
m0_125 -> m0_126  [key=0, style=solid];
m0_124 -> m0_127  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_129  [key=2, style=dotted];
m0_128 -> m0_123  [color=blue, key=0, style=bold];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_23  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_86 -> m0_29  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_86 -> m0_30  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_86 -> m0_34  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_86 -> m0_39  [color=darkseagreen4, key=1, label="CommandLine.TokenError", style=dashed];
m0_89 -> m0_22  [key=2, style=dotted];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_91  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_89 -> m0_75  [color=darkorchid, key=3, label="Parameter variable CommandLine.TokenError other", style=bold];
m0_89 -> m0_61  [color=darkorchid, key=3, label="method methodReturn bool Equals", style=bold];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_46  [key=2, style=dotted];
m0_88 -> m0_79  [color=darkseagreen4, key=1, label="CommandLine.HelpVerbRequestedError", style=dashed];
m0_88 -> m0_80  [color=darkseagreen4, key=1, label="CommandLine.HelpVerbRequestedError", style=dashed];
m0_88 -> m0_81  [color=darkseagreen4, key=1, label="CommandLine.HelpVerbRequestedError", style=dashed];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_60  [key=2, style=dotted];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_47  [key=2, style=dotted];
m0_91 -> m0_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_91  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m0_87 -> m0_93  [key=2, style=dotted];
m0_87 -> m0_45  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_87 -> m0_50  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_87 -> m0_51  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_87 -> m0_55  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_87 -> m0_59  [color=darkseagreen4, key=1, label="CommandLine.NamedError", style=dashed];
m0_92 -> m0_86  [color=blue, key=0, style=bold];
m0_331 -> m0_209  [color=green, key=1, label=help, style=dashed];
m0_325 -> m0_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_324 -> m0_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_326 -> m0_37  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_328 -> m0_156  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_330 -> m0_186  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_332 -> m0_226  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_333 -> m0_239  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_334 -> m0_262  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_335 -> m0_272  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_336 -> m0_297  [color=darkseagreen4, key=1, label=help, style=dashed];
m0_327 -> m0_144  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_329 -> m0_170  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m0_337 -> m0_310  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptions", style=dashed];
m0_338 -> m0_322  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.CommitOptions", style=dashed];
m12_40 -> m12_41  [key=0, style=solid];
m12_40 -> m12_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m12_41 -> m12_42  [key=0, style=solid];
m12_41 -> m12_10  [key=2, style=dotted];
m12_41 -> m12_11  [key=2, style=dotted];
m12_41 -> m12_12  [key=2, style=dotted];
m12_41 -> m12_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_42 -> m12_43  [key=0, style=solid];
m12_42 -> m12_13  [key=2, style=dotted];
m12_43 -> m12_40  [color=blue, key=0, style=bold];
m12_347 -> m12_348  [key=0, style=solid];
m12_348 -> m12_349  [key=0, style=solid];
m12_349 -> m12_350  [key=0, style=solid];
m12_349 -> m12_328  [key=2, style=dotted];
m12_350 -> m12_347  [color=blue, key=0, style=bold];
m12_150 -> m12_151  [key=0, style=solid];
m12_150 -> m12_152  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m12_151 -> m12_152  [key=0, style=solid];
m12_151 -> m12_10  [key=2, style=dotted];
m12_151 -> m12_11  [key=2, style=dotted];
m12_151 -> m12_12  [key=2, style=dotted];
m12_151 -> m12_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_152 -> m12_153  [key=0, style=solid];
m12_152 -> m12_13  [key=2, style=dotted];
m12_153 -> m12_150  [color=blue, key=0, style=bold];
m12_49 -> m12_50  [key=0, style=solid];
m12_49 -> m12_13  [key=2, style=dotted];
m12_54 -> m12_18  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo parsingCulture", style=bold];
m12_257 -> m12_258  [key=0, style=solid];
m12_257 -> m12_259  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_258 -> m12_259  [key=0, style=solid];
m12_258 -> m12_10  [key=2, style=dotted];
m12_258 -> m12_11  [key=2, style=dotted];
m12_258 -> m12_12  [key=2, style=dotted];
m12_258 -> m12_261  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_259 -> m12_260  [key=0, style=solid];
m12_259 -> m12_13  [key=2, style=dotted];
m12_260 -> m12_257  [color=blue, key=0, style=bold];
m12_324 -> m12_325  [key=0, style=solid];
m12_325 -> m12_326  [key=0, style=solid];
m12_326 -> m12_327  [key=0, style=solid];
m12_326 -> m12_328  [key=2, style=dotted];
m12_327 -> m12_324  [color=blue, key=0, style=bold];
m12_87 -> m12_83  [color=blue, key=0, style=bold];
m12_297 -> m12_298  [key=0, style=solid];
m12_297 -> m12_299  [color=darkseagreen4, key=1, label="long?", style=dashed];
m12_298 -> m12_299  [key=0, style=solid];
m12_298 -> m12_10  [key=2, style=dotted];
m12_298 -> m12_11  [key=2, style=dotted];
m12_298 -> m12_12  [key=2, style=dotted];
m12_298 -> m12_301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_299 -> m12_300  [key=0, style=solid];
m12_299 -> m12_13  [key=2, style=dotted];
m12_300 -> m12_297  [color=blue, key=0, style=bold];
m12_78 -> m12_76  [color=blue, key=0, style=bold];
m12_8 -> m12_4  [color=blue, key=0, style=bold];
m12_165 -> m12_166  [key=0, style=solid];
m12_166 -> m12_167  [key=0, style=solid];
m12_166 -> m12_138  [key=2, style=dotted];
m12_166 -> m12_169  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_167 -> m12_168  [key=0, style=solid];
m12_169 -> m12_170  [key=0, style=solid];
m12_169 -> m12_13  [key=2, style=dotted];
m12_168 -> m12_169  [key=0, style=solid];
m12_168 -> m12_10  [key=2, style=dotted];
m12_168 -> m12_11  [key=2, style=dotted];
m12_168 -> m12_171  [key=2, style=dotted];
m12_168 -> m12_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_168 -> m12_175  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_170 -> m12_165  [color=blue, key=0, style=bold];
m12_104 -> m12_105  [key=0, style=solid];
m12_249 -> m12_250  [key=0, style=solid];
m12_250 -> m12_251  [key=0, style=solid];
m12_250 -> m12_237  [key=2, style=dotted];
m12_250 -> m12_252  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_251 -> m12_252  [key=0, style=solid];
m12_251 -> m12_10  [key=2, style=dotted];
m12_251 -> m12_11  [key=2, style=dotted];
m12_251 -> m12_12  [key=2, style=dotted];
m12_251 -> m12_254  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_252 -> m12_253  [key=0, style=solid];
m12_252 -> m12_13  [key=2, style=dotted];
m12_253 -> m12_249  [color=blue, key=0, style=bold];
m12_384 -> m12_385  [key=0, style=solid];
m12_384 -> m12_386  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_385 -> m12_386  [key=0, style=solid];
m12_385 -> m12_10  [key=2, style=dotted];
m12_385 -> m12_11  [key=2, style=dotted];
m12_385 -> m12_12  [key=2, style=dotted];
m12_385 -> m12_388  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_386 -> m12_387  [key=0, style=solid];
m12_386 -> m12_13  [key=2, style=dotted];
m12_387 -> m12_384  [color=blue, key=0, style=bold];
m12_107 -> m12_72  [color=green, key=0, style=solid];
m12_73 -> m12_74  [key=0, style=solid];
m12_74 -> m12_75  [key=0, style=solid];
m12_74 -> m12_78  [key=2, style=dotted];
m12_74 -> m12_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_74 -> m12_72  [key=2, style=dotted];
m12_75 -> m12_76  [key=0, style=solid];
m12_75 -> m12_10  [key=2, style=dotted];
m12_75 -> m12_11  [key=2, style=dotted];
m12_75 -> m12_12  [key=2, style=dotted];
m12_75 -> m12_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_75 -> m12_73  [color=blue, key=0, style=bold];
m12_76 -> m12_77  [key=0, style=solid];
m12_76 -> m12_13  [key=2, style=dotted];
m12_77 -> m12_73  [color=blue, key=0, style=bold];
m12_77 -> m12_78  [key=0, style=solid];
m12_77 -> m12_79  [key=2, style=dotted];
m12_91 -> m12_92  [key=0, style=solid];
m12_92 -> m12_93  [color=green, key=0, style=solid];
m12_92 -> m12_78  [key=2, style=dotted];
m12_92 -> m12_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_93 -> m12_94  [color=green, key=0, style=solid];
m12_93 -> m12_10  [key=2, style=dotted];
m12_93 -> m12_11  [key=2, style=dotted];
m12_93 -> m12_12  [key=2, style=dotted];
m12_93 -> m12_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_93 -> m12_87  [color=green, key=2, style=dotted];
m12_94 -> m12_95  [key=0, style=solid];
m12_94 -> m12_13  [key=2, style=dotted];
m12_94 -> m12_92  [color=blue, key=0, style=bold];
m12_95 -> m12_91  [color=blue, key=0, style=bold];
m12_95 -> m12_96  [color=green, key=0, style=solid];
m12_304 -> m12_305  [key=0, style=solid];
m12_304 -> m12_307  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_304 -> m12_308  [color=darkseagreen4, key=1, label=bool, style=dashed];
m12_305 -> m12_306  [key=0, style=solid];
m12_305 -> m12_10  [key=2, style=dotted];
m12_305 -> m12_11  [key=2, style=dotted];
m12_305 -> m12_12  [key=2, style=dotted];
m12_305 -> m12_311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_305 -> m12_307  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_305 -> m12_308  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_307 -> m12_308  [key=0, style=solid];
m12_307 -> m12_13  [key=2, style=dotted];
m12_308 -> m12_309  [key=0, style=solid];
m12_308 -> m12_310  [key=2, style=dotted];
m12_308 -> m12_13  [key=2, style=dotted];
m12_306 -> m12_307  [key=0, style=solid];
m12_306 -> m12_308  [key=0, style=solid];
m12_309 -> m12_304  [color=blue, key=0, style=bold];
m12_429 -> m12_430  [key=0, style=solid];
m12_429 -> m12_432  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_429 -> m12_440  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_430 -> m12_431  [key=0, style=solid];
m12_430 -> m12_10  [key=2, style=dotted];
m12_430 -> m12_11  [key=2, style=dotted];
m12_430 -> m12_12  [key=2, style=dotted];
m12_430 -> m12_435  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_432 -> m12_433  [key=0, style=solid];
m12_432 -> m12_434  [key=2, style=dotted];
m12_432 -> m12_365  [key=2, style=dotted];
m12_432 -> m12_366  [key=2, style=dotted];
m12_432 -> m12_439  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_431 -> m12_432  [key=0, style=solid];
m12_433 -> m12_429  [color=blue, key=0, style=bold];
m12_6 -> m12_7  [color=green, key=0, style=solid];
m12_6 -> m12_10  [key=2, style=dotted];
m12_6 -> m12_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_241 -> m12_242  [key=0, style=solid];
m12_242 -> m12_243  [key=0, style=solid];
m12_242 -> m12_237  [key=2, style=dotted];
m12_242 -> m12_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_243 -> m12_244  [key=0, style=solid];
m12_243 -> m12_10  [key=2, style=dotted];
m12_243 -> m12_11  [key=2, style=dotted];
m12_243 -> m12_12  [key=2, style=dotted];
m12_243 -> m12_246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_244 -> m12_245  [key=0, style=solid];
m12_244 -> m12_13  [key=2, style=dotted];
m12_245 -> m12_241  [color=blue, key=0, style=bold];
m12_108 -> m12_109  [key=0, style=solid];
m12_109 -> m12_110  [key=0, style=solid];
m12_109 -> m12_113  [key=2, style=dotted];
m12_109 -> m12_69  [key=2, style=dotted];
m12_109 -> m12_111  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_109 -> m12_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_109 -> m12_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_109 -> m12_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_109 -> m12_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_110 -> m12_111  [key=0, style=solid];
m12_110 -> m12_10  [key=2, style=dotted];
m12_110 -> m12_11  [key=2, style=dotted];
m12_110 -> m12_12  [key=2, style=dotted];
m12_110 -> m12_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_110 -> m12_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m12_111 -> m12_112  [key=0, style=solid];
m12_111 -> m12_13  [key=2, style=dotted];
m12_111 -> m12_66  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_111 -> m12_77  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_112 -> m12_108  [color=blue, key=0, style=bold];
m12_112 -> m12_66  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m12_52 -> m12_53  [key=0, style=solid];
m12_52 -> m12_54  [key=2, style=dotted];
m12_48 -> m12_49  [key=0, style=solid];
m12_48 -> m12_10  [key=2, style=dotted];
m12_48 -> m12_11  [key=2, style=dotted];
m12_48 -> m12_12  [key=2, style=dotted];
m12_48 -> m12_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_13 -> m12_11  [color=blue, key=0, style=bold];
m12_3 -> m12_20  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m12_3 -> m12_27  [color=green, key=1, label="System.StringComparer", style=dashed];
m12_3 -> m12_19  [key=0, style=solid];
m12_3 -> m12_24  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
m12_3 -> m12_26  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_3 -> m12_66  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_3 -> m12_70  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_3 -> m12_28  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_3 -> m12_74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_3 -> m12_29  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_3 -> m12_77  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_3 -> m12_4  [color=red, key=0, style=solid];
m12_3 -> m12_10  [key=2, style=dotted];
m12_3 -> m12_11  [key=2, style=dotted];
m12_3 -> m12_12  [key=2, style=dotted];
m12_3 -> m12_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_20 -> m12_21  [color=green, key=0, style=solid];
m12_20 -> m12_22  [color=green, key=0, style=solid];
m12_20 -> m12_36  [color=green, key=2, style=dotted];
m12_20 -> m12_37  [color=green, key=2, style=dotted];
m12_20 -> m12_38  [color=green, key=2, style=dotted];
m12_20 -> m12_17  [color=blue, key=0, style=bold];
m12_19 -> m12_20  [color=red, key=0, style=solid];
m12_19 -> m12_21  [color=green, key=1, label=instance, style=dashed];
m12_19 -> m12_22  [color=green, key=1, label=instance, style=dashed];
m12_19 -> m12_31  [color=green, key=1, label=instance, style=dashed];
m12_19 -> m12_35  [key=2, style=dotted];
m12_19 -> m12_13  [color=red, key=2, style=dotted];
m12_21 -> m12_34  [color=green, key=0, style=solid];
m12_21 -> m12_9  [color=green, key=2, style=dotted];
m12_21 -> m12_40  [color=green, key=2, style=dotted];
m12_21 -> m12_22  [key=0, style=solid];
m12_22 -> m12_27  [color=green, key=1, label=specProps, style=dashed];
m12_22 -> m12_23  [color=green, key=0, style=solid];
m12_22 -> m12_41  [color=green, key=2, style=dotted];
m12_22 -> m12_42  [color=green, key=2, style=dotted];
m12_22 -> m12_59  [color=green, key=1, label="lambda expression", style=dashed];
m12_22 -> m12_28  [color=green, key=1, label=specProps, style=dashed];
m12_22 -> m12_6  [key=2, style=dotted];
m12_27 -> m12_27  [color=green, key=1, label=pt, style=dashed];
m12_27 -> m12_28  [color=green, key=0, style=solid];
m12_27 -> m12_47  [color=green, key=2, style=dotted];
m12_27 -> m12_48  [color=green, key=2, style=dotted];
m12_27 -> m12_69  [color=green, key=1, label="lambda expression", style=dashed];
m12_27 -> m12_30  [color=green, key=1, label=optionSpecProps, style=dashed];
m12_27 -> m12_33  [color=green, key=1, label=optionSpecProps, style=dashed];
m12_27 -> m12_24  [color=blue, key=0, style=bold];
m12_26 -> m12_27  [color=green, key=0, style=solid];
m12_26 -> m12_46  [key=2, style=dotted];
m12_26 -> m12_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_26 -> m12_28  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m12_26 -> m12_29  [color=darkseagreen4, key=1, label=partitions, style=dashed];
m12_26 -> m12_13  [key=2, style=dotted];
m12_28 -> m12_33  [color=green, key=1, label=valueSpecProps, style=dashed];
m12_28 -> m12_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m12_28 -> m12_29  [key=0, style=solid];
m12_28 -> m12_49  [key=2, style=dotted];
m12_28 -> m12_48  [key=2, style=dotted];
m12_28 -> m12_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_28 -> m12_30  [color=darkseagreen4, key=1, label=valueSpecProps, style=dashed];
m12_30 -> m12_31  [color=green, key=0, style=solid];
m12_30 -> m12_32  [color=green, key=1, label=specPropsWithValue, style=dashed];
m12_30 -> m12_53  [key=2, style=dotted];
m12_30 -> m12_28  [color=blue, key=0, style=bold];
m12_33 -> m12_34  [color=green, key=0, style=solid];
m12_33 -> m12_57  [color=green, key=2, style=dotted];
m12_33 -> m12_58  [color=green, key=2, style=dotted];
m12_33 -> m12_10  [key=2, style=dotted];
m12_33 -> m12_11  [key=2, style=dotted];
m12_33 -> m12_12  [key=2, style=dotted];
m12_33 -> m12_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_23 -> m12_26  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m12_23 -> m12_23  [color=darkseagreen4, key=1, label=pt, style=dashed];
m12_23 -> m12_24  [key=0, style=solid];
m12_23 -> m12_43  [key=2, style=dotted];
m12_23 -> m12_44  [key=2, style=dotted];
m12_23 -> m12_66  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m12_23 -> m12_29  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m12_23 -> m12_21  [color=blue, key=0, style=bold];
m12_31 -> m12_31  [color=green, key=1, label=instance, style=dashed];
m12_31 -> m12_32  [color=green, key=0, style=solid];
m12_31 -> m12_54  [color=green, key=2, style=dotted];
m12_31 -> m12_80  [color=green, key=1, label="lambda expression", style=dashed];
m12_31 -> m12_84  [color=green, key=1, label="lambda expression", style=dashed];
m12_31 -> m12_70  [color=green, key=1, label="lambda expression", style=dashed];
m12_31 -> m12_92  [color=green, key=1, label="lambda expression", style=dashed];
m12_31 -> m12_95  [color=green, key=1, label="lambda expression", style=dashed];
m12_31 -> m12_100  [color=green, key=1, label="lambda expression", style=dashed];
m12_31 -> m12_33  [color=green, key=1, label=instance, style=dashed];
m12_32 -> m12_33  [color=green, key=0, style=solid];
m12_32 -> m12_55  [color=green, key=2, style=dotted];
m12_32 -> m12_44  [color=green, key=2, style=dotted];
m12_32 -> m12_56  [color=green, key=2, style=dotted];
m12_32 -> m12_106  [color=green, key=1, label="lambda expression", style=dashed];
m12_32 -> m12_34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m12_24 -> m12_33  [color=green, key=1, label=tokenizerResult, style=dashed];
m12_24 -> m12_25  [key=0, style=solid];
m12_24 -> n20  [key=2, style=dotted];
m12_24 -> m12_26  [color=darkseagreen4, key=1, label=double, style=dashed];
m12_29 -> m12_33  [color=green, key=1, label=missingValueErrors, style=dashed];
m12_29 -> m12_30  [key=0, style=solid];
m12_29 -> m12_29  [color=darkseagreen4, key=1, label=token, style=dashed];
m12_29 -> m12_50  [key=2, style=dotted];
m12_29 -> m12_51  [key=2, style=dotted];
m12_29 -> m12_52  [key=2, style=dotted];
m12_29 -> m12_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_29 -> m12_77  [color=darkseagreen4, key=1, label=token, style=dashed];
m12_29 -> m12_31  [key=2, style=dotted];
m12_25 -> m12_26  [key=0, style=solid];
m12_25 -> m12_10  [key=2, style=dotted];
m12_25 -> m12_11  [key=2, style=dotted];
m12_25 -> m12_12  [key=2, style=dotted];
m12_25 -> m12_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_34 -> m12_3  [color=blue, key=0, style=bold];
m12_34 -> m12_35  [key=0, style=solid];
m12_34 -> m12_13  [key=2, style=dotted];
m12_413 -> m12_414  [key=0, style=solid];
m12_413 -> m12_415  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m12_414 -> m12_415  [key=0, style=solid];
m12_414 -> m12_10  [key=2, style=dotted];
m12_414 -> m12_11  [key=2, style=dotted];
m12_414 -> m12_12  [key=2, style=dotted];
m12_414 -> m12_417  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_415 -> m12_416  [key=0, style=solid];
m12_415 -> m12_13  [key=2, style=dotted];
m12_416 -> m12_413  [color=blue, key=0, style=bold];
m12_79 -> m12_80  [key=0, style=solid];
m12_82 -> m12_80  [color=blue, key=0, style=bold];
m12_142 -> m12_143  [key=0, style=solid];
m12_142 -> m12_144  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m12_143 -> m12_144  [key=0, style=solid];
m12_143 -> m12_10  [key=2, style=dotted];
m12_143 -> m12_11  [key=2, style=dotted];
m12_143 -> m12_12  [key=2, style=dotted];
m12_143 -> m12_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_144 -> m12_145  [key=0, style=solid];
m12_144 -> m12_13  [key=2, style=dotted];
m12_145 -> m12_142  [color=blue, key=0, style=bold];
m12_55 -> m12_56  [key=0, style=solid];
m12_55 -> m12_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m12_56 -> m12_57  [key=0, style=solid];
m12_56 -> m12_10  [key=2, style=dotted];
m12_56 -> m12_11  [key=2, style=dotted];
m12_56 -> m12_12  [key=2, style=dotted];
m12_56 -> m12_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_57 -> m12_58  [key=0, style=solid];
m12_57 -> m12_13  [key=2, style=dotted];
m12_58 -> m12_55  [color=blue, key=0, style=bold];
m12_358 -> m12_359  [key=0, style=solid];
m12_358 -> m12_360  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m12_358 -> m12_361  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_358 -> m12_372  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_358 -> m12_362  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m12_359 -> m12_360  [key=0, style=solid];
m12_359 -> m12_10  [key=2, style=dotted];
m12_359 -> m12_11  [key=2, style=dotted];
m12_359 -> m12_12  [key=2, style=dotted];
m12_359 -> m12_367  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_359 -> m12_361  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_359 -> m12_363  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_360 -> m12_361  [key=0, style=solid];
m12_360 -> m12_362  [key=0, style=solid];
m12_361 -> m12_364  [key=0, style=solid];
m12_361 -> m12_365  [key=2, style=dotted];
m12_361 -> m12_366  [key=2, style=dotted];
m12_361 -> m12_371  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_362 -> m12_363  [key=0, style=solid];
m12_362 -> m12_364  [key=0, style=solid];
m12_363 -> m12_364  [key=0, style=solid];
m12_363 -> m12_365  [key=2, style=dotted];
m12_363 -> m12_328  [key=2, style=dotted];
m12_364 -> m12_358  [color=blue, key=0, style=bold];
m12_35 -> m12_32  [color=blue, key=0, style=bold];
m12_38 -> m12_36  [color=blue, key=0, style=bold];
m12_51 -> m12_52  [key=0, style=solid];
m12_11 -> m12_12  [key=0, style=solid];
m12_15 -> m12_16  [key=0, style=solid];
m12_14 -> m12_15  [key=0, style=solid];
m12_16 -> m12_14  [color=blue, key=0, style=bold];
m12_16 -> m12_59  [color=green, key=0, style=bold];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_18  [key=2, style=dotted];
m12_36 -> m12_37  [key=0, style=solid];
m12_37 -> m12_38  [key=0, style=solid];
m12_37 -> m12_39  [key=2, style=dotted];
m12_44 -> m12_45  [key=0, style=solid];
m12_45 -> m12_46  [key=0, style=solid];
m12_45 -> m12_6  [key=2, style=dotted];
m12_46 -> m12_44  [color=blue, key=0, style=bold];
m12_53 -> m12_51  [color=blue, key=0, style=bold];
m12_59 -> m12_60  [color=green, key=0, style=solid];
m12_60 -> m12_61  [key=0, style=solid];
m12_60 -> m12_62  [color=green, key=2, style=dotted];
m12_60 -> m12_16  [color=green, key=0, style=solid];
m12_60 -> m12_63  [color=green, key=2, style=dotted];
m12_60 -> m12_64  [color=green, key=2, style=dotted];
m12_61 -> m12_59  [color=blue, key=0, style=bold];
m12_61 -> m12_70  [color=green, key=0, style=bold];
m12_70 -> m12_71  [key=0, style=solid];
m12_70 -> m12_89  [color=green, key=0, style=solid];
m12_70 -> m12_72  [key=2, style=dotted];
m12_71 -> m12_72  [key=0, style=solid];
m12_71 -> m12_54  [key=2, style=dotted];
m12_71 -> m12_69  [color=blue, key=0, style=bold];
m12_72 -> m12_70  [color=blue, key=0, style=bold];
m12_72 -> m12_106  [color=blue, key=0, style=bold];
m12_80 -> m12_81  [key=0, style=solid];
m12_80 -> m12_82  [key=2, style=dotted];
m12_81 -> m12_79  [color=blue, key=0, style=bold];
m12_81 -> m12_83  [key=2, style=dotted];
m12_81 -> m12_82  [key=0, style=solid];
m12_88 -> m12_89  [key=0, style=solid];
m12_89 -> m12_90  [key=0, style=solid];
m12_89 -> m12_62  [key=2, style=dotted];
m12_89 -> m12_61  [color=green, key=0, style=solid];
m12_89 -> m12_91  [color=green, key=2, style=dotted];
m12_89 -> m12_83  [color=green, key=2, style=dotted];
m12_90 -> m12_88  [color=blue, key=0, style=bold];
m12_96 -> m12_97  [color=green, key=0, style=solid];
m12_96 -> m12_91  [color=green, key=2, style=dotted];
m12_96 -> m12_98  [color=green, key=2, style=dotted];
m12_96 -> m12_99  [color=green, key=2, style=dotted];
m12_97 -> m12_98  [key=0, style=solid];
m12_97 -> m12_99  [key=2, style=dotted];
m12_97 -> m12_95  [color=blue, key=0, style=bold];
m12_98 -> m12_96  [color=blue, key=0, style=bold];
m12_105 -> m12_106  [key=0, style=solid];
m12_105 -> m12_107  [key=2, style=dotted];
m12_106 -> m12_104  [color=blue, key=0, style=bold];
m12_106 -> m12_107  [color=green, key=0, style=solid];
m12_114 -> m12_115  [key=0, style=solid];
m12_114 -> m12_77  [color=darkseagreen4, key=1, label=token, style=dashed];
m12_115 -> m12_116  [key=0, style=solid];
m12_115 -> m12_107  [key=2, style=dotted];
m12_116 -> m12_114  [color=blue, key=0, style=bold];
m12_122 -> m12_123  [key=0, style=solid];
m12_123 -> m12_124  [key=0, style=solid];
m12_123 -> m12_107  [key=2, style=dotted];
m12_124 -> m12_122  [color=blue, key=0, style=bold];
m12_130 -> m12_131  [key=0, style=solid];
m12_131 -> m12_132  [key=0, style=solid];
m12_131 -> m12_107  [key=2, style=dotted];
m12_132 -> m12_130  [color=blue, key=0, style=bold];
m12_139 -> m12_140  [key=0, style=solid];
m12_140 -> m12_141  [key=0, style=solid];
m12_140 -> m12_138  [key=2, style=dotted];
m12_141 -> m12_139  [color=blue, key=0, style=bold];
m12_146 -> m12_147  [key=0, style=solid];
m12_147 -> m12_148  [key=0, style=solid];
m12_147 -> m12_149  [key=2, style=dotted];
m12_148 -> m12_146  [color=blue, key=0, style=bold];
m12_154 -> m12_155  [key=0, style=solid];
m12_155 -> m12_156  [key=0, style=solid];
m12_155 -> m12_157  [key=2, style=dotted];
m12_156 -> m12_154  [color=blue, key=0, style=bold];
m12_162 -> m12_163  [key=0, style=solid];
m12_163 -> m12_164  [key=0, style=solid];
m12_163 -> m12_157  [key=2, style=dotted];
m12_164 -> m12_162  [color=blue, key=0, style=bold];
m12_172 -> m12_173  [key=0, style=solid];
m12_175 -> m12_176  [key=0, style=solid];
m12_175 -> m12_180  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m12_175 -> m12_184  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m12_173 -> m12_174  [key=0, style=solid];
m12_173 -> m12_138  [key=2, style=dotted];
m12_174 -> m12_172  [color=blue, key=0, style=bold];
m12_176 -> m12_177  [key=0, style=solid];
m12_176 -> m12_178  [key=2, style=dotted];
m12_176 -> m12_179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_180 -> m12_181  [key=0, style=solid];
m12_180 -> m12_182  [key=2, style=dotted];
m12_180 -> m12_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_184 -> m12_185  [key=0, style=solid];
m12_184 -> m12_186  [key=2, style=dotted];
m12_177 -> m12_175  [color=blue, key=0, style=bold];
m12_179 -> m12_180  [key=0, style=solid];
m12_181 -> m12_179  [color=blue, key=0, style=bold];
m12_183 -> m12_184  [key=0, style=solid];
m12_185 -> m12_183  [color=blue, key=0, style=bold];
m12_193 -> m12_194  [key=0, style=solid];
m12_194 -> m12_195  [key=0, style=solid];
m12_194 -> m12_196  [key=2, style=dotted];
m12_195 -> m12_193  [color=blue, key=0, style=bold];
m12_203 -> m12_204  [key=0, style=solid];
m12_204 -> m12_205  [key=0, style=solid];
m12_204 -> m12_202  [key=2, style=dotted];
m12_205 -> m12_203  [color=blue, key=0, style=bold];
m12_212 -> m12_213  [key=0, style=solid];
m12_213 -> m12_214  [key=0, style=solid];
m12_213 -> m12_202  [key=2, style=dotted];
m12_214 -> m12_212  [color=blue, key=0, style=bold];
m12_220 -> m12_221  [key=0, style=solid];
m12_221 -> m12_222  [key=0, style=solid];
m12_221 -> m12_223  [key=2, style=dotted];
m12_222 -> m12_220  [color=blue, key=0, style=bold];
m12_229 -> m12_230  [key=0, style=solid];
m12_230 -> m12_231  [key=0, style=solid];
m12_230 -> m12_6  [key=2, style=dotted];
m12_231 -> m12_229  [color=blue, key=0, style=bold];
m12_238 -> m12_239  [key=0, style=solid];
m12_239 -> m12_240  [key=0, style=solid];
m12_239 -> m12_6  [key=2, style=dotted];
m12_240 -> m12_238  [color=blue, key=0, style=bold];
m12_246 -> m12_247  [key=0, style=solid];
m12_247 -> m12_248  [key=0, style=solid];
m12_247 -> m12_6  [key=2, style=dotted];
m12_248 -> m12_246  [color=blue, key=0, style=bold];
m12_254 -> m12_255  [key=0, style=solid];
m12_255 -> m12_256  [key=0, style=solid];
m12_255 -> m12_6  [key=2, style=dotted];
m12_256 -> m12_254  [color=blue, key=0, style=bold];
m12_261 -> m12_262  [key=0, style=solid];
m12_262 -> m12_263  [key=0, style=solid];
m12_262 -> m12_6  [key=2, style=dotted];
m12_263 -> m12_261  [color=blue, key=0, style=bold];
m12_269 -> m12_270  [key=0, style=solid];
m12_270 -> m12_271  [key=0, style=solid];
m12_270 -> m12_272  [key=2, style=dotted];
m12_271 -> m12_269  [color=blue, key=0, style=bold];
m12_277 -> m12_278  [key=0, style=solid];
m12_278 -> m12_279  [key=0, style=solid];
m12_278 -> m12_6  [key=2, style=dotted];
m12_279 -> m12_277  [color=blue, key=0, style=bold];
m12_285 -> m12_286  [key=0, style=solid];
m12_286 -> m12_287  [key=0, style=solid];
m12_286 -> m12_288  [key=2, style=dotted];
m12_287 -> m12_285  [color=blue, key=0, style=bold];
m12_293 -> m12_294  [key=0, style=solid];
m12_294 -> m12_295  [key=0, style=solid];
m12_294 -> m12_296  [key=2, style=dotted];
m12_295 -> m12_293  [color=blue, key=0, style=bold];
m12_301 -> m12_302  [key=0, style=solid];
m12_302 -> m12_303  [key=0, style=solid];
m12_302 -> m12_296  [key=2, style=dotted];
m12_303 -> m12_301  [color=blue, key=0, style=bold];
m12_311 -> m12_312  [key=0, style=solid];
m12_312 -> m12_313  [key=0, style=solid];
m12_312 -> m12_314  [key=2, style=dotted];
m12_313 -> m12_311  [color=blue, key=0, style=bold];
m12_321 -> m12_322  [key=0, style=solid];
m12_322 -> m12_323  [key=0, style=solid];
m12_322 -> m12_314  [key=2, style=dotted];
m12_323 -> m12_321  [color=blue, key=0, style=bold];
m12_329 -> m12_330  [key=0, style=solid];
m12_330 -> m12_331  [key=0, style=solid];
m12_330 -> m12_10  [key=2, style=dotted];
m12_330 -> m12_11  [key=2, style=dotted];
m12_330 -> m12_12  [key=2, style=dotted];
m12_330 -> m12_332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_331 -> m12_329  [color=blue, key=0, style=bold];
m12_332 -> m12_333  [key=0, style=solid];
m12_333 -> m12_334  [key=0, style=solid];
m12_333 -> m12_335  [key=2, style=dotted];
m12_334 -> m12_332  [color=blue, key=0, style=bold];
m12_340 -> m12_341  [key=0, style=solid];
m12_341 -> m12_342  [key=0, style=solid];
m12_341 -> m12_10  [key=2, style=dotted];
m12_341 -> m12_11  [key=2, style=dotted];
m12_341 -> m12_12  [key=2, style=dotted];
m12_341 -> m12_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_342 -> m12_340  [color=blue, key=0, style=bold];
m12_343 -> m12_344  [key=0, style=solid];
m12_344 -> m12_345  [key=0, style=solid];
m12_344 -> m12_346  [key=2, style=dotted];
m12_345 -> m12_343  [color=blue, key=0, style=bold];
m12_351 -> m12_352  [key=0, style=solid];
m12_352 -> m12_353  [key=0, style=solid];
m12_352 -> m12_10  [key=2, style=dotted];
m12_352 -> m12_11  [key=2, style=dotted];
m12_352 -> m12_12  [key=2, style=dotted];
m12_352 -> m12_354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_353 -> m12_351  [color=blue, key=0, style=bold];
m12_354 -> m12_355  [key=0, style=solid];
m12_355 -> m12_356  [key=0, style=solid];
m12_355 -> m12_357  [key=2, style=dotted];
m12_356 -> m12_354  [color=blue, key=0, style=bold];
m12_372 -> m12_373  [key=0, style=solid];
m12_367 -> m12_368  [key=0, style=solid];
m12_371 -> m12_372  [key=0, style=solid];
m12_368 -> m12_369  [key=0, style=solid];
m12_368 -> m12_370  [key=2, style=dotted];
m12_369 -> m12_367  [color=blue, key=0, style=bold];
m12_373 -> m12_371  [color=blue, key=0, style=bold];
m12_382 -> m12_383  [key=0, style=solid];
m12_378 -> m12_379  [key=0, style=solid];
m12_381 -> m12_382  [key=0, style=solid];
m12_379 -> m12_380  [key=0, style=solid];
m12_379 -> m12_6  [key=2, style=dotted];
m12_380 -> m12_378  [color=blue, key=0, style=bold];
m12_383 -> m12_381  [color=blue, key=0, style=bold];
m12_388 -> m12_389  [key=0, style=solid];
m12_389 -> m12_390  [key=0, style=solid];
m12_389 -> m12_391  [key=2, style=dotted];
m12_390 -> m12_388  [color=blue, key=0, style=bold];
m12_404 -> m12_405  [key=0, style=solid];
m12_399 -> m12_400  [key=0, style=solid];
m12_403 -> m12_404  [key=0, style=solid];
m12_400 -> m12_401  [key=0, style=solid];
m12_400 -> m12_402  [key=2, style=dotted];
m12_401 -> m12_399  [color=blue, key=0, style=bold];
m12_405 -> m12_403  [color=blue, key=0, style=bold];
m12_410 -> m12_411  [key=0, style=solid];
m12_411 -> m12_412  [key=0, style=solid];
m12_411 -> m12_272  [key=2, style=dotted];
m12_412 -> m12_410  [color=blue, key=0, style=bold];
m12_417 -> m12_418  [key=0, style=solid];
m12_418 -> m12_419  [key=0, style=solid];
m12_418 -> m12_420  [key=2, style=dotted];
m12_419 -> m12_417  [color=blue, key=0, style=bold];
m12_426 -> m12_427  [key=0, style=solid];
m12_427 -> m12_428  [key=0, style=solid];
m12_427 -> m12_6  [key=2, style=dotted];
m12_428 -> m12_426  [color=blue, key=0, style=bold];
m12_440 -> m12_441  [key=0, style=solid];
m12_435 -> m12_436  [key=0, style=solid];
m12_439 -> m12_440  [key=0, style=solid];
m12_436 -> m12_437  [key=0, style=solid];
m12_436 -> m12_438  [key=2, style=dotted];
m12_437 -> m12_435  [color=blue, key=0, style=bold];
m12_441 -> m12_439  [color=blue, key=0, style=bold];
m12_455 -> m12_456  [key=0, style=solid];
m12_456 -> m12_457  [key=0, style=solid];
m12_456 -> m12_452  [key=2, style=dotted];
m12_457 -> m12_455  [color=blue, key=0, style=bold];
m12_4 -> m12_5  [color=red, key=0, style=solid];
m12_4 -> m12_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m12_4 -> m12_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m12_4 -> m12_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m12_4 -> m12_13  [color=red, key=2, style=dotted];
m12_7 -> m12_8  [color=green, key=0, style=solid];
m12_69 -> m12_70  [key=0, style=solid];
m12_84 -> m12_85  [color=green, key=0, style=solid];
m12_84 -> m12_78  [key=2, style=dotted];
m12_84 -> m12_69  [key=2, style=dotted];
m12_84 -> m12_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_100 -> m12_101  [color=green, key=0, style=solid];
m12_100 -> m12_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m12_85 -> m12_86  [color=green, key=0, style=solid];
m12_85 -> m12_87  [color=green, key=2, style=dotted];
m12_85 -> m12_10  [key=2, style=dotted];
m12_85 -> m12_11  [key=2, style=dotted];
m12_85 -> m12_12  [key=2, style=dotted];
m12_85 -> m12_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_86 -> m12_84  [color=blue, key=0, style=bold];
m12_86 -> m12_87  [key=0, style=solid];
m12_86 -> m12_13  [key=2, style=dotted];
m12_101 -> m12_102  [color=green, key=0, style=solid];
m12_101 -> m12_103  [color=green, key=2, style=dotted];
m12_101 -> m12_104  [color=green, key=2, style=dotted];
m12_101 -> m12_105  [color=green, key=2, style=dotted];
m12_101 -> m12_10  [key=2, style=dotted];
m12_101 -> m12_11  [key=2, style=dotted];
m12_101 -> m12_12  [key=2, style=dotted];
m12_102 -> m12_100  [color=blue, key=0, style=bold];
m12_102 -> m12_103  [key=0, style=solid];
m12_102 -> m12_13  [key=2, style=dotted];
m12_102 -> m12_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_9  [key=2, style=dotted];
m12_5 -> m12_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_5 -> m12_0  [color=blue, key=0, style=bold];
m12_12 -> m12_13  [key=0, style=solid];
m12_12 -> m12_14  [key=2, style=dotted];
m12_66 -> m12_67  [key=0, style=solid];
m12_66 -> m12_68  [key=2, style=dotted];
m12_66 -> m12_13  [key=2, style=dotted];
m12_65 -> m12_66  [key=0, style=solid];
m12_65 -> m12_10  [key=2, style=dotted];
m12_65 -> m12_11  [key=2, style=dotted];
m12_65 -> m12_12  [key=2, style=dotted];
m12_65 -> m12_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_17 -> m12_15  [color=blue, key=0, style=bold];
m12_17 -> m12_18  [color=red, key=0, style=solid];
m12_17 -> m12_19  [color=red, key=1, label=long, style=dashed];
m12_67 -> m12_65  [color=blue, key=0, style=bold];
m12_67 -> m12_63  [color=blue, key=0, style=bold];
m12_103 -> m12_100  [color=blue, key=0, style=bold];
m12_374 -> m12_375  [key=0, style=solid];
m12_374 -> m12_376  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_374 -> m12_382  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_375 -> m12_376  [key=0, style=solid];
m12_375 -> m12_10  [key=2, style=dotted];
m12_375 -> m12_11  [key=2, style=dotted];
m12_375 -> m12_12  [key=2, style=dotted];
m12_375 -> m12_378  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_376 -> m12_377  [key=0, style=solid];
m12_376 -> m12_365  [key=2, style=dotted];
m12_376 -> m12_366  [key=2, style=dotted];
m12_376 -> m12_381  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_377 -> m12_374  [color=blue, key=0, style=bold];
m12_392 -> m12_393  [key=0, style=solid];
m12_392 -> m12_394  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m12_392 -> m12_395  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_392 -> m12_404  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_392 -> m12_396  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m12_393 -> m12_394  [key=0, style=solid];
m12_393 -> m12_10  [key=2, style=dotted];
m12_393 -> m12_11  [key=2, style=dotted];
m12_393 -> m12_12  [key=2, style=dotted];
m12_393 -> m12_399  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_393 -> m12_395  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_393 -> m12_397  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_394 -> m12_395  [key=0, style=solid];
m12_394 -> m12_396  [key=0, style=solid];
m12_395 -> m12_398  [key=0, style=solid];
m12_395 -> m12_365  [key=2, style=dotted];
m12_395 -> m12_366  [key=2, style=dotted];
m12_395 -> m12_403  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_396 -> m12_397  [key=0, style=solid];
m12_396 -> m12_398  [key=0, style=solid];
m12_397 -> m12_398  [key=0, style=solid];
m12_397 -> m12_365  [key=2, style=dotted];
m12_397 -> m12_328  [key=2, style=dotted];
m12_398 -> m12_392  [color=blue, key=0, style=bold];
m12_63 -> m12_64  [key=0, style=solid];
m12_47 -> m12_48  [key=0, style=solid];
m12_47 -> m12_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m12_50 -> m12_47  [color=blue, key=0, style=bold];
m12_117 -> m12_118  [key=0, style=solid];
m12_118 -> m12_119  [key=0, style=solid];
m12_118 -> m12_113  [key=2, style=dotted];
m12_118 -> m12_69  [key=2, style=dotted];
m12_118 -> m12_120  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_119 -> m12_120  [key=0, style=solid];
m12_119 -> m12_10  [key=2, style=dotted];
m12_119 -> m12_11  [key=2, style=dotted];
m12_119 -> m12_12  [key=2, style=dotted];
m12_119 -> m12_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_120 -> m12_121  [key=0, style=solid];
m12_120 -> m12_13  [key=2, style=dotted];
m12_121 -> m12_117  [color=blue, key=0, style=bold];
m12_83 -> m12_84  [key=0, style=solid];
m12_264 -> m12_265  [key=0, style=solid];
m12_265 -> m12_266  [key=0, style=solid];
m12_265 -> m12_211  [key=2, style=dotted];
m12_265 -> m12_267  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_266 -> m12_267  [key=0, style=solid];
m12_266 -> m12_10  [key=2, style=dotted];
m12_266 -> m12_11  [key=2, style=dotted];
m12_266 -> m12_12  [key=2, style=dotted];
m12_266 -> m12_269  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_267 -> m12_268  [key=0, style=solid];
m12_267 -> m12_13  [key=2, style=dotted];
m12_268 -> m12_264  [color=blue, key=0, style=bold];
m12_224 -> m12_225  [key=0, style=solid];
m12_225 -> m12_226  [key=0, style=solid];
m12_225 -> m12_78  [key=2, style=dotted];
m12_225 -> m12_69  [key=2, style=dotted];
m12_225 -> m12_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_226 -> m12_227  [key=0, style=solid];
m12_226 -> m12_10  [key=2, style=dotted];
m12_226 -> m12_11  [key=2, style=dotted];
m12_226 -> m12_12  [key=2, style=dotted];
m12_226 -> m12_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_227 -> m12_228  [key=0, style=solid];
m12_227 -> m12_13  [key=2, style=dotted];
m12_228 -> m12_224  [color=blue, key=0, style=bold];
m12_64 -> m12_65  [key=0, style=solid];
m12_64 -> m12_68  [key=2, style=dotted];
m12_64 -> m12_69  [key=2, style=dotted];
m12_64 -> m12_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_0 -> m12_1  [color=green, key=0, style=solid];
m12_0 -> m12_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_0 -> m12_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_0 -> m12_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_0 -> m12_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m12_0 -> m12_3  [color=darkorchid, key=3, label="method methodReturn CommandLine.ParserResult<T> Build", style=bold];
m12_1 -> m12_2  [color=green, key=0, style=solid];
m12_1 -> m12_6  [key=2, style=dotted];
m12_1 -> m12_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m12_1 -> m12_15  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m12_1 -> m12_1  [color=green, key=3, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> ", style=bold];
m12_1 -> m12_4  [color=green, key=1, label="lambda expression", style=dashed];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_7  [key=2, style=dotted];
m12_2 -> m12_8  [key=2, style=dotted];
m12_2 -> m12_9  [key=2, style=dotted];
m12_2 -> m12_4  [color=red, key=1, label=expectedResult, style=dashed];
m12_2 -> m12_0  [color=blue, key=0, style=bold];
m12_215 -> m12_216  [key=0, style=solid];
m12_216 -> m12_217  [key=0, style=solid];
m12_216 -> m12_211  [key=2, style=dotted];
m12_216 -> m12_69  [key=2, style=dotted];
m12_216 -> m12_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_217 -> m12_218  [key=0, style=solid];
m12_217 -> m12_10  [key=2, style=dotted];
m12_217 -> m12_11  [key=2, style=dotted];
m12_217 -> m12_12  [key=2, style=dotted];
m12_217 -> m12_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_218 -> m12_219  [key=0, style=solid];
m12_218 -> m12_13  [key=2, style=dotted];
m12_219 -> m12_215  [color=blue, key=0, style=bold];
m12_206 -> m12_207  [key=0, style=solid];
m12_207 -> m12_208  [key=0, style=solid];
m12_207 -> m12_211  [key=2, style=dotted];
m12_207 -> m12_69  [key=2, style=dotted];
m12_207 -> m12_209  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_208 -> m12_209  [key=0, style=solid];
m12_208 -> m12_10  [key=2, style=dotted];
m12_208 -> m12_11  [key=2, style=dotted];
m12_208 -> m12_12  [key=2, style=dotted];
m12_208 -> m12_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_209 -> m12_210  [key=0, style=solid];
m12_209 -> m12_13  [key=2, style=dotted];
m12_210 -> m12_206  [color=blue, key=0, style=bold];
m12_125 -> m12_126  [key=0, style=solid];
m12_126 -> m12_127  [key=0, style=solid];
m12_126 -> m12_113  [key=2, style=dotted];
m12_126 -> m12_69  [key=2, style=dotted];
m12_126 -> m12_128  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_127 -> m12_128  [key=0, style=solid];
m12_127 -> m12_10  [key=2, style=dotted];
m12_127 -> m12_11  [key=2, style=dotted];
m12_127 -> m12_12  [key=2, style=dotted];
m12_127 -> m12_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_128 -> m12_129  [key=0, style=solid];
m12_128 -> m12_13  [key=2, style=dotted];
m12_129 -> m12_125  [color=blue, key=0, style=bold];
m12_406 -> m12_407  [key=0, style=solid];
m12_406 -> m12_408  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m12_407 -> m12_408  [key=0, style=solid];
m12_407 -> m12_10  [key=2, style=dotted];
m12_407 -> m12_11  [key=2, style=dotted];
m12_407 -> m12_12  [key=2, style=dotted];
m12_407 -> m12_410  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_408 -> m12_409  [key=0, style=solid];
m12_408 -> m12_13  [key=2, style=dotted];
m12_409 -> m12_406  [color=blue, key=0, style=bold];
m12_133 -> m12_134  [key=0, style=solid];
m12_134 -> m12_135  [key=0, style=solid];
m12_134 -> m12_138  [key=2, style=dotted];
m12_134 -> m12_136  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_135 -> m12_136  [key=0, style=solid];
m12_135 -> m12_10  [key=2, style=dotted];
m12_135 -> m12_11  [key=2, style=dotted];
m12_135 -> m12_12  [key=2, style=dotted];
m12_135 -> m12_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_136 -> m12_137  [key=0, style=solid];
m12_136 -> m12_13  [key=2, style=dotted];
m12_137 -> m12_133  [color=blue, key=0, style=bold];
m12_18 -> m12_19  [color=red, key=0, style=solid];
m12_18 -> m12_10  [color=red, key=2, style=dotted];
m12_18 -> m12_11  [color=red, key=2, style=dotted];
m12_18 -> m12_12  [color=red, key=2, style=dotted];
m12_18 -> m12_21  [color=red, key=1, label="lambda expression", style=dashed];
m12_315 -> m12_316  [key=0, style=solid];
m12_315 -> m12_318  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_315 -> m12_319  [color=darkseagreen4, key=1, label=bool, style=dashed];
m12_316 -> m12_317  [key=0, style=solid];
m12_316 -> m12_10  [key=2, style=dotted];
m12_316 -> m12_11  [key=2, style=dotted];
m12_316 -> m12_12  [key=2, style=dotted];
m12_316 -> m12_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_316 -> m12_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_316 -> m12_319  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_318 -> m12_319  [key=0, style=solid];
m12_318 -> m12_13  [key=2, style=dotted];
m12_319 -> m12_320  [key=0, style=solid];
m12_319 -> m12_310  [key=2, style=dotted];
m12_319 -> m12_13  [key=2, style=dotted];
m12_317 -> m12_318  [key=0, style=solid];
m12_317 -> m12_319  [key=0, style=solid];
m12_320 -> m12_315  [color=blue, key=0, style=bold];
m12_421 -> m12_422  [key=0, style=solid];
m12_422 -> m12_423  [key=0, style=solid];
m12_422 -> m12_6  [key=2, style=dotted];
m12_422 -> m12_424  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_423 -> m12_424  [key=0, style=solid];
m12_423 -> m12_10  [key=2, style=dotted];
m12_423 -> m12_11  [key=2, style=dotted];
m12_423 -> m12_12  [key=2, style=dotted];
m12_423 -> m12_426  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_424 -> m12_425  [key=0, style=solid];
m12_424 -> m12_13  [key=2, style=dotted];
m12_425 -> m12_421  [color=blue, key=0, style=bold];
m12_158 -> m12_159  [key=0, style=solid];
m12_158 -> m12_160  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m12_159 -> m12_160  [key=0, style=solid];
m12_159 -> m12_10  [key=2, style=dotted];
m12_159 -> m12_11  [key=2, style=dotted];
m12_159 -> m12_12  [key=2, style=dotted];
m12_159 -> m12_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_160 -> m12_161  [key=0, style=solid];
m12_160 -> m12_13  [key=2, style=dotted];
m12_161 -> m12_158  [color=blue, key=0, style=bold];
m12_289 -> m12_290  [key=0, style=solid];
m12_289 -> m12_291  [color=darkseagreen4, key=1, label="int?", style=dashed];
m12_290 -> m12_291  [key=0, style=solid];
m12_290 -> m12_10  [key=2, style=dotted];
m12_290 -> m12_11  [key=2, style=dotted];
m12_290 -> m12_12  [key=2, style=dotted];
m12_290 -> m12_293  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_291 -> m12_292  [key=0, style=solid];
m12_291 -> m12_13  [key=2, style=dotted];
m12_292 -> m12_289  [color=blue, key=0, style=bold];
m12_232 -> m12_233  [key=0, style=solid];
m12_233 -> m12_234  [key=0, style=solid];
m12_233 -> m12_237  [key=2, style=dotted];
m12_233 -> m12_235  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_234 -> m12_235  [key=0, style=solid];
m12_234 -> m12_10  [key=2, style=dotted];
m12_234 -> m12_11  [key=2, style=dotted];
m12_234 -> m12_12  [key=2, style=dotted];
m12_234 -> m12_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_235 -> m12_236  [key=0, style=solid];
m12_235 -> m12_13  [key=2, style=dotted];
m12_236 -> m12_232  [color=blue, key=0, style=bold];
m12_197 -> m12_198  [key=0, style=solid];
m12_198 -> m12_199  [key=0, style=solid];
m12_198 -> m12_202  [key=2, style=dotted];
m12_198 -> m12_200  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_199 -> m12_200  [key=0, style=solid];
m12_199 -> m12_10  [key=2, style=dotted];
m12_199 -> m12_11  [key=2, style=dotted];
m12_199 -> m12_12  [key=2, style=dotted];
m12_199 -> m12_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_200 -> m12_201  [key=0, style=solid];
m12_200 -> m12_13  [key=2, style=dotted];
m12_201 -> m12_197  [color=blue, key=0, style=bold];
m12_280 -> m12_281  [key=0, style=solid];
m12_281 -> m12_282  [key=0, style=solid];
m12_281 -> m12_78  [key=2, style=dotted];
m12_281 -> m12_283  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_282 -> m12_283  [key=0, style=solid];
m12_282 -> m12_10  [key=2, style=dotted];
m12_282 -> m12_11  [key=2, style=dotted];
m12_282 -> m12_12  [key=2, style=dotted];
m12_282 -> m12_285  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_283 -> m12_284  [key=0, style=solid];
m12_283 -> m12_13  [key=2, style=dotted];
m12_284 -> m12_280  [color=blue, key=0, style=bold];
m12_442 -> m12_443  [key=0, style=solid];
m12_442 -> m12_444  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeImmutableOptions", style=dashed];
m12_443 -> m12_444  [key=0, style=solid];
m12_443 -> m12_446  [key=2, style=dotted];
m12_443 -> m12_11  [key=2, style=dotted];
m12_443 -> m12_12  [key=2, style=dotted];
m12_444 -> m12_445  [key=0, style=solid];
m12_444 -> m12_13  [key=2, style=dotted];
m12_445 -> m12_442  [color=blue, key=0, style=bold];
m12_273 -> m12_274  [key=0, style=solid];
m12_273 -> m12_275  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_274 -> m12_275  [key=0, style=solid];
m12_274 -> m12_10  [key=2, style=dotted];
m12_274 -> m12_11  [key=2, style=dotted];
m12_274 -> m12_12  [key=2, style=dotted];
m12_274 -> m12_277  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_275 -> m12_276  [key=0, style=solid];
m12_275 -> m12_13  [key=2, style=dotted];
m12_276 -> m12_273  [color=blue, key=0, style=bold];
m12_113 -> m12_70  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_113 -> m12_74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m12_447 -> m12_448  [key=0, style=solid];
m12_448 -> m12_449  [key=0, style=solid];
m12_448 -> m12_452  [key=2, style=dotted];
m12_448 -> m12_453  [key=2, style=dotted];
m12_448 -> m12_454  [key=2, style=dotted];
m12_448 -> m12_450  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_449 -> m12_450  [key=0, style=solid];
m12_449 -> m12_10  [key=2, style=dotted];
m12_449 -> m12_11  [key=2, style=dotted];
m12_449 -> m12_12  [key=2, style=dotted];
m12_449 -> m12_455  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_450 -> m12_451  [key=0, style=solid];
m12_450 -> m12_13  [key=2, style=dotted];
m12_451 -> m12_447  [color=blue, key=0, style=bold];
m12_336 -> m12_337  [key=0, style=solid];
m12_337 -> m12_338  [key=0, style=solid];
m12_338 -> m12_339  [key=0, style=solid];
m12_338 -> m12_328  [key=2, style=dotted];
m12_339 -> m12_336  [color=blue, key=0, style=bold];
m12_187 -> m12_188  [key=0, style=solid];
m12_188 -> m12_189  [key=0, style=solid];
m12_188 -> m12_192  [key=2, style=dotted];
m12_188 -> m12_69  [key=2, style=dotted];
m12_188 -> m12_190  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m12_189 -> m12_190  [key=0, style=solid];
m12_189 -> m12_10  [key=2, style=dotted];
m12_189 -> m12_11  [key=2, style=dotted];
m12_189 -> m12_12  [key=2, style=dotted];
m12_189 -> m12_193  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_190 -> m12_191  [key=0, style=solid];
m12_190 -> m12_13  [key=2, style=dotted];
m12_191 -> m12_187  [color=blue, key=0, style=bold];
m12_458 -> m12_15  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m12_459 -> m12_180  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m12_459 -> m12_184  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m12_460 -> m12_372  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_461 -> m12_382  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_462 -> m12_404  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_463 -> m12_440  [color=darkseagreen4, key=1, label=int, style=dashed];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_0  [color=blue, key=0, style=bold];
m13_2 -> m13_3  [key=0, style=solid];
m13_3 -> m13_4  [key=0, style=solid];
m13_4 -> m13_2  [color=blue, key=0, style=bold];
m13_5 -> m13_3  [color=darkseagreen4, key=1, label="CommandLine.OptionListAttribute", style=dashed];
m15_0 -> m15_1  [key=0, style=solid];
m15_1 -> m15_2  [key=0, style=solid];
m15_1 -> m15_3  [key=2, style=dotted];
m15_2 -> m15_0  [color=blue, key=0, style=bold];
m16_0 -> m16_1  [key=0, style=solid];
m16_1 -> m16_2  [key=0, style=solid];
m16_1 -> m16_7  [key=2, style=dotted];
m16_1 -> m16_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m16_1 -> m16_4  [color=darkseagreen4, key=1, label=writer, style=dashed];
m16_2 -> m16_3  [key=0, style=solid];
m16_2 -> m16_8  [key=2, style=dotted];
m16_2 -> m16_13  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_4 -> m16_5  [key=0, style=solid];
m16_4 -> m16_10  [key=2, style=dotted];
m16_3 -> m16_4  [key=0, style=solid];
m16_3 -> m16_9  [key=2, style=dotted];
m16_5 -> m16_6  [key=0, style=solid];
m16_5 -> m16_11  [key=2, style=dotted];
m16_6 -> m16_0  [color=blue, key=0, style=bold];
m16_97 -> m16_98  [key=0, style=solid];
m16_97 -> m16_100  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m16_98 -> m16_99  [key=0, style=solid];
m16_98 -> m16_104  [key=2, style=dotted];
m16_98 -> m16_102  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m16_100 -> m16_101  [key=0, style=solid];
m16_100 -> m16_22  [key=2, style=dotted];
m16_100 -> m16_102  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_99 -> m16_100  [key=0, style=solid];
m16_99 -> m16_46  [key=2, style=dotted];
m16_102 -> m16_103  [key=0, style=solid];
m16_102 -> m16_47  [key=2, style=dotted];
m16_102 -> m16_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_101 -> m16_102  [key=0, style=solid];
m16_101 -> m16_60  [key=2, style=dotted];
m16_103 -> m16_97  [color=blue, key=0, style=bold];
m16_130 -> m16_131  [key=0, style=solid];
m16_131 -> m16_132  [key=0, style=solid];
m16_131 -> m16_137  [key=2, style=dotted];
m16_131 -> m16_135  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m16_131 -> m16_144  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m16_132 -> m16_133  [key=0, style=solid];
m16_132 -> m16_46  [key=2, style=dotted];
m16_135 -> m16_136  [key=0, style=solid];
m16_135 -> m16_23  [key=2, style=dotted];
m16_135 -> m16_139  [key=2, style=dotted];
m16_135 -> m16_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_133 -> m16_134  [key=0, style=solid];
m16_133 -> m16_9  [key=2, style=dotted];
m16_133 -> m16_135  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_134 -> m16_135  [key=0, style=solid];
m16_134 -> m16_23  [key=2, style=dotted];
m16_134 -> m16_138  [key=2, style=dotted];
m16_134 -> m16_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_136 -> m16_130  [color=blue, key=0, style=bold];
m16_191 -> m16_192  [key=0, style=solid];
m16_192 -> m16_193  [key=0, style=solid];
m16_192 -> m16_7  [key=2, style=dotted];
m16_192 -> m16_209  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_192 -> m16_195  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_193 -> m16_194  [key=0, style=solid];
m16_193 -> m16_8  [key=2, style=dotted];
m16_193 -> m16_209  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_195 -> m16_196  [key=0, style=solid];
m16_195 -> m16_10  [key=2, style=dotted];
m16_195 -> m16_197  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_194 -> m16_195  [key=0, style=solid];
m16_194 -> m16_35  [key=2, style=dotted];
m16_196 -> m16_197  [key=0, style=solid];
m16_196 -> m16_23  [key=2, style=dotted];
m16_196 -> m16_154  [key=2, style=dotted];
m16_197 -> m16_198  [key=0, style=solid];
m16_197 -> m16_182  [key=2, style=dotted];
m16_197 -> m16_183  [key=2, style=dotted];
m16_197 -> m16_199  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_197 -> m16_200  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_197 -> m16_201  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_197 -> m16_202  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_197 -> m16_203  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_197 -> m16_204  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_197 -> m16_205  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_197 -> m16_206  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_198 -> m16_199  [key=0, style=solid];
m16_198 -> m16_23  [key=2, style=dotted];
m16_198 -> m16_184  [key=2, style=dotted];
m16_199 -> m16_200  [key=0, style=solid];
m16_199 -> m16_47  [key=2, style=dotted];
m16_200 -> m16_201  [key=0, style=solid];
m16_200 -> m16_47  [key=2, style=dotted];
m16_201 -> m16_202  [key=0, style=solid];
m16_201 -> m16_47  [key=2, style=dotted];
m16_202 -> m16_203  [key=0, style=solid];
m16_202 -> m16_47  [key=2, style=dotted];
m16_203 -> m16_204  [key=0, style=solid];
m16_203 -> m16_47  [key=2, style=dotted];
m16_204 -> m16_205  [key=0, style=solid];
m16_204 -> m16_47  [key=2, style=dotted];
m16_205 -> m16_206  [key=0, style=solid];
m16_205 -> m16_47  [key=2, style=dotted];
m16_206 -> m16_207  [key=0, style=solid];
m16_206 -> m16_47  [key=2, style=dotted];
m16_207 -> m16_191  [color=blue, key=0, style=bold];
m16_274 -> m16_275  [key=0, style=solid];
m16_275 -> m16_276  [key=0, style=solid];
m16_275 -> m16_7  [key=2, style=dotted];
m16_275 -> m16_297  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_275 -> m16_278  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_276 -> m16_277  [key=0, style=solid];
m16_276 -> m16_8  [key=2, style=dotted];
m16_276 -> m16_297  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_278 -> m16_279  [key=0, style=solid];
m16_278 -> m16_10  [key=2, style=dotted];
m16_277 -> m16_278  [key=0, style=solid];
m16_277 -> m16_35  [key=2, style=dotted];
m16_279 -> m16_280  [key=0, style=solid];
m16_279 -> m16_182  [key=2, style=dotted];
m16_279 -> m16_183  [key=2, style=dotted];
m16_279 -> m16_281  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_282  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_283  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_284  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_285  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_286  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_287  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_288  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_289  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_290  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_291  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_292  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_293  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_279 -> m16_294  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_280 -> m16_281  [key=0, style=solid];
m16_280 -> m16_23  [key=2, style=dotted];
m16_280 -> m16_184  [key=2, style=dotted];
m16_281 -> m16_282  [key=0, style=solid];
m16_281 -> m16_47  [key=2, style=dotted];
m16_282 -> m16_283  [key=0, style=solid];
m16_282 -> m16_47  [key=2, style=dotted];
m16_283 -> m16_284  [key=0, style=solid];
m16_283 -> m16_47  [key=2, style=dotted];
m16_284 -> m16_285  [key=0, style=solid];
m16_284 -> m16_47  [key=2, style=dotted];
m16_285 -> m16_286  [key=0, style=solid];
m16_285 -> m16_47  [key=2, style=dotted];
m16_286 -> m16_287  [key=0, style=solid];
m16_286 -> m16_47  [key=2, style=dotted];
m16_287 -> m16_288  [key=0, style=solid];
m16_287 -> m16_47  [key=2, style=dotted];
m16_288 -> m16_289  [key=0, style=solid];
m16_288 -> m16_47  [key=2, style=dotted];
m16_289 -> m16_290  [key=0, style=solid];
m16_289 -> m16_47  [key=2, style=dotted];
m16_290 -> m16_291  [key=0, style=solid];
m16_290 -> m16_47  [key=2, style=dotted];
m16_291 -> m16_292  [key=0, style=solid];
m16_291 -> m16_47  [key=2, style=dotted];
m16_292 -> m16_293  [key=0, style=solid];
m16_292 -> m16_47  [key=2, style=dotted];
m16_293 -> m16_294  [key=0, style=solid];
m16_293 -> m16_47  [key=2, style=dotted];
m16_294 -> m16_295  [key=0, style=solid];
m16_294 -> m16_47  [key=2, style=dotted];
m16_295 -> m16_274  [color=blue, key=0, style=bold];
m16_147 -> m16_148  [key=0, style=solid];
m16_148 -> m16_149  [key=0, style=solid];
m16_148 -> m16_7  [key=2, style=dotted];
m16_148 -> m16_156  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_148 -> m16_151  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_149 -> m16_150  [key=0, style=solid];
m16_149 -> m16_8  [key=2, style=dotted];
m16_149 -> m16_156  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_151 -> m16_152  [key=0, style=solid];
m16_151 -> m16_10  [key=2, style=dotted];
m16_150 -> m16_151  [key=0, style=solid];
m16_150 -> m16_9  [key=2, style=dotted];
m16_152 -> m16_153  [key=0, style=solid];
m16_152 -> m16_23  [key=2, style=dotted];
m16_152 -> m16_154  [key=2, style=dotted];
m16_153 -> m16_147  [color=blue, key=0, style=bold];
m16_61 -> m16_62  [key=0, style=solid];
m16_62 -> m16_63  [key=0, style=solid];
m16_62 -> m16_67  [key=2, style=dotted];
m16_62 -> m16_65  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m16_63 -> m16_64  [key=0, style=solid];
m16_63 -> m16_8  [key=2, style=dotted];
m16_63 -> m16_69  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_65 -> m16_66  [key=0, style=solid];
m16_65 -> m16_47  [key=2, style=dotted];
m16_64 -> m16_65  [key=0, style=solid];
m16_64 -> m16_9  [key=2, style=dotted];
m16_66 -> m16_61  [color=blue, key=0, style=bold];
m16_264 -> m16_265  [key=0, style=solid];
m16_265 -> m16_266  [key=0, style=solid];
m16_265 -> m16_7  [key=2, style=dotted];
m16_265 -> m16_272  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_265 -> m16_268  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_266 -> m16_267  [key=0, style=solid];
m16_266 -> m16_8  [key=2, style=dotted];
m16_266 -> m16_272  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_268 -> m16_269  [key=0, style=solid];
m16_268 -> m16_10  [key=2, style=dotted];
m16_267 -> m16_268  [key=0, style=solid];
m16_267 -> m16_35  [key=2, style=dotted];
m16_269 -> m16_270  [key=0, style=solid];
m16_269 -> m16_23  [key=2, style=dotted];
m16_269 -> m16_154  [key=2, style=dotted];
m16_270 -> m16_264  [color=blue, key=0, style=bold];
m16_108 -> m16_109  [key=0, style=solid];
m16_109 -> m16_110  [key=0, style=solid];
m16_110 -> m16_111  [key=0, style=solid];
m16_110 -> m16_22  [key=2, style=dotted];
m16_111 -> m16_112  [key=0, style=solid];
m16_111 -> m16_60  [key=2, style=dotted];
m16_112 -> m16_108  [color=blue, key=0, style=bold];
m16_113 -> m16_114  [key=0, style=solid];
m16_114 -> m16_115  [key=0, style=solid];
m16_114 -> m16_93  [key=2, style=dotted];
m16_114 -> m16_118  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m16_115 -> m16_116  [key=0, style=solid];
m16_115 -> m16_46  [key=2, style=dotted];
m16_118 -> m16_119  [key=0, style=solid];
m16_118 -> m16_47  [key=2, style=dotted];
m16_118 -> m16_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_116 -> m16_117  [key=0, style=solid];
m16_116 -> m16_35  [key=2, style=dotted];
m16_116 -> m16_118  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_117 -> m16_118  [key=0, style=solid];
m16_117 -> m16_60  [key=2, style=dotted];
m16_119 -> m16_113  [color=blue, key=0, style=bold];
m16_71 -> m16_72  [key=0, style=solid];
m16_72 -> m16_73  [key=0, style=solid];
m16_72 -> m16_78  [key=2, style=dotted];
m16_72 -> m16_76  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m16_73 -> m16_74  [key=0, style=solid];
m16_73 -> m16_8  [key=2, style=dotted];
m16_73 -> m16_80  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_76 -> m16_77  [key=0, style=solid];
m16_76 -> m16_47  [key=2, style=dotted];
m16_76 -> m16_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_74 -> m16_75  [key=0, style=solid];
m16_74 -> m16_22  [key=2, style=dotted];
m16_74 -> m16_76  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_75 -> m16_76  [key=0, style=solid];
m16_75 -> m16_60  [key=2, style=dotted];
m16_77 -> m16_71  [color=blue, key=0, style=bold];
m16_55 -> m16_56  [key=0, style=solid];
m16_56 -> m16_57  [key=0, style=solid];
m16_57 -> m16_58  [key=0, style=solid];
m16_57 -> m16_9  [key=2, style=dotted];
m16_58 -> m16_59  [key=0, style=solid];
m16_58 -> m16_60  [key=2, style=dotted];
m16_59 -> m16_55  [color=blue, key=0, style=bold];
m16_158 -> m16_159  [key=0, style=solid];
m16_159 -> m16_160  [key=0, style=solid];
m16_159 -> m16_165  [key=2, style=dotted];
m16_159 -> m16_163  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m16_159 -> m16_170  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m16_160 -> m16_161  [key=0, style=solid];
m16_160 -> m16_46  [key=2, style=dotted];
m16_163 -> m16_164  [key=0, style=solid];
m16_163 -> m16_23  [key=2, style=dotted];
m16_163 -> m16_139  [key=2, style=dotted];
m16_163 -> m16_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_161 -> m16_162  [key=0, style=solid];
m16_161 -> m16_9  [key=2, style=dotted];
m16_161 -> m16_163  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_162 -> m16_163  [key=0, style=solid];
m16_162 -> m16_23  [key=2, style=dotted];
m16_162 -> m16_138  [key=2, style=dotted];
m16_162 -> m16_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_164 -> m16_158  [color=blue, key=0, style=bold];
m16_48 -> m16_49  [key=0, style=solid];
m16_48 -> m16_51  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m16_49 -> m16_50  [key=0, style=solid];
m16_49 -> m16_54  [key=2, style=dotted];
m16_49 -> m16_52  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m16_51 -> m16_52  [key=0, style=solid];
m16_51 -> m16_9  [key=2, style=dotted];
m16_50 -> m16_51  [key=0, style=solid];
m16_50 -> m16_46  [key=2, style=dotted];
m16_52 -> m16_53  [key=0, style=solid];
m16_52 -> m16_47  [key=2, style=dotted];
m16_53 -> m16_48  [color=blue, key=0, style=bold];
m16_211 -> m16_212  [key=0, style=solid];
m16_212 -> m16_213  [key=0, style=solid];
m16_212 -> m16_7  [key=2, style=dotted];
m16_212 -> m16_226  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_212 -> m16_215  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_213 -> m16_214  [key=0, style=solid];
m16_213 -> m16_8  [key=2, style=dotted];
m16_213 -> m16_226  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_215 -> m16_216  [key=0, style=solid];
m16_215 -> m16_10  [key=2, style=dotted];
m16_214 -> m16_215  [key=0, style=solid];
m16_214 -> m16_35  [key=2, style=dotted];
m16_216 -> m16_217  [key=0, style=solid];
m16_216 -> m16_182  [key=2, style=dotted];
m16_216 -> m16_183  [key=2, style=dotted];
m16_216 -> m16_218  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_216 -> m16_219  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_216 -> m16_220  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_216 -> m16_221  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_216 -> m16_222  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_216 -> m16_223  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_217 -> m16_218  [key=0, style=solid];
m16_217 -> m16_23  [key=2, style=dotted];
m16_217 -> m16_184  [key=2, style=dotted];
m16_218 -> m16_219  [key=0, style=solid];
m16_218 -> m16_47  [key=2, style=dotted];
m16_219 -> m16_220  [key=0, style=solid];
m16_219 -> m16_47  [key=2, style=dotted];
m16_220 -> m16_221  [key=0, style=solid];
m16_220 -> m16_47  [key=2, style=dotted];
m16_221 -> m16_222  [key=0, style=solid];
m16_221 -> m16_47  [key=2, style=dotted];
m16_222 -> m16_223  [key=0, style=solid];
m16_222 -> m16_47  [key=2, style=dotted];
m16_223 -> m16_224  [key=0, style=solid];
m16_223 -> m16_47  [key=2, style=dotted];
m16_224 -> m16_211  [color=blue, key=0, style=bold];
m16_318 -> m16_319  [key=0, style=solid];
m16_13 -> m16_14  [key=0, style=solid];
m16_12 -> m16_13  [key=0, style=solid];
m16_14 -> m16_12  [color=blue, key=0, style=bold];
m16_26 -> m16_27  [key=0, style=solid];
m16_25 -> m16_26  [key=0, style=solid];
m16_27 -> m16_25  [color=blue, key=0, style=bold];
m16_37 -> m16_38  [key=0, style=solid];
m16_36 -> m16_37  [key=0, style=solid];
m16_38 -> m16_36  [color=blue, key=0, style=bold];
m16_69 -> m16_70  [key=0, style=solid];
m16_68 -> m16_69  [key=0, style=solid];
m16_70 -> m16_68  [color=blue, key=0, style=bold];
m16_80 -> m16_81  [key=0, style=solid];
m16_82 -> m16_83  [key=0, style=solid];
m16_79 -> m16_80  [key=0, style=solid];
m16_81 -> m16_79  [color=blue, key=0, style=bold];
m16_83 -> m16_84  [key=0, style=solid];
m16_83 -> m16_85  [key=2, style=dotted];
m16_84 -> m16_82  [color=blue, key=0, style=bold];
m16_94 -> m16_95  [key=0, style=solid];
m16_95 -> m16_96  [key=0, style=solid];
m16_95 -> m16_85  [key=2, style=dotted];
m16_96 -> m16_94  [color=blue, key=0, style=bold];
m16_105 -> m16_106  [key=0, style=solid];
m16_106 -> m16_107  [key=0, style=solid];
m16_106 -> m16_85  [key=2, style=dotted];
m16_107 -> m16_105  [color=blue, key=0, style=bold];
m16_120 -> m16_121  [key=0, style=solid];
m16_121 -> m16_122  [key=0, style=solid];
m16_121 -> m16_85  [key=2, style=dotted];
m16_122 -> m16_120  [color=blue, key=0, style=bold];
m16_144 -> m16_145  [key=0, style=solid];
m16_144 -> m16_146  [key=2, style=dotted];
m16_140 -> m16_141  [key=0, style=solid];
m16_143 -> m16_144  [key=0, style=solid];
m16_141 -> m16_142  [key=0, style=solid];
m16_142 -> m16_140  [color=blue, key=0, style=bold];
m16_145 -> m16_143  [color=blue, key=0, style=bold];
m16_156 -> m16_157  [key=0, style=solid];
m16_155 -> m16_156  [key=0, style=solid];
m16_157 -> m16_155  [color=blue, key=0, style=bold];
m16_170 -> m16_171  [key=0, style=solid];
m16_170 -> m16_146  [key=2, style=dotted];
m16_166 -> m16_167  [key=0, style=solid];
m16_169 -> m16_170  [key=0, style=solid];
m16_167 -> m16_168  [key=0, style=solid];
m16_168 -> m16_166  [color=blue, key=0, style=bold];
m16_171 -> m16_169  [color=blue, key=0, style=bold];
m16_186 -> m16_187  [key=0, style=solid];
m16_188 -> m16_189  [key=0, style=solid];
m16_185 -> m16_186  [key=0, style=solid];
m16_187 -> m16_185  [color=blue, key=0, style=bold];
m16_189 -> m16_190  [key=0, style=solid];
m16_190 -> m16_188  [color=blue, key=0, style=bold];
m16_209 -> m16_210  [key=0, style=solid];
m16_208 -> m16_209  [key=0, style=solid];
m16_210 -> m16_208  [color=blue, key=0, style=bold];
m16_226 -> m16_227  [key=0, style=solid];
m16_225 -> m16_226  [key=0, style=solid];
m16_227 -> m16_225  [color=blue, key=0, style=bold];
m16_239 -> m16_240  [key=0, style=solid];
m16_241 -> m16_242  [key=0, style=solid];
m16_238 -> m16_239  [key=0, style=solid];
m16_240 -> m16_238  [color=blue, key=0, style=bold];
m16_242 -> m16_243  [key=0, style=solid];
m16_243 -> m16_241  [color=blue, key=0, style=bold];
m16_262 -> m16_263  [key=0, style=solid];
m16_261 -> m16_262  [key=0, style=solid];
m16_263 -> m16_261  [color=blue, key=0, style=bold];
m16_272 -> m16_273  [key=0, style=solid];
m16_271 -> m16_272  [key=0, style=solid];
m16_273 -> m16_271  [color=blue, key=0, style=bold];
m16_297 -> m16_298  [key=0, style=solid];
m16_296 -> m16_297  [key=0, style=solid];
m16_298 -> m16_296  [color=blue, key=0, style=bold];
m16_310 -> m16_311  [key=0, style=solid];
m16_310 -> m16_47  [key=2, style=dotted];
m16_307 -> m16_308  [key=0, style=solid];
m16_309 -> m16_310  [key=0, style=solid];
m16_306 -> m16_307  [key=0, style=solid];
m16_308 -> m16_306  [color=blue, key=0, style=bold];
m16_311 -> m16_309  [color=blue, key=0, style=bold];
m16_322 -> m16_323  [key=0, style=solid];
m16_322 -> m16_47  [key=2, style=dotted];
m16_319 -> m16_320  [key=0, style=solid];
m16_321 -> m16_322  [key=0, style=solid];
m16_320 -> m16_318  [color=blue, key=0, style=bold];
m16_323 -> m16_321  [color=blue, key=0, style=bold];
m16_244 -> m16_245  [key=0, style=solid];
m16_245 -> m16_246  [key=0, style=solid];
m16_245 -> m16_7  [key=2, style=dotted];
m16_245 -> m16_262  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_245 -> m16_248  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_246 -> m16_247  [key=0, style=solid];
m16_246 -> m16_8  [key=2, style=dotted];
m16_246 -> m16_262  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_248 -> m16_249  [key=0, style=solid];
m16_248 -> m16_10  [key=2, style=dotted];
m16_247 -> m16_248  [key=0, style=solid];
m16_247 -> m16_9  [key=2, style=dotted];
m16_249 -> m16_250  [key=0, style=solid];
m16_249 -> m16_182  [key=2, style=dotted];
m16_249 -> m16_183  [key=2, style=dotted];
m16_249 -> m16_251  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_249 -> m16_252  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_249 -> m16_253  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_249 -> m16_254  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_249 -> m16_255  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_249 -> m16_256  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_249 -> m16_257  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_249 -> m16_258  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_249 -> m16_259  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_250 -> m16_251  [key=0, style=solid];
m16_250 -> m16_23  [key=2, style=dotted];
m16_250 -> m16_184  [key=2, style=dotted];
m16_251 -> m16_252  [key=0, style=solid];
m16_251 -> m16_47  [key=2, style=dotted];
m16_252 -> m16_253  [key=0, style=solid];
m16_252 -> m16_47  [key=2, style=dotted];
m16_253 -> m16_254  [key=0, style=solid];
m16_253 -> m16_47  [key=2, style=dotted];
m16_254 -> m16_255  [key=0, style=solid];
m16_254 -> m16_47  [key=2, style=dotted];
m16_255 -> m16_256  [key=0, style=solid];
m16_255 -> m16_47  [key=2, style=dotted];
m16_256 -> m16_257  [key=0, style=solid];
m16_256 -> m16_47  [key=2, style=dotted];
m16_257 -> m16_258  [key=0, style=solid];
m16_257 -> m16_47  [key=2, style=dotted];
m16_258 -> m16_259  [key=0, style=solid];
m16_258 -> m16_47  [key=2, style=dotted];
m16_259 -> m16_260  [key=0, style=solid];
m16_259 -> m16_47  [key=2, style=dotted];
m16_260 -> m16_244  [color=blue, key=0, style=bold];
m16_28 -> m16_29  [key=0, style=solid];
m16_29 -> m16_30  [key=0, style=solid];
m16_29 -> m16_7  [key=2, style=dotted];
m16_29 -> m16_37  [color=darkseagreen4, key=1, label=writer, style=dashed];
m16_29 -> m16_32  [color=darkseagreen4, key=1, label=writer, style=dashed];
m16_30 -> m16_31  [key=0, style=solid];
m16_30 -> m16_8  [key=2, style=dotted];
m16_30 -> m16_37  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_32 -> m16_33  [key=0, style=solid];
m16_32 -> m16_10  [key=2, style=dotted];
m16_31 -> m16_32  [key=0, style=solid];
m16_31 -> m16_35  [key=2, style=dotted];
m16_33 -> m16_34  [key=0, style=solid];
m16_33 -> m16_23  [key=2, style=dotted];
m16_33 -> m16_24  [key=2, style=dotted];
m16_34 -> m16_28  [color=blue, key=0, style=bold];
m16_299 -> m16_300  [key=0, style=solid];
m16_299 -> m16_301  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m16_299 -> m16_303  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptions", style=dashed];
m16_299 -> m16_310  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptions", style=dashed];
m16_300 -> m16_301  [key=0, style=solid];
m16_300 -> m16_8  [key=2, style=dotted];
m16_300 -> m16_307  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_301 -> m16_302  [key=0, style=solid];
m16_301 -> m16_9  [key=2, style=dotted];
m16_301 -> m16_303  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_303 -> m16_304  [key=0, style=solid];
m16_303 -> m16_305  [key=2, style=dotted];
m16_303 -> m16_309  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_302 -> m16_303  [key=0, style=solid];
m16_302 -> m16_47  [key=2, style=dotted];
m16_304 -> m16_299  [color=blue, key=0, style=bold];
m16_39 -> m16_40  [color=red, key=0, style=solid];
m16_40 -> m16_41  [color=red, key=0, style=solid];
m16_40 -> m16_45  [color=red, key=2, style=dotted];
m16_40 -> m16_43  [color=red, key=1, label=expectedOptions, style=dashed];
m16_41 -> m16_42  [color=red, key=0, style=solid];
m16_41 -> m16_46  [color=red, key=2, style=dotted];
m16_43 -> m16_44  [color=red, key=0, style=solid];
m16_43 -> m16_47  [color=red, key=2, style=dotted];
m16_42 -> m16_43  [color=red, key=0, style=solid];
m16_42 -> m16_9  [color=red, key=2, style=dotted];
m16_44 -> m16_39  [color=blue, key=0, style=bold];
m16_172 -> m16_173  [key=0, style=solid];
m16_173 -> m16_174  [key=0, style=solid];
m16_173 -> m16_7  [key=2, style=dotted];
m16_173 -> m16_186  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_173 -> m16_176  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_174 -> m16_175  [key=0, style=solid];
m16_174 -> m16_8  [key=2, style=dotted];
m16_174 -> m16_186  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_176 -> m16_177  [key=0, style=solid];
m16_176 -> m16_10  [key=2, style=dotted];
m16_176 -> m16_178  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_175 -> m16_176  [key=0, style=solid];
m16_175 -> m16_9  [key=2, style=dotted];
m16_177 -> m16_178  [key=0, style=solid];
m16_177 -> m16_23  [key=2, style=dotted];
m16_177 -> m16_154  [key=2, style=dotted];
m16_178 -> m16_179  [key=0, style=solid];
m16_178 -> m16_182  [key=2, style=dotted];
m16_178 -> m16_183  [key=2, style=dotted];
m16_178 -> m16_180  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_179 -> m16_180  [key=0, style=solid];
m16_179 -> m16_23  [key=2, style=dotted];
m16_179 -> m16_138  [key=2, style=dotted];
m16_179 -> m16_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_180 -> m16_181  [key=0, style=solid];
m16_180 -> m16_23  [key=2, style=dotted];
m16_180 -> m16_184  [key=2, style=dotted];
m16_181 -> m16_172  [color=blue, key=0, style=bold];
m16_123 -> m16_124  [key=0, style=solid];
m16_124 -> m16_125  [key=0, style=solid];
m16_124 -> m16_129  [key=2, style=dotted];
m16_124 -> m16_127  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m16_125 -> m16_126  [key=0, style=solid];
m16_125 -> m16_46  [key=2, style=dotted];
m16_127 -> m16_128  [key=0, style=solid];
m16_127 -> m16_47  [key=2, style=dotted];
m16_126 -> m16_127  [key=0, style=solid];
m16_126 -> m16_9  [key=2, style=dotted];
m16_128 -> m16_123  [color=blue, key=0, style=bold];
m16_15 -> m16_16  [key=0, style=solid];
m16_16 -> m16_17  [key=0, style=solid];
m16_16 -> m16_7  [key=2, style=dotted];
m16_16 -> m16_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m16_16 -> m16_19  [color=darkseagreen4, key=1, label=writer, style=dashed];
m16_17 -> m16_18  [key=0, style=solid];
m16_17 -> m16_8  [key=2, style=dotted];
m16_17 -> m16_26  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_19 -> m16_20  [key=0, style=solid];
m16_19 -> m16_10  [key=2, style=dotted];
m16_18 -> m16_19  [key=0, style=solid];
m16_18 -> m16_22  [key=2, style=dotted];
m16_20 -> m16_21  [key=0, style=solid];
m16_20 -> m16_23  [key=2, style=dotted];
m16_20 -> m16_24  [key=2, style=dotted];
m16_21 -> m16_15  [color=blue, key=0, style=bold];
m16_86 -> m16_87  [key=0, style=solid];
m16_87 -> m16_88  [key=0, style=solid];
m16_87 -> m16_93  [key=2, style=dotted];
m16_87 -> m16_91  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m16_88 -> m16_89  [key=0, style=solid];
m16_88 -> m16_46  [key=2, style=dotted];
m16_91 -> m16_92  [key=0, style=solid];
m16_91 -> m16_47  [key=2, style=dotted];
m16_91 -> m16_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_89 -> m16_90  [key=0, style=solid];
m16_89 -> m16_22  [key=2, style=dotted];
m16_89 -> m16_91  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_90 -> m16_91  [key=0, style=solid];
m16_90 -> m16_60  [key=2, style=dotted];
m16_92 -> m16_86  [color=blue, key=0, style=bold];
m16_228 -> m16_229  [key=0, style=solid];
m16_228 -> m16_231  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_229 -> m16_230  [key=0, style=solid];
m16_229 -> m16_7  [key=2, style=dotted];
m16_229 -> m16_239  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_229 -> m16_232  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_231 -> m16_232  [key=0, style=solid];
m16_231 -> m16_35  [key=2, style=dotted];
m16_230 -> m16_231  [key=0, style=solid];
m16_230 -> m16_8  [key=2, style=dotted];
m16_230 -> m16_239  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_232 -> m16_233  [key=0, style=solid];
m16_232 -> m16_10  [key=2, style=dotted];
m16_232 -> m16_234  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_233 -> m16_234  [key=0, style=solid];
m16_233 -> m16_23  [key=2, style=dotted];
m16_233 -> m16_154  [key=2, style=dotted];
m16_234 -> m16_235  [key=0, style=solid];
m16_234 -> m16_182  [key=2, style=dotted];
m16_234 -> m16_183  [key=2, style=dotted];
m16_234 -> m16_236  [color=darkseagreen4, key=1, label=lines, style=dashed];
m16_235 -> m16_236  [key=0, style=solid];
m16_235 -> m16_23  [key=2, style=dotted];
m16_235 -> m16_138  [key=2, style=dotted];
m16_235 -> m16_241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_236 -> m16_237  [key=0, style=solid];
m16_236 -> m16_23  [key=2, style=dotted];
m16_236 -> m16_184  [key=2, style=dotted];
m16_237 -> m16_228  [color=blue, key=0, style=bold];
m16_312 -> m16_313  [key=0, style=solid];
m16_312 -> m16_314  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m16_312 -> m16_316  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.CommitOptions", style=dashed];
m16_312 -> m16_322  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.CommitOptions", style=dashed];
m16_313 -> m16_314  [key=0, style=solid];
m16_313 -> m16_8  [key=2, style=dotted];
m16_313 -> m16_319  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m16_314 -> m16_315  [key=0, style=solid];
m16_314 -> m16_35  [key=2, style=dotted];
m16_314 -> m16_316  [color=darkseagreen4, key=1, label=result, style=dashed];
m16_316 -> m16_317  [key=0, style=solid];
m16_316 -> m16_305  [key=2, style=dotted];
m16_316 -> m16_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_315 -> m16_316  [key=0, style=solid];
m16_315 -> m16_47  [key=2, style=dotted];
m16_317 -> m16_312  [color=blue, key=0, style=bold];
m16_324 -> m16_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m16_325 -> m16_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m16_326 -> m16_37  [color=darkseagreen4, key=1, label=writer, style=dashed];
m16_327 -> m16_144  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m16_328 -> m16_156  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_329 -> m16_170  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m16_330 -> m16_186  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_331 -> m16_209  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_332 -> m16_226  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_333 -> m16_239  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_334 -> m16_262  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_335 -> m16_272  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_336 -> m16_297  [color=darkseagreen4, key=1, label=help, style=dashed];
m16_337 -> m16_310  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptions", style=dashed];
m16_338 -> m16_322  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.CommitOptions", style=dashed];
m17_8 -> m17_9  [key=0, style=solid];
m17_8 -> m17_16  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_9 -> m17_10  [key=0, style=solid];
m17_9 -> m17_11  [key=2, style=dotted];
m17_9 -> m17_12  [key=2, style=dotted];
m17_9 -> m17_13  [key=2, style=dotted];
m17_9 -> m17_14  [key=2, style=dotted];
m17_9 -> m17_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_9 -> m17_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_10 -> m17_8  [color=blue, key=0, style=bold];
m17_0 -> m17_1  [key=0, style=solid];
m17_0 -> m17_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_1 -> m17_2  [key=0, style=solid];
m17_1 -> m17_3  [key=2, style=dotted];
m17_1 -> m17_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_2 -> m17_0  [color=blue, key=0, style=bold];
m17_18 -> m17_19  [key=0, style=solid];
m17_5 -> m17_6  [key=0, style=solid];
m17_5 -> m17_7  [key=2, style=dotted];
m17_4 -> m17_5  [key=0, style=solid];
m17_6 -> m17_4  [color=blue, key=0, style=bold];
m17_16 -> m17_17  [key=0, style=solid];
m17_16 -> m17_7  [key=2, style=dotted];
m17_15 -> m17_16  [key=0, style=solid];
m17_17 -> m17_15  [color=blue, key=0, style=bold];
m17_19 -> m17_20  [key=0, style=solid];
m17_19 -> m17_21  [key=2, style=dotted];
m17_20 -> m17_18  [color=blue, key=0, style=bold];
m17_22 -> m17_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_23 -> m17_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m17_24 -> m17_16  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_25 -> m17_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m18_0 -> m18_1  [key=0, style=solid];
m18_1 -> m18_2  [color=red, key=0, style=solid];
m18_1 -> m18_6  [key=2, style=dotted];
m18_1 -> m18_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m18_2 -> m18_3  [color=red, key=0, style=solid];
m18_2 -> m18_7  [color=red, key=2, style=dotted];
m18_2 -> m18_8  [color=red, key=2, style=dotted];
m18_4 -> m18_5  [key=0, style=solid];
m18_4 -> m18_10  [key=2, style=dotted];
m18_3 -> m18_4  [color=red, key=0, style=solid];
m18_3 -> m18_9  [color=red, key=2, style=dotted];
m18_5 -> m18_0  [color=blue, key=0, style=bold];
m20_0 -> m20_1  [color=green, key=0, style=solid];
m20_0 -> m20_8  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m20_0 -> m20_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m20_0 -> m20_20  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", style=dashed];
m20_1 -> m20_2  [color=green, key=0, style=solid];
m20_1 -> m20_4  [color=green, key=2, style=dotted];
m20_1 -> m20_7  [color=green, key=1, label="lambda expression", style=dashed];
m20_2 -> m20_3  [key=0, style=solid];
m20_2 -> m20_4  [key=2, style=dotted];
m20_2 -> m20_5  [key=2, style=dotted];
m20_2 -> m20_6  [key=2, style=dotted];
m20_2 -> m20_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_2 -> m20_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_2 -> m20_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_3 -> m20_0  [color=blue, key=0, style=bold];
m20_28 -> m20_29  [key=0, style=solid];
m20_8 -> m20_9  [color=green, key=0, style=solid];
m20_8 -> m20_10  [color=green, key=2, style=dotted];
m20_8 -> m20_11  [color=green, key=2, style=dotted];
m20_8 -> m20_12  [color=green, key=2, style=dotted];
m20_8 -> m20_13  [color=green, key=2, style=dotted];
m20_8 -> m20_14  [color=green, key=2, style=dotted];
m20_8 -> m20_15  [color=green, key=1, label="lambda expression", style=dashed];
m20_8 -> m20_19  [color=green, key=1, label="lambda expression", style=dashed];
m20_16 -> m20_17  [key=0, style=solid];
m20_16 -> m20_18  [key=2, style=dotted];
m20_16 -> m20_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m20_20 -> m20_21  [color=green, key=0, style=solid];
m20_20 -> m20_22  [color=green, key=2, style=dotted];
m20_20 -> m20_23  [color=green, key=2, style=dotted];
m20_20 -> m20_24  [color=green, key=2, style=dotted];
m20_20 -> m20_25  [color=green, key=2, style=dotted];
m20_20 -> m20_26  [color=green, key=2, style=dotted];
m20_20 -> m20_13  [color=green, key=2, style=dotted];
m20_20 -> m20_27  [color=green, key=2, style=dotted];
m20_20 -> m20_28  [color=green, key=1, label="lambda expression", style=dashed];
m20_7 -> m20_8  [color=green, key=0, style=solid];
m20_7 -> m20_16  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m20_7 -> m20_20  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m20_7 -> m20_29  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m20_32 -> m20_33  [key=0, style=solid];
m20_35 -> m20_36  [key=0, style=solid];
m20_38 -> m20_39  [key=0, style=solid];
m20_29 -> m20_30  [key=0, style=solid];
m20_29 -> m20_26  [key=2, style=dotted];
m20_29 -> m20_31  [key=2, style=dotted];
m20_29 -> m20_12  [key=2, style=dotted];
m20_29 -> m20_13  [key=2, style=dotted];
m20_9 -> m20_7  [color=blue, key=0, style=bold];
m20_15 -> m20_16  [key=0, style=solid];
m20_19 -> m20_20  [color=green, key=0, style=solid];
m20_17 -> m20_15  [color=blue, key=0, style=bold];
m20_21 -> m20_19  [color=blue, key=0, style=bold];
m20_30 -> m20_28  [color=blue, key=0, style=bold];
m20_33 -> m20_34  [key=0, style=solid];
m20_34 -> m20_32  [color=blue, key=0, style=bold];
m20_36 -> m20_37  [key=0, style=solid];
m20_37 -> m20_35  [color=blue, key=0, style=bold];
m20_39 -> m20_40  [key=0, style=solid];
m20_40 -> m20_38  [color=blue, key=0, style=bold];
m20_41 -> m20_8  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m20_42 -> m20_8  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", style=dashed];
m20_42 -> m20_20  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>", style=dashed];
m20_43 -> m20_8  [color=green, key=1, label="System.StringComparer", style=dashed];
m20_43 -> m20_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m20_44 -> m20_16  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m20_44 -> m20_20  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m20_44 -> m20_29  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m21_0 -> m21_1  [key=0, style=solid];
m21_2 -> m21_3  [color=green, key=0, style=solid];
m21_2 -> m21_7  [color=green, key=2, style=dotted];
m21_2 -> m21_8  [color=green, key=2, style=dotted];
m21_2 -> m21_9  [color=green, key=2, style=dotted];
m21_2 -> m21_10  [color=green, key=2, style=dotted];
m21_2 -> m21_11  [color=green, key=2, style=dotted];
m21_2 -> m21_12  [color=green, key=2, style=dotted];
m21_2 -> m21_16  [color=green, key=1, label="lambda expression", style=dashed];
m21_1 -> m21_2  [color=green, key=0, style=solid];
m21_1 -> m21_6  [key=2, style=dotted];
m21_1 -> m21_3  [color=darkseagreen4, key=1, label=tokenPartitions, style=dashed];
m21_3 -> m21_4  [key=0, style=solid];
m21_3 -> m21_13  [key=2, style=dotted];
m21_3 -> m21_14  [key=2, style=dotted];
m21_3 -> m21_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_3 -> m21_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_4 -> m21_11  [key=2, style=dotted];
m21_4 -> m21_5  [key=0, style=solid];
m21_4 -> m21_15  [key=2, style=dotted];
m21_4 -> m21_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_5 -> m21_0  [color=blue, key=0, style=bold];
m21_28 -> m21_29  [key=0, style=solid];
m21_16 -> m21_17  [key=0, style=solid];
m21_20 -> m21_21  [key=0, style=solid];
m21_24 -> m21_25  [key=0, style=solid];
m21_18 -> m21_16  [color=blue, key=0, style=bold];
m21_17 -> m21_18  [key=0, style=solid];
m21_17 -> m21_19  [key=2, style=dotted];
m21_22 -> m21_20  [color=blue, key=0, style=bold];
m21_21 -> m21_22  [key=0, style=solid];
m21_21 -> m21_23  [key=2, style=dotted];
m21_26 -> m21_24  [color=blue, key=0, style=bold];
m21_25 -> m21_26  [key=0, style=solid];
m21_25 -> m21_27  [key=2, style=dotted];
m21_29 -> m21_30  [key=0, style=solid];
m21_29 -> m21_23  [key=2, style=dotted];
m21_29 -> m21_31  [key=2, style=dotted];
m21_30 -> m21_28  [color=blue, key=0, style=bold];
m22_9 -> m22_10  [color=green, key=0, style=solid];
m22_10 -> m22_11  [color=green, key=0, style=solid];
m22_10 -> m22_0  [color=green, key=2, style=dotted];
m22_10 -> m22_12  [color=green, key=2, style=dotted];
m22_11 -> m22_9  [color=blue, key=0, style=bold];
m22_0 -> m22_1  [color=green, key=0, style=solid];
m22_0 -> m22_2  [color=green, key=1, label=string, style=dashed];
m22_0 -> m22_3  [color=darkseagreen4, key=1, label=char, style=dashed];
m22_0 -> m22_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m22_0 -> m22_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m22_0 -> m22_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m22_0 -> m22_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m22_1 -> m22_2  [color=green, key=0, style=solid];
m22_2 -> m22_3  [color=green, key=0, style=solid];
m22_3 -> m22_4  [key=0, style=solid];
m22_4 -> m22_5  [key=0, style=solid];
m22_5 -> m22_6  [key=0, style=solid];
m22_6 -> m22_7  [key=0, style=solid];
m22_7 -> m22_8  [key=0, style=solid];
m22_8 -> m22_0  [color=blue, key=0, style=bold];
m22_13 -> m22_1  [color=green, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m22_13 -> m22_2  [color=green, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m22_13 -> m22_3  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m22_13 -> m22_4  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m22_13 -> m22_5  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m22_13 -> m22_6  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m22_13 -> m22_7  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m26_1 -> m26_2  [key=0, style=solid];
m26_1 -> m26_5  [key=2, style=dotted];
m26_1 -> m26_6  [key=2, style=dotted];
m26_0 -> m26_1  [key=0, style=solid];
m26_2 -> m26_3  [key=0, style=solid];
m26_2 -> m26_7  [key=2, style=dotted];
m26_3 -> m26_4  [key=0, style=solid];
m26_3 -> m26_8  [key=2, style=dotted];
m26_3 -> m26_9  [key=2, style=dotted];
m26_4 -> m26_0  [color=blue, key=0, style=bold];
m26_16 -> m26_17  [key=0, style=solid];
m26_16 -> m26_5  [key=2, style=dotted];
m26_16 -> m26_6  [key=2, style=dotted];
m26_15 -> m26_16  [key=0, style=solid];
m26_17 -> m26_18  [key=0, style=solid];
m26_17 -> m26_14  [key=2, style=dotted];
m26_17 -> m26_19  [key=2, style=dotted];
m26_18 -> m26_15  [color=blue, key=0, style=bold];
m26_11 -> m26_12  [key=0, style=solid];
m26_11 -> m26_5  [key=2, style=dotted];
m26_11 -> m26_6  [key=2, style=dotted];
m26_10 -> m26_11  [key=0, style=solid];
m26_12 -> m26_13  [key=0, style=solid];
m26_12 -> m26_14  [key=2, style=dotted];
m26_13 -> m26_10  [color=blue, key=0, style=bold];
m28_0 -> m28_1  [color=green, key=0, style=solid];
m28_0 -> m28_5  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m28_1 -> m28_2  [color=green, key=0, style=solid];
m28_1 -> m28_3  [color=green, key=2, style=dotted];
m28_1 -> m28_4  [color=green, key=1, label="lambda expression", style=dashed];
m28_1 -> m28_1  [color=green, key=1, label=tseq, style=dashed];
m28_2 -> m28_0  [color=blue, key=0, style=bold];
m28_11 -> m28_12  [color=green, key=0, style=solid];
m28_5 -> m28_6  [color=green, key=0, style=solid];
m28_5 -> m28_7  [color=green, key=2, style=dotted];
m28_5 -> m28_8  [color=green, key=2, style=dotted];
m28_5 -> n28  [color=green, key=2, style=dotted];
m28_5 -> m28_10  [color=green, key=2, style=dotted];
m28_5 -> m28_11  [color=green, key=1, label="lambda expression", style=dashed];
m28_4 -> m28_5  [color=green, key=0, style=solid];
m28_4 -> m28_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m28_12 -> m28_13  [color=green, key=0, style=solid];
m28_6 -> m28_4  [color=blue, key=0, style=bold];
m28_13 -> m28_11  [color=blue, key=0, style=bold];
m28_14 -> m28_5  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m28_15 -> m28_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m28_16 -> m28_12  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m29_14 -> m29_15  [key=0, style=solid];
m29_15 -> m29_16  [color=red, key=0, style=solid];
m29_15 -> m29_19  [key=2, style=dotted];
m29_15 -> m29_20  [key=2, style=dotted];
m29_15 -> m29_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m29_16 -> m29_17  [color=red, key=0, style=solid];
m29_16 -> m29_19  [color=red, key=2, style=dotted];
m29_16 -> m29_20  [color=red, key=2, style=dotted];
m29_16 -> m29_5  [color=red, key=2, style=dotted];
m29_16 -> m29_21  [color=red, key=1, label="lambda expression", style=dashed];
m29_17 -> m29_18  [key=0, style=solid];
m29_17 -> m29_6  [key=2, style=dotted];
m29_18 -> m29_14  [color=blue, key=0, style=bold];
m29_0 -> m29_1  [key=0, style=solid];
m29_1 -> m29_2  [color=red, key=0, style=solid];
m29_1 -> m29_3  [color=darkseagreen4, key=1, label=expected, style=dashed];
m29_2 -> m29_3  [color=red, key=0, style=solid];
m29_2 -> m29_5  [color=red, key=2, style=dotted];
m29_2 -> m29_7  [color=red, key=1, label="lambda expression", style=dashed];
m29_3 -> m29_4  [key=0, style=solid];
m29_3 -> m29_6  [key=2, style=dotted];
m29_4 -> m29_0  [color=blue, key=0, style=bold];
m29_21 -> m29_22  [color=red, key=0, style=solid];
m29_7 -> m29_8  [color=red, key=0, style=solid];
m29_8 -> m29_9  [color=red, key=0, style=solid];
m29_8 -> m29_10  [color=red, key=2, style=dotted];
m29_8 -> m29_11  [color=red, key=2, style=dotted];
m29_8 -> m29_12  [color=red, key=2, style=dotted];
m29_8 -> m29_13  [color=red, key=2, style=dotted];
m29_9 -> m29_7  [color=blue, key=0, style=bold];
m29_22 -> m29_23  [color=red, key=0, style=solid];
m29_22 -> m29_10  [color=red, key=2, style=dotted];
m29_22 -> m29_11  [color=red, key=2, style=dotted];
m29_22 -> m29_12  [color=red, key=2, style=dotted];
m29_22 -> m29_13  [color=red, key=2, style=dotted];
m29_23 -> m29_21  [color=blue, key=0, style=bold];
m31_37 -> m31_38  [color=green, key=0, style=solid];
m31_7 -> m31_8  [color=green, key=0, style=solid];
m31_8 -> m31_9  [color=green, key=0, style=solid];
m31_8 -> m31_10  [color=green, key=2, style=dotted];
m31_8 -> m31_11  [color=green, key=2, style=dotted];
m31_8 -> m31_12  [color=green, key=2, style=dotted];
m31_8 -> m31_13  [color=green, key=2, style=dotted];
m31_9 -> m31_7  [color=blue, key=0, style=bold];
m31_21 -> m31_22  [color=green, key=0, style=solid];
m31_22 -> m31_23  [color=green, key=0, style=solid];
m31_22 -> m31_10  [color=green, key=2, style=dotted];
m31_22 -> m31_11  [color=green, key=2, style=dotted];
m31_22 -> m31_12  [color=green, key=2, style=dotted];
m31_22 -> m31_13  [color=green, key=2, style=dotted];
m31_23 -> m31_21  [color=blue, key=0, style=bold];
m31_29 -> m31_30  [color=green, key=0, style=solid];
m31_30 -> m31_31  [color=green, key=0, style=solid];
m31_30 -> m31_10  [color=green, key=2, style=dotted];
m31_30 -> m31_11  [color=green, key=2, style=dotted];
m31_30 -> m31_12  [color=green, key=2, style=dotted];
m31_30 -> m31_13  [color=green, key=2, style=dotted];
m31_31 -> m31_29  [color=blue, key=0, style=bold];
m31_38 -> m31_39  [color=green, key=0, style=solid];
m31_38 -> m31_10  [color=green, key=2, style=dotted];
m31_38 -> m31_11  [color=green, key=2, style=dotted];
m31_38 -> m31_12  [color=green, key=2, style=dotted];
m31_38 -> m31_13  [color=green, key=2, style=dotted];
m31_39 -> m31_37  [color=blue, key=0, style=bold];
m31_14 -> m31_15  [key=0, style=solid];
m31_15 -> m31_16  [color=green, key=0, style=solid];
m31_15 -> m31_19  [key=2, style=dotted];
m31_15 -> m31_20  [key=2, style=dotted];
m31_15 -> m31_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m31_16 -> m31_17  [color=green, key=0, style=solid];
m31_16 -> m31_19  [color=green, key=2, style=dotted];
m31_16 -> m31_20  [color=green, key=2, style=dotted];
m31_16 -> m31_5  [color=green, key=2, style=dotted];
m31_16 -> m31_21  [color=green, key=1, label="lambda expression", style=dashed];
m31_17 -> m31_18  [key=0, style=solid];
m31_17 -> m31_6  [key=2, style=dotted];
m31_18 -> m31_14  [color=blue, key=0, style=bold];
m31_0 -> m31_1  [key=0, style=solid];
m31_1 -> m31_2  [color=green, key=0, style=solid];
m31_1 -> m31_3  [color=darkseagreen4, key=1, label=expected, style=dashed];
m31_2 -> m31_3  [color=green, key=0, style=solid];
m31_2 -> m31_5  [color=green, key=2, style=dotted];
m31_2 -> m31_7  [color=green, key=1, label="lambda expression", style=dashed];
m31_3 -> m31_4  [key=0, style=solid];
m31_3 -> m31_6  [key=2, style=dotted];
m31_4 -> m31_0  [color=blue, key=0, style=bold];
m31_32 -> m31_33  [key=0, style=solid];
m31_33 -> m31_34  [color=green, key=0, style=solid];
m31_33 -> m31_19  [key=2, style=dotted];
m31_33 -> m31_20  [key=2, style=dotted];
m31_33 -> m31_35  [color=darkseagreen4, key=1, label=expected, style=dashed];
m31_34 -> m31_35  [color=green, key=0, style=solid];
m31_34 -> m31_19  [color=green, key=2, style=dotted];
m31_34 -> m31_20  [color=green, key=2, style=dotted];
m31_34 -> m31_5  [color=green, key=2, style=dotted];
m31_34 -> m31_37  [color=green, key=1, label="lambda expression", style=dashed];
m31_35 -> m31_36  [key=0, style=solid];
m31_35 -> m31_6  [key=2, style=dotted];
m31_36 -> m31_32  [color=blue, key=0, style=bold];
m31_24 -> m31_25  [key=0, style=solid];
m31_25 -> m31_26  [color=green, key=0, style=solid];
m31_25 -> m31_19  [key=2, style=dotted];
m31_25 -> m31_20  [key=2, style=dotted];
m31_25 -> m31_27  [color=darkseagreen4, key=1, label=expected, style=dashed];
m31_26 -> m31_27  [color=green, key=0, style=solid];
m31_26 -> m31_19  [color=green, key=2, style=dotted];
m31_26 -> m31_20  [color=green, key=2, style=dotted];
m31_26 -> m31_5  [color=green, key=2, style=dotted];
m31_26 -> m31_29  [color=green, key=1, label="lambda expression", style=dashed];
m31_27 -> m31_28  [key=0, style=solid];
m31_27 -> m31_6  [key=2, style=dotted];
m31_28 -> m31_24  [color=blue, key=0, style=bold];
m33_8 -> m33_14  [color=green, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m33_8 -> m33_9  [key=0, style=solid];
m33_8 -> m33_12  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m33_8 -> m33_18  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m33_14 -> m33_20  [color=green, key=0, style=solid];
m33_14 -> m33_28  [color=green, key=2, style=dotted];
m33_14 -> m33_29  [color=green, key=2, style=dotted];
m33_12 -> m33_14  [color=green, key=1, label=spec, style=dashed];
m33_12 -> m33_13  [color=green, key=0, style=solid];
m33_12 -> m33_15  [color=green, key=1, label=spec, style=dashed];
m33_12 -> m33_24  [key=2, style=dotted];
m33_12 -> m33_25  [key=2, style=dotted];
m33_12 -> m33_26  [key=2, style=dotted];
m33_12 -> m33_27  [key=2, style=dotted];
m33_13 -> m33_14  [color=green, key=0, style=solid];
m33_13 -> m33_15  [color=green, key=0, style=solid];
m33_15 -> m33_20  [color=green, key=0, style=solid];
m33_9 -> m33_10  [key=0, style=solid];
m33_9 -> m33_21  [key=2, style=dotted];
m33_9 -> m33_16  [color=darkseagreen4, key=1, label=attrs, style=dashed];
m33_18 -> m33_20  [key=0, style=solid];
m33_18 -> m33_24  [key=2, style=dotted];
m33_18 -> m33_30  [key=2, style=dotted];
m33_10 -> m33_12  [color=darkseagreen4, key=1, label=oa, style=dashed];
m33_10 -> m33_11  [key=0, style=solid];
m33_10 -> m33_22  [key=2, style=dotted];
m33_11 -> m33_12  [key=0, style=solid];
m33_11 -> m33_16  [key=0, style=solid];
m33_11 -> n37  [key=2, style=dotted];
m33_19 -> m33_20  [key=0, style=solid];
m33_19 -> m33_31  [key=2, style=dotted];
m33_16 -> m33_18  [color=darkseagreen4, key=1, label=va, style=dashed];
m33_16 -> m33_17  [key=0, style=solid];
m33_16 -> m33_22  [key=2, style=dotted];
m33_17 -> m33_18  [key=0, style=solid];
m33_17 -> m33_19  [key=0, style=solid];
m33_17 -> n37  [key=2, style=dotted];
m33_20 -> m33_8  [color=blue, key=0, style=bold];
m33_29 -> m33_0  [color=darkorchid, key=3, label="Field variable CommandLine.Infrastructure.Maybe<object> defaultValue", style=bold];
m33_0 -> m33_5  [color=green, key=1, label="CommandLine.Infrastructure.Maybe<object>", style=dashed];
m33_0 -> m33_1  [key=0, style=solid];
m33_0 -> m33_2  [color=darkseagreen4, key=1, label=bool, style=dashed];
m33_0 -> m33_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m33_0 -> m33_4  [color=darkseagreen4, key=1, label=int, style=dashed];
m33_0 -> m33_6  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m33_5 -> m33_6  [color=green, key=0, style=solid];
m33_4 -> m33_5  [color=green, key=0, style=solid];
m33_6 -> m33_7  [key=0, style=solid];
m33_1 -> m33_2  [key=0, style=solid];
m33_2 -> m33_3  [key=0, style=solid];
m33_3 -> m33_4  [key=0, style=solid];
m33_7 -> m33_0  [color=blue, key=0, style=bold];
m33_32 -> m33_5  [color=green, key=1, label="CommandLine.Core.Specification", style=dashed];
m33_32 -> m33_1  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m33_32 -> m33_2  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m33_32 -> m33_3  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m33_32 -> m33_4  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m33_32 -> m33_6  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m35_0 -> m35_1  [color=red, key=0, style=solid];
m35_1 -> m35_2  [color=red, key=0, style=solid];
m35_1 -> m35_4  [color=red, key=1, label="CommandLine.Core.Specification", style=dashed];
m35_2 -> m35_0  [color=blue, key=0, style=bold];
m35_7 -> m35_8  [color=red, key=0, style=solid];
m35_8 -> m35_9  [color=red, key=0, style=solid];
m35_8 -> m35_11  [color=red, key=1, label="CommandLine.Core.Specification", style=dashed];
m35_9 -> m35_7  [color=blue, key=0, style=bold];
m35_18 -> m35_19  [key=0, style=solid];
m35_4 -> m35_5  [color=red, key=0, style=solid];
m35_4 -> m35_6  [color=red, key=2, style=dotted];
m35_3 -> m35_4  [color=red, key=0, style=solid];
m35_5 -> m35_3  [color=blue, key=0, style=bold];
m35_11 -> m35_12  [color=red, key=0, style=solid];
m35_11 -> m35_6  [color=red, key=2, style=dotted];
m35_11 -> m35_13  [color=red, key=2, style=dotted];
m35_11 -> m35_14  [color=red, key=2, style=dotted];
m35_10 -> m35_11  [color=red, key=0, style=solid];
m35_12 -> m35_10  [color=blue, key=0, style=bold];
m35_19 -> m35_20  [key=0, style=solid];
m35_19 -> m35_21  [key=2, style=dotted];
m35_20 -> m35_18  [color=blue, key=0, style=bold];
m35_15 -> m35_16  [key=0, style=solid];
m35_16 -> m35_17  [key=0, style=solid];
m35_16 -> m35_19  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m35_17 -> m35_15  [color=blue, key=0, style=bold];
m36_12 -> m36_13  [color=green, key=0, style=solid];
m36_12 -> m36_15  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m36_12 -> m36_16  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m36_13 -> m36_14  [color=green, key=0, style=solid];
m36_13 -> m36_16  [color=green, key=0, style=solid];
m36_13 -> m36_18  [color=green, key=2, style=dotted];
m36_14 -> m36_15  [color=green, key=0, style=solid];
m36_16 -> m36_17  [key=0, style=solid];
m36_15 -> m36_17  [key=0, style=solid];
m36_15 -> m36_19  [key=2, style=dotted];
m36_15 -> m36_20  [key=2, style=dotted];
m36_15 -> m36_21  [key=2, style=dotted];
m36_15 -> m36_22  [key=2, style=dotted];
m36_15 -> m36_23  [key=2, style=dotted];
m36_17 -> m36_12  [color=blue, key=0, style=bold];
m36_17 -> m36_18  [key=0, style=solid];
m36_17 -> m36_19  [key=2, style=dotted];
m36_21 -> m36_22  [key=0, style=solid];
m36_21 -> m36_23  [key=2, style=dotted];
m36_28 -> m36_29  [color=red, key=0, style=solid];
m36_20 -> m36_21  [key=0, style=solid];
m36_24 -> m36_25  [key=0, style=solid];
m36_18 -> m36_16  [color=blue, key=0, style=bold];
m36_22 -> m36_20  [color=blue, key=0, style=bold];
m36_25 -> m36_26  [key=0, style=solid];
m36_25 -> m36_27  [key=2, style=dotted];
m36_26 -> m36_24  [color=blue, key=0, style=bold];
m36_29 -> m36_30  [color=red, key=0, style=solid];
m36_29 -> m36_31  [color=red, key=2, style=dotted];
m36_29 -> m36_32  [color=red, key=2, style=dotted];
m36_30 -> m36_28  [color=blue, key=0, style=bold];
m36_0 -> m36_1  [key=0, style=solid];
m36_1 -> m36_2  [color=red, key=0, style=solid];
m36_1 -> m36_6  [key=2, style=dotted];
m36_1 -> m36_3  [color=darkseagreen4, key=1, label=tokenPartitions, style=dashed];
m36_2 -> m36_3  [color=red, key=0, style=solid];
m36_2 -> m36_7  [color=red, key=2, style=dotted];
m36_2 -> m36_8  [color=red, key=2, style=dotted];
m36_2 -> m36_9  [color=red, key=2, style=dotted];
m36_2 -> m36_10  [color=red, key=2, style=dotted];
m36_2 -> m36_11  [color=red, key=2, style=dotted];
m36_2 -> m36_12  [color=red, key=2, style=dotted];
m36_2 -> m36_16  [color=red, key=1, label="lambda expression", style=dashed];
m36_3 -> m36_4  [color=red, key=0, style=solid];
m36_3 -> m36_13  [key=2, style=dotted];
m36_3 -> m36_14  [key=2, style=dotted];
m36_3 -> m36_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_3 -> m36_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_4 -> m36_5  [color=red, key=0, style=solid];
m36_4 -> m36_11  [color=red, key=2, style=dotted];
m36_4 -> m36_15  [color=red, key=2, style=dotted];
m36_4 -> m36_28  [color=red, key=1, label="lambda expression", style=dashed];
m36_5 -> m36_0  [color=blue, key=0, style=bold];
m37_0 -> m37_1  [color=red, key=0, style=solid];
m37_1 -> m37_2  [color=red, key=0, style=solid];
m37_1 -> m37_4  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m37_2 -> m37_0  [color=blue, key=0, style=bold];
m37_59 -> m37_60  [color=red, key=0, style=solid];
m37_60 -> m37_61  [color=red, key=0, style=solid];
m37_60 -> m37_63  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m37_61 -> m37_59  [color=blue, key=0, style=bold];
m37_75 -> m37_76  [color=red, key=0, style=solid];
m37_4 -> m37_5  [color=red, key=0, style=solid];
m37_4 -> m37_10  [color=red, key=2, style=dotted];
m37_4 -> m37_15  [color=red, key=1, label="lambda expression", style=dashed];
m37_4 -> m37_7  [color=red, key=1, label=options, style=dashed];
m37_3 -> m37_4  [color=red, key=0, style=solid];
m37_5 -> m37_6  [key=0, style=solid];
m37_5 -> m37_11  [key=2, style=dotted];
m37_5 -> m37_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m37_15 -> m37_16  [color=red, key=0, style=solid];
m37_7 -> m37_9  [color=red, key=0, style=solid];
m37_7 -> m37_13  [color=red, key=2, style=dotted];
m37_7 -> m37_23  [color=red, key=1, label="lambda expression", style=dashed];
m37_6 -> m37_7  [color=red, key=0, style=solid];
m37_6 -> m37_8  [color=red, key=0, style=solid];
m37_6 -> m37_12  [key=2, style=dotted];
m37_20 -> m37_21  [key=0, style=solid];
m37_8 -> m37_9  [color=red, key=0, style=solid];
m37_8 -> m37_14  [color=red, key=2, style=dotted];
m37_9 -> m37_3  [color=blue, key=0, style=bold];
m37_23 -> m37_24  [color=red, key=0, style=solid];
m37_16 -> m37_17  [color=red, key=0, style=solid];
m37_16 -> m37_18  [color=red, key=2, style=dotted];
m37_16 -> m37_19  [color=red, key=2, style=dotted];
m37_17 -> m37_15  [color=blue, key=0, style=bold];
m37_21 -> m37_22  [key=0, style=solid];
m37_22 -> m37_20  [color=blue, key=0, style=bold];
m37_24 -> m37_25  [color=red, key=0, style=solid];
m37_24 -> m37_26  [color=red, key=2, style=dotted];
m37_24 -> m37_27  [color=red, key=2, style=dotted];
m37_24 -> m37_28  [color=red, key=2, style=dotted];
m37_25 -> m37_23  [color=blue, key=0, style=bold];
m37_33 -> m37_34  [color=red, key=0, style=solid];
m37_33 -> m37_10  [color=red, key=2, style=dotted];
m37_33 -> m37_13  [color=red, key=2, style=dotted];
m37_33 -> m37_39  [color=red, key=2, style=dotted];
m37_33 -> m37_41  [color=red, key=1, label="lambda expression", style=dashed];
m37_33 -> m37_44  [color=red, key=1, label="lambda expression", style=dashed];
m37_33 -> m37_49  [color=red, key=1, label=setsWithTrue, style=dashed];
m37_34 -> m37_35  [color=red, key=0, style=solid];
m37_34 -> m37_10  [color=red, key=2, style=dotted];
m37_34 -> m37_39  [color=red, key=2, style=dotted];
m37_34 -> m37_48  [color=red, key=1, label="lambda expression", style=dashed];
m37_34 -> m37_36  [color=red, key=1, label=requiredButEmpty, style=dashed];
m37_32 -> m37_33  [color=red, key=0, style=solid];
m37_32 -> m37_34  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m37_41 -> m37_42  [color=red, key=0, style=solid];
m37_44 -> m37_45  [color=red, key=0, style=solid];
m37_49 -> m37_50  [color=red, key=0, style=solid];
m37_49 -> m37_51  [color=red, key=2, style=dotted];
m37_49 -> m37_52  [color=red, key=2, style=dotted];
m37_49 -> m37_53  [color=red, key=2, style=dotted];
m37_35 -> m37_36  [color=red, key=0, style=solid];
m37_35 -> m37_37  [color=red, key=0, style=solid];
m37_35 -> m37_40  [key=2, style=dotted];
m37_48 -> m37_49  [color=red, key=0, style=solid];
m37_36 -> m37_38  [color=red, key=0, style=solid];
m37_36 -> m37_13  [color=red, key=2, style=dotted];
m37_36 -> m37_54  [color=red, key=1, label="lambda expression", style=dashed];
m37_37 -> m37_38  [color=red, key=0, style=solid];
m37_37 -> m37_14  [color=red, key=2, style=dotted];
m37_38 -> m37_32  [color=blue, key=0, style=bold];
m37_54 -> m37_55  [color=red, key=0, style=solid];
m37_42 -> m37_43  [color=red, key=0, style=solid];
m37_42 -> m37_18  [color=red, key=2, style=dotted];
m37_42 -> m37_19  [color=red, key=2, style=dotted];
m37_43 -> m37_41  [color=blue, key=0, style=bold];
m37_45 -> m37_46  [color=red, key=0, style=solid];
m37_45 -> m37_47  [color=red, key=2, style=dotted];
m37_46 -> m37_44  [color=blue, key=0, style=bold];
m37_50 -> m37_48  [color=blue, key=0, style=bold];
m37_55 -> m37_56  [color=red, key=0, style=solid];
m37_55 -> m37_57  [color=red, key=2, style=dotted];
m37_55 -> m37_58  [color=red, key=2, style=dotted];
m37_55 -> m37_28  [color=red, key=2, style=dotted];
m37_56 -> m37_54  [color=blue, key=0, style=bold];
m37_63 -> m37_64  [color=red, key=0, style=solid];
m37_63 -> m37_10  [color=red, key=2, style=dotted];
m37_63 -> m37_68  [color=red, key=1, label="lambda expression", style=dashed];
m37_63 -> m37_65  [color=red, key=1, label=options, style=dashed];
m37_62 -> m37_63  [color=red, key=0, style=solid];
m37_64 -> m37_65  [color=red, key=0, style=solid];
m37_64 -> m37_66  [color=red, key=0, style=solid];
m37_64 -> m37_40  [key=2, style=dotted];
m37_68 -> m37_69  [color=red, key=0, style=solid];
m37_65 -> m37_67  [color=red, key=0, style=solid];
m37_65 -> m37_13  [color=red, key=2, style=dotted];
m37_65 -> m37_75  [color=red, key=1, label="lambda expression", style=dashed];
m37_66 -> m37_67  [color=red, key=0, style=solid];
m37_66 -> m37_14  [color=red, key=2, style=dotted];
m37_67 -> m37_62  [color=blue, key=0, style=bold];
m37_69 -> m37_70  [color=red, key=0, style=solid];
m37_69 -> m37_71  [color=red, key=2, style=dotted];
m37_69 -> m37_19  [color=red, key=2, style=dotted];
m37_69 -> m37_72  [color=red, key=2, style=dotted];
m37_69 -> m37_73  [color=red, key=2, style=dotted];
m37_69 -> m37_74  [color=red, key=2, style=dotted];
m37_70 -> m37_68  [color=blue, key=0, style=bold];
m37_76 -> m37_77  [color=red, key=0, style=solid];
m37_76 -> m37_78  [color=red, key=2, style=dotted];
m37_76 -> m37_58  [color=red, key=2, style=dotted];
m37_76 -> m37_28  [color=red, key=2, style=dotted];
m37_77 -> m37_75  [color=blue, key=0, style=bold];
m37_29 -> m37_30  [color=red, key=0, style=solid];
m37_30 -> m37_31  [color=red, key=0, style=solid];
m37_30 -> m37_33  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m37_30 -> m37_34  [color=red, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m37_31 -> m37_29  [color=blue, key=0, style=bold];
m37_79 -> m37_49  [color=red, key=1, label=setsWithTrue, style=dashed];
m38_5 -> m38_6  [color=green, key=0, style=solid];
m38_6 -> m38_7  [color=green, key=0, style=solid];
m38_6 -> m38_8  [color=green, key=2, style=dotted];
m38_7 -> m38_5  [color=blue, key=0, style=bold];
m38_0 -> m38_1  [color=green, key=0, style=solid];
m38_1 -> m38_2  [color=green, key=0, style=solid];
m38_1 -> n28  [color=green, key=2, style=dotted];
m38_1 -> m38_4  [color=green, key=2, style=dotted];
m38_1 -> m38_1  [color=green, key=1, label=t, style=dashed];
m38_1 -> m38_5  [color=green, key=1, label="lambda expression", style=dashed];
m38_1 -> m38_6  [color=green, key=1, label=t, style=dashed];
m38_2 -> m38_0  [color=blue, key=0, style=bold];
m38_9 -> m38_6  [color=green, key=1, label=t, style=dashed];
m39_14 -> m39_15  [key=0, style=solid];
m39_15 -> m39_16  [color=green, key=0, style=solid];
m39_15 -> m39_19  [key=2, style=dotted];
m39_15 -> m39_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m39_16 -> m39_17  [color=green, key=0, style=solid];
m39_16 -> m39_19  [color=green, key=2, style=dotted];
m39_16 -> m39_20  [color=green, key=2, style=dotted];
m39_16 -> m39_5  [color=green, key=2, style=dotted];
m39_16 -> m39_21  [color=green, key=1, label="lambda expression", style=dashed];
m39_17 -> m39_18  [key=0, style=solid];
m39_17 -> m39_6  [key=2, style=dotted];
m39_18 -> m39_14  [color=blue, key=0, style=bold];
m39_21 -> m39_22  [color=green, key=0, style=solid];
m39_7 -> m39_8  [color=green, key=0, style=solid];
m39_8 -> m39_9  [color=green, key=0, style=solid];
m39_8 -> m39_10  [color=green, key=2, style=dotted];
m39_8 -> m39_11  [color=green, key=2, style=dotted];
m39_8 -> m39_12  [color=green, key=2, style=dotted];
m39_8 -> m39_13  [color=green, key=2, style=dotted];
m39_9 -> m39_7  [color=blue, key=0, style=bold];
m39_22 -> m39_23  [color=green, key=0, style=solid];
m39_22 -> m39_10  [color=green, key=2, style=dotted];
m39_22 -> m39_11  [color=green, key=2, style=dotted];
m39_22 -> m39_12  [color=green, key=2, style=dotted];
m39_22 -> m39_13  [color=green, key=2, style=dotted];
m39_23 -> m39_21  [color=blue, key=0, style=bold];
m39_0 -> m39_1  [key=0, style=solid];
m39_1 -> m39_2  [color=green, key=0, style=solid];
m39_1 -> m39_3  [color=darkseagreen4, key=1, label=expected, style=dashed];
m39_2 -> m39_3  [color=green, key=0, style=solid];
m39_2 -> m39_5  [color=green, key=2, style=dotted];
m39_2 -> m39_7  [color=green, key=1, label="lambda expression", style=dashed];
m39_3 -> m39_4  [key=0, style=solid];
m39_3 -> m39_6  [key=2, style=dotted];
m39_4 -> m39_0  [color=blue, key=0, style=bold];
m40_20 -> m40_21  [key=0, style=solid];
m40_21 -> m40_22  [color=red, key=0, style=solid];
m40_21 -> m40_6  [key=2, style=dotted];
m40_21 -> m40_7  [key=2, style=dotted];
m40_21 -> m40_24  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m40_22 -> m40_23  [color=red, key=0, style=solid];
m40_22 -> m40_8  [color=red, key=2, style=dotted];
m40_22 -> m40_9  [color=red, key=2, style=dotted];
m40_22 -> m40_27  [color=red, key=1, label=specs, style=dashed];
m40_24 -> m40_25  [key=0, style=solid];
m40_24 -> m40_14  [key=2, style=dotted];
m40_24 -> m40_15  [key=2, style=dotted];
m40_23 -> m40_24  [color=red, key=0, style=solid];
m40_23 -> m40_10  [color=red, key=2, style=dotted];
m40_23 -> m40_6  [color=red, key=2, style=dotted];
m40_23 -> m40_7  [color=red, key=2, style=dotted];
m40_23 -> m40_11  [color=red, key=2, style=dotted];
m40_23 -> m40_12  [color=red, key=2, style=dotted];
m40_23 -> m40_13  [color=red, key=2, style=dotted];
m40_23 -> m40_26  [color=red, key=1, label="lambda expression", style=dashed];
m40_25 -> m40_20  [color=blue, key=0, style=bold];
m40_0 -> m40_1  [key=0, style=solid];
m40_1 -> m40_2  [color=red, key=0, style=solid];
m40_1 -> m40_6  [key=2, style=dotted];
m40_1 -> m40_7  [key=2, style=dotted];
m40_1 -> m40_4  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m40_2 -> m40_3  [color=red, key=0, style=solid];
m40_2 -> m40_8  [color=red, key=2, style=dotted];
m40_2 -> m40_9  [color=red, key=2, style=dotted];
m40_2 -> m40_17  [color=red, key=1, label=specs, style=dashed];
m40_4 -> m40_5  [key=0, style=solid];
m40_4 -> m40_14  [key=2, style=dotted];
m40_4 -> m40_15  [key=2, style=dotted];
m40_3 -> m40_4  [color=red, key=0, style=solid];
m40_3 -> m40_10  [color=red, key=2, style=dotted];
m40_3 -> m40_6  [color=red, key=2, style=dotted];
m40_3 -> m40_7  [color=red, key=2, style=dotted];
m40_3 -> m40_11  [color=red, key=2, style=dotted];
m40_3 -> m40_12  [color=red, key=2, style=dotted];
m40_3 -> m40_13  [color=red, key=2, style=dotted];
m40_3 -> m40_16  [color=red, key=1, label="lambda expression", style=dashed];
m40_5 -> m40_0  [color=blue, key=0, style=bold];
m40_26 -> m40_27  [color=red, key=0, style=solid];
m40_17 -> m40_18  [color=red, key=0, style=solid];
m40_17 -> m40_19  [color=red, key=2, style=dotted];
m40_16 -> m40_17  [color=red, key=0, style=solid];
m40_18 -> m40_16  [color=blue, key=0, style=bold];
m40_27 -> m40_28  [color=red, key=0, style=solid];
m40_27 -> m40_19  [color=red, key=2, style=dotted];
m40_28 -> m40_26  [color=blue, key=0, style=bold];
m40_29 -> m40_17  [color=red, key=1, label=specs, style=dashed];
m40_30 -> m40_27  [color=red, key=1, label=specs, style=dashed];
m41_0 -> m41_1  [key=0, style=solid];
m41_0 -> m41_2  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m41_0 -> m41_4  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m41_0 -> m41_6  [color=green, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m41_1 -> m41_2  [key=0, style=solid];
m41_1 -> m41_12  [key=2, style=dotted];
m41_1 -> m41_3  [color=green, key=1, label=tokenList, style=dashed];
m41_2 -> m41_3  [color=green, key=0, style=solid];
m41_2 -> m41_13  [key=2, style=dotted];
m41_2 -> m41_12  [key=2, style=dotted];
m41_2 -> m41_24  [color=green, key=1, label=switches, style=dashed];
m41_2 -> m41_10  [color=darkseagreen4, key=1, label=switches, style=dashed];
m41_4 -> m41_5  [color=green, key=0, style=solid];
m41_4 -> m41_16  [color=green, key=2, style=dotted];
m41_4 -> m41_12  [color=green, key=2, style=dotted];
m41_4 -> m41_28  [color=green, key=1, label=scalars, style=dashed];
m41_4 -> m41_10  [color=green, key=1, label=scalars, style=dashed];
m41_6 -> m41_7  [color=green, key=0, style=solid];
m41_6 -> m41_16  [color=green, key=2, style=dotted];
m41_6 -> m41_12  [color=green, key=2, style=dotted];
m41_6 -> m41_32  [color=green, key=1, label=sequences, style=dashed];
m41_6 -> m41_10  [color=green, key=1, label=sequences, style=dashed];
m41_3 -> m41_4  [color=green, key=0, style=solid];
m41_3 -> m41_14  [color=green, key=2, style=dotted];
m41_3 -> m41_15  [color=green, key=2, style=dotted];
m41_3 -> m41_23  [color=green, key=1, label="lambda expression", style=dashed];
m41_3 -> m41_5  [color=green, key=1, label=tokensExceptSwitches, style=dashed];
m41_10 -> m41_11  [key=0, style=solid];
m41_10 -> m41_17  [key=2, style=dotted];
m41_10 -> m41_18  [key=2, style=dotted];
m41_10 -> m41_19  [key=2, style=dotted];
m41_10 -> m41_20  [key=2, style=dotted];
m41_10 -> m41_21  [key=2, style=dotted];
m41_10 -> m41_22  [key=2, style=dotted];
m41_10 -> m41_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m41_5 -> m41_6  [color=green, key=0, style=solid];
m41_5 -> m41_14  [color=green, key=2, style=dotted];
m41_5 -> m41_15  [color=green, key=2, style=dotted];
m41_5 -> m41_27  [color=green, key=1, label="lambda expression", style=dashed];
m41_5 -> m41_7  [color=green, key=1, label=tokensExceptSwitchesAndScalars, style=dashed];
m41_7 -> m41_8  [color=green, key=0, style=solid];
m41_7 -> m41_14  [color=green, key=2, style=dotted];
m41_7 -> m41_15  [color=green, key=2, style=dotted];
m41_7 -> m41_31  [color=green, key=1, label="lambda expression", style=dashed];
m41_7 -> m41_9  [color=green, key=1, label=tokensExceptSwitchesAndScalarsAndSeq, style=dashed];
m41_8 -> m41_9  [color=green, key=0, style=solid];
m41_8 -> m41_14  [color=green, key=2, style=dotted];
m41_8 -> m41_15  [color=green, key=2, style=dotted];
m41_8 -> m41_34  [color=green, key=1, label="lambda expression", style=dashed];
m41_8 -> m41_39  [color=green, key=1, label=values, style=dashed];
m41_8 -> m41_10  [color=green, key=1, label=values, style=dashed];
m41_9 -> m41_10  [color=green, key=0, style=solid];
m41_9 -> m41_14  [color=green, key=2, style=dotted];
m41_9 -> m41_38  [color=green, key=1, label="lambda expression", style=dashed];
m41_11 -> m41_0  [color=blue, key=0, style=bold];
m41_41 -> m41_42  [key=0, style=solid];
m41_24 -> m41_25  [color=green, key=0, style=solid];
m41_24 -> m41_26  [color=green, key=2, style=dotted];
m41_23 -> m41_24  [color=green, key=0, style=solid];
m41_28 -> m41_29  [color=green, key=0, style=solid];
m41_28 -> m41_30  [color=green, key=2, style=dotted];
m41_27 -> m41_28  [color=green, key=0, style=solid];
m41_32 -> m41_33  [color=green, key=0, style=solid];
m41_32 -> m41_30  [color=green, key=2, style=dotted];
m41_31 -> m41_32  [color=green, key=0, style=solid];
m41_34 -> m41_35  [color=green, key=0, style=solid];
m41_39 -> m41_40  [color=green, key=0, style=solid];
m41_39 -> m41_30  [color=green, key=2, style=dotted];
m41_38 -> m41_39  [color=green, key=0, style=solid];
m41_25 -> m41_23  [color=blue, key=0, style=bold];
m41_29 -> m41_27  [color=blue, key=0, style=bold];
m41_33 -> m41_31  [color=blue, key=0, style=bold];
m41_35 -> m41_36  [color=green, key=0, style=solid];
m41_35 -> m41_37  [color=green, key=2, style=dotted];
m41_36 -> m41_34  [color=blue, key=0, style=bold];
m41_40 -> m41_38  [color=blue, key=0, style=bold];
m41_42 -> m41_43  [key=0, style=solid];
m41_43 -> m41_41  [color=blue, key=0, style=bold];
m41_44 -> m41_24  [color=green, key=1, label=switches, style=dashed];
m41_45 -> m41_28  [color=green, key=1, label=scalars, style=dashed];
m41_46 -> m41_32  [color=green, key=1, label=sequences, style=dashed];
m41_47 -> m41_39  [color=green, key=1, label=values, style=dashed];
m42_0 -> m42_1  [key=0, style=solid];
m42_1 -> m42_2  [color=green, key=0, style=solid];
m42_1 -> m42_6  [key=2, style=dotted];
m42_1 -> m42_4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m42_2 -> m42_3  [color=green, key=0, style=solid];
m42_2 -> m42_7  [color=green, key=2, style=dotted];
m42_2 -> m42_8  [color=green, key=2, style=dotted];
m42_2 -> m42_15  [color=green, key=1, label=specs, style=dashed];
m42_4 -> m42_5  [key=0, style=solid];
m42_4 -> m42_12  [key=2, style=dotted];
m42_4 -> m42_13  [key=2, style=dotted];
m42_4 -> m42_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m42_3 -> m42_4  [key=0, style=solid];
m42_3 -> m42_9  [key=2, style=dotted];
m42_3 -> m42_10  [key=2, style=dotted];
m42_3 -> m42_11  [key=2, style=dotted];
m42_3 -> m42_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m42_3 -> m42_19  [color=darkseagreen4, key=1, label=result, style=dashed];
m42_5 -> m42_0  [color=blue, key=0, style=bold];
m42_39 -> m42_40  [key=0, style=solid];
m42_15 -> m42_16  [key=0, style=solid];
m42_15 -> m42_17  [key=2, style=dotted];
m42_14 -> m42_15  [key=0, style=solid];
m42_19 -> m42_20  [key=0, style=solid];
m42_19 -> m42_21  [key=2, style=dotted];
m42_19 -> m42_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m42_19 -> m42_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m42_18 -> m42_19  [key=0, style=solid];
m42_16 -> m42_14  [color=blue, key=0, style=bold];
m42_20 -> m42_18  [color=blue, key=0, style=bold];
m42_22 -> m42_23  [key=0, style=solid];
m42_23 -> m42_24  [key=0, style=solid];
m42_23 -> m42_25  [key=2, style=dotted];
m42_23 -> m42_26  [key=2, style=dotted];
m42_23 -> m42_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m42_24 -> m42_22  [color=blue, key=0, style=bold];
m42_34 -> m42_35  [key=0, style=solid];
m42_34 -> m42_17  [key=2, style=dotted];
m42_33 -> m42_34  [key=0, style=solid];
m42_37 -> m42_38  [key=0, style=solid];
m42_37 -> m42_21  [key=2, style=dotted];
m42_37 -> m42_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m42_37 -> m42_40  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m42_36 -> m42_37  [key=0, style=solid];
m42_35 -> m42_33  [color=blue, key=0, style=bold];
m42_38 -> m42_36  [color=blue, key=0, style=bold];
m42_40 -> m42_41  [key=0, style=solid];
m42_40 -> m42_25  [key=2, style=dotted];
m42_40 -> m42_26  [key=2, style=dotted];
m42_40 -> m42_40  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m42_41 -> m42_39  [color=blue, key=0, style=bold];
m42_27 -> m42_28  [key=0, style=solid];
m42_28 -> m42_29  [color=green, key=0, style=solid];
m42_28 -> m42_6  [key=2, style=dotted];
m42_28 -> m42_31  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m42_29 -> m42_30  [color=green, key=0, style=solid];
m42_29 -> m42_7  [color=green, key=2, style=dotted];
m42_29 -> m42_8  [color=green, key=2, style=dotted];
m42_29 -> m42_34  [color=green, key=1, label=specs, style=dashed];
m42_31 -> m42_32  [key=0, style=solid];
m42_31 -> m42_12  [key=2, style=dotted];
m42_31 -> m42_13  [key=2, style=dotted];
m42_31 -> m42_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m42_30 -> m42_31  [key=0, style=solid];
m42_30 -> m42_9  [key=2, style=dotted];
m42_30 -> m42_10  [key=2, style=dotted];
m42_30 -> m42_11  [key=2, style=dotted];
m42_30 -> m42_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m42_30 -> m42_37  [color=darkseagreen4, key=1, label=result, style=dashed];
m42_32 -> m42_27  [color=blue, key=0, style=bold];
m42_42 -> m42_15  [color=darkseagreen4, key=1, label=specs, style=dashed];
m42_43 -> m42_19  [color=darkseagreen4, key=1, label=result, style=dashed];
m42_44 -> m42_23  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m42_45 -> m42_34  [color=darkseagreen4, key=1, label=specs, style=dashed];
m42_46 -> m42_37  [color=darkseagreen4, key=1, label=result, style=dashed];
m42_47 -> m42_40  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m43_5 -> m43_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m43_5 -> m43_0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m43_5 -> m43_6  [key=0, style=solid];
m43_5 -> m43_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m43_6 -> m43_21  [color=darkseagreen4, key=1, label=type, style=dashed];
m43_6 -> m43_7  [key=0, style=solid];
m43_6 -> m43_10  [key=2, style=dotted];
m43_6 -> m43_11  [key=2, style=dotted];
m43_6 -> m43_12  [key=2, style=dotted];
m43_6 -> m43_13  [key=2, style=dotted];
m43_6 -> m43_14  [key=2, style=dotted];
m43_6 -> m43_8  [color=darkseagreen4, key=1, label=type, style=dashed];
m43_7 -> m43_8  [key=0, style=solid];
m43_7 -> m43_15  [key=2, style=dotted];
m43_7 -> m43_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m43_8 -> m43_17  [key=2, style=dotted];
m43_8 -> m43_9  [key=0, style=solid];
m43_8 -> m43_16  [key=2, style=dotted];
m43_8 -> m43_15  [key=2, style=dotted];
m43_8 -> m43_18  [key=2, style=dotted];
m43_8 -> m43_19  [key=2, style=dotted];
m43_8 -> m43_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m43_8 -> m43_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m43_9 -> m43_5  [color=blue, key=0, style=bold];
m43_0 -> m43_1  [key=0, style=solid];
m43_1 -> m43_4  [key=2, style=dotted];
m43_1 -> m43_2  [key=0, style=solid];
m43_1 -> m43_3  [key=2, style=dotted];
m43_1 -> m43_5  [key=2, style=dotted];
m43_2 -> m43_0  [color=blue, key=0, style=bold];
m43_39 -> m43_46  [color=green, key=0, style=solid];
m43_39 -> m43_4  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m43_46 -> m43_47  [color=green, key=0, style=solid];
m43_46 -> m43_45  [color=green, key=2, style=dotted];
m43_47 -> m43_39  [color=blue, key=0, style=bold];
m43_40 -> m43_4  [color=darkorchid, key=3, label="Parameter variable System.Type conversionType", style=bold];
m43_40 -> m43_48  [key=0, style=solid];
m43_40 -> m43_49  [color=darkseagreen4, key=1, label=string, style=dashed];
m43_40 -> m43_52  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m43_48 -> m43_49  [key=0, style=solid];
m43_49 -> m43_50  [key=0, style=solid];
m43_49 -> m43_52  [key=0, style=solid];
m43_49 -> m43_56  [key=2, style=dotted];
m43_49 -> m43_53  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
m43_52 -> m43_53  [key=0, style=solid];
m43_52 -> m43_54  [key=0, style=solid];
m43_52 -> m43_58  [key=2, style=dotted];
m43_53 -> m43_55  [key=0, style=solid];
m43_51 -> m43_55  [key=0, style=solid];
m43_51 -> m43_57  [key=2, style=dotted];
m43_54 -> m43_55  [key=0, style=solid];
m43_54 -> m43_57  [key=2, style=dotted];
m43_50 -> m43_51  [key=0, style=solid];
m43_55 -> m43_40  [color=blue, key=0, style=bold];
m43_27 -> m43_28  [key=0, style=solid];
m43_21 -> m43_4  [key=2, style=dotted];
m43_21 -> m43_22  [key=0, style=solid];
m43_20 -> m43_21  [key=0, style=solid];
m43_22 -> m43_20  [color=blue, key=0, style=bold];
m43_23 -> m43_24  [key=0, style=solid];
m43_25 -> m43_23  [color=blue, key=0, style=bold];
m43_24 -> m43_25  [key=0, style=solid];
m43_24 -> m43_26  [key=2, style=dotted];
m43_28 -> m43_29  [key=0, style=solid];
m43_29 -> m43_27  [color=blue, key=0, style=bold];
m43_4 -> m43_30  [color=green, key=0, style=solid];
m43_4 -> m43_0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m43_4 -> m43_6  [color=darkorchid, key=3, label="Parameter variable System.Type conversionType", style=bold];
m43_4 -> m43_5  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m43_4 -> m43_7  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m43_30 -> m43_37  [color=green, key=0, style=solid];
m43_30 -> m43_38  [color=green, key=2, style=dotted];
m43_30 -> m43_39  [color=green, key=2, style=dotted];
m43_30 -> m43_40  [color=green, key=2, style=dotted];
m43_30 -> m43_41  [color=green, key=2, style=dotted];
m43_30 -> m43_42  [color=green, key=2, style=dotted];
m43_31 -> m43_32  [color=green, key=0, style=solid];
m43_32 -> m43_37  [color=green, key=0, style=solid];
m43_32 -> m43_17  [color=green, key=2, style=dotted];
m43_33 -> m43_34  [color=green, key=0, style=solid];
m43_34 -> m43_37  [color=green, key=0, style=solid];
m43_34 -> m43_17  [color=green, key=2, style=dotted];
m43_35 -> m43_36  [color=green, key=0, style=solid];
m43_36 -> m43_37  [color=green, key=0, style=solid];
m43_36 -> m43_17  [color=green, key=2, style=dotted];
m43_37 -> m43_4  [color=blue, key=0, style=bold];
m43_38 -> m43_43  [color=green, key=0, style=solid];
m43_38 -> m43_4  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m43_43 -> m43_44  [color=green, key=0, style=solid];
m43_43 -> m43_45  [color=green, key=2, style=dotted];
m43_44 -> m43_38  [color=blue, key=0, style=bold];
m43_59 -> m43_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m43_60 -> m43_21  [color=darkseagreen4, key=1, label=type, style=dashed];
m44_0 -> m44_1  [color=green, key=0, style=solid];
m44_0 -> m44_2  [color=darkseagreen4, key=1, label="CommandLine.Infrastructure.Maybe<int>", style=dashed];
m44_1 -> m44_2  [color=green, key=0, style=solid];
m44_2 -> m44_3  [color=red, key=0, style=solid];
m44_3 -> m44_0  [color=blue, key=0, style=bold];
m44_4 -> m44_5  [key=0, style=solid];
m44_4 -> m44_7  [color=green, key=1, label="CommandLine.Core.TypeDescriptorKind", style=dashed];
m44_5 -> m44_6  [key=0, style=solid];
m44_5 -> m44_7  [color=green, key=0, style=solid];
m44_7 -> m44_8  [color=green, key=0, style=solid];
m44_7 -> m44_0  [color=green, key=2, style=dotted];
m44_6 -> m44_8  [key=0, style=solid];
m44_6 -> n7  [key=2, style=dotted];
m44_8 -> m44_4  [color=blue, key=0, style=bold];
m44_10 -> m44_1  [color=green, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m44_10 -> m44_2  [color=darkseagreen4, key=1, label="CommandLine.Core.TypeDescriptor", style=dashed];
m45_0 -> m45_1  [color=red, key=0, style=solid];
m45_0 -> m45_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m45_1 -> m45_2  [color=red, key=0, style=solid];
m45_1 -> m45_4  [color=red, key=2, style=dotted];
m45_1 -> m45_5  [color=red, key=2, style=dotted];
m45_1 -> m45_6  [color=red, key=2, style=dotted];
m45_1 -> m45_7  [color=red, key=1, label="lambda expression", style=dashed];
m45_1 -> m45_11  [color=red, key=1, label="lambda expression", style=dashed];
m45_2 -> m45_3  [key=0, style=solid];
m45_3 -> m45_0  [color=blue, key=0, style=bold];
m45_11 -> m45_12  [color=red, key=0, style=solid];
m45_8 -> m45_9  [key=0, style=solid];
m45_8 -> m45_10  [key=2, style=dotted];
m45_7 -> m45_8  [key=0, style=solid];
m45_9 -> m45_7  [color=blue, key=0, style=bold];
m45_12 -> m45_13  [color=red, key=0, style=solid];
m45_12 -> m45_14  [color=red, key=2, style=dotted];
m45_12 -> m45_15  [color=red, key=2, style=dotted];
m45_12 -> m45_16  [color=red, key=2, style=dotted];
m45_12 -> m45_17  [color=red, key=2, style=dotted];
m45_13 -> m45_11  [color=blue, key=0, style=bold];
m45_18 -> m45_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m45_19 -> m45_8  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m46_0 -> m46_1  [key=0, style=solid];
m46_1 -> m46_2  [key=0, style=solid];
m46_2 -> m46_3  [key=0, style=solid];
m46_3 -> m46_4  [key=0, style=solid];
m46_4 -> m46_0  [color=blue, key=0, style=bold];
m46_5 -> m46_1  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m46_5 -> m46_2  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m46_5 -> m46_3  [color=darkseagreen4, key=1, label="CommandLine.ValueAttribute", style=dashed];
m47_0 -> m47_1  [key=0, style=solid];
m47_1 -> m47_2  [key=0, style=solid];
m47_1 -> m47_4  [key=2, style=dotted];
m47_2 -> m47_3  [key=0, style=solid];
m47_2 -> m47_5  [key=2, style=dotted];
m47_2 -> m47_6  [key=2, style=dotted];
m47_2 -> m47_7  [key=2, style=dotted];
m47_2 -> m47_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m47_2 -> m47_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m47_2 -> m47_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m47_3 -> m47_0  [color=blue, key=0, style=bold];
m47_58 -> m47_59  [key=0, style=solid];
m47_8 -> m47_9  [key=0, style=solid];
m47_11 -> m47_12  [key=0, style=solid];
m47_14 -> m47_15  [key=0, style=solid];
m47_9 -> m47_10  [key=0, style=solid];
m47_10 -> m47_8  [color=blue, key=0, style=bold];
m47_12 -> m47_13  [key=0, style=solid];
m47_13 -> m47_11  [color=blue, key=0, style=bold];
m47_15 -> m47_16  [key=0, style=solid];
m47_16 -> m47_14  [color=blue, key=0, style=bold];
m47_59 -> m47_60  [key=0, style=solid];
m47_59 -> m47_47  [key=2, style=dotted];
m47_59 -> m47_61  [key=2, style=dotted];
m47_59 -> m47_62  [key=2, style=dotted];
m47_59 -> m47_39  [key=2, style=dotted];
m47_51 -> m47_52  [color=red, key=0, style=solid];
m47_54 -> m47_55  [key=0, style=solid];
m47_52 -> m47_53  [color=red, key=0, style=solid];
m47_53 -> m47_51  [color=blue, key=0, style=bold];
m47_55 -> m47_56  [key=0, style=solid];
m47_55 -> m47_57  [key=2, style=dotted];
m47_56 -> m47_54  [color=blue, key=0, style=bold];
m47_60 -> m47_58  [color=blue, key=0, style=bold];
m47_38 -> m47_63  [color=red, key=0, style=solid];
m47_63 -> m47_64  [color=red, key=0, style=solid];
m47_63 -> m47_65  [color=red, key=2, style=dotted];
m47_63 -> m47_46  [color=red, key=2, style=dotted];
m47_63 -> m47_47  [color=red, key=2, style=dotted];
m47_63 -> m47_62  [color=red, key=2, style=dotted];
m47_64 -> m47_38  [color=blue, key=0, style=bold];
m47_4 -> m47_17  [color=red, key=0, style=solid];
m47_4 -> m47_18  [color=crimson, key=0, style=bold];
m47_4 -> m47_22  [color=crimson, key=0, style=bold];
m47_4 -> m47_23  [color=crimson, key=0, style=bold];
m47_4 -> m47_26  [color=crimson, key=0, style=bold];
m47_4 -> m47_27  [color=crimson, key=0, style=bold];
m47_4 -> m47_28  [color=red, key=0, style=bold];
m47_4 -> m47_30  [color=crimson, key=0, style=bold];
m47_4 -> m47_19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m47_4 -> m47_20  [color=red, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m47_4 -> m47_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m47_4 -> m47_25  [color=red, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m47_4 -> m47_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m47_17 -> m47_18  [color=red, key=0, style=solid];
m47_17 -> m47_19  [color=red, key=0, style=solid];
m47_17 -> m47_32  [color=red, key=2, style=dotted];
m47_18 -> m47_19  [key=0, style=solid];
m47_22 -> m47_23  [key=0, style=solid];
m47_22 -> m47_38  [key=2, style=dotted];
m47_22 -> m47_39  [key=2, style=dotted];
m47_23 -> m47_24  [key=0, style=solid];
m47_26 -> m47_27  [key=0, style=solid];
m47_26 -> m47_46  [key=2, style=dotted];
m47_26 -> m47_47  [key=2, style=dotted];
m47_26 -> m47_39  [key=2, style=dotted];
m47_27 -> m47_28  [color=red, key=0, style=solid];
m47_28 -> m47_29  [color=red, key=0, style=solid];
m47_28 -> m47_48  [color=red, key=2, style=dotted];
m47_28 -> m47_49  [color=red, key=2, style=dotted];
m47_28 -> m47_50  [color=red, key=2, style=dotted];
m47_28 -> m47_47  [color=red, key=2, style=dotted];
m47_28 -> m47_39  [color=red, key=2, style=dotted];
m47_28 -> m47_36  [color=red, key=2, style=dotted];
m47_28 -> m47_58  [color=red, key=1, label="lambda expression", style=dashed];
m47_30 -> m47_29  [key=0, style=solid];
m47_19 -> m47_20  [color=red, key=0, style=solid];
m47_19 -> m47_33  [key=2, style=dotted];
m47_19 -> m47_22  [color=darkseagreen4, key=1, label=pt, style=dashed];
m47_19 -> m47_25  [color=red, key=1, label=pt, style=dashed];
m47_19 -> m47_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m47_19 -> m47_28  [color=red, key=1, label=pt, style=dashed];
m47_19 -> m47_59  [color=darkseagreen4, key=1, label=pt, style=dashed];
m47_20 -> m47_21  [color=red, key=0, style=solid];
m47_20 -> m47_34  [color=red, key=2, style=dotted];
m47_20 -> m47_35  [color=red, key=2, style=dotted];
m47_20 -> m47_36  [color=red, key=2, style=dotted];
m47_20 -> m47_37  [color=red, key=2, style=dotted];
m47_20 -> m47_51  [color=red, key=1, label="lambda expression", style=dashed];
m47_20 -> m47_25  [color=red, key=1, label=taken, style=dashed];
m47_20 -> m47_28  [color=red, key=1, label=taken, style=dashed];
m47_20 -> m47_29  [color=red, key=1, label=taken, style=dashed];
m47_24 -> m47_25  [color=red, key=0, style=solid];
m47_24 -> m47_40  [key=2, style=dotted];
m47_24 -> m47_41  [key=2, style=dotted];
m47_24 -> m47_42  [key=2, style=dotted];
m47_24 -> m47_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m47_25 -> m47_26  [color=red, key=0, style=solid];
m47_25 -> m47_28  [color=red, key=0, style=solid];
m47_25 -> m47_43  [color=red, key=2, style=dotted];
m47_25 -> m47_44  [color=red, key=2, style=dotted];
m47_25 -> m47_35  [color=red, key=2, style=dotted];
m47_25 -> m47_40  [color=red, key=2, style=dotted];
m47_25 -> n44  [color=red, key=2, style=dotted];
m47_29 -> m47_30  [key=0, style=solid];
m47_29 -> m47_31  [key=0, style=solid];
m47_29 -> m47_40  [key=2, style=dotted];
m47_29 -> m47_35  [key=2, style=dotted];
m47_29 -> m47_4  [key=2, style=dotted];
m47_21 -> m47_22  [key=0, style=solid];
m47_21 -> m47_24  [key=0, style=solid];
m47_21 -> m47_32  [key=2, style=dotted];
m47_31 -> m47_4  [color=blue, key=0, style=bold];
m47_66 -> m47_59  [color=darkseagreen4, key=1, label=pt, style=dashed];
m48_0 -> m48_1  [color=green, key=0, style=solid];
m48_1 -> m48_2  [color=green, key=0, style=solid];
m48_2 -> m48_0  [color=blue, key=0, style=bold];
m48_3 -> m48_4  [color=green, key=0, style=solid];
m48_4 -> m48_5  [color=green, key=0, style=solid];
m48_4 -> m48_0  [color=green, key=2, style=dotted];
m48_4 -> m48_6  [color=green, key=2, style=dotted];
m48_5 -> m48_3  [color=blue, key=0, style=bold];
m48_7 -> m48_1  [color=green, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
}
