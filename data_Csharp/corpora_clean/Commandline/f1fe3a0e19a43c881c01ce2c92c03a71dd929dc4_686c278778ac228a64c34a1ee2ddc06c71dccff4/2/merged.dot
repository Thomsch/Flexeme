digraph  {
n106 [label="System.StringComparer", span=""];
n107 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n108 [label="System.StringComparer", span=""];
n109 [label=optionSpecs, span=""];
n110 [label="System.Globalization.CultureInfo", span=""];
n111 [label=token, span=""];
n0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-30", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="22-22", cluster="lambda expression"];
n12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="22-22", cluster="lambda expression"];
n6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="23-25", cluster="lambda expression"];
n16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="25-25", cluster="lambda expression"];
n2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n4 [label="Entry lambda expression", span="20-27", cluster="lambda expression"];
n9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
n11 [label="Entry lambda expression", span="22-22", cluster="lambda expression"];
n7 [label="return explodedTokens;", span="26-26", cluster="lambda expression"];
n10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)"];
n15 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
n8 [label="Exit lambda expression", span="20-27", cluster="lambda expression"];
n13 [label="Exit lambda expression", span="22-22", cluster="lambda expression"];
n14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n17 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
n18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n19 [label="var instance = factory()", span="40-40", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0];
n23 [label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="51-51", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n25 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="59-59", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n27 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer))", span="63-65", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n67 [label="TypeLookup.FindTypeDescriptor(name, optionSpecs, nameComparer)", span="65-65", cluster="lambda expression"];
n28 [label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="67-71", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n71 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="70-70", cluster="lambda expression"];
n29 [label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="73-76", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n75 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="76-76", cluster="lambda expression"];
n30 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         NameExtensions.FromOptionSpecification(optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer))))", span="78-80", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n78 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="80-80", cluster="lambda expression"];
n20 [label="var specProps = instance.GetType().GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="42-43", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=1];
n36 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
n24 [label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    instance,\r\n                    new[] { new HelpRequestedError() });", span="53-56", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0];
n32 [label="instance = instance\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsJust(),\r\n                    sp => sp.Value.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                    sp => sp.Specification.DefaultValue.FromJust())\r\n                .SetProperties(specPropsWithValue,\r\n                    sp => sp.Value.IsNothing()\r\n                        && sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing(),\r\n                    sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="84-95", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=1];
n21 [label="var specs = from pt in specProps select pt.Specification", span="45-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n37 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n38 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="12-12", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)"];
n60 [label="Entry lambda expression", span="42-43", cluster="lambda expression"];
n22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="47-49", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n39 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate"];
n40 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()"];
n41 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
n42 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()"];
n43 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)"];
n26 [label="var tokens = tokenizerResult.Value", span="61-61", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n46 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
n34 [label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="100-107", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n33 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="97-98", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n47 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)"];
n66 [label="Entry lambda expression", span="65-65", cluster="lambda expression"];
n48 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()"];
n49 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues"];
n70 [label="Entry lambda expression", span="70-70", cluster="lambda expression"];
n31 [label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="82-82", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n50 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
n74 [label="Entry lambda expression", span="76-76", cluster="lambda expression"];
n51 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
n52 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
n53 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification"];
n77 [label="Entry lambda expression", span="80-80", cluster="lambda expression"];
n54 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
n55 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="33-33", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)"];
n81 [label="Entry lambda expression", span="86-86", cluster="lambda expression"];
n85 [label="Entry lambda expression", span="87-87", cluster="lambda expression"];
n89 [label="Entry lambda expression", span="89-89", cluster="lambda expression"];
n93 [label="Entry lambda expression", span="90-90", cluster="lambda expression"];
n96 [label="Entry lambda expression", span="92-94", cluster="lambda expression"];
n100 [label="Entry lambda expression", span="95-95", cluster="lambda expression"];
n56 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
n57 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
n35 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
n58 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
n59 [label="Entry Unk.Create", span="", cluster="Unk.Create"];
n44 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
n45 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
n61 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="42-43", cluster="lambda expression", color=red, community=1];
n62 [label="Exit lambda expression", span="42-43", cluster="lambda expression"];
n63 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)"];
n64 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n65 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)"];
n68 [label="Exit lambda expression", span="65-65", cluster="lambda expression"];
n69 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n72 [label="Exit lambda expression", span="70-70", cluster="lambda expression"];
n73 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
n76 [label="Exit lambda expression", span="76-76", cluster="lambda expression"];
n79 [label="Exit lambda expression", span="80-80", cluster="lambda expression"];
n80 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)"];
n82 [label="sp.Value.IsJust()", span="86-86", cluster="lambda expression", color=red, community=0];
n83 [label="Exit lambda expression", span="86-86", cluster="lambda expression"];
n84 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()"];
n86 [label="sp.Value.FromJust()", span="87-87", cluster="lambda expression", color=red, community=0];
n87 [label="Exit lambda expression", span="87-87", cluster="lambda expression"];
n88 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)"];
n90 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="89-89", cluster="lambda expression", color=red, community=0];
n91 [label="Exit lambda expression", span="89-89", cluster="lambda expression"];
n92 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()"];
n94 [label="sp.Specification.DefaultValue.FromJust()", span="90-90", cluster="lambda expression", color=red, community=0];
n95 [label="Exit lambda expression", span="90-90", cluster="lambda expression"];
n97 [label="sp.Value.IsNothing()\r\n                        && sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Specification.DefaultValue.MatchNothing()", span="92-94", cluster="lambda expression", color=red, community=1];
n98 [label="Exit lambda expression", span="92-94", cluster="lambda expression"];
n99 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26", cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()"];
n101 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="95-95", cluster="lambda expression", color=red, community=0];
n102 [label="Exit lambda expression", span="95-95", cluster="lambda expression"];
n103 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
n104 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
n105 [label="Entry System.Type.CreateEmptyArray()", span="76-76", cluster="System.Type.CreateEmptyArray()"];
d4 [label="return specification.Tag == SpecificationType.Value;", span="17-17", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", color=green, community=0];
d3 [label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="15-15", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)"];
d5 [label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="15-15", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)"];
d7 [label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues,\r\n                specification.ConversionType,\r\n                specification.TargetType);", span="22-35", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", color=green, community=0];
d6 [label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)"];
d8 [label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)"];
d9 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)"];
d11 [label="return specification.ShortName.Length > 0 ? specification.ShortName : specification.LongName;", span="40-40", cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", color=green, community=0];
d10 [label="Entry CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)"];
d12 [label="Exit CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)"];
m1_10 [label="Entry System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", span="0-0", cluster="System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", file="InstanceChooser.cs"];
m1_4 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="InstanceChooser.cs"];
m1_5 [label="var optionType = typeof(FSharpOption<>)", span="15-15", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="InstanceChooser.cs"];
m1_6 [label="var typedType = optionType.MakeGenericType(type)", span="16-16", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="InstanceChooser.cs"];
m1_7 [label="return typedType.InvokeMember(\r\n                ''Some'',\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new [] { value });", span="18-23", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="InstanceChooser.cs"];
m1_8 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="InstanceChooser.cs"];
m1_11 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="InstanceChooser.cs"];
m1_12 [label="var optionType = typeof(FSharpOption<>)", span="28-28", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="InstanceChooser.cs"];
m1_13 [label="var typedType = optionType.MakeGenericType(type)", span="29-29", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="InstanceChooser.cs"];
m1_14 [label="return typedType.InvokeMember(\r\n                ''None'',\r\n                BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new object[] {});", span="31-36", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="InstanceChooser.cs"];
m1_15 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="InstanceChooser.cs"];
m1_9 [label="Entry System.Type.MakeGenericType(params System.Type[])", span="0-0", cluster="System.Type.MakeGenericType(params System.Type[])", file="InstanceChooser.cs"];
m1_0 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="InstanceChooser.cs"];
m1_1 [label="return type.GetGenericArguments()[0];", span="10-10", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="InstanceChooser.cs"];
m1_2 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="InstanceChooser.cs"];
n106 -> n5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n106 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n106 -> n6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n106 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n107 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n107 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n108 -> n67  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n108 -> n78  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n109 -> n67  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n110 -> n71  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n110 -> n75  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n111 -> n78  [key=1, style=dashed, color=darkseagreen4, label=token];
n0 -> n1  [key=0, style=solid];
n0 -> n5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n0 -> n3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> Build"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n1 -> n1  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>> "];
n5 -> n6  [key=0, style=solid];
n5 -> n9  [key=2, style=dotted];
n5 -> n11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n10  [key=2, style=dotted];
n6 -> n15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n3 -> n19  [key=0, style=solid, color=red];
n3 -> n23  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n3 -> n25  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
n3 -> n27  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n3 -> n67  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n3 -> n28  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n3 -> n71  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n3 -> n29  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n3 -> n75  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n3 -> n30  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n3 -> n78  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
n4 -> n5  [key=0, style=solid];
n4 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n4 -> n6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n4 -> n16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
n11 -> n12  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n8 -> n4  [key=0, style=bold, color=blue];
n13 -> n11  [key=0, style=bold, color=blue];
n17 -> n15  [key=0, style=bold, color=blue];
n19 -> n20  [key=0, style=solid, color=red];
n19 -> n36  [key=2, style=dotted, color=red];
n19 -> n24  [key=1, style=dashed, color=red, label=instance];
n19 -> n32  [key=1, style=dashed, color=red, label=instance];
n23 -> n24  [key=0, style=solid, color=red];
n23 -> n25  [key=0, style=solid];
n23 -> n41  [key=2, style=dotted];
n23 -> n42  [key=2, style=dotted];
n23 -> n43  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n46  [key=2, style=dotted];
n25 -> n34  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
n27 -> n28  [key=0, style=solid];
n27 -> n47  [key=2, style=dotted];
n27 -> n66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n27 -> n29  [key=1, style=dashed, color=darkseagreen4, label=partitions];
n27 -> n30  [key=1, style=dashed, color=darkseagreen4, label=partitions];
n67 -> n68  [key=0, style=solid];
n67 -> n69  [key=2, style=dotted];
n28 -> n29  [key=0, style=solid];
n28 -> n48  [key=2, style=dotted];
n28 -> n49  [key=2, style=dotted];
n28 -> n28  [key=1, style=dashed, color=darkseagreen4, label=pt];
n28 -> n70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n28 -> n31  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
n28 -> n34  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
n71 -> n72  [key=0, style=solid];
n71 -> n73  [key=2, style=dotted];
n29 -> n30  [key=0, style=solid];
n29 -> n50  [key=2, style=dotted];
n29 -> n49  [key=2, style=dotted];
n29 -> n29  [key=1, style=dashed, color=darkseagreen4, label=pt];
n29 -> n74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n29 -> n31  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
n29 -> n34  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
n75 -> n76  [key=0, style=solid];
n75 -> n73  [key=2, style=dotted];
n30 -> n31  [key=0, style=solid];
n30 -> n51  [key=2, style=dotted];
n30 -> n52  [key=2, style=dotted];
n30 -> n53  [key=2, style=dotted];
n30 -> n30  [key=1, style=dashed, color=darkseagreen4, label=token];
n30 -> n77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n30 -> n78  [key=1, style=dashed, color=darkseagreen4, label=token];
n30 -> n34  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
n78 -> n79  [key=0, style=solid];
n78 -> n80  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid, color=red];
n20 -> n37  [key=2, style=dotted, color=red];
n20 -> n38  [key=2, style=dotted, color=red];
n20 -> n60  [key=1, style=dashed, color=red, label="lambda expression"];
n20 -> n28  [key=1, style=dashed, color=red, label=specProps];
n20 -> n29  [key=1, style=dashed, color=red, label=specProps];
n24 -> n35  [key=0, style=solid, color=red];
n24 -> n44  [key=2, style=dotted, color=red];
n24 -> n45  [key=2, style=dotted, color=red];
n32 -> n33  [key=0, style=solid, color=red];
n32 -> n55  [key=2, style=dotted, color=red];
n32 -> n32  [key=1, style=dashed, color=red, label=instance];
n32 -> n81  [key=1, style=dashed, color=red, label="lambda expression"];
n32 -> n85  [key=1, style=dashed, color=red, label="lambda expression"];
n32 -> n89  [key=1, style=dashed, color=red, label="lambda expression"];
n32 -> n93  [key=1, style=dashed, color=red, label="lambda expression"];
n32 -> n96  [key=1, style=dashed, color=red, label="lambda expression"];
n32 -> n100  [key=1, style=dashed, color=red, label="lambda expression"];
n32 -> n34  [key=1, style=dashed, color=red, label=instance];
n21 -> n22  [key=0, style=solid];
n21 -> n21  [key=1, style=dashed, color=darkseagreen4, label=pt];
n60 -> n61  [key=0, style=solid, color=red];
n22 -> n23  [key=0, style=solid];
n22 -> n39  [key=2, style=dotted];
n22 -> n40  [key=2, style=dotted];
n22 -> n25  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n22 -> n27  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n22 -> n67  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n22 -> n30  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
n26 -> n27  [key=0, style=solid];
n26 -> n33  [key=1, style=dashed, color=darkseagreen4, label=tokens];
n34 -> n35  [key=0, style=solid];
n34 -> n58  [key=2, style=dotted];
n34 -> n59  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n56  [key=2, style=dotted];
n33 -> n57  [key=2, style=dotted];
n66 -> n67  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n31 -> n32  [key=0, style=solid, color=red];
n31 -> n54  [key=2, style=dotted];
n31 -> n33  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
n74 -> n75  [key=0, style=solid];
n77 -> n78  [key=0, style=solid];
n81 -> n82  [key=0, style=solid, color=red];
n85 -> n86  [key=0, style=solid, color=red];
n89 -> n90  [key=0, style=solid, color=red];
n93 -> n94  [key=0, style=solid, color=red];
n96 -> n97  [key=0, style=solid, color=red];
n100 -> n101  [key=0, style=solid, color=red];
n35 -> n3  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid, color=red];
n61 -> n63  [key=2, style=dotted, color=red];
n61 -> n64  [key=2, style=dotted, color=red];
n61 -> n65  [key=2, style=dotted, color=red];
n62 -> n60  [key=0, style=bold, color=blue];
n68 -> n66  [key=0, style=bold, color=blue];
n72 -> n70  [key=0, style=bold, color=blue];
n76 -> n74  [key=0, style=bold, color=blue];
n79 -> n77  [key=0, style=bold, color=blue];
n82 -> n83  [key=0, style=solid, color=red];
n82 -> n84  [key=2, style=dotted, color=red];
n83 -> n81  [key=0, style=bold, color=blue];
n86 -> n87  [key=0, style=solid, color=red];
n86 -> n88  [key=2, style=dotted, color=red];
n87 -> n85  [key=0, style=bold, color=blue];
n90 -> n91  [key=0, style=solid, color=red];
n90 -> n92  [key=2, style=dotted, color=red];
n90 -> n84  [key=2, style=dotted, color=red];
n91 -> n89  [key=0, style=bold, color=blue];
n94 -> n95  [key=0, style=solid, color=red];
n94 -> n88  [key=2, style=dotted, color=red];
n95 -> n93  [key=0, style=bold, color=blue];
n97 -> n98  [key=0, style=solid, color=red];
n97 -> n92  [key=2, style=dotted, color=red];
n97 -> n99  [key=2, style=dotted, color=red];
n98 -> n96  [key=0, style=bold, color=blue];
n101 -> n102  [key=0, style=solid, color=red];
n101 -> n103  [key=2, style=dotted, color=red];
n101 -> n104  [key=2, style=dotted, color=red];
n101 -> n105  [key=2, style=dotted, color=red];
n102 -> n100  [key=0, style=bold, color=blue];
d4 -> d5  [key=0, style=solid, color=green];
d3 -> d4  [key=0, style=solid, color=green];
d5 -> d3  [key=0, style=bold, color=blue];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d9  [key=2, style=dotted, color=green];
d6 -> d7  [key=0, style=solid, color=green];
d8 -> d6  [key=0, style=bold, color=blue];
d11 -> d12  [key=0, style=solid, color=green];
d10 -> d11  [key=0, style=solid, color=green];
d12 -> d10  [key=0, style=bold, color=blue];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_4 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_9  [key=2, style=dotted];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_10  [key=2, style=dotted];
m1_8 -> m1_4  [key=0, style=bold, color=blue];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_4  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<System.Type> types"];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_9  [key=2, style=dotted];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_10  [key=2, style=dotted];
m1_14 -> m1_6  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo parsingCulture"];
m1_15 -> m1_11  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> n103  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
}
