digraph  {
m0_0 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="StringBuilderExtensions.cs"];
m0_1 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-22", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="StringBuilderExtensions.cs"];
m0_2 [label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="StringBuilderExtensions.cs"];
m0_3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="StringBuilderExtensions.cs"];
m0_11 [label="Entry lambda expression", span="18-19", cluster="lambda expression", file="StringBuilderExtensions.cs"];
m0_5 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="17-20", cluster="lambda expression", file="StringBuilderExtensions.cs"];
m0_4 [label="Entry lambda expression", span="16-20", cluster="lambda expression", file="StringBuilderExtensions.cs"];
m0_12 [label="info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }", span="19-19", cluster="lambda expression", file="StringBuilderExtensions.cs"];
m0_6 [label="Exit lambda expression", span="16-20", cluster="lambda expression", file="StringBuilderExtensions.cs"];
m0_13 [label="Exit lambda expression", span="18-19", cluster="lambda expression", file="StringBuilderExtensions.cs"];
m0_10 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="StringBuilderExtensions.cs"];
m0_7 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="StringBuilderExtensions.cs"];
m0_8 [label="Entry CommandLine.Core.Token.IsValue()", span="73-73", cluster="CommandLine.Core.Token.IsValue()", file="StringBuilderExtensions.cs"];
m0_9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="StringBuilderExtensions.cs"];
m0_14 [label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span="", file="StringBuilderExtensions.cs"];
m0_15 [label="CommandLine.Core.Token", span="", file="StringBuilderExtensions.cs"];
m0_16 [label="CommandLine.Core.Token", span="", file="StringBuilderExtensions.cs"];
m1_0 [label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="17-17", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="UnParserExtensions.cs"];
m1_1 [label="this.index = index", span="19-19", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", color=green, community=0, file="UnParserExtensions.cs"];
m1_2 [label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="17-17", cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="UnParserExtensions.cs"];
m1_3 [label="CommandLine.ValueAttribute", span="", file="UnParserExtensions.cs"];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label=tseq];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_11 -> m0_12  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [key=2, style=dotted];
m0_5 -> m0_8  [key=2, style=dotted];
m0_5 -> m0_9  [key=2, style=dotted];
m0_5 -> m0_10  [key=2, style=dotted];
m0_5 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m0_12 -> m0_13  [key=0, style=solid];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_13 -> m0_11  [key=0, style=bold, color=blue];
m0_14 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m0_15 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m0_16 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_3 -> m1_1  [key=1, style=dashed, color=green, label="CommandLine.ValueAttribute"];
}
