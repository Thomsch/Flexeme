digraph  {
m0_0 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m0_1 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="StringBuilderExtensions.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-22"];
m0_2 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m0_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="StringBuilderExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
m0_11 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="18-19"];
m0_5 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="17-20"];
m0_4 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="16-20"];
m0_12 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="info.Tag == TypeDescriptorKind.Scalar ? new[] { f, s } : new Token[] { }", span="19-19"];
m0_6 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="16-20"];
m0_13 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="18-19"];
m0_10 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m0_7 [cluster="CommandLine.Core.Token.IsName()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m0_8 [cluster="CommandLine.Core.Token.IsValue()", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
m0_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="StringBuilderExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_14 [file="StringBuilderExtensions.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m0_15 [file="StringBuilderExtensions.cs", label="CommandLine.Core.Token", span=""];
m0_16 [file="StringBuilderExtensions.cs", label="CommandLine.Core.Token", span=""];
m1_0 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="UnParserExtensions.cs", label="Entry CommandLine.ValueAttribute.ValueAttribute(int)", span="17-17"];
m1_1 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", color=green, community=0, file="UnParserExtensions.cs", label="this.index = index", prediction=0, span="19-19"];
m1_2 [cluster="CommandLine.ValueAttribute.ValueAttribute(int)", file="UnParserExtensions.cs", label="Exit CommandLine.ValueAttribute.ValueAttribute(int)", span="17-17"];
m1_3 [file="UnParserExtensions.cs", label="CommandLine.ValueAttribute", span=""];
m0_0 -> m0_5  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_1 -> m0_1  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m0_5 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m0_14 -> m0_5  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m0_15 -> m0_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m0_16 -> m0_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
}
