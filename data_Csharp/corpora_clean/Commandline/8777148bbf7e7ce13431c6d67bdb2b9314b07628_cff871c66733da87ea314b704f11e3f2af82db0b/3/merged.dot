digraph  {
n0 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)"];
n1 [label="return type.GetGenericArguments()[0];", span="10-10", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)"];
n2 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="8-8", cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)"];
n3 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
n4 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)"];
n5 [label="var optionType = typeof(FSharpOption<>)", span="15-15", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)"];
n6 [label="var typedType = optionType.MakeGenericType(type)", span="16-16", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)"];
n7 [label="return typedType.InvokeMember(\r\n                ''Some'',\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new [] { value });", span="18-23", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", color=red, community=2];
n9 [label="Entry System.Type.MakeGenericType(params System.Type[])", span="0-0", cluster="System.Type.MakeGenericType(params System.Type[])"];
n8 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13", cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)"];
n10 [label="Entry System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", span="0-0", cluster="System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])"];
n11 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)"];
n12 [label="var optionType = typeof(FSharpOption<>)", span="28-28", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)"];
n13 [label="var typedType = optionType.MakeGenericType(type)", span="29-29", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)"];
n14 [label="return typedType.InvokeMember(\r\n                ''None'',\r\n                BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new object[] {});", span="31-36", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", color=red, community=2];
n15 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26", cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)"];
n16 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="39-39", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)"];
n17 [label="var optionType = typeof(FSharpOption<>)", span="41-41", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)"];
n18 [label="var typedType = optionType.MakeGenericType(GetUnderlyingType(value.GetType()))", span="42-42", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)"];
n19 [label="return typedType.InvokeMember(\r\n                ''Value'',\r\n                BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Instance,\r\n                null,\r\n                value,\r\n                new object[] { });", span="44-49", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)"];
n21 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n20 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)", span="39-39", cluster="CommandLine.Infrastructure.FSharpOptionHelper.ValueOf(object)"];
n22 [label="Entry CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="52-52", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)"];
n23 [label="var optionType = typeof(FSharpOption<>)", span="54-54", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)"];
n24 [label="var typedType = optionType.MakeGenericType(GetUnderlyingType(value.GetType()))", span="55-55", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)"];
n25 [label="return (bool)typedType.InvokeMember(\r\n                ''get_IsSome'',\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new [] { value });", span="57-62", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", color=red, community=1];
n26 [label="Exit CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)", span="52-52", cluster="CommandLine.Infrastructure.FSharpOptionHelper.IsSome(object)"];
m0_35 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ReflectionExtensions.cs"];
m0_10 [label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="ReflectionExtensions.cs"];
m0_11 [label=guardsLookup, span="40-40", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="ReflectionExtensions.cs"];
m0_12 [label="specifications.Any(spec => guard.Item1(spec))", span="42-42", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="ReflectionExtensions.cs"];
m0_14 [label="return specifications;", span="48-48", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="ReflectionExtensions.cs"];
m0_13 [label="throw new ApplicationException(guard.Item2);", span="44-44", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="ReflectionExtensions.cs"];
m0_15 [label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="38-38", cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="ReflectionExtensions.cs"];
m0_34 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ReflectionExtensions.cs"];
m0_33 [label="Entry System.Type.ToDescriptorKind()", span="22-22", cluster="System.Type.ToDescriptorKind()", file="ReflectionExtensions.cs"];
m0_0 [label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_1 [label="return specification.Tag == SpecificationType.Option;", span="13-13", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_2 [label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="11-11", cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_3 [label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_4 [label="return specification.Tag == SpecificationType.Value;", span="18-18", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_5 [label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="16-16", cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_18 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_19 [label="guard.Item1(spec)", span="42-42", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_20 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="ReflectionExtensions.cs"];
m0_22 [label="Entry CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="51-51", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_23 [label="specification.ConversionType.ToDescriptorKind()", span="53-53", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_27 [label="var min = specification.Min", span="58-58", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_28 [label="var max = specification.Max", span="59-59", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_24 [label="TypeDescriptorKind.Scalar", span="55-55", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_26 [label="TypeDescriptorKind.Sequence", span="57-57", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_25 [label="return  Maybe.Just(1);", span="56-56", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_29 [label="min >= 0 && max >= 0", span="60-60", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_30 [label="return Maybe.Just(max);", span="62-62", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_31 [label="return Maybe.Nothing<int>();", span="67-67", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_32 [label="Exit CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", span="51-51", cluster="CommandLine.Core.SpecificationExtensions.GetMaxValueCount(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_21 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="ReflectionExtensions.cs"];
m0_36 [label="Entry CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", span="70-70", cluster="CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_37 [label="return specification.Min == -1;", span="72-72", cluster="CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_38 [label="Exit CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", span="70-70", cluster="CommandLine.Core.SpecificationExtensions.IsMinNotSpecified(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_9 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="ReflectionExtensions.cs"];
m0_17 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)", file="ReflectionExtensions.cs"];
m0_42 [label="Entry CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", span="80-80", cluster="CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_43 [label="return specification.IsOption()\r\n                ? ((OptionSpecification)specification).SetName\r\n                : string.Empty;", span="82-84", cluster="CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_44 [label="Exit CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", span="80-80", cluster="CommandLine.Core.SpecificationExtensions.GetSetName(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_16 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="ReflectionExtensions.cs"];
m0_45 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="ReflectionExtensions.cs"];
m0_6 [label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", span="21-21", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="ReflectionExtensions.cs"];
m0_7 [label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                enumValues);", span="23-35", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="ReflectionExtensions.cs"];
m0_8 [label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", span="21-21", cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="ReflectionExtensions.cs"];
m0_39 [label="Entry CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", span="75-75", cluster="CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_40 [label="return specification.Max == -1;", span="77-77", cluster="CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_41 [label="Exit CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", span="75-75", cluster="CommandLine.Core.SpecificationExtensions.IsMaxNotSpecified(CommandLine.Core.Specification)", file="ReflectionExtensions.cs"];
m0_46 [label=guard, span="", file="ReflectionExtensions.cs"];
m2_4 [label="Entry CommandLine.Parser.FormatCommandLine<T>(T)", span="57-57", cluster="CommandLine.Parser.FormatCommandLine<T>(T)", file="UnParserExtensionsTests.cs"];
m2_20 [label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="71-71", cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", file="UnParserExtensionsTests.cs"];
m2_28 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="UnParserExtensionsTests.cs"];
m2_3 [label="Entry CommandLine.Parser.Parser()", span="26-26", cluster="CommandLine.Parser.Parser()", file="UnParserExtensionsTests.cs"];
m2_15 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", span="50-50", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", file="UnParserExtensionsTests.cs"];
m2_16 [label="var options = new FakeOptionsWithSwitches { InputFile = ''input.bin'', HumanReadable = true, IgnoreWarnings = true }", span="52-52", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", color=green, community=0, file="UnParserExtensionsTests.cs"];
m2_17 [label="new Parser()\r\n                .FormatCommandLine(options, config => config.GroupSwitches = true)\r\n                .ShouldBeEquivalentTo(''-hi --input input.bin'')", span="53-55", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", color=green, community=0, file="UnParserExtensionsTests.cs"];
m2_18 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", span="50-50", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_group_switches_returns_command_line_with_switches_grouped()", file="UnParserExtensionsTests.cs"];
m2_12 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", span="42-42", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="UnParserExtensionsTests.cs"];
m2_13 [label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="44-46", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="UnParserExtensionsTests.cs"];
m2_14 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", span="42-42", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_fsharp_option_returns_command_line(CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption, string)", file="UnParserExtensionsTests.cs"];
m2_9 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", span="33-33", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="UnParserExtensionsTests.cs"];
m2_10 [label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="35-37", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="UnParserExtensionsTests.cs"];
m2_11 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", span="33-33", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_immutable_instance_returns_command_line(CommandLine.Tests.Fakes.FakeImmutableOptions, string)", file="UnParserExtensionsTests.cs"];
m2_29 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="UnParserExtensionsTests.cs"];
m2_21 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="UnParserExtensionsTests.cs"];
m2_22 [label="config.GroupSwitches = true", span="54-54", cluster="lambda expression", color=green, community=0, file="UnParserExtensionsTests.cs"];
m2_23 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="UnParserExtensionsTests.cs"];
m2_30 [label="config.UseEqualToken = true", span="63-63", cluster="lambda expression", file="UnParserExtensionsTests.cs"];
m2_31 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="UnParserExtensionsTests.cs"];
m2_19 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSwitches.FakeOptionsWithSwitches()", file="UnParserExtensionsTests.cs"];
m2_6 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="24-24", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs"];
m2_7 [label="new Parser()\r\n                .FormatCommandLine(options)\r\n                .ShouldBeEquivalentTo(result)", span="26-28", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs"];
m2_8 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", span="24-24", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line_for_verbs(CommandLine.Tests.Fakes.AddOptions, string)", file="UnParserExtensionsTests.cs"];
m2_24 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", span="59-59", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", file="UnParserExtensionsTests.cs"];
m2_26 [label="new Parser()\r\n                .FormatCommandLine(options, config => config.UseEqualToken = true)\r\n                .ShouldBeEquivalentTo(''-i 1 2 3 --stringvalue=nospaces -x 123456789'')", span="62-64", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", file="UnParserExtensionsTests.cs"];
m2_25 [label="var options = new FakeOptions { BoolValue = true, IntSequence = new[] { 1, 2, 3 }, StringValue = ''nospaces'', LongValue = 123456789 }", span="61-61", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", file="UnParserExtensionsTests.cs"];
m2_27 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", span="59-59", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_with_equal_token_returns_command_line_with_long_option_using_equal_sign()", file="UnParserExtensionsTests.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="15-15", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m2_1 [label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", span="17-19", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m2_2 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="15-15", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m2_5 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensionsTests.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n4 -> n6  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n4 -> n7  [key=1, style=dashed, color=red, label=object];
n5 -> n6  [key=0, style=solid];
n6 -> n7  [key=0, style=solid, color=red];
n6 -> n9  [key=2, style=dotted];
n7 -> n8  [key=0, style=solid, color=red];
n7 -> n10  [key=2, style=dotted, color=red];
n8 -> n4  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n11 -> n13  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid, color=red];
n13 -> n9  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid, color=red];
n14 -> n10  [key=2, style=dotted, color=red];
n15 -> n11  [key=0, style=bold, color=blue];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=1, style=dashed, color=darkseagreen4, label=object];
n16 -> n19  [key=1, style=dashed, color=darkseagreen4, label=object];
n17 -> n18  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n18 -> n21  [key=2, style=dotted];
n18 -> n0  [key=2, style=dotted];
n18 -> n9  [key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n10  [key=2, style=dotted];
n20 -> n16  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [key=1, style=dashed, color=darkseagreen4, label=object];
n22 -> n25  [key=1, style=dashed, color=red, label=object];
n23 -> n24  [key=0, style=solid];
n24 -> n25  [key=0, style=solid, color=red];
n24 -> n21  [key=2, style=dotted];
n24 -> n0  [key=2, style=dotted];
n24 -> n9  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid, color=red];
n25 -> n10  [key=2, style=dotted, color=red];
n26 -> n22  [key=0, style=bold, color=blue];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m0_10 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>"];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_14  [key=0, style=solid];
m0_11 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label=guard];
m0_11 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=guard];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_11  [key=0, style=solid];
m0_12 -> m0_16  [key=2, style=dotted];
m0_12 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_14 -> m0_15  [key=0, style=solid];
m0_13 -> m0_15  [key=0, style=solid];
m0_13 -> m0_17  [key=2, style=dotted];
m0_15 -> m0_10  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_3 -> m0_4  [key=0, style=solid];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_3  [key=0, style=bold, color=blue];
m0_18 -> m0_19  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_21  [key=2, style=dotted];
m0_20 -> m0_18  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_22 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_26  [key=0, style=solid];
m0_23 -> m0_33  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=min];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label=max];
m0_24 -> m0_25  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_25 -> m0_32  [key=0, style=solid];
m0_25 -> m0_34  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=0, style=solid];
m0_30 -> m0_32  [key=0, style=solid];
m0_30 -> m0_34  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_35  [key=2, style=dotted];
m0_32 -> m0_22  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_38 -> m0_36  [key=0, style=bold, color=blue];
m0_42 -> m0_43  [key=0, style=solid];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [key=2, style=dotted];
m0_44 -> m0_42  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_9  [key=2, style=dotted];
m0_8 -> m0_6  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_40 -> m0_41  [key=0, style=solid];
m0_41 -> m0_39  [key=0, style=bold, color=blue];
m0_46 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label=guard];
m2_15 -> m2_16  [key=0, style=solid, color=green];
m2_16 -> m2_17  [key=0, style=solid, color=green];
m2_16 -> m2_19  [key=2, style=dotted, color=green];
m2_17 -> m2_18  [key=0, style=solid, color=green];
m2_17 -> m2_3  [key=2, style=dotted, color=green];
m2_17 -> m2_20  [key=2, style=dotted, color=green];
m2_17 -> m2_5  [key=2, style=dotted, color=green];
m2_17 -> m2_21  [key=1, style=dashed, color=green, label="lambda expression"];
m2_18 -> m2_15  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid];
m2_13 -> m2_3  [key=2, style=dotted];
m2_13 -> m2_5  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_4  [key=2, style=dotted];
m2_14 -> m2_12  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_10 -> m2_3  [key=2, style=dotted];
m2_10 -> m2_5  [key=2, style=dotted];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_4  [key=2, style=dotted];
m2_11 -> m2_9  [key=0, style=bold, color=blue];
m2_29 -> m2_30  [key=0, style=solid];
m2_21 -> m2_22  [key=0, style=solid, color=green];
m2_22 -> m2_23  [key=0, style=solid, color=green];
m2_23 -> m2_21  [key=0, style=bold, color=blue];
m2_30 -> m2_31  [key=0, style=solid];
m2_31 -> m2_29  [key=0, style=bold, color=blue];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_3  [key=2, style=dotted];
m2_7 -> m2_5  [key=2, style=dotted];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_4  [key=2, style=dotted];
m2_8 -> m2_6  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_26 -> m2_3  [key=2, style=dotted];
m2_26 -> m2_20  [key=2, style=dotted];
m2_26 -> m2_5  [key=2, style=dotted];
m2_26 -> m2_27  [key=0, style=solid];
m2_26 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_28  [key=2, style=dotted];
m2_27 -> m2_24  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_1 -> m2_5  [key=2, style=dotted];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [key=2, style=dotted];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
}
