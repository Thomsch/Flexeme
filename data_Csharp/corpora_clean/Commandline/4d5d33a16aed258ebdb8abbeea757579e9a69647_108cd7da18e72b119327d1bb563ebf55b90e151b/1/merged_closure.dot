digraph  {
n0 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.ConvertNumberUnderThousand(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="Entry Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.ConvertNumberUnderThousand(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", span="19-19"];
n19 [cluster="System.Text.StringBuilder.StringBuilder()", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
n20 [cluster="System.Text.StringBuilder.AppendFormat(string, object)", label="Entry System.Text.StringBuilder.AppendFormat(string, object)", span="0-0"];
n18 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.ConvertNumberUnderThousand(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="Exit Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.ConvertNumberUnderThousand(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", span="19-19"];
n21 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n22 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetMappingIndex(int)", label="Entry Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetMappingIndex(int)", span="51-51"];
n32 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetMappingIndex(int)", label="return 2;", span="67-67"];
n30 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetMappingIndex(int)", label="unity > 1 && unity < 5", span="63-63"];
n31 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetMappingIndex(int)", label="return 1;", span="64-64"];
n33 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetMappingIndex(int)", label="Exit Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetMappingIndex(int)", span="51-51"];
n34 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="Entry Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", span="70-70"];
n35 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label=numeral, span="72-72"];
n38 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="return miliard[GetMappingIndex(num)];", span="76-76"];
n41 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="return million[GetMappingIndex(num)];", span="79-79"];
n44 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="return thousand[GetMappingIndex(num)];", span="82-82"];
n36 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="Numeral.Miliard", span="74-74"];
n39 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="Numeral.Million", span="77-77"];
n42 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="Numeral.Thousand", span="80-80"];
n45 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="return string.Empty;", span="84-84"];
n37 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="var miliard = new[] { ''miliard'', ''miliardy'', ''miliardów'' }", span="75-75"];
n40 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="var million = new[] { ''milion'', ''miliony'', ''milionów'' }", span="78-78"];
n43 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="var thousand = new[] { ''tysiąc'', ''tysiące'', ''tysięcy'' }", span="81-81"];
n46 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", label="Exit Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.GetSuffix(Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Numeral, int)", span="70-70"];
n47 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="Entry Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", span="88-88"];
n48 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="number == 0", span="90-90"];
n51 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="number < 0", span="95-95"];
n53 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="number = Math.Abs(number)", span="98-98"];
n56 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="var num = number / (int)numeral", span="104-104"];
n59 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="number %= (int)numeral", span="108-108"];
n49 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="return Zero;", span="91-91"];
n50 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="var result = new StringBuilder()", span="93-93"];
n52 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="result.AppendFormat(@''{0} '', Negative)", span="97-97"];
n58 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="result.AppendFormat(@''{0}{1} '', ConvertNumberUnderThousand(numeral, num), GetSuffix(numeral, num))", span="107-107"];
n60 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="return result.ToString().Trim();", span="112-112"];
n54 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="var numerals = ((Numeral[])Enum.GetValues(typeof(Numeral))).Reverse()", span="101-101"];
n62 [cluster="System.Math.Abs(int)", label="Entry System.Math.Abs(int)", span="0-0"];
n55 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label=numerals, span="102-102"];
n63 [cluster="System.Enum.GetValues(System.Type)", label="Entry System.Enum.GetValues(System.Type)", span="0-0"];
n64 [cluster="System.Collections.Generic.IEnumerable<TSource>.Reverse<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Reverse<TSource>()", span="0-0"];
n57 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="num > 0", span="105-105"];
n65 [cluster="System.Text.StringBuilder.AppendFormat(string, object, object)", label="Entry System.Text.StringBuilder.AppendFormat(string, object, object)", span="0-0"];
n61 [cluster="Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", label="Exit Humanizer.Localisation.NumberToWords.PolishNumberToWordsConverter.Convert(int)", span="88-88"];
n66 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
m0_8 [cluster="CSharpx.EnumerableExtensions.ToUntypedArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="EnumerableExtensionsExtra.cs", label="Entry CSharpx.EnumerableExtensions.ToUntypedArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="24-24"];
m0_9 [cluster="CSharpx.EnumerableExtensions.ToUntypedArray(System.Collections.Generic.IEnumerable<object>, System.Type)", color=green, community=0, file="EnumerableExtensionsExtra.cs", label="var array = Array.CreateInstance(type, value.Count())", prediction=0, span="26-26"];
m0_10 [cluster="CSharpx.EnumerableExtensions.ToUntypedArray(System.Collections.Generic.IEnumerable<object>, System.Type)", color=green, community=0, file="EnumerableExtensionsExtra.cs", label="value.ToArray().CopyTo(array, 0)", prediction=1, span="27-27"];
m0_11 [cluster="CSharpx.EnumerableExtensions.ToUntypedArray(System.Collections.Generic.IEnumerable<object>, System.Type)", color=green, community=0, file="EnumerableExtensionsExtra.cs", label="return array;", prediction=0, span="28-28"];
m0_12 [cluster="CSharpx.EnumerableExtensions.ToUntypedArray(System.Collections.Generic.IEnumerable<object>, System.Type)", file="EnumerableExtensionsExtra.cs", label="Exit CSharpx.EnumerableExtensions.ToUntypedArray(System.Collections.Generic.IEnumerable<object>, System.Type)", span="24-24"];
m0_0 [cluster="CSharpx.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", file="EnumerableExtensionsExtra.cs", label="Entry CSharpx.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", span="10-10"];
m0_1 [cluster="CSharpx.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", color=green, community=0, file="EnumerableExtensionsExtra.cs", label="var index = -1", prediction=3, span="12-12"];
m0_2 [cluster="CSharpx.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", color=green, community=0, file="EnumerableExtensionsExtra.cs", label=source, prediction=4, span="13-13"];
m0_3 [cluster="CSharpx.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", color=green, community=0, file="EnumerableExtensionsExtra.cs", label="index++", prediction=3, span="15-15"];
m0_5 [cluster="CSharpx.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", color=green, community=0, file="EnumerableExtensionsExtra.cs", label="return index;", prediction=3, span="21-21"];
m0_4 [cluster="CSharpx.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", color=green, community=0, file="EnumerableExtensionsExtra.cs", label="predicate(item)", prediction=4, span="16-16"];
m0_6 [cluster="CSharpx.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", file="EnumerableExtensionsExtra.cs", label="Exit CSharpx.EnumerableExtensions.IndexOf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, bool>)", span="10-10"];
m0_17 [cluster="CSharpx.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="EnumerableExtensionsExtra.cs", label="Entry CSharpx.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="31-31"];
m0_18 [cluster="CSharpx.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", color=green, community=0, file="EnumerableExtensionsExtra.cs", label="return !source.Any();", prediction=8, span="33-33"];
m0_19 [cluster="CSharpx.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="EnumerableExtensionsExtra.cs", label="Exit CSharpx.EnumerableExtensions.Empty<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="31-31"];
m0_13 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="EnumerableExtensionsExtra.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m0_20 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="EnumerableExtensionsExtra.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_14 [cluster="System.Array.CreateInstance(System.Type, int)", file="EnumerableExtensionsExtra.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m0_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="EnumerableExtensionsExtra.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m0_16 [cluster="System.Array.CopyTo(System.Array, int)", file="EnumerableExtensionsExtra.cs", label="Entry System.Array.CopyTo(System.Array, int)", span="0-0"];
m0_7 [cluster="System.Func<T, TResult>.Invoke(T)", file="EnumerableExtensionsExtra.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m1_0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m1_1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-32"];
m1_2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
m1_4 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="22-29"];
m1_3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m1_5 [cluster="lambda expression", file="InstanceBuilder.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24"];
m1_6 [cluster="lambda expression", file="InstanceBuilder.cs", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-27"];
m1_50 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="InstanceBuilder.cs", label="var sut = new Parser()", span="87-87"];
m1_8 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="22-29"];
m1_154 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m1_155 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="InstanceBuilder.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_156 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="InstanceBuilder.cs", label="CSharpx.Maybe<System.Func<T>>", span=""];
m1_158 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="InstanceBuilder.cs", label="System.StringComparer", span=""];
m1_157 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="InstanceBuilder.cs", label=specProps, span=""];
m1_159 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="InstanceBuilder.cs", label=optionSpecs, span=""];
m1_160 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_screen()", file="InstanceBuilder.cs", label="System.Globalization.CultureInfo", span=""];
m1_93 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="171-171"];
m1_60 [cluster="Unk.MapValues", file="InstanceBuilder.cs", label="Entry Unk.MapValues", span=""];
m1_115 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="99-99"];
m1_116 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Value.IsJust()", span="99-99"];
m1_117 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="99-99"];
m1_118 [cluster="CSharpx.Maybe<T>.IsJust<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="175-175"];
m1_119 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="100-100"];
m1_393 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="659-659"];
m1_394 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="664-664"];
m1_395 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Simple_Options>(arguments)", span="667-667"];
m1_397 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="InstanceBuilder.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="671-671"];
m1_396 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="InstanceBuilder.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="670-670"];
m1_398 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing(string[], CommandLine.Tests.Fakes.Simple_Options)", span="659-659"];
m1_79 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="139-139"];
m1_61 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112"];
m1_71 [cluster="System.Reflection.MethodBase.GetParameters()", file="InstanceBuilder.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m1_72 [cluster="string.ToLower()", file="InstanceBuilder.cs", label="Entry string.ToLower()", span="0-0"];
m1_73 [cluster="System.Type.CreateDefaultForImmutable()", file="InstanceBuilder.cs", label="Entry System.Type.CreateDefaultForImmutable()", span="125-125"];
m1_76 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m1_74 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m1_75 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="InstanceBuilder.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m1_77 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
m1_7 [cluster="lambda expression", file="InstanceBuilder.cs", label="return explodedTokens;", span="28-28"];
m1_136 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="108-108"];
m1_138 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="InstanceBuilder.cs", label="var expectedError = new HelpRequestedError()", span="284-284"];
m1_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", span="45-45"];
m1_9 [cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", file="InstanceBuilder.cs", label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85"];
m1_308 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", span="529-529"];
m1_309 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="532-532"];
m1_310 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="533-533"];
m1_312 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="537-537"];
m1_311 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { })", span="536-536"];
m1_313 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="540-540"];
m1_314 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="542-542"];
m1_315 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="543-543"];
m1_316 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="549-549"];
m1_317 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="550-550"];
m1_318 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="551-551"];
m1_319 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="552-552"];
m1_320 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="553-553"];
m1_321 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb()", span="529-529"];
m1_88 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="InstanceBuilder.cs", label="var expectedOptions = new Options_With_Switches()", span="159-159"];
m1_89 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_single_dash()", file="InstanceBuilder.cs", label="var sut = new Parser()", span="160-160"];
m1_326 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", span="559-559"];
m1_327 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="562-562"];
m1_328 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="563-563"];
m1_330 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="567-567"];
m1_329 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { ''secert'', ''--help'' })", span="566-566"];
m1_331 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="570-570"];
m1_332 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="572-572"];
m1_333 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="573-573"];
m1_334 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="lines[2].ShouldBeEquivalentTo(''-f, --force    Allow adding otherwise ignored files.'')", span="579-579"];
m1_335 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="lines[3].ShouldBeEquivalentTo(''--help         Display this help screen.'')", span="580-580"];
m1_336 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="lines[4].ShouldBeEquivalentTo(''--version      Display version information.'')", span="581-581"];
m1_337 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_there_is_a_hidden_verb_selected_usage_displays_with_hidden_option()", span="559-559"];
m1_359 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", span="607-607"];
m1_360 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="var expectedOptions = new Secert_Verb { Force = true, SecertOption = ''shhh'' }", span="610-610"];
m1_361 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="611-611"];
m1_367 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="621-621"];
m1_362 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="612-612"];
m1_363 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { ''secert'', ''--force'', ''--secert-option'', ''shhh'' })", span="615-615"];
m1_364 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="618-618"];
m1_365 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="result.GetType().Should().Be<Parsed<object>>()", span="619-619"];
m1_366 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="result.TypeInfo.Current.Should().Be<Secert_Verb>()", span="620-620"];
m1_368 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb_with_hidden_option()", span="607-607"];
m1_446 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", span="751-751"];
m1_447 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="var sameValues = new[] { ''--stringvalue=test'', ''--shortandlong=test'' }", span="753-753"];
m1_448 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="var sut = new Parser(parserSettings => { parserSettings.IgnoreUnknownArguments = true; })", span="754-754"];
m1_449 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Simple_Options>(sameValues)", span="755-755"];
m1_450 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="result.MapResult(_ => true, _ => false).Should().BeTrue()", span="757-757"];
m1_451 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Arguments_with_the_same_values_when_unknown_arguments_are_ignored()", span="751-751"];
m1_53 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_short_name(string, string[])", span="83-83"];
m1_235 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="416-416"];
m1_236 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="419-419"];
m1_238 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { command })", span="423-423"];
m1_237 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="420-420"];
m1_239 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="var result = help.ToString()", span="424-424"];
m1_240 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="result.Length.Should().BeGreaterThan(0)", span="427-427"];
m1_241 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="428-428"];
m1_242 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="lines.Should().HaveCount(x => x == 1)", span="429-429"];
m1_243 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="431-431"];
m1_244 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen_in_verbs_scenario(string)", span="416-416"];
m1_144 [cluster="lambda expression", file="InstanceBuilder.cs", label=d, span="116-116"];
m1_64 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="InstanceBuilder.cs", label="var result =\r\n                sut.ParseArguments<Simple_Options_With_Values>(\r\n                    new[] { ''--stringvalue'', ''astring'', ''--'', ''20'', ''--aaa'', ''-b'', ''--ccc'', ''30'' })", span="125-127"];
m1_47 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m1_58 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_repeated_options_with_default_parser()", file="InstanceBuilder.cs", label="Assert.IsType<NotParsed<Options_With_Switches>>(result)", span="107-107"];
m1_86 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="44-45"];
m1_87 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
m1_90 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="53-57"];
m1_91 [cluster="lambda expression", file="InstanceBuilder.cs", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-57"];
m1_92 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="53-57"];
m1_104 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
m1_105 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="85-85"];
m1_107 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="85-85"];
m1_106 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="85-85"];
m1_109 [cluster="lambda expression", file="InstanceBuilder.cs", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89"];
m1_108 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="89-89"];
m1_110 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="89-89"];
m1_68 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="122-122"];
m1_111 [cluster="CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.Commit_Verb.Commit_Verb()", span="22-22"];
m1_341 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", span="587-587"];
m1_342 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="var expectedOptions = new Secert_Verb { Force = true, SecertOption = null}", span="590-590"];
m1_343 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="591-591"];
m1_349 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="602-602"];
m1_344 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="592-592"];
m1_345 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Secert_Verb, Add_Verb_With_Usage_Attribute>(new string[] { ''secert'', ''--force'' })", span="595-595"];
m1_346 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="599-599"];
m1_347 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="result.GetType().Should().Be<Parsed<object>>()", span="600-600"];
m1_348 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="result.TypeInfo.Current.Should().Be<Secert_Verb>()", span="601-601"];
m1_350 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_when_given_hidden_verb()", span="587-587"];
m1_122 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="InstanceBuilder.cs", label="var sut = new Parser()", span="252-252"];
m1_35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="T instance", span="93-93"];
m1_18 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="InstanceBuilder.cs", label="sut.ParseArguments(new string[] { }, typeof(Add_Verb), typeof(Commit_Verb), typeof(Clone_Verb))", span="39-39"];
m1_55 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="InstanceBuilder.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
m1_56 [cluster="System.Func<TResult>.Invoke()", file="InstanceBuilder.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m1_57 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="InstanceBuilder.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m1_59 [cluster="CommandLine.Core.Specification.IsOption()", file="InstanceBuilder.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m1_161 [cluster="Unk.BeGreaterThan", file="InstanceBuilder.cs", label=token, span=""];
m1_70 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="122-122"];
m1_463 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", span="761-761"];
m1_464 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="var sameValues = new[] { ''--stringvalue=test1'', ''--shortandlong=test2'' }", span="763-763"];
m1_465 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="var sut = new Parser(parserSettings => { parserSettings.IgnoreUnknownArguments = true; })", span="764-764"];
m1_466 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Simple_Options>(sameValues)", span="765-765"];
m1_467 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="result.MapResult(_ => true, _ => false).Should().BeTrue()", span="767-767"];
m1_468 [cluster="CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Arguments_with_the_different_values_when_unknown_arguments_are_ignored()", span="761-761"];
m1_48 [cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126"];
m1_49 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="InstanceBuilder.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m1_51 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceBuilder.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m1_52 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m1_512 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", span="837-837"];
m1_513 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="InstanceBuilder.cs", label="var parser = Parser.Default", span="839-839"];
m1_514 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="InstanceBuilder.cs", label="parser.ParseArguments<Options_With_Shuffled_Index_Values>(\r\n                new[] { ''zero'', ''one'', ''two'' })\r\n                .WithNotParsed(errors => { throw new InvalidOperationException(''Must be parsed.''); })\r\n                .WithParsed(args =>\r\n                {\r\n                    Assert.Equal(''zero'', args.Arg0);\r\n                    Assert.Equal(''one'', args.Arg1);\r\n                    Assert.Equal(''two'', args.Arg2);\r\n                })", span="840-848"];
m1_515 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_shuffled_index_values()", span="837-837"];
m1_63 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="InstanceBuilder.cs", label="var sut = new Parser(with => with.EnableDashDash = true)", span="122-122"];
m1_218 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="385-385"];
m1_219 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="388-388"];
m1_220 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="389-389"];
m1_222 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="393-393"];
m1_221 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''--help'' })", span="392-392"];
m1_223 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="396-396"];
m1_224 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="398-398"];
m1_225 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="399-399"];
m1_226 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="lines[2].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="405-405"];
m1_227 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="lines[3].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="406-406"];
m1_228 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="lines[4].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="407-407"];
m1_229 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="lines[5].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="408-408"];
m1_230 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="lines[6].ShouldBeEquivalentTo(''version    Display version information.'')", span="409-409"];
m1_231 [cluster="CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Double_dash_help_dispalys_verbs_index_in_verbs_scenario()", span="385-385"];
m1_15 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", span="32-32"];
m1_13 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="24-24"];
m1_12 [cluster="lambda expression", file="InstanceBuilder.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24"];
m1_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m1_26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="preprocessorErrors.Any()", span="62-62"];
m1_25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61"];
m1_27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64"];
m1_37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="96-96"];
m1_36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="typeInfo.IsMutable()", span="94-94"];
m1_38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="97-108"];
m1_69 [cluster="Unk.ToArray", file="InstanceBuilder.cs", label="Entry Unk.ToArray", span=""];
m1_80 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="42-42"];
m1_82 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="42-42"];
m1_81 [cluster="lambda expression", file="InstanceBuilder.cs", label="f().GetType()", span="42-42"];
m1_83 [cluster="object.GetType()", file="InstanceBuilder.cs", label="Entry object.GetType()", span="0-0"];
m1_84 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="44-45"];
m1_101 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="79-79"];
m1_102 [cluster="lambda expression", file="InstanceBuilder.cs", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79"];
m1_103 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="79-79"];
m1_112 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="96-96"];
m1_113 [cluster="lambda expression", file="InstanceBuilder.cs", label="f()", span="96-96"];
m1_114 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="96-96"];
m1_127 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="103-103"];
m1_128 [cluster="lambda expression", file="InstanceBuilder.cs", label="sp.Specification.DefaultValue.FromJust()", span="103-103"];
m1_129 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="103-103"];
m1_151 [cluster="lambda expression", file="InstanceBuilder.cs", label="new NotParsed<T>(instance, allErrors)", span="133-133"];
m1_147 [cluster="lambda expression", color=green, community=0, file="InstanceBuilder.cs", label="new Parsed<T>(instance)", prediction=9, span="131-131"];
m1_150 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="133-133"];
m1_148 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="131-131"];
m1_149 [cluster="CommandLine.Parsed<T>.Parsed(T)", file="InstanceBuilder.cs", label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72"];
m1_152 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="133-133"];
m1_163 [cluster="lambda expression", file="InstanceBuilder.cs", label=allErrors, span=""];
m1_162 [cluster="lambda expression", file="InstanceBuilder.cs", label=instance, span=""];
m1_164 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="301-301"];
m1_177 [cluster="lambda expression", file="InstanceBuilder.cs", label="e.Equals(expectedError)", span="324-324"];
m1_173 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="323-323"];
m1_176 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="324-324"];
m1_174 [cluster="lambda expression", file="InstanceBuilder.cs", label="x == 1", span="323-323"];
m1_175 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="323-323"];
m1_178 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="324-324"];
m1_193 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="333-333"];
m1_195 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="342-342"];
m1_192 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="333-333"];
m1_194 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="333-333"];
m1_196 [cluster="lambda expression", file="InstanceBuilder.cs", label="x == 1", span="342-342"];
m1_197 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="342-342"];
m1_216 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="357-357"];
m1_215 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="357-357"];
m1_217 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="357-357"];
m1_233 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="389-389"];
m1_232 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="389-389"];
m1_234 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="389-389"];
m1_246 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="420-420"];
m1_248 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="429-429"];
m1_245 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="420-420"];
m1_247 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="420-420"];
m1_249 [cluster="lambda expression", file="InstanceBuilder.cs", label="x == 1", span="429-429"];
m1_250 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="429-429"];
m1_269 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="444-444"];
m1_268 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="444-444"];
m1_270 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="444-444"];
m1_279 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="476-476"];
m1_278 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="476-476"];
m1_280 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="476-476"];
m1_306 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="492-492"];
m1_305 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="492-492"];
m1_307 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="492-492"];
m1_324 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="533-533"];
m1_323 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="533-533"];
m1_325 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="533-533"];
m1_339 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="563-563"];
m1_338 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="563-563"];
m1_340 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="563-563"];
m1_354 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="592-592"];
m1_356 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="602-602"];
m1_353 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="592-592"];
m1_355 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="592-592"];
m1_357 [cluster="lambda expression", file="InstanceBuilder.cs", label="o.RespectingRuntimeTypes()", span="602-602"];
m1_358 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="602-602"];
m1_370 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="612-612"];
m1_372 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="621-621"];
m1_369 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="612-612"];
m1_371 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="612-612"];
m1_373 [cluster="lambda expression", file="InstanceBuilder.cs", label="o.RespectingRuntimeTypes()", span="621-621"];
m1_374 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="621-621"];
m1_391 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="630-630"];
m1_390 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="630-630"];
m1_392 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="630-630"];
m1_404 [cluster="lambda expression", file="InstanceBuilder.cs", label="opts.ShouldBeEquivalentTo(expected)", span="671-671"];
m1_401 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.IgnoreUnknownArguments = true", span="664-664"];
m1_403 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="671-671"];
m1_400 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="664-664"];
m1_402 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="664-664"];
m1_405 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="671-671"];
m1_416 [cluster="lambda expression", file="InstanceBuilder.cs", label="opts.ShouldBeEquivalentTo(expected)", span="690-690"];
m1_413 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.IgnoreUnknownArguments = true", span="683-683"];
m1_415 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="690-690"];
m1_412 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="683-683"];
m1_414 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="683-683"];
m1_417 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="690-690"];
m1_436 [cluster="lambda expression", file="InstanceBuilder.cs", label="config.HelpWriter = help", span="700-700"];
m1_435 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="700-700"];
m1_437 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="700-700"];
m1_455 [cluster="lambda expression", file="InstanceBuilder.cs", label="parserSettings.IgnoreUnknownArguments = true", span="754-754"];
m1_457 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="757-757"];
m1_460 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="757-757"];
m1_454 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="754-754"];
m1_456 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="754-754"];
m1_458 [cluster="lambda expression", file="InstanceBuilder.cs", label=true, span="757-757"];
m1_459 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="757-757"];
m1_461 [cluster="lambda expression", file="InstanceBuilder.cs", label=false, span="757-757"];
m1_462 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="757-757"];
m1_470 [cluster="lambda expression", file="InstanceBuilder.cs", label="parserSettings.IgnoreUnknownArguments = true", span="764-764"];
m1_472 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="767-767"];
m1_475 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="767-767"];
m1_469 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="764-764"];
m1_471 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="764-764"];
m1_473 [cluster="lambda expression", file="InstanceBuilder.cs", label=true, span="767-767"];
m1_474 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="767-767"];
m1_476 [cluster="lambda expression", file="InstanceBuilder.cs", label=false, span="767-767"];
m1_477 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="767-767"];
m1_483 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="794-797"];
m1_484 [cluster="lambda expression", file="InstanceBuilder.cs", label="Assert.Equal(null, r.User)", span="796-796"];
m1_485 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="794-797"];
m1_492 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="812-812"];
m1_496 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="813-817"];
m1_493 [cluster="lambda expression", file="InstanceBuilder.cs", label="throw new InvalidOperationException(''Must be parsed.'');", span="812-812"];
m1_494 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="812-812"];
m1_497 [cluster="lambda expression", file="InstanceBuilder.cs", label="Assert.Equal(''arg'', args.OptValue)", span="815-815"];
m1_498 [cluster="lambda expression", file="InstanceBuilder.cs", label="Assert.Equal(''arg'', args.PosValue)", span="816-816"];
m1_499 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="813-817"];
m1_505 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="828-828"];
m1_508 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="829-833"];
m1_506 [cluster="lambda expression", file="InstanceBuilder.cs", label="throw new InvalidOperationException(''Must be parsed.'');", span="828-828"];
m1_507 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="828-828"];
m1_509 [cluster="lambda expression", file="InstanceBuilder.cs", label="Assert.Equal(''arg'', args.OptValue)", span="831-831"];
m1_510 [cluster="lambda expression", file="InstanceBuilder.cs", label="Assert.Equal(''arg'', args.PosValue)", span="832-832"];
m1_511 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="829-833"];
m1_516 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="842-842"];
m1_519 [cluster="lambda expression", file="InstanceBuilder.cs", label="Entry lambda expression", span="843-848"];
m1_517 [cluster="lambda expression", file="InstanceBuilder.cs", label="throw new InvalidOperationException(''Must be parsed.'');", span="842-842"];
m1_518 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="842-842"];
m1_520 [cluster="lambda expression", file="InstanceBuilder.cs", label="Assert.Equal(''zero'', args.Arg0)", span="845-845"];
m1_521 [cluster="lambda expression", file="InstanceBuilder.cs", label="Assert.Equal(''one'', args.Arg1)", span="846-846"];
m1_522 [cluster="lambda expression", file="InstanceBuilder.cs", label="Assert.Equal(''two'', args.Arg2)", span="847-847"];
m1_523 [cluster="lambda expression", file="InstanceBuilder.cs", label="Exit lambda expression", span="843-848"];
m1_146 [cluster="Unk.ContainSingle", file="InstanceBuilder.cs", label="Entry Unk.ContainSingle", span=""];
m1_123 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="InstanceBuilder.cs", label="var result =\r\n                sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' })", span="255-257"];
m1_130 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="266-266"];
m1_134 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="InstanceBuilder.cs", label="((Parsed<Immutable_Simple_Options>)result).Value.ShouldBeEquivalentTo(expectedOptions)", span="276-276"];
m1_98 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="InstanceBuilder.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="196-196"];
m1_97 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="InstanceBuilder.cs", label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="195-195"];
m1_95 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="InstanceBuilder.cs", label="var sut = new Parser()", span="184-184"];
m1_121 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="InstanceBuilder.cs", label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="242-251"];
m1_120 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", span="239-239"];
m1_125 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="InstanceBuilder.cs", label="((Parsed<object>)result).Value.ShouldBeEquivalentTo(expectedOptions, o => o.RespectingRuntimeTypes())", span="261-261"];
m1_124 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs_using_generic_overload()", file="InstanceBuilder.cs", label="Assert.IsType<Clone_Verb>(((Parsed<object>)result).Value)", span="260-260"];
m1_132 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="InstanceBuilder.cs", label="var sut = new Parser()", span="270-270"];
m1_131 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="InstanceBuilder.cs", label="var expectedOptions = new Immutable_Simple_Options(''strvalue'', new[] { 1, 2, 3 }, default(bool), default(long))", span="269-269"];
m1_135 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", span="266-266"];
m1_140 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--help'' })", span="288-288"];
m1_143 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="281-281"];
m1_16 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="InstanceBuilder.cs", label="var writer = new StringWriter()", span="35-35"];
m1_94 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="InstanceBuilder.cs", label="var expectedOptions = new Clone_Verb\r\n                                  {\r\n                                      Quiet = true,\r\n                                      Urls =\r\n                                          new[]\r\n                                          {\r\n                                              ''http://gsscoder.github.com/'',\r\n                                              ''http://yes-to-nooo.github.com/''\r\n                                          }\r\n                                  }", span="174-183"];
m1_99 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verbs()", span="171-171"];
m1_85 [cluster="Unk.RespectingRuntimeTypes", file="InstanceBuilder.cs", label="Entry Unk.RespectingRuntimeTypes", span=""];
m1_96 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verbs()", file="InstanceBuilder.cs", label="var result =\r\n                sut.ParseArguments(\r\n                    new[] { ''clone'', ''-q'', ''http://gsscoder.github.com/'', ''http://yes-to-nooo.github.com/'' },\r\n                    typeof(Add_Verb),\r\n                    typeof(Commit_Verb),\r\n                    typeof(Clone_Verb))", span="187-192"];
m1_142 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="InstanceBuilder.cs", label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="292-292"];
m1_141 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="InstanceBuilder.cs", label="((NotParsed<Immutable_Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="291-291"];
m1_145 [cluster="Unk.HaveCount", file="InstanceBuilder.cs", label="Entry Unk.HaveCount", span=""];
m1_11 [cluster="Unk.True", file="InstanceBuilder.cs", label="Entry Unk.True", span=""];
m1_17 [cluster="CommandLine.Tests.Unit.ParserTests.When_HelpWriter_is_set_help_screen_is_generated_in_verbs_scenario()", file="InstanceBuilder.cs", label="var sut = new Parser(with => with.HelpWriter = writer)", span="36-36"];
m1_54 [cluster="CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.Options_With_Switches.Options_With_Switches()", span="4-4"];
m1_28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68"];
m1_29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var tokens = tokenizerResult.Value", span="70-70"];
m1_30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74"];
m1_32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="82-85"];
m1_31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="76-80"];
m1_33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="87-89"];
m1_34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="91-91"];
m1_78 [cluster="CommandLine.Tests.Fakes.Add_Verb.Add_Verb()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.Add_Verb.Add_Verb()", span="7-7"];
m1_153 [cluster="NotParsed<T>.cstr", file="InstanceBuilder.cs", label="Entry NotParsed<T>.cstr", span=""];
m1_191 [cluster="Unk.StartWithEquivalent", file="InstanceBuilder.cs", label="Entry Unk.StartWithEquivalent", span=""];
m1_500 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", span="821-821"];
m1_501 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="InstanceBuilder.cs", label="var parser = Parser.Default", span="823-823"];
m1_502 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="InstanceBuilder.cs", label="var result = parser.ParseArguments(\r\n                new[] { ''test'', ''arg'', ''-o'', ''arg'' }, \r\n                typeof(Verb_With_Option_And_Value_Of_String_Type))", span="824-826"];
m1_503 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="InstanceBuilder.cs", label="result\r\n                .WithNotParsed(errors => { throw new InvalidOperationException(''Must be parsed.''); })\r\n                .WithParsed<Verb_With_Option_And_Value_Of_String_Type>(args =>\r\n                {\r\n                    Assert.Equal(''arg'', args.OptValue);\r\n                    Assert.Equal(''arg'', args.PosValue);\r\n                })", span="827-833"];
m1_504 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_verb_with_same_option_and_value_args()", span="821-821"];
m1_137 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_immutable_instance_generates_help_requested_error()", span="281-281"];
m1_39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="112-112"];
m1_40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="113-117"];
m1_41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="instance = (T)ctor.Invoke(values)", span="118-118"];
m1_43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs", label="var allErrors = tokenizerResult.Errors\r\n                .Concat(missingValueErrors)\r\n                .Concat(optionSpecProps.Errors)\r\n                .Concat(valueSpecProps.Errors)\r\n                .Concat(validationErrors)", prediction=9, span="124-128"];
m1_42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="121-122"];
m1_44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="InstanceBuilder.cs", label="Func<ParserResult<T>> makeParsed =\r\n                () => new Parsed<T>(instance)", prediction=9, span="130-131"];
m1_179 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="329-329"];
m1_180 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="332-332"];
m1_181 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="333-333"];
m1_183 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="337-337"];
m1_182 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="336-336"];
m1_184 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="result.Length.Should().BeGreaterThan(0)", span="340-340"];
m1_185 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="341-341"];
m1_186 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="lines.Should().HaveCount(x => x == 1)", span="342-342"];
m1_187 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="344-344"];
m1_188 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_info_screen()", span="329-329"];
m1_133 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_to_immutable_instance()", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Immutable_Simple_Options>(new[] { ''--stringvalue=strvalue'', ''-i1'', ''2'', ''3'' })", span="273-273"];
m1_491 [cluster="CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="InstanceBuilder.cs", label="Entry CommandLine.ParserResult<T>.WithNotParsed<T>(System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="58-58"];
m1_19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="42-42"];
m1_20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45"];
m1_21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="InstanceBuilder.cs", label="var specs = from pt in specProps select pt.Specification", span="47-47"];
m1_189 [cluster="string.ToNotEmptyLines()", file="InstanceBuilder.cs", label="Entry string.ToNotEmptyLines()", span="10-10"];
m1_66 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_double_dash()", span="112-112"];
m1_139 [cluster="System.Type.CreateEmptyArray()", file="InstanceBuilder.cs", label="Entry System.Type.CreateEmptyArray()", span="101-101"];
m1_67 [cluster="System.Activator.CreateInstance<T>()", file="InstanceBuilder.cs", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
m1_482 [cluster="string.Split(params char[])", file="InstanceBuilder.cs", label="Entry string.Split(params char[])", span="0-0"];
m1_62 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="InstanceBuilder.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
m1_478 [cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Null_default()", span="790-790"];
m1_479 [cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="InstanceBuilder.cs", label="Parser parser = new Parser()", span="792-792"];
m1_480 [cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="InstanceBuilder.cs", label="parser.ParseArguments<NullDefaultCommandLineArguments>(''''.Split())\r\n                .WithParsed(r =>\r\n                {\r\n                    Assert.Equal(null, r.User);\r\n                })", span="793-797"];
m1_481 [cluster="CommandLine.Tests.Unit.ParserTests.Null_default()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Null_default()", span="790-790"];
m1_126 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", file="InstanceBuilder.cs", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="170-170"];
m1_190 [cluster="System.Collections.Generic.IEnumerable<string>.TrimStringArray()", file="InstanceBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<string>.TrimStringArray()", span="15-15"];
m1_165 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="313-313"];
m1_166 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="InstanceBuilder.cs", label="var expectedError = new VersionRequestedError()", span="316-316"];
m1_167 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="InstanceBuilder.cs", label="var sut = new Parser()", span="317-317"];
m1_170 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="InstanceBuilder.cs", label="((NotParsed<Simple_Options>)result).Errors.Should().ContainSingle(e => e.Equals(expectedError))", span="324-324"];
m1_168 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Simple_Options>(new[] { ''--version'' })", span="320-320"];
m1_169 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="InstanceBuilder.cs", label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == 1)", span="323-323"];
m1_171 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_version_request_generates_version_requested_error()", span="313-313"];
m1_251 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="440-440"];
m1_252 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="443-443"];
m1_253 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="444-444"];
m1_255 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="448-448"];
m1_254 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="sut.ParseArguments<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(new[] { ''--weburl=value.com'', ''--ftpurl=value.org'' })", span="447-447"];
m1_256 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="451-451"];
m1_257 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="453-453"];
m1_258 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="454-454"];
m1_259 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="460-460"];
m1_260 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[3].ShouldBeEquivalentTo(''Option: 'weburl' is not compatible with: 'ftpurl'.'')", span="461-461"];
m1_261 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[4].ShouldBeEquivalentTo(''Option: 'ftpurl' is not compatible with: 'weburl'.'')", span="462-462"];
m1_262 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[5].ShouldBeEquivalentTo(''--weburl     Required.'')", span="463-463"];
m1_263 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[6].ShouldBeEquivalentTo(''--ftpurl     Required.'')", span="464-464"];
m1_264 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[7].ShouldBeEquivalentTo(''-a'')", span="465-465"];
m1_265 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[8].ShouldBeEquivalentTo(''--help       Display this help screen.'')", span="466-466"];
m1_266 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="lines[9].ShouldBeEquivalentTo(''--version    Display version information.'')", span="467-467"];
m1_267 [cluster="CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Errors_of_type_MutuallyExclusiveSetError_are_properly_formatted()", span="440-440"];
m1_45 [cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", color=green, community=0, file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", prediction=9, span="6-6"];
m1_46 [cluster="CommandLine.Parser.Parser()", file="InstanceBuilder.cs", label="Entry CommandLine.Parser.Parser()", span="26-26"];
m1_24 [cluster="Unk.NotBeEmpty", file="InstanceBuilder.cs", label="Entry Unk.NotBeEmpty", span=""];
m1_22 [cluster="CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", file="InstanceBuilder.cs", label="Entry CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable<string>, params System.Type[])", span="146-146"];
m1_23 [cluster="Unk.Should", file="InstanceBuilder.cs", label="Entry Unk.Should", span=""];
m1_418 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="696-696"];
m1_419 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="699-699"];
m1_420 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="700-700"];
m1_422 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="705-705"];
m1_421 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''clone'', ''--bad-arg'', ''--help'' })", span="703-704"];
m1_423 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="708-708"];
m1_424 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="710-710"];
m1_425 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="711-711"];
m1_426 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="717-717"];
m1_427 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[3].ShouldBeEquivalentTo(''Option 'bad-arg' is unknown.'')", span="718-718"];
m1_428 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[4].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="719-719"];
m1_429 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[5].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="720-720"];
m1_430 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[6].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="721-721"];
m1_431 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[7].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="722-722"];
m1_432 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[8].ShouldBeEquivalentTo(''--version         Display version information.'')", span="723-723"];
m1_433 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="lines[9].ShouldBeEquivalentTo(''value pos. 0'')", span="724-724"];
m1_434 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_excludes_help_as_unknown_option()", span="696-696"];
m1_495 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="InstanceBuilder.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m1_375 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="626-626"];
m1_376 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="629-629"];
m1_377 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="630-630"];
m1_379 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="635-635"];
m1_378 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(\r\n                new[] { ''help'', ''clone'', ''extra-arg'' })", span="633-634"];
m1_380 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="638-638"];
m1_381 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="640-640"];
m1_382 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="641-641"];
m1_383 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="lines[2].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="647-647"];
m1_384 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="lines[3].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="648-648"];
m1_385 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="lines[4].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="649-649"];
m1_386 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="lines[5].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="650-650"];
m1_387 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="lines[6].ShouldBeEquivalentTo(''--version         Display version information.'')", span="651-651"];
m1_388 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="lines[7].ShouldBeEquivalentTo(''value pos. 0'')", span="652-652"];
m1_389 [cluster="CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Specific_verb_help_screen_should_be_displayed_regardless_other_argument()", span="626-626"];
m1_445 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="InstanceBuilder.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m1_322 [cluster="CommandLine.Parser.ParseArguments<T1, T2>(System.Collections.Generic.IEnumerable<string>)", file="InstanceBuilder.cs", label="Entry CommandLine.Parser.ParseArguments<T1, T2>(System.Collections.Generic.IEnumerable<string>)", span="25-25"];
m1_486 [cluster="Unk.Equal", file="InstanceBuilder.cs", label="Entry Unk.Equal", span=""];
m1_351 [cluster="CommandLine.Tests.Fakes.Secert_Verb.Secert_Verb()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Fakes.Secert_Verb.Secert_Verb()", span="96-96"];
m1_198 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="353-353"];
m1_199 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="356-356"];
m1_200 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="357-357"];
m1_202 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="361-361"];
m1_201 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new string[] { })", span="360-360"];
m1_203 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="result.Length.Should().BeGreaterThan(0)", span="364-364"];
m1_204 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="365-365"];
m1_205 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="367-367"];
m1_206 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="368-368"];
m1_207 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="374-374"];
m1_208 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[3].ShouldBeEquivalentTo(''No verb selected.'')", span="375-375"];
m1_209 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[4].ShouldBeEquivalentTo(''add        Add file contents to the index.'')", span="376-376"];
m1_210 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[5].ShouldBeEquivalentTo(''commit     Record changes to the repository.'')", span="377-377"];
m1_211 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[6].ShouldBeEquivalentTo(''clone      Clone a repository into a new directory.'')", span="378-378"];
m1_212 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[7].ShouldBeEquivalentTo(''help       Display more information on a specific command.'')", span="379-379"];
m1_213 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[8].ShouldBeEquivalentTo(''version    Display version information.'')", span="380-380"];
m1_214 [cluster="CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Implicit_help_screen_in_verb_scenario()", span="353-353"];
m1_281 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="488-488"];
m1_282 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="491-491"];
m1_283 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="492-492"];
m1_285 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="497-497"];
m1_284 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="sut.ParseArguments<Add_Verb_With_Usage_Attribute, Commit_Verb_With_Usage_Attribute, Clone_Verb_With_Usage_Attribute>(\r\n                new[] { ''clone'', ''--badoption=@bad?value'' })", span="495-496"];
m1_286 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="var lines = result.ToNotEmptyLines().TrimStringArray()", span="500-500"];
m1_287 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[0].Should().StartWithEquivalent(''CommandLine'')", span="502-502"];
m1_288 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[1].ShouldBeEquivalentTo(''Copyright (c) 2005 - 2015 Giacomo Stelluti Scala'')", span="503-503"];
m1_289 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[2].ShouldBeEquivalentTo(''ERROR(S):'')", span="509-509"];
m1_290 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[3].ShouldBeEquivalentTo(''Option 'badoption' is unknown.'')", span="510-510"];
m1_291 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[4].ShouldBeEquivalentTo(''USAGE:'')", span="511-511"];
m1_292 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[5].ShouldBeEquivalentTo(''Basic cloning:'')", span="512-512"];
m1_293 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[6].ShouldBeEquivalentTo(''git clone https://github.com/gsscoder/csharpx'')", span="513-513"];
m1_294 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[7].ShouldBeEquivalentTo(''Cloning quietly:'')", span="514-514"];
m1_295 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[8].ShouldBeEquivalentTo(''git clone --quiet https://github.com/gsscoder/railwaysharp'')", span="515-515"];
m1_296 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[9].ShouldBeEquivalentTo(''Cloning without hard links:'')", span="516-516"];
m1_297 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[10].ShouldBeEquivalentTo(''git clone --no-hardlinks https://github.com/gsscoder/csharpx'')", span="517-517"];
m1_298 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[11].ShouldBeEquivalentTo(''--no-hardlinks    Optimize the cloning process from a repository on a local'')", span="518-518"];
m1_299 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[12].ShouldBeEquivalentTo(''filesystem by copying files.'')", span="519-519"];
m1_300 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[13].ShouldBeEquivalentTo(''-q, --quiet       Suppress summary message.'')", span="520-520"];
m1_301 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[14].ShouldBeEquivalentTo(''--help            Display this help screen.'')", span="521-521"];
m1_302 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[15].ShouldBeEquivalentTo(''--version         Display version information.'')", span="522-522"];
m1_303 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="lines[16].ShouldBeEquivalentTo(''URLS (pos. 0)     A list of url(s) to clone.'')", span="523-523"];
m1_304 [cluster="CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Properly_formatted_help_screen_is_displayed_when_usage_is_defined_in_verb_scenario()", span="488-488"];
m1_444 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", file="InstanceBuilder.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="340-340"];
m1_453 [cluster="Unk.BeTrue", file="InstanceBuilder.cs", label="Entry Unk.BeTrue", span=""];
m1_406 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="678-678"];
m1_407 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.IgnoreUnknownArguments = true)", span="683-683"];
m1_408 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(arguments)", span="686-686"];
m1_410 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="InstanceBuilder.cs", label="result.WithParsed(opts => opts.ShouldBeEquivalentTo(expected))", span="690-690"];
m1_409 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="InstanceBuilder.cs", label="result.Tag.ShouldBeEquivalentTo(ParserResultType.Parsed)", span="689-689"];
m1_411 [cluster="CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.When_IgnoreUnknownArguments_is_set_valid_unknown_arguments_avoid_a_failure_parsing_for_verbs(string[], CommandLine.Tests.Fakes.Commit_Verb)", span="678-678"];
m1_271 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="472-472"];
m1_272 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="InstanceBuilder.cs", label="var help = new StringWriter()", span="475-475"];
m1_273 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="InstanceBuilder.cs", label="var sut = new Parser(config => config.HelpWriter = help)", span="476-476"];
m1_275 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="InstanceBuilder.cs", label="var result = help.ToString()", span="480-480"];
m1_274 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="InstanceBuilder.cs", label="sut.ParseArguments<Add_Verb, Commit_Verb, Clone_Verb>(new[] { ''commit'', ''--help'' })", span="479-479"];
m1_276 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="InstanceBuilder.cs", label="result.Length.Should().BeGreaterThan(0)", span="483-483"];
m1_277 [cluster="CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Explicit_help_request_with_specific_verb_generates_help_screen()", span="472-472"];
m1_172 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="InstanceBuilder.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="468-468"];
m1_438 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="730-730"];
m1_439 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''somethingelese''), string.Empty)\r\n                }", span="733-737"];
m1_440 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="var sut = new Parser()", span="738-738"];
m1_442 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="((NotParsed<Options_With_SetName_That_Ends_With_Previous_SetName>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="745-745"];
m1_441 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="var result = sut.ParseArguments<Options_With_SetName_That_Ends_With_Previous_SetName>(\r\n                new[] { ''--weburl'', ''value'', ''--somethingelse'', ''othervalue'' })", span="741-742"];
m1_443 [cluster="CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Breaking_mutually_exclusive_set_constraint_with_set_name_with_partial_string_right_side_equality_gererates_MissingValueOptionError()", span="730-730"];
m1_352 [cluster="object.GetType()", file="InstanceBuilder.cs", label="Entry object.GetType()", span="0-0"];
m1_100 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="InstanceBuilder.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
m1_487 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="InstanceBuilder.cs", label="Entry CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", span="807-807"];
m1_488 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="InstanceBuilder.cs", label="var parser = Parser.Default", span="809-809"];
m1_489 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="InstanceBuilder.cs", label="parser.ParseArguments<Options_With_Option_And_Value_Of_String_Type>(\r\n                new[] { ''arg'', ''-o'', ''arg'' })\r\n                .WithNotParsed(errors => { throw new InvalidOperationException(''Must be parsed.''); })\r\n                .WithParsed(args =>\r\n                {\r\n                    Assert.Equal(''arg'', args.OptValue);\r\n                    Assert.Equal(''arg'', args.PosValue);\r\n                })", span="810-817"];
m1_490 [cluster="CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", file="InstanceBuilder.cs", label="Exit CommandLine.Tests.Unit.ParserTests.Parse_options_with_same_option_and_value_args()", span="807-807"];
m1_452 [cluster="CommandLine.ParserResult<TSource>.MapResult<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", file="InstanceBuilder.cs", label="Entry CommandLine.ParserResult<TSource>.MapResult<TSource, TResult>(System.Func<TSource, TResult>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.Error>, TResult>)", span="77-77"];
m1_399 [cluster="Unk.WithParsed", file="InstanceBuilder.cs", label="Entry Unk.WithParsed", span=""];
m1_524 [file="InstanceBuilder.cs", label=writer, span=""];
m1_525 [file="InstanceBuilder.cs", label=writer, span=""];
m1_526 [file="InstanceBuilder.cs", label=writer, span=""];
m1_527 [file="InstanceBuilder.cs", label=expectedError, span=""];
m1_528 [file="InstanceBuilder.cs", label=help, span=""];
m1_529 [file="InstanceBuilder.cs", label=expectedError, span=""];
m1_530 [file="InstanceBuilder.cs", label=help, span=""];
m1_531 [file="InstanceBuilder.cs", label=help, span=""];
m1_532 [file="InstanceBuilder.cs", label=help, span=""];
m1_533 [file="InstanceBuilder.cs", label=help, span=""];
m1_534 [file="InstanceBuilder.cs", label=help, span=""];
m1_535 [file="InstanceBuilder.cs", label=help, span=""];
m1_536 [file="InstanceBuilder.cs", label=help, span=""];
m1_537 [file="InstanceBuilder.cs", label=help, span=""];
m1_538 [file="InstanceBuilder.cs", label=help, span=""];
m1_539 [file="InstanceBuilder.cs", label=help, span=""];
m1_540 [file="InstanceBuilder.cs", label=help, span=""];
m1_541 [file="InstanceBuilder.cs", label=help, span=""];
m1_542 [file="InstanceBuilder.cs", label="CommandLine.Tests.Fakes.Simple_Options", span=""];
m1_543 [file="InstanceBuilder.cs", label="CommandLine.Tests.Fakes.Commit_Verb", span=""];
m1_544 [file="InstanceBuilder.cs", label=help, span=""];
n34 -> n38  [color=darkseagreen4, key=1, label=int, style=dashed];
n34 -> n41  [color=darkseagreen4, key=1, label=int, style=dashed];
n34 -> n44  [color=darkseagreen4, key=1, label=int, style=dashed];
n47 -> n51  [color=darkseagreen4, key=1, label=int, style=dashed];
n56 -> n58  [color=darkseagreen4, key=1, label=num, style=dashed];
n50 -> n52  [color=darkseagreen4, key=1, label=result, style=dashed];
n50 -> n58  [color=darkseagreen4, key=1, label=result, style=dashed];
n50 -> n60  [color=darkseagreen4, key=1, label=result, style=dashed];
n55 -> n58  [color=darkseagreen4, key=1, label=numeral, style=dashed];
m0_8 -> m0_10  [color=green, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m0_9 -> m0_11  [color=green, key=1, label=array, style=dashed];
m0_0 -> m0_2  [color=green, key=1, label="System.Collections.Generic.IEnumerable<TSource>", style=dashed];
m0_0 -> m0_4  [color=green, key=1, label="System.Func<TSource, bool>", style=dashed];
m0_1 -> m0_3  [color=green, key=1, label=index, style=dashed];
m0_1 -> m0_5  [color=green, key=1, label=index, style=dashed];
m0_2 -> m0_4  [color=green, key=1, label=item, style=dashed];
m0_3 -> m0_3  [color=green, key=1, label=index, style=dashed];
m0_3 -> m0_5  [color=green, key=1, label=index, style=dashed];
m1_0 -> m1_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_1 -> m1_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_13  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m1_4 -> m1_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_3 -> m1_23  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m1_3 -> m1_91  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m1_3 -> m1_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_3 -> m1_98  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_3 -> m1_102  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_3 -> m1_106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_3 -> m1_109  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_6 -> m1_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_154 -> m1_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_155 -> m1_163  [color=darkseagreen4, key=1, label=help, style=dashed];
m1_155 -> m1_158  [color=darkseagreen4, key=1, label=help, style=dashed];
m1_155 -> m1_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_156 -> m1_163  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m1_156 -> m1_91  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
m1_158 -> m1_109  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_158 -> m1_98  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_157 -> m1_91  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m1_159 -> m1_98  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m1_160 -> m1_102  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_160 -> m1_106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m1_393 -> m1_397  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Simple_Options", style=dashed];
m1_393 -> m1_404  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Simple_Options", style=dashed];
m1_395 -> m1_397  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_397 -> m1_403  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_72 -> m1_76  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m1_73 -> m1_80  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m1_76 -> m1_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_74 -> m1_76  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_138 -> m1_142  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m1_138 -> m1_151  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m1_313 -> m1_315  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_313 -> m1_316  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_313 -> m1_317  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_313 -> m1_318  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_313 -> m1_319  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_313 -> m1_320  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_88 -> m1_91  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m1_331 -> m1_333  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_331 -> m1_334  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_331 -> m1_335  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_331 -> m1_336  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_360 -> m1_367  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m1_367 -> m1_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_363 -> m1_365  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_363 -> m1_366  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_363 -> m1_367  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_450 -> m1_457  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_450 -> m1_460  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_235 -> m1_238  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_241 -> m1_243  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_242 -> m1_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_87 -> m1_90  [color=darkseagreen4, key=1, label=args, style=dashed];
m1_91 -> m1_91  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_104 -> m1_107  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_105 -> m1_109  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m1_107 -> m1_109  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_109 -> m1_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_342 -> m1_349  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m1_349 -> m1_356  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_345 -> m1_347  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_345 -> m1_348  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_345 -> m1_349  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_161 -> m1_109  [color=darkseagreen4, key=1, label=token, style=dashed];
m1_467 -> m1_472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_467 -> m1_475  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_48 -> m1_51  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_49 -> m1_52  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m1_514 -> m1_516  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_514 -> m1_519  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_63 -> m1_69  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m1_223 -> m1_225  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_223 -> m1_226  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_223 -> m1_227  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_223 -> m1_228  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_223 -> m1_229  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_223 -> m1_230  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_25 -> m1_27  [color=darkseagreen4, key=1, label=preprocessorErrors, style=dashed];
m1_37 -> m1_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_38 -> m1_44  [color=green, key=1, label=instance, style=dashed];
m1_38 -> m1_147  [color=green, key=1, label=instance, style=dashed];
m1_38 -> m1_45  [color=green, key=1, label=instance, style=dashed];
m1_38 -> m1_151  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_38 -> m1_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_38 -> m1_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_38 -> m1_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_38 -> m1_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_38 -> m1_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_38 -> m1_134  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_163 -> m1_151  [color=darkseagreen4, key=1, label=allErrors, style=dashed];
m1_162 -> m1_147  [color=green, key=1, label=instance, style=dashed];
m1_162 -> m1_151  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_496 -> m1_498  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Option_And_Value_Of_String_Type", style=dashed];
m1_508 -> m1_510  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Verb_With_Option_And_Value_Of_String_Type", style=dashed];
m1_519 -> m1_521  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Shuffled_Index_Values", style=dashed];
m1_519 -> m1_522  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Shuffled_Index_Values", style=dashed];
m1_123 -> m1_125  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_98 -> m1_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_121 -> m1_125  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m1_125 -> m1_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_131 -> m1_134  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m1_140 -> m1_142  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_16 -> m1_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m1_94 -> m1_98  [color=darkseagreen4, key=1, label=expectedOptions, style=dashed];
m1_96 -> m1_98  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_142 -> m1_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_141 -> m1_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_17 -> m1_26  [color=darkseagreen4, key=1, label="CommandLine.ParserSettings", style=dashed];
m1_30 -> m1_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_32 -> m1_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_31 -> m1_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_109  [color=darkseagreen4, key=1, label=token, style=dashed];
m1_503 -> m1_505  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_503 -> m1_508  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_40 -> m1_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_41 -> m1_44  [color=green, key=1, label=instance, style=dashed];
m1_41 -> m1_147  [color=green, key=1, label=instance, style=dashed];
m1_41 -> m1_45  [color=green, key=1, label=instance, style=dashed];
m1_41 -> m1_151  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_43 -> m1_45  [color=green, key=1, label=allErrors, style=dashed];
m1_43 -> m1_151  [color=green, key=1, label=allErrors, style=dashed];
m1_43 -> m1_46  [color=green, key=1, label=allErrors, style=dashed];
m1_44 -> m1_46  [color=green, key=1, label=makeParsed, style=dashed];
m1_185 -> m1_187  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_186 -> m1_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_19 -> m1_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_19 -> m1_36  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
m1_20 -> m1_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_20 -> m1_91  [color=darkseagreen4, key=1, label=specProps, style=dashed];
m1_480 -> m1_483  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_166 -> m1_170  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m1_166 -> m1_177  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m1_170 -> m1_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_168 -> m1_170  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_169 -> m1_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_256 -> m1_258  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_256 -> m1_259  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_256 -> m1_260  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_256 -> m1_261  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_256 -> m1_262  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_256 -> m1_263  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_256 -> m1_264  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_256 -> m1_265  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_256 -> m1_266  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_22 -> m1_98  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m1_23 -> m1_27  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
m1_423 -> m1_425  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_423 -> m1_426  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_423 -> m1_427  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_423 -> m1_428  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_423 -> m1_429  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_423 -> m1_430  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_423 -> m1_431  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_423 -> m1_432  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_423 -> m1_433  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_380 -> m1_382  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_380 -> m1_383  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_380 -> m1_384  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_380 -> m1_385  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_380 -> m1_386  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_380 -> m1_387  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_380 -> m1_388  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_204 -> m1_206  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_204 -> m1_207  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_204 -> m1_208  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_204 -> m1_209  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_204 -> m1_210  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_204 -> m1_211  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_204 -> m1_212  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_204 -> m1_213  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_288  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_289  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_290  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_291  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_292  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_293  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_294  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_295  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_296  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_297  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_298  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_299  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_300  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_301  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_302  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_286 -> m1_303  [color=darkseagreen4, key=1, label=lines, style=dashed];
m1_406 -> m1_410  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Commit_Verb", style=dashed];
m1_406 -> m1_416  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Commit_Verb", style=dashed];
m1_408 -> m1_410  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_410 -> m1_415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_439 -> m1_442  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m1_489 -> m1_492  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_489 -> m1_496  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_524 -> m1_13  [color=darkseagreen4, key=1, label=writer, style=dashed];
m1_525 -> m1_26  [color=darkseagreen4, key=1, label=writer, style=dashed];
m1_527 -> m1_151  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m1_528 -> m1_163  [color=darkseagreen4, key=1, label=help, style=dashed];
m1_529 -> m1_177  [color=darkseagreen4, key=1, label=expectedError, style=dashed];
m1_542 -> m1_404  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Simple_Options", style=dashed];
m1_543 -> m1_416  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Commit_Verb", style=dashed];
}
