digraph  {
n41 [label="CommandLine.Text.Example", span=""];
n0 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="Entry CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="18-18"];
n1 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="string.IsNullOrEmpty(helpText)", span="20-20"];
n3 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="formatStyles == null", span="21-21"];
n5 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="sample == null", span="22-22"];
n7 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="this.helpText = helpText", span="24-24"];
n8 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="this.formatStyles = formatStyles", span="25-25"];
n9 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="this.sample = sample", span="26-26"];
n2 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="throw new ArgumentException(''helpText can't be null or empty'', ''helpText'');", span="20-20"];
n11 [cluster="string.IsNullOrEmpty(string)", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
n4 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="throw new ArgumentNullException(''formatStyles'');", span="21-21"];
n6 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="throw new ArgumentNullException(''sample'');", span="22-22"];
n10 [cluster="CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", label="Exit CommandLine.Text.Example.Example(string, System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>, object)", span="18-18"];
n13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n12 [cluster="System.ArgumentException.ArgumentException(string, string)", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
n14 [cluster="CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", label="Entry CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", span="29-29"];
n15 [cluster="CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", label="Exit CommandLine.Text.Example.Example(string, CommandLine.UnParserSettings, object)", span="29-29"];
n16 [cluster="CommandLine.Text.Example.Example(string, object)", label="Entry CommandLine.Text.Example.Example(string, object)", span="34-34"];
n17 [cluster="CommandLine.Text.Example.Example(string, object)", label="Exit CommandLine.Text.Example.Example(string, object)", span="34-34"];
n18 [cluster="CommandLine.Text.Example.Equals(object)", label="Entry CommandLine.Text.Example.Equals(object)", span="59-59"];
n19 [cluster="CommandLine.Text.Example.Equals(object)", label="var other = obj as Example", span="61-61"];
n22 [cluster="CommandLine.Text.Example.Equals(object)", label="return base.Equals(obj);", span="67-67"];
n20 [cluster="CommandLine.Text.Example.Equals(object)", label="other != null", span="62-62"];
n21 [cluster="CommandLine.Text.Example.Equals(object)", label="return Equals(other);", span="64-64"];
n23 [cluster="CommandLine.Text.Example.Equals(object)", label="Exit CommandLine.Text.Example.Equals(object)", span="59-59"];
n24 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", label="Entry CommandLine.Text.Example.Equals(CommandLine.Text.Example)", span="84-84"];
n25 [cluster="object.Equals(object)", label="Entry object.Equals(object)", span="0-0"];
n26 [cluster="CommandLine.Text.Example.GetHashCode()", label="Entry CommandLine.Text.Example.GetHashCode()", span="74-74"];
n28 [cluster="CommandLine.Text.Example.GetHashCode()", label="Exit CommandLine.Text.Example.GetHashCode()", span="74-74"];
n29 [cluster="object.GetHashCode()", label="Entry object.GetHashCode()", span="0-0"];
n30 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", label="other == null", span="86-86"];
n31 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", label="return false;", span="88-88"];
n33 [cluster="CommandLine.Text.Example.Equals(CommandLine.Text.Example)", label="Exit CommandLine.Text.Example.Equals(CommandLine.Text.Example)", span="84-84"];
n34 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
n35 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
n36 [cluster="CommandLine.Text.ExampleExtensions.GetFormatStylesOrDefault(CommandLine.Text.Example)", label="Entry CommandLine.Text.ExampleExtensions.GetFormatStylesOrDefault(CommandLine.Text.Example)", span="111-111"];
n37 [cluster="CommandLine.Text.ExampleExtensions.GetFormatStylesOrDefault(CommandLine.Text.Example)", label="return example.FormatStyles.Any()\r\n                ? example.FormatStyles\r\n                : new[] { new UnParserSettings { Consumed = true } };", span="113-115"];
n38 [cluster="CommandLine.Text.ExampleExtensions.GetFormatStylesOrDefault(CommandLine.Text.Example)", label="Exit CommandLine.Text.ExampleExtensions.GetFormatStylesOrDefault(CommandLine.Text.Example)", span="111-111"];
n39 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
n40 [cluster="CommandLine.UnParserSettings.UnParserSettings()", label="Entry CommandLine.UnParserSettings.UnParserSettings()", span="15-15"];
d31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", prediction=0, span="76-80"];
d3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
d30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="72-74"];
d20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="44-45"];
d32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", prediction=1, span="82-85"];
d58 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d59 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
d105 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
d34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", prediction=2, span="91-92"];
d43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="var allErrors = tokenizerResult.SuccessfulMessages()\r\n                .Concat(missingValueErrors)\r\n                .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                .Concat(validationErrors)", prediction=3, span="125-129"];
d33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="87-89"];
d60 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d109 [cluster="lambda expression", label="Entry lambda expression", span="85-85"];
d28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="68-68"];
d42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="122-123"];
d44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return allErrors.Any()\r\n                ? (ParserResult<T>)new NotParsed<T>(instance, allErrors)\r\n                : (ParserResult<T>)new Parsed<T>(instance);", span="131-133"];
d77 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
d78 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="T instance", span="94-94"];
d56 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
d64 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
d38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="98-109"];
d40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="114-118"];
d0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
d1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="20-32"];
d45 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
d19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="42-42"];
d23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-57"];
d94 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="54-57"];
d24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="arguments.Any()", span="59-59"];
d25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="61-61"];
d102 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="74-74"];
d106 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="79-79"];
d110 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="85-85"];
d113 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="89-89"];
d37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="97-97"];
d22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="49-51"];
d29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var tokens = tokenizerResult.SucceededWith()", span="70-70"];
d57 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
d101 [cluster="lambda expression", label="Entry lambda expression", span="74-74"];
d21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var specs = from pt in specProps select pt.Specification", span="47-47"];
d47 [cluster="Unk.GetSpecifications", label="Entry Unk.GetSpecifications", span=""];
d87 [cluster="lambda expression", label="Entry lambda expression", span="44-45"];
d39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="113-113"];
d107 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
d61 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
d62 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d63 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
d112 [cluster="lambda expression", label="Entry lambda expression", span="89-89"];
d111 [cluster="lambda expression", label="Exit lambda expression", span="85-85"];
d26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="preprocessorErrors.Any()", span="62-62"];
d55 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="instance = (T)ctor.Invoke(values)", span="119-119"];
d75 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
d76 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
d79 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d80 [cluster="NotParsed<T>.cstr", label="Entry NotParsed<T>.cstr", span=""];
d81 [cluster="CommandLine.Parsed<T>.Parsed(T)", label="Entry CommandLine.Parsed<T>.Parsed(T)", span="72-72"];
d36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="typeInfo.IsMutable()", span="95-95"];
d67 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71"];
d119 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
d123 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
d127 [cluster="lambda expression", label="Entry lambda expression", span="103-103"];
d131 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
d134 [cluster="lambda expression", label="Entry lambda expression", span="106-108"];
d138 [cluster="lambda expression", label="Entry lambda expression", span="109-109"];
d70 [cluster="Unk.GetParameters", label="Entry Unk.GetParameters", span=""];
d71 [cluster="Unk.ToLower", label="Entry Unk.ToLower", span=""];
d72 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
d73 [cluster="Unk.CreateDefaultForImmutable", label="Entry Unk.CreateDefaultForImmutable", span=""];
d46 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
d68 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d144 [cluster="lambda expression", label="Entry lambda expression", span="116-116"];
d147 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
d2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="14-14"];
d5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="24-24"];
d12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="24-24"];
d6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="25-27"];
d16 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="27-27"];
d4 [cluster="lambda expression", label="Entry lambda expression", span="22-29"];
d27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return new NotParsed<T>(makeDefault(), preprocessorErrors);", span="64-64"];
d82 [cluster="lambda expression", label="Entry lambda expression", span="42-42"];
d152 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d153 [label=specProps, span=""];
d93 [cluster="lambda expression", label="Entry lambda expression", span="53-57"];
d95 [cluster="lambda expression", label="Exit lambda expression", span="53-57"];
d96 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="128-128"];
d66 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
d97 [cluster="Unk.>", label="Entry Unk.>", span=""];
d98 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
d50 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d51 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
d52 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
d154 [label="System.StringComparer", span=""];
d155 [label=optionSpecs, span=""];
d103 [cluster="lambda expression", label="Exit lambda expression", span="74-74"];
d104 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
d156 [label="System.Globalization.CultureInfo", span=""];
d108 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
d157 [label=token, span=""];
d114 [cluster="lambda expression", label="Exit lambda expression", span="89-89"];
d115 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
d116 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
d48 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
d49 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
d89 [cluster="lambda expression", label="Exit lambda expression", span="44-45"];
d88 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="44-45"];
d69 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
d74 [cluster="Unk.Invoke", label="Entry Unk.Invoke", span=""];
d65 [cluster="Unk.IsMutable", label="Entry Unk.IsMutable", span=""];
d121 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
d120 [cluster="lambda expression", label="sp.Value.IsJust()", span="100-100"];
d125 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
d124 [cluster="lambda expression", label="sp.Value.FromJust()", span="101-101"];
d129 [cluster="lambda expression", label="Exit lambda expression", span="103-103"];
d128 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="103-103"];
d133 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
d132 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="104-104"];
d136 [cluster="lambda expression", label="Exit lambda expression", span="106-108"];
d135 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="106-108"];
d140 [cluster="lambda expression", label="Exit lambda expression", span="109-109"];
d139 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="109-109"];
d146 [cluster="lambda expression", label="Exit lambda expression", span="116-116"];
d145 [cluster="lambda expression", label=v, span="116-116"];
d149 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
d148 [cluster="lambda expression", label=d, span="117-117"];
d150 [label="System.StringComparer", span=""];
d9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
d11 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
d151 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
d14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d7 [cluster="lambda expression", label="return explodedTokens;", span="28-28"];
d10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
d15 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
d17 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
d18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
d8 [cluster="lambda expression", label="Exit lambda expression", span="22-29"];
d53 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
d54 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d84 [cluster="lambda expression", label="Exit lambda expression", span="42-42"];
d83 [cluster="lambda expression", label="f().GetType()", span="42-42"];
d100 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
d99 [cluster="lambda expression", label="f()", span="55-55"];
d118 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
d117 [cluster="lambda expression", label="f()", span="97-97"];
d90 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
d91 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d92 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
d122 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
d126 [cluster="CSharpx.Maybe<T>.FromJust<T>()", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
d130 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
d137 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
d141 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d142 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d143 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="114-114"];
d85 [cluster="Unk.f", label="Entry Unk.f", span=""];
d86 [cluster="Unk.GetType", label="Entry Unk.GetType", span=""];
m0_0 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Entry CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="12-12"];
m0_1 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="result.Tag == ResultType.Ok", span="14-14"];
m0_2 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="var ok = (Ok<TSuccess, TMessage>)result", span="16-16"];
m0_4 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="return Enumerable.Empty<TMessage>();", span="19-19"];
m0_3 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="return ok.Value.Messages;", span="17-17"];
m0_5 [cluster="CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", file="ResultExtensions.cs", label="Exit CommandLine.Infrastructure.ResultExtensions.SuccessfulMessages<TSuccess, TMessage>(RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>)", span="12-12"];
m0_6 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ResultExtensions.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n41 -> n21  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
n41 -> n22  [color=darkseagreen4, key=1, label="CommandLine.Text.Example", style=dashed];
n0 -> n3  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.UnParserSettings>", style=dashed];
n0 -> n5  [color=darkseagreen4, key=1, label=object, style=dashed];
n18 -> n22  [color=darkseagreen4, key=1, label=object, style=dashed];
n19 -> n21  [color=darkseagreen4, key=1, label=other, style=dashed];
d31 -> d105  [color=green, key=1, label="lambda expression", style=dashed];
d3 -> d94  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> d102  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d113  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d30 -> d101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d20 -> d87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d20 -> d94  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d32 -> d109  [color=green, key=1, label="lambda expression", style=dashed];
d33 -> d112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d33 -> d113  [color=darkseagreen4, key=1, label=token, style=dashed];
d38 -> d44  [color=darkseagreen4, key=1, label=instance, style=dashed];
d38 -> d119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d134  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d40 -> d144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d40 -> d147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d0 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d1 -> d4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d19 -> d82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d19 -> d36  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
d23 -> d27  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
d94 -> d94  [color=darkseagreen4, key=1, label=p, style=dashed];
d94 -> d98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d25 -> d27  [color=darkseagreen4, key=1, label=preprocessorErrors, style=dashed];
d37 -> d116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d22 -> d102  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d41 -> d44  [color=darkseagreen4, key=1, label=instance, style=dashed];
d5 -> d11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d6 -> d15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d4 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d152 -> d94  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d153 -> d94  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d154 -> d102  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d154 -> d113  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d155 -> d102  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d156 -> d106  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d156 -> d110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d157 -> d113  [color=darkseagreen4, key=1, label=token, style=dashed];
d150 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d150 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d151 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d151 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
}
