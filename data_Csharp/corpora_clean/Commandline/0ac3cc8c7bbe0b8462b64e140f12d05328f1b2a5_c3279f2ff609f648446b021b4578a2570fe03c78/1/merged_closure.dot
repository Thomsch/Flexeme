digraph  {
d12 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="var verbs = Verb.SelectFromTypes(types)", prediction=0, span="33-33"];
d3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26"];
d13 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="return arguments.Empty()\r\n                ? ParserResult.Create<object>(\r\n                    ParserResultType.Verbs, new NullInstance(), new[] { new NoVerbSelectedError() }, Maybe.Just(types))\r\n                : nameComparer.Equals(''help'', arguments.First())\r\n                   ? ParserResult.Create<object>(\r\n                        ParserResultType.Verbs,\r\n                        new NullInstance(), new[] { CreateHelpVerbRequestedError(\r\n                            verbs,\r\n                            arguments.Skip(1).SingleOrDefault() ?? string.Empty,\r\n                            nameComparer) }, Maybe.Just(types))\r\n                   : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", prediction=1, span="35-45"];
d15 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
d14 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26"];
d16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="62-62"];
d17 [cluster="CommandLine.NullInstance.NullInstance()", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
d18 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="406-406"];
d19 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
d20 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", span="105-105"];
d21 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
d22 [cluster="System.StringComparer.Equals(string, string)", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
d23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
d24 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
d25 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Entry CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="69-69"];
d26 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="48-48"];
d27 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(() => Activator.CreateInstance(verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2)),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : ParserResult.Create<object>(\r\n                    ParserResultType.Verbs,\r\n                    new NullInstance(),\r\n                    new[] { new BadVerbSelectedError(arguments.First()) },\r\n                    Maybe.Just(verbs.Select(v => v.Item2)));", prediction=2, span="55-66"];
d28 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="48-48"];
d29 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
d30 [cluster="Unk.>", label="Entry Unk.>", span=""];
d31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
d32 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="342-342"];
d33 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d34 [cluster="Unk.Just", label="Entry Unk.Just", span=""];
d35 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
d38 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
d46 [cluster="lambda expression", label="Entry lambda expression", span="66-66"];
d49 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", color=green, community=0, label="return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", prediction=3, span="74-80"];
d50 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Exit CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="69-69"];
d51 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
d52 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
d53 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="368-368"];
d54 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
d55 [cluster="lambda expression", label="Entry lambda expression", span="75-75"];
d58 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
d56 [cluster="lambda expression", color=green, community=0, label="nameComparer.Equals(v.Item1.Name, verb)", prediction=4, span="75-75"];
d67 [label=string, span=""];
d68 [label="System.StringComparer", span=""];
d57 [cluster="lambda expression", label="Exit lambda expression", span="75-75"];
d1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return Choose(\r\n                (args, optionSpecs) => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer)),\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-23"];
d36 [cluster="lambda expression", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="55-55"];
d44 [cluster="lambda expression", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="57-57"];
d39 [cluster="lambda expression", label="Activator.CreateInstance(verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2)", span="57-57"];
d37 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
d40 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
d48 [cluster="lambda expression", label="Exit lambda expression", span="66-66"];
d47 [cluster="lambda expression", label="v.Item2", span="66-66"];
d60 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
d59 [cluster="lambda expression", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="78-78"];
d0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
d2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
d4 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
d64 [label="System.Collections.Generic.IEnumerable<string>", span=""];
d65 [label="System.StringComparer", span=""];
d43 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
d45 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
d66 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
d41 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d42 [cluster="Unk.CreateInstance", label="Entry Unk.CreateInstance", span=""];
d61 [cluster="HelpVerbRequestedError.cstr", label="Entry HelpVerbRequestedError.cstr", span=""];
d5 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="19-19"];
d9 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="19-19"];
d6 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
d62 [label="System.StringComparer", span=""];
d7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
d8 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
d63 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d10 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
d11 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_60 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", file="ValueMapper.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18"];
m0_43 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m0_6 [cluster="Unk.>", file="ValueMapper.cs", label="Entry Unk.>", span=""];
m0_34 [cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="67-67"];
m0_0 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="11-11"];
m0_3 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", color=green, community=0, file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", prediction=5, span="11-11"];
m0_2 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="return StatePair.Create(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="18-22"];
m0_1 [cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="16-16"];
m0_4 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25"];
m0_56 [cluster="CommandLine.Core.Specification.IsValue()", file="ValueMapper.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m0_7 [cluster="Unk.Create", file="ValueMapper.cs", label="Entry Unk.Create", span=""];
m0_71 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m0_44 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m0_42 [cluster="Unk.ToMaybe", file="ValueMapper.cs", label="Entry Unk.ToMaybe", span=""];
m0_45 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_46 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
m0_39 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueMapper.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m0_57 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="57-57"];
m0_8 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="19-19"];
m0_11 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="20-20"];
m0_14 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="21-21"];
m0_9 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item1", span="19-19"];
m0_10 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="19-19"];
m0_12 [cluster="lambda expression", file="ValueMapper.cs", label="pe.Item2", span="20-20"];
m0_13 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="20-20"];
m0_15 [cluster="lambda expression", file="ValueMapper.cs", label="e.Value", span="21-21"];
m0_16 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="21-21"];
m0_58 [cluster="lambda expression", file="ValueMapper.cs", label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="57-57"];
m0_50 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="35-35"];
m0_53 [cluster="lambda expression", file="ValueMapper.cs", label="Entry lambda expression", span="43-43"];
m0_51 [cluster="lambda expression", file="ValueMapper.cs", label=n, span="35-35"];
m0_52 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="35-35"];
m0_54 [cluster="lambda expression", file="ValueMapper.cs", label="CommandLine.ParserResult<T>", span=""];
m0_55 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="43-43"];
m0_59 [cluster="lambda expression", file="ValueMapper.cs", label="Exit lambda expression", span="57-57"];
m0_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m0_37 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m0_48 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="ValueMapper.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m0_38 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="83-83"];
m0_72 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="85-87"];
m0_73 [cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="83-83"];
m0_47 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m0_5 [cluster="Unk.Select", file="ValueMapper.cs", label="Entry Unk.Select", span=""];
m0_49 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueMapper.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="313-313"];
m0_61 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m0_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ValueMapper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m0_62 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="67-67"];
m0_63 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.TargetType", span="69-69"];
m0_67 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="specification.Max.IsJust()", span="74-74"];
m0_68 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Just(specification.Max.FromJust());", span="76-76"];
m0_64 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Scalar", span="71-71"];
m0_66 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="TargetType.Sequence", span="73-73"];
m0_65 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Just(1);", span="72-72"];
m0_69 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="return Maybe.Nothing<int>();", span="80-80"];
m0_70 [cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="67-67"];
m0_41 [cluster="Unk.FirstOrDefault", file="ValueMapper.cs", label="Entry Unk.FirstOrDefault", span=""];
m0_17 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="specProps.Empty()", span="30-30"];
m0_18 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="32-32"];
m0_23 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="40-40"];
m0_26 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="48-50"];
m0_27 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield break;", span="51-51"];
m0_28 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="54-59"];
m0_30 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="yield return value;", span="63-63"];
m0_19 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var pt = specProps.First()", span="34-34"];
m0_20 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().Return(n => n, values.Count()))", span="35-35"];
m0_24 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="43-43"];
m0_25 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="44-46"];
m0_29 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="61-61"];
m0_21 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="taken.Empty()", span="36-36"];
m0_31 [cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="ValueMapper.cs", label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25"];
m0_36 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="ValueMapper.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
m0_74 [file="ValueMapper.cs", label=pt, span=""];
d3 -> d13  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
d25 -> d56  [color=green, key=1, label=string, style=dashed];
d26 -> d36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d26 -> d39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
d26 -> d44  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d27 -> d35  [color=green, key=1, label="lambda expression", style=dashed];
d27 -> d38  [color=green, key=1, label="lambda expression", style=dashed];
d27 -> d46  [color=green, key=1, label="lambda expression", style=dashed];
d49 -> d55  [color=green, key=1, label="lambda expression", style=dashed];
d49 -> d58  [color=green, key=1, label="lambda expression", style=dashed];
d67 -> d56  [color=green, key=1, label=string, style=dashed];
d68 -> d56  [color=green, key=1, label="System.StringComparer", style=dashed];
d1 -> d4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d39 -> d43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d0 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d9  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d4 -> d9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d64 -> d36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d64 -> d44  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d64 -> d39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d65 -> d36  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d65 -> d44  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d65 -> d39  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d66 -> d39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
d5 -> d8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d62 -> d5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d62 -> d9  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d63 -> d9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_0 -> m0_3  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m0_0 -> m0_2  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_2 -> m0_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_4 -> m0_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m0_54 -> m0_3  [color=green, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_54 -> m0_2  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_62 -> m0_67  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_62 -> m0_68  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_28 -> m0_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_19 -> m0_25  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_19 -> m0_26  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_19 -> m0_28  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_19 -> m0_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
m0_20 -> m0_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_25  [color=darkseagreen4, key=1, label=taken, style=dashed];
m0_20 -> m0_28  [color=darkseagreen4, key=1, label=taken, style=dashed];
m0_20 -> m0_29  [color=darkseagreen4, key=1, label=taken, style=dashed];
m0_24 -> m0_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_74 -> m0_58  [color=darkseagreen4, key=1, label=pt, style=dashed];
}
