digraph  {
n77 [label="CSharpx.Maybe<T>", span=""];
n78 [label="CSharpx.Just<T>", span=""];
n79 [label="System.Func<TSource, CSharpx.Maybe<TValue>>", span=""];
n80 [label="System.Func<TSource, TValue, TResult>", span=""];
n81 [label=TSource, span=""];
n0 [cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", label="Entry CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19"];
n1 [cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", label="this.tag = tag", span="21-21"];
n2 [cluster="CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", label="Exit CSharpx.Maybe<T>.Maybe(CSharpx.MaybeType)", span="19-19"];
n3 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="29-29"];
n4 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="return Tag == MaybeType.Nothing;", span="31-31"];
n5 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Exit CSharpx.Maybe<T>.MatchNothing()", span="29-29"];
n6 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="34-34"];
n7 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", label="value = Tag == MaybeType.Just\r\n                ? ((Just<T>)this).Value\r\n                : default(T)", span="36-38"];
n8 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", label="return Tag == MaybeType.Just;", span="39-39"];
n9 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", label="Exit CSharpx.Maybe<T>.MatchJust(out T)", span="34-34"];
n10 [cluster="CSharpx.Nothing<T>.Nothing()", label="Entry CSharpx.Nothing<T>.Nothing()", span="48-48"];
n11 [cluster="CSharpx.Nothing<T>.Nothing()", label="Exit CSharpx.Nothing<T>.Nothing()", span="48-48"];
n12 [cluster="CSharpx.Just<T>.Just(T)", label="Entry CSharpx.Just<T>.Just(T)", span="58-58"];
n13 [cluster="CSharpx.Just<T>.Just(T)", label="this.value = value", span="61-61"];
n14 [cluster="CSharpx.Just<T>.Just(T)", label="Exit CSharpx.Just<T>.Just(T)", span="58-58"];
n15 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="75-75"];
n16 [cluster="CSharpx.Maybe.Nothing<T>()", label="return new Nothing<T>();", span="77-77"];
n17 [cluster="CSharpx.Maybe.Nothing<T>()", label="Exit CSharpx.Maybe.Nothing<T>()", span="75-75"];
n18 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="80-80"];
n19 [cluster="CSharpx.Maybe.Just<T>(T)", label="return new Just<T>(value);", span="82-82"];
n20 [cluster="CSharpx.Maybe.Just<T>(T)", label="Exit CSharpx.Maybe.Just<T>(T)", span="80-80"];
n21 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="Entry CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89"];
n22 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="either.Tag == Either2Type.Either1Of2", span="91-91"];
n23 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="return new Just<T1>(((Either1Of2<T1, T2>)either).Value);", span="93-93"];
n24 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="return new Nothing<T1>();", span="95-95"];
n25 [cluster="CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", label="Exit CSharpx.Maybe.OfEither<T1, T2>(CSharpx.Either<T1, T2>)", span="89-89"];
n26 [cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", label="Entry CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105"];
n27 [cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", label="return Equals(value, default(T)) ? Maybe.Nothing<T>() : Maybe.Just(value);", span="107-107"];
n28 [cluster="CSharpx.MaybeExtensions.ToMaybe<T>(T)", label="Exit CSharpx.MaybeExtensions.ToMaybe<T>(T)", span="105-105"];
n29 [cluster="object.Equals(object, object)", label="Entry object.Equals(object, object)", span="0-0"];
n30 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", label="Entry CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110"];
n31 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", label="T1 value1", span="112-112"];
n32 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : Maybe.Nothing<T2>();", span="113-115"];
n33 [cluster="CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", label="Exit CSharpx.MaybeExtensions.Bind<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110"];
n34 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n35 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", label="Entry CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118"];
n36 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", label="T1 value1", span="120-120"];
n37 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", label="return maybe.MatchJust(out value1)\r\n                ? Maybe.Just(func(value1))\r\n                : Maybe.Nothing<T2>();", span="121-123"];
n38 [cluster="CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", label="Exit CSharpx.MaybeExtensions.Map<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>)", span="118-118"];
n39 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", label="Entry CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126"];
n40 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", label="T1 value1", span="128-128"];
n41 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", label="return maybe.MatchJust(out value1)\r\n                ? func(value1)\r\n                : noneValue;", span="129-131"];
n42 [cluster="CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", label="Exit CSharpx.MaybeExtensions.Return<T1, T2>(CSharpx.Maybe<T1>, System.Func<T1, T2>, T2)", span="126-126"];
n43 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="Entry CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="134-134"];
n44 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="T value", span="136-136"];
n45 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="maybe.MatchJust(out value)", span="137-137"];
n46 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="action(value)", span="139-139"];
n47 [cluster="CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", label="Exit CSharpx.MaybeExtensions.Do<T>(CSharpx.Maybe<T>, System.Action<T>)", span="134-134"];
n48 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n49 [cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", label="Entry CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="143-143"];
n50 [cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", label="return maybe.Map(selector);", span="146-146"];
n51 [cluster="CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", label="Exit CSharpx.MaybeExtensions.Select<TSource, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, TResult>)", span="143-143"];
n52 [cluster="CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", label="Entry CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="118-118"];
n53 [cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", label="Entry CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149"];
n54 [cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", label="return maybe.Bind(\r\n                sourceValue => valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue)));", span="154-157"];
n58 [cluster="lambda expression", label="valueSelector(sourceValue)\r\n                    .Map(\r\n                        resultValue => resultSelector(sourceValue, resultValue))", span="155-157"];
n61 [cluster="lambda expression", label="resultSelector(sourceValue, resultValue)", span="157-157"];
n55 [cluster="CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", label="Exit CSharpx.MaybeExtensions.SelectMany<TSource, TValue, TResult>(CSharpx.Maybe<TSource>, System.Func<TSource, CSharpx.Maybe<TValue>>, System.Func<TSource, TValue, TResult>)", span="149-149"];
n56 [cluster="CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)", label="Entry CSharpx.Maybe<T1>.Bind<T1, T2>(System.Func<T1, CSharpx.Maybe<T2>>)", span="110-110"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="155-157"];
n59 [cluster="lambda expression", label="Exit lambda expression", span="155-157"];
n60 [cluster="lambda expression", label="Entry lambda expression", span="157-157"];
n62 [cluster="lambda expression", label="Exit lambda expression", span="157-157"];
n63 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n64 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="Entry CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160"];
n65 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="T value", span="162-162"];
n66 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="maybe.MatchJust(out value)", span="163-163"];
n68 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="throw exceptionToThrow ?? new ArgumentException(''Value empty.'');", span="167-167"];
n67 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="return value;", span="165-165"];
n69 [cluster="CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", label="Exit CSharpx.MaybeExtensions.FromJust<T>(CSharpx.Maybe<T>, System.Exception)", span="160-160"];
n70 [cluster="System.ArgumentException.ArgumentException(string)", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
n71 [cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", label="Entry CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170"];
n72 [cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", label="return maybe.Tag == MaybeType.Nothing;", span="172-172"];
n73 [cluster="CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", label="Exit CSharpx.MaybeExtensions.IsNothing<T>(CSharpx.Maybe<T>)", span="170-170"];
n74 [cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", label="Entry CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175"];
n75 [cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", label="return maybe.Tag == MaybeType.Just;", span="177-177"];
n76 [cluster="CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", label="Exit CSharpx.MaybeExtensions.IsJust<T>(CSharpx.Maybe<T>)", span="175-175"];
m0_9 [cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="HelpText.cs", label="Entry CommandLine.OptionAttribute.CreateOptionInfo()", span="77-77"];
m0_10 [cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="HelpText.cs", label="return new OptionInfo(ShortName, LongName);", span="79-79"];
m0_11 [cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="HelpText.cs", label="Exit CommandLine.OptionAttribute.CreateOptionInfo()", span="77-77"];
m0_12 [cluster="CommandLine.Parsing.OptionInfo.OptionInfo(char?, string)", file="HelpText.cs", label="Entry CommandLine.Parsing.OptionInfo.OptionInfo(char?, string)", span="78-78"];
m0_3 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="HelpText.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char)", span="49-49"];
m0_4 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="HelpText.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char)", span="49-49"];
m0_7 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="HelpText.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="68-68"];
m0_8 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="HelpText.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char, string)", span="68-68"];
m0_0 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="HelpText.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute()", span="40-40"];
m0_1 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="HelpText.cs", label="AutoLongName = true", span="42-42"];
m0_2 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="HelpText.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute()", span="40-40"];
m0_5 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="HelpText.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", span="58-58"];
m0_6 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="HelpText.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(string)", span="58-58"];
m0_13 [file="HelpText.cs", label="CommandLine.OptionAttribute", span=""];
m1_4 [cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.FakeOptionsWithPreBuiltParserState()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.FakeOptionsWithPreBuiltParserState()", span="21-21"];
m1_6 [cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.FakeOptionsWithPreBuiltParserState()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.FakeOptionsWithPreBuiltParserState()", span="21-21"];
m1_0 [cluster="CommandLine.Tests.Unit.Parser.FakeParserState.FakeParserState()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Parser.FakeParserState.FakeParserState()", span="11-11"];
m1_2 [cluster="CommandLine.Tests.Unit.Parser.FakeParserState.FakeParserState()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Parser.FakeParserState.FakeParserState()", span="11-11"];
m1_44 [cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized.FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Parser.FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized.FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized()", span="52-52"];
m1_39 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", span="86-86"];
m1_40 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs", label="var options = new FakeOptionsWithParserStateAttributeAppliedInWrongWayAndNotInitialized()", span="88-88"];
m1_41 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs", label="Assert.ThrowsDelegate act = () => new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--foo'' }, options)", span="90-91"];
m1_42 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs", label="Assert.Throws<InvalidOperationException>(act)", span="93-93"];
m1_43 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type_also_if_not_initialized()", span="86-86"];
m1_27 [cluster="System.IO.StringWriter.StringWriter()", file="UnParserExtensions.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m1_28 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", span="75-75"];
m1_29 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", file="UnParserExtensions.cs", label="var options = new FakeOptionsWithParserStateAttributeAppliedInWrongWay()", span="77-77"];
m1_31 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", file="UnParserExtensions.cs", label="Assert.Throws<InvalidOperationException>(act)", span="82-82"];
m1_32 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_attribute_should_be_applied_to_a_property_of_the_correct_type()", span="75-75"];
m1_22 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="UnParserExtensions.cs", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="85-85"];
m1_23 [cluster="CommandLine.Parser.ParseArguments(string[], object)", file="UnParserExtensions.cs", label="Entry CommandLine.Parser.ParseArguments(string[], object)", span="140-140"];
m1_10 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="UnParserExtensions.cs", label="var enumerator = source.GetEnumerator()", span="20-20"];
m1_11 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, file="UnParserExtensions.cs", label="enumerator.MoveNext()", prediction=0, span="22-22"];
m1_12 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", color=green, community=0, file="UnParserExtensions.cs", label="var left = enumerator.Current", prediction=1, span="24-24"];
m1_19 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="68-69"];
m1_48 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="91-91"];
m1_20 [cluster="lambda expression", file="UnParserExtensions.cs", label="new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--bar'' }, options)", span="68-69"];
m1_21 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="68-69"];
m1_25 [cluster="lambda expression", file="UnParserExtensions.cs", label="with.HelpWriter = new StringWriter()", span="69-69"];
m1_24 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="69-69"];
m1_26 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="69-69"];
m1_33 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="79-80"];
m1_35 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="79-80"];
m1_36 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="80-80"];
m1_38 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="80-80"];
m1_46 [cluster="lambda expression", file="UnParserExtensions.cs", label="new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--foo'' }, options)", span="90-91"];
m1_45 [cluster="lambda expression", file="UnParserExtensions.cs", label="Entry lambda expression", span="90-91"];
m1_47 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="90-91"];
m1_49 [cluster="lambda expression", file="UnParserExtensions.cs", label="with.HelpWriter = new StringWriter()", span="91-91"];
m1_50 [cluster="lambda expression", file="UnParserExtensions.cs", label="Exit lambda expression", span="91-91"];
m1_18 [cluster="Unk.>", file="UnParserExtensions.cs", label="Entry Unk.>", span=""];
m1_7 [cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.GetUsage()", file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.GetUsage()", span="26-26"];
m1_8 [cluster="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState.GetUsage()", file="UnParserExtensions.cs", label="return ''FakeOptionsWithPreBuiltParserState::GetUsage()'';", span="28-28"];
m1_9 [cluster="CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", file="UnParserExtensions.cs", label="Entry CommandLine.Infrastructure.EnumerableExtensions.PairwiseImpl<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TResult>)", span="18-18"];
m1_13 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", color=green, community=0, file="UnParserExtensions.cs", label="Entry CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", prediction=2, span="64-64"];
m1_15 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", file="UnParserExtensions.cs", label="Assert.ThrowsDelegate act = () => new CommandLine.Parser(\r\n                with => with.HelpWriter = new StringWriter()).ParseArguments(new[] { ''--bar'' }, options)", span="68-69"];
m1_16 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", file="UnParserExtensions.cs", label="Assert.Throws<InvalidOperationException>(act)", span="71-71"];
m1_14 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", file="UnParserExtensions.cs", label="var options = new FakeOptionsWithPreBuiltParserState()", span="66-66"];
m1_17 [cluster="CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", file="UnParserExtensions.cs", label="Exit CommandLine.Tests.Unit.Parser.ParserStateFixture.Parser_state_instance_should_not_pre_built()", span="64-64"];
m1_3 [cluster="System.Collections.Generic.List<T>.List()", file="UnParserExtensions.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_51 [file="UnParserExtensions.cs", label="CommandLine.Tests.Unit.Parser.FakeParserState", span=""];
m1_52 [file="UnParserExtensions.cs", label="CommandLine.Tests.Unit.Parser.FakeOptionsWithPreBuiltParserState", span=""];
m1_53 [file="UnParserExtensions.cs", label="CommandLine.Tests.Unit.Parser.FakeOptionsWithParserStateAttributeAppliedInWrongWay", span=""];
m1_54 [file="UnParserExtensions.cs", label=options, span=""];
m1_55 [file="UnParserExtensions.cs", label=options, span=""];
m1_56 [file="UnParserExtensions.cs", label=options, span=""];
n77 -> n4  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
n77 -> n8  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
n79 -> n58  [color=darkseagreen4, key=1, label="System.Func<TSource, CSharpx.Maybe<TValue>>", style=dashed];
n80 -> n58  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
n80 -> n61  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
n81 -> n61  [color=darkseagreen4, key=1, label=TSource, style=dashed];
n7 -> n9  [color=darkseagreen4, key=1, label="out T", style=dashed];
n21 -> n23  [color=darkseagreen4, key=1, label="CSharpx.Either<T1, T2>", style=dashed];
n30 -> n32  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T1>", style=dashed];
n32 -> n32  [color=darkseagreen4, key=1, label=value1, style=dashed];
n35 -> n37  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T1>", style=dashed];
n37 -> n37  [color=darkseagreen4, key=1, label=value1, style=dashed];
n39 -> n41  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T1>", style=dashed];
n41 -> n41  [color=darkseagreen4, key=1, label=value1, style=dashed];
n43 -> n45  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
n43 -> n46  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
n53 -> n58  [color=darkseagreen4, key=1, label="System.Func<TSource, CSharpx.Maybe<TValue>>", style=dashed];
n53 -> n61  [color=darkseagreen4, key=1, label="System.Func<TSource, TValue, TResult>", style=dashed];
n54 -> n57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n58 -> n60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n57 -> n61  [color=darkseagreen4, key=1, label=TSource, style=dashed];
n64 -> n66  [color=darkseagreen4, key=1, label="CSharpx.Maybe<T>", style=dashed];
n64 -> n68  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m0_13 -> m0_10  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m1_10 -> m1_13  [color=green, key=1, label=enumerator, style=dashed];
m1_14 -> m1_16  [color=darkseagreen4, key=1, label=right, style=dashed];
}
