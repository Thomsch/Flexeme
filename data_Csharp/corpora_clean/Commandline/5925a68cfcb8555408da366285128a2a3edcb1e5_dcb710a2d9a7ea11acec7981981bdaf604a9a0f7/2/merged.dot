digraph  {
n59 [label="System.Globalization.CultureInfo", span=""];
n60 [label=type, span=""];
n0 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
n1 [label="return scalar\r\n                ? ChangeType(values.Single(), conversionType, conversionCulture)\r\n                : ChangeType(values, conversionType, conversionCulture);", span="14-16", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
n2 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
n3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
n4 [label="Entry CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n5 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n6 [label="var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJust(\r\n                                  new ApplicationException(''Non scalar properties should be sequence of type IEnumerable<T>.''))", span="21-26", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n7 [label="var converted = values.Select(value => ChangeType(value, type, conversionCulture))", span="28-28", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n21 [label="ChangeType(value, type, conversionCulture)", span="28-28", cluster="lambda expression"];
n10 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
n11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()"];
n12 [label="Entry T.ToMaybe<T>()", span="79-79", cluster="T.ToMaybe<T>()"];
n13 [label="Entry System.ApplicationException.ApplicationException(string)", span="0-0", cluster="System.ApplicationException.ApplicationException(string)"];
n14 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)"];
n8 [label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToArray(type));", span="30-32", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n15 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n20 [label="Entry lambda expression", span="28-28", cluster="lambda expression"];
n9 [label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="19-19", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)"];
n16 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n17 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()"];
n18 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n19 [label="Entry Unk.Just", span="", cluster="Unk.Just"];
n23 [label="Entry lambda expression", span="30-30", cluster="lambda expression"];
n27 [label="Entry lambda expression", span="32-32", cluster="lambda expression"];
n22 [label="Exit lambda expression", span="28-28", cluster="lambda expression"];
n24 [label="a.MatchNothing()", span="30-30", cluster="lambda expression"];
n25 [label="Exit lambda expression", span="30-30", cluster="lambda expression"];
n26 [label="Entry Unk.MatchNothing", span="", cluster="Unk.MatchNothing"];
n28 [label="((Just<object>)c).Value", span="32-32", cluster="lambda expression"];
n29 [label="Exit lambda expression", span="32-32", cluster="lambda expression"];
n30 [label="return Maybe.Just(\r\n                    MatchBoolString(value)\r\n                        ? ConvertBoolString(value)\r\n                        : conversionType.IsEnum\r\n                            ? ConvertEnumString(value, conversionType)\r\n                            : Convert.ChangeType(value, conversionType, conversionCulture));", span="39-44", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n31 [label=InvalidCastException, span="46-46", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n32 [label="return Maybe.Nothing<object>();", span="48-48", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n33 [label=FormatException, span="50-50", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n34 [label="return Maybe.Nothing<object>();", span="52-52", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n35 [label=OverflowException, span="54-54", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n36 [label="return Maybe.Nothing<object>();", span="56-56", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n37 [label="Exit CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)", span="35-35", cluster="CommandLine.Core.TypeConverter.ChangeType(string, System.Type, System.Globalization.CultureInfo)"];
n38 [label="Entry CommandLine.Core.TypeConverter.MatchBoolString(string)", span="60-60", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)"];
n39 [label="Entry CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="66-66", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)"];
n40 [label="Entry CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="71-71", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n41 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)"];
n42 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)"];
n43 [label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase)\r\n                   || value.Equals(''false'', StringComparison.OrdinalIgnoreCase);", span="62-63", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)"];
n44 [label="Exit CommandLine.Core.TypeConverter.MatchBoolString(string)", span="60-60", cluster="CommandLine.Core.TypeConverter.MatchBoolString(string)"];
n45 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)"];
n46 [label="return value.Equals(''true'', StringComparison.OrdinalIgnoreCase);", span="68-68", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)"];
n47 [label="Exit CommandLine.Core.TypeConverter.ConvertBoolString(string)", span="66-66", cluster="CommandLine.Core.TypeConverter.ConvertBoolString(string)"];
n48 [label="object parsedValue", span="73-73", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n49 [label="parsedValue = Enum.Parse(conversionType, value)", span="76-76", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n52 [label="Enum.IsDefined(conversionType, parsedValue)", span="82-82", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n50 [label=ArgumentException, span="78-78", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n56 [label="Entry System.Enum.Parse(System.Type, string)", span="0-0", cluster="System.Enum.Parse(System.Type, string)"];
n53 [label="return parsedValue;", span="84-84", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n51 [label="throw new FormatException();", span="80-80", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n54 [label="throw new FormatException();", span="86-86", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n58 [label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0", cluster="System.Enum.IsDefined(System.Type, object)"];
n55 [label="Exit CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)", span="71-71", cluster="CommandLine.Core.TypeConverter.ConvertEnumString(string, System.Type)"];
n57 [label="Entry System.FormatException.FormatException()", span="0-0", cluster="System.FormatException.FormatException()"];
d1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return Tokenizer.Normalize(explodedTokens, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture,\r\n                nonFatalErrors);", span="21-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0];
d0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d4 [label="Entry lambda expression", span="23-30", cluster="lambda expression"];
d7 [label="return Tokenizer.Normalize(explodedTokens, name => NameLookup.Contains(name, optionSpecs, nameComparer));", span="29-29", cluster="lambda expression", color=green, community=0];
d158 [label="System.StringComparer", span=""];
d6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="26-28", cluster="lambda expression"];
d8 [label="Exit lambda expression", span="23-30", cluster="lambda expression"];
d11 [label="Entry CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", span="67-67", cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)"];
d21 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="29-29", cluster="lambda expression", color=green, community=0];
d159 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d15 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="25-25", cluster="lambda expression"];
d13 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="25-25", cluster="lambda expression"];
d17 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="28-28", cluster="lambda expression"];
d50 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d23 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="45-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d27 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="56-60", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d102 [label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="57-60", cluster="lambda expression"];
d28 [label="arguments.Any()", span="62-62", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d29 [label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="64-64", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d32 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="71-71", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d34 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="75-77", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d110 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="77-77", cluster="lambda expression"];
d35 [label="var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="79-83", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d114 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="82-82", cluster="lambda expression"];
d36 [label="var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="85-88", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d118 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="88-88", cluster="lambda expression"];
d37 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="90-92", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d121 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="92-92", cluster="lambda expression"];
d41 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="100-100", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d48 [label="var warnings =\r\n                from e in allErrors where nonFatalErrors.Contains(e.Tag)\r\n                select e", span="137-139", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
d16 [label="Entry lambda expression", span="28-28", cluster="lambda expression"];
d9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d12 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
d14 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
d18 [label="Exit lambda expression", span="28-28", cluster="lambda expression"];
d19 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d31 [label="return new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), preprocessorErrors);", span="67-67", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d49 [label="return allErrors\r\n                .Except(warnings)\r\n                .ToParserResult(instance);", span="141-143", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d24 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="47-48", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d51 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
d90 [label="Entry lambda expression", span="45-45", cluster="lambda expression"];
d40 [label="typeInfo.IsMutable()", span="98-98", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d43 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="116-116", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d26 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="52-54", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d160 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d161 [label=specProps, span=""];
d101 [label="Entry lambda expression", span="56-60", cluster="lambda expression"];
d103 [label="Exit lambda expression", span="56-60", cluster="lambda expression"];
d104 [label="Entry System.Type.IsMutable()", span="139-139", cluster="System.Type.IsMutable()"];
d73 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()"];
d75 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
d105 [label="Entry Unk.>", span="", cluster="Unk.>"];
d106 [label="Entry lambda expression", span="58-58", cluster="lambda expression"];
d55 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
d30 [label="preprocessorErrors.Any()", span="65-65", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d56 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)"];
d57 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
d33 [label="var tokens = tokenizerResult.SucceededWith()", span="73-73", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d62 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
d47 [label="var allErrors =\r\n                tokenizerResult\r\n                    .SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                    .Memorize()", span="128-135", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d64 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)"];
d109 [label="Entry lambda expression", span="77-77", cluster="lambda expression"];
d162 [label="System.StringComparer", span=""];
d163 [label=optionSpecs, span=""];
d111 [label="Exit lambda expression", span="77-77", cluster="lambda expression"];
d112 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d65 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()"];
d66 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues"];
d113 [label="Entry lambda expression", span="82-82", cluster="lambda expression"];
d38 [label="var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", span="94-95", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d164 [label="System.Globalization.CultureInfo", span=""];
d115 [label="Exit lambda expression", span="82-82", cluster="lambda expression"];
d116 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
d67 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
d117 [label="Entry lambda expression", span="88-88", cluster="lambda expression"];
d119 [label="Exit lambda expression", span="88-88", cluster="lambda expression"];
d68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
d69 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
d70 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification"];
d120 [label="Entry lambda expression", span="92-92", cluster="lambda expression"];
d165 [label=token, span=""];
d122 [label="Exit lambda expression", span="92-92", cluster="lambda expression"];
d123 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)"];
d42 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="101-112", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d124 [label="Entry lambda expression", span="100-100", cluster="lambda expression"];
d87 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
d83 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
d58 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d59 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
d60 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
d61 [label="Entry System.Type.ToTypeInfo()", span="174-174", cluster="System.Type.ToTypeInfo()"];
d45 [label="instance = (T)ctor.Invoke(values)", span="122-122", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d88 [label="Entry Unk.Except", span="", cluster="Unk.Except"];
d89 [label="Entry Unk.ToParserResult", span="", cluster="Unk.ToParserResult"];
d25 [label="var specs = from pt in specProps select pt.Specification", span="50-50", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d52 [label="Entry Unk.GetSpecifications", span="", cluster="Unk.GetSpecifications"];
d95 [label="Entry lambda expression", span="47-48", cluster="lambda expression"];
d44 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="117-121", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d92 [label="Exit lambda expression", span="45-45", cluster="lambda expression"];
d91 [label="f().GetType()", span="45-45", cluster="lambda expression"];
d39 [label="T instance", span="97-97", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d72 [label="Entry Unk.IsMutable", span="", cluster="Unk.IsMutable"];
d76 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor"];
d53 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate"];
d54 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()"];
d108 [label="Exit lambda expression", span="58-58", cluster="lambda expression"];
d107 [label="f()", span="58-58", cluster="lambda expression"];
d63 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()"];
d46 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="125-126", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d84 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()"];
d85 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
d86 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize"];
d71 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
d74 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)"];
d127 [label="Entry lambda expression", span="103-103", cluster="lambda expression"];
d131 [label="Entry lambda expression", span="104-104", cluster="lambda expression"];
d135 [label="Entry lambda expression", span="106-106", cluster="lambda expression"];
d139 [label="Entry lambda expression", span="107-107", cluster="lambda expression"];
d142 [label="Entry lambda expression", span="109-111", cluster="lambda expression"];
d146 [label="Entry lambda expression", span="112-112", cluster="lambda expression"];
d126 [label="Exit lambda expression", span="100-100", cluster="lambda expression"];
d125 [label="f()", span="100-100", cluster="lambda expression"];
d81 [label="Entry Unk.Invoke", span="", cluster="Unk.Invoke"];
d97 [label="Exit lambda expression", span="47-48", cluster="lambda expression"];
d96 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="47-48", cluster="lambda expression"];
d77 [label="Entry Unk.GetParameters", span="", cluster="Unk.GetParameters"];
d78 [label="Entry Unk.ToLower", span="", cluster="Unk.ToLower"];
d79 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()"];
d80 [label="Entry Unk.CreateDefaultForImmutable", span="", cluster="Unk.CreateDefaultForImmutable"];
d152 [label="Entry lambda expression", span="119-119", cluster="lambda expression"];
d155 [label="Entry lambda expression", span="120-120", cluster="lambda expression"];
d93 [label="Entry Unk.f", span="", cluster="Unk.f"];
d94 [label="Entry Unk.GetType", span="", cluster="Unk.GetType"];
d82 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d129 [label="Exit lambda expression", span="103-103", cluster="lambda expression"];
d128 [label="sp.Value.IsJust()", span="103-103", cluster="lambda expression"];
d133 [label="Exit lambda expression", span="104-104", cluster="lambda expression"];
d132 [label="sp.Value.FromJust()", span="104-104", cluster="lambda expression"];
d137 [label="Exit lambda expression", span="106-106", cluster="lambda expression"];
d136 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="106-106", cluster="lambda expression"];
d141 [label="Exit lambda expression", span="107-107", cluster="lambda expression"];
d140 [label="sp.Specification.DefaultValue.FromJust()", span="107-107", cluster="lambda expression"];
d144 [label="Exit lambda expression", span="109-111", cluster="lambda expression"];
d143 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="109-111", cluster="lambda expression"];
d148 [label="Exit lambda expression", span="112-112", cluster="lambda expression"];
d147 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="112-112", cluster="lambda expression"];
d98 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)"];
d99 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
d100 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)"];
d154 [label="Exit lambda expression", span="119-119", cluster="lambda expression"];
d153 [label=v, span="119-119", cluster="lambda expression"];
d157 [label="Exit lambda expression", span="120-120", cluster="lambda expression"];
d156 [label=d, span="120-120", cluster="lambda expression"];
d130 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()"];
d134 [label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342", cluster="CSharpx.Maybe<T>.FromJust<T>()"];
d138 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334", cluster="CSharpx.Maybe<T>.IsNothing<T>()"];
d145 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()"];
d149 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
d150 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
d151 [label="Entry System.Type.CreateEmptyArray()", span="125-125", cluster="System.Type.CreateEmptyArray()"];
m1_11 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs"];
m1_20 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="42-42", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_21 [label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="45-46", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_22 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="47-48", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_24 [label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="60-60", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_23 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="51-57", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_25 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="42-42", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_35 [label="Entry CommandLine.Core.Token.Value(string, bool)", span="29-29", cluster="CommandLine.Core.Token.Value(string, bool)", file="TokenizerTests.cs"];
m1_29 [label=specs, span="", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m1_30 [label=specs, span="", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=1, file="TokenizerTests.cs"];
m1_31 [label="Func<string, bool> nameLookup =\r\n                name => name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="74-75", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=1, file="TokenizerTests.cs"];
m1_33 [label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="90-90", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=0, file="TokenizerTests.cs"];
m1_32 [label="var result =\r\n                Tokenizer.Normalize(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>()\r\n                            .Concat(\r\n                                new[] {\r\n                                    Token.Name(''x''), Token.Name(''string-seq''), Token.Value(''aaa''), Token.Value(''bb''),\r\n                                    Token.Name(''unknown''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                    nameLookup)", span="78-87", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", color=green, community=1, file="TokenizerTests.cs"];
m1_34 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", span="68-68", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Normalize_should_remove_all_value_with_explicit_assignment_of_existing_name()", file="TokenizerTests.cs"];
m1_8 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="TokenizerTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="18-18", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_1 [label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="21-22", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_2 [label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", span="23-24", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_4 [label="((Ok<IEnumerable<Token>, Error>)result).Value.Success.ShouldBeEquivalentTo(expectedTokens)", span="36-36", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_3 [label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    Result.Succeed(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="27-33", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="18-18", cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs"];
m1_37 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="TokenizerTests.cs"];
m1_17 [label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="33-33", cluster="lambda expression", file="TokenizerTests.cs"];
m1_16 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="TokenizerTests.cs"];
m1_18 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="TokenizerTests.cs"];
m1_27 [label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="57-57", cluster="lambda expression", file="TokenizerTests.cs"];
m1_26 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="TokenizerTests.cs"];
m1_28 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="TokenizerTests.cs"];
m1_38 [label="name.Equals(''x'') || name.Equals(''string-seq'') || name.Equals(''switch'')", span="75-75", cluster="lambda expression", color=green, community=0, file="TokenizerTests.cs"];
m1_39 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="TokenizerTests.cs"];
m1_36 [label="Entry CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", span="67-67", cluster="CommandLine.Core.Tokenizer.Normalize(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, bool>)", file="TokenizerTests.cs"];
m1_14 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", file="TokenizerTests.cs"];
m1_6 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs"];
m1_9 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="TokenizerTests.cs"];
m1_40 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TokenizerTests.cs"];
m1_12 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs"];
m1_7 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs"];
m1_15 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="TokenizerTests.cs"];
m1_13 [label="Entry RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", span="202-202", cluster="RailwaySharp.ErrorHandling.Result.Succeed<TSuccess, TMessage>(TSuccess, System.Collections.Generic.IEnumerable<TMessage>)", file="TokenizerTests.cs"];
m1_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs"];
n59 -> n21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n60 -> n21  [key=1, style=dashed, color=darkseagreen4, label=type];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n30  [key=0, style=solid];
n4 -> n0  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
n4 -> n6  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type conversionType"];
n4 -> n5  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
n4 -> n7  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
n5 -> n21  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
n5 -> n0  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Globalization.CultureInfo conversionCulture"];
n6 -> n7  [key=0, style=solid];
n6 -> n10  [key=2, style=dotted];
n6 -> n11  [key=2, style=dotted];
n6 -> n12  [key=2, style=dotted];
n6 -> n13  [key=2, style=dotted];
n6 -> n14  [key=2, style=dotted];
n6 -> n21  [key=1, style=dashed, color=darkseagreen4, label=type];
n6 -> n8  [key=1, style=dashed, color=darkseagreen4, label=type];
n7 -> n8  [key=0, style=solid];
n7 -> n15  [key=2, style=dotted];
n7 -> n20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n21 -> n22  [key=0, style=solid];
n21 -> n4  [key=2, style=dotted];
n8 -> n9  [key=0, style=solid];
n8 -> n16  [key=2, style=dotted];
n8 -> n17  [key=2, style=dotted];
n8 -> n15  [key=2, style=dotted];
n8 -> n18  [key=2, style=dotted];
n8 -> n19  [key=2, style=dotted];
n8 -> n23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n8 -> n27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n20 -> n21  [key=0, style=solid];
n20 -> d21  [key=0, style=solid, color=green];
n9 -> n5  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n22 -> n20  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n24 -> n26  [key=2, style=dotted];
n25 -> n23  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n29 -> n27  [key=0, style=bold, color=blue];
n30 -> n37  [key=0, style=solid];
n30 -> n38  [key=2, style=dotted];
n30 -> n39  [key=2, style=dotted];
n30 -> n40  [key=2, style=dotted];
n30 -> n41  [key=2, style=dotted];
n30 -> n42  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n32 -> n37  [key=0, style=solid];
n32 -> n17  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n34 -> n37  [key=0, style=solid];
n34 -> n17  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n17  [key=2, style=dotted];
n37 -> n4  [key=0, style=bold, color=blue];
n38 -> n43  [key=0, style=solid];
n38 -> n4  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
n39 -> n46  [key=0, style=solid];
n39 -> n4  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
n40 -> n48  [key=0, style=solid];
n40 -> n49  [key=1, style=dashed, color=darkseagreen4, label=string];
n40 -> n52  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
n40 -> n4  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type conversionType"];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=2, style=dotted];
n44 -> n38  [key=0, style=bold, color=blue];
n46 -> n47  [key=0, style=solid];
n46 -> n45  [key=2, style=dotted];
n47 -> n39  [key=0, style=bold, color=blue];
n48 -> n49  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n49 -> n52  [key=0, style=solid];
n49 -> n56  [key=2, style=dotted];
n49 -> n53  [key=1, style=dashed, color=darkseagreen4, label=parsedValue];
n52 -> n53  [key=0, style=solid];
n52 -> n54  [key=0, style=solid];
n52 -> n58  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n53 -> n55  [key=0, style=solid];
n51 -> n55  [key=0, style=solid];
n51 -> n57  [key=2, style=dotted];
n54 -> n55  [key=0, style=solid];
n54 -> n57  [key=2, style=dotted];
n55 -> n40  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=2, style=dotted, color=green];
d1 -> d4  [key=1, style=dashed, color=green, label="lambda expression"];
d0 -> d1  [key=0, style=solid, color=green];
d0 -> d7  [key=1, style=dashed, color=green, label="System.StringComparer"];
d0 -> d21  [key=1, style=dashed, color=green, label="System.StringComparer"];
d0 -> d5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d13  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d17  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> Build"];
d2 -> d0  [key=0, style=bold, color=blue];
d3 -> d23  [key=0, style=solid];
d3 -> d27  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d3 -> d102  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d3 -> d28  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d3 -> d29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d3 -> d32  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
d3 -> d34  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d110  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d35  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d114  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d3 -> d36  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d3 -> d118  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d3 -> d37  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d121  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d41  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d3 -> d48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
d4 -> d7  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d21  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d5  [key=0, style=solid];
d4 -> d13  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d17  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d11  [key=2, style=dotted, color=green];
d7 -> n20  [key=1, style=dashed, color=green, label="lambda expression"];
d158 -> d7  [key=1, style=dashed, color=green, label="System.StringComparer"];
d158 -> d21  [key=1, style=dashed, color=green, label="System.StringComparer"];
d158 -> d5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d158 -> d13  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d158 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d158 -> d17  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d10  [key=2, style=dotted];
d6 -> d16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d8 -> d4  [key=0, style=bold, color=blue];
d21 -> n22  [key=0, style=solid, color=green];
d21 -> d15  [key=2, style=dotted, color=green];
d159 -> d21  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d159 -> d13  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d159 -> d17  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d5 -> d6  [key=0, style=solid];
d5 -> d9  [key=2, style=dotted];
d5 -> d12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d13 -> d15  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=2, style=dotted];
d50 -> d3  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid];
d23 -> d51  [key=2, style=dotted];
d23 -> d90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d23 -> d40  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d23 -> d43  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d27 -> d27  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
d27 -> d28  [key=0, style=solid];
d27 -> d31  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
d102 -> d102  [key=1, style=dashed, color=darkseagreen4, label=p];
d102 -> d103  [key=0, style=solid];
d102 -> d104  [key=2, style=dotted];
d102 -> d73  [key=2, style=dotted];
d102 -> d51  [key=2, style=dotted];
d102 -> d75  [key=2, style=dotted];
d102 -> d105  [key=2, style=dotted];
d102 -> d106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d28 -> d29  [key=0, style=solid];
d28 -> d32  [key=0, style=solid];
d28 -> d55  [key=2, style=dotted];
d29 -> d30  [key=0, style=solid];
d29 -> d56  [key=2, style=dotted];
d29 -> d57  [key=2, style=dotted];
d29 -> d31  [key=1, style=dashed, color=darkseagreen4, label=preprocessorErrors];
d32 -> d33  [key=0, style=solid];
d32 -> d62  [key=2, style=dotted];
d32 -> d47  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
d34 -> d35  [key=0, style=solid];
d34 -> d64  [key=2, style=dotted];
d34 -> d109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d34 -> d36  [key=1, style=dashed, color=darkseagreen4, label=partitions];
d34 -> d37  [key=1, style=dashed, color=darkseagreen4, label=partitions];
d110 -> d111  [key=0, style=solid];
d110 -> d112  [key=2, style=dotted];
d35 -> d35  [key=1, style=dashed, color=darkseagreen4, label=pt];
d35 -> d36  [key=0, style=solid];
d35 -> d65  [key=2, style=dotted];
d35 -> d66  [key=2, style=dotted];
d35 -> d113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d35 -> d38  [key=1, style=dashed, color=darkseagreen4, label=optionSpecPropsResult];
d35 -> d47  [key=1, style=dashed, color=darkseagreen4, label=optionSpecPropsResult];
d114 -> d115  [key=0, style=solid];
d114 -> d116  [key=2, style=dotted];
d36 -> d36  [key=1, style=dashed, color=darkseagreen4, label=pt];
d36 -> d37  [key=0, style=solid];
d36 -> d67  [key=2, style=dotted];
d36 -> d66  [key=2, style=dotted];
d36 -> d117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d36 -> d38  [key=1, style=dashed, color=darkseagreen4, label=valueSpecPropsResult];
d36 -> d47  [key=1, style=dashed, color=darkseagreen4, label=valueSpecPropsResult];
d118 -> d119  [key=0, style=solid];
d118 -> d116  [key=2, style=dotted];
d37 -> d37  [key=1, style=dashed, color=darkseagreen4, label=token];
d37 -> d38  [key=0, style=solid];
d37 -> d68  [key=2, style=dotted];
d37 -> d69  [key=2, style=dotted];
d37 -> d70  [key=2, style=dotted];
d37 -> d120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d37 -> d121  [key=1, style=dashed, color=darkseagreen4, label=token];
d37 -> d47  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
d121 -> d122  [key=0, style=solid];
d121 -> d123  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d41 -> d73  [key=2, style=dotted];
d41 -> d51  [key=2, style=dotted];
d41 -> d124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d48 -> d48  [key=1, style=dashed, color=darkseagreen4, label=e];
d48 -> d49  [key=0, style=solid];
d48 -> d87  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d12 -> d13  [key=0, style=solid];
d14 -> d12  [key=0, style=bold, color=blue];
d18 -> d16  [key=0, style=bold, color=blue];
d31 -> d50  [key=0, style=solid];
d31 -> d58  [key=2, style=dotted];
d31 -> d59  [key=2, style=dotted];
d31 -> d60  [key=2, style=dotted];
d31 -> d61  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d49 -> d88  [key=2, style=dotted];
d49 -> d89  [key=2, style=dotted];
d24 -> d27  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d24 -> d102  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d24 -> d35  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d24 -> d36  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d24 -> d25  [key=0, style=solid];
d24 -> d52  [key=2, style=dotted];
d24 -> d95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d24 -> d43  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d90 -> d91  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d40 -> d43  [key=0, style=solid];
d40 -> d72  [key=2, style=dotted];
d43 -> d43  [key=1, style=dashed, color=darkseagreen4, label=sp];
d43 -> d44  [key=0, style=solid];
d43 -> d75  [key=2, style=dotted];
d43 -> d76  [key=2, style=dotted];
d43 -> d45  [key=1, style=dashed, color=darkseagreen4, label=ctor];
d26 -> d27  [key=0, style=solid];
d26 -> d32  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d26 -> d34  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d26 -> d110  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d26 -> d37  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d26 -> d53  [key=2, style=dotted];
d26 -> d54  [key=2, style=dotted];
d160 -> d102  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d161 -> d102  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d101 -> d102  [key=0, style=solid];
d103 -> d101  [key=0, style=bold, color=blue];
d106 -> d107  [key=0, style=solid];
d30 -> d32  [key=0, style=solid];
d30 -> d31  [key=0, style=solid];
d30 -> d55  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d63  [key=2, style=dotted];
d33 -> d46  [key=1, style=dashed, color=darkseagreen4, label=tokens];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [key=1, style=dashed, color=darkseagreen4, label=allErrors];
d47 -> d84  [key=2, style=dotted];
d47 -> d85  [key=2, style=dotted];
d47 -> d86  [key=2, style=dotted];
d109 -> d110  [key=0, style=solid];
d162 -> d110  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d162 -> d121  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d163 -> d110  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d111 -> d109  [key=0, style=bold, color=blue];
d113 -> d114  [key=0, style=solid];
d38 -> d39  [key=0, style=solid];
d38 -> d63  [key=2, style=dotted];
d38 -> d71  [key=2, style=dotted];
d38 -> d42  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d38 -> d44  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d38 -> d46  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d164 -> d114  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d164 -> d118  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d115 -> d113  [key=0, style=bold, color=blue];
d117 -> d118  [key=0, style=solid];
d119 -> d117  [key=0, style=bold, color=blue];
d120 -> d121  [key=0, style=solid];
d165 -> d121  [key=1, style=dashed, color=darkseagreen4, label=token];
d122 -> d120  [key=0, style=bold, color=blue];
d42 -> d49  [key=1, style=dashed, color=darkseagreen4, label=instance];
d42 -> d42  [key=1, style=dashed, color=darkseagreen4, label=instance];
d42 -> d46  [key=0, style=solid];
d42 -> d74  [key=2, style=dotted];
d42 -> d127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d139  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d42 -> d146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d124 -> d125  [key=0, style=solid];
d83 -> d19  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments"];
d45 -> d49  [key=1, style=dashed, color=darkseagreen4, label=instance];
d45 -> d46  [key=0, style=solid];
d45 -> d81  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d25  [key=1, style=dashed, color=darkseagreen4, label=pt];
d95 -> d96  [key=0, style=solid];
d44 -> d51  [key=2, style=dotted];
d44 -> d75  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d44 -> d44  [key=1, style=dashed, color=darkseagreen4, label=prms];
d44 -> d77  [key=2, style=dotted];
d44 -> d78  [key=2, style=dotted];
d44 -> d79  [key=2, style=dotted];
d44 -> d80  [key=2, style=dotted];
d44 -> d152  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d44 -> d155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d92 -> d90  [key=0, style=bold, color=blue];
d91 -> d92  [key=0, style=solid];
d91 -> d93  [key=2, style=dotted];
d91 -> d94  [key=2, style=dotted];
d39 -> d40  [key=0, style=solid];
d108 -> d106  [key=0, style=bold, color=blue];
d107 -> d108  [key=0, style=solid];
d107 -> d93  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d46 -> d83  [key=2, style=dotted];
d46 -> d82  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d131 -> d132  [key=0, style=solid];
d135 -> d136  [key=0, style=solid];
d139 -> d140  [key=0, style=solid];
d142 -> d143  [key=0, style=solid];
d146 -> d147  [key=0, style=solid];
d126 -> d124  [key=0, style=bold, color=blue];
d125 -> d126  [key=0, style=solid];
d125 -> d93  [key=2, style=dotted];
d97 -> d95  [key=0, style=bold, color=blue];
d96 -> d97  [key=0, style=solid];
d96 -> d98  [key=2, style=dotted];
d96 -> d99  [key=2, style=dotted];
d96 -> d100  [key=2, style=dotted];
d152 -> d153  [key=0, style=solid];
d155 -> d156  [key=0, style=solid];
d129 -> d127  [key=0, style=bold, color=blue];
d128 -> d129  [key=0, style=solid];
d128 -> d130  [key=2, style=dotted];
d133 -> d131  [key=0, style=bold, color=blue];
d132 -> d133  [key=0, style=solid];
d132 -> d134  [key=2, style=dotted];
d137 -> d135  [key=0, style=bold, color=blue];
d136 -> d137  [key=0, style=solid];
d136 -> d138  [key=2, style=dotted];
d136 -> d130  [key=2, style=dotted];
d141 -> d139  [key=0, style=bold, color=blue];
d140 -> d141  [key=0, style=solid];
d140 -> d134  [key=2, style=dotted];
d144 -> d142  [key=0, style=bold, color=blue];
d143 -> d144  [key=0, style=solid];
d143 -> d138  [key=2, style=dotted];
d143 -> d145  [key=2, style=dotted];
d148 -> d146  [key=0, style=bold, color=blue];
d147 -> d148  [key=0, style=solid];
d147 -> d149  [key=2, style=dotted];
d147 -> d150  [key=2, style=dotted];
d147 -> d151  [key=2, style=dotted];
d154 -> d152  [key=0, style=bold, color=blue];
d153 -> d154  [key=0, style=solid];
d157 -> d155  [key=0, style=bold, color=blue];
d156 -> d157  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_6  [key=2, style=dotted];
m1_21 -> m1_7  [key=2, style=dotted];
m1_21 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_8  [key=2, style=dotted];
m1_22 -> m1_9  [key=2, style=dotted];
m1_22 -> m1_10  [key=2, style=dotted];
m1_22 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_15  [key=2, style=dotted];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_11  [key=2, style=dotted];
m1_23 -> m1_6  [key=2, style=dotted];
m1_23 -> m1_7  [key=2, style=dotted];
m1_23 -> m1_12  [key=2, style=dotted];
m1_23 -> m1_13  [key=2, style=dotted];
m1_23 -> m1_14  [key=2, style=dotted];
m1_23 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_25 -> m1_20  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid, color=green];
m1_29 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m1_30 -> m1_31  [key=0, style=solid, color=green];
m1_30 -> m1_6  [key=2, style=dotted, color=green];
m1_30 -> m1_7  [key=2, style=dotted, color=green];
m1_30 -> m1_35  [key=2, style=dotted, color=green];
m1_30 -> m1_33  [key=1, style=dashed, color=green, label=expectedTokens];
m1_30 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=specs];
m1_31 -> m1_31  [key=3, color=green, style=bold, label="Local variable System.Func<string, bool> nameLookup"];
m1_31 -> m1_32  [key=0, style=solid, color=green];
m1_31 -> m1_38  [key=1, style=dashed, color=green, label=string];
m1_33 -> m1_34  [key=0, style=solid, color=green];
m1_33 -> m1_15  [key=2, style=dotted, color=green];
m1_32 -> m1_33  [key=0, style=solid, color=green];
m1_32 -> m1_11  [key=2, style=dotted, color=green];
m1_32 -> m1_6  [key=2, style=dotted, color=green];
m1_32 -> m1_7  [key=2, style=dotted, color=green];
m1_32 -> m1_12  [key=2, style=dotted, color=green];
m1_32 -> m1_13  [key=2, style=dotted, color=green];
m1_32 -> m1_36  [key=2, style=dotted, color=green];
m1_34 -> m1_29  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_7  [key=2, style=dotted];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=expectedTokens];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=specs];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_15  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_11  [key=2, style=dotted];
m1_3 -> m1_6  [key=2, style=dotted];
m1_3 -> m1_7  [key=2, style=dotted];
m1_3 -> m1_12  [key=2, style=dotted];
m1_3 -> m1_13  [key=2, style=dotted];
m1_3 -> m1_14  [key=2, style=dotted];
m1_3 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid, color=green];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> d19  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_18 -> m1_16  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> d19  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_28 -> m1_26  [key=0, style=bold, color=blue];
m1_38 -> m1_39  [key=0, style=solid, color=green];
m1_38 -> m1_40  [key=2, style=dotted, color=green];
m1_39 -> m1_37  [key=0, style=bold, color=blue];
}
