digraph  {
n0 [label="Entry Ninject.IKernelConfiguration.GetModules()", span="18-18", cluster="Ninject.IKernelConfiguration.GetModules()"];
n1 [label="Exit Ninject.IKernelConfiguration.GetModules()", span="18-18", cluster="Ninject.IKernelConfiguration.GetModules()"];
n2 [label="Entry Ninject.IKernelConfiguration.HasModule(string)", span="25-25", cluster="Ninject.IKernelConfiguration.HasModule(string)"];
n3 [label="Exit Ninject.IKernelConfiguration.HasModule(string)", span="25-25", cluster="Ninject.IKernelConfiguration.HasModule(string)"];
n4 [label="Entry Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<Ninject.Modules.INinjectModule>)", span="31-31", cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<Ninject.Modules.INinjectModule>)"];
n5 [label="Exit Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<Ninject.Modules.INinjectModule>)", span="31-31", cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<Ninject.Modules.INinjectModule>)"];
n6 [label="Entry Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<string>)", span="38-38", cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<string>)"];
n7 [label="Exit Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<string>)", span="38-38", cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<string>)"];
n8 [label="Entry Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)", span="44-44", cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)"];
n9 [label="Exit Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)", span="44-44", cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)"];
n10 [label="Entry Ninject.IKernelConfiguration.Unload(string)", span="51-51", cluster="Ninject.IKernelConfiguration.Unload(string)"];
n11 [label="Exit Ninject.IKernelConfiguration.Unload(string)", span="51-51", cluster="Ninject.IKernelConfiguration.Unload(string)"];
n12 [label="Entry Ninject.IKernelConfiguration.GetBindings(System.Type)", span="58-58", cluster="Ninject.IKernelConfiguration.GetBindings(System.Type)"];
n13 [label="Exit Ninject.IKernelConfiguration.GetBindings(System.Type)", span="58-58", cluster="Ninject.IKernelConfiguration.GetBindings(System.Type)"];
d44 [label="var warnings =\r\n                from e in allErrors where nonFatalErrors.Contains(e.Tag)\r\n                select e", span="137-139", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=1];
d3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d43 [label="var allErrors =\r\n                tokenizerResult\r\n                    .SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                    .Memorize()", span="128-135", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0];
d45 [label="return allErrors\r\n                .Except(warnings)\r\n                .ToParserResult(instance);", span="141-143", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0];
d83 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
d28 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="71-71", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d31 [label="var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="79-83", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d32 [label="var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="85-88", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d33 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="90-92", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d42 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="125-126", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d80 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()"];
d81 [label="Entry Unk.Concat", span="", cluster="Unk.Concat"];
d82 [label="Entry Unk.Memorize", span="", cluster="Unk.Memorize"];
d38 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="101-112", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d41 [label="instance = (T)ctor.Invoke(values)", span="122-122", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d46 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d84 [label="Entry Unk.Except", span="", cluster="Unk.Except"];
d85 [label="Entry Unk.ToParserResult", span="", cluster="Unk.ToParserResult"];
d0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture,\r\n                nonFatalErrors);", span="21-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d19 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="45-45", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d23 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="56-60", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d98 [label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="57-60", cluster="lambda expression"];
d24 [label="arguments.Any()", span="62-62", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d25 [label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="64-64", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d30 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="75-77", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d106 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="77-77", cluster="lambda expression"];
d110 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="82-82", cluster="lambda expression"];
d114 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="88-88", cluster="lambda expression"];
d117 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="92-92", cluster="lambda expression"];
d37 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="100-100", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="52-54", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d26 [label="preprocessorErrors.Any()", span="65-65", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d29 [label="var tokens = tokenizerResult.SucceededWith()", span="73-73", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d58 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)"];
d20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="47-48", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d61 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()"];
d62 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues"];
d109 [label="Entry lambda expression", span="82-82", cluster="lambda expression"];
d34 [label="var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", span="94-95", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d63 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
d113 [label="Entry lambda expression", span="88-88", cluster="lambda expression"];
d64 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
d65 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
d66 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification"];
d116 [label="Entry lambda expression", span="92-92", cluster="lambda expression"];
d78 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)"];
d79 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
d70 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)"];
d123 [label="Entry lambda expression", span="103-103", cluster="lambda expression"];
d127 [label="Entry lambda expression", span="104-104", cluster="lambda expression"];
d131 [label="Entry lambda expression", span="106-106", cluster="lambda expression"];
d135 [label="Entry lambda expression", span="107-107", cluster="lambda expression"];
d138 [label="Entry lambda expression", span="109-111", cluster="lambda expression"];
d142 [label="Entry lambda expression", span="112-112", cluster="lambda expression"];
d39 [label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="116-116", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d40 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="117-121", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d77 [label="Entry Unk.Invoke", span="", cluster="Unk.Invoke"];
d27 [label="return new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), preprocessorErrors);", span="67-67", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="25-25", cluster="lambda expression"];
d12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="25-25", cluster="lambda expression"];
d6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="26-28", cluster="lambda expression"];
d16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="28-28", cluster="lambda expression"];
d4 [label="Entry lambda expression", span="23-30", cluster="lambda expression"];
d47 [label="Entry Unk.Return", span="", cluster="Unk.Return"];
d86 [label="Entry lambda expression", span="45-45", cluster="lambda expression"];
d36 [label="typeInfo.IsMutable()", span="98-98", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d156 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d157 [label=specProps, span=""];
d97 [label="Entry lambda expression", span="56-60", cluster="lambda expression"];
d99 [label="Exit lambda expression", span="56-60", cluster="lambda expression"];
d100 [label="Entry System.Type.IsMutable()", span="139-139", cluster="System.Type.IsMutable()"];
d69 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()"];
d71 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
d101 [label="Entry Unk.>", span="", cluster="Unk.>"];
d102 [label="Entry lambda expression", span="58-58", cluster="lambda expression"];
d51 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
d52 [label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11", cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)"];
d53 [label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11", cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)"];
d60 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)"];
d105 [label="Entry lambda expression", span="77-77", cluster="lambda expression"];
d158 [label="System.StringComparer", span=""];
d159 [label=optionSpecs, span=""];
d107 [label="Exit lambda expression", span="77-77", cluster="lambda expression"];
d108 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d160 [label="System.Globalization.CultureInfo", span=""];
d111 [label="Exit lambda expression", span="82-82", cluster="lambda expression"];
d112 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)"];
d115 [label="Exit lambda expression", span="88-88", cluster="lambda expression"];
d161 [label=token, span=""];
d118 [label="Exit lambda expression", span="92-92", cluster="lambda expression"];
d119 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)"];
d120 [label="Entry lambda expression", span="100-100", cluster="lambda expression"];
d21 [label="var specs = from pt in specProps select pt.Specification", span="50-50", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d49 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate"];
d50 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()"];
d59 [label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653", cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()"];
d48 [label="Entry Unk.GetSpecifications", span="", cluster="Unk.GetSpecifications"];
d91 [label="Entry lambda expression", span="47-48", cluster="lambda expression"];
d35 [label="T instance", span="97-97", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)"];
d67 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
d18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d125 [label="Exit lambda expression", span="103-103", cluster="lambda expression"];
d124 [label="sp.Value.IsJust()", span="103-103", cluster="lambda expression"];
d129 [label="Exit lambda expression", span="104-104", cluster="lambda expression"];
d128 [label="sp.Value.FromJust()", span="104-104", cluster="lambda expression"];
d133 [label="Exit lambda expression", span="106-106", cluster="lambda expression"];
d132 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="106-106", cluster="lambda expression"];
d137 [label="Exit lambda expression", span="107-107", cluster="lambda expression"];
d136 [label="sp.Specification.DefaultValue.FromJust()", span="107-107", cluster="lambda expression"];
d140 [label="Exit lambda expression", span="109-111", cluster="lambda expression"];
d139 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="109-111", cluster="lambda expression"];
d144 [label="Exit lambda expression", span="112-112", cluster="lambda expression"];
d143 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="112-112", cluster="lambda expression"];
d72 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor"];
d73 [label="Entry Unk.GetParameters", span="", cluster="Unk.GetParameters"];
d74 [label="Entry Unk.ToLower", span="", cluster="Unk.ToLower"];
d75 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()"];
d76 [label="Entry Unk.CreateDefaultForImmutable", span="", cluster="Unk.CreateDefaultForImmutable"];
d148 [label="Entry lambda expression", span="119-119", cluster="lambda expression"];
d151 [label="Entry lambda expression", span="120-120", cluster="lambda expression"];
d54 [label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163", cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d55 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
d56 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
d57 [label="Entry System.Type.ToTypeInfo()", span="174-174", cluster="System.Type.ToTypeInfo()"];
d154 [label="System.StringComparer", span=""];
d9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d11 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
d155 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
d14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
d7 [label="return explodedTokens;", span="29-29", cluster="lambda expression"];
d10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)"];
d15 [label="Entry lambda expression", span="28-28", cluster="lambda expression"];
d17 [label="Exit lambda expression", span="28-28", cluster="lambda expression"];
d8 [label="Exit lambda expression", span="23-30", cluster="lambda expression"];
d88 [label="Exit lambda expression", span="45-45", cluster="lambda expression"];
d87 [label="f().GetType()", span="45-45", cluster="lambda expression"];
d68 [label="Entry Unk.IsMutable", span="", cluster="Unk.IsMutable"];
d104 [label="Exit lambda expression", span="58-58", cluster="lambda expression"];
d103 [label="f()", span="58-58", cluster="lambda expression"];
d122 [label="Exit lambda expression", span="100-100", cluster="lambda expression"];
d121 [label="f()", span="100-100", cluster="lambda expression"];
d93 [label="Exit lambda expression", span="47-48", cluster="lambda expression"];
d92 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="47-48", cluster="lambda expression"];
d126 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()"];
d130 [label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342", cluster="CSharpx.Maybe<T>.FromJust<T>()"];
d134 [label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334", cluster="CSharpx.Maybe<T>.IsNothing<T>()"];
d141 [label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57", cluster="CSharpx.Maybe<T>.MatchNothing()"];
d145 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()"];
d146 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
d147 [label="Entry System.Type.CreateEmptyArray()", span="125-125", cluster="System.Type.CreateEmptyArray()"];
d150 [label="Exit lambda expression", span="119-119", cluster="lambda expression"];
d149 [label=v, span="119-119", cluster="lambda expression"];
d153 [label="Exit lambda expression", span="120-120", cluster="lambda expression"];
d152 [label=d, span="120-120", cluster="lambda expression"];
d89 [label="Entry Unk.f", span="", cluster="Unk.f"];
d90 [label="Entry Unk.GetType", span="", cluster="Unk.GetType"];
d94 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)"];
d95 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
d96 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)"];
m1_0 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", span="24-24", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_1 [label="parser == null", span="26-26", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", color=green, community=0];
m1_3 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2) });", span="28-28", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_2 [label="throw new ArgumentNullException(''parser'');", span="26-26", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", color=green, community=0];
m1_4 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", span="24-24", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_42 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", span="221-221", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_43 [label="parser == null", span="223-223", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_45 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10) });", span="225-226", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_44 [label="throw new ArgumentNullException(''parser'');", span="223-223", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_46 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", span="221-221", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_27 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", span="139-139", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_28 [label="parser == null", span="141-141", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_30 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7) });", span="143-143", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_29 [label="throw new ArgumentNullException(''parser'');", span="141-141", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_31 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", span="139-139", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_52 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", span="282-282", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_53 [label="parser == null", span="284-284", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_55 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12) });", span="286-287", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_54 [label="throw new ArgumentNullException(''parser'');", span="284-284", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_56 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", span="282-282", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_72 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", span="416-416", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_73 [label="parser == null", span="418-418", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_75 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16) });", span="420-421", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_74 [label="throw new ArgumentNullException(''parser'');", span="418-418", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_76 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", span="416-416", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_17 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", span="90-90", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_18 [label="parser == null", span="92-92", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_20 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5) });", span="94-94", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_19 [label="throw new ArgumentNullException(''parser'');", span="92-92", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_21 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", span="90-90", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_47 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", span="251-251", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_48 [label="parser == null", span="253-253", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_50 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11) });", span="255-256", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_49 [label="throw new ArgumentNullException(''parser'');", span="253-253", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_51 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", span="251-251", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_7 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", span="45-45", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_8 [label="parser == null", span="47-47", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_10 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3) });", span="49-49", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_9 [label="throw new ArgumentNullException(''parser'');", span="47-47", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_11 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", span="45-45", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_37 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", span="192-192", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_38 [label="parser == null", span="194-194", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_40 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9) });", span="196-197", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_39 [label="throw new ArgumentNullException(''parser'');", span="194-194", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_41 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", span="192-192", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_57 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", span="314-314", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_58 [label="parser == null", span="316-316", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_60 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13) });", span="318-319", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_59 [label="throw new ArgumentNullException(''parser'');", span="316-316", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_61 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", span="314-314", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_22 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", span="114-114", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_23 [label="parser == null", span="116-116", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_25 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6) });", span="118-118", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_24 [label="throw new ArgumentNullException(''parser'');", span="116-116", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_26 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", span="114-114", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_6 [label="Entry CommandLine.Parser.ParseArguments(string[], params System.Type[])", span="129-129", cluster="CommandLine.Parser.ParseArguments(string[], params System.Type[])", file="InstanceChooserTests.cs"];
m1_62 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", span="347-347", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_63 [label="parser == null", span="349-349", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_65 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14) });", span="351-352", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_64 [label="throw new ArgumentNullException(''parser'');", span="349-349", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_66 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", span="347-347", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_67 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", span="381-381", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_68 [label="parser == null", span="383-383", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_70 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15) });", span="385-386", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_69 [label="throw new ArgumentNullException(''parser'');", span="383-383", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_71 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", span="381-381", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="InstanceChooserTests.cs"];
m1_12 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", span="67-67", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_13 [label="parser == null", span="69-69", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_15 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4) });", span="71-71", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_14 [label="throw new ArgumentNullException(''parser'');", span="69-69", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_16 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", span="67-67", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_32 [label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", span="165-165", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_33 [label="parser == null", span="167-167", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_35 [label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8) });", span="169-169", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", color=green, community=0];
m1_34 [label="throw new ArgumentNullException(''parser'');", span="167-167", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m1_36 [label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", span="165-165", cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs"];
m2_9 [label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_10 [label="return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.Separator,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                attribute.HelpText,\r\n                attribute.MetaValue,\r\n                enumValues);", span="31-43", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_11 [label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_12 [label="Entry T.ToMaybe<T>()", span="82-82", cluster="T.ToMaybe<T>()", file="Parser.cs"];
m2_0 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_1 [label="this.shortName = shortName", span="20-20", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_2 [label="this.longName = longName", span="21-21", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_3 [label="this.separator = separator", span="22-22", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_4 [label="this.setName = setName", span="23-23", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_5 [label="this.helpText = helpText", span="24-24", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_6 [label="this.metaValue = metaValue", span="25-25", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_7 [label="this.enumValues = enumValues", span="26-26", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_8 [label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs"];
m2_13 [label="CommandLine.Core.OptionSpecification", span="", file="Parser.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n4  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n7 -> n6  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n9 -> n8  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n11 -> n10  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n13 -> n12  [key=0, style=bold, color=blue];
d44 -> d44  [key=1, style=dashed, color=green, label=e];
d44 -> d45  [key=0, style=solid, color=green];
d44 -> d83  [key=2, style=dotted, color=green];
d3 -> d44  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>"];
d3 -> d19  [key=0, style=solid];
d3 -> d23  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d3 -> d98  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d3 -> d24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d3 -> d25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d3 -> d28  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>"];
d3 -> d30  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d106  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d31  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d110  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d3 -> d32  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d3 -> d114  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d3 -> d33  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d117  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d3 -> d37  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d43 -> d44  [key=0, style=solid, color=green];
d43 -> d80  [key=2, style=dotted, color=green];
d43 -> d81  [key=2, style=dotted, color=green];
d43 -> d82  [key=2, style=dotted, color=green];
d43 -> d45  [key=1, style=dashed, color=green, label=allErrors];
d45 -> d46  [key=0, style=solid, color=green];
d45 -> d84  [key=2, style=dotted, color=green];
d45 -> d85  [key=2, style=dotted, color=green];
d28 -> d43  [key=1, style=dashed, color=green, label=tokenizerResult];
d28 -> d29  [key=0, style=solid];
d28 -> d58  [key=2, style=dotted];
d31 -> d43  [key=1, style=dashed, color=green, label=optionSpecPropsResult];
d31 -> d31  [key=1, style=dashed, color=darkseagreen4, label=pt];
d31 -> d32  [key=0, style=solid];
d31 -> d61  [key=2, style=dotted];
d31 -> d62  [key=2, style=dotted];
d31 -> d109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d31 -> d34  [key=1, style=dashed, color=darkseagreen4, label=optionSpecPropsResult];
d32 -> d43  [key=1, style=dashed, color=green, label=valueSpecPropsResult];
d32 -> d32  [key=1, style=dashed, color=darkseagreen4, label=pt];
d32 -> d33  [key=0, style=solid];
d32 -> d63  [key=2, style=dotted];
d32 -> d62  [key=2, style=dotted];
d32 -> d113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d32 -> d34  [key=1, style=dashed, color=darkseagreen4, label=valueSpecPropsResult];
d33 -> d43  [key=1, style=dashed, color=green, label=missingValueErrors];
d33 -> d33  [key=1, style=dashed, color=darkseagreen4, label=token];
d33 -> d34  [key=0, style=solid];
d33 -> d64  [key=2, style=dotted];
d33 -> d65  [key=2, style=dotted];
d33 -> d66  [key=2, style=dotted];
d33 -> d116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d33 -> d117  [key=1, style=dashed, color=darkseagreen4, label=token];
d42 -> d43  [key=0, style=solid, color=green];
d42 -> d78  [key=2, style=dotted];
d42 -> d79  [key=2, style=dotted];
d38 -> d45  [key=1, style=dashed, color=green, label=instance];
d38 -> d42  [key=0, style=solid];
d38 -> d38  [key=1, style=dashed, color=darkseagreen4, label=instance];
d38 -> d70  [key=2, style=dotted];
d38 -> d123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d41 -> d45  [key=1, style=dashed, color=green, label=instance];
d41 -> d42  [key=0, style=solid];
d41 -> d77  [key=2, style=dotted];
d46 -> d3  [key=0, style=bold, color=blue];
d0 -> d3  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.ParserResult<T> Build"];
d0 -> d1  [key=0, style=solid];
d0 -> d5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d0 -> d16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d1 -> d3  [key=2, style=dotted];
d1 -> d1  [key=3, color=darkorchid, style=bold, label="method methodReturn RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error> "];
d1 -> d2  [key=0, style=solid];
d1 -> d4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d19 -> d20  [key=0, style=solid];
d19 -> d47  [key=2, style=dotted];
d19 -> d86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d19 -> d36  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d19 -> d39  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
d23 -> d23  [key=3, color=darkorchid, style=bold, label="Local variable System.Func<T> makeDefault"];
d23 -> d24  [key=0, style=solid];
d23 -> d27  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
d98 -> d98  [key=1, style=dashed, color=darkseagreen4, label=p];
d98 -> d99  [key=0, style=solid];
d98 -> d100  [key=2, style=dotted];
d98 -> d69  [key=2, style=dotted];
d98 -> d47  [key=2, style=dotted];
d98 -> d71  [key=2, style=dotted];
d98 -> d101  [key=2, style=dotted];
d98 -> d102  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d24 -> d28  [key=0, style=solid];
d24 -> d25  [key=0, style=solid];
d24 -> d51  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d52  [key=2, style=dotted];
d25 -> d53  [key=2, style=dotted];
d25 -> d27  [key=1, style=dashed, color=darkseagreen4, label=preprocessorErrors];
d30 -> d31  [key=0, style=solid];
d30 -> d32  [key=1, style=dashed, color=darkseagreen4, label=partitions];
d30 -> d33  [key=1, style=dashed, color=darkseagreen4, label=partitions];
d30 -> d60  [key=2, style=dotted];
d30 -> d105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d106 -> d107  [key=0, style=solid];
d106 -> d108  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d110 -> d112  [key=2, style=dotted];
d114 -> d115  [key=0, style=solid];
d114 -> d112  [key=2, style=dotted];
d117 -> d118  [key=0, style=solid];
d117 -> d119  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d37 -> d69  [key=2, style=dotted];
d37 -> d47  [key=2, style=dotted];
d37 -> d120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d22 -> d28  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d22 -> d33  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d22 -> d23  [key=0, style=solid];
d22 -> d30  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d22 -> d106  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d22 -> d49  [key=2, style=dotted];
d22 -> d50  [key=2, style=dotted];
d26 -> d28  [key=0, style=solid];
d26 -> d27  [key=0, style=solid];
d26 -> d51  [key=2, style=dotted];
d29 -> d42  [key=1, style=dashed, color=darkseagreen4, label=tokens];
d29 -> d30  [key=0, style=solid];
d29 -> d59  [key=2, style=dotted];
d20 -> d31  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d20 -> d32  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d20 -> d23  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d20 -> d98  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d20 -> d21  [key=0, style=solid];
d20 -> d48  [key=2, style=dotted];
d20 -> d91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d20 -> d39  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d109 -> d110  [key=0, style=solid];
d34 -> d42  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d34 -> d38  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d34 -> d35  [key=0, style=solid];
d34 -> d59  [key=2, style=dotted];
d34 -> d67  [key=2, style=dotted];
d34 -> d40  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
d113 -> d114  [key=0, style=solid];
d116 -> d117  [key=0, style=solid];
d79 -> d18  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IEnumerable<string> arguments"];
d123 -> d124  [key=0, style=solid];
d127 -> d128  [key=0, style=solid];
d131 -> d132  [key=0, style=solid];
d135 -> d136  [key=0, style=solid];
d138 -> d139  [key=0, style=solid];
d142 -> d143  [key=0, style=solid];
d39 -> d41  [key=1, style=dashed, color=darkseagreen4, label=ctor];
d39 -> d39  [key=1, style=dashed, color=darkseagreen4, label=sp];
d39 -> d40  [key=0, style=solid];
d39 -> d71  [key=2, style=dotted];
d39 -> d72  [key=2, style=dotted];
d40 -> d41  [key=0, style=solid];
d40 -> d40  [key=1, style=dashed, color=darkseagreen4, label=prms];
d40 -> d73  [key=2, style=dotted];
d40 -> d74  [key=2, style=dotted];
d40 -> d75  [key=2, style=dotted];
d40 -> d76  [key=2, style=dotted];
d40 -> d47  [key=2, style=dotted];
d40 -> d71  [key=2, style=dotted];
d40 -> d148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d40 -> d151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d27 -> d46  [key=0, style=solid];
d27 -> d54  [key=2, style=dotted];
d27 -> d55  [key=2, style=dotted];
d27 -> d56  [key=2, style=dotted];
d27 -> d57  [key=2, style=dotted];
d2 -> d0  [key=0, style=bold, color=blue];
d5 -> d6  [key=0, style=solid];
d5 -> d9  [key=2, style=dotted];
d5 -> d11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d12 -> d13  [key=0, style=solid];
d12 -> d14  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d6 -> d10  [key=2, style=dotted];
d6 -> d15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d16 -> d17  [key=0, style=solid];
d16 -> d18  [key=2, style=dotted];
d4 -> d5  [key=0, style=solid];
d4 -> d12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d4 -> d16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d86 -> d87  [key=0, style=solid];
d36 -> d37  [key=0, style=solid];
d36 -> d39  [key=0, style=solid];
d36 -> d68  [key=2, style=dotted];
d156 -> d98  [key=1, style=dashed, color=darkseagreen4, label="CSharpx.Maybe<System.Func<T>>"];
d157 -> d98  [key=1, style=dashed, color=darkseagreen4, label=specProps];
d97 -> d98  [key=0, style=solid];
d99 -> d97  [key=0, style=bold, color=blue];
d102 -> d103  [key=0, style=solid];
d105 -> d106  [key=0, style=solid];
d158 -> d106  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d158 -> d117  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d159 -> d106  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
d107 -> d105  [key=0, style=bold, color=blue];
d160 -> d110  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d160 -> d114  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
d111 -> d109  [key=0, style=bold, color=blue];
d115 -> d113  [key=0, style=bold, color=blue];
d161 -> d117  [key=1, style=dashed, color=darkseagreen4, label=token];
d118 -> d116  [key=0, style=bold, color=blue];
d120 -> d121  [key=0, style=solid];
d21 -> d22  [key=0, style=solid];
d21 -> d21  [key=1, style=dashed, color=darkseagreen4, label=pt];
d91 -> d92  [key=0, style=solid];
d35 -> d36  [key=0, style=solid];
d125 -> d123  [key=0, style=bold, color=blue];
d124 -> d125  [key=0, style=solid];
d124 -> d126  [key=2, style=dotted];
d129 -> d127  [key=0, style=bold, color=blue];
d128 -> d129  [key=0, style=solid];
d128 -> d130  [key=2, style=dotted];
d133 -> d131  [key=0, style=bold, color=blue];
d132 -> d133  [key=0, style=solid];
d132 -> d134  [key=2, style=dotted];
d132 -> d126  [key=2, style=dotted];
d137 -> d135  [key=0, style=bold, color=blue];
d136 -> d137  [key=0, style=solid];
d136 -> d130  [key=2, style=dotted];
d140 -> d138  [key=0, style=bold, color=blue];
d139 -> d140  [key=0, style=solid];
d139 -> d134  [key=2, style=dotted];
d139 -> d141  [key=2, style=dotted];
d144 -> d142  [key=0, style=bold, color=blue];
d143 -> d144  [key=0, style=solid];
d143 -> d145  [key=2, style=dotted];
d143 -> d146  [key=2, style=dotted];
d143 -> d147  [key=2, style=dotted];
d148 -> d149  [key=0, style=solid];
d151 -> d152  [key=0, style=solid];
d154 -> d5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d154 -> d12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d154 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d154 -> d16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
d11 -> d12  [key=0, style=solid];
d155 -> d12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d155 -> d16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d13 -> d11  [key=0, style=bold, color=blue];
d7 -> d8  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d17 -> d15  [key=0, style=bold, color=blue];
d8 -> d4  [key=0, style=bold, color=blue];
d88 -> d86  [key=0, style=bold, color=blue];
d87 -> d88  [key=0, style=solid];
d87 -> d89  [key=2, style=dotted];
d87 -> d90  [key=2, style=dotted];
d104 -> d102  [key=0, style=bold, color=blue];
d103 -> d104  [key=0, style=solid];
d103 -> d89  [key=2, style=dotted];
d122 -> d120  [key=0, style=bold, color=blue];
d121 -> d122  [key=0, style=solid];
d121 -> d89  [key=2, style=dotted];
d93 -> d91  [key=0, style=bold, color=blue];
d92 -> d93  [key=0, style=solid];
d92 -> d94  [key=2, style=dotted];
d92 -> d95  [key=2, style=dotted];
d92 -> d96  [key=2, style=dotted];
d150 -> d148  [key=0, style=bold, color=blue];
d149 -> d150  [key=0, style=solid];
d153 -> d151  [key=0, style=bold, color=blue];
d152 -> d153  [key=0, style=solid];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_0 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_3  [key=0, style=solid, color=green];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_4  [key=0, style=solid, color=green];
m1_2 -> m1_5  [key=2, style=dotted, color=green];
m1_4 -> m1_0  [key=0, style=bold, color=blue];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_45  [key=0, style=solid];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_6  [key=2, style=dotted];
m1_44 -> m1_46  [key=0, style=solid];
m1_44 -> m1_5  [key=2, style=dotted];
m1_46 -> m1_42  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_6  [key=2, style=dotted];
m1_29 -> m1_31  [key=0, style=solid];
m1_29 -> m1_5  [key=2, style=dotted];
m1_31 -> m1_27  [key=0, style=bold, color=blue];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_55  [key=0, style=solid];
m1_55 -> m1_56  [key=0, style=solid];
m1_55 -> m1_6  [key=2, style=dotted];
m1_54 -> m1_56  [key=0, style=solid];
m1_54 -> m1_5  [key=2, style=dotted];
m1_56 -> m1_52  [key=0, style=bold, color=blue];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_75  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_73 -> m1_74  [key=0, style=solid];
m1_73 -> m1_75  [key=0, style=solid];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_6  [key=2, style=dotted];
m1_74 -> m1_76  [key=0, style=solid];
m1_74 -> m1_5  [key=2, style=dotted];
m1_76 -> m1_72  [key=0, style=bold, color=blue];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_6  [key=2, style=dotted];
m1_19 -> m1_21  [key=0, style=solid];
m1_19 -> m1_5  [key=2, style=dotted];
m1_21 -> m1_17  [key=0, style=bold, color=blue];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_50  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_50  [key=0, style=solid];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_6  [key=2, style=dotted];
m1_49 -> m1_51  [key=0, style=solid];
m1_49 -> m1_5  [key=2, style=dotted];
m1_51 -> m1_47  [key=0, style=bold, color=blue];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_10  [key=0, style=solid];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_6  [key=2, style=dotted];
m1_9 -> m1_11  [key=0, style=solid];
m1_9 -> m1_5  [key=2, style=dotted];
m1_11 -> m1_7  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_40  [key=0, style=solid];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_6  [key=2, style=dotted];
m1_39 -> m1_41  [key=0, style=solid];
m1_39 -> m1_5  [key=2, style=dotted];
m1_41 -> m1_37  [key=0, style=bold, color=blue];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_60  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_6  [key=2, style=dotted];
m1_59 -> m1_61  [key=0, style=solid];
m1_59 -> m1_5  [key=2, style=dotted];
m1_61 -> m1_57  [key=0, style=bold, color=blue];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=0, style=solid];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_6  [key=2, style=dotted];
m1_24 -> m1_26  [key=0, style=solid];
m1_24 -> m1_5  [key=2, style=dotted];
m1_26 -> m1_22  [key=0, style=bold, color=blue];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_65  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_65  [key=0, style=solid];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_6  [key=2, style=dotted];
m1_64 -> m1_66  [key=0, style=solid];
m1_64 -> m1_5  [key=2, style=dotted];
m1_66 -> m1_62  [key=0, style=bold, color=blue];
m1_67 -> m1_68  [key=0, style=solid];
m1_67 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_68 -> m1_69  [key=0, style=solid];
m1_68 -> m1_70  [key=0, style=solid];
m1_70 -> m1_71  [key=0, style=solid];
m1_70 -> m1_6  [key=2, style=dotted];
m1_69 -> m1_71  [key=0, style=solid];
m1_69 -> m1_5  [key=2, style=dotted];
m1_71 -> m1_67  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Parser"];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_15  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_6  [key=2, style=dotted];
m1_14 -> m1_16  [key=0, style=solid];
m1_14 -> m1_5  [key=2, style=dotted];
m1_16 -> m1_12  [key=0, style=bold, color=blue];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_35  [key=1, style=dashed, color=green, label="CommandLine.Parser"];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_35  [key=0, style=solid, color=green];
m1_35 -> m1_36  [key=0, style=solid, color=green];
m1_35 -> m1_6  [key=2, style=dotted, color=green];
m1_34 -> m1_36  [key=0, style=solid];
m1_34 -> m1_5  [key=2, style=dotted];
m1_36 -> m1_32  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_0  [key=2, style=dotted];
m2_10 -> m2_12  [key=2, style=dotted];
m2_11 -> m2_9  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=char];
m2_0 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_0 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_0 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_8  [key=0, style=solid];
m2_8 -> m2_0  [key=0, style=bold, color=blue];
m2_13 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m2_13 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m2_13 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m2_13 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m2_13 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m2_13 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
m2_13 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.OptionSpecification"];
}
