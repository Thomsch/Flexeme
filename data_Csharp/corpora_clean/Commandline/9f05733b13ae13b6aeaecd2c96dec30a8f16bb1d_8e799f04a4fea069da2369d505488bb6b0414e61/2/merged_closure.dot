digraph  {
n0 [cluster="Ninject.IKernelConfiguration.GetModules()", label="Entry Ninject.IKernelConfiguration.GetModules()", span="18-18"];
n1 [cluster="Ninject.IKernelConfiguration.GetModules()", label="Exit Ninject.IKernelConfiguration.GetModules()", span="18-18"];
n2 [cluster="Ninject.IKernelConfiguration.HasModule(string)", label="Entry Ninject.IKernelConfiguration.HasModule(string)", span="25-25"];
n3 [cluster="Ninject.IKernelConfiguration.HasModule(string)", label="Exit Ninject.IKernelConfiguration.HasModule(string)", span="25-25"];
n4 [cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<Ninject.Modules.INinjectModule>)", label="Entry Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<Ninject.Modules.INinjectModule>)", span="31-31"];
n5 [cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<Ninject.Modules.INinjectModule>)", label="Exit Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<Ninject.Modules.INinjectModule>)", span="31-31"];
n6 [cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<string>)", label="Entry Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<string>)", span="38-38"];
n7 [cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<string>)", label="Exit Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<string>)", span="38-38"];
n8 [cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)", label="Entry Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)", span="44-44"];
n9 [cluster="Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)", label="Exit Ninject.IKernelConfiguration.Load(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)", span="44-44"];
n10 [cluster="Ninject.IKernelConfiguration.Unload(string)", label="Entry Ninject.IKernelConfiguration.Unload(string)", span="51-51"];
n11 [cluster="Ninject.IKernelConfiguration.Unload(string)", label="Exit Ninject.IKernelConfiguration.Unload(string)", span="51-51"];
n12 [cluster="Ninject.IKernelConfiguration.GetBindings(System.Type)", label="Entry Ninject.IKernelConfiguration.GetBindings(System.Type)", span="58-58"];
n13 [cluster="Ninject.IKernelConfiguration.GetBindings(System.Type)", label="Exit Ninject.IKernelConfiguration.GetBindings(System.Type)", span="58-58"];
d44 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=1, label="var warnings =\r\n                from e in allErrors where nonFatalErrors.Contains(e.Tag)\r\n                select e", prediction=0, span="137-139"];
d3 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
d43 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, label="var allErrors =\r\n                tokenizerResult\r\n                    .SuccessfulMessages()\r\n                        .Concat(missingValueErrors)\r\n                        .Concat(optionSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(valueSpecPropsResult.SuccessfulMessages())\r\n                        .Concat(validationErrors)\r\n                    .Memorize()", prediction=1, span="128-135"];
d45 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", color=green, community=0, label="return allErrors\r\n                .Except(warnings)\r\n                .ToParserResult(instance);", prediction=1, span="141-143"];
d83 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
d28 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="71-71"];
d31 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecPropsResult = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="79-83"];
d32 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var valueSpecPropsResult = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="85-88"];
d33 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="90-92"];
d42 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="125-126"];
d80 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SuccessfulMessages<TSuccess, TMessage>()", span="12-12"];
d81 [cluster="Unk.Concat", label="Entry Unk.Concat", span=""];
d82 [cluster="Unk.Memorize", label="Entry Unk.Memorize", span=""];
d38 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="101-112"];
d41 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = (T)ctor.Invoke(values)", span="122-122"];
d46 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="37-37"];
d84 [cluster="Unk.Except", label="Entry Unk.Except", span=""];
d85 [cluster="Unk.ToParserResult", label="Entry Unk.ToParserResult", span=""];
d0 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
d1 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture,\r\n                nonFatalErrors);", span="21-34"];
d19 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="45-45"];
d23 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="56-60"];
d98 [cluster="lambda expression", label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="57-60"];
d24 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="arguments.Any()", span="62-62"];
d25 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var preprocessorErrors = arguments.Preprocess(PreprocessorGuards.Lookup(nameComparer))", span="64-64"];
d30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="75-77"];
d106 [cluster="lambda expression", label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="77-77"];
d110 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="82-82"];
d114 [cluster="lambda expression", label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="88-88"];
d117 [cluster="lambda expression", label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="92-92"];
d37 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="100-100"];
d22 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="52-54"];
d26 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="preprocessorErrors.Any()", span="65-65"];
d29 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var tokens = tokenizerResult.SucceededWith()", span="73-73"];
d58 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
d20 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="47-48"];
d61 [cluster="CommandLine.Core.Specification.IsOption()", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
d62 [cluster="Unk.MapValues", label="Entry Unk.MapValues", span=""];
d109 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
d34 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specPropsWithValue = optionSpecPropsResult.SucceededWith()\r\n                .Concat(valueSpecPropsResult.SucceededWith())", span="94-95"];
d63 [cluster="CommandLine.Core.Specification.IsValue()", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
d113 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
d64 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
d65 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d66 [cluster="Unk.FromOptionSpecification", label="Entry Unk.FromOptionSpecification", span=""];
d116 [cluster="lambda expression", label="Entry lambda expression", span="92-92"];
d78 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
d79 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40"];
d70 [cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
d123 [cluster="lambda expression", label="Entry lambda expression", span="103-103"];
d127 [cluster="lambda expression", label="Entry lambda expression", span="104-104"];
d131 [cluster="lambda expression", label="Entry lambda expression", span="106-106"];
d135 [cluster="lambda expression", label="Entry lambda expression", span="107-107"];
d138 [cluster="lambda expression", label="Entry lambda expression", span="109-111"];
d142 [cluster="lambda expression", label="Entry lambda expression", span="112-112"];
d39 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var ctor = typeInfo.GetConstructor((from sp in specProps select sp.Property.PropertyType).ToArray())", span="116-116"];
d40 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="117-121"];
d77 [cluster="Unk.Invoke", label="Entry Unk.Invoke", span=""];
d27 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="return new NotParsed<T>(makeDefault().GetType().ToTypeInfo(), preprocessorErrors);", span="67-67"];
d2 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
d5 [cluster="lambda expression", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="25-25"];
d12 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="25-25"];
d6 [cluster="lambda expression", label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="26-28"];
d16 [cluster="lambda expression", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="28-28"];
d4 [cluster="lambda expression", label="Entry lambda expression", span="23-30"];
d47 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
d86 [cluster="lambda expression", label="Entry lambda expression", span="45-45"];
d36 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="typeInfo.IsMutable()", span="98-98"];
d156 [label="CSharpx.Maybe<System.Func<T>>", span=""];
d157 [label=specProps, span=""];
d97 [cluster="lambda expression", label="Entry lambda expression", span="56-60"];
d99 [cluster="lambda expression", label="Exit lambda expression", span="56-60"];
d100 [cluster="System.Type.IsMutable()", label="Entry System.Type.IsMutable()", span="139-139"];
d69 [cluster="System.Activator.CreateInstance<T>()", label="Entry System.Activator.CreateInstance<T>()", span="0-0"];
d71 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d101 [cluster="Unk.>", label="Entry Unk.>", span=""];
d102 [cluster="lambda expression", label="Entry lambda expression", span="58-58"];
d51 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d52 [cluster="CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", label="Entry CommandLine.Core.PreprocessorGuards.Lookup(System.StringComparer)", span="11-11"];
d53 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
d60 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
d105 [cluster="lambda expression", label="Entry lambda expression", span="77-77"];
d158 [label="System.StringComparer", span=""];
d159 [label=optionSpecs, span=""];
d107 [cluster="lambda expression", label="Exit lambda expression", span="77-77"];
d108 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23"];
d160 [label="System.Globalization.CultureInfo", span=""];
d111 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
d112 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="13-13"];
d115 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
d161 [label=token, span=""];
d118 [cluster="lambda expression", label="Exit lambda expression", span="92-92"];
d119 [cluster="string.MatchName(string, string, System.StringComparer)", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
d120 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
d21 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="var specs = from pt in specProps select pt.Specification", span="50-50"];
d49 [cluster="Unk.ThrowingValidate", label="Entry Unk.ThrowingValidate", span=""];
d50 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
d59 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
d48 [cluster="Unk.GetSpecifications", label="Entry Unk.GetSpecifications", span=""];
d91 [cluster="lambda expression", label="Entry lambda expression", span="47-48"];
d35 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="T instance", span="97-97"];
d67 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
d18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
d125 [cluster="lambda expression", label="Exit lambda expression", span="103-103"];
d124 [cluster="lambda expression", label="sp.Value.IsJust()", span="103-103"];
d129 [cluster="lambda expression", label="Exit lambda expression", span="104-104"];
d128 [cluster="lambda expression", label="sp.Value.FromJust()", span="104-104"];
d133 [cluster="lambda expression", label="Exit lambda expression", span="106-106"];
d132 [cluster="lambda expression", label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="106-106"];
d137 [cluster="lambda expression", label="Exit lambda expression", span="107-107"];
d136 [cluster="lambda expression", label="sp.Specification.DefaultValue.FromJust()", span="107-107"];
d140 [cluster="lambda expression", label="Exit lambda expression", span="109-111"];
d139 [cluster="lambda expression", label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="109-111"];
d144 [cluster="lambda expression", label="Exit lambda expression", span="112-112"];
d143 [cluster="lambda expression", label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="112-112"];
d72 [cluster="Unk.GetConstructor", label="Entry Unk.GetConstructor", span=""];
d73 [cluster="Unk.GetParameters", label="Entry Unk.GetParameters", span=""];
d74 [cluster="Unk.ToLower", label="Entry Unk.ToLower", span=""];
d75 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
d76 [cluster="Unk.CreateDefaultForImmutable", label="Entry Unk.CreateDefaultForImmutable", span=""];
d148 [cluster="lambda expression", label="Entry lambda expression", span="119-119"];
d151 [cluster="lambda expression", label="Entry lambda expression", span="120-120"];
d54 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
d55 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
d56 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d57 [cluster="System.Type.ToTypeInfo()", label="Entry System.Type.ToTypeInfo()", span="174-174"];
d154 [label="System.StringComparer", span=""];
d9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
d11 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
d155 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d13 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
d14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d7 [cluster="lambda expression", label="return explodedTokens;", span="29-29"];
d10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>, System.Func<string, CSharpx.Maybe<char>>)", span="46-46"];
d15 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
d17 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
d8 [cluster="lambda expression", label="Exit lambda expression", span="23-30"];
d88 [cluster="lambda expression", label="Exit lambda expression", span="45-45"];
d87 [cluster="lambda expression", label="f().GetType()", span="45-45"];
d68 [cluster="Unk.IsMutable", label="Entry Unk.IsMutable", span=""];
d104 [cluster="lambda expression", label="Exit lambda expression", span="58-58"];
d103 [cluster="lambda expression", label="f()", span="58-58"];
d122 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
d121 [cluster="lambda expression", label="f()", span="100-100"];
d93 [cluster="lambda expression", label="Exit lambda expression", span="47-48"];
d92 [cluster="lambda expression", label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="47-48"];
d126 [cluster="CSharpx.Maybe<T>.IsJust<T>()", label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326"];
d130 [cluster="CSharpx.Maybe<T>.FromJust<T>()", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
d134 [cluster="CSharpx.Maybe<T>.IsNothing<T>()", label="Entry CSharpx.Maybe<T>.IsNothing<T>()", span="334-334"];
d141 [cluster="CSharpx.Maybe<T>.MatchNothing()", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
d145 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
d146 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
d147 [cluster="System.Type.CreateEmptyArray()", label="Entry System.Type.CreateEmptyArray()", span="125-125"];
d150 [cluster="lambda expression", label="Exit lambda expression", span="119-119"];
d149 [cluster="lambda expression", label=v, span="119-119"];
d153 [cluster="lambda expression", label="Exit lambda expression", span="120-120"];
d152 [cluster="lambda expression", label=d, span="120-120"];
d89 [cluster="Unk.f", label="Entry Unk.f", span=""];
d90 [cluster="Unk.GetType", label="Entry Unk.GetType", span=""];
d94 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
d95 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
d96 [cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CSharpx.Maybe<object>)", span="21-21"];
m1_0 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", span="24-24"];
m1_1 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", color=green, community=0, file="InstanceChooserTests.cs", label="parser == null", prediction=3, span="26-26"];
m1_3 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2) });", span="28-28"];
m1_2 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", color=green, community=0, file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", prediction=4, span="26-26"];
m1_4 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2>(CommandLine.Parser, string[])", span="24-24"];
m1_42 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", span="221-221"];
m1_43 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="223-223"];
m1_45 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10) });", span="225-226"];
m1_44 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="223-223"];
m1_46 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", span="221-221"];
m1_27 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", span="139-139"];
m1_28 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="141-141"];
m1_30 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7) });", span="143-143"];
m1_29 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="141-141"];
m1_31 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", span="139-139"];
m1_52 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", span="282-282"];
m1_53 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="284-284"];
m1_55 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12) });", span="286-287"];
m1_54 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="284-284"];
m1_56 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", span="282-282"];
m1_72 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", span="416-416"];
m1_73 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="418-418"];
m1_75 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16) });", span="420-421"];
m1_74 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="418-418"];
m1_76 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", span="416-416"];
m1_17 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", span="90-90"];
m1_18 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="92-92"];
m1_20 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5) });", span="94-94"];
m1_19 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="92-92"];
m1_21 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", span="90-90"];
m1_47 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", span="251-251"];
m1_48 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="253-253"];
m1_50 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11) });", span="255-256"];
m1_49 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="253-253"];
m1_51 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", span="251-251"];
m1_7 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", span="45-45"];
m1_8 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="47-47"];
m1_10 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3) });", span="49-49"];
m1_9 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="47-47"];
m1_11 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", span="45-45"];
m1_37 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", span="192-192"];
m1_38 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="194-194"];
m1_40 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9) });", span="196-197"];
m1_39 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="194-194"];
m1_41 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", span="192-192"];
m1_57 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", span="314-314"];
m1_58 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="316-316"];
m1_60 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13) });", span="318-319"];
m1_59 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="316-316"];
m1_61 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", span="314-314"];
m1_22 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", span="114-114"];
m1_23 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="116-116"];
m1_25 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6) });", span="118-118"];
m1_24 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="116-116"];
m1_26 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", span="114-114"];
m1_6 [cluster="CommandLine.Parser.ParseArguments(string[], params System.Type[])", file="InstanceChooserTests.cs", label="Entry CommandLine.Parser.ParseArguments(string[], params System.Type[])", span="129-129"];
m1_62 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", span="347-347"];
m1_63 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="349-349"];
m1_65 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14) });", span="351-352"];
m1_64 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="349-349"];
m1_66 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", span="347-347"];
m1_67 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", span="381-381"];
m1_68 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="383-383"];
m1_70 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15) });", span="385-386"];
m1_69 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="383-383"];
m1_71 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", span="381-381"];
m1_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="InstanceChooserTests.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_12 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", span="67-67"];
m1_13 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="69-69"];
m1_15 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4) });", span="71-71"];
m1_14 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="69-69"];
m1_16 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", span="67-67"];
m1_32 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", span="165-165"];
m1_33 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="167-167"];
m1_35 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", color=green, community=0, file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8) });", prediction=5, span="169-169"];
m1_34 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="167-167"];
m1_36 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", span="165-165"];
m2_9 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m2_10 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.Separator,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                attribute.HelpText,\r\n                attribute.MetaValue,\r\n                enumValues);", span="31-43"];
m2_11 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
m2_12 [cluster="T.ToMaybe<T>()", file="Parser.cs", label="Entry T.ToMaybe<T>()", span="82-82"];
m2_0 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m2_1 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="this.shortName = shortName", span="20-20"];
m2_2 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="this.longName = longName", span="21-21"];
m2_3 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="this.separator = separator", span="22-22"];
m2_4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="this.setName = setName", span="23-23"];
m2_5 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="this.helpText = helpText", span="24-24"];
m2_6 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="this.metaValue = metaValue", span="25-25"];
m2_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="this.enumValues = enumValues", span="26-26"];
m2_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Parser.cs", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m2_13 [file="Parser.cs", label="CommandLine.Core.OptionSpecification", span=""];
d44 -> d44  [color=green, key=1, label=e, style=dashed];
d3 -> d44  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.ErrorType>", style=dashed];
d3 -> d98  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d3 -> d24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
d3 -> d106  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d3 -> d110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d114  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d3 -> d117  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d43 -> d45  [color=green, key=1, label=allErrors, style=dashed];
d28 -> d43  [color=green, key=1, label=tokenizerResult, style=dashed];
d31 -> d43  [color=green, key=1, label=optionSpecPropsResult, style=dashed];
d31 -> d109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d32 -> d43  [color=green, key=1, label=valueSpecPropsResult, style=dashed];
d32 -> d113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d33 -> d43  [color=green, key=1, label=missingValueErrors, style=dashed];
d33 -> d116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d33 -> d117  [color=darkseagreen4, key=1, label=token, style=dashed];
d38 -> d45  [color=green, key=1, label=instance, style=dashed];
d38 -> d123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d38 -> d142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d41 -> d45  [color=green, key=1, label=instance, style=dashed];
d0 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d0 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d1 -> d4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d19 -> d86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d19 -> d36  [color=darkseagreen4, key=1, label=typeInfo, style=dashed];
d23 -> d27  [color=darkseagreen4, key=1, label=makeDefault, style=dashed];
d98 -> d98  [color=darkseagreen4, key=1, label=p, style=dashed];
d98 -> d102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d25 -> d27  [color=darkseagreen4, key=1, label=preprocessorErrors, style=dashed];
d30 -> d105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d37 -> d120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d22 -> d106  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d20 -> d98  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d20 -> d91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d40 -> d148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d40 -> d151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d5 -> d11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d6 -> d15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d4 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d4 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d156 -> d98  [color=darkseagreen4, key=1, label="CSharpx.Maybe<System.Func<T>>", style=dashed];
d157 -> d98  [color=darkseagreen4, key=1, label=specProps, style=dashed];
d158 -> d106  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d158 -> d117  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d159 -> d106  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
d160 -> d110  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d160 -> d114  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
d161 -> d117  [color=darkseagreen4, key=1, label=token, style=dashed];
d154 -> d12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d154 -> d16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
d155 -> d12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d155 -> d16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_42 -> m1_45  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_27 -> m1_30  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_52 -> m1_55  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_72 -> m1_75  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_17 -> m1_20  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_47 -> m1_50  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_7 -> m1_10  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_37 -> m1_40  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_57 -> m1_60  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_22 -> m1_25  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_62 -> m1_65  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_67 -> m1_70  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_12 -> m1_15  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m1_32 -> m1_35  [color=green, key=1, label="CommandLine.Parser", style=dashed];
}
