digraph  {
m0_51 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="ErrorExtensions.cs"];
m0_34 [label="Entry Unk.Just", span="", cluster="Unk.Just", file="ErrorExtensions.cs"];
m0_16 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="62-62", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="ErrorExtensions.cs"];
m0_30 [label="Entry Unk.>", span="", cluster="Unk.>", file="ErrorExtensions.cs"];
m0_29 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="ErrorExtensions.cs"];
m0_25 [label="Entry CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="69-69", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ErrorExtensions.cs"];
m0_49 [label="return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", span="74-80", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ErrorExtensions.cs"];
m0_50 [label="Exit CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="69-69", cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="ErrorExtensions.cs"];
m0_32 [label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="342-342", cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="ErrorExtensions.cs"];
m0_53 [label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="368-368", cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="ErrorExtensions.cs"];
m0_3 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_12 [label="var verbs = Verb.SelectFromTypes(types)", span="33-33", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_13 [label="return arguments.Empty()\r\n                ? ParserResult.Create<object>(\r\n                    ParserResultType.Verbs, new NullInstance(), new[] { new NoVerbSelectedError() }, Maybe.Just(types))\r\n                : nameComparer.Equals(''help'', arguments.First())\r\n                   ? ParserResult.Create<object>(\r\n                        ParserResultType.Verbs,\r\n                        new NullInstance(), new[] { CreateHelpVerbRequestedError(\r\n                            verbs,\r\n                            arguments.Skip(1).SingleOrDefault() ?? string.Empty,\r\n                            nameComparer) }, Maybe.Just(types))\r\n                   : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="35-45", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_14 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26", cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_11 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ErrorExtensions.cs"];
m0_22 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="ErrorExtensions.cs"];
m0_41 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="ErrorExtensions.cs"];
m0_52 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe", file="ErrorExtensions.cs"];
m0_58 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_5 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="19-19", cluster="lambda expression", color=red, community=0, file="ErrorExtensions.cs"];
m0_9 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="19-19", cluster="lambda expression", color=red, community=0, file="ErrorExtensions.cs"];
m0_4 [label="Entry lambda expression", span="19-19", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_6 [label="Exit lambda expression", span="19-19", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_8 [label="Entry lambda expression", span="19-19", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_10 [label="Exit lambda expression", span="19-19", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_36 [label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="55-55", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_39 [label="Activator.CreateInstance(verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2)", span="57-57", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_44 [label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="57-57", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_35 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_38 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_46 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_37 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_40 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_43 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_45 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_47 [label="v.Item2", span="66-66", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_48 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_56 [label="nameComparer.Equals(v.Item1.Name, verb)", span="75-75", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_55 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_57 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_59 [label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="78-78", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_60 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="ErrorExtensions.cs"];
m0_21 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="ErrorExtensions.cs"];
m0_23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="ErrorExtensions.cs"];
m0_19 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="ErrorExtensions.cs"];
m0_33 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ErrorExtensions.cs"];
m0_18 [label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="406-406", cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="ErrorExtensions.cs"];
m0_0 [label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_1 [label="return Choose(\r\n                (args, optionSpecs) => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer)),\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="18-23", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=red, community=0, file="ErrorExtensions.cs"];
m0_2 [label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_7 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="ErrorExtensions.cs"];
m0_54 [label="Entry Unk.Return", span="", cluster="Unk.Return", file="ErrorExtensions.cs"];
m0_26 [label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="48-48", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_27 [label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(() => Activator.CreateInstance(verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2)),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : ParserResult.Create<object>(\r\n                    ParserResultType.Verbs,\r\n                    new NullInstance(),\r\n                    new[] { new BadVerbSelectedError(arguments.First()) },\r\n                    Maybe.Just(verbs.Select(v => v.Item2)));", span="55-66", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_28 [label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="48-48", cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_17 [label="Entry CommandLine.NullInstance.NullInstance()", span="9-9", cluster="CommandLine.NullInstance.NullInstance()", file="ErrorExtensions.cs"];
m0_20 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", span="105-105", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>, CommandLine.Infrastructure.Maybe<System.Collections.Generic.IEnumerable<System.Type>>)", file="ErrorExtensions.cs"];
m0_42 [label="Entry Unk.CreateInstance", span="", cluster="Unk.CreateInstance", file="ErrorExtensions.cs"];
m0_31 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ErrorExtensions.cs"];
m0_15 [label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40", cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="ErrorExtensions.cs"];
m0_24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="ErrorExtensions.cs"];
m0_61 [label="Entry HelpVerbRequestedError.cstr", span="", cluster="HelpVerbRequestedError.cstr", file="ErrorExtensions.cs"];
m0_62 [label="System.StringComparer", span="", file="ErrorExtensions.cs"];
m0_63 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="ErrorExtensions.cs"];
m0_64 [label="System.Collections.Generic.IEnumerable<string>", span="", file="ErrorExtensions.cs"];
m0_65 [label="System.StringComparer", span="", file="ErrorExtensions.cs"];
m0_66 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span="", file="ErrorExtensions.cs"];
m0_67 [label=string, span="", file="ErrorExtensions.cs"];
m0_68 [label="System.StringComparer", span="", file="ErrorExtensions.cs"];
m1_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="HelpTextTests.cs"];
m1_12 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="HelpTextTests.cs"];
m1_13 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="HelpTextTests.cs"];
m1_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="HelpTextTests.cs"];
m1_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs"];
m1_11 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="HelpTextTests.cs"];
m1_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="HelpTextTests.cs"];
m1_27 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="HelpTextTests.cs"];
m1_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m1_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m1_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m1_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m1_4 [label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="39-42", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m1_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m1_28 [label="Entry lambda expression", span="40-42", cluster="lambda expression", file="HelpTextTests.cs"];
m1_16 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="HelpTextTests.cs"];
m1_20 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="HelpTextTests.cs"];
m1_24 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="HelpTextTests.cs"];
m1_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27", cluster="lambda expression", file="HelpTextTests.cs"];
m1_18 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="HelpTextTests.cs"];
m1_21 [label="pt.Specification.IsOption()", span="33-33", cluster="lambda expression", file="HelpTextTests.cs"];
m1_22 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="HelpTextTests.cs"];
m1_25 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35", cluster="lambda expression", file="HelpTextTests.cs"];
m1_26 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="HelpTextTests.cs"];
m1_29 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="40-42", cluster="lambda expression", file="HelpTextTests.cs"];
m1_30 [label="Exit lambda expression", span="40-42", cluster="lambda expression", file="HelpTextTests.cs"];
m1_31 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="HelpTextTests.cs"];
m1_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="HelpTextTests.cs"];
m1_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="11-11", cluster="CommandLine.Core.Specification.IsOption()", file="HelpTextTests.cs"];
m1_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="HelpTextTests.cs"];
m1_10 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="HelpTextTests.cs"];
m1_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="HelpTextTests.cs"];
m2_27 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="ParserTests.cs"];
m2_28 [label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="32-32", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="ParserTests.cs"];
m2_0 [label="Entry CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="35-35", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m2_1 [label="this.tag = tag", span="38-38", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m2_2 [label="this.required = required", span="39-39", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m2_3 [label="this.min = min", span="40-40", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m2_4 [label="this.max = max", span="41-41", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m2_5 [label="this.defaultValue = defaultValue", span="42-42", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m2_6 [label="this.conversionType = conversionType", span="43-43", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m2_7 [label="this.targetType = targetType", span="44-44", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m2_8 [label="Exit CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="35-35", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="ParserTests.cs"];
m2_24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ParserTests.cs"];
m2_23 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="ParserTests.cs"];
m2_29 [label="Entry string.ToLowerInvariant()", span="0-0", cluster="string.ToLowerInvariant()", file="ParserTests.cs"];
m2_26 [label="Entry System.Enum.GetNames(System.Type)", span="0-0", cluster="System.Enum.GetNames(System.Type)", file="ParserTests.cs"];
m2_31 [label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="ParserTests.cs"];
m2_9 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_10 [label="var attrs = property.GetCustomAttributes(true)", span="84-84", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_13 [label="var spec = OptionSpecification.FromAttribute(oa.Single(), property.PropertyType,\r\n                    property.PropertyType.IsEnum\r\n                        ? Enum.GetNames(property.PropertyType)\r\n                        : Enumerable.Empty<string>())", span="88-91", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_15 [label="return spec.WithLongName(property.Name.ToLowerInvariant());", span="94-94", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_19 [label="return ValueSpecification.FromAttribute(va.Single(), property.PropertyType);", span="102-102", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_11 [label="var oa = attrs.OfType<OptionAttribute>()", span="85-85", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_17 [label="var va = attrs.OfType<ValueAttribute>()", span="99-99", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_12 [label="oa.Count() == 1", span="86-86", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_14 [label="spec.ShortName.Length == 0 && spec.LongName.Length == 0", span="92-92", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_16 [label="return spec;", span="96-96", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_18 [label="va.Count() == 1", span="100-100", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_20 [label="throw new InvalidOperationException();", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_21 [label="Exit CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="ParserTests.cs"];
m2_22 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="ParserTests.cs"];
m2_25 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="ParserTests.cs"];
m2_30 [label="Entry CommandLine.Core.OptionSpecification.WithLongName(string)", span="20-20", cluster="CommandLine.Core.OptionSpecification.WithLongName(string)", file="ParserTests.cs"];
m2_32 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="ParserTests.cs"];
m2_33 [label="CommandLine.Core.Specification", span="", file="ParserTests.cs"];
m4_46 [label="Entry Unk.ThrowingValidate", span="", cluster="Unk.ThrowingValidate", file="StringExtensions.cs"];
m4_65 [label="Entry T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="58-58", cluster="T.SetProperties<T>(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="StringExtensions.cs"];
m4_10 [label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44", cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="StringExtensions.cs"];
m4_108 [label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8", cluster="string.MatchName(string, string, System.StringComparer)", file="StringExtensions.cs"];
m4_55 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="StringExtensions.cs"];
m4_44 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="StringExtensions.cs"];
m4_71 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="StringExtensions.cs"];
m4_101 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_115 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149", cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="StringExtensions.cs"];
m4_130 [label="Entry CommandLine.Infrastructure.Maybe<T>.MatchNothing()", span="26-26", cluster="CommandLine.Infrastructure.Maybe<T>.MatchNothing()", file="StringExtensions.cs"];
m4_90 [label="Entry Unk.>", span="", cluster="Unk.>", file="StringExtensions.cs"];
m4_18 [label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16", cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="StringExtensions.cs"];
m4_58 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()", file="StringExtensions.cs"];
m4_70 [label="Entry System.Type.CreateDefaultForImmutable()", span="122-122", cluster="System.Type.CreateDefaultForImmutable()", file="StringExtensions.cs"];
m4_68 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="StringExtensions.cs"];
m4_74 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="40-40", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>.Validate(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="StringExtensions.cs"];
m4_76 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="StringExtensions.cs"];
m4_123 [label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144", cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="StringExtensions.cs"];
m4_119 [label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134", cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="StringExtensions.cs"];
m4_86 [label="Entry CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", span="21-21", cluster="CommandLine.Core.SpecificationProperty.Create(CommandLine.Core.Specification, System.Reflection.PropertyInfo, CommandLine.Infrastructure.Maybe<object>)", file="StringExtensions.cs"];
m4_14 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="StringExtensions.cs"];
m4_67 [label="Entry Unk.GetConstructor", span="", cluster="Unk.GetConstructor", file="StringExtensions.cs"];
m4_50 [label="Entry System.StringComparer.Equals(string, string)", span="0-0", cluster="System.StringComparer.Equals(string, string)", file="StringExtensions.cs"];
m4_45 [label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14", cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="StringExtensions.cs"];
m4_60 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="StringExtensions.cs"];
m4_48 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="StringExtensions.cs"];
m4_51 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="StringExtensions.cs"];
m4_73 [label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12", cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="StringExtensions.cs"];
m4_91 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="StringExtensions.cs"];
m4_5 [label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", span="23-23", cluster="lambda expression", file="StringExtensions.cs"];
m4_12 [label="NameLookup.Contains(name, optionSpecs, nameComparer)", span="23-23", cluster="lambda expression", file="StringExtensions.cs"];
m4_6 [label="var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer))", span="24-26", cluster="lambda expression", file="StringExtensions.cs"];
m4_16 [label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", span="26-26", cluster="lambda expression", file="StringExtensions.cs"];
m4_4 [label="Entry lambda expression", span="21-28", cluster="lambda expression", file="StringExtensions.cs"];
m4_11 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="StringExtensions.cs"];
m4_7 [label="return explodedTokens;", span="27-27", cluster="lambda expression", file="StringExtensions.cs"];
m4_15 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="StringExtensions.cs"];
m4_8 [label="Exit lambda expression", span="21-28", cluster="lambda expression", file="StringExtensions.cs"];
m4_13 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="StringExtensions.cs"];
m4_17 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="StringExtensions.cs"];
m4_88 [label="typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="53-56", cluster="lambda expression", file="StringExtensions.cs"];
m4_95 [label="TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer)", span="72-72", cluster="lambda expression", file="StringExtensions.cs"];
m4_99 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="77-77", cluster="lambda expression", file="StringExtensions.cs"];
m4_103 [label="TypeConverter.ChangeType(vals, type, isScalar, parsingCulture)", span="83-83", cluster="lambda expression", file="StringExtensions.cs"];
m4_106 [label="token.Text.MatchName(o.ShortName, o.LongName, nameComparer)", span="87-87", cluster="lambda expression", file="StringExtensions.cs"];
m4_77 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="StringExtensions.cs"];
m4_81 [label="Entry lambda expression", span="43-44", cluster="lambda expression", file="StringExtensions.cs"];
m4_94 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="StringExtensions.cs"];
m4_98 [label="Entry lambda expression", span="77-77", cluster="lambda expression", file="StringExtensions.cs"];
m4_102 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="StringExtensions.cs"];
m4_105 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="StringExtensions.cs"];
m4_109 [label="Entry lambda expression", span="94-94", cluster="lambda expression", file="StringExtensions.cs"];
m4_137 [label="Entry lambda expression", span="114-114", cluster="lambda expression", file="StringExtensions.cs"];
m4_140 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="StringExtensions.cs"];
m4_112 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="StringExtensions.cs"];
m4_116 [label="Entry lambda expression", span="98-98", cluster="lambda expression", file="StringExtensions.cs"];
m4_120 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="StringExtensions.cs"];
m4_124 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="StringExtensions.cs"];
m4_127 [label="Entry lambda expression", span="103-105", cluster="lambda expression", file="StringExtensions.cs"];
m4_131 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="StringExtensions.cs"];
m4_78 [label="f().GetType()", span="41-41", cluster="lambda expression", file="StringExtensions.cs"];
m4_79 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="StringExtensions.cs"];
m4_82 [label="SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>())", span="43-44", cluster="lambda expression", file="StringExtensions.cs"];
m4_83 [label="Exit lambda expression", span="43-44", cluster="lambda expression", file="StringExtensions.cs"];
m4_87 [label="Entry lambda expression", span="52-56", cluster="lambda expression", file="StringExtensions.cs"];
m4_89 [label="Exit lambda expression", span="52-56", cluster="lambda expression", file="StringExtensions.cs"];
m4_92 [label="f()", span="54-54", cluster="lambda expression", file="StringExtensions.cs"];
m4_93 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="StringExtensions.cs"];
m4_96 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="StringExtensions.cs"];
m4_100 [label="Exit lambda expression", span="77-77", cluster="lambda expression", file="StringExtensions.cs"];
m4_104 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="StringExtensions.cs"];
m4_107 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="StringExtensions.cs"];
m4_110 [label="f()", span="94-94", cluster="lambda expression", file="StringExtensions.cs"];
m4_111 [label="Exit lambda expression", span="94-94", cluster="lambda expression", file="StringExtensions.cs"];
m4_113 [label="sp.Value.IsJust()", span="97-97", cluster="lambda expression", file="StringExtensions.cs"];
m4_114 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="StringExtensions.cs"];
m4_117 [label="sp.Value.FromJust()", span="98-98", cluster="lambda expression", file="StringExtensions.cs"];
m4_118 [label="Exit lambda expression", span="98-98", cluster="lambda expression", file="StringExtensions.cs"];
m4_121 [label="sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust()", span="100-100", cluster="lambda expression", file="StringExtensions.cs"];
m4_122 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="StringExtensions.cs"];
m4_125 [label="sp.Specification.DefaultValue.FromJust()", span="101-101", cluster="lambda expression", file="StringExtensions.cs"];
m4_126 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="StringExtensions.cs"];
m4_128 [label="sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing()", span="103-105", cluster="lambda expression", file="StringExtensions.cs"];
m4_129 [label="Exit lambda expression", span="103-105", cluster="lambda expression", file="StringExtensions.cs"];
m4_132 [label="sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray()", span="106-106", cluster="lambda expression", file="StringExtensions.cs"];
m4_133 [label="Exit lambda expression", span="106-106", cluster="lambda expression", file="StringExtensions.cs"];
m4_138 [label=v, span="114-114", cluster="lambda expression", file="StringExtensions.cs"];
m4_139 [label="Exit lambda expression", span="114-114", cluster="lambda expression", file="StringExtensions.cs"];
m4_141 [label=d, span="115-115", cluster="lambda expression", file="StringExtensions.cs"];
m4_142 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="StringExtensions.cs"];
m4_49 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="StringExtensions.cs"];
m4_53 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="StringExtensions.cs"];
m4_80 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="StringExtensions.cs"];
m4_59 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="StringExtensions.cs"];
m4_75 [label="Entry Unk.Concat", span="", cluster="Unk.Concat", file="StringExtensions.cs"];
m4_135 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="StringExtensions.cs"];
m4_136 [label="Entry System.Type.CreateEmptyArray()", span="101-101", cluster="System.Type.CreateEmptyArray()", file="StringExtensions.cs"];
m4_69 [label="Entry string.ToLower()", span="0-0", cluster="string.ToLower()", file="StringExtensions.cs"];
m4_134 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="StringExtensions.cs"];
m4_9 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="StringExtensions.cs"];
m4_84 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="StringExtensions.cs"];
m4_97 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="23-23", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="StringExtensions.cs"];
m4_64 [label="Entry System.Activator.CreateInstance<T>()", span="0-0", cluster="System.Activator.CreateInstance<T>()", file="StringExtensions.cs"];
m4_56 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="StringExtensions.cs"];
m4_63 [label="Entry System.Type.IsMutable()", span="115-115", cluster="System.Type.IsMutable()", file="StringExtensions.cs"];
m4_85 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="StringExtensions.cs"];
m4_47 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="StringExtensions.cs"];
m4_0 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_1 [label="return Build(\r\n                factory,\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(\r\n                            tokens,\r\n                            name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", span="19-31", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_2 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_3 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_19 [label="var typeInfo = factory.Return(f => f().GetType(), typeof(T))", span="41-41", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_23 [label="Func<T> makeDefault = () =>\r\n                typeof(T).IsMutable()\r\n                    ? factory.Return(f => f(), Activator.CreateInstance<T>())\r\n                    : ReflectionHelper.CreateDefaultImmutableInstance<T>(\r\n                        (from p in specProps select p.Specification.ConversionType).ToArray())", span="52-56", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_24 [label="arguments.Any() && nameComparer.Equals(''--help'', arguments.First())", span="58-58", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_26 [label="var tokenizerResult = tokenizer(arguments, optionSpecs)", span="66-66", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_28 [label="var partitions = TokenPartitioner.Partition(\r\n                tokens,\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, optionSpecs, nameComparer))", span="70-72", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_29 [label="var optionSpecProps = OptionMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsOption() select pt),\r\n                partitions.Options,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture),\r\n                nameComparer)", span="74-78", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_30 [label="var valueSpecProps = ValueMapper.MapValues(\r\n                (from pt in specProps where pt.Specification.IsValue() select pt),\r\n                    partitions.Values,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, parsingCulture))", span="80-83", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_31 [label="var missingValueErrors = from token in partitions.Errors\r\n                                     select new MissingValueOptionError(\r\n                                         optionSpecs.Single(o => token.Text.MatchName(o.ShortName, o.LongName, nameComparer)).FromOptionSpecification())", span="85-87", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_35 [label="instance = factory.Return(f => f(), Activator.CreateInstance<T>())", span="94-94", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_20 [label="var specProps = typeInfo.GetSpecifications(pi => SpecificationProperty.Create(\r\n                    Specification.FromProperty(pi), pi, Maybe.Nothing<object>()))", span="43-44", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_34 [label="typeInfo.IsMutable()", span="92-92", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_21 [label="var specs = from pt in specProps select pt.Specification", span="46-46", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_38 [label="var ctor = t.GetConstructor((from p in specProps select p.Specification.ConversionType).ToArray())", span="111-111", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_22 [label="var optionSpecs = specs\r\n                .ThrowingValidate(SpecificationGuards.Lookup)\r\n                .OfType<OptionSpecification>()", span="48-50", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_25 [label="return ParserResult.Create(\r\n                    ParserResultType.Options,\r\n                    makeDefault(),\r\n                    new[] { new HelpRequestedError() });", span="60-63", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_27 [label="var tokens = tokenizerResult.Value", span="68-68", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_42 [label="return ParserResult.Create(\r\n                ParserResultType.Options,\r\n                instance,\r\n                tokenizerResult.Errors\r\n                    .Concat(missingValueErrors)\r\n                    .Concat(optionSpecProps.Errors)\r\n                    .Concat(valueSpecProps.Errors)\r\n                    .Concat(validationErrors));", span="123-130", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_41 [label="var validationErrors = specPropsWithValue.Validate(\r\n                SpecificationPropertyRules.Lookup(tokens))", span="120-121", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_32 [label="var specPropsWithValue = optionSpecProps.Value.Concat(valueSpecProps.Value)", span="89-89", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_33 [label="T instance", span="91-91", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_36 [label="instance = instance\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsJust(),\r\n                        sp => sp.Value.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing() && sp.Specification.DefaultValue.IsJust(),\r\n                        sp => sp.Specification.DefaultValue.FromJust())\r\n                    .SetProperties(specPropsWithValue,\r\n                        sp => sp.Value.IsNothing()\r\n                            && sp.Specification.TargetType == TargetType.Sequence\r\n                            && sp.Specification.DefaultValue.MatchNothing(),\r\n                        sp => sp.Property.PropertyType.GetGenericArguments().Single().CreateEmptyArray())", span="95-106", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_39 [label="var values = (from prms in ctor.GetParameters()\r\n                              join sp in specPropsWithValue on prms.Name.ToLower() equals sp.Property.Name.ToLower()\r\n                              select sp.Value.Return(v => v,\r\n                                    sp.Specification.DefaultValue.Return(d => d,\r\n                                        sp.Specification.ConversionType.CreateDefaultForImmutable()))).ToArray()", span="112-116", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_37 [label="var t = typeof(T)", span="110-110", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_40 [label="instance = (T)ctor.Invoke(values)", span="117-117", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_43 [label="Exit CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34", cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringExtensions.cs"];
m4_72 [label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0", cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="StringExtensions.cs"];
m4_66 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="StringExtensions.cs"];
m4_52 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353", cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="StringExtensions.cs"];
m4_61 [label="Entry Unk.FromOptionSpecification", span="", cluster="Unk.FromOptionSpecification", file="StringExtensions.cs"];
m4_54 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="StringExtensions.cs"];
m4_62 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="StringExtensions.cs"];
m4_57 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="StringExtensions.cs"];
m4_143 [label="System.StringComparer", span="", file="StringExtensions.cs"];
m4_144 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span="", file="StringExtensions.cs"];
m4_145 [label="CommandLine.Infrastructure.Maybe<System.Func<T>>", span="", file="StringExtensions.cs"];
m4_146 [label=specProps, span="", file="StringExtensions.cs"];
m4_147 [label="System.StringComparer", span="", file="StringExtensions.cs"];
m4_148 [label=optionSpecs, span="", file="StringExtensions.cs"];
m4_149 [label="System.Globalization.CultureInfo", span="", file="StringExtensions.cs"];
m4_150 [label=token, span="", file="StringExtensions.cs"];
m0_25 -> m0_49  [key=0, style=solid];
m0_25 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_51  [key=2, style=dotted];
m0_49 -> m0_52  [key=2, style=dotted];
m0_49 -> m0_53  [key=2, style=dotted];
m0_49 -> m0_54  [key=2, style=dotted];
m0_49 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_49 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_50 -> m0_25  [key=0, style=bold, color=blue];
m0_3 -> m0_12  [key=0, style=solid];
m0_3 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_15  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_16  [key=2, style=dotted];
m0_13 -> m0_17  [key=2, style=dotted];
m0_13 -> m0_18  [key=2, style=dotted];
m0_13 -> m0_19  [key=2, style=dotted];
m0_13 -> m0_20  [key=2, style=dotted];
m0_13 -> m0_21  [key=2, style=dotted];
m0_13 -> m0_22  [key=2, style=dotted];
m0_13 -> m0_23  [key=2, style=dotted];
m0_13 -> m0_24  [key=2, style=dotted];
m0_13 -> m0_25  [key=2, style=dotted];
m0_13 -> m0_26  [key=2, style=dotted];
m0_14 -> m0_3  [key=0, style=bold, color=blue];
m0_58 -> m0_59  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid, color=red];
m0_5 -> m0_7  [key=2, style=dotted, color=red];
m0_5 -> m0_8  [key=1, style=dashed, color=red, label="lambda expression"];
m0_9 -> m0_10  [key=0, style=solid, color=red];
m0_9 -> m0_11  [key=2, style=dotted, color=red];
m0_4 -> m0_5  [key=0, style=solid, color=red];
m0_4 -> m0_9  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid, color=red];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_21  [key=2, style=dotted];
m0_36 -> m0_22  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_41  [key=2, style=dotted];
m0_39 -> m0_42  [key=2, style=dotted];
m0_39 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_21  [key=2, style=dotted];
m0_44 -> m0_22  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_37 -> m0_35  [key=0, style=bold, color=blue];
m0_40 -> m0_38  [key=0, style=bold, color=blue];
m0_43 -> m0_44  [key=0, style=solid];
m0_45 -> m0_43  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_48 -> m0_46  [key=0, style=bold, color=blue];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_22  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_57 -> m0_55  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_61  [key=2, style=dotted];
m0_60 -> m0_58  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=red];
m0_0 -> m0_5  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_0 -> m0_9  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_1 -> m0_2  [key=0, style=solid, color=red];
m0_1 -> m0_3  [key=2, style=dotted, color=red];
m0_1 -> m0_4  [key=1, style=dashed, color=red, label="lambda expression"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_26 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m0_26 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_27 -> m0_30  [key=2, style=dotted];
m0_27 -> m0_23  [key=2, style=dotted];
m0_27 -> m0_31  [key=2, style=dotted];
m0_27 -> m0_17  [key=2, style=dotted];
m0_27 -> m0_32  [key=2, style=dotted];
m0_27 -> m0_21  [key=2, style=dotted];
m0_27 -> m0_33  [key=2, style=dotted];
m0_27 -> m0_34  [key=2, style=dotted];
m0_27 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_27 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_27 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_28 -> m0_26  [key=0, style=bold, color=blue];
m0_62 -> m0_5  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_62 -> m0_9  [key=1, style=dashed, color=red, label="System.StringComparer"];
m0_63 -> m0_9  [key=1, style=dashed, color=red, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m0_64 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_64 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_64 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m0_65 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_65 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_65 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m0_66 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>"];
m0_67 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_68 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=tokenPartitions];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_11  [key=2, style=dotted];
m1_2 -> m1_12  [key=2, style=dotted];
m1_2 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_13  [key=2, style=dotted];
m1_3 -> m1_14  [key=2, style=dotted];
m1_3 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_3 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_4 -> m1_15  [key=2, style=dotted];
m1_4 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_28 -> m1_29  [key=0, style=solid];
m1_16 -> m1_17  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=2, style=dotted];
m1_18 -> m1_16  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=2, style=dotted];
m1_26 -> m1_24  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_23  [key=2, style=dotted];
m1_29 -> m1_31  [key=2, style=dotted];
m1_30 -> m1_28  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<int>"];
m2_0 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<int>"];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<object>"];
m2_0 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m2_0 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TargetType"];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_8  [key=0, style=solid];
m2_8 -> m2_0  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m2_9 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m2_9 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_22  [key=2, style=dotted];
m2_10 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=attrs];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_25  [key=2, style=dotted];
m2_13 -> m2_26  [key=2, style=dotted];
m2_13 -> m2_27  [key=2, style=dotted];
m2_13 -> m2_28  [key=2, style=dotted];
m2_13 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label=spec];
m2_13 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=spec];
m2_15 -> m2_21  [key=0, style=solid];
m2_15 -> m2_29  [key=2, style=dotted];
m2_15 -> m2_30  [key=2, style=dotted];
m2_19 -> m2_21  [key=0, style=solid];
m2_19 -> m2_25  [key=2, style=dotted];
m2_19 -> m2_31  [key=2, style=dotted];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_23  [key=2, style=dotted];
m2_11 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=oa];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_23  [key=2, style=dotted];
m2_17 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=va];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_17  [key=0, style=solid];
m2_12 -> m2_24  [key=2, style=dotted];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_16  [key=0, style=solid];
m2_16 -> m2_21  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_20  [key=0, style=solid];
m2_18 -> m2_24  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_20 -> m2_32  [key=2, style=dotted];
m2_21 -> m2_9  [key=0, style=bold, color=blue];
m2_33 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m4_91 -> m4_92  [key=0, style=solid];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_9  [key=2, style=dotted];
m4_5 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_14  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_10  [key=2, style=dotted];
m4_6 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_18  [key=2, style=dotted];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_4 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_4 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_11 -> m4_12  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_8 -> m4_4  [key=0, style=bold, color=blue];
m4_13 -> m4_11  [key=0, style=bold, color=blue];
m4_17 -> m4_15  [key=0, style=bold, color=blue];
m4_88 -> m4_89  [key=0, style=solid];
m4_88 -> m4_63  [key=2, style=dotted];
m4_88 -> m4_64  [key=2, style=dotted];
m4_88 -> m4_44  [key=2, style=dotted];
m4_88 -> m4_66  [key=2, style=dotted];
m4_88 -> m4_90  [key=2, style=dotted];
m4_88 -> m4_91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_88 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label=p];
m4_95 -> m4_96  [key=0, style=solid];
m4_95 -> m4_97  [key=2, style=dotted];
m4_99 -> m4_100  [key=0, style=solid];
m4_99 -> m4_101  [key=2, style=dotted];
m4_103 -> m4_104  [key=0, style=solid];
m4_103 -> m4_101  [key=2, style=dotted];
m4_106 -> m4_107  [key=0, style=solid];
m4_106 -> m4_108  [key=2, style=dotted];
m4_77 -> m4_78  [key=0, style=solid];
m4_81 -> m4_82  [key=0, style=solid];
m4_94 -> m4_95  [key=0, style=solid];
m4_98 -> m4_99  [key=0, style=solid];
m4_102 -> m4_103  [key=0, style=solid];
m4_105 -> m4_106  [key=0, style=solid];
m4_109 -> m4_110  [key=0, style=solid];
m4_137 -> m4_138  [key=0, style=solid];
m4_140 -> m4_141  [key=0, style=solid];
m4_112 -> m4_113  [key=0, style=solid];
m4_116 -> m4_117  [key=0, style=solid];
m4_120 -> m4_121  [key=0, style=solid];
m4_124 -> m4_125  [key=0, style=solid];
m4_127 -> m4_128  [key=0, style=solid];
m4_131 -> m4_132  [key=0, style=solid];
m4_78 -> m4_79  [key=0, style=solid];
m4_78 -> m4_51  [key=2, style=dotted];
m4_78 -> m4_80  [key=2, style=dotted];
m4_79 -> m4_77  [key=0, style=bold, color=blue];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_84  [key=2, style=dotted];
m4_82 -> m4_85  [key=2, style=dotted];
m4_82 -> m4_86  [key=2, style=dotted];
m4_83 -> m4_81  [key=0, style=bold, color=blue];
m4_87 -> m4_88  [key=0, style=solid];
m4_89 -> m4_87  [key=0, style=bold, color=blue];
m4_92 -> m4_93  [key=0, style=solid];
m4_92 -> m4_51  [key=2, style=dotted];
m4_93 -> m4_91  [key=0, style=bold, color=blue];
m4_96 -> m4_94  [key=0, style=bold, color=blue];
m4_100 -> m4_98  [key=0, style=bold, color=blue];
m4_104 -> m4_102  [key=0, style=bold, color=blue];
m4_107 -> m4_105  [key=0, style=bold, color=blue];
m4_110 -> m4_111  [key=0, style=solid];
m4_110 -> m4_51  [key=2, style=dotted];
m4_111 -> m4_109  [key=0, style=bold, color=blue];
m4_113 -> m4_114  [key=0, style=solid];
m4_113 -> m4_115  [key=2, style=dotted];
m4_114 -> m4_112  [key=0, style=bold, color=blue];
m4_117 -> m4_118  [key=0, style=solid];
m4_117 -> m4_119  [key=2, style=dotted];
m4_118 -> m4_116  [key=0, style=bold, color=blue];
m4_121 -> m4_122  [key=0, style=solid];
m4_121 -> m4_123  [key=2, style=dotted];
m4_121 -> m4_115  [key=2, style=dotted];
m4_122 -> m4_120  [key=0, style=bold, color=blue];
m4_125 -> m4_126  [key=0, style=solid];
m4_125 -> m4_119  [key=2, style=dotted];
m4_126 -> m4_124  [key=0, style=bold, color=blue];
m4_128 -> m4_129  [key=0, style=solid];
m4_128 -> m4_123  [key=2, style=dotted];
m4_128 -> m4_130  [key=2, style=dotted];
m4_129 -> m4_127  [key=0, style=bold, color=blue];
m4_132 -> m4_133  [key=0, style=solid];
m4_132 -> m4_134  [key=2, style=dotted];
m4_132 -> m4_135  [key=2, style=dotted];
m4_132 -> m4_136  [key=2, style=dotted];
m4_133 -> m4_131  [key=0, style=bold, color=blue];
m4_138 -> m4_139  [key=0, style=solid];
m4_139 -> m4_137  [key=0, style=bold, color=blue];
m4_141 -> m4_142  [key=0, style=solid];
m4_142 -> m4_140  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_0 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_0 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_0 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=2, style=dotted];
m4_1 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
m4_3 -> m4_19  [key=0, style=solid];
m4_3 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m4_3 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m4_3 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m4_3 -> m4_26  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>"];
m4_3 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_95  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_99  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_3 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_3 -> m4_103  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_3 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_3 -> m4_35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_44  [key=2, style=dotted];
m4_19 -> m4_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_19 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label=typeInfo];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_25  [key=1, style=dashed, color=darkseagreen4, label=makeDefault];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_26  [key=0, style=solid];
m4_24 -> m4_48  [key=2, style=dotted];
m4_24 -> m4_49  [key=2, style=dotted];
m4_24 -> m4_50  [key=2, style=dotted];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_54  [key=2, style=dotted];
m4_26 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label=tokenizerResult];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_55  [key=2, style=dotted];
m4_28 -> m4_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_28 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m4_28 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=partitions];
m4_29 -> m4_30  [key=0, style=solid];
m4_29 -> m4_56  [key=2, style=dotted];
m4_29 -> m4_57  [key=2, style=dotted];
m4_29 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label=pt];
m4_29 -> m4_98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_29 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m4_29 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label=optionSpecProps];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_58  [key=2, style=dotted];
m4_30 -> m4_57  [key=2, style=dotted];
m4_30 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label=pt];
m4_30 -> m4_102  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_30 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m4_30 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label=valueSpecProps];
m4_31 -> m4_32  [key=0, style=solid];
m4_31 -> m4_59  [key=2, style=dotted];
m4_31 -> m4_60  [key=2, style=dotted];
m4_31 -> m4_61  [key=2, style=dotted];
m4_31 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=token];
m4_31 -> m4_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_31 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label=token];
m4_31 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label=missingValueErrors];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_64  [key=2, style=dotted];
m4_35 -> m4_44  [key=2, style=dotted];
m4_35 -> m4_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_45  [key=2, style=dotted];
m4_20 -> m4_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_20 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_20 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_20 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_20 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_20 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_37  [key=0, style=solid];
m4_34 -> m4_63  [key=2, style=dotted];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label=pt];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_66  [key=2, style=dotted];
m4_38 -> m4_67  [key=2, style=dotted];
m4_38 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label=p];
m4_38 -> m4_40  [key=1, style=dashed, color=darkseagreen4, label=ctor];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_46  [key=2, style=dotted];
m4_22 -> m4_47  [key=2, style=dotted];
m4_22 -> m4_26  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_22 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_22 -> m4_95  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_22 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_25 -> m4_43  [key=0, style=solid];
m4_25 -> m4_51  [key=2, style=dotted];
m4_25 -> m4_52  [key=2, style=dotted];
m4_25 -> m4_53  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_75  [key=2, style=dotted];
m4_42 -> m4_76  [key=2, style=dotted];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_73  [key=2, style=dotted];
m4_41 -> m4_74  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_62  [key=2, style=dotted];
m4_32 -> m4_36  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m4_32 -> m4_39  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m4_32 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=specPropsWithValue];
m4_33 -> m4_34  [key=0, style=solid];
m4_36 -> m4_41  [key=0, style=solid];
m4_36 -> m4_65  [key=2, style=dotted];
m4_36 -> m4_36  [key=1, style=dashed, color=darkseagreen4, label=instance];
m4_36 -> m4_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_36 -> m4_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_36 -> m4_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_36 -> m4_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_36 -> m4_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_36 -> m4_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_36 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label=instance];
m4_39 -> m4_40  [key=0, style=solid];
m4_39 -> m4_68  [key=2, style=dotted];
m4_39 -> m4_69  [key=2, style=dotted];
m4_39 -> m4_70  [key=2, style=dotted];
m4_39 -> m4_44  [key=2, style=dotted];
m4_39 -> m4_71  [key=2, style=dotted];
m4_39 -> m4_39  [key=1, style=dashed, color=darkseagreen4, label=prms];
m4_39 -> m4_137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_39 -> m4_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_37 -> m4_38  [key=0, style=solid];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_72  [key=2, style=dotted];
m4_40 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label=instance];
m4_43 -> m4_3  [key=0, style=bold, color=blue];
m4_143 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_143 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_143 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_143 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_144 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_144 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
m4_145 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<System.Func<T>>"];
m4_146 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label=specProps];
m4_147 -> m4_95  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_147 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label="System.StringComparer"];
m4_148 -> m4_95  [key=1, style=dashed, color=darkseagreen4, label=optionSpecs];
m4_149 -> m4_99  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_149 -> m4_103  [key=1, style=dashed, color=darkseagreen4, label="System.Globalization.CultureInfo"];
m4_150 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label=token];
}
