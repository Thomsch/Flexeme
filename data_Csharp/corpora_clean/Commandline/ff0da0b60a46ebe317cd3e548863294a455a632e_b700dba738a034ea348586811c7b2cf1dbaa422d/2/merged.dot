digraph  {
n57 [label="CommandLine.Text.CopyrightInfo", span=""];
n0 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="32-32", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)"];
n1 [label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="32-32", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)"];
n2 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="45-45", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])"];
n3 [label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="45-45", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])"];
n4 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n5 [label="string.IsNullOrWhiteSpace(author)", span="61-61", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n7 [label="copyrightYears.Length == 0", span="62-62", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n10 [label="this.isSymbolUpper = isSymbolUpper", span="65-65", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n11 [label="this.author = author", span="66-66", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n12 [label="this.copyrightYears = copyrightYears", span="67-67", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n13 [label="this.builderSize = 12 + author.Length + (4 * copyrightYears.Length) + ExtraLength", span="68-68", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n6 [label="throw new ArgumentException(''author'');", span="61-61", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n15 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)"];
n8 [label="throw new ArgumentOutOfRangeException(''copyrightYears'');", span="62-62", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n9 [label="int ExtraLength = 10", span="64-64", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n14 [label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
n17 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)"];
n16 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)"];
n18 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo()", span="74-74", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo()"];
n19 [label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo()", span="74-74", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo()"];
n20 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)"];
n21 [label="this.attribute = attribute", span="85-85", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)"];
n22 [label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)"];
n23 [label="Entry CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128", cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)"];
n24 [label="return info.ToString();", span="130-130", cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)"];
n25 [label="Exit CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128", cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)"];
n26 [label="Entry CommandLine.Text.CopyrightInfo.ToString()", span="137-137", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n27 [label="this.attribute != null", span="139-139", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n28 [label="return this.attribute.Copyright;", span="141-141", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n29 [label="var builder = new StringBuilder(this.builderSize)", span="144-144", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n30 [label="builder.Append(CopyrightWord)", span="145-145", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n39 [label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(int)"];
n31 [label="builder.Append(' ')", span="146-146", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n32 [label="builder.Append(this.isSymbolUpper ? SymbolUpper : SymbolLower)", span="147-147", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n33 [label="builder.Append(' ')", span="148-148", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n34 [label="builder.Append(FormatYears(this.copyrightYears))", span="149-149", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n35 [label="builder.Append(' ')", span="150-150", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n36 [label="builder.Append(this.author)", span="151-151", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n37 [label="return builder.ToString();", span="152-152", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n40 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)"];
n41 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)"];
n42 [label="Entry CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n38 [label="Exit CommandLine.Text.CopyrightInfo.ToString()", span="137-137", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
n43 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()"];
n44 [label="years.Length == 1", span="163-163", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n45 [label="return years[0].ToString(CultureInfo.InvariantCulture);", span="165-165", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n46 [label="var yearsPart = new StringBuilder(years.Length * 6)", span="168-168", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n48 [label="i < years.Length", span="169-169", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n49 [label="yearsPart.Append(years[i].ToString(CultureInfo.InvariantCulture))", span="171-171", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n51 [label="next < years.Length", span="173-173", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n52 [label="yearsPart.Append(years[next] - years[i] > 1 ? '' - '' : '', '')", span="175-175", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n47 [label="int i = 0", span="169-169", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n54 [label="return yearsPart.ToString();", span="179-179", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n50 [label="int next = i + 1", span="172-172", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n53 [label="i++", span="169-169", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
n56 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)"];
n55 [label="Exit CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d6 [label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedLength))", span="28-28", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", color=green, community=0];
d5 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="26-26", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)"];
d7 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)", span="26-26", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedLengthTruncator(string, int, string)"];
d8 [label="Entry string.Truncate(int, Humanizer.ITruncator)", span="27-27", cluster="string.Truncate(int, Humanizer.ITruncator)"];
d4 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d10 [label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfCharacters))", span="40-40", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)"];
d13 [label="Assert.Equal(expectedOutput, input.Truncate(length, Truncator.FixedNumberOfWords))", span="53-53", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)"];
d1 [label="Assert.Equal(expectedOutput, input.Truncate(length))", span="16-16", cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)"];
d16 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString))", span="67-67", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)"];
d20 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedLength))", span="82-82", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)"];
d24 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfCharacters))", span="97-97", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)"];
d27 [label="Assert.Equal(expectedOutput, input.Truncate(length, truncationString, Truncator.FixedNumberOfWords))", span="112-112", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)"];
d9 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="38-38", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)"];
d11 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)", span="38-38", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfCharactersTruncator(string, int, string)"];
d12 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="51-51", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)"];
d14 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)", span="51-51", cluster="Humanizer.Tests.TruncatorTests.TruncateWithFixedNumberOfWordsTruncator(string, int, string)"];
d0 [label="Entry Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="14-14", cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)"];
d2 [label="Exit Humanizer.Tests.TruncatorTests.Truncate(string, int, string)", span="14-14", cluster="Humanizer.Tests.TruncatorTests.Truncate(string, int, string)"];
d3 [label="Entry string.Truncate(int)", span="15-15", cluster="string.Truncate(int)"];
d15 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="65-65", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)"];
d17 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)", span="65-65", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationString(string, int, string, string)"];
d18 [label="Entry string.Truncate(int, string)", span="39-39", cluster="string.Truncate(int, string)"];
d19 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="80-80", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)"];
d21 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)", span="80-80", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedLengthTruncator(string, int, string, string)"];
d22 [label="Entry string.Truncate(int, string, Humanizer.ITruncator)", span="52-52", cluster="string.Truncate(int, string, Humanizer.ITruncator)"];
d23 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="95-95", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)"];
d25 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)", span="95-95", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfCharactersTruncator(string, int, string, string)"];
d26 [label="Entry Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="110-110", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)"];
d28 [label="Exit Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)", span="110-110", cluster="Humanizer.Tests.TruncatorTests.TruncateWithTruncationStringAndFixedNumberOfWordsTruncator(string, int, string, string)"];
m0_4 [label="Entry CommandLine.Parser.FormatCommandLine<T>(T)", span="17-17", cluster="CommandLine.Parser.FormatCommandLine<T>(T)", file="UnParserExtensionsTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m0_1 [label="new Parser()\r                .FormatCommandLine(options)\r                .ShouldBeEquivalentTo(result)", span="23-25", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", color=green, community=1, file="UnParserExtensionsTests.cs"];
m0_2 [label="Exit CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", span="21-21", cluster="CommandLine.Tests.Unit.UnParserExtensionsTests.UnParsing_instance_returns_command_line(CommandLine.Tests.Fakes.FakeOptions, string)", file="UnParserExtensionsTests.cs"];
m0_5 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="UnParserExtensionsTests.cs"];
m0_3 [label="Entry CommandLine.Parser.Parser()", span="26-26", cluster="CommandLine.Parser.Parser()", file="UnParserExtensionsTests.cs"];
n57 -> n10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n29  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n30  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n32  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n34  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n57 -> n36  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n4 -> n7  [key=1, style=dashed, color=darkseagreen4, label="params int[]"];
n4 -> n10  [key=1, style=dashed, color=darkseagreen4, label=bool];
n4 -> n11  [key=1, style=dashed, color=darkseagreen4, label=string];
n4 -> n12  [key=1, style=dashed, color=darkseagreen4, label="params int[]"];
n4 -> n13  [key=1, style=dashed, color=darkseagreen4, label=string];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=0, style=solid];
n5 -> n15  [key=2, style=dotted];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n6 -> n14  [key=0, style=solid];
n6 -> n16  [key=2, style=dotted];
n8 -> n14  [key=0, style=solid];
n8 -> n17  [key=2, style=dotted];
n9 -> n10  [key=0, style=solid];
n9 -> n13  [key=1, style=dashed, color=darkseagreen4, label=ExtraLength];
n14 -> n4  [key=0, style=bold, color=blue];
n18 -> n19  [key=0, style=solid];
n19 -> n18  [key=0, style=bold, color=blue];
n20 -> n21  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n22 -> n20  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n24 -> n26  [key=2, style=dotted];
n25 -> n23  [key=0, style=bold, color=blue];
n26 -> n27  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=0, style=solid];
n28 -> n38  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n29 -> n39  [key=2, style=dotted];
n29 -> n31  [key=1, style=dashed, color=darkseagreen4, label=builder];
n29 -> n32  [key=1, style=dashed, color=darkseagreen4, label=builder];
n29 -> n33  [key=1, style=dashed, color=darkseagreen4, label=builder];
n29 -> n34  [key=1, style=dashed, color=darkseagreen4, label=builder];
n29 -> n35  [key=1, style=dashed, color=darkseagreen4, label=builder];
n29 -> n36  [key=1, style=dashed, color=darkseagreen4, label=builder];
n29 -> n37  [key=1, style=dashed, color=darkseagreen4, label=builder];
n30 -> n31  [key=0, style=solid];
n30 -> n40  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n41  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n40  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n41  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid];
n34 -> n42  [key=2, style=dotted];
n34 -> n40  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n41  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n36 -> n40  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n43  [key=2, style=dotted];
n42 -> n44  [key=0, style=solid];
n42 -> n45  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n42 -> n46  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n42 -> n48  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n42 -> n49  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n42 -> n51  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n42 -> n52  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
n38 -> n26  [key=0, style=bold, color=blue];
n44 -> n45  [key=0, style=solid];
n44 -> n46  [key=0, style=solid];
n45 -> n55  [key=0, style=solid];
n45 -> n56  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n46 -> n39  [key=2, style=dotted];
n46 -> n49  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
n46 -> n52  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
n46 -> n54  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
n48 -> n49  [key=0, style=solid];
n48 -> n54  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n49 -> n56  [key=2, style=dotted];
n49 -> n40  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n51 -> n53  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n52 -> n40  [key=2, style=dotted];
n47 -> n48  [key=0, style=solid];
n47 -> n49  [key=1, style=dashed, color=darkseagreen4, label=i];
n47 -> n50  [key=1, style=dashed, color=darkseagreen4, label=i];
n47 -> n52  [key=1, style=dashed, color=darkseagreen4, label=i];
n47 -> n53  [key=1, style=dashed, color=darkseagreen4, label=i];
n54 -> n55  [key=0, style=solid];
n54 -> n43  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n50 -> n52  [key=1, style=dashed, color=darkseagreen4, label=next];
n53 -> n48  [key=0, style=solid];
n53 -> n53  [key=1, style=dashed, color=darkseagreen4, label=i];
n55 -> n42  [key=0, style=bold, color=blue];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d8  [key=2, style=dotted, color=green];
d6 -> d4  [key=2, style=dotted, color=green];
d5 -> d6  [key=0, style=solid, color=green];
d7 -> d5  [key=0, style=bold, color=blue];
d10 -> d8  [key=2, style=dotted];
d10 -> d4  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d13 -> d8  [key=2, style=dotted];
d13 -> d4  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d1 -> d4  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d1 -> d3  [key=2, style=dotted];
d16 -> d4  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d16 -> d18  [key=2, style=dotted];
d20 -> d4  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d20 -> d22  [key=2, style=dotted];
d24 -> d4  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d22  [key=2, style=dotted];
d27 -> d4  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d27 -> d22  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d11 -> d9  [key=0, style=bold, color=blue];
d12 -> d13  [key=0, style=solid];
d14 -> d12  [key=0, style=bold, color=blue];
d0 -> d1  [key=0, style=solid];
d2 -> d0  [key=0, style=bold, color=blue];
d15 -> d16  [key=0, style=solid];
d17 -> d15  [key=0, style=bold, color=blue];
d19 -> d20  [key=0, style=solid];
d21 -> d19  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid];
d25 -> d23  [key=0, style=bold, color=blue];
d26 -> d27  [key=0, style=solid];
d28 -> d26  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_3  [key=2, style=dotted, color=green];
m0_1 -> m0_4  [key=2, style=dotted, color=green];
m0_1 -> m0_5  [key=2, style=dotted, color=green];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
}
