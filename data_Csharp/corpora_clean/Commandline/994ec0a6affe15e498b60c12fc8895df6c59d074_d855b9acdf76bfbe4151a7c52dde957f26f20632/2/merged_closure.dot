digraph  {
n0 [cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(char)", label="Entry CommandLine.OptionArrayAttribute.OptionArrayAttribute(char)", span="39-39"];
n1 [cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(char)", label="Exit CommandLine.OptionArrayAttribute.OptionArrayAttribute(char)", span="39-39"];
n2 [cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(string)", label="Entry CommandLine.OptionArrayAttribute.OptionArrayAttribute(string)", span="48-48"];
n3 [cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(string)", label="Exit CommandLine.OptionArrayAttribute.OptionArrayAttribute(string)", span="48-48"];
n4 [cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(char, string)", label="Entry CommandLine.OptionArrayAttribute.OptionArrayAttribute(char, string)", span="58-58"];
n5 [cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(char, string)", label="Exit CommandLine.OptionArrayAttribute.OptionArrayAttribute(char, string)", span="58-58"];
m0_11 [cluster="CommandLine.Tests.Fakes.OptionsWithTwoArrays.OptionsWithTwoArrays()", file="OptionArrayAttributeFixture.cs", label="Entry CommandLine.Tests.Fakes.OptionsWithTwoArrays.OptionsWithTwoArrays()", span="2-2"];
m0_15 [cluster="Unk.BeTrue", file="OptionArrayAttributeFixture.cs", label="Entry Unk.BeTrue", span=""];
m0_13 [cluster="CommandLine.Parser.ParseArguments(string[], object)", file="OptionArrayAttributeFixture.cs", label="Entry CommandLine.Parser.ParseArguments(string[], object)", span="140-140"];
m0_16 [cluster="Unk.HaveCount", file="OptionArrayAttributeFixture.cs", label="Entry Unk.HaveCount", span=""];
m0_12 [cluster="CommandLine.Parser.Parser()", file="OptionArrayAttributeFixture.cs", label="Entry CommandLine.Parser.Parser()", span="54-54"];
m0_0 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="Entry CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", span="16-16"];
m0_1 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="var options = new OptionsWithTwoArrays()", span="19-19"];
m0_2 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="var parser = new CommandLine.Parser()", span="20-20"];
m0_4 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="var result = parser.ParseArguments(argumets, options)", span="27-27"];
m0_6 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="options.Headers.Should().HaveCount(c => c == 4)", span="31-31"];
m0_7 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="options.Headers.Should().ContainInOrder(new uint[] { 1, 2, 3, 4 })", span="32-32"];
m0_8 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="options.Content.Should().HaveCount(c => c == 4)", span="33-33"];
m0_9 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="options.Content.Should().ContainInOrder(new uint[] { 5, 6, 7, 8 })", span="34-34"];
m0_3 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="var argumets = new[] { ''--source'', @''d:/document.docx'', ''--output'', @''d:/document.xlsx'',\r\n                    ''--headers'', ''1'', ''2'', ''3'', ''4'',              // first array\r\n                    ''--content'', ''5'', ''6'', ''7'', ''8'', ''--verbose''  // second array\r\n                }", span="21-24"];
m0_5 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="result.Should().BeTrue()", span="30-30"];
m0_10 [cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs", label="Exit CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", span="16-16"];
m0_21 [cluster="lambda expression", file="OptionArrayAttributeFixture.cs", label="Entry lambda expression", span="33-33"];
m0_18 [cluster="lambda expression", file="OptionArrayAttributeFixture.cs", label="Entry lambda expression", span="31-31"];
m0_19 [cluster="lambda expression", file="OptionArrayAttributeFixture.cs", label="c == 4", span="31-31"];
m0_20 [cluster="lambda expression", file="OptionArrayAttributeFixture.cs", label="Exit lambda expression", span="31-31"];
m0_22 [cluster="lambda expression", file="OptionArrayAttributeFixture.cs", label="c == 4", span="33-33"];
m0_23 [cluster="lambda expression", file="OptionArrayAttributeFixture.cs", label="Exit lambda expression", span="33-33"];
m0_14 [cluster="Unk.Should", file="OptionArrayAttributeFixture.cs", label="Entry Unk.Should", span=""];
m0_17 [cluster="Unk.ContainInOrder", file="OptionArrayAttributeFixture.cs", label="Entry Unk.ContainInOrder", span=""];
m1_0 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", file="OptionListAttribute.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char)", span="42-42"];
m1_1 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", color=green, community=0, file="OptionListAttribute.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char)", prediction=0, span="42-42"];
m1_2 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)", color=green, community=0, file="OptionListAttribute.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(string)", prediction=0, span="51-51"];
m1_3 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)", file="OptionListAttribute.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(string)", span="51-51"];
m1_7 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="OptionListAttribute.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", span="73-73"];
m1_8 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="OptionListAttribute.cs", label="Separator = separator", span="76-76"];
m1_9 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", color=green, community=0, file="OptionListAttribute.cs", label="Separator = DefaultSeparator", prediction=2, span="77-77"];
m1_4 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="OptionListAttribute.cs", label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="61-61"];
m1_6 [cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="OptionListAttribute.cs", label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="61-61"];
m1_10 [file="OptionListAttribute.cs", label="CommandLine.OptionListAttribute", span=""];
m2_13 [cluster="Unk.Be", file="OptionListAttributeFixture.cs", label="Entry Unk.Be", span=""];
m2_11 [cluster="CommandLine.Parser.ParseArguments(string[], object)", file="OptionListAttributeFixture.cs", label="Entry CommandLine.Parser.ParseArguments(string[], object)", span="140-140"];
m2_14 [cluster="Unk.HaveCount", file="OptionListAttributeFixture.cs", label="Entry Unk.HaveCount", span=""];
m2_10 [cluster="CommandLine.Parser.Parser()", file="OptionListAttributeFixture.cs", label="Entry CommandLine.Parser.Parser()", span="54-54"];
m2_9 [cluster="CommandLine.Tests.Fakes.OptionsWithImplicitLongName.OptionsWithImplicitLongName()", file="OptionListAttributeFixture.cs", label="Entry CommandLine.Tests.Fakes.OptionsWithImplicitLongName.OptionsWithImplicitLongName()", span="4-4"];
m2_16 [cluster="lambda expression", file="OptionListAttributeFixture.cs", label="Entry lambda expression", span="30-30"];
m2_17 [cluster="lambda expression", color=green, community=0, file="OptionListAttributeFixture.cs", label="c == 3", prediction=3, span="30-30"];
m2_18 [cluster="lambda expression", file="OptionListAttributeFixture.cs", label="Exit lambda expression", span="30-30"];
m2_0 [cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", file="OptionListAttributeFixture.cs", label="Entry CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", span="16-16"];
m2_1 [cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs", label="var options = new OptionsWithImplicitLongName()", prediction=4, span="19-19"];
m2_2 [cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs", label="var parser = new CommandLine.Parser()", prediction=5, span="20-20"];
m2_4 [cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs", label="var result = parser.ParseArguments(arguments, options)", prediction=6, span="26-26"];
m2_6 [cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs", label="options.Segments.Should().HaveCount(c => c == 3)", prediction=4, span="30-30"];
m2_7 [cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs", label="options.Segments.Should().ContainInOrder(new[] { ''header.txt'', ''body.txt'', ''footer.txt'' })", prediction=4, span="31-31"];
m2_3 [cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=1, file="OptionListAttributeFixture.cs", label="var arguments = new[] {\r\n                ''--segments'', ''header.txt:body.txt:footer.txt''\r\n            }", prediction=9, span="21-23"];
m2_5 [cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs", label="result.Should().Be(true)", prediction=10, span="29-29"];
m2_8 [cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", file="OptionListAttributeFixture.cs", label="Exit CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", span="16-16"];
m2_12 [cluster="Unk.Should", file="OptionListAttributeFixture.cs", label="Entry Unk.Should", span=""];
m2_15 [cluster="Unk.ContainInOrder", file="OptionListAttributeFixture.cs", label="Entry Unk.ContainInOrder", span=""];
m0_1 -> m0_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_1 -> m0_7  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_1 -> m0_8  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_1 -> m0_9  [color=darkseagreen4, key=1, label=options, style=dashed];
m0_6 -> m0_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_10 -> m1_1  [color=green, key=1, label="CommandLine.OptionListAttribute", style=dashed];
m1_10 -> m1_2  [color=green, key=1, label="CommandLine.OptionListAttribute", style=dashed];
m2_1 -> m2_6  [color=green, key=1, label=options, style=dashed];
m2_1 -> m2_7  [color=green, key=1, label=options, style=dashed];
m2_6 -> m2_16  [color=green, key=1, label="lambda expression", style=dashed];
}
