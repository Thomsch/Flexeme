digraph  {
n0 [label="Entry CommandLine.OptionArrayAttribute.OptionArrayAttribute(char)", span="39-39", cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(char)"];
n1 [label="Exit CommandLine.OptionArrayAttribute.OptionArrayAttribute(char)", span="39-39", cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(char)"];
n2 [label="Entry CommandLine.OptionArrayAttribute.OptionArrayAttribute(string)", span="48-48", cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(string)"];
n3 [label="Exit CommandLine.OptionArrayAttribute.OptionArrayAttribute(string)", span="48-48", cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(string)"];
n4 [label="Entry CommandLine.OptionArrayAttribute.OptionArrayAttribute(char, string)", span="58-58", cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(char, string)"];
n5 [label="Exit CommandLine.OptionArrayAttribute.OptionArrayAttribute(char, string)", span="58-58", cluster="CommandLine.OptionArrayAttribute.OptionArrayAttribute(char, string)"];
m0_11 [label="Entry CommandLine.Tests.Fakes.OptionsWithTwoArrays.OptionsWithTwoArrays()", span="2-2", cluster="CommandLine.Tests.Fakes.OptionsWithTwoArrays.OptionsWithTwoArrays()", file="OptionArrayAttributeFixture.cs"];
m0_15 [label="Entry Unk.BeTrue", span="", cluster="Unk.BeTrue", file="OptionArrayAttributeFixture.cs"];
m0_13 [label="Entry CommandLine.Parser.ParseArguments(string[], object)", span="140-140", cluster="CommandLine.Parser.ParseArguments(string[], object)", file="OptionArrayAttributeFixture.cs"];
m0_16 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="OptionArrayAttributeFixture.cs"];
m0_12 [label="Entry CommandLine.Parser.Parser()", span="54-54", cluster="CommandLine.Parser.Parser()", file="OptionArrayAttributeFixture.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", span="16-16", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_1 [label="var options = new OptionsWithTwoArrays()", span="19-19", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_2 [label="var parser = new CommandLine.Parser()", span="20-20", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_4 [label="var result = parser.ParseArguments(argumets, options)", span="27-27", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_6 [label="options.Headers.Should().HaveCount(c => c == 4)", span="31-31", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_7 [label="options.Headers.Should().ContainInOrder(new uint[] { 1, 2, 3, 4 })", span="32-32", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_8 [label="options.Content.Should().HaveCount(c => c == 4)", span="33-33", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_9 [label="options.Content.Should().ContainInOrder(new uint[] { 5, 6, 7, 8 })", span="34-34", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_3 [label="var argumets = new[] { ''--source'', @''d:/document.docx'', ''--output'', @''d:/document.xlsx'',\r\n                    ''--headers'', ''1'', ''2'', ''3'', ''4'',              // first array\r\n                    ''--content'', ''5'', ''6'', ''7'', ''8'', ''--verbose''  // second array\r\n                }", span="21-24", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_5 [label="result.Should().BeTrue()", span="30-30", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_10 [label="Exit CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", span="16-16", cluster="CommandLine.Tests.Unit.Attributes.OptionArrayAttributeFixture.Should_correctly_parse_two_consecutive_arrays()", file="OptionArrayAttributeFixture.cs"];
m0_21 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="OptionArrayAttributeFixture.cs"];
m0_18 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="OptionArrayAttributeFixture.cs"];
m0_19 [label="c == 4", span="31-31", cluster="lambda expression", file="OptionArrayAttributeFixture.cs"];
m0_20 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="OptionArrayAttributeFixture.cs"];
m0_22 [label="c == 4", span="33-33", cluster="lambda expression", file="OptionArrayAttributeFixture.cs"];
m0_23 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="OptionArrayAttributeFixture.cs"];
m0_14 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="OptionArrayAttributeFixture.cs"];
m0_17 [label="Entry Unk.ContainInOrder", span="", cluster="Unk.ContainInOrder", file="OptionArrayAttributeFixture.cs"];
m1_0 [label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char)", span="42-42", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", file="OptionListAttribute.cs"];
m1_1 [label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char)", span="42-42", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char)", color=green, community=0, file="OptionListAttribute.cs"];
m1_2 [label="Entry CommandLine.OptionListAttribute.OptionListAttribute(string)", span="51-51", cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)", color=green, community=0, file="OptionListAttribute.cs"];
m1_3 [label="Exit CommandLine.OptionListAttribute.OptionListAttribute(string)", span="51-51", cluster="CommandLine.OptionListAttribute.OptionListAttribute(string)", file="OptionListAttribute.cs"];
m1_7 [label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", span="73-73", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="OptionListAttribute.cs"];
m1_8 [label="Separator = separator", span="76-76", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string, char)", file="OptionListAttribute.cs"];
m1_9 [label="Separator = DefaultSeparator", span="77-77", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="OptionListAttribute.cs", color=green, community=0];
m1_4 [label="Entry CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="61-61", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="OptionListAttribute.cs"];
m1_5 [label="Separator = ':'", span="64-64", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", color=red, community=0, file="OptionListAttribute.cs"];
m1_6 [label="Exit CommandLine.OptionListAttribute.OptionListAttribute(char, string)", span="61-61", cluster="CommandLine.OptionListAttribute.OptionListAttribute(char, string)", file="OptionListAttribute.cs"];
m1_10 [label="CommandLine.OptionListAttribute", span="", file="OptionListAttribute.cs"];
m2_13 [label="Entry Unk.Be", span="", cluster="Unk.Be", file="OptionListAttributeFixture.cs"];
m2_11 [label="Entry CommandLine.Parser.ParseArguments(string[], object)", span="140-140", cluster="CommandLine.Parser.ParseArguments(string[], object)", file="OptionListAttributeFixture.cs"];
m2_14 [label="Entry Unk.HaveCount", span="", cluster="Unk.HaveCount", file="OptionListAttributeFixture.cs"];
m2_10 [label="Entry CommandLine.Parser.Parser()", span="54-54", cluster="CommandLine.Parser.Parser()", file="OptionListAttributeFixture.cs"];
m2_9 [label="Entry CommandLine.Tests.Fakes.OptionsWithImplicitLongName.OptionsWithImplicitLongName()", span="4-4", cluster="CommandLine.Tests.Fakes.OptionsWithImplicitLongName.OptionsWithImplicitLongName()", file="OptionListAttributeFixture.cs"];
m2_16 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="OptionListAttributeFixture.cs"];
m2_17 [label="c == 3", span="30-30", cluster="lambda expression", color=green, community=0, file="OptionListAttributeFixture.cs"];
m2_18 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="OptionListAttributeFixture.cs"];
m2_0 [label="Entry CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", span="16-16", cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", file="OptionListAttributeFixture.cs"];
m2_1 [label="var options = new OptionsWithImplicitLongName()", span="19-19", cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs"];
m2_2 [label="var parser = new CommandLine.Parser()", span="20-20", cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs"];
m2_4 [label="var result = parser.ParseArguments(arguments, options)", span="26-26", cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs"];
m2_6 [label="options.Segments.Should().HaveCount(c => c == 3)", span="30-30", cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs"];
m2_7 [label="options.Segments.Should().ContainInOrder(new[] { ''header.txt'', ''body.txt'', ''footer.txt'' })", span="31-31", cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs"];
m2_3 [label="var arguments = new[] {\r\n                ''--segments'', ''header.txt:body.txt:footer.txt''\r\n            }", span="21-23", cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=1, file="OptionListAttributeFixture.cs"];
m2_5 [label="result.Should().Be(true)", span="29-29", cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", color=green, community=0, file="OptionListAttributeFixture.cs"];
m2_8 [label="Exit CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", span="16-16", cluster="CommandLine.Tests.Unit.Attributes.OptionListAttributeFixture.Should_use_property_name_as_long_name_if_omitted()", file="OptionListAttributeFixture.cs"];
m2_12 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="OptionListAttributeFixture.cs"];
m2_15 [label="Entry Unk.ContainInOrder", span="", cluster="Unk.ContainInOrder", file="OptionListAttributeFixture.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n4  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_11  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_1 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_12  [key=2, style=dotted];
m0_2 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label=parser];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_13  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_16  [key=2, style=dotted];
m0_6 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_14  [key=2, style=dotted];
m0_7 -> m0_17  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_14  [key=2, style=dotted];
m0_8 -> m0_16  [key=2, style=dotted];
m0_8 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_14  [key=2, style=dotted];
m0_9 -> m0_17  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_14  [key=2, style=dotted];
m0_5 -> m0_15  [key=2, style=dotted];
m0_10 -> m0_0  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid];
m0_18 -> m0_19  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_20 -> m0_18  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_3 -> m1_0  [key=0, style=bold, color=blue];
m1_3 -> m1_2  [key=0, style=bold, color=blue];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_7  [key=0, style=bold, color=blue];
m1_9 -> m1_6  [key=0, style=solid, color=green];
m1_4 -> m1_5  [key=0, style=solid, color=red];
m1_4 -> m1_9  [key=0, style=solid, color=green];
m1_5 -> m1_6  [key=0, style=solid, color=red];
m1_6 -> m1_4  [key=0, style=bold, color=blue];
m1_10 -> m1_5  [key=1, style=dashed, color=red, label="CommandLine.OptionListAttribute"];
m1_10 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.OptionListAttribute"];
m1_10 -> m1_1  [key=1, style=dashed, color=green, label="CommandLine.OptionListAttribute"];
m1_10 -> m1_2  [key=1, style=dashed, color=green, label="CommandLine.OptionListAttribute"];
m1_10 -> m1_9  [key=1, style=dashed, color=green, label="CommandLine.OptionListAttribute"];
m2_16 -> m2_17  [key=0, style=solid, color=green];
m2_17 -> m2_18  [key=0, style=solid, color=green];
m2_18 -> m2_16  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_9  [key=2, style=dotted, color=green];
m2_1 -> m2_4  [key=1, style=dashed, color=green, label=options];
m2_1 -> m2_6  [key=1, style=dashed, color=green, label=options];
m2_1 -> m2_7  [key=1, style=dashed, color=green, label=options];
m2_2 -> m2_3  [key=0, style=solid, color=green];
m2_2 -> m2_10  [key=2, style=dotted, color=green];
m2_2 -> m2_4  [key=1, style=dashed, color=green, label=parser];
m2_4 -> m2_5  [key=0, style=solid, color=green];
m2_4 -> m2_11  [key=2, style=dotted, color=green];
m2_6 -> m2_7  [key=0, style=solid, color=green];
m2_6 -> m2_12  [key=2, style=dotted, color=green];
m2_6 -> m2_14  [key=2, style=dotted, color=green];
m2_6 -> m2_16  [key=1, style=dashed, color=green, label="lambda expression"];
m2_7 -> m2_8  [key=0, style=solid, color=green];
m2_7 -> m2_12  [key=2, style=dotted, color=green];
m2_7 -> m2_15  [key=2, style=dotted, color=green];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_5 -> m2_6  [key=0, style=solid, color=green];
m2_5 -> m2_12  [key=2, style=dotted, color=green];
m2_5 -> m2_13  [key=2, style=dotted, color=green];
m2_8 -> m2_0  [key=0, style=bold, color=blue];
}
