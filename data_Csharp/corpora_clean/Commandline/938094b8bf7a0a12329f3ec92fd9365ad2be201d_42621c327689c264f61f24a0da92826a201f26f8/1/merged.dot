digraph  {
n12 [label="CommandLine.Tests.ArgumentParserFixture", span=""];
n0 [label="Entry CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()"];
n1 [label="var ae = new StringArrayEnumerator(new string[] { ''--optarr'', ''one'', ''two'', ''--plain'', ''3'' })", span="42-42", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()"];
n2 [label="ae.MoveNext()", span="44-44", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()"];
n7 [label="Entry CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])", span="1335-1335", cluster="CommandLine.StringArrayEnumerator.StringArrayEnumerator(string[])"];
n3 [label="var items = ArgumentParser.PublicWrapperOfGetNextInputValues(ae)", span="46-46", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()"];
n5 [label="Assert.AreEqual(''two'', ae.Current)", span="49-49", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", color=red, community=0];
n8 [label="Entry CommandLine.StringArrayEnumerator.MoveNext()", span="1390-1390", cluster="CommandLine.StringArrayEnumerator.MoveNext()"];
n4 [label="base.AssertArrayItemEqual(new string[] { ''one'', ''two'' }, items)", span="48-48", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", color=red, community=0];
n9 [label="Entry Unk.PublicWrapperOfGetNextInputValues", span="", cluster="Unk.PublicWrapperOfGetNextInputValues"];
n10 [label="Entry Unk.AssertArrayItemEqual", span="", cluster="Unk.AssertArrayItemEqual"];
n6 [label="Exit CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", span="40-40", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()"];
n11 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual"];
d5 [label="Assert.AreEqual(''two'', ae.Current)", span="48-48", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()", color=green, community=0];
d4 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'' }, items)", span="47-47", cluster="CommandLine.Tests.ArgumentParserFixture.GetNextInputValues()"];
d10 [label="Entry Unk.ElementsShouldBeEqual", span="", cluster="Unk.ElementsShouldBeEqual"];
m0_0 [label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", span="39-39", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs"];
m0_1 [label="expected.Length.Should().Equal(actual.Length)", span="41-41", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", color=green, community=0, file="BaseFixture.cs"];
m0_3 [label="i < expected.Length", span="42-42", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs"];
m0_4 [label="expected[i].Should().Equal(actual[i])", span="44-44", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", color=green, community=0, file="BaseFixture.cs"];
m0_2 [label="int i = 0", span="42-42", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs"];
m0_5 [label="i++", span="42-42", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs"];
m0_6 [label="Exit CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", span="39-39", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="BaseFixture.cs"];
m0_8 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="BaseFixture.cs"];
m0_9 [label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=red, community=0, file="BaseFixture.cs"];
m0_11 [label="int i = 0", span="51-51", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs"];
m0_12 [label="i < expected.Length", span="51-51", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=red, community=0, file="BaseFixture.cs"];
m0_10 [label="expected.Length.Should().Equal(actual.Count)", span="50-50", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs", color=green, community=0];
m0_13 [label="expected[i].Should().Equal(actual[i])", span="53-53", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs", color=green, community=0];
m0_14 [label="i++", span="51-51", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs"];
m0_7 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="BaseFixture.cs"];
m0_15 [label="Exit CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="BaseFixture.cs"];
m1_13 [label="Assert.IsFalse(result)", span="65-65", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="CommandLineParserBaseFixture.cs", color=red, community=0];
m1_14 [label="Exit CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", color=green, community=0, file="CommandLineParserBaseFixture.cs"];
m1_15 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="CommandLineParserBaseFixture.cs"];
m1_16 [label="Entry Unk.False", span="", cluster="Unk.False", file="CommandLineParserBaseFixture.cs"];
m1_4 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", span="53-53", cluster="CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", file="CommandLineParserBaseFixture.cs"];
m1_5 [label="return new CommandLineParser();", span="55-55", cluster="CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", file="CommandLineParserBaseFixture.cs", color=red, community=0];
m1_6 [label="Exit CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", span="53-53", cluster="CommandLine.Tests.CommandLineParserBaseFixture.CreateCommandLineParser()", file="CommandLineParserBaseFixture.cs"];
m1_0 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", span="42-42", cluster="CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", file="CommandLineParserBaseFixture.cs"];
m1_1 [label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''en-US'')", span="48-48", cluster="CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", file="CommandLineParserBaseFixture.cs"];
m1_2 [label="Exit CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", span="42-42", cluster="CommandLine.Tests.CommandLineParserBaseFixture.CommandLineParserBaseFixture()", file="CommandLineParserBaseFixture.cs"];
m1_7 [label="Entry CommandLine.CommandLineParser.CommandLineParser()", span="1681-1681", cluster="CommandLine.CommandLineParser.CommandLineParser()", file="CommandLineParserBaseFixture.cs"];
m1_12 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="CommandLineParserBaseFixture.cs"];
m1_11 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="CommandLineParserBaseFixture.cs"];
m1_3 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="CommandLineParserBaseFixture.cs"];
m1_8 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60", cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="CommandLineParserBaseFixture.cs"];
m1_9 [label="Result.Should().Be.True()", span="62-62", cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", color=red, community=0, file="CommandLineParserBaseFixture.cs"];
m1_10 [label="Exit CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60", cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="CommandLineParserBaseFixture.cs"];
m1_17 [label="CommandLine.Tests.CommandLineParserBaseFixture", span="", file="CommandLineParserBaseFixture.cs"];
m2_10 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", span="63-63", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs"];
m2_11 [label="var options = new SimpleOptions()", span="65-65", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs", color=green, community=0];
m2_12 [label="Result = base.Parser.ParseArguments(new string[] { ''-s'', ''something'' }, options)", span="66-66", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_14 [label="Assert.AreEqual(''something'', options.StringValue)", span="69-69", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_15 [label="Console.WriteLine(options)", span="70-70", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs"];
m2_13 [label="ResultShouldBeTrue()", span="68-68", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_16 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", span="63-63", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringOption()", file="CommandLineParserFixture.cs"];
m2_176 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", span="302-302", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_177 [label="var options = new NumberSetOptions()", span="304-304", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_178 [label="Result = base.Parser.ParseArguments(new string[] { ''--int'' }, options)", span="305-305", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_179 [label="ResultShouldBeFalse()", span="307-307", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_180 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", span="302-302", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAnIntegerTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_260 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", span="445-445", cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_261 [label="var options = new NumberSetOptions()", span="447-447", cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_262 [label="Result = base.Parser.ParseArguments(new string[] { ''-b'', short.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="448-448", cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_263 [label="ResultShouldBeFalse()", span="450-450", cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_264 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", span="445-445", cluster="CommandLine.Tests.CommandLineParserFixture.PassingShortValueToByteOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_242 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", span="413-413", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs"];
m2_243 [label="var options = new NumberSetOptions()", span="415-415", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs"];
m2_244 [label="Result = base.Parser.ParseArguments(new string[] { ''-d-4096.1024'' }, options)", span="416-416", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_246 [label="Assert.AreEqual(-4096.1024, options.DoubleValue)", span="419-419", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_245 [label="ResultShouldBeTrue()", span="418-418", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_247 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", span="413-413", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle2()", file="CommandLineParserFixture.cs"];
m2_284 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", span="481-481", cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_285 [label="var options = new NumberSetOptions()", span="483-483", cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_286 [label="Result = base.Parser.ParseArguments(new string[] { ''-f'', double.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="484-484", cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_287 [label="ResultShouldBeFalse()", span="486-486", cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_288 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", span="481-481", cluster="CommandLine.Tests.CommandLineParserFixture.PassingDoubleValueToFloatOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_0 [label="Entry CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", span="44-44", cluster="CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", file="CommandLineParserFixture.cs"];
m2_1 [label="Exit CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", span="44-44", cluster="CommandLine.Tests.CommandLineParserFixture.CommandLineParserFixture()", file="CommandLineParserFixture.cs"];
m2_123 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithBadDefaults.SimpleOptionsWithBadDefaults()", span="33-33", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithBadDefaults.SimpleOptionsWithBadDefaults()", file="CommandLineParserFixture.cs"];
m2_80 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", span="38-38", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithEnum.SimpleOptionsWithEnum()", file="CommandLineParserFixture.cs"];
m2_118 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithDefaultArray.SimpleOptionsWithDefaultArray()", span="35-35", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithDefaultArray.SimpleOptionsWithDefaultArray()", file="CommandLineParserFixture.cs"];
m2_254 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", span="433-433", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs"];
m2_255 [label="var options = new NumberSetOptions()", span="435-435", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs"];
m2_256 [label="Result = base.Parser.ParseArguments(new string[] { ''--double=-4096.1024'' }, options)", span="436-436", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_258 [label="Assert.AreEqual(-4096.1024, options.DoubleValue)", span="439-439", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_257 [label="ResultShouldBeTrue()", span="438-438", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_259 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", span="433-433", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle4()", file="CommandLineParserFixture.cs"];
m2_90 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="CommandLineParserFixture.cs"];
m2_283 [label="Entry float.ToString(System.IFormatProvider)", span="0-0", cluster="float.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs"];
m2_248 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", span="423-423", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs"];
m2_249 [label="var options = new NumberSetOptions()", span="425-425", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs"];
m2_250 [label="Result = base.Parser.ParseArguments(new string[] { ''--double'', ''-4096.1024'' }, options)", span="426-426", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_252 [label="Assert.AreEqual(-4096.1024, options.DoubleValue)", span="429-429", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_251 [label="ResultShouldBeTrue()", span="428-428", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_253 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", span="423-423", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue_InputStyle3()", file="CommandLineParserFixture.cs"];
m2_91 [label="Entry CommandLine.Tests.Mocks.NumberSetOptions.NumberSetOptions()", span="35-35", cluster="CommandLine.Tests.Mocks.NumberSetOptions.NumberSetOptions()", file="CommandLineParserFixture.cs"];
m2_7 [label="Entry CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", span="57-57", cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", file="CommandLineParserFixture.cs"];
m2_8 [label="base.Parser.ParseArguments(new string[] { }, null)", span="59-59", cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", file="CommandLineParserFixture.cs"];
m2_9 [label="Exit CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", span="57-57", cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfOptionsInstanceIsNull()", file="CommandLineParserFixture.cs"];
m2_72 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", span="145-145", cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs"];
m2_73 [label="var options = new SimpleOptionsWithEnum()", span="147-147", cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs"];
m2_74 [label="Result = base.Parser.ParseArguments(new string[] { ''-s'', ''data.bin'', ''-a'', ''ReadWrite'' }, options)", span="149-149", cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_76 [label="Assert.AreEqual(''data.bin'', options.StringValue)", span="152-152", cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_77 [label="Assert.AreEqual(FileAccess.ReadWrite, options.FileAccess)", span="153-153", cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_78 [label="Console.WriteLine(options)", span="154-154", cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs"];
m2_75 [label="ResultShouldBeTrue()", span="151-151", cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_79 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", span="145-145", cluster="CommandLine.Tests.CommandLineParserFixture.ParseEnumOptions()", file="CommandLineParserFixture.cs"];
m2_17 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", span="58-58", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", file="CommandLineParserFixture.cs"];
m2_129 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="CommandLineParserFixture.cs"];
m2_160 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", span="1553-1553", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", file="CommandLineParserFixture.cs"];
m2_224 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", span="383-383", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs"];
m2_225 [label="var options = new NumberSetOptions()", span="385-385", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs"];
m2_226 [label="Result = base.Parser.ParseArguments(new string[] { ''--int'', ''-4096'' }, options)", span="386-386", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_228 [label="Assert.AreEqual(-4096, options.IntegerValue)", span="389-389", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_227 [label="ResultShouldBeTrue()", span="388-388", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_229 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", span="383-383", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle3()", file="CommandLineParserFixture.cs"];
m2_161 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", span="275-275", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_162 [label="var options = new SimpleOptions()", span="277-277", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_163 [label="Result = base.Parser.ParseArguments(new string[] { ''--string'' }, options)", span="278-278", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_164 [label="ResultShouldBeFalse()", span="280-280", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_165 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", span="275-275", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAStringTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_29 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", span="88-88", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs"];
m2_30 [label="var options = new BooleanSetOptions()", span="90-90", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs", color=green, community=0];
m2_31 [label="Result = base.Parser.ParseArguments(new string[] { ''-ca'', ''-d65'' }, options)", span="91-91", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_33 [label="Assert.IsTrue(options.BooleanThree)", span="94-94", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_34 [label="Assert.IsTrue(options.BooleanOne)", span="95-95", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_35 [label="Assert.IsFalse(options.BooleanTwo)", span="96-96", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_36 [label="Assert.AreEqual(65, options.NonBooleanValue)", span="97-97", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_37 [label="Console.WriteLine(options)", span="98-98", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs"];
m2_32 [label="ResultShouldBeTrue()", span="93-93", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_38 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", span="88-88", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortAdjacentOptions()", file="CommandLineParserFixture.cs"];
m2_67 [label="Entry CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", span="135-135", cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs"];
m2_68 [label="var options = new SimpleOptions()", span="137-137", cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs"];
m2_69 [label="Assert.IsFalse(base.Parser.ParseArguments(new string[] { ''-i=10'' }, options))", span="139-139", cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_70 [label="Console.WriteLine(options)", span="140-140", cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs"];
m2_71 [label="Exit CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", span="135-135", cluster="CommandLine.Tests.CommandLineParserFixture.ShortOptionRefusesEqualToken()", file="CommandLineParserFixture.cs"];
m2_278 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", span="472-472", cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_279 [label="var options = new NumberSetOptions()", span="474-474", cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_280 [label="Result = base.Parser.ParseArguments(new string[] { ''-l'', float.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="475-475", cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_281 [label="ResultShouldBeFalse()", span="477-477", cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_282 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", span="472-472", cluster="CommandLine.Tests.CommandLineParserFixture.PassingFloatValueToLongOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_52 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", span="116-116", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs"];
m2_53 [label="var options = new SimpleOptionsWithOptionList()", span="118-118", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", color=green, community=0];
m2_54 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                                ''-k'', ''string1:stringTwo:stringIII'', ''-s'', ''test-file.txt'' }, options)", span="119-120", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_56 [label="Assert.AreEqual(''string1'', options.SearchKeywords[0])", span="123-123", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_57 [label="Console.WriteLine(options.SearchKeywords[0])", span="124-124", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", color=green, community=0];
m2_58 [label="Assert.AreEqual(''stringTwo'', options.SearchKeywords[1])", span="125-125", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_59 [label="Console.WriteLine(options.SearchKeywords[1])", span="126-126", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", color=green, community=0];
m2_60 [label="Assert.AreEqual(''stringIII'', options.SearchKeywords[2])", span="127-127", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_61 [label="Console.WriteLine(options.SearchKeywords[2])", span="128-128", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs", color=green, community=0];
m2_62 [label="Assert.AreEqual(''test-file.txt'', options.StringValue)", span="129-129", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_63 [label="Console.WriteLine(options.StringValue)", span="130-130", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs"];
m2_55 [label="ResultShouldBeTrue()", span="122-122", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_64 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", span="116-116", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionList()", file="CommandLineParserFixture.cs"];
m2_191 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", span="329-329", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_192 [label="var options = new NumberSetOptions()", span="331-331", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_193 [label="Result = base.Parser.ParseArguments(new string[] { ''--double'' }, options)", span="332-332", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_194 [label="ResultShouldBeFalse()", span="334-334", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_195 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", span="329-329", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToADoubleTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_6 [label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471", cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="CommandLineParserFixture.cs"];
m2_151 [label="Entry CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", span="261-261", cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs"];
m2_152 [label="ICommandLineParser local = new CommandLineParser(new CommandLineParserSettings(false))", span="263-263", cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs"];
m2_153 [label="var options = new MixedCaseOptions()", span="264-264", cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs"];
m2_154 [label="Result = local.ParseArguments(new string[] { ''-A'', ''alfa'', ''--Beta-Option'', ''beta'' }, options)", span="265-265", cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_156 [label="Assert.AreEqual(''alfa'', options.AlfaValue)", span="268-268", cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_157 [label="Assert.AreEqual(''beta'', options.BetaValue)", span="269-269", cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_155 [label="ResultShouldBeTrue()", span="267-267", cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_158 [label="Exit CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", span="261-261", cluster="CommandLine.Tests.CommandLineParserFixture.DisablingCaseSensitive()", file="CommandLineParserFixture.cs"];
m2_218 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", span="374-374", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs"];
m2_219 [label="var options = new NumberSetOptions()", span="376-376", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs"];
m2_220 [label="Result = base.Parser.ParseArguments(new string[] { ''-i-4096'' }, options)", span="377-377", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_222 [label="Assert.AreEqual(-4096, options.IntegerValue)", span="380-380", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_221 [label="ResultShouldBeTrue()", span="379-379", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_223 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", span="374-374", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle2()", file="CommandLineParserFixture.cs"];
m2_19 [label="Entry System.Console.WriteLine(object)", span="0-0", cluster="System.Console.WriteLine(object)", file="CommandLineParserFixture.cs"];
m2_39 [label="Entry CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", span="35-35", cluster="CommandLine.Tests.Mocks.BooleanSetOptions.BooleanSetOptions()", file="CommandLineParserFixture.cs"];
m2_65 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithOptionList.SimpleOptionsWithOptionList()", span="35-35", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithOptionList.SimpleOptionsWithOptionList()", file="CommandLineParserFixture.cs"];
m2_135 [label="Entry CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", span="239-239", cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs"];
m2_136 [label="ICommandLineParser local = new CommandLineParser()", span="241-241", cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs"];
m2_137 [label="var options = new MixedCaseOptions()", span="242-242", cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs"];
m2_138 [label="Result = local.ParseArguments(new string[] { ''-a'', ''alfa'', ''--beta-OPTION'', ''beta'' }, options)", span="243-243", cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_140 [label="Assert.AreEqual(''alfa'', options.AlfaValue)", span="246-246", cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_141 [label="Assert.AreEqual(''beta'', options.BetaValue)", span="247-247", cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_139 [label="ResultShouldBeTrue()", span="245-245", cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_142 [label="Exit CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", span="239-239", cluster="CommandLine.Tests.CommandLineParserFixture.DefaultParsingIsCaseSensitive()", file="CommandLineParserFixture.cs"];
m2_81 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", span="158-158", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs"];
m2_82 [label="var actualCulture = Thread.CurrentThread.CurrentCulture", span="160-160", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs"];
m2_83 [label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''it-IT'')", span="161-161", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs"];
m2_88 [label="Thread.CurrentThread.CurrentCulture = actualCulture", span="168-168", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs"];
m2_84 [label="var options = new NumberSetOptions()", span="162-162", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs"];
m2_85 [label="Result = base.Parser.ParseArguments(new string[] { ''-d'', ''10,986'' }, options)", span="163-163", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_87 [label="Assert.AreEqual(10.986, options.DoubleValue)", span="166-166", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_86 [label="ResultShouldBeTrue()", span="165-165", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_89 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", span="158-158", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNumber()", file="CommandLineParserFixture.cs"];
m2_130 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", span="228-228", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs"];
m2_131 [label="var options = new SimpleOptions()", span="230-230", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs"];
m2_132 [label="Result = base.Parser.ParseArguments(new string[] { ''--extend'' }, options)", span="231-231", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_133 [label="ResultShouldBeFalse()", span="233-233", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_134 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", span="228-228", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentLongOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs"];
m2_20 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", span="74-74", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs"];
m2_21 [label="var options = new SimpleOptions()", span="76-76", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs", color=green, community=0];
m2_22 [label="Result = base.Parser.ParseArguments(\r\n                    new string[] { ''-s'', ''another string'', ''-i100'', ''--switch'' }, options)", span="77-78", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_24 [label="Assert.AreEqual(''another string'', options.StringValue)", span="81-81", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_25 [label="Assert.AreEqual(100, options.IntegerValue)", span="82-82", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_26 [label="Assert.AreEqual(true, options.BooleanValue)", span="83-83", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_27 [label="Console.WriteLine(options)", span="84-84", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs"];
m2_23 [label="ResultShouldBeTrue()", span="80-80", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_28 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", span="74-74", cluster="CommandLine.Tests.CommandLineParserFixture.ParseStringIntegerBoolOptions()", file="CommandLineParserFixture.cs"];
m2_202 [label="Entry CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", span="350-350", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs"];
m2_203 [label="var options = new SimpleOptionsWithValueList()", span="352-352", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs"];
m2_204 [label="Result = base.Parser.ParseArguments(new string[] { ''-sparser.xml'', ''-'', ''--switch'' }, options)", span="353-353", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_206 [label="Assert.AreEqual(''parser.xml'', options.StringValue)", span="356-356", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_207 [label="Assert.AreEqual(true, options.BooleanValue)", span="357-357", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_208 [label="Assert.AreEqual(1, options.Items.Count)", span="358-358", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_209 [label="Assert.AreEqual(''-'', options.Items[0])", span="359-359", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_205 [label="ResultShouldBeTrue()", span="355-355", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_210 [label="Exit CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", span="350-350", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsNonOptionValue()", file="CommandLineParserFixture.cs"];
m2_143 [label="Entry CommandLine.CommandLineParser.CommandLineParser()", span="1681-1681", cluster="CommandLine.CommandLineParser.CommandLineParser()", file="CommandLineParserFixture.cs"];
m2_41 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="CommandLineParserFixture.cs"];
m2_145 [label="Entry CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", span="251-251", cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs"];
m2_146 [label="ICommandLineParser local = new CommandLineParser()", span="253-253", cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs"];
m2_147 [label="var options = new MixedCaseOptions()", span="254-254", cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs"];
m2_148 [label="Result = local.ParseArguments(new string[] { ''-A'', ''alfa'', ''--Beta-Option'', ''beta'' }, options)", span="255-255", cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_149 [label="ResultShouldBeFalse()", span="257-257", cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_150 [label="Exit CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", span="251-251", cluster="CommandLine.Tests.CommandLineParserFixture.UsingWrongCaseWithDefaultFails()", file="CommandLineParserFixture.cs"];
m2_159 [label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692", cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="CommandLineParserFixture.cs"];
m2_2 [label="Entry CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", span="50-50", cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", file="CommandLineParserFixture.cs"];
m2_3 [label="base.Parser.ParseArguments(null, new SimpleOptions())", span="52-52", cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", file="CommandLineParserFixture.cs"];
m2_4 [label="Exit CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", span="50-50", cluster="CommandLine.Tests.CommandLineParserFixture.WillThrowExceptionIfArgumentsArrayIsNull()", file="CommandLineParserFixture.cs"];
m2_119 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", span="211-211", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs"];
m2_120 [label="var options = new SimpleOptionsWithBadDefaults()", span="213-213", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs"];
m2_121 [label="base.Parser.ParseArguments(new string[] {}, options)", span="214-214", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs"];
m2_122 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", span="211-211", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithBadDefaults()", file="CommandLineParserFixture.cs"];
m2_211 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", span="35-35", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", file="CommandLineParserFixture.cs"];
m2_109 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithDefaults.SimpleOptionsWithDefaults()", span="33-33", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithDefaults.SimpleOptionsWithDefaults()", file="CommandLineParserFixture.cs"];
m2_196 [label="Entry CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", span="340-340", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs"];
m2_197 [label="var options = new SimpleOptions()", span="342-342", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs"];
m2_198 [label="Result = base.Parser.ParseArguments(new string[] { ''--string'', ''-'' }, options)", span="343-343", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_200 [label="Assert.AreEqual(''-'', options.StringValue)", span="346-346", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_199 [label="ResultShouldBeTrue()", span="345-345", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_201 [label="Exit CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", span="340-340", cluster="CommandLine.Tests.CommandLineParserFixture.AllowSingleDashAsOptionInputValue()", file="CommandLineParserFixture.cs"];
m2_5 [label="Entry CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", span="33-33", cluster="CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", file="CommandLineParserFixture.cs"];
m2_212 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", span="365-365", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs"];
m2_213 [label="var options = new SimpleOptions()", span="367-367", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs"];
m2_214 [label="Result = base.Parser.ParseArguments(new string[] { ''-i'', ''-4096'' }, options)", span="368-368", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_216 [label="Assert.AreEqual(-4096, options.IntegerValue)", span="371-371", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_215 [label="ResultShouldBeTrue()", span="370-370", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_217 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", span="365-365", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue()", file="CommandLineParserFixture.cs"];
m2_266 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", span="454-454", cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_267 [label="var options = new NumberSetOptions()", span="456-456", cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_268 [label="Result = base.Parser.ParseArguments(new string[] { ''-s'', int.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="457-457", cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_269 [label="ResultShouldBeFalse()", span="459-459", cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_270 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", span="454-454", cluster="CommandLine.Tests.CommandLineParserFixture.PassingIntegerValueToShortOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_230 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", span="392-392", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs"];
m2_231 [label="var options = new NumberSetOptions()", span="394-394", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs"];
m2_232 [label="Result = base.Parser.ParseArguments(new string[] { ''--int=-4096'' }, options)", span="395-395", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_234 [label="Assert.AreEqual(-4096, options.IntegerValue)", span="398-398", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_233 [label="ResultShouldBeTrue()", span="397-397", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_235 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", span="392-392", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeIntegerValue_InputStyle4()", file="CommandLineParserFixture.cs"];
m2_66 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="CommandLineParserFixture.cs"];
m2_42 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", span="102-102", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs"];
m2_43 [label="var options = new BooleanSetOptions()", span="104-104", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs", color=green, community=0];
m2_44 [label="Result = base.Parser.ParseArguments(new string[] { ''-b'', ''--double=9'' }, options)", span="105-105", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_46 [label="Assert.IsTrue(options.BooleanTwo)", span="108-108", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_47 [label="Assert.IsFalse(options.BooleanOne)", span="109-109", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_48 [label="Assert.IsFalse(options.BooleanThree)", span="110-110", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_49 [label="Assert.AreEqual(9, options.NonBooleanValue)", span="111-111", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=red, community=0, file="CommandLineParserFixture.cs"];
m2_50 [label="Console.WriteLine(options)", span="112-112", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs"];
m2_45 [label="ResultShouldBeTrue()", span="107-107", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_51 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", span="102-102", cluster="CommandLine.Tests.CommandLineParserFixture.ParseShortLongOptions()", file="CommandLineParserFixture.cs"];
m2_166 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", span="284-284", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_167 [label="var options = new NumberSetOptions()", span="286-286", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_168 [label="Result = base.Parser.ParseArguments(new string[] { ''--byte'' }, options)", span="287-287", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_169 [label="ResultShouldBeFalse()", span="289-289", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_170 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", span="284-284", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAByteTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_181 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", span="311-311", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_182 [label="var options = new NumberSetOptions()", span="313-313", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_183 [label="Result = base.Parser.ParseArguments(new string[] { ''--long'' }, options)", span="314-314", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_184 [label="ResultShouldBeFalse()", span="316-316", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_185 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", span="311-311", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToALongTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_144 [label="Entry CommandLine.Tests.Mocks.MixedCaseOptions.MixedCaseOptions()", span="33-33", cluster="CommandLine.Tests.Mocks.MixedCaseOptions.MixedCaseOptions()", file="CommandLineParserFixture.cs"];
m2_236 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", span="403-403", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs"];
m2_237 [label="var options = new NumberSetOptions()", span="405-405", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs"];
m2_238 [label="Result = base.Parser.ParseArguments(new string[] { ''-d'', ''-4096.1024'' }, options)", span="406-406", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_240 [label="Assert.AreEqual(-4096.1024, options.DoubleValue)", span="409-409", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_239 [label="ResultShouldBeTrue()", span="408-408", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_241 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", span="403-403", cluster="CommandLine.Tests.CommandLineParserFixture.ParseNegativeFloatingPointValue()", file="CommandLineParserFixture.cs"];
m2_289 [label="Entry double.ToString(System.IFormatProvider)", span="0-0", cluster="double.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs"];
m2_110 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", span="198-198", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs"];
m2_111 [label="var options = new SimpleOptionsWithDefaultArray()", span="200-200", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs"];
m2_112 [label="Result = base.Parser.ParseArguments(new string[] { ''-y'', ''4'', ''5'', ''6'' }, options)", span="201-201", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_114 [label="Assert.AreEqual(new string[] { ''a'', ''b'', ''c'' }, options.StringArrayValue)", span="204-204", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_115 [label="Assert.AreEqual(new int[] { 4, 5, 6 }, options.IntegerArrayValue)", span="205-205", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_116 [label="Assert.AreEqual(new double[] { 1.1, 2.2, 3.3 }, options.DoubleArrayValue)", span="206-206", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_113 [label="ResultShouldBeTrue()", span="203-203", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_117 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", span="198-198", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaultArray()", file="CommandLineParserFixture.cs"];
m2_272 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", span="463-463", cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_273 [label="var options = new NumberSetOptions()", span="465-465", cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_274 [label="Result = base.Parser.ParseArguments(new string[] { ''-i'', long.MaxValue.ToString(CultureInfo.InvariantCulture) }, options)", span="466-466", cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_275 [label="ResultShouldBeFalse()", span="468-468", cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_276 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", span="463-463", cluster="CommandLine.Tests.CommandLineParserFixture.PassingLongValueToIntegerOptionMustFailGracefully()", file="CommandLineParserFixture.cs"];
m2_265 [label="Entry short.ToString(System.IFormatProvider)", span="0-0", cluster="short.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs"];
m2_92 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", span="172-172", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs"];
m2_93 [label="var actualCulture = Thread.CurrentThread.CurrentCulture", span="174-174", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs"];
m2_94 [label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''it-IT'')", span="175-175", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs"];
m2_99 [label="Thread.CurrentThread.CurrentCulture = actualCulture", span="182-182", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs"];
m2_95 [label="var options = new NumberSetOptions()", span="176-176", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs"];
m2_96 [label="Result = base.Parser.ParseArguments(new string[] { ''--n-double'', ''12,32982'' }, options)", span="177-177", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_98 [label="Assert.AreEqual(12.32982, options.NullableDoubleValue)", span="180-180", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_97 [label="ResultShouldBeTrue()", span="179-179", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_100 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", span="172-172", cluster="CommandLine.Tests.CommandLineParserFixture.ParseCultureSpecificNullableNumber()", file="CommandLineParserFixture.cs"];
m2_271 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs"];
m2_186 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", span="320-320", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_187 [label="var options = new NumberSetOptions()", span="322-322", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_188 [label="Result = base.Parser.ParseArguments(new string[] { ''--float'' }, options)", span="323-323", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_189 [label="ResultShouldBeFalse()", span="325-325", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_190 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", span="320-320", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAFloatTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_101 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", span="186-186", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs"];
m2_102 [label="var options = new SimpleOptionsWithDefaults()", span="188-188", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs"];
m2_103 [label="Result = base.Parser.ParseArguments(new string[] {}, options)", span="189-189", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_105 [label="Assert.AreEqual(''str'', options.StringValue)", span="192-192", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_106 [label="Assert.AreEqual(9, options.IntegerValue)", span="193-193", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_107 [label="Assert.AreEqual(true, options.BooleanValue)", span="194-194", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_104 [label="ResultShouldBeTrue()", span="191-191", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_108 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", span="186-186", cluster="CommandLine.Tests.CommandLineParserFixture.ParseOptionsWithDefaults()", file="CommandLineParserFixture.cs"];
m2_277 [label="Entry long.ToString(System.IFormatProvider)", span="0-0", cluster="long.ToString(System.IFormatProvider)", file="CommandLineParserFixture.cs"];
m2_124 [label="Entry CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", span="219-219", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs"];
m2_125 [label="var options = new SimpleOptions()", span="221-221", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs"];
m2_126 [label="Result = base.Parser.ParseArguments(new string[] { ''-x'' }, options)", span="222-222", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_127 [label="ResultShouldBeFalse()", span="224-224", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_128 [label="Exit CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", span="219-219", cluster="CommandLine.Tests.CommandLineParserFixture.ParsingNonExistentShortOptionFailsWithoutThrowingAnException()", file="CommandLineParserFixture.cs"];
m2_171 [label="Entry CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", span="293-293", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_172 [label="var options = new NumberSetOptions()", span="295-295", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_173 [label="Result = base.Parser.ParseArguments(new string[] { ''--short'' }, options)", span="296-296", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_174 [label="ResultShouldBeFalse()", span="298-298", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", color=green, community=0, file="CommandLineParserFixture.cs"];
m2_175 [label="Exit CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", span="293-293", cluster="CommandLine.Tests.CommandLineParserFixture.PassingNoValueToAShortTypeLongOptionFails()", file="CommandLineParserFixture.cs"];
m2_40 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="CommandLineParserFixture.cs"];
m2_290 [label="CommandLine.Tests.CommandLineParserFixture", span="", file="CommandLineParserFixture.cs"];
m3_12 [label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471", cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="CommandLineParserSettingsFixture.cs"];
m3_0 [label="Entry CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", span="40-40", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs"];
m3_1 [label="var writer = new StringWriter()", span="42-42", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs"];
m3_2 [label="ICommandLineParser parser = new CommandLineParser(new CommandLineParserSettings(writer))", span="43-43", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs"];
m3_6 [label="Assert.AreEqual(''MockOptions::GetUsage()'', writer.ToString())", span="49-49", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", color=green, community=0, file="CommandLineParserSettingsFixture.cs"];
m3_3 [label="var options = new SimpleOptionsWithHelpOption()", span="44-44", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs"];
m3_4 [label="bool success = parser.ParseArguments(new string[] {''--help''}, options)", span="46-46", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs"];
m3_5 [label="Assert.AreEqual(false, success)", span="48-48", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", color=red, community=0, file="CommandLineParserSettingsFixture.cs"];
m3_7 [label="Exit CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", span="40-40", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingConstructor()", file="CommandLineParserSettingsFixture.cs"];
m3_11 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithHelpOption.SimpleOptionsWithHelpOption()", span="33-33", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithHelpOption.SimpleOptionsWithHelpOption()", file="CommandLineParserSettingsFixture.cs"];
m3_14 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="CommandLineParserSettingsFixture.cs"];
m3_8 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="CommandLineParserSettingsFixture.cs"];
m3_34 [label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1486-1486", cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", file="CommandLineParserSettingsFixture.cs"];
m3_9 [label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692", cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="CommandLineParserSettingsFixture.cs"];
m3_25 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1543-1543", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", file="CommandLineParserSettingsFixture.cs"];
m3_26 [label="Entry CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", span="68-68", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs"];
m3_27 [label="var writer = new StringWriter()", span="70-70", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs"];
m3_28 [label="ICommandLineParser parser = new CommandLineParser(new CommandLineParserSettings())", span="71-71", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs"];
m3_30 [label="bool success = parser.ParseArguments(new string[] { ''--help'' }, options, writer)", span="74-74", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs"];
m3_32 [label="Assert.AreEqual(''MockOptions::GetUsage()'', writer.ToString())", span="77-77", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", color=green, community=0, file="CommandLineParserSettingsFixture.cs"];
m3_29 [label="var options = new SimpleOptionsWithHelpOption()", span="72-72", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs"];
m3_31 [label="Assert.AreEqual(false, success)", span="76-76", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", color=red, community=0, file="CommandLineParserSettingsFixture.cs"];
m3_33 [label="Exit CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", span="68-68", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingArgument()", file="CommandLineParserSettingsFixture.cs"];
m3_10 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", span="1564-1564", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", file="CommandLineParserSettingsFixture.cs"];
m3_15 [label="Entry CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", span="53-53", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs"];
m3_16 [label="var writer = new StringWriter()", span="55-55", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs"];
m3_17 [label="var settings = new CommandLineParserSettings()", span="56-56", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs"];
m3_18 [label="settings.HelpWriter = writer", span="57-57", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs"];
m3_23 [label="Assert.AreEqual(''MockOptions::GetUsage()'', writer.ToString())", span="64-64", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", color=green, community=0, file="CommandLineParserSettingsFixture.cs"];
m3_19 [label="ICommandLineParser parser = new CommandLineParser(settings)", span="58-58", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs"];
m3_20 [label="var options = new SimpleOptionsWithHelpOption()", span="59-59", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs"];
m3_21 [label="bool success = parser.ParseArguments(new string[] { ''--help'' }, options)", span="61-61", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs"];
m3_22 [label="Assert.AreEqual(false, success)", span="63-63", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", color=red, community=0, file="CommandLineParserSettingsFixture.cs"];
m3_24 [label="Exit CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", span="53-53", cluster="CommandLine.Tests.CommandLineParserSettingsFixture.SettingHelpWriterUsingProperty()", file="CommandLineParserSettingsFixture.cs"];
m4_13 [label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(int)", file="CopyrightInfoFixture.cs"];
m4_2 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", span="53-53", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_3 [label="var yearsPart = new StringBuilder(years.Length * 4)", span="55-55", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_4 [label=years, span="57-57", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_7 [label="yearsPart.Append(string.Concat(''''', y))", span="61-61", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_8 [label="yearsPart.Append(y)", span="63-63", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_9 [label="yearsPart.Append('', '')", span="64-64", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_10 [label="yearsPart.Remove(yearsPart.Length - 2, 2)", span="66-66", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_11 [label="return yearsPart.ToString();", span="68-68", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_5 [label="string y = year.ToString(CultureInfo.InvariantCulture)", span="59-59", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_6 [label="y.Length == 2", span="60-60", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_12 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", span="53-53", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.FormatYears(int[])", file="CopyrightInfoFixture.cs"];
m4_43 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", span="114-114", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", file="CopyrightInfoFixture.cs"];
m4_44 [label="new CopyrightInfo(''Authors, Inc.'')", span="116-116", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", file="CopyrightInfoFixture.cs"];
m4_45 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", span="114-114", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfNoYearsAreSupplied()", file="CopyrightInfoFixture.cs"];
m4_26 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", span="82-82", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs"];
m4_27 [label="var copyright = new CopyrightInfo(true, ''X & Y Group'', 2006, 2007)", span="84-84", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs"];
m4_28 [label="Assert.AreEqual(''Copyright (C) 2006, 2007 X & Y Group'', copyright.ToString())", span="86-86", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", color=red, community=0, file="CopyrightInfoFixture.cs"];
m4_29 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", span="82-82", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.UpperSymbolTwoConsecutiveYears()", file="CopyrightInfoFixture.cs"];
m4_0 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", span="43-43", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", file="CopyrightInfoFixture.cs"];
m4_1 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", span="43-43", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.CopyleftInfo.CopyleftInfo(bool, string, params int[])", file="CopyrightInfoFixture.cs"];
m4_15 [label="Entry string.Concat(string, string)", span="0-0", cluster="string.Concat(string, string)", file="CopyrightInfoFixture.cs"];
m4_46 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", span="120-120", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs"];
m4_47 [label="var info = new CopyleftInfo(true, ''Free Company, Inc.'', 96, 97, 98, 2005)", span="122-122", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs"];
m4_48 [label="Assert.AreEqual(''Copyleft (C) '96, '97, '98, 2005 Free Company, Inc.'', info.ToString())", span="124-124", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", color=red, community=0, file="CopyrightInfoFixture.cs"];
m4_49 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", span="120-120", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DerivedClass()", file="CopyrightInfoFixture.cs"];
m4_50 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", span="129-129", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs"];
m4_51 [label="var info = new CopyrightInfo (''ManOnTheMoon, Inc.'', 2019)", span="131-131", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs"];
m4_52 [label="int i=0", span="133-133", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs"];
m4_54 [label="Assert.AreEqual (37, info.ToString ().Length)", span="135-135", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", color=red, community=0, file="CopyrightInfoFixture.cs"];
m4_53 [label="i<10", span="133-133", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs"];
m4_55 [label="i++", span="133-133", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs"];
m4_56 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", span="129-129", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.ShouldNotGrowWhenConvertedToString()", file="CopyrightInfoFixture.cs"];
m4_34 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="179-179", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", file="CopyrightInfoFixture.cs"];
m4_30 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", span="90-90", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs"];
m4_31 [label="var copyright = new CopyrightInfo(''W & Z, Inc.'', 2005, 2007)", span="92-92", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs"];
m4_32 [label="Assert.AreEqual(''Copyright (C) 2005 - 2007 W & Z, Inc.'', copyright.ToString())", span="94-94", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", color=red, community=0, file="CopyrightInfoFixture.cs"];
m4_33 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", span="90-90", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolTwoNonConsecutiveYears()", file="CopyrightInfoFixture.cs"];
m4_17 [label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0", cluster="System.Text.StringBuilder.Remove(int, int)", file="CopyrightInfoFixture.cs"];
m4_23 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="193-193", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", file="CopyrightInfoFixture.cs"];
m4_42 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="166-166", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="CopyrightInfoFixture.cs"];
m4_35 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", span="98-98", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs"];
m4_36 [label="var copyright = new CopyrightInfo(''CommandLine, Ltd'', 1999, 2003, 2004, 2007)", span="100-100", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs"];
m4_37 [label="Assert.AreEqual(''Copyright (C) 1999 - 2003, 2004 - 2007 CommandLine, Ltd'', copyright.ToString())", span="102-102", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", color=red, community=0, file="CopyrightInfoFixture.cs"];
m4_38 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", span="98-98", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.DefaultSymbolSeveralYears()", file="CopyrightInfoFixture.cs"];
m4_24 [label="Entry CommandLine.Text.CopyrightInfo.ToString()", span="209-209", cluster="CommandLine.Text.CopyrightInfo.ToString()", file="CopyrightInfoFixture.cs"];
m4_18 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="CopyrightInfoFixture.cs"];
m4_16 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="CopyrightInfoFixture.cs"];
m4_14 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="CopyrightInfoFixture.cs"];
m4_19 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", span="74-74", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs"];
m4_20 [label="var copyright = new CopyrightInfo(false, ''Authors, Inc.'', 2007)", span="76-76", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs"];
m4_21 [label="Assert.AreEqual(''Copyright (c) 2007 Authors, Inc.'', copyright.ToString())", span="78-78", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", color=red, community=0, file="CopyrightInfoFixture.cs"];
m4_22 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", span="74-74", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.LowerSymbolOneYear()", file="CopyrightInfoFixture.cs"];
m4_39 [label="Entry CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", span="107-107", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", file="CopyrightInfoFixture.cs"];
m4_40 [label="new CopyrightInfo(null, 2000)", span="109-109", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", file="CopyrightInfoFixture.cs"];
m4_41 [label="Exit CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", span="107-107", cluster="CommandLine.Text.Tests.CopyrightInfoFixture.WillThrowExceptionIfAuthorIsNull()", file="CopyrightInfoFixture.cs"];
m5_20 [label="Entry CommandLine.IArgumentEnumerator.MoveNext()", span="532-532", cluster="CommandLine.IArgumentEnumerator.MoveNext()", file="EnumeratorsFixture.cs"];
m5_23 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="EnumeratorsFixture.cs"];
m5_46 [label="Entry CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", span="628-628", cluster="CommandLine.OneCharStringEnumerator.OneCharStringEnumerator(string)", file="EnumeratorsFixture.cs"];
m5_22 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="EnumeratorsFixture.cs"];
m5_21 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="EnumeratorsFixture.cs"];
m5_0 [label="Entry CommandLine.Tests.EnumeratorsFixture.StringIteration()", span="38-38", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_1 [label="string valueOne = ''one''", span="40-40", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_2 [label="string valueTwo = ''two''", span="41-41", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_4 [label="string[] values = { valueOne, valueTwo, valueThree }", span="44-44", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_7 [label="Assert.AreEqual(valueOne, e.Current)", span="48-48", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=red, community=0, file="EnumeratorsFixture.cs"];
m5_3 [label="string valueThree = ''three''", span="42-42", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_8 [label="Assert.AreEqual(valueTwo, e.Next)", span="49-49", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_11 [label="Assert.AreEqual(valueTwo, e.Current)", span="54-54", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=red, community=0, file="EnumeratorsFixture.cs"];
m5_12 [label="Assert.AreEqual(valueThree, e.Next)", span="55-55", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_15 [label="Assert.AreEqual(valueThree, e.Current)", span="60-60", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=red, community=0, file="EnumeratorsFixture.cs"];
m5_5 [label="IArgumentEnumerator e = new StringArrayEnumerator(values)", span="45-45", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_6 [label="e.MoveNext()", span="46-46", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_9 [label="Assert.IsFalse(e.IsLast)", span="50-50", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_10 [label="e.MoveNext()", span="52-52", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_13 [label="Assert.IsFalse(e.IsLast)", span="56-56", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_14 [label="e.MoveNext()", span="58-58", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_16 [label="Assert.IsNull(e.Next)", span="61-61", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_17 [label="Assert.IsTrue(e.IsLast)", span="62-62", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_18 [label="Exit CommandLine.Tests.EnumeratorsFixture.StringIteration()", span="38-38", cluster="CommandLine.Tests.EnumeratorsFixture.StringIteration()", file="EnumeratorsFixture.cs"];
m5_47 [label="Entry CommandLine.IArgumentEnumerator.GetRemainingFromNext()", span="527-527", cluster="CommandLine.IArgumentEnumerator.GetRemainingFromNext()", file="EnumeratorsFixture.cs"];
m5_24 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="EnumeratorsFixture.cs"];
m5_25 [label="Entry CommandLine.Tests.EnumeratorsFixture.CharIteration()", span="66-66", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs"];
m5_26 [label="IArgumentEnumerator e = new OneCharStringEnumerator(''abcd'')", span="68-68", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs"];
m5_27 [label="e.MoveNext()", span="69-69", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs"];
m5_28 [label="Assert.AreEqual(''a'', e.Current)", span="71-71", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=red, community=0, file="EnumeratorsFixture.cs"];
m5_29 [label="Assert.AreEqual(''b'', e.Next)", span="72-72", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_30 [label="Assert.AreEqual(''bcd'', e.GetRemainingFromNext())", span="73-73", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_31 [label="Assert.IsFalse(e.IsLast)", span="74-74", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_32 [label="e.MoveNext()", span="76-76", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs"];
m5_33 [label="Assert.AreEqual(''b'', e.Current)", span="78-78", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=red, community=0, file="EnumeratorsFixture.cs"];
m5_34 [label="Assert.AreEqual(''c'', e.Next)", span="79-79", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_35 [label="Assert.AreEqual(''cd'', e.GetRemainingFromNext())", span="80-80", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_36 [label="Assert.IsFalse(e.IsLast)", span="81-81", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_37 [label="e.MoveNext()", span="83-83", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs"];
m5_38 [label="Assert.AreEqual(''c'', e.Current)", span="85-85", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=red, community=0, file="EnumeratorsFixture.cs"];
m5_39 [label="Assert.AreEqual(''d'', e.Next)", span="86-86", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_40 [label="Assert.AreEqual(''d'', e.GetRemainingFromNext())", span="87-87", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_41 [label="Assert.IsFalse(e.IsLast)", span="88-88", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_42 [label="e.MoveNext()", span="90-90", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs"];
m5_43 [label="Assert.AreEqual(''d'', e.Current)", span="92-92", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=red, community=0, file="EnumeratorsFixture.cs"];
m5_44 [label="Assert.IsTrue(e.IsLast)", span="93-93", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", color=green, community=0, file="EnumeratorsFixture.cs"];
m5_45 [label="Exit CommandLine.Tests.EnumeratorsFixture.CharIteration()", span="66-66", cluster="CommandLine.Tests.EnumeratorsFixture.CharIteration()", file="EnumeratorsFixture.cs"];
m6_0 [label="Entry CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", span="40-40", cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs"];
m6_1 [label="var hi = new HeadingInfo(''myprog'')", span="42-42", cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs"];
m6_2 [label="string s = hi", span="43-43", cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs"];
m6_5 [label="hi.WriteMessage(''a message'', sw)", span="48-48", cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs"];
m6_3 [label="Assert.AreEqual(''myprog'', s)", span="45-45", cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", color=red, community=0, file="HeadingInfoFixture.cs"];
m6_4 [label="var sw = new StringWriter()", span="47-47", cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs"];
m6_6 [label="Assert.AreEqual(''myprog: a message'' + Environment.NewLine, sw.ToString())", span="50-50", cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", color=red, community=0, file="HeadingInfoFixture.cs"];
m6_7 [label="Exit CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", span="40-40", cluster="CommandLine.Text.Tests.HeadingInfoFixture.OnlyProgramName()", file="HeadingInfoFixture.cs"];
m6_10 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="HeadingInfoFixture.cs"];
m6_12 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="HeadingInfoFixture.cs"];
m6_21 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="298-298", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="HeadingInfoFixture.cs"];
m6_8 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string)", span="286-286", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string)", file="HeadingInfoFixture.cs"];
m6_11 [label="Entry CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", span="343-343", cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="HeadingInfoFixture.cs"];
m6_13 [label="Entry CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", span="54-54", cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs"];
m6_14 [label="var hi = new HeadingInfo(''myecho'', ''2.5'')", span="56-56", cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs"];
m6_15 [label="string s = hi", span="57-57", cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs"];
m6_18 [label="hi.WriteMessage(''hello unit-test'', sw)", span="62-62", cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs"];
m6_16 [label="Assert.AreEqual(''myecho 2.5'', s)", span="59-59", cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", color=red, community=0, file="HeadingInfoFixture.cs"];
m6_17 [label="var sw = new StringWriter()", span="61-61", cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs"];
m6_19 [label="Assert.AreEqual(''myecho: hello unit-test'' + Environment.NewLine, sw.ToString())", span="64-64", cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", color=red, community=0, file="HeadingInfoFixture.cs"];
m6_20 [label="Exit CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", span="54-54", cluster="CommandLine.Text.Tests.HeadingInfoFixture.ProgramNameAndVersion()", file="HeadingInfoFixture.cs"];
m7_15 [label="Entry CommandLine.Text.HelpText.AddOptions(object)", span="946-946", cluster="CommandLine.Text.HelpText.AddOptions(object)", file="HelpOptionAttributeFixture.cs"];
m7_27 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="HelpOptionAttributeFixture.cs"];
m7_24 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="HelpOptionAttributeFixture.cs"];
m7_14 [label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="921-921", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="HelpOptionAttributeFixture.cs"];
m7_29 [label="Entry CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", span="86-86", cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_30 [label="var options = new MockOptions()", span="88-88", cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_31 [label="var writer = new StringWriter()", span="89-89", cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_32 [label="bool result = base.Parser.ParseArguments(\r\n                    new string[] { ''math.xml'', ''-oresult.xml'' }, options, writer)", span="91-92", cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", color=red, community=0, file="HelpOptionAttributeFixture.cs"];
m7_34 [label="string helpText = writer.ToString()", span="96-96", cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_33 [label="base.AssertParserFailure(result)", span="94-94", cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", color=red, community=0, file="HelpOptionAttributeFixture.cs"];
m7_35 [label="Assert.IsTrue(helpText.Length > 0)", span="97-97", cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", color=red, community=0, file="HelpOptionAttributeFixture.cs"];
m7_36 [label="Console.Write(helpText)", span="99-99", cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_37 [label="Exit CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", span="86-86", cluster="CommandLine.Tests.HelpOptionAttributeFixture.BadInputActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_40 [label="Entry System.Console.Write(string)", span="0-0", cluster="System.Console.Write(string)", file="HelpOptionAttributeFixture.cs"];
m7_12 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="298-298", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="HelpOptionAttributeFixture.cs"];
m7_13 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="166-166", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="HelpOptionAttributeFixture.cs"];
m7_25 [label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1486-1486", cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", file="HelpOptionAttributeFixture.cs"];
m7_16 [label="Entry CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", span="73-73", cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_17 [label="var options = new MockOptions()", span="75-75", cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_18 [label="var writer = new StringWriter()", span="76-76", cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_19 [label="bool result = base.Parser.ParseArguments(\r\n                    new string[] { ''-imath.xml'', ''-oresult.xml'' }, options, writer)", span="78-79", cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", color=red, community=0, file="HelpOptionAttributeFixture.cs"];
m7_21 [label="Assert.AreEqual(0, writer.ToString().Length)", span="82-82", cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", color=red, community=0, file="HelpOptionAttributeFixture.cs"];
m7_20 [label="base.AssertParserSuccess(result)", span="81-81", cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", color=red, community=0, file="HelpOptionAttributeFixture.cs"];
m7_22 [label="Exit CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", span="73-73", cluster="CommandLine.Tests.HelpOptionAttributeFixture.CorrectInputNotActivatesHelp()", file="HelpOptionAttributeFixture.cs"];
m7_38 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="HelpOptionAttributeFixture.cs"];
m7_0 [label="Entry CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", span="57-57", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_1 [label="var help = new HelpText(new HeadingInfo(''MyProgram'', ''1.0''))", span="59-59", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_2 [label="help.Copyright = new CopyrightInfo(''Authors, Inc.'', 2007)", span="60-60", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_3 [label="help.AddPreOptionsLine(''This software is under the terms of the XYZ License'')", span="61-61", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_4 [label="help.AddPreOptionsLine(''(http://license-text.org/show.cgi?xyz).'')", span="62-62", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_5 [label="help.AddPreOptionsLine(''Usage: myprog --input equations-file.xml -o result-file.xml'')", span="63-63", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_6 [label="help.AddPreOptionsLine(''       myprog -i equations-file.xml --paralell'')", span="64-64", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_7 [label="help.AddPreOptionsLine(''       myprog -i equations-file.xml -vo result-file.xml'')", span="65-65", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_8 [label="help.AddOptions(this)", span="66-66", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_9 [label="return help;", span="67-67", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_10 [label="Exit CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", span="57-57", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.GetUsage()", file="HelpOptionAttributeFixture.cs"];
m7_39 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="HelpOptionAttributeFixture.cs"];
m7_41 [label="Entry CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", span="103-103", cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs"];
m7_42 [label="var options = new MockOptions()", span="105-105", cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs"];
m7_43 [label="var writer = new StringWriter()", span="106-106", cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs"];
m7_44 [label="bool result = base.Parser.ParseArguments(\r\n                    new string[] { ''--help'' }, options, writer)", span="108-109", cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", color=red, community=0, file="HelpOptionAttributeFixture.cs"];
m7_46 [label="string helpText = writer.ToString()", span="113-113", cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs"];
m7_45 [label="base.AssertParserFailure(result)", span="111-111", cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", color=red, community=0, file="HelpOptionAttributeFixture.cs"];
m7_47 [label="Assert.IsTrue(helpText.Length > 0)", span="114-114", cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", color=red, community=0, file="HelpOptionAttributeFixture.cs"];
m7_48 [label="Exit CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", span="103-103", cluster="CommandLine.Tests.HelpOptionAttributeFixture.ExplicitHelpActivation()", file="HelpOptionAttributeFixture.cs"];
m7_11 [label="Entry CommandLine.Text.HelpText.HelpText(string)", span="681-681", cluster="CommandLine.Text.HelpText.HelpText(string)", file="HelpOptionAttributeFixture.cs"];
m7_23 [label="Entry CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.MockOptions()", span="42-42", cluster="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions.MockOptions()", file="HelpOptionAttributeFixture.cs"];
m7_26 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", span="58-58", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", file="HelpOptionAttributeFixture.cs"];
m7_49 [label="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions", span="", file="HelpOptionAttributeFixture.cs"];
m7_50 [label="CommandLine.Tests.HelpOptionAttributeFixture", span="", file="HelpOptionAttributeFixture.cs"];
m8_125 [label="Entry string.Format(System.IFormatProvider, string, object)", span="0-0", cluster="string.Format(System.IFormatProvider, string, object)", file="HelpTextFixture.cs"];
m8_175 [label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", span="397-397", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", file="HelpTextFixture.cs"];
m8_176 [label="var options = new ComplexOptionsWithHelp()", span="399-399", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", file="HelpTextFixture.cs"];
m8_177 [label="bool result = new CommandLineParser(new CommandLineParserSettings(true, true, Console.Out)).ParseArguments(\r\n                new string[] { ''-iIN.FILE'', ''-oOUT.FILE'', ''--offset'', ''0'', ''-ap'' }, options)", span="401-402", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", file="HelpTextFixture.cs"];
m8_178 [label="Assert.IsFalse(result)", span="404-404", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", color=red, community=0, file="HelpTextFixture.cs"];
m8_179 [label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", span="397-397", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadMutualExclusiveness()", file="HelpTextFixture.cs"];
m8_154 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1543-1543", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", file="HelpTextFixture.cs"];
m8_194 [label="Entry CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", span="433-433", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_195 [label="string optionHelp = null", span="436-436", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_196 [label="e.Option.ShortName", span="438-438", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_201 [label="e.Option.Required", span="449-449", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_203 [label="e.Option.HelpText = optionHelp", span="452-452", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_197 [label="''v''", span="440-440", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_199 [label="''i''", span="444-444", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_198 [label="optionHelp = ''Kommentar umfassend Operationen.''", span="441-441", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_200 [label="optionHelp = ''Gibt den Eingang an zu bearbeitenden Datei.''", span="445-445", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_202 [label="optionHelp = ''Erforderlich. '' + optionHelp", span="450-450", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_204 [label="Exit CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", span="433-433", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat_FormatOptionHelpText(object, CommandLine.Text.FormatOptionHelpTextEventArgs)", file="HelpTextFixture.cs"];
m8_152 [label="Entry CommandLine.Tests.Mocks.RPEOptions.RPEOptions()", span="6-6", cluster="CommandLine.Tests.Mocks.RPEOptions.RPEOptions()", file="HelpTextFixture.cs"];
m8_193 [label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="1735-1735", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", file="HelpTextFixture.cs"];
m8_138 [label="Entry CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", span="278-278", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs"];
m8_139 [label="var sw = new StringWriter()", span="280-280", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs"];
m8_140 [label="var options = new RPEOptions()", span="281-281", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs"];
m8_141 [label="var parser = new CommandLineParser(new CommandLineParserSettings {\r\n                MutuallyExclusive = true, CaseSensitive = true, HelpWriter = sw})", span="282-283", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs"];
m8_144 [label="var outsw = sw.ToString()", span="288-288", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs"];
m8_142 [label="var result = parser.ParseArguments(new string[] {''--option-b'', ''hello'', ''-cWORLD''}, options)", span="284-284", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs"];
m8_143 [label="Assert.IsFalse(result)", span="286-286", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", color=red, community=0, file="HelpTextFixture.cs"];
m8_145 [label="Console.WriteLine(outsw)", span="290-290", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs"];
m8_146 [label="var lines = outsw.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="292-292", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs"];
m8_147 [label="Assert.AreEqual(lines[0], ''--option-b option violates format.'')", span="294-294", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", color=red, community=0, file="HelpTextFixture.cs"];
m8_148 [label="Assert.AreEqual(lines[1], ''-c/--option-c option violates format.'')", span="295-295", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", color=red, community=0, file="HelpTextFixture.cs"];
m8_149 [label="Assert.AreEqual(lines[2], ''-a required option is missing.'')", span="296-296", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", color=red, community=0, file="HelpTextFixture.cs"];
m8_150 [label="Exit CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", span="278-278", cluster="CommandLine.Text.Tests.HelpTextFixture.InvokeRenderParsingErrorsText()", file="HelpTextFixture.cs"];
m8_181 [label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", span="408-408", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", file="HelpTextFixture.cs"];
m8_182 [label="var options = new ComplexOptionsWithHelp()", span="410-410", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", file="HelpTextFixture.cs"];
m8_183 [label="bool result = new CommandLineParser(new CommandLineParserSettings(true, true, Console.Out)).ParseArguments(\r\n                new string[] { ''-iIN.FILE'', ''-oOUT.FILE'', ''--offset'', ''zero'', ''-pa'' }, options)", span="412-413", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", file="HelpTextFixture.cs"];
m8_184 [label="Assert.IsFalse(result)", span="415-415", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", color=red, community=0, file="HelpTextFixture.cs"];
m8_185 [label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", span="408-408", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormatAndMutualExclusiveness()", file="HelpTextFixture.cs"];
m8_58 [label="Entry CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", span="172-172", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs"];
m8_59 [label="_helpText.MaximumDisplayWidth = 40", span="174-174", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs"];
m8_60 [label="_helpText.AddOptions(new MockOptionsWithLongDescriptionAndNoSpaces())", span="175-175", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs"];
m8_61 [label="string help = _helpText.ToString()", span="176-176", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs"];
m8_62 [label="string[] lines = help.Split(new[] { Environment.NewLine }, StringSplitOptions.None)", span="178-178", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs"];
m8_63 [label="Assert.AreEqual(''  v, verbose    Before '', lines[2])", span="179-179", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_64 [label="Assert.AreEqual(''                012345678901234567890123'', lines[3])", span="180-180", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_65 [label="Assert.AreEqual(''                After'', lines[4])", span="181-181", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_66 [label="Assert.AreEqual(''  input-file    Before '', lines[5])", span="182-182", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_67 [label="Assert.AreEqual(''                012345678901234567890123'', lines[6])", span="183-183", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_68 [label="Assert.AreEqual(''                456789 After'', lines[7])", span="184-184", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_69 [label="Exit CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", span="172-172", cluster="CommandLine.Text.Tests.HelpTextFixture.LongHelpTextWithoutSpaces()", file="HelpTextFixture.cs"];
m8_21 [label="Entry CommandLine.Text.HelpText.AddOptions(object)", span="946-946", cluster="CommandLine.Text.HelpText.AddOptions(object)", file="HelpTextFixture.cs"];
m8_121 [label="Entry CommandLine.Text.HelpText.HelpText()", span="651-651", cluster="CommandLine.Text.HelpText.HelpText()", file="HelpTextFixture.cs"];
m8_134 [label="Entry CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", span="270-270", cluster="CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", file="HelpTextFixture.cs"];
m8_135 [label="var local = new HelpText()", span="272-272", cluster="CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", file="HelpTextFixture.cs"];
m8_136 [label="Assert.AreEqual('''', local.ToString())", span="274-274", cluster="CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", color=red, community=0, file="HelpTextFixture.cs"];
m8_137 [label="Exit CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", span="270-270", cluster="CommandLine.Text.Tests.HelpTextFixture.CreateBasicInstance()", file="HelpTextFixture.cs"];
m8_20 [label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="921-921", cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="HelpTextFixture.cs"];
m8_151 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="HelpTextFixture.cs"];
m8_163 [label="Entry CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.ComplexOptionsWithHelp()", span="88-88", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.ComplexOptionsWithHelp()", file="HelpTextFixture.cs"];
m8_19 [label="Entry string.Concat(string, string)", span="0-0", cluster="string.Concat(string, string)", file="HelpTextFixture.cs"];
m8_86 [label="Entry CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", span="208-208", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_87 [label="var local = new HelpText(''Customizing Test.'')", span="210-210", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_88 [label="local.FormatOptionHelpText += new EventHandler<FormatOptionHelpTextEventArgs>(CustomizeOptionsFormat_FormatOptionHelpText)", span="211-211", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_89 [label="local.AddPreOptionsLine(''Pre-Options.'')", span="212-212", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_90 [label="local.AddOptions(new MockOptionsWithDescription())", span="213-213", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_91 [label="local.AddPostOptionsLine(''Post-Options.'')", span="214-214", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_92 [label="string help = local.ToString()", span="216-216", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_93 [label="Console.WriteLine(help)", span="218-218", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_94 [label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="220-220", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_95 [label="Assert.AreEqual(''Customizing Test.'', lines[0])", span="221-221", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", color=red, community=0, file="HelpTextFixture.cs"];
m8_96 [label="Assert.AreEqual(''Pre-Options.'', lines[1])", span="222-222", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", color=red, community=0, file="HelpTextFixture.cs"];
m8_97 [label="Assert.AreEqual(''  v, verbose       Kommentar umfassend Operationen.'', lines[3])", span="223-223", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", color=red, community=0, file="HelpTextFixture.cs"];
m8_98 [label="Assert.AreEqual(''  i, input-file    Erforderlich. Gibt den Eingang an zu bearbeitenden Datei.'', lines[4])", span="224-224", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", color=red, community=0, file="HelpTextFixture.cs"];
m8_99 [label="Assert.AreEqual(''Post-Options.'', lines[6])", span="225-225", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", color=red, community=0, file="HelpTextFixture.cs"];
m8_100 [label="Exit CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", span="208-208", cluster="CommandLine.Text.Tests.HelpTextFixture.CustomizeOptionsFormat()", file="HelpTextFixture.cs"];
m8_170 [label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", span="386-386", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", file="HelpTextFixture.cs"];
m8_171 [label="var options = new ComplexOptionsWithHelp()", span="388-388", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", file="HelpTextFixture.cs"];
m8_172 [label="bool result = new CommandLineParser(new CommandLineParserSettings(Console.Out)).ParseArguments(\r\n                new string[] { ''-i0'' }, options)", span="390-391", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", file="HelpTextFixture.cs"];
m8_173 [label="Assert.IsFalse(result)", span="393-393", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", color=red, community=0, file="HelpTextFixture.cs"];
m8_174 [label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", span="386-386", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequiredAndBadFormat()", file="HelpTextFixture.cs"];
m8_14 [label="Entry CommandLine.Text.HelpText.HelpText(string)", span="681-681", cluster="CommandLine.Text.HelpText.HelpText(string)", file="HelpTextFixture.cs"];
m8_16 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", span="179-179", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, params int[])", file="HelpTextFixture.cs"];
m8_57 [label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithLongDescription.MockOptionsWithLongDescription()", span="64-64", cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithLongDescription.MockOptionsWithLongDescription()", file="HelpTextFixture.cs"];
m8_102 [label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithDescription.MockOptionsWithDescription()", span="55-55", cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithDescription.MockOptionsWithDescription()", file="HelpTextFixture.cs"];
m8_158 [label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", span="364-364", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", file="HelpTextFixture.cs"];
m8_159 [label="var options = new ComplexOptionsWithHelp()", span="366-366", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", file="HelpTextFixture.cs"];
m8_160 [label="bool result = new CommandLineParser(new CommandLineParserSettings(Console.Out)).ParseArguments(\r\n                new string[] { ''-iIN.FILE'', ''-oOUT.FILE'', ''--offset'', ''abc'' }, options)", span="368-369", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", file="HelpTextFixture.cs"];
m8_161 [label="Assert.IsFalse(result)", span="371-371", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", color=red, community=0, file="HelpTextFixture.cs"];
m8_162 [label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", span="364-364", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithBadFormat()", file="HelpTextFixture.cs"];
m8_42 [label="Entry CommandLine.Text.HelpText.ToString()", span="1131-1131", cluster="CommandLine.Text.HelpText.ToString()", file="HelpTextFixture.cs"];
m8_157 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="HelpTextFixture.cs"];
m8_25 [label="Entry CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", span="130-130", cluster="CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", file="HelpTextFixture.cs"];
m8_26 [label="_helpText.AddPreOptionsLine(string.Empty)", span="132-132", cluster="CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", file="HelpTextFixture.cs"];
m8_27 [label="Exit CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", span="130-130", cluster="CommandLine.Text.Tests.HelpTextFixture.AddAnEmptyPreOptionsLineIsAllowed()", file="HelpTextFixture.cs"];
m8_15 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="298-298", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="HelpTextFixture.cs"];
m8_45 [label="Entry CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", span="156-156", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs"];
m8_46 [label="_helpText.MaximumDisplayWidth = 40", span="158-158", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs"];
m8_47 [label="_helpText.AddOptions(new MockOptionsWithLongDescription())", span="159-159", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs"];
m8_48 [label="string help = _helpText.ToString()", span="160-160", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs"];
m8_49 [label="string[] lines = help.Split(new[] {Environment.NewLine}, StringSplitOptions.None)", span="162-162", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs"];
m8_50 [label="Assert.AreEqual(lines[2], ''  v, verbose    This is the description'', ''The first line should have the arguments and the start of the Help Text.'')", span="163-163", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", color=red, community=0, file="HelpTextFixture.cs"];
m8_52 [label="Assert.AreEqual(lines[3], ''                of the verbosity to '', formattingMessage)", span="165-165", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", color=red, community=0, file="HelpTextFixture.cs"];
m8_53 [label="Assert.AreEqual(lines[4], ''                test out the wrapping '', formattingMessage)", span="166-166", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", color=red, community=0, file="HelpTextFixture.cs"];
m8_54 [label="Assert.AreEqual(lines[5], ''                capabilities of the '', formattingMessage)", span="167-167", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", color=red, community=0, file="HelpTextFixture.cs"];
m8_55 [label="Assert.AreEqual(lines[6], ''                Help Text.'', formattingMessage)", span="168-168", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", color=red, community=0, file="HelpTextFixture.cs"];
m8_51 [label="string formattingMessage = ''Beyond the second line should be formatted as though it's in a column.''", span="164-164", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", color=red, community=0, file="HelpTextFixture.cs"];
m8_56 [label="Exit CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", span="156-156", cluster="CommandLine.Text.Tests.HelpTextFixture.WhenHelpTextIsLongerThanWidthItWillWrapAroundAsIfInAColumn()", file="HelpTextFixture.cs"];
m8_123 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", span="166-166", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(string, int)", file="HelpTextFixture.cs"];
m8_41 [label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="936-936", cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="HelpTextFixture.cs"];
m8_122 [label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string)", span="286-286", cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string)", file="HelpTextFixture.cs"];
m8_153 [label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692", cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="HelpTextFixture.cs"];
m8_18 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="HelpTextFixture.cs"];
m8_156 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="HelpTextFixture.cs"];
m8_126 [label="Entry CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", span="252-252", cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs"];
m8_127 [label="var local = new HelpText {\r\n				AddDashesToOption = true,\r\n		    	Heading = new HeadingInfo(''AddOptionsWithDashes''),\r\n	        	Copyright = new CopyrightInfo(''Author'', DateTime.Now.Year)\r\n			}", span="254-258", cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs"];
m8_128 [label="local.AddOptions(new MockOptionsSimple())", span="259-259", cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs"];
m8_129 [label="string help = local.ToString()", span="261-261", cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs"];
m8_130 [label="Console.WriteLine(help)", span="263-263", cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs"];
m8_131 [label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="265-265", cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs"];
m8_132 [label="Assert.AreEqual(''  -s, --something    Input something here.'', lines[3])", span="266-266", cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", color=red, community=0, file="HelpTextFixture.cs"];
m8_133 [label="Exit CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", span="252-252", cluster="CommandLine.Text.Tests.HelpTextFixture.AddOptionsWithDashes()", file="HelpTextFixture.cs"];
m8_164 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", span="1564-1564", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(System.IO.TextWriter)", file="HelpTextFixture.cs"];
m8_17 [label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText(CommandLine.CommandLineOptionsBase, int)", span="1004-1004", cluster="CommandLine.Text.HelpText.RenderParsingErrorsText(CommandLine.CommandLineOptionsBase, int)", file="HelpTextFixture.cs"];
m8_101 [label="Entry EventHandler<FormatOptionHelpTextEventArgs>.cstr", span="", cluster="EventHandler<FormatOptionHelpTextEventArgs>.cstr", file="HelpTextFixture.cs"];
m8_165 [label="Entry CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", span="375-375", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", file="HelpTextFixture.cs"];
m8_166 [label="var options = new ComplexOptionsWithHelp()", span="377-377", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", file="HelpTextFixture.cs"];
m8_167 [label="bool result = new CommandLineParser(new CommandLineParserSettings(Console.Out)).ParseArguments(\r\n                new string[] { ''-j0'' }, options)", span="379-380", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", file="HelpTextFixture.cs"];
m8_168 [label="Assert.IsFalse(result)", span="382-382", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", color=red, community=0, file="HelpTextFixture.cs"];
m8_169 [label="Exit CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", span="375-375", cluster="CommandLine.Text.Tests.HelpTextFixture.DetailedHelpWithMissingRequired()", file="HelpTextFixture.cs"];
m8_71 [label="Entry CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", span="188-188", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs"];
m8_72 [label="var local = new HelpText(''Heading Info.'')", span="190-190", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs"];
m8_73 [label="local.MaximumDisplayWidth = 40", span="191-191", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs"];
m8_74 [label="local.AddPreOptionsLine(''Before 0123456789012345678901234567890123456789012 After'')", span="192-192", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs"];
m8_75 [label="local.AddOptions(new MockOptions())", span="193-193", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs"];
m8_76 [label="local.AddPostOptionsLine(''Before 0123456789012345678901234567890123456789 After'')", span="194-194", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs"];
m8_77 [label="string help = local.ToString()", span="196-196", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs"];
m8_78 [label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="198-198", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs"];
m8_79 [label="Assert.AreEqual(''Before '', lines[1])", span="199-199", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_80 [label="Assert.AreEqual(''0123456789012345678901234567890123456789'', lines[2])", span="200-200", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_81 [label="Assert.AreEqual(''012 After'', lines[3])", span="201-201", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_82 [label="Assert.AreEqual(''Before '', lines[lines.Length - 3])", span="202-202", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_83 [label="Assert.AreEqual(''0123456789012345678901234567890123456789'', lines[lines.Length - 2])", span="203-203", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_84 [label="Assert.AreEqual('' After'', lines[lines.Length - 1])", span="204-204", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", color=red, community=0, file="HelpTextFixture.cs"];
m8_85 [label="Exit CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", span="188-188", cluster="CommandLine.Text.Tests.HelpTextFixture.LongPreAndPostLinesWithoutSpaces()", file="HelpTextFixture.cs"];
m8_186 [label="Entry CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", span="420-420", cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs"];
m8_187 [label="var options = new ComplexOptions()", span="422-422", cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs"];
m8_188 [label="var writer = new StringWriter()", span="423-423", cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs"];
m8_189 [label="new CommandLineParser(new CommandLineParserSettings(false,  false, writer)).ParseArguments(new string[0], options, writer)", span="425-425", cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs"];
m8_190 [label="Assert.AreEqual(2, options.InternalLastPostParsingState.Errors.Count)", span="427-427", cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", color=red, community=0, file="HelpTextFixture.cs"];
m8_191 [label="Exit CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", span="420-420", cluster="CommandLine.Text.Tests.HelpTextFixture.MultipleRequiredFields_WithMoreThanOneRequiredFieldNotSpecified_ReportsAllMissingRequiredFields()", file="HelpTextFixture.cs"];
m8_0 [label="Entry CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", span="97-97", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_1 [label="var help = new HelpText(new HeadingInfo(''unittest'', ''1.9''))", span="99-99", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_2 [label="help.AdditionalNewLineAfterOption = true", span="100-100", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_3 [label="help.Copyright = new CopyrightInfo(''CommandLine.dll Author'', 2005, 2011)", span="101-101", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_4 [label="string errors = help.RenderParsingErrorsText(this, 2)", span="104-104", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_6 [label="help.AddPreOptionsLine(string.Concat(Environment.NewLine, ''ERROR(S):''))", span="107-107", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_7 [label="help.AddPreOptionsLine(errors)", span="108-108", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_8 [label="help.AddPreOptionsLine(''This is free software. You may redistribute copies of it under the terms of'')", span="111-111", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_9 [label="help.AddPreOptionsLine(''the MIT License <http://www.opensource.org/licenses/mit-license.php>.'')", span="112-112", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_10 [label="help.AddPreOptionsLine(''Usage: Please run the unit...'')", span="113-113", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_11 [label="help.AddOptions(this)", span="114-114", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_12 [label="return help;", span="116-116", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_5 [label="!string.IsNullOrEmpty(errors)", span="105-105", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_13 [label="Exit CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", span="97-97", cluster="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp.GetUsage()", file="HelpTextFixture.cs"];
m8_103 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="HelpTextFixture.cs"];
m8_192 [label="Entry CommandLine.Tests.Mocks.ComplexOptions.ComplexOptions()", span="35-35", cluster="CommandLine.Tests.Mocks.ComplexOptions.ComplexOptions()", file="HelpTextFixture.cs"];
m8_40 [label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptions.MockOptions()", span="46-46", cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptions.MockOptions()", file="HelpTextFixture.cs"];
m8_70 [label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithLongDescriptionAndNoSpaces.MockOptionsWithLongDescriptionAndNoSpaces()", span="73-73", cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptionsWithLongDescriptionAndNoSpaces.MockOptionsWithLongDescriptionAndNoSpaces()", file="HelpTextFixture.cs"];
m8_28 [label="Entry CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", span="139-139", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_29 [label="var local = new HelpText(''Heading Info.'')", span="141-141", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_30 [label="local.AddPreOptionsLine(''This is a first pre-options line.'')", span="142-142", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_31 [label="local.AddPreOptionsLine(''This is a second pre-options line.'')", span="143-143", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_32 [label="local.AddOptions(new MockOptions())", span="144-144", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_33 [label="local.AddPostOptionsLine(''This is a first post-options line.'')", span="145-145", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_34 [label="local.AddPostOptionsLine(''This is a second post-options line.'')", span="146-146", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_35 [label="string help = local.ToString()", span="148-148", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_36 [label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="150-150", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_37 [label="Assert.AreEqual(lines[lines.Length - 2], ''This is a first post-options line.'')", span="151-151", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", color=red, community=0, file="HelpTextFixture.cs"];
m8_38 [label="Assert.AreEqual(lines[lines.Length - 1], ''This is a second post-options line.'')", span="152-152", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", color=red, community=0, file="HelpTextFixture.cs"];
m8_39 [label="Exit CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", span="139-139", cluster="CommandLine.Text.Tests.HelpTextFixture.PostOptionsLinesFeatureAdded()", file="HelpTextFixture.cs"];
m8_22 [label="Entry CommandLine.Text.Tests.HelpTextFixture.SetUp()", span="124-124", cluster="CommandLine.Text.Tests.HelpTextFixture.SetUp()", file="HelpTextFixture.cs"];
m8_23 [label="_helpText = new HelpText(new HeadingInfo(_ThisAssembly.Title, _ThisAssembly.Version))", span="126-126", cluster="CommandLine.Text.Tests.HelpTextFixture.SetUp()", file="HelpTextFixture.cs"];
m8_24 [label="Exit CommandLine.Text.Tests.HelpTextFixture.SetUp()", span="124-124", cluster="CommandLine.Text.Tests.HelpTextFixture.SetUp()", file="HelpTextFixture.cs"];
m8_124 [label="Entry CommandLine.Text.Tests.HelpTextFixture.MockOptionsSimple.MockOptionsSimple()", span="82-82", cluster="CommandLine.Text.Tests.HelpTextFixture.MockOptionsSimple.MockOptionsSimple()", file="HelpTextFixture.cs"];
m8_180 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", span="1603-1603", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool, bool, System.IO.TextWriter)", file="HelpTextFixture.cs"];
m8_43 [label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0", cluster="string.Split(string[], System.StringSplitOptions)", file="HelpTextFixture.cs"];
m8_155 [label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object)", span="1717-1717", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", file="HelpTextFixture.cs"];
m8_104 [label="Entry CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", span="229-229", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_105 [label="var year = DateTime.Now.Year", span="231-231", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_106 [label="var local = new HelpText()", span="232-232", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_108 [label="local.Copyright = new CopyrightInfo(''Author'', year)", span="234-234", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_116 [label="Assert.AreEqual(string.Format(CultureInfo.InvariantCulture, ''Copyright (C) {0} Author'', year), lines[1])", span="245-245", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", color=red, community=0, file="HelpTextFixture.cs"];
m8_107 [label="local.Heading = new HeadingInfo(''Parameterless Constructor Test.'')", span="233-233", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_109 [label="local.AddPreOptionsLine(''Pre-Options.'')", span="235-235", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_110 [label="local.AddOptions(new MockOptionsSimple())", span="236-236", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_111 [label="local.AddPostOptionsLine(''Post-Options.'')", span="237-237", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_112 [label="string help = local.ToString()", span="239-239", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_113 [label="Console.WriteLine(help)", span="241-241", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_114 [label="string[] lines = help.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)", span="243-243", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_115 [label="Assert.AreEqual(''Parameterless Constructor Test.'', lines[0])", span="244-244", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", color=red, community=0, file="HelpTextFixture.cs"];
m8_117 [label="Assert.AreEqual(''Pre-Options.'', lines[2])", span="246-246", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", color=red, community=0, file="HelpTextFixture.cs"];
m8_118 [label="Assert.AreEqual(''  s, something    Input something here.'', lines[4])", span="247-247", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", color=red, community=0, file="HelpTextFixture.cs"];
m8_119 [label="Assert.AreEqual(''Post-Options.'', lines[6])", span="248-248", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", color=red, community=0, file="HelpTextFixture.cs"];
m8_120 [label="Exit CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", span="229-229", cluster="CommandLine.Text.Tests.HelpTextFixture.InstancingWithParameterlessConstructor()", file="HelpTextFixture.cs"];
m8_205 [label="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp", span="", file="HelpTextFixture.cs"];
m8_206 [label="CommandLine.Text.Tests.HelpTextFixture", span="", file="HelpTextFixture.cs"];
m9_43 [label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", span="98-98", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", file="MutuallyExclusiveParsingFixture.cs"];
m9_44 [label="var options = new OptionsWithMultipleSetAndOneOption()", span="100-100", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", file="MutuallyExclusiveParsingFixture.cs"];
m9_45 [label="bool result = base.Parser.ParseArguments(new string[] { ''-g167'', ''--hue'', ''205'' }, options)", span="101-101", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_46 [label="base.AssertParserFailure(result)", span="103-103", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_47 [label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", span="98-98", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionFails()", file="MutuallyExclusiveParsingFixture.cs"];
m9_14 [label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471", cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="MutuallyExclusiveParsingFixture.cs"];
m9_17 [label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", span="58-58", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", file="MutuallyExclusiveParsingFixture.cs"];
m9_18 [label="var options = new OptionsWithDefaultSet()", span="60-60", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", file="MutuallyExclusiveParsingFixture.cs"];
m9_19 [label="bool result = base.Parser.ParseArguments(new string[] { ''-i'', ''1'', ''--file=mystuff.xml'' }, options)", span="61-61", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_20 [label="base.AssertParserFailure(result)", span="63-63", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_21 [label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", span="58-58", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsFails()", file="MutuallyExclusiveParsingFixture.cs"];
m9_48 [label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSetAndOneOption.OptionsWithMultipleSetAndOneOption()", span="35-35", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSetAndOneOption.OptionsWithMultipleSetAndOneOption()", file="MutuallyExclusiveParsingFixture.cs"];
m9_37 [label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", span="35-35", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", file="MutuallyExclusiveParsingFixture.cs"];
m9_30 [label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", span="78-78", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_31 [label="var options = new OptionsWithMultipleSet()", span="80-80", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_32 [label="Result = base.Parser.ParseArguments(new string[] { ''-g167'', ''--hue'', ''205'' }, options)", span="78-78", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_34 [label="Assert.AreEqual(167, options.Green)", span="81-81", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_35 [label="Assert.AreEqual(205, options.Hue)", span="82-82", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_33 [label="ResultShouldBeTrue()", span="80-80", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_36 [label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", span="78-78", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingTwoMutuallyExclusiveOptionsInTwoSetSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_6 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1543-1543", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", file="MutuallyExclusiveParsingFixture.cs"];
m9_5 [label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692", cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="MutuallyExclusiveParsingFixture.cs"];
m9_13 [label="Entry CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", span="35-35", cluster="CommandLine.Tests.Mocks.OptionsWithDefaultSet.OptionsWithDefaultSet()", file="MutuallyExclusiveParsingFixture.cs"];
m9_15 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60", cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="MutuallyExclusiveParsingFixture.cs"];
m9_22 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="MutuallyExclusiveParsingFixture.cs"];
m9_23 [label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", span="67-67", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_24 [label="var options = new OptionsWithDefaultSet()", span="69-69", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_25 [label="Result = base.Parser.ParseArguments(new string[] { ''--file=mystuff.xml'', ''-v'' }, options)", span="67-67", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_27 [label="Assert.AreEqual(''mystuff.xml'', options.FileName)", span="70-70", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_28 [label="Assert.AreEqual(true, options.Verbose)", span="71-71", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_26 [label="ResultShouldBeTrue()", span="69-69", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_29 [label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", span="67-67", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionWithAnotherOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_38 [label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", span="89-89", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", file="MutuallyExclusiveParsingFixture.cs"];
m9_39 [label="var options = new OptionsWithMultipleSet()", span="91-91", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", file="MutuallyExclusiveParsingFixture.cs"];
m9_40 [label="bool result = base.Parser.ParseArguments(new string[] { ''-g167'', ''--hue'', ''205'', ''--saturation=37'' }, options)", span="92-92", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_41 [label="base.AssertParserFailure(result)", span="94-94", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_42 [label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", span="89-89", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingThreeMutuallyExclusiveOptionsInTwoSetFails()", file="MutuallyExclusiveParsingFixture.cs"];
m9_0 [label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", span="38-38", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", file="MutuallyExclusiveParsingFixture.cs"];
m9_1 [label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", span="38-38", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.MutuallyExclusiveParsingFixture()", file="MutuallyExclusiveParsingFixture.cs"];
m9_49 [label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", span="107-107", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_50 [label="var options = new OptionsWithMultipleSetAndOneOption()", span="109-109", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_51 [label="Result = base.Parser.ParseArguments(new string[] { ''-g100'', ''-h200'', ''-cRgbColorSet'' }, options)", span="107-107", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_53 [label="Assert.AreEqual(100, options.Green)", span="110-110", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_54 [label="Assert.AreEqual(200, options.Hue)", span="111-111", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_55 [label="Assert.AreEqual(ColorSet.RgbColorSet, options.DefaultColorSet)", span="112-112", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_52 [label="ResultShouldBeTrue()", span="109-109", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_56 [label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", span="107-107", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingMutuallyExclusiveOptionsAndRequiredOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_7 [label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", span="48-48", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_8 [label="var options = new OptionsWithDefaultSet()", span="50-50", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_9 [label="Result = base.Parser.ParseArguments(new string[] { ''--file=mystuff.xml'' }, options)", span="48-48", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_11 [label="Assert.AreEqual(''mystuff.xml'', options.FileName)", span="51-51", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", color=green, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_10 [label="ResultShouldBeTrue()", span="50-50", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_12 [label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", span="48-48", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.ParsingOneMutuallyExclusiveOptionSucceeds()", file="MutuallyExclusiveParsingFixture.cs"];
m9_2 [label="Entry CommandLine.Tests.MutuallyExclusiveParsingFixture.CreateCommandLineParser()", span="42-42", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.CreateCommandLineParser()", file="MutuallyExclusiveParsingFixture.cs"];
m9_3 [label="return new CommandLineParser(new CommandLineParserSettings {MutuallyExclusive = true});", span="44-44", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.CreateCommandLineParser()", color=red, community=0, file="MutuallyExclusiveParsingFixture.cs"];
m9_4 [label="Exit CommandLine.Tests.MutuallyExclusiveParsingFixture.CreateCommandLineParser()", span="42-42", cluster="CommandLine.Tests.MutuallyExclusiveParsingFixture.CreateCommandLineParser()", file="MutuallyExclusiveParsingFixture.cs"];
m9_57 [label="CommandLine.Tests.MutuallyExclusiveParsingFixture", span="", file="MutuallyExclusiveParsingFixture.cs"];
m10_23 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", span="71-71", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_24 [label="var options = new NullableTypesOptions()", span="73-73", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_25 [label="bool result = base.Parser.ParseArguments(new string[] { ''-int'' }, options)", span="74-74", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_26 [label="base.AssertParserFailure(result)", span="76-76", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_27 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", span="71-71", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_13 [label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471", cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="NullableTypesParsingFixture.cs"];
m10_48 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", span="114-114", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs"];
m10_49 [label="var options = new NullableTypesOptions()", span="116-116", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs"];
m10_50 [label="Result = base.Parser.ParseArguments(new string[] { ''-d9.999'' }, options)", span="116-116", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_52 [label="Assert.AreEqual(9.999, options.DoubleValue)", span="119-119", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_51 [label="ResultShouldBeTrue()", span="118-118", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_53 [label="options = new NullableTypesOptions()", span="122-122", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs"];
m10_54 [label="Result = base.Parser.ParseArguments(new string[] { }, options)", span="122-122", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_56 [label="Assert.IsNull(options.DoubleValue)", span="125-125", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_55 [label="ResultShouldBeTrue()", span="124-124", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_57 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", span="114-114", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableDoubleOption()", file="NullableTypesParsingFixture.cs"];
m10_28 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", span="80-80", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs"];
m10_29 [label="var options = new NullableTypesOptions()", span="82-82", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs"];
m10_30 [label="Result = base.Parser.ParseArguments(new string[] { ''--enum=ReadWrite'' }, options)", span="82-82", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_32 [label="Assert.AreEqual(FileAccess.ReadWrite, options.EnumValue)", span="85-85", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_31 [label="ResultShouldBeTrue()", span="84-84", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_33 [label="options = new NullableTypesOptions()", span="88-88", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs"];
m10_34 [label="Result = base.Parser.ParseArguments(new string[] { }, options)", span="88-88", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_36 [label="Assert.IsNull(options.EnumValue)", span="91-91", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_35 [label="ResultShouldBeTrue()", span="90-90", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_37 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", span="80-80", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableEnumerationOption()", file="NullableTypesParsingFixture.cs"];
m10_38 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", span="96-96", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_39 [label="var options = new NullableTypesOptions()", span="98-98", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_40 [label="bool result = base.Parser.ParseArguments(new string[] { ''-e'', ''Overwrite'' }, options)", span="99-99", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_41 [label="base.AssertParserFailure(result)", span="101-101", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_42 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", span="96-96", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_16 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="NullableTypesParsingFixture.cs"];
m10_2 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", span="46-46", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs"];
m10_3 [label="var options = new NullableTypesOptions()", span="48-48", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs"];
m10_4 [label="Result = base.Parser.ParseArguments(new string[] { ''-i'', ''99'' }, options)", span="48-48", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_6 [label="Assert.AreEqual(99, options.IntegerValue)", span="51-51", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_5 [label="ResultShouldBeTrue()", span="50-50", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_7 [label="options = new NullableTypesOptions()", span="54-54", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs"];
m10_8 [label="Result = base.Parser.ParseArguments(new string[] { }, options)", span="54-54", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_10 [label="Assert.IsNull(options.IntegerValue)", span="57-57", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_9 [label="ResultShouldBeTrue()", span="56-56", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_11 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", span="46-46", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseNullableIntegerOption()", file="NullableTypesParsingFixture.cs"];
m10_63 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", span="139-139", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_64 [label="var options = new NullableTypesOptions()", span="141-141", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_65 [label="bool result = base.Parser.ParseArguments(new string[] { ''-d'' }, options)", span="142-142", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_66 [label="base.AssertParserFailure(result)", span="144-144", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_67 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", span="139-139", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_12 [label="Entry CommandLine.Tests.Mocks.NullableTypesOptions.NullableTypesOptions()", span="35-35", cluster="CommandLine.Tests.Mocks.NullableTypesOptions.NullableTypesOptions()", file="NullableTypesParsingFixture.cs"];
m10_0 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", span="41-41", cluster="CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", file="NullableTypesParsingFixture.cs"];
m10_1 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", span="41-41", cluster="CommandLine.Tests.NullableTypesParsingFixture.NullableTypesParsingFixture()", file="NullableTypesParsingFixture.cs"];
m10_17 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", span="62-62", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_18 [label="var options = new NullableTypesOptions()", span="64-64", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_19 [label="bool result = base.Parser.ParseArguments(new string[] { ''-i'', ''string-value'' }, options)", span="65-65", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_20 [label="base.AssertParserFailure(result)", span="67-67", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_21 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", span="62-62", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableIntegerOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_22 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="NullableTypesParsingFixture.cs"];
m10_43 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", span="105-105", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_44 [label="var options = new NullableTypesOptions()", span="107-107", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_45 [label="bool result = base.Parser.ParseArguments(new string[] { ''--enum'' }, options)", span="108-108", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_46 [label="base.AssertParserFailure(result)", span="110-110", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_47 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", span="105-105", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingNoValueToANullableEnumerationOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_58 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", span="130-130", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_59 [label="var options = new NullableTypesOptions()", span="132-132", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_60 [label="bool result = base.Parser.ParseArguments(new string[] { ''--double'', ''9,999'' }, options)", span="133-133", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_61 [label="base.AssertParserFailure(result)", span="135-135", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_62 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", span="130-130", cluster="CommandLine.Tests.NullableTypesParsingFixture.PassingBadValueToANullableDoubleOptionFails()", file="NullableTypesParsingFixture.cs"];
m10_68 [label="Entry CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", span="148-148", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs"];
m10_69 [label="var options = new NullableTypesOptions()", span="150-150", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs"];
m10_70 [label="Result = base.Parser.ParseArguments(new string[] { ''--string'', ''alone'' }, options)", span="150-150", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_72 [label="Assert.AreEqual(''alone'', options.StringValue)", span="153-153", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_71 [label="ResultShouldBeTrue()", span="152-152", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_73 [label="options = new NullableTypesOptions()", span="156-156", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs"];
m10_74 [label="Result = base.Parser.ParseArguments(\r\n                new string[] { ''-d1.789'', ''--int'', ''10099'', ''-stogether'', ''--enum'', ''Read'' }, options)", span="156-157", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_76 [label="Assert.AreEqual(1.789, options.DoubleValue)", span="160-160", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_77 [label="Assert.AreEqual(10099, options.IntegerValue)", span="161-161", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_78 [label="Assert.AreEqual(''together'', options.StringValue)", span="162-162", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_79 [label="Assert.AreEqual(FileAccess.Read, options.EnumValue)", span="163-163", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=green, community=0, file="NullableTypesParsingFixture.cs"];
m10_75 [label="ResultShouldBeTrue()", span="159-159", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", color=red, community=0, file="NullableTypesParsingFixture.cs"];
m10_80 [label="Exit CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", span="148-148", cluster="CommandLine.Tests.NullableTypesParsingFixture.ParseStringOptionAndNullableValueTypes()", file="NullableTypesParsingFixture.cs"];
m10_14 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60", cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="NullableTypesParsingFixture.cs"];
m10_81 [label="CommandLine.Tests.NullableTypesParsingFixture", span="", file="NullableTypesParsingFixture.cs"];
m11_12 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", span="57-57", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_13 [label="var options = new SimpleOptionsWithArray()", span="59-59", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_14 [label="Result = base.Parser.ParseArguments(new string[] { ''--strarr'', ''alfa'', ''beta'', ''gamma'' }, options)", span="59-59", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_16 [label="base.ElementsShouldBeEqual(new string[] { ''alfa'', ''beta'', ''gamma'' }, options.StringArrayValue)", span="62-62", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_15 [label="ResultShouldBeTrue()", span="61-61", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_17 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", span="57-57", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_55 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", span="123-123", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs"];
m11_56 [label="var options = new SimpleOptionsWithArrayAndValueList()", span="125-125", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs"];
m11_57 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-shere'', ''-i999'', ''--strarr=0'', ''1'', ''2'', ''3'', ''4'', ''5'', ''6'', ''7'', ''8'', ''9'' , ''--switch'', ''f1.xml'', ''f2.xml''}, options)", span="125-126", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_59 [label="Assert.AreEqual(''here'', options.StringValue)", span="129-129", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_60 [label="Assert.AreEqual(999, options.IntegerValue)", span="130-130", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_61 [label="base.ElementsShouldBeEqual(new string[] { ''0'', ''1'', ''2'', ''3'', ''4'', ''5'', ''6'', ''7'', ''8'', ''9'' }, options.StringArrayValue)", span="131-131", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_62 [label="Assert.IsTrue(options.BooleanValue)", span="132-132", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_63 [label="base.ElementsShouldBeEqual(new string[] { ''f1.xml'', ''f2.xml'' }, options.Items)", span="133-133", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_58 [label="ResultShouldBeTrue()", span="128-128", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_64 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", span="123-123", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithValueList()", file="OptionArrayAttributeParsingFixture.cs"];
m11_65 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithArrayAndValueList.SimpleOptionsWithArrayAndValueList()", span="35-35", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithArrayAndValueList.SimpleOptionsWithArrayAndValueList()", file="OptionArrayAttributeParsingFixture.cs"];
m11_82 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", span="164-164", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_83 [label="var options = new SimpleOptionsWithArray()", span="166-166", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_84 [label="bool result = base.Parser.ParseArguments(new string[] { ''-y'', ''one'', ''2'', ''3'' }, options)", span="167-167", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_85 [label="base.AssertParserFailure(result)", span="169-169", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_86 [label="options = new SimpleOptionsWithArray()", span="171-171", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_87 [label="result = base.Parser.ParseArguments(new string[] { ''-yone'', ''2'', ''3'' }, options)", span="172-172", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_88 [label="base.AssertParserFailure(result)", span="174-174", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_89 [label="options = new SimpleOptionsWithArray()", span="176-176", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_90 [label="result = base.Parser.ParseArguments(new string[] { ''--intarr'', ''1'', ''two'', ''3'' }, options)", span="177-177", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_91 [label="base.AssertParserFailure(result)", span="179-179", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_92 [label="options = new SimpleOptionsWithArray()", span="181-181", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_93 [label="result = base.Parser.ParseArguments(new string[] { ''--intarr=1'', ''2'', ''three'' }, options)", span="182-182", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_94 [label="base.AssertParserFailure(result)", span="184-184", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_95 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", span="164-164", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingBadValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_18 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", span="67-67", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", file="OptionArrayAttributeParsingFixture.cs"];
m11_19 [label="var options = new SimpleOptionsWithArray()", span="69-69", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", file="OptionArrayAttributeParsingFixture.cs"];
m11_20 [label="Result = base.Parser.ParseArguments(new string[] { ''-zapple'', ''kiwi'' }, options)", span="69-69", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_22 [label="base.ElementsShouldBeEqual(new string[] { ''apple'', ''kiwi'' }, options.StringArrayValue)", span="72-72", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_21 [label="ResultShouldBeTrue()", span="71-71", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_23 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", span="67-67", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithValueAdjacent()", file="OptionArrayAttributeParsingFixture.cs"];
m11_96 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", span="189-189", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_97 [label="var options = new SimpleOptionsWithArray()", span="191-191", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_98 [label="bool result = base.Parser.ParseArguments(new string[] { ''-y'' }, options)", span="192-192", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_99 [label="base.AssertParserFailure(result)", span="194-194", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_100 [label="options = new SimpleOptionsWithArray()", span="196-196", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_101 [label="result = base.Parser.ParseArguments(new string[] { ''--intarr'' }, options)", span="197-197", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_102 [label="base.AssertParserFailure(result)", span="199-199", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_103 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", span="189-189", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAnIntegerArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_169 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", span="338-338", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_170 [label="base.Parser.ParseArguments(new string[] { ''-w'', ''1'', ''2'', ''3'' }, new SimpleOptionsWithBadOptionArray())", span="340-340", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_171 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", span="338-338", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_184 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="OptionArrayAttributeParsingFixture.cs"];
m11_45 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", span="109-109", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs"];
m11_46 [label="var options = new SimpleOptionsWithArray()", span="111-111", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs"];
m11_47 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-i'', ''191919'', ''-z'', ''one'', ''two'', ''three'', ''--switch'', ''--string=near'' }, options)", span="111-112", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_49 [label="Assert.AreEqual(191919, options.IntegerValue)", span="115-115", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_50 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'' }, options.StringArrayValue)", span="116-116", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_51 [label="Assert.IsTrue(options.BooleanValue)", span="117-117", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_52 [label="Assert.AreEqual(''near'', options.StringValue)", span="118-118", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_48 [label="ResultShouldBeTrue()", span="114-114", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_53 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", span="109-109", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameWithOptionsBeforeAndAfter()", file="OptionArrayAttributeParsingFixture.cs"];
m11_162 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", span="324-324", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_163 [label="base.Parser.ParseArguments(new string[] { ''-v'', ''a'', ''b'', ''c'' }, new SimpleOptionsWithBadOptionArray())", span="326-326", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_164 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", span="324-324", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_194 [label="Entry CommandLine.Tests.OptionsWithUIntArray.OptionsWithUIntArray()", span="34-34", cluster="CommandLine.Tests.OptionsWithUIntArray.OptionsWithUIntArray()", file="OptionArrayAttributeParsingFixture.cs"];
m11_10 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", span="58-58", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserSuccess(bool)", file="OptionArrayAttributeParsingFixture.cs"];
m11_24 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", span="77-77", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", file="OptionArrayAttributeParsingFixture.cs"];
m11_25 [label="var options = new SimpleOptionsWithArray()", span="79-79", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", file="OptionArrayAttributeParsingFixture.cs"];
m11_26 [label="Result = base.Parser.ParseArguments(new string[] { ''--strarr=apple'', ''kiwi'' }, options)", span="79-79", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_28 [label="base.ElementsShouldBeEqual(new string[] { ''apple'', ''kiwi'' }, options.StringArrayValue)", span="82-82", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_27 [label="ResultShouldBeTrue()", span="81-81", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_29 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", span="77-77", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingLongNameWithEqualSign()", file="OptionArrayAttributeParsingFixture.cs"];
m11_130 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", span="257-257", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs"];
m11_131 [label="var options = new SimpleOptionsWithArray()", span="259-259", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs"];
m11_132 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''--string=after''\r\n            }, options)", span="259-264", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_134 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="267-267", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_135 [label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="268-268", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_136 [label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="269-269", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_137 [label="Assert.AreEqual(''after'', options.StringValue)", span="270-270", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_133 [label="ResultShouldBeTrue()", span="266-266", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_138 [label="options = new SimpleOptionsWithArray()", span="273-273", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs"];
m11_139 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''--string'', ''before'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4''\r\n            }, options)", span="273-278", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_141 [label="Assert.AreEqual(''before'', options.StringValue)", span="281-281", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_142 [label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="282-282", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_143 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="283-283", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_144 [label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="284-284", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_140 [label="ResultShouldBeTrue()", span="280-280", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_145 [label="options = new SimpleOptionsWithArray()", span="287-287", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs"];
m11_146 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-s'', ''near-the-center'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four''\r\n            }, options)", span="287-292", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_148 [label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="295-295", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_149 [label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="296-296", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_150 [label="Assert.AreEqual(''near-the-center'', options.StringValue)", span="297-297", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_151 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="298-298", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_147 [label="ResultShouldBeTrue()", span="294-294", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_152 [label="options = new SimpleOptionsWithArray()", span="301-301", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs"];
m11_153 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''--switch'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-i'', ''1234'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''--string'', ''I'm really playing with the parser!''\r\n            }, options)", span="301-308", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_155 [label="Assert.IsTrue(options.BooleanValue)", span="311-311", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_156 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="312-312", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_157 [label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="313-313", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_158 [label="Assert.AreEqual(1234, options.IntegerValue)", span="314-314", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_159 [label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="315-315", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_160 [label="Assert.AreEqual(''I'm really playing with the parser!'', options.StringValue)", span="316-316", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_154 [label="ResultShouldBeTrue()", span="310-310", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_161 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", span="257-257", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationTwo()", file="OptionArrayAttributeParsingFixture.cs"];
m11_2 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", span="47-47", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_3 [label="var options = new SimpleOptionsWithArray()", span="49-49", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_4 [label="Result = base.Parser.ParseArguments(new string[] { ''-z'', ''alfa'', ''beta'', ''gamma'' }, options)", span="49-49", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_6 [label="base.ElementsShouldBeEqual(new string[] { ''alfa'', ''beta'', ''gamma'' }, options.StringArrayValue)", span="52-52", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_5 [label="ResultShouldBeTrue()", span="51-51", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_7 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", span="47-47", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_66 [label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="OptionArrayAttributeParsingFixture.cs"];
m11_54 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="OptionArrayAttributeParsingFixture.cs"];
m11_165 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithBadOptionArray.SimpleOptionsWithBadOptionArray()", span="37-37", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithBadOptionArray.SimpleOptionsWithBadOptionArray()", file="OptionArrayAttributeParsingFixture.cs"];
m11_195 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", span="385-385", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs"];
m11_196 [label="var options = new OptionsWithUIntArray()", span="387-387", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs"];
m11_197 [label="Result = CommandLineParser.Default.ParseArguments(new string[] {\r\n                ''-s'', ''just a string'',\r\n                ''-o'', ''10'', ''20'', ''30'', ''40'',\r\n                ''-t'', ''11'', ''22'', ''33'', ''44'',\r\n                ''-b''\r\n            }, options)", span="387-392", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_199 [label="Assert.AreEqual(''just a string'', options.SomeStringValue)", span="395-395", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_200 [label="base.ElementsShouldBeEqual(new uint[] {10, 20, 30, 40}, options.ArrayOne)", span="396-396", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_201 [label="base.ElementsShouldBeEqual(new uint[] {11, 22, 33, 44}, options.ArrayTwo)", span="397-397", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_202 [label="Assert.AreEqual(true, options.SomeBooleanValue)", span="398-398", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_198 [label="ResultShouldBeTrue()", span="394-394", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_203 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", span="385-385", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArrayUsingShortNames()", file="OptionArrayAttributeParsingFixture.cs"];
m11_38 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", span="98-98", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs"];
m11_39 [label="var options = new SimpleOptionsWithArray()", span="100-100", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs"];
m11_40 [label="Result = base.Parser.ParseArguments(new string[] { ''-s'', ''before'', ''-z'', ''one'', ''two'', ''three'' }, options)", span="100-100", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_42 [label="Assert.AreEqual(''before'', options.StringValue)", span="103-103", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_43 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'' }, options.StringArrayValue)", span="104-104", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_41 [label="ResultShouldBeTrue()", span="102-102", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_44 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", span="98-98", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionBefore()", file="OptionArrayAttributeParsingFixture.cs"];
m11_11 [label="Entry CommandLine.Tests.BaseFixture.AssertArrayItemEqual<T>(T[], T[])", span="37-37", cluster="CommandLine.Tests.BaseFixture.AssertArrayItemEqual<T>(T[], T[])", file="OptionArrayAttributeParsingFixture.cs"];
m11_9 [label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471", cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="OptionArrayAttributeParsingFixture.cs"];
m11_75 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="OptionArrayAttributeParsingFixture.cs"];
m11_185 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", span="367-367", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs"];
m11_186 [label="var options = new OptionsWithUIntArray()", span="369-369", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs"];
m11_187 [label="Result = CommandLineParser.Default.ParseArguments(new string[] {\r\n                ''--somestr'', ''just a string'',\r\n                ''--arrayone'', ''10'', ''20'', ''30'', ''40'',\r\n                ''--arraytwo'', ''11'', ''22'', ''33'', ''44'',\r\n                ''--somebool''\r\n            }, options)", span="369-374", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_189 [label="Assert.AreEqual(''just a string'', options.SomeStringValue)", span="377-377", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_190 [label="base.ElementsShouldBeEqual(new uint[] {10, 20, 30, 40}, options.ArrayOne)", span="378-378", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_191 [label="base.ElementsShouldBeEqual(new uint[] {11, 22, 33, 44}, options.ArrayTwo)", span="379-379", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_192 [label="Assert.AreEqual(true, options.SomeBooleanValue)", span="380-380", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_188 [label="ResultShouldBeTrue()", span="376-376", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_193 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", span="367-367", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseTwoUIntConsecutiveArray()", file="OptionArrayAttributeParsingFixture.cs"];
m11_110 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", span="217-217", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs"];
m11_111 [label="var options = new SimpleOptionsWithArray()", span="219-219", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs"];
m11_112 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4''\r\n            }, options)", span="219-223", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_114 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="226-226", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_115 [label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="227-227", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_116 [label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="228-228", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_113 [label="ResultShouldBeTrue()", span="225-225", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_117 [label="options = new SimpleOptionsWithArray()", span="231-231", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs"];
m11_118 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four'',\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4''\r\n            }, options)", span="231-235", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_120 [label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="238-238", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_121 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="239-239", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_122 [label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="240-240", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_119 [label="ResultShouldBeTrue()", span="237-237", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_123 [label="options = new SimpleOptionsWithArray()", span="243-243", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs"];
m11_124 [label="Result = base.Parser.ParseArguments(new string[] {\r\n                ''-q'', ''0.1'', ''0.2'', ''0.3'', ''0.4'',\r\n                ''-y'', ''1'', ''2'', ''3'', ''4'',\r\n                ''-z'', ''one'', ''two'', ''three'', ''four''\r\n            }, options)", span="243-247", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_126 [label="base.ElementsShouldBeEqual(new double[] { .1, .2, .3, .4 }, options.DoubleArrayValue)", span="250-250", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_127 [label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3, 4 }, options.IntegerArrayValue)", span="251-251", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_128 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'', ''four'' }, options.StringArrayValue)", span="252-252", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_125 [label="ResultShouldBeTrue()", span="249-249", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_129 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", span="217-217", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDifferentArraysTogether_CombinationOne()", file="OptionArrayAttributeParsingFixture.cs"];
m11_76 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", span="154-154", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_77 [label="var options = new SimpleOptionsWithArray()", span="156-156", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_78 [label="Result = base.Parser.ParseArguments(new string[] { ''-y'', ''1'', ''2'', ''3'' }, options)", span="156-156", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_80 [label="base.ElementsShouldBeEqual(new int[] { 1, 2, 3 }, options.IntegerArrayValue)", span="159-159", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_79 [label="ResultShouldBeTrue()", span="158-158", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_81 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", span="154-154", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseIntegerArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_104 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", span="205-205", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_105 [label="var options = new SimpleOptionsWithArray()", span="207-207", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_106 [label="Result = base.Parser.ParseArguments(new string[] { ''-q'', ''0.1'', ''2.3'', ''0.9'' }, options)", span="207-207", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_108 [label="base.ElementsShouldBeEqual(new double[] { .1, 2.3, .9 }, options.DoubleArrayValue)", span="210-210", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_107 [label="ResultShouldBeTrue()", span="209-209", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_109 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", span="205-205", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseDoubleArrayOptionUsingShortName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_8 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithArray.SimpleOptionsWithArray()", span="35-35", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithArray.SimpleOptionsWithArray()", file="OptionArrayAttributeParsingFixture.cs"];
m11_175 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", span="351-351", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs"];
m11_176 [label="var actualCulture = Thread.CurrentThread.CurrentCulture", span="353-353", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs"];
m11_177 [label="Thread.CurrentThread.CurrentCulture = new CultureInfo(''it-IT'')", span="354-354", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs"];
m11_182 [label="Thread.CurrentThread.CurrentCulture = actualCulture", span="361-361", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs"];
m11_178 [label="var options = new SimpleOptionsWithArray()", span="355-355", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs"];
m11_179 [label="Result = base.Parser.ParseArguments(new string[] { ''-q'', ''1,2'', ''1,23'', ''1,234'' }, options)", span="355-355", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_181 [label="base.ElementsShouldBeEqual(new double[] { 1.2, 1.23, 1.234 }, options.DoubleArrayValue)", span="358-358", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_180 [label="ResultShouldBeTrue()", span="357-357", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_183 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", span="351-351", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseCultureSpecificNumber()", file="OptionArrayAttributeParsingFixture.cs"];
m11_67 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", span="138-138", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_68 [label="var options = new SimpleOptionsWithArray()", span="140-140", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_69 [label="bool result = base.Parser.ParseArguments(new string[] { ''-z'' }, options)", span="141-141", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_70 [label="base.AssertParserFailure(result)", span="143-143", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_71 [label="options = new SimpleOptionsWithArray()", span="145-145", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_72 [label="result = base.Parser.ParseArguments(new string[] { ''--strarr'' }, options)", span="146-146", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_73 [label="base.AssertParserFailure(result)", span="148-148", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_74 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", span="138-138", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.PassingNoValueToAStringArrayOptionFails()", file="OptionArrayAttributeParsingFixture.cs"];
m11_166 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", span="331-331", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_167 [label="base.Parser.ParseArguments(new string[] { ''--bstrarr'', ''a'', ''b'', ''c'' }, new SimpleOptionsWithBadOptionArray())", span="333-333", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_168 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", span="331-331", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToStringWithLongName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_172 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", span="345-345", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_173 [label="base.Parser.ParseArguments(new string[] { ''--bintarr'', ''1'', ''2'', ''3'' }, new SimpleOptionsWithBadOptionArray())", span="347-347", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_174 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", span="345-345", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.WillThrowExceptionIfOptionArrayAttributeBoundToIntegerWithLongName()", file="OptionArrayAttributeParsingFixture.cs"];
m11_0 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", span="42-42", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", file="OptionArrayAttributeParsingFixture.cs"];
m11_1 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", span="42-42", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.OptionArrayAttributeParsingFixture()", file="OptionArrayAttributeParsingFixture.cs"];
m11_30 [label="Entry CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", span="87-87", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs"];
m11_31 [label="var options = new SimpleOptionsWithArray()", span="89-89", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs"];
m11_32 [label="Result = base.Parser.ParseArguments(new string[] { ''-z'', ''one'', ''two'', ''three'', ''-s'', ''after'' }, options)", span="89-89", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_34 [label="base.ElementsShouldBeEqual(new string[] { ''one'', ''two'', ''three'' }, options.StringArrayValue)", span="92-92", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_35 [label="Assert.AreEqual(''after'', options.StringValue)", span="93-93", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", color=green, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_33 [label="ResultShouldBeTrue()", span="91-91", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", color=red, community=0, file="OptionArrayAttributeParsingFixture.cs"];
m11_36 [label="Exit CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", span="87-87", cluster="CommandLine.Tests.OptionArrayAttributeParsingFixture.ParseStringArrayOptionUsingShortNameAndStringOptionAfter()", file="OptionArrayAttributeParsingFixture.cs"];
m11_204 [label="CommandLine.Tests.OptionArrayAttributeParsingFixture", span="", file="OptionArrayAttributeParsingFixture.cs"];
m12_40 [label="Entry CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", span="114-114", cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", file="OptionMapFixture.cs"];
m12_41 [label="var longOi = _optionMap[''nomorebugshere'']", span="116-116", cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", file="OptionMapFixture.cs"];
m12_42 [label="Assert.IsNull(longOi)", span="117-117", cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", color=red, community=0, file="OptionMapFixture.cs"];
m12_43 [label="Exit CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", span="114-114", cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentLongOption()", file="OptionMapFixture.cs"];
m12_6 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", span="1553-1553", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings(bool)", file="OptionMapFixture.cs"];
m12_16 [label="Entry Unk.CreateOptionInfo", span="", cluster="Unk.CreateOptionInfo", file="OptionMapFixture.cs"];
m12_29 [label="Entry CommandLine.Tests.OptionMapFixture.ManageOptions()", span="99-99", cluster="CommandLine.Tests.OptionMapFixture.ManageOptions()", file="OptionMapFixture.cs"];
m12_30 [label="Assert.AreSame(_omBuilder.Options[0], _optionMap[_omBuilder.Names[0]])", span="101-101", cluster="CommandLine.Tests.OptionMapFixture.ManageOptions()", color=red, community=0, file="OptionMapFixture.cs"];
m12_31 [label="Assert.AreSame(_omBuilder.Options[1], _optionMap[_omBuilder.Names[1]])", span="102-102", cluster="CommandLine.Tests.OptionMapFixture.ManageOptions()", color=green, community=0, file="OptionMapFixture.cs"];
m12_32 [label="Assert.AreSame(_omBuilder.Options[2], _optionMap[_omBuilder.Names[2]])", span="103-103", cluster="CommandLine.Tests.OptionMapFixture.ManageOptions()", color=green, community=0, file="OptionMapFixture.cs"];
m12_33 [label="Exit CommandLine.Tests.OptionMapFixture.ManageOptions()", span="99-99", cluster="CommandLine.Tests.OptionMapFixture.ManageOptions()", file="OptionMapFixture.cs"];
m12_39 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="OptionMapFixture.cs"];
m12_8 [label="Entry CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", span="53-53", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs"];
m12_9 [label="var oa = new OptionAttribute(shortName, longName)", span="55-55", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs"];
m12_10 [label="var oi = oa.CreateOptionInfo()", span="56-56", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs"];
m12_11 [label="_optionMap[oa.UniqueName] = oi", span="57-57", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs"];
m12_13 [label="_names.Add(oa.UniqueName)", span="59-59", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs"];
m12_12 [label="_options.Add(oi)", span="58-58", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs"];
m12_14 [label="Exit CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", span="53-53", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.AppendOption(string, string)", file="OptionMapFixture.cs"];
m12_44 [label="Entry CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", span="120-120", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_45 [label="map == null", span="122-122", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_53 [label="map[attribute1.UniqueName] = option1", span="133-133", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_54 [label="map[attribute2.UniqueName] = option2", span="134-134", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_55 [label="map[attribute3.UniqueName] = option3", span="135-135", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_56 [label="optionCache != null", span="137-137", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_57 [label="optionCache[attribute1.UniqueName] = option1", span="139-139", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_58 [label="optionCache[attribute1.UniqueName] = option2", span="140-140", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_59 [label="optionCache[attribute2.UniqueName]= option3", span="141-141", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_60 [label="return map;", span="144-144", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_46 [label="map = new OptionMap(3, new CommandLineParserSettings(true))", span="123-123", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", color=red, community=0, file="OptionMapFixture.cs"];
m12_47 [label="var attribute1 = new OptionAttribute(''p'', ''pretend'')", span="125-125", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", color=green, community=0];
m12_48 [label="var attribute2 = new OptionAttribute(null, ''newuse'')", span="126-126", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs", color=green, community=0];
m12_50 [label="var option1 = attribute1.CreateOptionInfo()", span="129-129", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_49 [label="var attribute3 = new OptionAttribute(''D'', null)", span="127-127", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_51 [label="var option2 = attribute2.CreateOptionInfo()", span="130-130", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_52 [label="var option3 = attribute3.CreateOptionInfo()", span="131-131", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_61 [label="Exit CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", span="120-120", cluster="CommandLine.Tests.OptionMapFixture.CreateMap(ref CommandLine.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>)", file="OptionMapFixture.cs"];
m12_19 [label="Entry CommandLine.Tests.OptionMapFixture.CreateInstance()", span="82-82", cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs"];
m12_20 [label="_omBuilder = new OptionMapBuilder(3)", span="84-84", cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs"];
m12_21 [label="_omBuilder.AppendOption(''p'', ''pretend'')", span="85-85", cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs"];
m12_22 [label="_omBuilder.AppendOption(null, ''newuse'')", span="86-86", cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs"];
m12_23 [label="_omBuilder.AppendOption(''D'', null)", span="87-87", cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs"];
m12_24 [label="_optionMap = _omBuilder.OptionMap", span="89-89", cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs"];
m12_25 [label="Exit CommandLine.Tests.OptionMapFixture.CreateInstance()", span="82-82", cluster="CommandLine.Tests.OptionMapFixture.CreateInstance()", file="OptionMapFixture.cs"];
m12_17 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="OptionMapFixture.cs"];
m12_7 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="OptionMapFixture.cs"];
m12_18 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="OptionMapFixture.cs"];
m12_26 [label="Entry CommandLine.Tests.OptionMapFixture.ShutdownInstance()", span="93-93", cluster="CommandLine.Tests.OptionMapFixture.ShutdownInstance()", file="OptionMapFixture.cs"];
m12_27 [label="_optionMap = null", span="95-95", cluster="CommandLine.Tests.OptionMapFixture.ShutdownInstance()", file="OptionMapFixture.cs"];
m12_28 [label="Exit CommandLine.Tests.OptionMapFixture.ShutdownInstance()", span="93-93", cluster="CommandLine.Tests.OptionMapFixture.ShutdownInstance()", file="OptionMapFixture.cs"];
m12_0 [label="Entry CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", span="46-46", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs"];
m12_1 [label="_optionMap = new OptionMap(capacity, new CommandLineParserSettings(true))", span="48-48", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs"];
m12_2 [label="_options = new List<OptionInfo>(capacity)", span="49-49", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs"];
m12_3 [label="_names = new List<string>(capacity)", span="50-50", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs"];
m12_4 [label="Exit CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", span="46-46", cluster="CommandLine.Tests.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="OptionMapFixture.cs"];
m12_34 [label="Entry Unk.AreSame", span="", cluster="Unk.AreSame", file="OptionMapFixture.cs"];
m12_15 [label="Entry CommandLine.OptionAttribute.OptionAttribute(string, string)", span="204-204", cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="OptionMapFixture.cs"];
m12_5 [label="Entry CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="1086-1086", cluster="CommandLine.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMapFixture.cs"];
m12_35 [label="Entry CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", span="107-107", cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", file="OptionMapFixture.cs"];
m12_36 [label="var shortOi = _optionMap[''y'']", span="109-109", cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", file="OptionMapFixture.cs"];
m12_37 [label="Assert.IsNull(shortOi)", span="110-110", cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", color=red, community=0, file="OptionMapFixture.cs"];
m12_38 [label="Exit CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", span="107-107", cluster="CommandLine.Tests.OptionMapFixture.RetrieveNotExistentShortOption()", file="OptionMapFixture.cs"];
m12_62 [label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder", span="", file="OptionMapFixture.cs"];
m13_10 [label="Entry CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", span="101-101", cluster="CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", file="ReflectionUtilFixture.cs"];
m13_11 [label="_target = new MockObject()", span="103-103", cluster="CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", file="ReflectionUtilFixture.cs"];
m13_12 [label="Exit CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", span="101-101", cluster="CommandLine.Tests.ReflectionUtilFixture.CreateInstance()", file="ReflectionUtilFixture.cs"];
m13_30 [label="Entry CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", span="132-132", cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs"];
m13_31 [label="var pair = ReflectionUtil.RetrieveMethod<MockAttribute>(_target)", span="134-134", cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs"];
m13_32 [label="Assert.IsNotNull(pair)", span="136-136", cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", color=red, community=0, file="ReflectionUtilFixture.cs"];
m13_33 [label="Assert.AreEqual(''DoNothing'', pair.Left.Name)", span="137-137", cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", color=green, community=0, file="ReflectionUtilFixture.cs"];
m13_34 [label="Exit CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", span="132-132", cluster="CommandLine.Tests.ReflectionUtilFixture.GetMethodByAttribute()", file="ReflectionUtilFixture.cs"];
m13_16 [label="Entry CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", span="113-113", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs"];
m13_17 [label="var list = ReflectionUtil.RetrievePropertyList<MockAttribute>(_target)", span="115-115", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs"];
m13_18 [label="Assert.AreEqual(2, list.Count)", span="117-117", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", color=red, community=0, file="ReflectionUtilFixture.cs"];
m13_19 [label="Assert.AreEqual(''StringField'', list[0].Left.Name)", span="118-118", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", color=green, community=0, file="ReflectionUtilFixture.cs"];
m13_20 [label="Assert.AreEqual(''BooleanField'', list[1].Left.Name)", span="119-119", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", color=green, community=0, file="ReflectionUtilFixture.cs"];
m13_21 [label="PrintFieldList<MockAttribute>(list)", span="121-121", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs"];
m13_22 [label="var anotherList = ReflectionUtil.RetrievePropertyList<AnotherMockAttribute>(_target)", span="123-123", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs"];
m13_23 [label="Assert.AreEqual(1, anotherList.Count)", span="125-125", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", color=red, community=0, file="ReflectionUtilFixture.cs"];
m13_24 [label="Assert.AreEqual(''IntField'', anotherList[0].Left.Name)", span="126-126", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", color=green, community=0, file="ReflectionUtilFixture.cs"];
m13_25 [label="PrintFieldList<AnotherMockAttribute>(anotherList)", span="128-128", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs"];
m13_26 [label="Exit CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", span="113-113", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsByAttribute()", file="ReflectionUtilFixture.cs"];
m13_0 [label="Entry CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", span="58-58", cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", file="ReflectionUtilFixture.cs"];
m13_1 [label="IntField = 0", span="60-60", cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", file="ReflectionUtilFixture.cs"];
m13_2 [label="Exit CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", span="58-58", cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.MockObject()", file="ReflectionUtilFixture.cs"];
m13_37 [label="Entry CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", span="141-141", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs"];
m13_38 [label="var list = ReflectionUtil.RetrievePropertyAttributeList<MockWithValueAttribute>(new AnotherMockObject())", span="143-143", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs"];
m13_39 [label="Assert.IsNotNull(list)", span="145-145", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", color=red, community=0, file="ReflectionUtilFixture.cs"];
m13_40 [label="Assert.AreEqual(3, list.Count)", span="146-146", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", color=green, community=0, file="ReflectionUtilFixture.cs"];
m13_41 [label="Assert.AreEqual(''applied to X'', list[0].StringValue)", span="147-147", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", color=green, community=0, file="ReflectionUtilFixture.cs"];
m13_42 [label="Assert.AreEqual(''applied to Y'', list[1].StringValue)", span="148-148", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", color=green, community=0, file="ReflectionUtilFixture.cs"];
m13_43 [label="Assert.AreEqual(''applied to Z'', list[2].StringValue)", span="149-149", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", color=green, community=0, file="ReflectionUtilFixture.cs"];
m13_44 [label="Exit CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", span="141-141", cluster="CommandLine.Tests.ReflectionUtilFixture.GetFieldsAttributeList()", file="ReflectionUtilFixture.cs"];
m13_45 [label="Entry CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", span="1920-1920", cluster="CommandLine.ReflectionUtil.RetrievePropertyAttributeList<TAttribute>(object)", file="ReflectionUtilFixture.cs"];
m13_35 [label="Entry CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", span="1882-1882", cluster="CommandLine.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="ReflectionUtilFixture.cs"];
m13_50 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ReflectionUtilFixture.cs"];
m13_5 [label="Entry CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", span="80-80", cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs"];
m13_6 [label="X = 0", span="82-82", cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs"];
m13_7 [label="Y = 0", span="83-83", cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs"];
m13_8 [label="Z = 0", span="84-84", cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs"];
m13_9 [label="Exit CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", span="80-80", cluster="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject.AnotherMockObject()", file="ReflectionUtilFixture.cs"];
m13_27 [label="Entry CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="1856-1856", cluster="CommandLine.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="ReflectionUtilFixture.cs"];
m13_51 [label="Entry System.Console.WriteLine(string, object)", span="0-0", cluster="System.Console.WriteLine(string, object)", file="ReflectionUtilFixture.cs"];
m13_36 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="ReflectionUtilFixture.cs"];
m13_13 [label="Entry CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", span="107-107", cluster="CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", file="ReflectionUtilFixture.cs"];
m13_14 [label="_target = null", span="109-109", cluster="CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", file="ReflectionUtilFixture.cs"];
m13_15 [label="Exit CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", span="107-107", cluster="CommandLine.Tests.ReflectionUtilFixture.ShutdownInstance()", file="ReflectionUtilFixture.cs"];
m13_29 [label="Entry CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", span="181-181", cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs"];
m13_46 [label="Console.WriteLine(''Attribute: {0}'', list[0].Right.GetType())", span="184-184", cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs"];
m13_47 [label=list, span="185-185", cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs"];
m13_48 [label="Console.WriteLine(''\tField: {0}'', pair.Left.Name)", span="187-187", cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs"];
m13_49 [label="Exit CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", span="181-181", cluster="CommandLine.Tests.ReflectionUtilFixture.PrintFieldList<TAttribute>(System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>)", file="ReflectionUtilFixture.cs"];
m13_3 [label="Entry CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", span="73-73", cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", file="ReflectionUtilFixture.cs"];
m13_4 [label="Exit CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", span="73-73", cluster="CommandLine.Tests.ReflectionUtilFixture.MockObject.DoNothing()", file="ReflectionUtilFixture.cs"];
m13_52 [label="CommandLine.Tests.ReflectionUtilFixture.MockObject", span="", file="ReflectionUtilFixture.cs"];
m13_53 [label="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject", span="", file="ReflectionUtilFixture.cs"];
m14_10 [label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471", cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="Singleton.cs"];
m14_13 [label="Entry System.Console.WriteLine(object)", span="0-0", cluster="System.Console.WriteLine(object)", file="Singleton.cs"];
m14_19 [label="Entry CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", span="35-35", cluster="CommandLine.Tests.Mocks.OptionsWithMultipleSet.OptionsWithMultipleSet()", file="Singleton.cs"];
m14_0 [label="Entry CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", span="40-40", cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs"];
m14_1 [label="var options = new SimpleOptions()", span="42-42", cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs"];
m14_2 [label="bool result = CommandLineParser.Default.ParseArguments(\r\n                    new string[] { ''-s'', ''another string'', ''-i100'', ''--switch'' }, options)", span="43-44", cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs"];
m14_4 [label="Assert.AreEqual(''another string'', options.StringValue)", span="47-47", cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", color=green, community=0, file="Singleton.cs"];
m14_5 [label="Assert.AreEqual(100, options.IntegerValue)", span="48-48", cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", color=green, community=0, file="Singleton.cs"];
m14_6 [label="Assert.AreEqual(true, options.BooleanValue)", span="49-49", cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", color=green, community=0, file="Singleton.cs"];
m14_7 [label="Console.WriteLine(options)", span="50-50", cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs", color=green, community=0];
m14_3 [label="Assert.IsTrue(result)", span="46-46", cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", color=red, community=0, file="Singleton.cs"];
m14_8 [label="Exit CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", span="40-40", cluster="CommandLine.Tests.Singleton.ParseStringIntegerBoolOptions()", file="Singleton.cs"];
m14_14 [label="Entry CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", span="54-54", cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs"];
m14_15 [label="var options = new OptionsWithMultipleSet()", span="56-56", cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs"];
m14_16 [label="bool result = CommandLineParser.Default.ParseArguments(\r\n                new string[] { ''-r1'', ''-g2'', ''-b3'', ''-h4'', ''-s5'', ''-v6'' }, options)", span="57-58", cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs"];
m14_17 [label="Assert.IsTrue(result)", span="60-60", cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", color=red, community=0, file="Singleton.cs"];
m14_18 [label="Exit CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", span="54-54", cluster="CommandLine.Tests.Singleton.DefaultDoesntSupportMutuallyExclusiveOptions()", file="Singleton.cs"];
m14_9 [label="Entry CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", span="33-33", cluster="CommandLine.Tests.Mocks.SimpleOptions.SimpleOptions()", file="Singleton.cs"];
m14_11 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="Singleton.cs"];
m16_19 [label="Entry CommandLine.Tests.Mocks.OptionsOfPlugInX.OptionsOfPlugInX()", span="41-41", cluster="CommandLine.Tests.Mocks.OptionsOfPlugInX.OptionsOfPlugInX()", file="UnknownArgumentsFixture.cs"];
m16_15 [label="Entry CommandLine.CommandLineParserSettings.CommandLineParserSettings()", span="1543-1543", cluster="CommandLine.CommandLineParserSettings.CommandLineParserSettings()", file="UnknownArgumentsFixture.cs"];
m16_14 [label="Entry CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", span="1692-1692", cluster="CommandLine.CommandLineParser.CommandLineParser(CommandLine.CommandLineParserSettings)", file="UnknownArgumentsFixture.cs"];
m16_0 [label="Entry CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", span="41-41", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs"];
m16_1 [label="string[] args = { ''--plugin'', ''addonX'', ''--filename'', ''input.dat'' }", span="43-43", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs"];
m16_2 [label="var appOptions = new OptionsForAppWithPlugIns()", span="44-44", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs"];
m16_4 [label="var result1 = parser.ParseArguments(args, appOptions)", span="47-47", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs"];
m16_8 [label="var result2 = parser.ParseArguments(args, plugInXOptions)", span="53-53", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs"];
m16_3 [label="var parser = new CommandLineParser(new CommandLineParserSettings {\r\n                IgnoreUnknownArguments = true, CaseSensitive = true })", span="45-46", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs"];
m16_6 [label="Assert.AreEqual(''addonX'', appOptions.PlugInName)", span="50-50", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", color=green, community=0, file="UnknownArgumentsFixture.cs"];
m16_5 [label="Assert.IsTrue(result1)", span="49-49", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", color=red, community=0, file="UnknownArgumentsFixture.cs"];
m16_7 [label="var plugInXOptions = new OptionsOfPlugInX()", span="52-52", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs"];
m16_10 [label="Assert.AreEqual(''input.dat'', plugInXOptions.InputFileName)", span="56-56", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", color=green, community=0, file="UnknownArgumentsFixture.cs"];
m16_11 [label="Assert.AreEqual(10, plugInXOptions.ReadOffset)", span="57-57", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", color=green, community=0, file="UnknownArgumentsFixture.cs"];
m16_9 [label="Assert.IsTrue(result2)", span="55-55", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", color=red, community=0, file="UnknownArgumentsFixture.cs"];
m16_12 [label="Exit CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", span="41-41", cluster="CommandLine.Tests.UnknownArgumentsFixture.ParseValidUnknownArguments()", file="UnknownArgumentsFixture.cs"];
m16_13 [label="Entry CommandLine.Tests.Mocks.OptionsForAppWithPlugIns.OptionsForAppWithPlugIns()", span="35-35", cluster="CommandLine.Tests.Mocks.OptionsForAppWithPlugIns.OptionsForAppWithPlugIns()", file="UnknownArgumentsFixture.cs"];
m16_16 [label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object)", span="1717-1717", cluster="CommandLine.CommandLineParser.ParseArguments(string[], object)", file="UnknownArgumentsFixture.cs"];
m16_17 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="UnknownArgumentsFixture.cs"];
m17_15 [label="Entry CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", span="41-41", cluster="CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", file="ValueListAttributeFixture.cs"];
m17_3 [label="Entry CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", span="304-304", cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", file="ValueListAttributeFixture.cs"];
m17_12 [label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ValueListAttributeFixture.cs"];
m17_13 [label="new ValueListAttribute(new MockSpecializedList().GetType())", span="75-75", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ValueListAttributeFixture.cs"];
m17_14 [label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="ValueListAttributeFixture.cs"];
m17_24 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="ValueListAttributeFixture.cs"];
m17_22 [label="Entry CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", span="45-45", cluster="CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", file="ValueListAttributeFixture.cs"];
m17_35 [label="Entry CommandLine.Tests.BaseFixture.AssertArrayItemEqual(string[], System.Collections.Generic.IList<string>)", span="46-46", cluster="CommandLine.Tests.BaseFixture.AssertArrayItemEqual(string[], System.Collections.Generic.IList<string>)", file="ValueListAttributeFixture.cs"];
m17_26 [label="Entry CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_27 [label="var options = new MockOptions()", span="91-91", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_28 [label="var values = ValueListAttribute.GetReference(options)", span="93-93", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_32 [label="base.AssertArrayItemEqual(new string[] { ''value0'', ''value1'', ''value2'' }, options.Values)", span="101-101", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", color=red, community=0, file="ValueListAttributeFixture.cs"];
m17_29 [label="values.Add(''value0'')", span="94-94", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_30 [label="values.Add(''value1'')", span="95-95", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_31 [label="values.Add(''value2'')", span="96-96", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_33 [label="Exit CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_16 [label="Entry CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_17 [label="var options = new MockOptions()", span="81-81", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_18 [label="IList<string> values = ValueListAttribute.GetReference(options)", span="83-83", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_19 [label="Assert.IsNotNull(values)", span="83-83", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", color=red, community=0, file="ValueListAttributeFixture.cs"];
m17_20 [label="Assert.AreEqual(typeof(List<string>), values.GetType())", span="84-84", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", color=green, community=0, file="ValueListAttributeFixture.cs"];
m17_21 [label="Exit CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="ValueListAttributeFixture.cs"];
m17_4 [label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ValueListAttributeFixture.cs"];
m17_5 [label="new ValueListAttribute(new List<object>().GetType())", span="63-63", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ValueListAttributeFixture.cs"];
m17_6 [label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="ValueListAttributeFixture.cs"];
m17_34 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="ValueListAttributeFixture.cs"];
m17_23 [label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="328-328", cluster="CommandLine.ValueListAttribute.GetReference(object)", file="ValueListAttributeFixture.cs"];
m17_8 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ValueListAttributeFixture.cs"];
m17_0 [label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ValueListAttributeFixture.cs"];
m17_1 [label="new ValueListAttribute(null)", span="56-56", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ValueListAttributeFixture.cs"];
m17_2 [label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="ValueListAttributeFixture.cs"];
m17_9 [label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ValueListAttributeFixture.cs"];
m17_10 [label="new ValueListAttribute(new List<string>().GetType())", span="69-69", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ValueListAttributeFixture.cs"];
m17_11 [label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="ValueListAttributeFixture.cs"];
m17_7 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="ValueListAttributeFixture.cs"];
m17_36 [label="CommandLine.Tests.ValueListAttributeFixture", span="", file="ValueListAttributeFixture.cs"];
m18_14 [label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="1471-1471", cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="ValueListAttributeParsingFixture.cs"];
m18_19 [label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", span="61-61", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs"];
m18_20 [label="var options = new OptionsWithValueListMaximumThree()", span="62-62", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs"];
m18_21 [label="Result = base.Parser.ParseArguments(new string[] { ''file.a'', ''file.b'', ''file.c'' }, options)", span="63-63", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=red, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_23 [label="Assert.AreEqual(''file.a'', options.InputFilenames[0])", span="66-66", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_24 [label="Assert.AreEqual(''file.b'', options.InputFilenames[1])", span="67-67", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_25 [label="Assert.AreEqual(''file.c'', options.InputFilenames[2])", span="68-68", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_26 [label="Assert.IsNull(options.OutputFile)", span="69-69", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_27 [label="Assert.IsFalse(options.Overwrite)", span="70-70", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_28 [label="Console.WriteLine(options)", span="71-71", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs", color=green, community=0];
m18_22 [label="ResultShouldBeTrue()", span="65-65", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", color=red, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_29 [label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", span="61-61", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemInsideBounds()", file="ValueListAttributeParsingFixture.cs"];
m18_38 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", span="63-63", cluster="CommandLine.Tests.CommandLineParserBaseFixture.AssertParserFailure(bool)", file="ValueListAttributeParsingFixture.cs"];
m18_18 [label="Entry System.Console.WriteLine(object)", span="0-0", cluster="System.Console.WriteLine(object)", file="ValueListAttributeParsingFixture.cs"];
m18_31 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="ValueListAttributeParsingFixture.cs"];
m18_33 [label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", span="76-76", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs"];
m18_34 [label="var options = new OptionsWithValueListMaximumThree()", span="78-78", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs"];
m18_35 [label="Result = base.Parser.ParseArguments(\r\n                    new string[] { ''file.a'', ''file.b'', ''file.c'', ''file.d'' }, options)", span="78-79", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_36 [label="ResultShouldBeFalse()", span="81-81", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", color=red, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_37 [label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", span="76-76", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemOutsideBounds()", file="ValueListAttributeParsingFixture.cs"];
m18_30 [label="Entry CommandLine.Tests.Mocks.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", span="35-35", cluster="CommandLine.Tests.Mocks.OptionsWithValueListMaximumThree.OptionsWithValueListMaximumThree()", file="ValueListAttributeParsingFixture.cs"];
m18_32 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="ValueListAttributeParsingFixture.cs"];
m18_17 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="ValueListAttributeParsingFixture.cs"];
m18_13 [label="Entry CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", span="35-35", cluster="CommandLine.Tests.Mocks.SimpleOptionsWithValueList.SimpleOptionsWithValueList()", file="ValueListAttributeParsingFixture.cs"];
m18_0 [label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", span="40-40", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", file="ValueListAttributeParsingFixture.cs"];
m18_1 [label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", span="40-40", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeParsingFixture()", file="ValueListAttributeParsingFixture.cs"];
m18_46 [label="Entry CommandLine.Tests.Mocks.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", span="36-36", cluster="CommandLine.Tests.Mocks.OptionsWithValueListMaximumZero.OptionsWithValueListMaximumZero()", file="ValueListAttributeParsingFixture.cs"];
m18_47 [label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", span="97-97", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs"];
m18_48 [label="var options = new OptionsWithValueListMaximumZero()", span="99-99", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs"];
m18_49 [label="Assert.IsFalse(base.Parser.ParseArguments(new string[] { ''some'', ''value'' }, options))", span="101-101", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", color=red, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_50 [label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", span="97-97", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroFailes()", file="ValueListAttributeParsingFixture.cs"];
m18_2 [label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", span="45-45", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs"];
m18_3 [label="var options = new SimpleOptionsWithValueList()", span="47-47", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs"];
m18_4 [label="Result = base.Parser.ParseArguments(\r\n                new string[] { ''--switch'', ''file1.ext'', ''file2.ext'', ''file3.ext'', ''-s'', ''out.ext'' }, options)", span="47-48", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_6 [label="Assert.AreEqual(''file1.ext'', options.Items[0])", span="51-51", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_7 [label="Assert.AreEqual(''file2.ext'', options.Items[1])", span="52-52", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_8 [label="Assert.AreEqual(''file3.ext'', options.Items[2])", span="53-53", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_9 [label="Assert.AreEqual(''out.ext'', options.StringValue)", span="54-54", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_10 [label="Assert.IsTrue(options.BooleanValue)", span="55-55", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_11 [label="Console.WriteLine(options)", span="56-56", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs", color=green, community=0];
m18_5 [label="ResultShouldBeTrue()", span="50-50", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", color=red, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_12 [label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", span="45-45", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListAttributeIsolatesNonOptionValues()", file="ValueListAttributeParsingFixture.cs"];
m18_39 [label="Entry CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", span="86-86", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs"];
m18_40 [label="var options = new OptionsWithValueListMaximumZero()", span="87-87", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs"];
m18_41 [label="Result = base.Parser.ParseArguments(new string[] { }, options)", span="88-88", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", color=red, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_43 [label="Assert.AreEqual(0, options.Junk.Count)", span="91-91", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", color=green, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_44 [label="Console.WriteLine(options)", span="92-92", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs", color=green, community=0];
m18_42 [label="ResultShouldBeTrue()", span="90-90", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", color=red, community=0, file="ValueListAttributeParsingFixture.cs"];
m18_45 [label="Exit CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", span="86-86", cluster="CommandLine.Tests.ValueListAttributeParsingFixture.ValueListWithMaxElemSetToZeroSucceeds()", file="ValueListAttributeParsingFixture.cs"];
m18_15 [label="Entry CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", span="60-60", cluster="CommandLine.Tests.CommandLineParserBaseFixture.ResultShouldBeTrue()", file="ValueListAttributeParsingFixture.cs"];
m18_51 [label="CommandLine.Tests.ValueListAttributeParsingFixture", span="", file="ValueListAttributeParsingFixture.cs"];
n12 -> n4  [key=1, style=dashed, color=red, label="CommandLine.Tests.ArgumentParserFixture"];
n12 -> d4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ArgumentParserFixture"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n7  [key=2, style=dotted];
n1 -> n3  [key=1, style=dashed, color=darkseagreen4, label=ae];
n1 -> n5  [key=1, style=dashed, color=red, label=ae];
n1 -> d5  [key=1, style=dashed, color=green, label=ae];
n2 -> n3  [key=0, style=solid];
n2 -> n8  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid, color=red];
n3 -> n9  [key=2, style=dotted];
n3 -> d4  [key=0, style=solid];
n5 -> n6  [key=0, style=solid, color=red];
n5 -> n11  [key=2, style=dotted, color=red];
n4 -> n5  [key=0, style=solid, color=red];
n4 -> n10  [key=2, style=dotted, color=red];
n6 -> n0  [key=0, style=bold, color=blue];
d5 -> n6  [key=0, style=solid, color=green];
d5 -> n11  [key=2, style=dotted, color=green];
d4 -> d5  [key=0, style=solid, color=green];
d4 -> d10  [key=2, style=dotted];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_0 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="T[]"];
m0_0 -> m0_4  [key=1, style=dashed, color=green, label="T[]"];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> n11  [key=2, style=dotted, color=red];
m0_1 -> m0_7  [key=2, style=dotted, color=green];
m0_1 -> m0_8  [key=2, style=dotted, color=green];
m0_3 -> m0_4  [key=0, style=solid, color=green];
m0_3 -> m0_6  [key=0, style=solid];
m0_3 -> m0_3  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m0_4 -> m0_5  [key=0, style=solid, color=green];
m0_4 -> n11  [key=2, style=dotted, color=red];
m0_4 -> m0_7  [key=2, style=dotted, color=green];
m0_4 -> m0_8  [key=2, style=dotted, color=green];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_4  [key=1, style=dashed, color=green, label=i];
m0_2 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_5 -> m0_3  [key=0, style=solid];
m0_5 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_6 -> m0_0  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid, color=red];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_8 -> m0_12  [key=1, style=dashed, color=red, label="string[]"];
m0_9 -> m0_10  [key=0, style=solid, color=green];
m0_9 -> n11  [key=2, style=dotted, color=red];
m0_9 -> m0_13  [key=1, style=dashed, color=green, label="string[]"];
m0_9 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m0_11 -> m0_12  [key=0, style=solid, color=red];
m0_11 -> m0_14  [key=0, style=solid];
m0_11 -> m0_3  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m0_11 -> m0_13  [key=1, style=dashed, color=green, label=i];
m0_12 -> m0_13  [key=0, style=solid, color=green];
m0_12 -> n11  [key=2, style=dotted, color=red];
m0_12 -> m0_3  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m0_12 -> m0_15  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid, color=green];
m0_10 -> m0_12  [key=1, style=dashed, color=red, label=i];
m0_10 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_10 -> m0_7  [key=2, style=dotted, color=green];
m0_10 -> m0_8  [key=2, style=dotted, color=green];
m0_13 -> m0_11  [key=0, style=solid];
m0_13 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_13 -> m0_14  [key=0, style=solid, color=green];
m0_13 -> m0_7  [key=2, style=dotted, color=green];
m0_13 -> m0_8  [key=2, style=dotted, color=green];
m0_14 -> m0_8  [key=0, style=bold, color=blue];
m0_14 -> m0_12  [key=0, style=solid];
m0_14 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_15 -> m0_9  [key=0, style=bold, color=blue];
m1_13 -> m1_14  [key=0, style=solid, color=red];
m1_13 -> m1_15  [key=2, style=dotted, color=red];
m1_14 -> m1_15  [key=0, style=solid, color=green];
m1_14 -> m1_11  [key=2, style=dotted, color=green];
m1_14 -> m1_16  [key=2, style=dotted, color=green];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_15 -> m1_13  [key=0, style=bold, color=blue];
m1_4 -> m1_5  [key=0, style=solid, color=red];
m1_5 -> m1_6  [key=0, style=solid, color=red];
m1_5 -> m1_7  [key=2, style=dotted, color=red];
m1_6 -> m1_4  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid, color=red];
m1_8 -> m1_9  [key=0, style=solid, color=red];
m1_9 -> m1_10  [key=0, style=solid, color=red];
m1_9 -> m1_11  [key=2, style=dotted, color=red];
m1_9 -> m1_12  [key=2, style=dotted];
m1_10 -> m1_8  [key=0, style=bold, color=blue];
m1_17 -> m1_14  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserBaseFixture"];
m1_17 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserBaseFixture"];
m1_17 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserBaseFixture"];
m2_10 -> m2_11  [key=0, style=solid, color=green];
m2_11 -> m2_12  [key=0, style=solid, color=green];
m2_11 -> m2_5  [key=2, style=dotted, color=green];
m2_11 -> m2_14  [key=1, style=dashed, color=green, label=options];
m2_11 -> m2_15  [key=1, style=dashed, color=green, label=options];
m2_12 -> m2_13  [key=0, style=solid, color=green];
m2_12 -> m2_6  [key=2, style=dotted, color=red];
m2_14 -> m2_15  [key=0, style=solid, color=red];
m2_14 -> n11  [key=2, style=dotted, color=red];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_19  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid, color=green];
m2_13 -> m2_17  [key=2, style=dotted, color=green];
m2_16 -> m2_10  [key=0, style=bold, color=blue];
m2_176 -> m2_177  [key=0, style=solid];
m2_177 -> m2_178  [key=0, style=solid, color=green];
m2_177 -> m2_91  [key=2, style=dotted];
m2_178 -> m2_179  [key=0, style=solid, color=green];
m2_178 -> m2_6  [key=2, style=dotted, color=green];
m2_179 -> m2_180  [key=0, style=solid, color=green];
m2_179 -> m2_129  [key=2, style=dotted, color=green];
m2_180 -> m2_176  [key=0, style=bold, color=blue];
m2_260 -> m2_261  [key=0, style=solid];
m2_261 -> m2_262  [key=0, style=solid, color=green];
m2_261 -> m2_91  [key=2, style=dotted];
m2_262 -> m2_263  [key=0, style=solid, color=green];
m2_262 -> m2_265  [key=2, style=dotted, color=green];
m2_262 -> m2_6  [key=2, style=dotted, color=green];
m2_263 -> m2_264  [key=0, style=solid, color=green];
m2_263 -> m2_129  [key=2, style=dotted, color=green];
m2_264 -> m2_260  [key=0, style=bold, color=blue];
m2_242 -> m2_243  [key=0, style=solid];
m2_243 -> m2_244  [key=0, style=solid, color=green];
m2_243 -> m2_91  [key=2, style=dotted];
m2_243 -> m2_246  [key=1, style=dashed, color=green, label=options];
m2_244 -> m2_245  [key=0, style=solid, color=green];
m2_244 -> m2_6  [key=2, style=dotted, color=green];
m2_246 -> m2_247  [key=0, style=solid, color=green];
m2_246 -> n11  [key=2, style=dotted, color=green];
m2_245 -> m2_246  [key=0, style=solid, color=green];
m2_245 -> m2_17  [key=2, style=dotted, color=green];
m2_247 -> m2_242  [key=0, style=bold, color=blue];
m2_284 -> m2_285  [key=0, style=solid];
m2_285 -> m2_286  [key=0, style=solid, color=green];
m2_285 -> m2_91  [key=2, style=dotted];
m2_286 -> m2_287  [key=0, style=solid, color=green];
m2_286 -> m2_289  [key=2, style=dotted, color=green];
m2_286 -> m2_6  [key=2, style=dotted, color=green];
m2_287 -> m2_288  [key=0, style=solid, color=green];
m2_287 -> m2_129  [key=2, style=dotted, color=green];
m2_288 -> m2_284  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m2_254 -> m2_255  [key=0, style=solid];
m2_255 -> m2_256  [key=0, style=solid, color=green];
m2_255 -> m2_91  [key=2, style=dotted];
m2_255 -> m2_258  [key=1, style=dashed, color=green, label=options];
m2_256 -> m2_257  [key=0, style=solid, color=green];
m2_256 -> m2_6  [key=2, style=dotted, color=green];
m2_258 -> m2_259  [key=0, style=solid, color=green];
m2_258 -> n11  [key=2, style=dotted, color=green];
m2_257 -> m2_258  [key=0, style=solid, color=green];
m2_257 -> m2_17  [key=2, style=dotted, color=green];
m2_259 -> m2_254  [key=0, style=bold, color=blue];
m2_248 -> m2_249  [key=0, style=solid];
m2_249 -> m2_250  [key=0, style=solid, color=green];
m2_249 -> m2_91  [key=2, style=dotted];
m2_249 -> m2_252  [key=1, style=dashed, color=green, label=options];
m2_250 -> m2_251  [key=0, style=solid, color=green];
m2_250 -> m2_6  [key=2, style=dotted, color=green];
m2_252 -> m2_253  [key=0, style=solid, color=green];
m2_252 -> n11  [key=2, style=dotted, color=green];
m2_251 -> m2_252  [key=0, style=solid, color=green];
m2_251 -> m2_17  [key=2, style=dotted, color=green];
m2_253 -> m2_248  [key=0, style=bold, color=blue];
m2_7 -> m2_8  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_6  [key=2, style=dotted];
m2_9 -> m2_7  [key=0, style=bold, color=blue];
m2_72 -> m2_73  [key=0, style=solid];
m2_73 -> m2_74  [key=0, style=solid, color=green];
m2_73 -> m2_80  [key=2, style=dotted];
m2_73 -> m2_76  [key=1, style=dashed, color=green, label=options];
m2_73 -> m2_77  [key=1, style=dashed, color=green, label=options];
m2_73 -> m2_78  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_74 -> m2_75  [key=0, style=solid, color=green];
m2_74 -> m2_6  [key=2, style=dotted, color=green];
m2_76 -> m2_77  [key=0, style=solid, color=green];
m2_76 -> n11  [key=2, style=dotted, color=green];
m2_77 -> m2_78  [key=0, style=solid, color=green];
m2_77 -> n11  [key=2, style=dotted, color=green];
m2_78 -> m2_79  [key=0, style=solid];
m2_78 -> m2_19  [key=2, style=dotted];
m2_75 -> m2_76  [key=0, style=solid, color=green];
m2_75 -> m2_17  [key=2, style=dotted, color=green];
m2_79 -> m2_72  [key=0, style=bold, color=blue];
m2_224 -> m2_225  [key=0, style=solid];
m2_225 -> m2_226  [key=0, style=solid, color=green];
m2_225 -> m2_91  [key=2, style=dotted];
m2_225 -> m2_228  [key=1, style=dashed, color=green, label=options];
m2_226 -> m2_227  [key=0, style=solid, color=green];
m2_226 -> m2_6  [key=2, style=dotted, color=green];
m2_228 -> m2_229  [key=0, style=solid, color=green];
m2_228 -> n11  [key=2, style=dotted, color=green];
m2_227 -> m2_228  [key=0, style=solid, color=green];
m2_227 -> m2_17  [key=2, style=dotted, color=green];
m2_229 -> m2_224  [key=0, style=bold, color=blue];
m2_161 -> m2_162  [key=0, style=solid];
m2_162 -> m2_163  [key=0, style=solid, color=green];
m2_162 -> m2_5  [key=2, style=dotted];
m2_163 -> m2_164  [key=0, style=solid, color=green];
m2_163 -> m2_6  [key=2, style=dotted, color=green];
m2_164 -> m2_165  [key=0, style=solid, color=green];
m2_164 -> m2_129  [key=2, style=dotted, color=green];
m2_165 -> m2_161  [key=0, style=bold, color=blue];
m2_29 -> m2_30  [key=0, style=solid, color=green];
m2_30 -> m2_31  [key=0, style=solid, color=green];
m2_30 -> m2_39  [key=2, style=dotted, color=green];
m2_30 -> m2_33  [key=1, style=dashed, color=green, label=options];
m2_30 -> m2_34  [key=1, style=dashed, color=green, label=options];
m2_30 -> m2_35  [key=1, style=dashed, color=green, label=options];
m2_30 -> m2_36  [key=1, style=dashed, color=green, label=options];
m2_30 -> m2_37  [key=1, style=dashed, color=green, label=options];
m2_31 -> m2_32  [key=0, style=solid, color=green];
m2_31 -> m2_6  [key=2, style=dotted, color=red];
m2_33 -> m2_34  [key=0, style=solid, color=green];
m2_33 -> m2_40  [key=2, style=dotted, color=green];
m2_34 -> m2_35  [key=0, style=solid, color=green];
m2_34 -> m2_40  [key=2, style=dotted, color=green];
m2_35 -> m2_36  [key=0, style=solid, color=green];
m2_35 -> m2_41  [key=2, style=dotted, color=green];
m2_36 -> m2_37  [key=0, style=solid, color=red];
m2_36 -> n11  [key=2, style=dotted, color=red];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_19  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid, color=green];
m2_32 -> m2_17  [key=2, style=dotted, color=green];
m2_38 -> m2_29  [key=0, style=bold, color=blue];
m2_67 -> m2_68  [key=0, style=solid];
m2_68 -> m2_69  [key=0, style=solid, color=green];
m2_68 -> m2_5  [key=2, style=dotted];
m2_68 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label=options];
m2_69 -> m2_70  [key=0, style=solid, color=green];
m2_69 -> m2_6  [key=2, style=dotted, color=green];
m2_69 -> m2_41  [key=2, style=dotted, color=green];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_19  [key=2, style=dotted];
m2_71 -> m2_67  [key=0, style=bold, color=blue];
m2_278 -> m2_279  [key=0, style=solid];
m2_279 -> m2_280  [key=0, style=solid, color=green];
m2_279 -> m2_91  [key=2, style=dotted];
m2_280 -> m2_281  [key=0, style=solid, color=green];
m2_280 -> m2_283  [key=2, style=dotted, color=green];
m2_280 -> m2_6  [key=2, style=dotted, color=green];
m2_281 -> m2_282  [key=0, style=solid, color=green];
m2_281 -> m2_129  [key=2, style=dotted, color=green];
m2_282 -> m2_278  [key=0, style=bold, color=blue];
m2_52 -> m2_53  [key=0, style=solid, color=green];
m2_53 -> m2_54  [key=0, style=solid, color=green];
m2_53 -> m2_65  [key=2, style=dotted, color=green];
m2_53 -> m2_56  [key=1, style=dashed, color=green, label=options];
m2_53 -> m2_57  [key=1, style=dashed, color=green, label=options];
m2_53 -> m2_58  [key=1, style=dashed, color=green, label=options];
m2_53 -> m2_59  [key=1, style=dashed, color=green, label=options];
m2_53 -> m2_60  [key=1, style=dashed, color=green, label=options];
m2_53 -> m2_61  [key=1, style=dashed, color=green, label=options];
m2_53 -> m2_62  [key=1, style=dashed, color=green, label=options];
m2_53 -> m2_63  [key=1, style=dashed, color=green, label=options];
m2_54 -> m2_55  [key=0, style=solid, color=green];
m2_54 -> m2_6  [key=2, style=dotted, color=red];
m2_56 -> m2_57  [key=0, style=solid, color=green];
m2_56 -> n11  [key=2, style=dotted, color=red];
m2_57 -> m2_58  [key=0, style=solid, color=green];
m2_57 -> m2_66  [key=2, style=dotted, color=green];
m2_58 -> m2_59  [key=0, style=solid, color=green];
m2_58 -> n11  [key=2, style=dotted, color=red];
m2_59 -> m2_60  [key=0, style=solid, color=green];
m2_59 -> m2_66  [key=2, style=dotted, color=green];
m2_60 -> m2_61  [key=0, style=solid, color=green];
m2_60 -> n11  [key=2, style=dotted, color=red];
m2_61 -> m2_62  [key=0, style=solid, color=green];
m2_61 -> m2_66  [key=2, style=dotted, color=green];
m2_62 -> m2_63  [key=0, style=solid, color=red];
m2_62 -> n11  [key=2, style=dotted, color=red];
m2_63 -> m2_64  [key=0, style=solid];
m2_63 -> m2_66  [key=2, style=dotted];
m2_55 -> m2_56  [key=0, style=solid, color=green];
m2_55 -> m2_17  [key=2, style=dotted, color=green];
m2_64 -> m2_52  [key=0, style=bold, color=blue];
m2_191 -> m2_192  [key=0, style=solid];
m2_192 -> m2_193  [key=0, style=solid, color=green];
m2_192 -> m2_91  [key=2, style=dotted];
m2_193 -> m2_194  [key=0, style=solid, color=green];
m2_193 -> m2_6  [key=2, style=dotted, color=green];
m2_194 -> m2_195  [key=0, style=solid, color=green];
m2_194 -> m2_129  [key=2, style=dotted, color=green];
m2_195 -> m2_191  [key=0, style=bold, color=blue];
m2_151 -> m2_152  [key=0, style=solid];
m2_152 -> m2_153  [key=0, style=solid];
m2_152 -> m2_159  [key=2, style=dotted];
m2_152 -> m2_160  [key=2, style=dotted];
m2_152 -> m2_154  [key=1, style=dashed, color=green, label=local];
m2_153 -> m2_154  [key=0, style=solid, color=green];
m2_153 -> m2_144  [key=2, style=dotted];
m2_153 -> m2_156  [key=1, style=dashed, color=green, label=options];
m2_153 -> m2_157  [key=1, style=dashed, color=green, label=options];
m2_154 -> m2_155  [key=0, style=solid, color=green];
m2_154 -> m2_6  [key=2, style=dotted, color=green];
m2_156 -> m2_157  [key=0, style=solid, color=green];
m2_156 -> n11  [key=2, style=dotted, color=green];
m2_157 -> m2_158  [key=0, style=solid, color=green];
m2_157 -> n11  [key=2, style=dotted, color=green];
m2_155 -> m2_156  [key=0, style=solid, color=green];
m2_155 -> m2_17  [key=2, style=dotted, color=green];
m2_158 -> m2_151  [key=0, style=bold, color=blue];
m2_218 -> m2_219  [key=0, style=solid];
m2_219 -> m2_220  [key=0, style=solid, color=green];
m2_219 -> m2_91  [key=2, style=dotted];
m2_219 -> m2_222  [key=1, style=dashed, color=green, label=options];
m2_220 -> m2_221  [key=0, style=solid, color=green];
m2_220 -> m2_6  [key=2, style=dotted, color=green];
m2_222 -> m2_223  [key=0, style=solid, color=green];
m2_222 -> n11  [key=2, style=dotted, color=green];
m2_221 -> m2_222  [key=0, style=solid, color=green];
m2_221 -> m2_17  [key=2, style=dotted, color=green];
m2_223 -> m2_218  [key=0, style=bold, color=blue];
m2_135 -> m2_136  [key=0, style=solid];
m2_136 -> m2_137  [key=0, style=solid];
m2_136 -> m2_143  [key=2, style=dotted];
m2_136 -> m2_138  [key=1, style=dashed, color=green, label=local];
m2_137 -> m2_138  [key=0, style=solid, color=green];
m2_137 -> m2_144  [key=2, style=dotted];
m2_137 -> m2_140  [key=1, style=dashed, color=green, label=options];
m2_137 -> m2_141  [key=1, style=dashed, color=green, label=options];
m2_138 -> m2_139  [key=0, style=solid, color=green];
m2_138 -> m2_6  [key=2, style=dotted, color=green];
m2_140 -> m2_141  [key=0, style=solid, color=green];
m2_140 -> n11  [key=2, style=dotted, color=green];
m2_141 -> m2_142  [key=0, style=solid, color=green];
m2_141 -> n11  [key=2, style=dotted, color=green];
m2_139 -> m2_140  [key=0, style=solid, color=green];
m2_139 -> m2_17  [key=2, style=dotted, color=green];
m2_142 -> m2_135  [key=0, style=bold, color=blue];
m2_81 -> m2_82  [key=0, style=solid];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=actualCulture];
m2_83 -> m2_84  [key=0, style=solid];
m2_83 -> m2_90  [key=2, style=dotted];
m2_88 -> m2_89  [key=0, style=solid];
m2_84 -> m2_85  [key=0, style=solid, color=green];
m2_84 -> m2_91  [key=2, style=dotted];
m2_84 -> m2_87  [key=1, style=dashed, color=green, label=options];
m2_85 -> m2_86  [key=0, style=solid, color=green];
m2_85 -> m2_6  [key=2, style=dotted, color=green];
m2_87 -> m2_88  [key=0, style=solid, color=green];
m2_87 -> n11  [key=2, style=dotted, color=green];
m2_86 -> m2_87  [key=0, style=solid, color=green];
m2_86 -> m2_17  [key=2, style=dotted, color=green];
m2_89 -> m2_81  [key=0, style=bold, color=blue];
m2_130 -> m2_131  [key=0, style=solid];
m2_131 -> m2_132  [key=0, style=solid, color=green];
m2_131 -> m2_5  [key=2, style=dotted];
m2_132 -> m2_133  [key=0, style=solid, color=green];
m2_132 -> m2_6  [key=2, style=dotted, color=green];
m2_133 -> m2_134  [key=0, style=solid, color=green];
m2_133 -> m2_129  [key=2, style=dotted, color=green];
m2_134 -> m2_130  [key=0, style=bold, color=blue];
m2_20 -> m2_21  [key=0, style=solid, color=green];
m2_21 -> m2_22  [key=0, style=solid, color=green];
m2_21 -> m2_5  [key=2, style=dotted, color=green];
m2_21 -> m2_24  [key=1, style=dashed, color=green, label=options];
m2_21 -> m2_25  [key=1, style=dashed, color=green, label=options];
m2_21 -> m2_26  [key=1, style=dashed, color=green, label=options];
m2_21 -> m2_27  [key=1, style=dashed, color=green, label=options];
m2_22 -> m2_23  [key=0, style=solid, color=green];
m2_22 -> m2_6  [key=2, style=dotted, color=red];
m2_24 -> m2_25  [key=0, style=solid, color=green];
m2_24 -> n11  [key=2, style=dotted, color=green];
m2_25 -> m2_26  [key=0, style=solid, color=green];
m2_25 -> n11  [key=2, style=dotted, color=green];
m2_26 -> m2_27  [key=0, style=solid, color=red];
m2_26 -> n11  [key=2, style=dotted, color=red];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_19  [key=2, style=dotted];
m2_23 -> m2_24  [key=0, style=solid, color=green];
m2_23 -> m2_17  [key=2, style=dotted, color=green];
m2_28 -> m2_20  [key=0, style=bold, color=blue];
m2_202 -> m2_203  [key=0, style=solid];
m2_203 -> m2_204  [key=0, style=solid, color=green];
m2_203 -> m2_211  [key=2, style=dotted];
m2_203 -> m2_206  [key=1, style=dashed, color=green, label=options];
m2_203 -> m2_207  [key=1, style=dashed, color=green, label=options];
m2_203 -> m2_208  [key=1, style=dashed, color=green, label=options];
m2_203 -> m2_209  [key=1, style=dashed, color=green, label=options];
m2_204 -> m2_205  [key=0, style=solid, color=green];
m2_204 -> m2_6  [key=2, style=dotted, color=green];
m2_206 -> m2_207  [key=0, style=solid, color=green];
m2_206 -> n11  [key=2, style=dotted, color=green];
m2_207 -> m2_208  [key=0, style=solid, color=green];
m2_207 -> n11  [key=2, style=dotted, color=green];
m2_208 -> m2_209  [key=0, style=solid, color=green];
m2_208 -> n11  [key=2, style=dotted, color=green];
m2_209 -> m2_210  [key=0, style=solid, color=green];
m2_209 -> n11  [key=2, style=dotted, color=green];
m2_205 -> m2_206  [key=0, style=solid, color=green];
m2_205 -> m2_17  [key=2, style=dotted, color=green];
m2_210 -> m2_202  [key=0, style=bold, color=blue];
m2_145 -> m2_146  [key=0, style=solid];
m2_146 -> m2_147  [key=0, style=solid];
m2_146 -> m2_143  [key=2, style=dotted];
m2_146 -> m2_148  [key=1, style=dashed, color=green, label=local];
m2_147 -> m2_148  [key=0, style=solid, color=green];
m2_147 -> m2_144  [key=2, style=dotted];
m2_148 -> m2_149  [key=0, style=solid, color=green];
m2_148 -> m2_6  [key=2, style=dotted, color=green];
m2_149 -> m2_150  [key=0, style=solid, color=green];
m2_149 -> m2_129  [key=2, style=dotted, color=green];
m2_150 -> m2_145  [key=0, style=bold, color=blue];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_5  [key=2, style=dotted];
m2_3 -> m2_6  [key=2, style=dotted];
m2_4 -> m2_2  [key=0, style=bold, color=blue];
m2_119 -> m2_120  [key=0, style=solid];
m2_120 -> m2_121  [key=0, style=solid];
m2_120 -> m2_123  [key=2, style=dotted];
m2_121 -> m2_122  [key=0, style=solid];
m2_121 -> m2_6  [key=2, style=dotted];
m2_122 -> m2_119  [key=0, style=bold, color=blue];
m2_196 -> m2_197  [key=0, style=solid];
m2_197 -> m2_198  [key=0, style=solid, color=green];
m2_197 -> m2_5  [key=2, style=dotted];
m2_197 -> m2_200  [key=1, style=dashed, color=green, label=options];
m2_198 -> m2_199  [key=0, style=solid, color=green];
m2_198 -> m2_6  [key=2, style=dotted, color=green];
m2_200 -> m2_201  [key=0, style=solid, color=green];
m2_200 -> n11  [key=2, style=dotted, color=green];
m2_199 -> m2_200  [key=0, style=solid, color=green];
m2_199 -> m2_17  [key=2, style=dotted, color=green];
m2_201 -> m2_196  [key=0, style=bold, color=blue];
m2_212 -> m2_213  [key=0, style=solid];
m2_213 -> m2_214  [key=0, style=solid, color=green];
m2_213 -> m2_5  [key=2, style=dotted];
m2_213 -> m2_216  [key=1, style=dashed, color=green, label=options];
m2_214 -> m2_215  [key=0, style=solid, color=green];
m2_214 -> m2_6  [key=2, style=dotted, color=green];
m2_216 -> m2_217  [key=0, style=solid, color=green];
m2_216 -> n11  [key=2, style=dotted, color=green];
m2_215 -> m2_216  [key=0, style=solid, color=green];
m2_215 -> m2_17  [key=2, style=dotted, color=green];
m2_217 -> m2_212  [key=0, style=bold, color=blue];
m2_266 -> m2_267  [key=0, style=solid];
m2_267 -> m2_268  [key=0, style=solid, color=green];
m2_267 -> m2_91  [key=2, style=dotted];
m2_268 -> m2_269  [key=0, style=solid, color=green];
m2_268 -> m2_271  [key=2, style=dotted, color=green];
m2_268 -> m2_6  [key=2, style=dotted, color=green];
m2_269 -> m2_270  [key=0, style=solid, color=green];
m2_269 -> m2_129  [key=2, style=dotted, color=green];
m2_270 -> m2_266  [key=0, style=bold, color=blue];
m2_230 -> m2_231  [key=0, style=solid];
m2_231 -> m2_232  [key=0, style=solid, color=green];
m2_231 -> m2_91  [key=2, style=dotted];
m2_231 -> m2_234  [key=1, style=dashed, color=green, label=options];
m2_232 -> m2_233  [key=0, style=solid, color=green];
m2_232 -> m2_6  [key=2, style=dotted, color=green];
m2_234 -> m2_235  [key=0, style=solid, color=green];
m2_234 -> n11  [key=2, style=dotted, color=green];
m2_233 -> m2_234  [key=0, style=solid, color=green];
m2_233 -> m2_17  [key=2, style=dotted, color=green];
m2_235 -> m2_230  [key=0, style=bold, color=blue];
m2_42 -> m2_43  [key=0, style=solid, color=green];
m2_43 -> m2_44  [key=0, style=solid, color=green];
m2_43 -> m2_39  [key=2, style=dotted, color=green];
m2_43 -> m2_46  [key=1, style=dashed, color=green, label=options];
m2_43 -> m2_47  [key=1, style=dashed, color=green, label=options];
m2_43 -> m2_48  [key=1, style=dashed, color=green, label=options];
m2_43 -> m2_49  [key=1, style=dashed, color=green, label=options];
m2_43 -> m2_50  [key=1, style=dashed, color=green, label=options];
m2_44 -> m2_45  [key=0, style=solid, color=green];
m2_44 -> m2_6  [key=2, style=dotted, color=red];
m2_46 -> m2_47  [key=0, style=solid, color=green];
m2_46 -> m2_40  [key=2, style=dotted, color=green];
m2_47 -> m2_48  [key=0, style=solid, color=green];
m2_47 -> m2_41  [key=2, style=dotted, color=green];
m2_48 -> m2_49  [key=0, style=solid, color=green];
m2_48 -> m2_41  [key=2, style=dotted, color=green];
m2_49 -> m2_50  [key=0, style=solid, color=red];
m2_49 -> n11  [key=2, style=dotted, color=red];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_19  [key=2, style=dotted];
m2_45 -> m2_46  [key=0, style=solid, color=green];
m2_45 -> m2_17  [key=2, style=dotted, color=green];
m2_51 -> m2_42  [key=0, style=bold, color=blue];
m2_166 -> m2_167  [key=0, style=solid];
m2_167 -> m2_168  [key=0, style=solid, color=green];
m2_167 -> m2_91  [key=2, style=dotted];
m2_168 -> m2_169  [key=0, style=solid, color=green];
m2_168 -> m2_6  [key=2, style=dotted, color=green];
m2_169 -> m2_170  [key=0, style=solid, color=green];
m2_169 -> m2_129  [key=2, style=dotted, color=green];
m2_170 -> m2_166  [key=0, style=bold, color=blue];
m2_181 -> m2_182  [key=0, style=solid];
m2_182 -> m2_183  [key=0, style=solid, color=green];
m2_182 -> m2_91  [key=2, style=dotted];
m2_183 -> m2_184  [key=0, style=solid, color=green];
m2_183 -> m2_6  [key=2, style=dotted, color=green];
m2_184 -> m2_185  [key=0, style=solid, color=green];
m2_184 -> m2_129  [key=2, style=dotted, color=green];
m2_185 -> m2_181  [key=0, style=bold, color=blue];
m2_236 -> m2_237  [key=0, style=solid];
m2_237 -> m2_238  [key=0, style=solid, color=green];
m2_237 -> m2_91  [key=2, style=dotted];
m2_237 -> m2_240  [key=1, style=dashed, color=green, label=options];
m2_238 -> m2_239  [key=0, style=solid, color=green];
m2_238 -> m2_6  [key=2, style=dotted, color=green];
m2_240 -> m2_241  [key=0, style=solid, color=green];
m2_240 -> n11  [key=2, style=dotted, color=green];
m2_239 -> m2_240  [key=0, style=solid, color=green];
m2_239 -> m2_17  [key=2, style=dotted, color=green];
m2_241 -> m2_236  [key=0, style=bold, color=blue];
m2_110 -> m2_111  [key=0, style=solid];
m2_111 -> m2_112  [key=0, style=solid, color=green];
m2_111 -> m2_118  [key=2, style=dotted];
m2_111 -> m2_114  [key=1, style=dashed, color=green, label=options];
m2_111 -> m2_115  [key=1, style=dashed, color=green, label=options];
m2_111 -> m2_116  [key=1, style=dashed, color=green, label=options];
m2_112 -> m2_113  [key=0, style=solid, color=green];
m2_112 -> m2_6  [key=2, style=dotted, color=green];
m2_114 -> m2_115  [key=0, style=solid, color=green];
m2_114 -> n11  [key=2, style=dotted, color=green];
m2_115 -> m2_116  [key=0, style=solid, color=green];
m2_115 -> n11  [key=2, style=dotted, color=green];
m2_116 -> m2_117  [key=0, style=solid, color=green];
m2_116 -> n11  [key=2, style=dotted, color=green];
m2_113 -> m2_114  [key=0, style=solid, color=green];
m2_113 -> m2_17  [key=2, style=dotted, color=green];
m2_117 -> m2_110  [key=0, style=bold, color=blue];
m2_272 -> m2_273  [key=0, style=solid];
m2_273 -> m2_274  [key=0, style=solid, color=green];
m2_273 -> m2_91  [key=2, style=dotted];
m2_274 -> m2_275  [key=0, style=solid, color=green];
m2_274 -> m2_277  [key=2, style=dotted, color=green];
m2_274 -> m2_6  [key=2, style=dotted, color=green];
m2_275 -> m2_276  [key=0, style=solid, color=green];
m2_275 -> m2_129  [key=2, style=dotted, color=green];
m2_276 -> m2_272  [key=0, style=bold, color=blue];
m2_92 -> m2_93  [key=0, style=solid];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_99  [key=1, style=dashed, color=darkseagreen4, label=actualCulture];
m2_94 -> m2_95  [key=0, style=solid];
m2_94 -> m2_90  [key=2, style=dotted];
m2_99 -> m2_100  [key=0, style=solid];
m2_95 -> m2_96  [key=0, style=solid, color=green];
m2_95 -> m2_91  [key=2, style=dotted];
m2_95 -> m2_98  [key=1, style=dashed, color=green, label=options];
m2_96 -> m2_97  [key=0, style=solid, color=green];
m2_96 -> m2_6  [key=2, style=dotted, color=green];
m2_98 -> m2_99  [key=0, style=solid, color=green];
m2_98 -> n11  [key=2, style=dotted, color=green];
m2_97 -> m2_98  [key=0, style=solid, color=green];
m2_97 -> m2_17  [key=2, style=dotted, color=green];
m2_100 -> m2_92  [key=0, style=bold, color=blue];
m2_186 -> m2_187  [key=0, style=solid];
m2_187 -> m2_188  [key=0, style=solid, color=green];
m2_187 -> m2_91  [key=2, style=dotted];
m2_188 -> m2_189  [key=0, style=solid, color=green];
m2_188 -> m2_6  [key=2, style=dotted, color=green];
m2_189 -> m2_190  [key=0, style=solid, color=green];
m2_189 -> m2_129  [key=2, style=dotted, color=green];
m2_190 -> m2_186  [key=0, style=bold, color=blue];
m2_101 -> m2_102  [key=0, style=solid];
m2_102 -> m2_103  [key=0, style=solid, color=green];
m2_102 -> m2_109  [key=2, style=dotted];
m2_102 -> m2_105  [key=1, style=dashed, color=green, label=options];
m2_102 -> m2_106  [key=1, style=dashed, color=green, label=options];
m2_102 -> m2_107  [key=1, style=dashed, color=green, label=options];
m2_103 -> m2_104  [key=0, style=solid, color=green];
m2_103 -> m2_6  [key=2, style=dotted, color=green];
m2_105 -> m2_106  [key=0, style=solid, color=green];
m2_105 -> n11  [key=2, style=dotted, color=green];
m2_106 -> m2_107  [key=0, style=solid, color=green];
m2_106 -> n11  [key=2, style=dotted, color=green];
m2_107 -> m2_108  [key=0, style=solid, color=green];
m2_107 -> n11  [key=2, style=dotted, color=green];
m2_104 -> m2_105  [key=0, style=solid, color=green];
m2_104 -> m2_17  [key=2, style=dotted, color=green];
m2_108 -> m2_101  [key=0, style=bold, color=blue];
m2_124 -> m2_125  [key=0, style=solid];
m2_125 -> m2_126  [key=0, style=solid, color=green];
m2_125 -> m2_5  [key=2, style=dotted];
m2_126 -> m2_127  [key=0, style=solid, color=green];
m2_126 -> m2_6  [key=2, style=dotted, color=green];
m2_127 -> m2_128  [key=0, style=solid, color=green];
m2_127 -> m2_129  [key=2, style=dotted, color=green];
m2_128 -> m2_124  [key=0, style=bold, color=blue];
m2_171 -> m2_172  [key=0, style=solid];
m2_172 -> m2_173  [key=0, style=solid, color=green];
m2_172 -> m2_91  [key=2, style=dotted];
m2_173 -> m2_174  [key=0, style=solid, color=green];
m2_173 -> m2_6  [key=2, style=dotted, color=green];
m2_174 -> m2_175  [key=0, style=solid, color=green];
m2_174 -> m2_129  [key=2, style=dotted, color=green];
m2_175 -> m2_171  [key=0, style=bold, color=blue];
m2_290 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_13  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_23  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_31  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_32  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_45  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_55  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_69  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_74  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_75  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_85  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_86  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_96  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_97  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_103  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_104  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_112  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_113  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_121  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_126  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_127  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_132  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_133  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_139  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_149  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_155  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_163  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_164  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_168  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_169  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_173  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_174  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_178  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_179  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_183  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_184  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_188  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_189  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_193  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_194  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_198  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_199  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_204  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_205  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_214  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_215  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_220  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_221  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_226  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_227  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_232  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_233  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_238  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_239  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_244  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_245  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_250  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_251  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_256  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_257  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_262  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_263  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_268  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_269  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_274  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_275  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_280  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_281  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_286  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_287  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_138  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_148  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m2_290 -> m2_154  [key=1, style=dashed, color=green, label="CommandLine.Tests.CommandLineParserFixture"];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_8  [key=2, style=dotted];
m3_1 -> m3_6  [key=1, style=dashed, color=green, label=writer];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_9  [key=2, style=dotted];
m3_2 -> m3_10  [key=2, style=dotted];
m3_2 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label=parser];
m3_6 -> m3_7  [key=0, style=solid, color=green];
m3_6 -> m3_14  [key=2, style=dotted, color=green];
m3_6 -> n11  [key=2, style=dotted, color=green];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_11  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid, color=red];
m3_4 -> m3_12  [key=2, style=dotted];
m3_5 -> m3_6  [key=0, style=solid, color=green];
m3_5 -> n11  [key=2, style=dotted, color=red];
m3_7 -> m3_0  [key=0, style=bold, color=blue];
m3_26 -> m3_27  [key=0, style=solid];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_8  [key=2, style=dotted];
m3_27 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_27 -> m3_32  [key=1, style=dashed, color=green, label=writer];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_9  [key=2, style=dotted];
m3_28 -> m3_25  [key=2, style=dotted];
m3_28 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label=parser];
m3_30 -> m3_31  [key=0, style=solid, color=red];
m3_30 -> m3_34  [key=2, style=dotted];
m3_32 -> m3_33  [key=0, style=solid, color=green];
m3_32 -> m3_14  [key=2, style=dotted, color=green];
m3_32 -> n11  [key=2, style=dotted, color=green];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_11  [key=2, style=dotted];
m3_31 -> m3_32  [key=0, style=solid, color=green];
m3_31 -> n11  [key=2, style=dotted, color=red];
m3_33 -> m3_26  [key=0, style=bold, color=blue];
m3_15 -> m3_16  [key=0, style=solid];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_8  [key=2, style=dotted];
m3_16 -> m3_18  [key=1, style=dashed, color=darkseagreen4, label=writer];
m3_16 -> m3_23  [key=1, style=dashed, color=green, label=writer];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_25  [key=2, style=dotted];
m3_17 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label=settings];
m3_18 -> m3_19  [key=0, style=solid];
m3_23 -> m3_24  [key=0, style=solid, color=green];
m3_23 -> m3_14  [key=2, style=dotted, color=green];
m3_23 -> n11  [key=2, style=dotted, color=green];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_9  [key=2, style=dotted];
m3_19 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label=parser];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_11  [key=2, style=dotted];
m3_21 -> m3_22  [key=0, style=solid, color=red];
m3_21 -> m3_12  [key=2, style=dotted];
m3_22 -> m3_23  [key=0, style=solid, color=green];
m3_22 -> n11  [key=2, style=dotted, color=red];
m3_24 -> m3_15  [key=0, style=bold, color=blue];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_13  [key=2, style=dotted];
m4_3 -> m4_7  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
m4_3 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
m4_3 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
m4_3 -> m4_10  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
m4_3 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_10  [key=0, style=solid];
m4_7 -> m4_9  [key=0, style=solid];
m4_7 -> m4_15  [key=2, style=dotted];
m4_7 -> m4_16  [key=2, style=dotted];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_16  [key=2, style=dotted];
m4_9 -> m4_4  [key=0, style=solid];
m4_9 -> m4_16  [key=2, style=dotted];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_17  [key=2, style=dotted];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_18  [key=2, style=dotted];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_14  [key=2, style=dotted];
m4_5 -> m4_7  [key=1, style=dashed, color=darkseagreen4, label=y];
m4_5 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=y];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=0, style=solid];
m4_12 -> m4_2  [key=0, style=bold, color=blue];
m4_43 -> m4_44  [key=0, style=solid];
m4_44 -> m4_45  [key=0, style=solid];
m4_44 -> m4_34  [key=2, style=dotted];
m4_45 -> m4_43  [key=0, style=bold, color=blue];
m4_26 -> m4_27  [key=0, style=solid];
m4_27 -> m4_28  [key=0, style=solid, color=red];
m4_27 -> m4_23  [key=2, style=dotted];
m4_28 -> m4_29  [key=0, style=solid, color=red];
m4_28 -> m4_24  [key=2, style=dotted, color=red];
m4_28 -> n11  [key=2, style=dotted, color=red];
m4_29 -> m4_26  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [key=0, style=bold, color=blue];
m4_46 -> m4_47  [key=0, style=solid];
m4_47 -> m4_48  [key=0, style=solid, color=red];
m4_47 -> m4_0  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid, color=red];
m4_48 -> m4_24  [key=2, style=dotted, color=red];
m4_48 -> n11  [key=2, style=dotted, color=red];
m4_49 -> m4_46  [key=0, style=bold, color=blue];
m4_50 -> m4_51  [key=0, style=solid];
m4_51 -> m4_52  [key=0, style=solid];
m4_51 -> m4_42  [key=2, style=dotted];
m4_51 -> m4_54  [key=1, style=dashed, color=red, label=info];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_55  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_52 -> m4_52  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m4_54 -> m4_55  [key=0, style=solid, color=red];
m4_54 -> m4_24  [key=2, style=dotted, color=red];
m4_54 -> n11  [key=2, style=dotted, color=red];
m4_53 -> m4_54  [key=0, style=solid, color=red];
m4_53 -> m4_56  [key=0, style=solid];
m4_55 -> m4_53  [key=0, style=solid];
m4_55 -> m4_55  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_56 -> m4_50  [key=0, style=bold, color=blue];
m4_30 -> m4_31  [key=0, style=solid];
m4_31 -> m4_32  [key=0, style=solid, color=red];
m4_31 -> m4_34  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid, color=red];
m4_32 -> m4_24  [key=2, style=dotted, color=red];
m4_32 -> n11  [key=2, style=dotted, color=red];
m4_33 -> m4_30  [key=0, style=bold, color=blue];
m4_35 -> m4_36  [key=0, style=solid];
m4_36 -> m4_37  [key=0, style=solid, color=red];
m4_36 -> m4_34  [key=2, style=dotted];
m4_37 -> m4_38  [key=0, style=solid, color=red];
m4_37 -> m4_24  [key=2, style=dotted, color=red];
m4_37 -> n11  [key=2, style=dotted, color=red];
m4_38 -> m4_35  [key=0, style=bold, color=blue];
m4_19 -> m4_20  [key=0, style=solid];
m4_20 -> m4_21  [key=0, style=solid, color=red];
m4_20 -> m4_23  [key=2, style=dotted];
m4_21 -> m4_22  [key=0, style=solid, color=red];
m4_21 -> m4_24  [key=2, style=dotted, color=red];
m4_21 -> n11  [key=2, style=dotted, color=red];
m4_22 -> m4_19  [key=0, style=bold, color=blue];
m4_39 -> m4_40  [key=0, style=solid];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_42  [key=2, style=dotted];
m4_41 -> m4_39  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label=valueOne];
m5_1 -> m5_7  [key=1, style=dashed, color=darkseagreen4, label=valueOne];
m5_1 -> m5_1  [key=3, color=darkorchid, style=bold, label="Local variable string valueOne"];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label=valueTwo];
m5_2 -> m5_8  [key=1, style=dashed, color=green, label=valueTwo];
m5_2 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label=valueTwo];
m5_2 -> m5_2  [key=3, color=darkorchid, style=bold, label="Local variable string valueTwo"];
m5_4 -> m5_5  [key=0, style=solid];
m5_7 -> m5_8  [key=0, style=solid, color=green];
m5_7 -> m5_21  [key=2, style=dotted, color=red];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_12  [key=1, style=dashed, color=green, label=valueThree];
m5_3 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label=valueThree];
m5_3 -> m5_3  [key=3, color=darkorchid, style=bold, label="Local variable string valueThree"];
m5_8 -> m5_9  [key=0, style=solid, color=green];
m5_8 -> m5_21  [key=2, style=dotted, color=green];
m5_11 -> m5_12  [key=0, style=solid, color=green];
m5_11 -> m5_21  [key=2, style=dotted, color=red];
m5_12 -> m5_13  [key=0, style=solid, color=green];
m5_12 -> m5_21  [key=2, style=dotted, color=green];
m5_15 -> m5_16  [key=0, style=solid, color=green];
m5_15 -> m5_21  [key=2, style=dotted, color=red];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> n7  [key=2, style=dotted];
m5_5 -> m5_7  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_5 -> m5_8  [key=1, style=dashed, color=green, label=e];
m5_5 -> m5_9  [key=1, style=dashed, color=green, label=e];
m5_5 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_5 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_5 -> m5_12  [key=1, style=dashed, color=green, label=e];
m5_5 -> m5_13  [key=1, style=dashed, color=green, label=e];
m5_5 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_5 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_5 -> m5_16  [key=1, style=dashed, color=green, label=e];
m5_5 -> m5_17  [key=1, style=dashed, color=green, label=e];
m5_6 -> m5_7  [key=0, style=solid, color=red];
m5_6 -> m5_20  [key=2, style=dotted];
m5_9 -> m5_10  [key=0, style=solid, color=green];
m5_9 -> m5_22  [key=2, style=dotted, color=green];
m5_10 -> m5_11  [key=0, style=solid, color=red];
m5_10 -> m5_20  [key=2, style=dotted];
m5_13 -> m5_14  [key=0, style=solid, color=green];
m5_13 -> m5_22  [key=2, style=dotted, color=green];
m5_14 -> m5_15  [key=0, style=solid, color=red];
m5_14 -> m5_20  [key=2, style=dotted];
m5_16 -> m5_17  [key=0, style=solid, color=green];
m5_16 -> m5_23  [key=2, style=dotted, color=green];
m5_17 -> m5_18  [key=0, style=solid, color=green];
m5_17 -> m5_24  [key=2, style=dotted, color=green];
m5_18 -> m5_0  [key=0, style=bold, color=blue];
m5_25 -> m5_26  [key=0, style=solid];
m5_26 -> m5_27  [key=0, style=solid];
m5_26 -> m5_46  [key=2, style=dotted];
m5_26 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_26 -> m5_29  [key=1, style=dashed, color=green, label=e];
m5_26 -> m5_30  [key=1, style=dashed, color=green, label=e];
m5_26 -> m5_31  [key=1, style=dashed, color=green, label=e];
m5_26 -> m5_32  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_26 -> m5_33  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_26 -> m5_34  [key=1, style=dashed, color=green, label=e];
m5_26 -> m5_35  [key=1, style=dashed, color=green, label=e];
m5_26 -> m5_36  [key=1, style=dashed, color=green, label=e];
m5_26 -> m5_37  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_26 -> m5_38  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_26 -> m5_39  [key=1, style=dashed, color=green, label=e];
m5_26 -> m5_40  [key=1, style=dashed, color=green, label=e];
m5_26 -> m5_41  [key=1, style=dashed, color=green, label=e];
m5_26 -> m5_42  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_26 -> m5_43  [key=1, style=dashed, color=darkseagreen4, label=e];
m5_26 -> m5_44  [key=1, style=dashed, color=green, label=e];
m5_27 -> m5_28  [key=0, style=solid, color=red];
m5_27 -> m5_20  [key=2, style=dotted];
m5_28 -> m5_29  [key=0, style=solid, color=green];
m5_28 -> m5_21  [key=2, style=dotted, color=red];
m5_29 -> m5_30  [key=0, style=solid, color=green];
m5_29 -> m5_21  [key=2, style=dotted, color=green];
m5_30 -> m5_31  [key=0, style=solid, color=green];
m5_30 -> m5_47  [key=2, style=dotted, color=green];
m5_30 -> m5_21  [key=2, style=dotted, color=green];
m5_31 -> m5_32  [key=0, style=solid, color=green];
m5_31 -> m5_22  [key=2, style=dotted, color=green];
m5_32 -> m5_33  [key=0, style=solid, color=red];
m5_32 -> m5_20  [key=2, style=dotted];
m5_33 -> m5_34  [key=0, style=solid, color=green];
m5_33 -> m5_21  [key=2, style=dotted, color=red];
m5_34 -> m5_35  [key=0, style=solid, color=green];
m5_34 -> m5_21  [key=2, style=dotted, color=green];
m5_35 -> m5_36  [key=0, style=solid, color=green];
m5_35 -> m5_47  [key=2, style=dotted, color=green];
m5_35 -> m5_21  [key=2, style=dotted, color=green];
m5_36 -> m5_37  [key=0, style=solid, color=green];
m5_36 -> m5_22  [key=2, style=dotted, color=green];
m5_37 -> m5_38  [key=0, style=solid, color=red];
m5_37 -> m5_20  [key=2, style=dotted];
m5_38 -> m5_39  [key=0, style=solid, color=green];
m5_38 -> m5_21  [key=2, style=dotted, color=red];
m5_39 -> m5_40  [key=0, style=solid, color=green];
m5_39 -> m5_21  [key=2, style=dotted, color=green];
m5_40 -> m5_41  [key=0, style=solid, color=green];
m5_40 -> m5_47  [key=2, style=dotted, color=green];
m5_40 -> m5_21  [key=2, style=dotted, color=green];
m5_41 -> m5_42  [key=0, style=solid, color=green];
m5_41 -> m5_22  [key=2, style=dotted, color=green];
m5_42 -> m5_43  [key=0, style=solid, color=red];
m5_42 -> m5_20  [key=2, style=dotted];
m5_43 -> m5_44  [key=0, style=solid, color=green];
m5_43 -> m5_21  [key=2, style=dotted, color=red];
m5_44 -> m5_45  [key=0, style=solid, color=green];
m5_44 -> m5_24  [key=2, style=dotted, color=green];
m5_45 -> m5_25  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_8  [key=2, style=dotted];
m6_1 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label=hi];
m6_2 -> m6_3  [key=0, style=solid, color=red];
m6_2 -> m6_1  [key=3, color=darkorchid, style=bold, label="Local variable string s"];
m6_5 -> m6_6  [key=0, style=solid, color=red];
m6_5 -> m6_11  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid, color=red];
m6_3 -> n11  [key=2, style=dotted, color=red];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_10  [key=2, style=dotted];
m6_4 -> m6_6  [key=1, style=dashed, color=red, label=sw];
m6_6 -> m6_7  [key=0, style=solid, color=red];
m6_6 -> m6_12  [key=2, style=dotted, color=red];
m6_6 -> n11  [key=2, style=dotted, color=red];
m6_7 -> m6_0  [key=0, style=bold, color=blue];
m6_13 -> m6_14  [key=0, style=solid];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_21  [key=2, style=dotted];
m6_14 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label=hi];
m6_15 -> m6_16  [key=0, style=solid, color=red];
m6_15 -> m6_14  [key=3, color=darkorchid, style=bold, label="Local variable string s"];
m6_18 -> m6_19  [key=0, style=solid, color=red];
m6_18 -> m6_11  [key=2, style=dotted];
m6_16 -> m6_17  [key=0, style=solid, color=red];
m6_16 -> n11  [key=2, style=dotted, color=red];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_10  [key=2, style=dotted];
m6_17 -> m6_19  [key=1, style=dashed, color=red, label=sw];
m6_19 -> m6_20  [key=0, style=solid, color=red];
m6_19 -> m6_12  [key=2, style=dotted, color=red];
m6_19 -> n11  [key=2, style=dotted, color=red];
m6_20 -> m6_13  [key=0, style=bold, color=blue];
m7_29 -> m7_30  [key=0, style=solid];
m7_30 -> m7_31  [key=0, style=solid];
m7_30 -> m7_23  [key=2, style=dotted];
m7_30 -> m7_32  [key=1, style=dashed, color=red, label=options];
m7_31 -> m7_32  [key=0, style=solid, color=red];
m7_31 -> m7_24  [key=2, style=dotted];
m7_31 -> m7_34  [key=1, style=dashed, color=darkseagreen4, label=writer];
m7_32 -> m7_33  [key=0, style=solid, color=red];
m7_32 -> m7_25  [key=2, style=dotted, color=red];
m7_34 -> m7_35  [key=0, style=solid, color=red];
m7_34 -> m7_27  [key=2, style=dotted];
m7_34 -> m7_36  [key=1, style=dashed, color=darkseagreen4, label=helpText];
m7_33 -> m7_34  [key=0, style=solid, color=red];
m7_33 -> m7_38  [key=2, style=dotted, color=red];
m7_35 -> m7_36  [key=0, style=solid, color=red];
m7_35 -> m7_39  [key=2, style=dotted, color=red];
m7_36 -> m7_37  [key=0, style=solid];
m7_36 -> m7_40  [key=2, style=dotted];
m7_37 -> m7_29  [key=0, style=bold, color=blue];
m7_16 -> m7_17  [key=0, style=solid];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_23  [key=2, style=dotted];
m7_17 -> m7_19  [key=1, style=dashed, color=red, label=options];
m7_18 -> m7_19  [key=0, style=solid, color=red];
m7_18 -> m7_24  [key=2, style=dotted];
m7_18 -> m7_21  [key=1, style=dashed, color=red, label=writer];
m7_19 -> m7_20  [key=0, style=solid, color=red];
m7_19 -> m7_25  [key=2, style=dotted, color=red];
m7_21 -> m7_22  [key=0, style=solid, color=red];
m7_21 -> m7_27  [key=2, style=dotted, color=red];
m7_21 -> n11  [key=2, style=dotted, color=red];
m7_20 -> m7_21  [key=0, style=solid, color=red];
m7_20 -> m7_26  [key=2, style=dotted, color=red];
m7_22 -> m7_16  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_11  [key=2, style=dotted];
m7_1 -> m7_12  [key=2, style=dotted];
m7_1 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label=help];
m7_1 -> m7_4  [key=1, style=dashed, color=darkseagreen4, label=help];
m7_1 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label=help];
m7_1 -> m7_6  [key=1, style=dashed, color=darkseagreen4, label=help];
m7_1 -> m7_7  [key=1, style=dashed, color=darkseagreen4, label=help];
m7_1 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label=help];
m7_1 -> m7_9  [key=1, style=dashed, color=darkseagreen4, label=help];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_13  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_14  [key=2, style=dotted];
m7_4 -> m7_5  [key=0, style=solid];
m7_4 -> m7_14  [key=2, style=dotted];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_14  [key=2, style=dotted];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_14  [key=2, style=dotted];
m7_7 -> m7_8  [key=0, style=solid];
m7_7 -> m7_14  [key=2, style=dotted];
m7_8 -> m7_9  [key=0, style=solid];
m7_8 -> m7_15  [key=2, style=dotted];
m7_9 -> m7_10  [key=0, style=solid];
m7_10 -> m7_0  [key=0, style=bold, color=blue];
m7_41 -> m7_42  [key=0, style=solid];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_23  [key=2, style=dotted];
m7_42 -> m7_44  [key=1, style=dashed, color=red, label=options];
m7_43 -> m7_44  [key=0, style=solid, color=red];
m7_43 -> m7_24  [key=2, style=dotted];
m7_43 -> m7_46  [key=1, style=dashed, color=darkseagreen4, label=writer];
m7_44 -> m7_45  [key=0, style=solid, color=red];
m7_44 -> m7_25  [key=2, style=dotted, color=red];
m7_46 -> m7_47  [key=0, style=solid, color=red];
m7_46 -> m7_27  [key=2, style=dotted];
m7_45 -> m7_46  [key=0, style=solid, color=red];
m7_45 -> m7_38  [key=2, style=dotted, color=red];
m7_47 -> m7_48  [key=0, style=solid, color=red];
m7_47 -> m7_39  [key=2, style=dotted, color=red];
m7_48 -> m7_41  [key=0, style=bold, color=blue];
m7_49 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.HelpOptionAttributeFixture.MockOptions"];
m7_50 -> m7_19  [key=1, style=dashed, color=red, label="CommandLine.Tests.HelpOptionAttributeFixture"];
m7_50 -> m7_20  [key=1, style=dashed, color=red, label="CommandLine.Tests.HelpOptionAttributeFixture"];
m7_50 -> m7_32  [key=1, style=dashed, color=red, label="CommandLine.Tests.HelpOptionAttributeFixture"];
m7_50 -> m7_33  [key=1, style=dashed, color=red, label="CommandLine.Tests.HelpOptionAttributeFixture"];
m7_50 -> m7_44  [key=1, style=dashed, color=red, label="CommandLine.Tests.HelpOptionAttributeFixture"];
m7_50 -> m7_45  [key=1, style=dashed, color=red, label="CommandLine.Tests.HelpOptionAttributeFixture"];
m8_175 -> m8_176  [key=0, style=solid];
m8_176 -> m8_177  [key=0, style=solid];
m8_176 -> m8_163  [key=2, style=dotted];
m8_177 -> m8_178  [key=0, style=solid, color=red];
m8_177 -> m8_153  [key=2, style=dotted];
m8_177 -> m8_180  [key=2, style=dotted];
m8_177 -> m8_155  [key=2, style=dotted];
m8_178 -> m8_179  [key=0, style=solid, color=red];
m8_178 -> m8_156  [key=2, style=dotted, color=red];
m8_179 -> m8_175  [key=0, style=bold, color=blue];
m8_194 -> m8_195  [key=0, style=solid];
m8_194 -> m8_196  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.FormatOptionHelpTextEventArgs"];
m8_194 -> m8_201  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.FormatOptionHelpTextEventArgs"];
m8_194 -> m8_203  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.FormatOptionHelpTextEventArgs"];
m8_195 -> m8_196  [key=0, style=solid];
m8_195 -> m8_195  [key=3, color=darkorchid, style=bold, label="Local variable string optionHelp"];
m8_196 -> m8_197  [key=0, style=solid];
m8_196 -> m8_199  [key=0, style=solid];
m8_201 -> m8_202  [key=0, style=solid];
m8_201 -> m8_203  [key=0, style=solid];
m8_203 -> m8_204  [key=0, style=solid];
m8_197 -> m8_198  [key=0, style=solid];
m8_199 -> m8_200  [key=0, style=solid];
m8_198 -> m8_201  [key=0, style=solid];
m8_200 -> m8_201  [key=0, style=solid];
m8_200 -> m8_202  [key=1, style=dashed, color=darkseagreen4, label=optionHelp];
m8_200 -> m8_203  [key=1, style=dashed, color=darkseagreen4, label=optionHelp];
m8_202 -> m8_203  [key=0, style=solid];
m8_202 -> m8_202  [key=1, style=dashed, color=darkseagreen4, label=optionHelp];
m8_204 -> m8_194  [key=0, style=bold, color=blue];
m8_138 -> m8_139  [key=0, style=solid];
m8_139 -> m8_140  [key=0, style=solid];
m8_139 -> m8_151  [key=2, style=dotted];
m8_139 -> m8_141  [key=1, style=dashed, color=darkseagreen4, label=sw];
m8_139 -> m8_144  [key=1, style=dashed, color=darkseagreen4, label=sw];
m8_140 -> m8_141  [key=0, style=solid];
m8_140 -> m8_152  [key=2, style=dotted];
m8_140 -> m8_142  [key=1, style=dashed, color=darkseagreen4, label=options];
m8_141 -> m8_142  [key=0, style=solid];
m8_141 -> m8_153  [key=2, style=dotted];
m8_141 -> m8_154  [key=2, style=dotted];
m8_144 -> m8_145  [key=0, style=solid];
m8_144 -> m8_157  [key=2, style=dotted];
m8_144 -> m8_146  [key=1, style=dashed, color=darkseagreen4, label=outsw];
m8_142 -> m8_143  [key=0, style=solid, color=red];
m8_142 -> m8_155  [key=2, style=dotted];
m8_143 -> m8_144  [key=0, style=solid, color=red];
m8_143 -> m8_156  [key=2, style=dotted, color=red];
m8_145 -> m8_146  [key=0, style=solid];
m8_145 -> m8_103  [key=2, style=dotted];
m8_146 -> m8_147  [key=0, style=solid, color=red];
m8_146 -> m8_43  [key=2, style=dotted];
m8_146 -> m8_148  [key=1, style=dashed, color=red, label=lines];
m8_146 -> m8_149  [key=1, style=dashed, color=red, label=lines];
m8_147 -> m8_148  [key=0, style=solid, color=red];
m8_147 -> n11  [key=2, style=dotted, color=red];
m8_148 -> m8_149  [key=0, style=solid, color=red];
m8_148 -> n11  [key=2, style=dotted, color=red];
m8_149 -> m8_150  [key=0, style=solid, color=red];
m8_149 -> n11  [key=2, style=dotted, color=red];
m8_150 -> m8_138  [key=0, style=bold, color=blue];
m8_181 -> m8_182  [key=0, style=solid];
m8_182 -> m8_183  [key=0, style=solid];
m8_182 -> m8_163  [key=2, style=dotted];
m8_183 -> m8_184  [key=0, style=solid, color=red];
m8_183 -> m8_153  [key=2, style=dotted];
m8_183 -> m8_180  [key=2, style=dotted];
m8_183 -> m8_155  [key=2, style=dotted];
m8_184 -> m8_185  [key=0, style=solid, color=red];
m8_184 -> m8_156  [key=2, style=dotted, color=red];
m8_185 -> m8_181  [key=0, style=bold, color=blue];
m8_58 -> m8_59  [key=0, style=solid];
m8_59 -> m8_60  [key=0, style=solid];
m8_60 -> m8_61  [key=0, style=solid];
m8_60 -> m8_70  [key=2, style=dotted];
m8_60 -> m8_21  [key=2, style=dotted];
m8_61 -> m8_62  [key=0, style=solid];
m8_61 -> m8_42  [key=2, style=dotted];
m8_62 -> m8_63  [key=0, style=solid, color=red];
m8_62 -> m8_43  [key=2, style=dotted];
m8_62 -> m8_64  [key=1, style=dashed, color=red, label=lines];
m8_62 -> m8_65  [key=1, style=dashed, color=red, label=lines];
m8_62 -> m8_66  [key=1, style=dashed, color=red, label=lines];
m8_62 -> m8_67  [key=1, style=dashed, color=red, label=lines];
m8_62 -> m8_68  [key=1, style=dashed, color=red, label=lines];
m8_63 -> m8_64  [key=0, style=solid, color=red];
m8_63 -> n11  [key=2, style=dotted, color=red];
m8_64 -> m8_65  [key=0, style=solid, color=red];
m8_64 -> n11  [key=2, style=dotted, color=red];
m8_65 -> m8_66  [key=0, style=solid, color=red];
m8_65 -> n11  [key=2, style=dotted, color=red];
m8_66 -> m8_67  [key=0, style=solid, color=red];
m8_66 -> n11  [key=2, style=dotted, color=red];
m8_67 -> m8_68  [key=0, style=solid, color=red];
m8_67 -> n11  [key=2, style=dotted, color=red];
m8_68 -> m8_69  [key=0, style=solid, color=red];
m8_68 -> n11  [key=2, style=dotted, color=red];
m8_69 -> m8_58  [key=0, style=bold, color=blue];
m8_134 -> m8_135  [key=0, style=solid];
m8_135 -> m8_136  [key=0, style=solid, color=red];
m8_135 -> m8_121  [key=2, style=dotted];
m8_136 -> m8_137  [key=0, style=solid, color=red];
m8_136 -> m8_42  [key=2, style=dotted, color=red];
m8_136 -> n11  [key=2, style=dotted, color=red];
m8_137 -> m8_134  [key=0, style=bold, color=blue];
m8_86 -> m8_87  [key=0, style=solid];
m8_87 -> m8_88  [key=0, style=solid];
m8_87 -> m8_14  [key=2, style=dotted];
m8_87 -> m8_89  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_87 -> m8_90  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_87 -> m8_91  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_87 -> m8_92  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_101  [key=2, style=dotted];
m8_89 -> m8_90  [key=0, style=solid];
m8_89 -> m8_20  [key=2, style=dotted];
m8_90 -> m8_91  [key=0, style=solid];
m8_90 -> m8_102  [key=2, style=dotted];
m8_90 -> m8_21  [key=2, style=dotted];
m8_91 -> m8_92  [key=0, style=solid];
m8_91 -> m8_41  [key=2, style=dotted];
m8_92 -> m8_93  [key=0, style=solid];
m8_92 -> m8_42  [key=2, style=dotted];
m8_92 -> m8_94  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_93 -> m8_94  [key=0, style=solid];
m8_93 -> m8_103  [key=2, style=dotted];
m8_94 -> m8_95  [key=0, style=solid, color=red];
m8_94 -> m8_43  [key=2, style=dotted];
m8_94 -> m8_96  [key=1, style=dashed, color=red, label=lines];
m8_94 -> m8_97  [key=1, style=dashed, color=red, label=lines];
m8_94 -> m8_98  [key=1, style=dashed, color=red, label=lines];
m8_94 -> m8_99  [key=1, style=dashed, color=red, label=lines];
m8_95 -> m8_96  [key=0, style=solid, color=red];
m8_95 -> n11  [key=2, style=dotted, color=red];
m8_96 -> m8_97  [key=0, style=solid, color=red];
m8_96 -> n11  [key=2, style=dotted, color=red];
m8_97 -> m8_98  [key=0, style=solid, color=red];
m8_97 -> n11  [key=2, style=dotted, color=red];
m8_98 -> m8_99  [key=0, style=solid, color=red];
m8_98 -> n11  [key=2, style=dotted, color=red];
m8_99 -> m8_100  [key=0, style=solid, color=red];
m8_99 -> n11  [key=2, style=dotted, color=red];
m8_100 -> m8_86  [key=0, style=bold, color=blue];
m8_170 -> m8_171  [key=0, style=solid];
m8_171 -> m8_172  [key=0, style=solid];
m8_171 -> m8_163  [key=2, style=dotted];
m8_172 -> m8_173  [key=0, style=solid, color=red];
m8_172 -> m8_153  [key=2, style=dotted];
m8_172 -> m8_164  [key=2, style=dotted];
m8_172 -> m8_155  [key=2, style=dotted];
m8_173 -> m8_174  [key=0, style=solid, color=red];
m8_173 -> m8_156  [key=2, style=dotted, color=red];
m8_174 -> m8_170  [key=0, style=bold, color=blue];
m8_158 -> m8_159  [key=0, style=solid];
m8_159 -> m8_160  [key=0, style=solid];
m8_159 -> m8_163  [key=2, style=dotted];
m8_160 -> m8_161  [key=0, style=solid, color=red];
m8_160 -> m8_153  [key=2, style=dotted];
m8_160 -> m8_164  [key=2, style=dotted];
m8_160 -> m8_155  [key=2, style=dotted];
m8_161 -> m8_162  [key=0, style=solid, color=red];
m8_161 -> m8_156  [key=2, style=dotted, color=red];
m8_162 -> m8_158  [key=0, style=bold, color=blue];
m8_25 -> m8_26  [key=0, style=solid];
m8_26 -> m8_27  [key=0, style=solid];
m8_26 -> m8_20  [key=2, style=dotted];
m8_27 -> m8_25  [key=0, style=bold, color=blue];
m8_45 -> m8_46  [key=0, style=solid];
m8_46 -> m8_47  [key=0, style=solid];
m8_47 -> m8_48  [key=0, style=solid];
m8_47 -> m8_57  [key=2, style=dotted];
m8_47 -> m8_21  [key=2, style=dotted];
m8_48 -> m8_49  [key=0, style=solid];
m8_48 -> m8_42  [key=2, style=dotted];
m8_49 -> m8_50  [key=0, style=solid, color=red];
m8_49 -> m8_43  [key=2, style=dotted];
m8_49 -> m8_52  [key=1, style=dashed, color=red, label=lines];
m8_49 -> m8_53  [key=1, style=dashed, color=red, label=lines];
m8_49 -> m8_54  [key=1, style=dashed, color=red, label=lines];
m8_49 -> m8_55  [key=1, style=dashed, color=red, label=lines];
m8_50 -> m8_51  [key=0, style=solid, color=red];
m8_50 -> n11  [key=2, style=dotted, color=red];
m8_52 -> m8_53  [key=0, style=solid, color=red];
m8_52 -> n11  [key=2, style=dotted, color=red];
m8_53 -> m8_54  [key=0, style=solid, color=red];
m8_53 -> n11  [key=2, style=dotted, color=red];
m8_54 -> m8_55  [key=0, style=solid, color=red];
m8_54 -> n11  [key=2, style=dotted, color=red];
m8_55 -> m8_56  [key=0, style=solid, color=red];
m8_55 -> n11  [key=2, style=dotted, color=red];
m8_51 -> m8_52  [key=0, style=solid, color=red];
m8_51 -> m8_53  [key=1, style=dashed, color=red, label=formattingMessage];
m8_51 -> m8_54  [key=1, style=dashed, color=red, label=formattingMessage];
m8_51 -> m8_55  [key=1, style=dashed, color=red, label=formattingMessage];
m8_51 -> m8_51  [key=3, color=red, style=bold, label="Local variable string formattingMessage"];
m8_56 -> m8_45  [key=0, style=bold, color=blue];
m8_126 -> m8_127  [key=0, style=solid];
m8_127 -> m8_128  [key=0, style=solid];
m8_127 -> m8_121  [key=2, style=dotted];
m8_127 -> m8_122  [key=2, style=dotted];
m8_127 -> m8_123  [key=2, style=dotted];
m8_127 -> m8_129  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_128 -> m8_129  [key=0, style=solid];
m8_128 -> m8_124  [key=2, style=dotted];
m8_128 -> m8_21  [key=2, style=dotted];
m8_129 -> m8_130  [key=0, style=solid];
m8_129 -> m8_42  [key=2, style=dotted];
m8_129 -> m8_131  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_130 -> m8_131  [key=0, style=solid];
m8_130 -> m8_103  [key=2, style=dotted];
m8_131 -> m8_132  [key=0, style=solid, color=red];
m8_131 -> m8_43  [key=2, style=dotted];
m8_132 -> m8_133  [key=0, style=solid, color=red];
m8_132 -> n11  [key=2, style=dotted, color=red];
m8_133 -> m8_126  [key=0, style=bold, color=blue];
m8_165 -> m8_166  [key=0, style=solid];
m8_166 -> m8_167  [key=0, style=solid];
m8_166 -> m8_163  [key=2, style=dotted];
m8_167 -> m8_168  [key=0, style=solid, color=red];
m8_167 -> m8_153  [key=2, style=dotted];
m8_167 -> m8_164  [key=2, style=dotted];
m8_167 -> m8_155  [key=2, style=dotted];
m8_168 -> m8_169  [key=0, style=solid, color=red];
m8_168 -> m8_156  [key=2, style=dotted, color=red];
m8_169 -> m8_165  [key=0, style=bold, color=blue];
m8_71 -> m8_72  [key=0, style=solid];
m8_72 -> m8_73  [key=0, style=solid];
m8_72 -> m8_14  [key=2, style=dotted];
m8_72 -> m8_74  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_72 -> m8_75  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_72 -> m8_76  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_72 -> m8_77  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_73 -> m8_74  [key=0, style=solid];
m8_74 -> m8_75  [key=0, style=solid];
m8_74 -> m8_20  [key=2, style=dotted];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_40  [key=2, style=dotted];
m8_75 -> m8_21  [key=2, style=dotted];
m8_76 -> m8_77  [key=0, style=solid];
m8_76 -> m8_41  [key=2, style=dotted];
m8_77 -> m8_78  [key=0, style=solid];
m8_77 -> m8_42  [key=2, style=dotted];
m8_78 -> m8_79  [key=0, style=solid, color=red];
m8_78 -> m8_43  [key=2, style=dotted];
m8_78 -> m8_80  [key=1, style=dashed, color=red, label=lines];
m8_78 -> m8_81  [key=1, style=dashed, color=red, label=lines];
m8_78 -> m8_82  [key=1, style=dashed, color=red, label=lines];
m8_78 -> m8_83  [key=1, style=dashed, color=red, label=lines];
m8_78 -> m8_84  [key=1, style=dashed, color=red, label=lines];
m8_79 -> m8_80  [key=0, style=solid, color=red];
m8_79 -> n11  [key=2, style=dotted, color=red];
m8_80 -> m8_81  [key=0, style=solid, color=red];
m8_80 -> n11  [key=2, style=dotted, color=red];
m8_81 -> m8_82  [key=0, style=solid, color=red];
m8_81 -> n11  [key=2, style=dotted, color=red];
m8_82 -> m8_83  [key=0, style=solid, color=red];
m8_82 -> n11  [key=2, style=dotted, color=red];
m8_83 -> m8_84  [key=0, style=solid, color=red];
m8_83 -> n11  [key=2, style=dotted, color=red];
m8_84 -> m8_85  [key=0, style=solid, color=red];
m8_84 -> n11  [key=2, style=dotted, color=red];
m8_85 -> m8_71  [key=0, style=bold, color=blue];
m8_186 -> m8_187  [key=0, style=solid];
m8_187 -> m8_188  [key=0, style=solid];
m8_187 -> m8_192  [key=2, style=dotted];
m8_187 -> m8_189  [key=1, style=dashed, color=darkseagreen4, label=options];
m8_187 -> m8_190  [key=1, style=dashed, color=red, label=options];
m8_188 -> m8_189  [key=0, style=solid];
m8_188 -> m8_151  [key=2, style=dotted];
m8_189 -> m8_190  [key=0, style=solid, color=red];
m8_189 -> m8_153  [key=2, style=dotted];
m8_189 -> m8_180  [key=2, style=dotted];
m8_189 -> m8_193  [key=2, style=dotted];
m8_190 -> m8_191  [key=0, style=solid, color=red];
m8_190 -> n11  [key=2, style=dotted, color=red];
m8_191 -> m8_186  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_14  [key=2, style=dotted];
m8_1 -> m8_15  [key=2, style=dotted];
m8_1 -> m8_3  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_1 -> m8_4  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_1 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_1 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_1 -> m8_8  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_1 -> m8_9  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_1 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_1 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_1 -> m8_12  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_2 -> m8_3  [key=0, style=solid];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_16  [key=2, style=dotted];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_17  [key=2, style=dotted];
m8_4 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label=errors];
m8_6 -> m8_7  [key=0, style=solid];
m8_6 -> m8_19  [key=2, style=dotted];
m8_6 -> m8_20  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_20  [key=2, style=dotted];
m8_8 -> m8_9  [key=0, style=solid];
m8_8 -> m8_20  [key=2, style=dotted];
m8_9 -> m8_10  [key=0, style=solid];
m8_9 -> m8_20  [key=2, style=dotted];
m8_10 -> m8_11  [key=0, style=solid];
m8_10 -> m8_20  [key=2, style=dotted];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_21  [key=2, style=dotted];
m8_12 -> m8_13  [key=0, style=solid];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_8  [key=0, style=solid];
m8_5 -> m8_18  [key=2, style=dotted];
m8_13 -> m8_0  [key=0, style=bold, color=blue];
m8_28 -> m8_29  [key=0, style=solid];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_14  [key=2, style=dotted];
m8_29 -> m8_31  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_29 -> m8_32  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_29 -> m8_33  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_29 -> m8_34  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_29 -> m8_35  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_30 -> m8_31  [key=0, style=solid];
m8_30 -> m8_20  [key=2, style=dotted];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_20  [key=2, style=dotted];
m8_32 -> m8_33  [key=0, style=solid];
m8_32 -> m8_40  [key=2, style=dotted];
m8_32 -> m8_21  [key=2, style=dotted];
m8_33 -> m8_34  [key=0, style=solid];
m8_33 -> m8_41  [key=2, style=dotted];
m8_34 -> m8_35  [key=0, style=solid];
m8_34 -> m8_41  [key=2, style=dotted];
m8_35 -> m8_36  [key=0, style=solid];
m8_35 -> m8_42  [key=2, style=dotted];
m8_36 -> m8_37  [key=0, style=solid, color=red];
m8_36 -> m8_43  [key=2, style=dotted];
m8_36 -> m8_38  [key=1, style=dashed, color=red, label=lines];
m8_37 -> m8_38  [key=0, style=solid, color=red];
m8_37 -> n11  [key=2, style=dotted, color=red];
m8_38 -> m8_39  [key=0, style=solid, color=red];
m8_38 -> n11  [key=2, style=dotted, color=red];
m8_39 -> m8_28  [key=0, style=bold, color=blue];
m8_22 -> m8_23  [key=0, style=solid];
m8_23 -> m8_24  [key=0, style=solid];
m8_23 -> m8_14  [key=2, style=dotted];
m8_23 -> m8_15  [key=2, style=dotted];
m8_24 -> m8_22  [key=0, style=bold, color=blue];
m8_104 -> m8_105  [key=0, style=solid];
m8_105 -> m8_106  [key=0, style=solid];
m8_105 -> m8_108  [key=1, style=dashed, color=darkseagreen4, label=year];
m8_105 -> m8_116  [key=1, style=dashed, color=red, label=year];
m8_106 -> m8_107  [key=0, style=solid];
m8_106 -> m8_121  [key=2, style=dotted];
m8_106 -> m8_108  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_106 -> m8_109  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_106 -> m8_110  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_106 -> m8_111  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_106 -> m8_112  [key=1, style=dashed, color=darkseagreen4, label=local];
m8_108 -> m8_109  [key=0, style=solid];
m8_108 -> m8_123  [key=2, style=dotted];
m8_116 -> m8_117  [key=0, style=solid, color=red];
m8_116 -> m8_125  [key=2, style=dotted, color=red];
m8_116 -> n11  [key=2, style=dotted, color=red];
m8_107 -> m8_108  [key=0, style=solid];
m8_107 -> m8_122  [key=2, style=dotted];
m8_109 -> m8_110  [key=0, style=solid];
m8_109 -> m8_20  [key=2, style=dotted];
m8_110 -> m8_111  [key=0, style=solid];
m8_110 -> m8_124  [key=2, style=dotted];
m8_110 -> m8_21  [key=2, style=dotted];
m8_111 -> m8_112  [key=0, style=solid];
m8_111 -> m8_41  [key=2, style=dotted];
m8_112 -> m8_113  [key=0, style=solid];
m8_112 -> m8_42  [key=2, style=dotted];
m8_112 -> m8_114  [key=1, style=dashed, color=darkseagreen4, label=help];
m8_113 -> m8_114  [key=0, style=solid];
m8_113 -> m8_103  [key=2, style=dotted];
m8_114 -> m8_115  [key=0, style=solid, color=red];
m8_114 -> m8_43  [key=2, style=dotted];
m8_114 -> m8_116  [key=1, style=dashed, color=red, label=lines];
m8_114 -> m8_117  [key=1, style=dashed, color=red, label=lines];
m8_114 -> m8_118  [key=1, style=dashed, color=red, label=lines];
m8_114 -> m8_119  [key=1, style=dashed, color=red, label=lines];
m8_115 -> m8_116  [key=0, style=solid, color=red];
m8_115 -> n11  [key=2, style=dotted, color=red];
m8_117 -> m8_118  [key=0, style=solid, color=red];
m8_117 -> n11  [key=2, style=dotted, color=red];
m8_118 -> m8_119  [key=0, style=solid, color=red];
m8_118 -> n11  [key=2, style=dotted, color=red];
m8_119 -> m8_120  [key=0, style=solid, color=red];
m8_119 -> n11  [key=2, style=dotted, color=red];
m8_120 -> m8_104  [key=0, style=bold, color=blue];
m8_205 -> m8_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp"];
m8_205 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture.ComplexOptionsWithHelp"];
m8_206 -> m8_23  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture"];
m8_206 -> m8_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture"];
m8_206 -> m8_46  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture"];
m8_206 -> m8_47  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture"];
m8_206 -> m8_48  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture"];
m8_206 -> m8_59  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture"];
m8_206 -> m8_60  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture"];
m8_206 -> m8_61  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture"];
m8_206 -> m8_88  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.Tests.HelpTextFixture"];
m9_43 -> m9_44  [key=0, style=solid];
m9_44 -> m9_45  [key=0, style=solid, color=red];
m9_44 -> m9_48  [key=2, style=dotted];
m9_45 -> m9_46  [key=0, style=solid, color=red];
m9_45 -> m9_14  [key=2, style=dotted, color=red];
m9_46 -> m9_47  [key=0, style=solid, color=red];
m9_46 -> m9_22  [key=2, style=dotted, color=red];
m9_47 -> m9_43  [key=0, style=bold, color=blue];
m9_17 -> m9_18  [key=0, style=solid];
m9_18 -> m9_19  [key=0, style=solid, color=red];
m9_18 -> m9_13  [key=2, style=dotted];
m9_19 -> m9_20  [key=0, style=solid, color=red];
m9_19 -> m9_14  [key=2, style=dotted, color=red];
m9_20 -> m9_21  [key=0, style=solid, color=red];
m9_20 -> m9_22  [key=2, style=dotted, color=red];
m9_21 -> m9_17  [key=0, style=bold, color=blue];
m9_30 -> m9_31  [key=0, style=solid];
m9_31 -> m9_32  [key=0, style=solid, color=red];
m9_31 -> m9_37  [key=2, style=dotted];
m9_31 -> m9_34  [key=1, style=dashed, color=green, label=options];
m9_31 -> m9_35  [key=1, style=dashed, color=green, label=options];
m9_32 -> m9_33  [key=0, style=solid, color=red];
m9_32 -> m9_14  [key=2, style=dotted, color=red];
m9_34 -> m9_35  [key=0, style=solid, color=green];
m9_34 -> n11  [key=2, style=dotted, color=green];
m9_35 -> m9_36  [key=0, style=solid, color=green];
m9_35 -> n11  [key=2, style=dotted, color=green];
m9_33 -> m9_34  [key=0, style=solid, color=green];
m9_33 -> m9_15  [key=2, style=dotted, color=red];
m9_36 -> m9_30  [key=0, style=bold, color=blue];
m9_23 -> m9_24  [key=0, style=solid];
m9_24 -> m9_25  [key=0, style=solid, color=red];
m9_24 -> m9_13  [key=2, style=dotted];
m9_24 -> m9_27  [key=1, style=dashed, color=green, label=options];
m9_24 -> m9_28  [key=1, style=dashed, color=green, label=options];
m9_25 -> m9_26  [key=0, style=solid, color=red];
m9_25 -> m9_14  [key=2, style=dotted, color=red];
m9_27 -> m9_28  [key=0, style=solid, color=green];
m9_27 -> n11  [key=2, style=dotted, color=green];
m9_28 -> m9_29  [key=0, style=solid, color=green];
m9_28 -> n11  [key=2, style=dotted, color=green];
m9_26 -> m9_27  [key=0, style=solid, color=green];
m9_26 -> m9_15  [key=2, style=dotted, color=red];
m9_29 -> m9_23  [key=0, style=bold, color=blue];
m9_38 -> m9_39  [key=0, style=solid];
m9_39 -> m9_40  [key=0, style=solid, color=red];
m9_39 -> m9_37  [key=2, style=dotted];
m9_40 -> m9_41  [key=0, style=solid, color=red];
m9_40 -> m9_14  [key=2, style=dotted, color=red];
m9_41 -> m9_42  [key=0, style=solid, color=red];
m9_41 -> m9_22  [key=2, style=dotted, color=red];
m9_42 -> m9_38  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_0  [key=0, style=bold, color=blue];
m9_49 -> m9_50  [key=0, style=solid];
m9_50 -> m9_51  [key=0, style=solid, color=red];
m9_50 -> m9_48  [key=2, style=dotted];
m9_50 -> m9_53  [key=1, style=dashed, color=green, label=options];
m9_50 -> m9_54  [key=1, style=dashed, color=green, label=options];
m9_50 -> m9_55  [key=1, style=dashed, color=green, label=options];
m9_51 -> m9_52  [key=0, style=solid, color=red];
m9_51 -> m9_14  [key=2, style=dotted, color=red];
m9_53 -> m9_54  [key=0, style=solid, color=green];
m9_53 -> n11  [key=2, style=dotted, color=green];
m9_54 -> m9_55  [key=0, style=solid, color=green];
m9_54 -> n11  [key=2, style=dotted, color=green];
m9_55 -> m9_56  [key=0, style=solid, color=green];
m9_55 -> n11  [key=2, style=dotted, color=green];
m9_52 -> m9_53  [key=0, style=solid, color=green];
m9_52 -> m9_15  [key=2, style=dotted, color=red];
m9_56 -> m9_49  [key=0, style=bold, color=blue];
m9_7 -> m9_8  [key=0, style=solid];
m9_8 -> m9_9  [key=0, style=solid, color=red];
m9_8 -> m9_13  [key=2, style=dotted];
m9_8 -> m9_11  [key=1, style=dashed, color=green, label=options];
m9_9 -> m9_10  [key=0, style=solid, color=red];
m9_9 -> m9_14  [key=2, style=dotted, color=red];
m9_11 -> m9_12  [key=0, style=solid, color=green];
m9_11 -> n11  [key=2, style=dotted, color=green];
m9_10 -> m9_11  [key=0, style=solid, color=green];
m9_10 -> m9_15  [key=2, style=dotted, color=red];
m9_12 -> m9_7  [key=0, style=bold, color=blue];
m9_2 -> m9_3  [key=0, style=solid, color=red];
m9_3 -> m9_4  [key=0, style=solid, color=red];
m9_3 -> m9_5  [key=2, style=dotted, color=red];
m9_3 -> m9_6  [key=2, style=dotted, color=red];
m9_4 -> m9_2  [key=0, style=bold, color=blue];
m9_57 -> m9_9  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_19  [key=1, style=dashed, color=red, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_20  [key=1, style=dashed, color=red, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_25  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_32  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_33  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_40  [key=1, style=dashed, color=red, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_41  [key=1, style=dashed, color=red, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_45  [key=1, style=dashed, color=red, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_46  [key=1, style=dashed, color=red, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_51  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m9_57 -> m9_52  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.MutuallyExclusiveParsingFixture"];
m10_23 -> m10_24  [key=0, style=solid];
m10_24 -> m10_25  [key=0, style=solid, color=red];
m10_24 -> m10_12  [key=2, style=dotted];
m10_25 -> m10_26  [key=0, style=solid, color=red];
m10_25 -> m10_13  [key=2, style=dotted, color=red];
m10_26 -> m10_27  [key=0, style=solid, color=red];
m10_26 -> m10_22  [key=2, style=dotted, color=red];
m10_27 -> m10_23  [key=0, style=bold, color=blue];
m10_48 -> m10_49  [key=0, style=solid];
m10_49 -> m10_50  [key=0, style=solid, color=red];
m10_49 -> m10_12  [key=2, style=dotted];
m10_49 -> m10_52  [key=1, style=dashed, color=green, label=options];
m10_50 -> m10_51  [key=0, style=solid, color=red];
m10_50 -> m10_13  [key=2, style=dotted, color=red];
m10_52 -> m10_53  [key=0, style=solid, color=green];
m10_52 -> n11  [key=2, style=dotted, color=green];
m10_51 -> m10_52  [key=0, style=solid, color=green];
m10_51 -> m10_14  [key=2, style=dotted, color=red];
m10_53 -> m10_54  [key=0, style=solid, color=red];
m10_53 -> m10_12  [key=2, style=dotted];
m10_53 -> m10_56  [key=1, style=dashed, color=green, label=options];
m10_54 -> m10_55  [key=0, style=solid, color=red];
m10_54 -> m10_13  [key=2, style=dotted, color=red];
m10_56 -> m10_57  [key=0, style=solid, color=green];
m10_56 -> m10_16  [key=2, style=dotted, color=green];
m10_55 -> m10_56  [key=0, style=solid, color=green];
m10_55 -> m10_14  [key=2, style=dotted, color=red];
m10_57 -> m10_48  [key=0, style=bold, color=blue];
m10_28 -> m10_29  [key=0, style=solid];
m10_29 -> m10_30  [key=0, style=solid, color=red];
m10_29 -> m10_12  [key=2, style=dotted];
m10_29 -> m10_32  [key=1, style=dashed, color=green, label=options];
m10_30 -> m10_31  [key=0, style=solid, color=red];
m10_30 -> m10_13  [key=2, style=dotted, color=red];
m10_32 -> m10_33  [key=0, style=solid, color=green];
m10_32 -> n11  [key=2, style=dotted, color=green];
m10_31 -> m10_32  [key=0, style=solid, color=green];
m10_31 -> m10_14  [key=2, style=dotted, color=red];
m10_33 -> m10_34  [key=0, style=solid, color=red];
m10_33 -> m10_12  [key=2, style=dotted];
m10_33 -> m10_36  [key=1, style=dashed, color=green, label=options];
m10_34 -> m10_35  [key=0, style=solid, color=red];
m10_34 -> m10_13  [key=2, style=dotted, color=red];
m10_36 -> m10_37  [key=0, style=solid, color=green];
m10_36 -> m10_16  [key=2, style=dotted, color=green];
m10_35 -> m10_36  [key=0, style=solid, color=green];
m10_35 -> m10_14  [key=2, style=dotted, color=red];
m10_37 -> m10_28  [key=0, style=bold, color=blue];
m10_38 -> m10_39  [key=0, style=solid];
m10_39 -> m10_40  [key=0, style=solid, color=red];
m10_39 -> m10_12  [key=2, style=dotted];
m10_40 -> m10_41  [key=0, style=solid, color=red];
m10_40 -> m10_13  [key=2, style=dotted, color=red];
m10_41 -> m10_42  [key=0, style=solid, color=red];
m10_41 -> m10_22  [key=2, style=dotted, color=red];
m10_42 -> m10_38  [key=0, style=bold, color=blue];
m10_2 -> m10_3  [key=0, style=solid];
m10_3 -> m10_4  [key=0, style=solid, color=red];
m10_3 -> m10_12  [key=2, style=dotted];
m10_3 -> m10_6  [key=1, style=dashed, color=green, label=options];
m10_4 -> m10_5  [key=0, style=solid, color=red];
m10_4 -> m10_13  [key=2, style=dotted, color=red];
m10_6 -> m10_7  [key=0, style=solid, color=green];
m10_6 -> n11  [key=2, style=dotted, color=green];
m10_5 -> m10_6  [key=0, style=solid, color=green];
m10_5 -> m10_14  [key=2, style=dotted, color=red];
m10_7 -> m10_8  [key=0, style=solid, color=red];
m10_7 -> m10_12  [key=2, style=dotted];
m10_7 -> m10_10  [key=1, style=dashed, color=green, label=options];
m10_8 -> m10_9  [key=0, style=solid, color=red];
m10_8 -> m10_13  [key=2, style=dotted, color=red];
m10_10 -> m10_11  [key=0, style=solid, color=green];
m10_10 -> m10_16  [key=2, style=dotted, color=green];
m10_9 -> m10_10  [key=0, style=solid, color=green];
m10_9 -> m10_14  [key=2, style=dotted, color=red];
m10_11 -> m10_2  [key=0, style=bold, color=blue];
m10_63 -> m10_64  [key=0, style=solid];
m10_64 -> m10_65  [key=0, style=solid, color=red];
m10_64 -> m10_12  [key=2, style=dotted];
m10_65 -> m10_66  [key=0, style=solid, color=red];
m10_65 -> m10_13  [key=2, style=dotted, color=red];
m10_66 -> m10_67  [key=0, style=solid, color=red];
m10_66 -> m10_22  [key=2, style=dotted, color=red];
m10_67 -> m10_63  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_0  [key=0, style=bold, color=blue];
m10_17 -> m10_18  [key=0, style=solid];
m10_18 -> m10_19  [key=0, style=solid, color=red];
m10_18 -> m10_12  [key=2, style=dotted];
m10_19 -> m10_20  [key=0, style=solid, color=red];
m10_19 -> m10_13  [key=2, style=dotted, color=red];
m10_20 -> m10_21  [key=0, style=solid, color=red];
m10_20 -> m10_22  [key=2, style=dotted, color=red];
m10_21 -> m10_17  [key=0, style=bold, color=blue];
m10_43 -> m10_44  [key=0, style=solid];
m10_44 -> m10_45  [key=0, style=solid, color=red];
m10_44 -> m10_12  [key=2, style=dotted];
m10_45 -> m10_46  [key=0, style=solid, color=red];
m10_45 -> m10_13  [key=2, style=dotted, color=red];
m10_46 -> m10_47  [key=0, style=solid, color=red];
m10_46 -> m10_22  [key=2, style=dotted, color=red];
m10_47 -> m10_43  [key=0, style=bold, color=blue];
m10_58 -> m10_59  [key=0, style=solid];
m10_59 -> m10_60  [key=0, style=solid, color=red];
m10_59 -> m10_12  [key=2, style=dotted];
m10_60 -> m10_61  [key=0, style=solid, color=red];
m10_60 -> m10_13  [key=2, style=dotted, color=red];
m10_61 -> m10_62  [key=0, style=solid, color=red];
m10_61 -> m10_22  [key=2, style=dotted, color=red];
m10_62 -> m10_58  [key=0, style=bold, color=blue];
m10_68 -> m10_69  [key=0, style=solid];
m10_69 -> m10_70  [key=0, style=solid, color=red];
m10_69 -> m10_12  [key=2, style=dotted];
m10_69 -> m10_72  [key=1, style=dashed, color=green, label=options];
m10_70 -> m10_71  [key=0, style=solid, color=red];
m10_70 -> m10_13  [key=2, style=dotted, color=red];
m10_72 -> m10_73  [key=0, style=solid, color=green];
m10_72 -> n11  [key=2, style=dotted, color=green];
m10_71 -> m10_72  [key=0, style=solid, color=green];
m10_71 -> m10_14  [key=2, style=dotted, color=red];
m10_73 -> m10_74  [key=0, style=solid, color=green];
m10_73 -> m10_12  [key=2, style=dotted];
m10_73 -> m10_76  [key=1, style=dashed, color=green, label=options];
m10_73 -> m10_77  [key=1, style=dashed, color=green, label=options];
m10_73 -> m10_78  [key=1, style=dashed, color=green, label=options];
m10_73 -> m10_79  [key=1, style=dashed, color=green, label=options];
m10_74 -> m10_75  [key=0, style=solid, color=green];
m10_74 -> m10_13  [key=2, style=dotted, color=green];
m10_76 -> m10_77  [key=0, style=solid, color=green];
m10_76 -> n11  [key=2, style=dotted, color=green];
m10_77 -> m10_78  [key=0, style=solid, color=green];
m10_77 -> n11  [key=2, style=dotted, color=green];
m10_78 -> m10_79  [key=0, style=solid, color=green];
m10_78 -> n11  [key=2, style=dotted, color=green];
m10_79 -> m10_80  [key=0, style=solid, color=green];
m10_79 -> n11  [key=2, style=dotted, color=green];
m10_75 -> m10_76  [key=0, style=solid, color=green];
m10_75 -> m10_14  [key=2, style=dotted, color=red];
m10_80 -> m10_68  [key=0, style=bold, color=blue];
m10_81 -> m10_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_9  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_19  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_20  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_25  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_26  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_30  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_31  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_34  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_35  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_40  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_41  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_45  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_46  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_50  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_51  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_54  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_55  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_60  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_61  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_65  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_66  [key=1, style=dashed, color=red, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_70  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_71  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_74  [key=1, style=dashed, color=green, label="CommandLine.Tests.NullableTypesParsingFixture"];
m10_81 -> m10_75  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.NullableTypesParsingFixture"];
m11_12 -> m11_13  [key=0, style=solid];
m11_13 -> m11_14  [key=0, style=solid, color=red];
m11_13 -> m11_8  [key=2, style=dotted];
m11_13 -> m11_16  [key=1, style=dashed, color=green, label=options];
m11_14 -> m11_15  [key=0, style=solid, color=red];
m11_14 -> m11_9  [key=2, style=dotted, color=red];
m11_16 -> m11_17  [key=0, style=solid, color=green];
m11_16 -> m11_11  [key=2, style=dotted, color=green];
m11_15 -> m11_16  [key=0, style=solid, color=green];
m11_15 -> m11_10  [key=2, style=dotted, color=red];
m11_17 -> m11_12  [key=0, style=bold, color=blue];
m11_55 -> m11_56  [key=0, style=solid];
m11_56 -> m11_57  [key=0, style=solid, color=green];
m11_56 -> m11_65  [key=2, style=dotted];
m11_56 -> m11_59  [key=1, style=dashed, color=green, label=options];
m11_56 -> m11_60  [key=1, style=dashed, color=green, label=options];
m11_56 -> m11_61  [key=1, style=dashed, color=green, label=options];
m11_56 -> m11_62  [key=1, style=dashed, color=green, label=options];
m11_56 -> m11_63  [key=1, style=dashed, color=green, label=options];
m11_57 -> m11_58  [key=0, style=solid, color=green];
m11_57 -> m11_9  [key=2, style=dotted, color=green];
m11_59 -> m11_60  [key=0, style=solid, color=green];
m11_59 -> n11  [key=2, style=dotted, color=green];
m11_60 -> m11_61  [key=0, style=solid, color=green];
m11_60 -> n11  [key=2, style=dotted, color=green];
m11_61 -> m11_62  [key=0, style=solid, color=green];
m11_61 -> m11_11  [key=2, style=dotted, color=green];
m11_62 -> m11_63  [key=0, style=solid, color=green];
m11_62 -> m11_54  [key=2, style=dotted, color=green];
m11_63 -> m11_64  [key=0, style=solid, color=green];
m11_63 -> m11_66  [key=2, style=dotted, color=green];
m11_58 -> m11_59  [key=0, style=solid, color=green];
m11_58 -> m11_10  [key=2, style=dotted, color=red];
m11_64 -> m11_55  [key=0, style=bold, color=blue];
m11_82 -> m11_83  [key=0, style=solid];
m11_83 -> m11_84  [key=0, style=solid, color=red];
m11_83 -> m11_8  [key=2, style=dotted];
m11_84 -> m11_85  [key=0, style=solid, color=red];
m11_84 -> m11_9  [key=2, style=dotted, color=red];
m11_85 -> m11_86  [key=0, style=solid, color=red];
m11_85 -> m11_75  [key=2, style=dotted, color=red];
m11_86 -> m11_87  [key=0, style=solid, color=red];
m11_86 -> m11_8  [key=2, style=dotted];
m11_87 -> m11_88  [key=0, style=solid, color=red];
m11_87 -> m11_9  [key=2, style=dotted, color=red];
m11_88 -> m11_89  [key=0, style=solid, color=red];
m11_88 -> m11_75  [key=2, style=dotted, color=red];
m11_89 -> m11_90  [key=0, style=solid, color=red];
m11_89 -> m11_8  [key=2, style=dotted];
m11_90 -> m11_91  [key=0, style=solid, color=red];
m11_90 -> m11_9  [key=2, style=dotted, color=red];
m11_91 -> m11_92  [key=0, style=solid, color=red];
m11_91 -> m11_75  [key=2, style=dotted, color=red];
m11_92 -> m11_93  [key=0, style=solid, color=red];
m11_92 -> m11_8  [key=2, style=dotted];
m11_93 -> m11_94  [key=0, style=solid, color=red];
m11_93 -> m11_9  [key=2, style=dotted, color=red];
m11_94 -> m11_95  [key=0, style=solid, color=red];
m11_94 -> m11_75  [key=2, style=dotted, color=red];
m11_95 -> m11_82  [key=0, style=bold, color=blue];
m11_18 -> m11_19  [key=0, style=solid];
m11_19 -> m11_20  [key=0, style=solid, color=red];
m11_19 -> m11_8  [key=2, style=dotted];
m11_19 -> m11_22  [key=1, style=dashed, color=green, label=options];
m11_20 -> m11_21  [key=0, style=solid, color=red];
m11_20 -> m11_9  [key=2, style=dotted, color=red];
m11_22 -> m11_23  [key=0, style=solid, color=green];
m11_22 -> m11_11  [key=2, style=dotted, color=green];
m11_21 -> m11_22  [key=0, style=solid, color=green];
m11_21 -> m11_10  [key=2, style=dotted, color=red];
m11_23 -> m11_18  [key=0, style=bold, color=blue];
m11_96 -> m11_97  [key=0, style=solid];
m11_97 -> m11_98  [key=0, style=solid, color=red];
m11_97 -> m11_8  [key=2, style=dotted];
m11_98 -> m11_99  [key=0, style=solid, color=red];
m11_98 -> m11_9  [key=2, style=dotted, color=red];
m11_99 -> m11_100  [key=0, style=solid, color=red];
m11_99 -> m11_75  [key=2, style=dotted, color=red];
m11_100 -> m11_101  [key=0, style=solid, color=red];
m11_100 -> m11_8  [key=2, style=dotted];
m11_101 -> m11_102  [key=0, style=solid, color=red];
m11_101 -> m11_9  [key=2, style=dotted, color=red];
m11_102 -> m11_103  [key=0, style=solid, color=red];
m11_102 -> m11_75  [key=2, style=dotted, color=red];
m11_103 -> m11_96  [key=0, style=bold, color=blue];
m11_169 -> m11_170  [key=0, style=solid];
m11_170 -> m11_171  [key=0, style=solid];
m11_170 -> m11_165  [key=2, style=dotted];
m11_170 -> m11_9  [key=2, style=dotted];
m11_171 -> m11_169  [key=0, style=bold, color=blue];
m11_45 -> m11_46  [key=0, style=solid];
m11_46 -> m11_47  [key=0, style=solid, color=green];
m11_46 -> m11_8  [key=2, style=dotted];
m11_46 -> m11_49  [key=1, style=dashed, color=green, label=options];
m11_46 -> m11_50  [key=1, style=dashed, color=green, label=options];
m11_46 -> m11_51  [key=1, style=dashed, color=green, label=options];
m11_46 -> m11_52  [key=1, style=dashed, color=green, label=options];
m11_47 -> m11_48  [key=0, style=solid, color=green];
m11_47 -> m11_9  [key=2, style=dotted, color=green];
m11_49 -> m11_50  [key=0, style=solid, color=green];
m11_49 -> n11  [key=2, style=dotted, color=green];
m11_50 -> m11_51  [key=0, style=solid, color=green];
m11_50 -> m11_11  [key=2, style=dotted, color=green];
m11_51 -> m11_52  [key=0, style=solid, color=green];
m11_51 -> m11_54  [key=2, style=dotted, color=green];
m11_52 -> m11_53  [key=0, style=solid, color=green];
m11_52 -> n11  [key=2, style=dotted, color=green];
m11_48 -> m11_49  [key=0, style=solid, color=green];
m11_48 -> m11_10  [key=2, style=dotted, color=red];
m11_53 -> m11_45  [key=0, style=bold, color=blue];
m11_162 -> m11_163  [key=0, style=solid];
m11_163 -> m11_164  [key=0, style=solid];
m11_163 -> m11_165  [key=2, style=dotted];
m11_163 -> m11_9  [key=2, style=dotted];
m11_164 -> m11_162  [key=0, style=bold, color=blue];
m11_24 -> m11_25  [key=0, style=solid];
m11_25 -> m11_26  [key=0, style=solid, color=red];
m11_25 -> m11_8  [key=2, style=dotted];
m11_25 -> m11_28  [key=1, style=dashed, color=green, label=options];
m11_26 -> m11_27  [key=0, style=solid, color=red];
m11_26 -> m11_9  [key=2, style=dotted, color=red];
m11_28 -> m11_29  [key=0, style=solid, color=green];
m11_28 -> m11_11  [key=2, style=dotted, color=green];
m11_27 -> m11_28  [key=0, style=solid, color=green];
m11_27 -> m11_10  [key=2, style=dotted, color=red];
m11_29 -> m11_24  [key=0, style=bold, color=blue];
m11_130 -> m11_131  [key=0, style=solid];
m11_131 -> m11_132  [key=0, style=solid, color=green];
m11_131 -> m11_8  [key=2, style=dotted];
m11_131 -> m11_134  [key=1, style=dashed, color=green, label=options];
m11_131 -> m11_135  [key=1, style=dashed, color=green, label=options];
m11_131 -> m11_136  [key=1, style=dashed, color=green, label=options];
m11_131 -> m11_137  [key=1, style=dashed, color=green, label=options];
m11_132 -> m11_133  [key=0, style=solid, color=green];
m11_132 -> m11_9  [key=2, style=dotted, color=green];
m11_134 -> m11_135  [key=0, style=solid, color=green];
m11_134 -> m11_11  [key=2, style=dotted, color=green];
m11_135 -> m11_136  [key=0, style=solid, color=green];
m11_135 -> m11_11  [key=2, style=dotted, color=green];
m11_136 -> m11_137  [key=0, style=solid, color=green];
m11_136 -> m11_11  [key=2, style=dotted, color=green];
m11_137 -> m11_138  [key=0, style=solid, color=green];
m11_137 -> n11  [key=2, style=dotted, color=green];
m11_133 -> m11_134  [key=0, style=solid, color=green];
m11_133 -> m11_10  [key=2, style=dotted, color=red];
m11_138 -> m11_139  [key=0, style=solid, color=green];
m11_138 -> m11_8  [key=2, style=dotted];
m11_138 -> m11_141  [key=1, style=dashed, color=green, label=options];
m11_138 -> m11_142  [key=1, style=dashed, color=green, label=options];
m11_138 -> m11_143  [key=1, style=dashed, color=green, label=options];
m11_138 -> m11_144  [key=1, style=dashed, color=green, label=options];
m11_139 -> m11_140  [key=0, style=solid, color=green];
m11_139 -> m11_9  [key=2, style=dotted, color=green];
m11_141 -> m11_142  [key=0, style=solid, color=green];
m11_141 -> n11  [key=2, style=dotted, color=green];
m11_142 -> m11_143  [key=0, style=solid, color=green];
m11_142 -> m11_11  [key=2, style=dotted, color=green];
m11_143 -> m11_144  [key=0, style=solid, color=green];
m11_143 -> m11_11  [key=2, style=dotted, color=green];
m11_144 -> m11_145  [key=0, style=solid, color=green];
m11_144 -> m11_11  [key=2, style=dotted, color=green];
m11_140 -> m11_141  [key=0, style=solid, color=green];
m11_140 -> m11_10  [key=2, style=dotted, color=red];
m11_145 -> m11_146  [key=0, style=solid, color=green];
m11_145 -> m11_8  [key=2, style=dotted];
m11_145 -> m11_148  [key=1, style=dashed, color=green, label=options];
m11_145 -> m11_149  [key=1, style=dashed, color=green, label=options];
m11_145 -> m11_150  [key=1, style=dashed, color=green, label=options];
m11_145 -> m11_151  [key=1, style=dashed, color=green, label=options];
m11_146 -> m11_147  [key=0, style=solid, color=green];
m11_146 -> m11_9  [key=2, style=dotted, color=green];
m11_148 -> m11_149  [key=0, style=solid, color=green];
m11_148 -> m11_11  [key=2, style=dotted, color=green];
m11_149 -> m11_150  [key=0, style=solid, color=green];
m11_149 -> m11_11  [key=2, style=dotted, color=green];
m11_150 -> m11_151  [key=0, style=solid, color=green];
m11_150 -> n11  [key=2, style=dotted, color=green];
m11_151 -> m11_152  [key=0, style=solid, color=green];
m11_151 -> m11_11  [key=2, style=dotted, color=green];
m11_147 -> m11_148  [key=0, style=solid, color=green];
m11_147 -> m11_10  [key=2, style=dotted, color=red];
m11_152 -> m11_153  [key=0, style=solid, color=green];
m11_152 -> m11_8  [key=2, style=dotted];
m11_152 -> m11_155  [key=1, style=dashed, color=green, label=options];
m11_152 -> m11_156  [key=1, style=dashed, color=green, label=options];
m11_152 -> m11_157  [key=1, style=dashed, color=green, label=options];
m11_152 -> m11_158  [key=1, style=dashed, color=green, label=options];
m11_152 -> m11_159  [key=1, style=dashed, color=green, label=options];
m11_152 -> m11_160  [key=1, style=dashed, color=green, label=options];
m11_153 -> m11_154  [key=0, style=solid, color=green];
m11_153 -> m11_9  [key=2, style=dotted, color=green];
m11_155 -> m11_156  [key=0, style=solid, color=green];
m11_155 -> m11_54  [key=2, style=dotted, color=green];
m11_156 -> m11_157  [key=0, style=solid, color=green];
m11_156 -> m11_11  [key=2, style=dotted, color=green];
m11_157 -> m11_158  [key=0, style=solid, color=green];
m11_157 -> m11_11  [key=2, style=dotted, color=green];
m11_158 -> m11_159  [key=0, style=solid, color=green];
m11_158 -> n11  [key=2, style=dotted, color=green];
m11_159 -> m11_160  [key=0, style=solid, color=green];
m11_159 -> m11_11  [key=2, style=dotted, color=green];
m11_160 -> m11_161  [key=0, style=solid, color=green];
m11_160 -> n11  [key=2, style=dotted, color=green];
m11_154 -> m11_155  [key=0, style=solid, color=green];
m11_154 -> m11_10  [key=2, style=dotted, color=red];
m11_161 -> m11_130  [key=0, style=bold, color=blue];
m11_2 -> m11_3  [key=0, style=solid];
m11_3 -> m11_4  [key=0, style=solid, color=red];
m11_3 -> m11_8  [key=2, style=dotted];
m11_3 -> m11_6  [key=1, style=dashed, color=green, label=options];
m11_4 -> m11_5  [key=0, style=solid, color=red];
m11_4 -> m11_9  [key=2, style=dotted, color=red];
m11_6 -> m11_7  [key=0, style=solid, color=green];
m11_6 -> m11_11  [key=2, style=dotted, color=green];
m11_5 -> m11_6  [key=0, style=solid, color=green];
m11_5 -> m11_10  [key=2, style=dotted, color=red];
m11_7 -> m11_2  [key=0, style=bold, color=blue];
m11_195 -> m11_196  [key=0, style=solid];
m11_196 -> m11_197  [key=0, style=solid, color=green];
m11_196 -> m11_194  [key=2, style=dotted];
m11_196 -> m11_199  [key=1, style=dashed, color=green, label=options];
m11_196 -> m11_200  [key=1, style=dashed, color=green, label=options];
m11_196 -> m11_201  [key=1, style=dashed, color=green, label=options];
m11_196 -> m11_202  [key=1, style=dashed, color=green, label=options];
m11_197 -> m11_198  [key=0, style=solid, color=green];
m11_197 -> m11_9  [key=2, style=dotted, color=green];
m11_199 -> m11_200  [key=0, style=solid, color=green];
m11_199 -> n11  [key=2, style=dotted, color=green];
m11_200 -> m11_201  [key=0, style=solid, color=green];
m11_200 -> m11_11  [key=2, style=dotted, color=green];
m11_201 -> m11_202  [key=0, style=solid, color=green];
m11_201 -> m11_11  [key=2, style=dotted, color=green];
m11_202 -> m11_203  [key=0, style=solid, color=green];
m11_202 -> n11  [key=2, style=dotted, color=green];
m11_198 -> m11_199  [key=0, style=solid, color=green];
m11_198 -> m11_10  [key=2, style=dotted, color=red];
m11_203 -> m11_195  [key=0, style=bold, color=blue];
m11_38 -> m11_39  [key=0, style=solid];
m11_39 -> m11_40  [key=0, style=solid, color=red];
m11_39 -> m11_8  [key=2, style=dotted];
m11_39 -> m11_42  [key=1, style=dashed, color=green, label=options];
m11_39 -> m11_43  [key=1, style=dashed, color=green, label=options];
m11_40 -> m11_41  [key=0, style=solid, color=red];
m11_40 -> m11_9  [key=2, style=dotted, color=red];
m11_42 -> m11_43  [key=0, style=solid, color=green];
m11_42 -> n11  [key=2, style=dotted, color=green];
m11_43 -> m11_44  [key=0, style=solid, color=green];
m11_43 -> m11_11  [key=2, style=dotted, color=green];
m11_41 -> m11_42  [key=0, style=solid, color=green];
m11_41 -> m11_10  [key=2, style=dotted, color=red];
m11_44 -> m11_38  [key=0, style=bold, color=blue];
m11_185 -> m11_186  [key=0, style=solid];
m11_186 -> m11_187  [key=0, style=solid, color=green];
m11_186 -> m11_194  [key=2, style=dotted];
m11_186 -> m11_189  [key=1, style=dashed, color=green, label=options];
m11_186 -> m11_190  [key=1, style=dashed, color=green, label=options];
m11_186 -> m11_191  [key=1, style=dashed, color=green, label=options];
m11_186 -> m11_192  [key=1, style=dashed, color=green, label=options];
m11_187 -> m11_188  [key=0, style=solid, color=green];
m11_187 -> m11_9  [key=2, style=dotted, color=green];
m11_189 -> m11_190  [key=0, style=solid, color=green];
m11_189 -> n11  [key=2, style=dotted, color=green];
m11_190 -> m11_191  [key=0, style=solid, color=green];
m11_190 -> m11_11  [key=2, style=dotted, color=green];
m11_191 -> m11_192  [key=0, style=solid, color=green];
m11_191 -> m11_11  [key=2, style=dotted, color=green];
m11_192 -> m11_193  [key=0, style=solid, color=green];
m11_192 -> n11  [key=2, style=dotted, color=green];
m11_188 -> m11_189  [key=0, style=solid, color=green];
m11_188 -> m11_10  [key=2, style=dotted, color=red];
m11_193 -> m11_185  [key=0, style=bold, color=blue];
m11_110 -> m11_111  [key=0, style=solid];
m11_111 -> m11_112  [key=0, style=solid, color=green];
m11_111 -> m11_8  [key=2, style=dotted];
m11_111 -> m11_114  [key=1, style=dashed, color=green, label=options];
m11_111 -> m11_115  [key=1, style=dashed, color=green, label=options];
m11_111 -> m11_116  [key=1, style=dashed, color=green, label=options];
m11_112 -> m11_113  [key=0, style=solid, color=green];
m11_112 -> m11_9  [key=2, style=dotted, color=green];
m11_114 -> m11_115  [key=0, style=solid, color=green];
m11_114 -> m11_11  [key=2, style=dotted, color=green];
m11_115 -> m11_116  [key=0, style=solid, color=green];
m11_115 -> m11_11  [key=2, style=dotted, color=green];
m11_116 -> m11_117  [key=0, style=solid, color=green];
m11_116 -> m11_11  [key=2, style=dotted, color=green];
m11_113 -> m11_114  [key=0, style=solid, color=green];
m11_113 -> m11_10  [key=2, style=dotted, color=red];
m11_117 -> m11_118  [key=0, style=solid, color=green];
m11_117 -> m11_8  [key=2, style=dotted];
m11_117 -> m11_120  [key=1, style=dashed, color=green, label=options];
m11_117 -> m11_121  [key=1, style=dashed, color=green, label=options];
m11_117 -> m11_122  [key=1, style=dashed, color=green, label=options];
m11_118 -> m11_119  [key=0, style=solid, color=green];
m11_118 -> m11_9  [key=2, style=dotted, color=green];
m11_120 -> m11_121  [key=0, style=solid, color=green];
m11_120 -> m11_11  [key=2, style=dotted, color=green];
m11_121 -> m11_122  [key=0, style=solid, color=green];
m11_121 -> m11_11  [key=2, style=dotted, color=green];
m11_122 -> m11_123  [key=0, style=solid, color=green];
m11_122 -> m11_11  [key=2, style=dotted, color=green];
m11_119 -> m11_120  [key=0, style=solid, color=green];
m11_119 -> m11_10  [key=2, style=dotted, color=red];
m11_123 -> m11_124  [key=0, style=solid, color=green];
m11_123 -> m11_8  [key=2, style=dotted];
m11_123 -> m11_126  [key=1, style=dashed, color=green, label=options];
m11_123 -> m11_127  [key=1, style=dashed, color=green, label=options];
m11_123 -> m11_128  [key=1, style=dashed, color=green, label=options];
m11_124 -> m11_125  [key=0, style=solid, color=green];
m11_124 -> m11_9  [key=2, style=dotted, color=green];
m11_126 -> m11_127  [key=0, style=solid, color=green];
m11_126 -> m11_11  [key=2, style=dotted, color=green];
m11_127 -> m11_128  [key=0, style=solid, color=green];
m11_127 -> m11_11  [key=2, style=dotted, color=green];
m11_128 -> m11_129  [key=0, style=solid, color=green];
m11_128 -> m11_11  [key=2, style=dotted, color=green];
m11_125 -> m11_126  [key=0, style=solid, color=green];
m11_125 -> m11_10  [key=2, style=dotted, color=red];
m11_129 -> m11_110  [key=0, style=bold, color=blue];
m11_76 -> m11_77  [key=0, style=solid];
m11_77 -> m11_78  [key=0, style=solid, color=red];
m11_77 -> m11_8  [key=2, style=dotted];
m11_77 -> m11_80  [key=1, style=dashed, color=green, label=options];
m11_78 -> m11_79  [key=0, style=solid, color=red];
m11_78 -> m11_9  [key=2, style=dotted, color=red];
m11_80 -> m11_81  [key=0, style=solid, color=green];
m11_80 -> m11_11  [key=2, style=dotted, color=green];
m11_79 -> m11_80  [key=0, style=solid, color=green];
m11_79 -> m11_10  [key=2, style=dotted, color=red];
m11_81 -> m11_76  [key=0, style=bold, color=blue];
m11_104 -> m11_105  [key=0, style=solid];
m11_105 -> m11_106  [key=0, style=solid, color=red];
m11_105 -> m11_8  [key=2, style=dotted];
m11_105 -> m11_108  [key=1, style=dashed, color=green, label=options];
m11_106 -> m11_107  [key=0, style=solid, color=red];
m11_106 -> m11_9  [key=2, style=dotted, color=red];
m11_108 -> m11_109  [key=0, style=solid, color=green];
m11_108 -> m11_11  [key=2, style=dotted, color=green];
m11_107 -> m11_108  [key=0, style=solid, color=green];
m11_107 -> m11_10  [key=2, style=dotted, color=red];
m11_109 -> m11_104  [key=0, style=bold, color=blue];
m11_175 -> m11_176  [key=0, style=solid];
m11_176 -> m11_177  [key=0, style=solid];
m11_176 -> m11_182  [key=1, style=dashed, color=darkseagreen4, label=actualCulture];
m11_177 -> m11_178  [key=0, style=solid];
m11_177 -> m11_184  [key=2, style=dotted];
m11_182 -> m11_183  [key=0, style=solid];
m11_178 -> m11_179  [key=0, style=solid, color=red];
m11_178 -> m11_8  [key=2, style=dotted];
m11_178 -> m11_181  [key=1, style=dashed, color=green, label=options];
m11_179 -> m11_180  [key=0, style=solid, color=red];
m11_179 -> m11_9  [key=2, style=dotted, color=red];
m11_181 -> m11_182  [key=0, style=solid, color=green];
m11_181 -> m11_11  [key=2, style=dotted, color=green];
m11_180 -> m11_181  [key=0, style=solid, color=green];
m11_180 -> m11_10  [key=2, style=dotted, color=red];
m11_183 -> m11_175  [key=0, style=bold, color=blue];
m11_67 -> m11_68  [key=0, style=solid];
m11_68 -> m11_69  [key=0, style=solid, color=red];
m11_68 -> m11_8  [key=2, style=dotted];
m11_69 -> m11_70  [key=0, style=solid, color=red];
m11_69 -> m11_9  [key=2, style=dotted, color=red];
m11_70 -> m11_71  [key=0, style=solid, color=red];
m11_70 -> m11_75  [key=2, style=dotted, color=red];
m11_71 -> m11_72  [key=0, style=solid, color=red];
m11_71 -> m11_8  [key=2, style=dotted];
m11_72 -> m11_73  [key=0, style=solid, color=red];
m11_72 -> m11_9  [key=2, style=dotted, color=red];
m11_73 -> m11_74  [key=0, style=solid, color=red];
m11_73 -> m11_75  [key=2, style=dotted, color=red];
m11_74 -> m11_67  [key=0, style=bold, color=blue];
m11_166 -> m11_167  [key=0, style=solid];
m11_167 -> m11_168  [key=0, style=solid];
m11_167 -> m11_165  [key=2, style=dotted];
m11_167 -> m11_9  [key=2, style=dotted];
m11_168 -> m11_166  [key=0, style=bold, color=blue];
m11_172 -> m11_173  [key=0, style=solid];
m11_173 -> m11_174  [key=0, style=solid];
m11_173 -> m11_165  [key=2, style=dotted];
m11_173 -> m11_9  [key=2, style=dotted];
m11_174 -> m11_172  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_1 -> m11_0  [key=0, style=bold, color=blue];
m11_30 -> m11_31  [key=0, style=solid];
m11_31 -> m11_32  [key=0, style=solid, color=red];
m11_31 -> m11_8  [key=2, style=dotted];
m11_31 -> m11_34  [key=1, style=dashed, color=green, label=options];
m11_31 -> m11_35  [key=1, style=dashed, color=green, label=options];
m11_32 -> m11_33  [key=0, style=solid, color=red];
m11_32 -> m11_9  [key=2, style=dotted, color=red];
m11_34 -> m11_35  [key=0, style=solid, color=green];
m11_34 -> m11_11  [key=2, style=dotted, color=green];
m11_35 -> m11_36  [key=0, style=solid, color=green];
m11_35 -> n11  [key=2, style=dotted, color=green];
m11_33 -> m11_34  [key=0, style=solid, color=green];
m11_33 -> m11_10  [key=2, style=dotted, color=red];
m11_36 -> m11_30  [key=0, style=bold, color=blue];
m11_204 -> m11_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_6  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_14  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_15  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_16  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_20  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_22  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_28  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_32  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_33  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_34  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_40  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_41  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_43  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_47  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_48  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_50  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_57  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_58  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_61  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_63  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_69  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_70  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_72  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_73  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_78  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_79  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_80  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_84  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_85  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_87  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_88  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_90  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_91  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_93  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_94  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_98  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_99  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_101  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_102  [key=1, style=dashed, color=red, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_106  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_107  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_108  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_112  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_113  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_114  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_115  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_116  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_118  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_119  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_120  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_121  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_122  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_124  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_125  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_126  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_127  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_128  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_132  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_133  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_134  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_135  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_136  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_139  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_140  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_142  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_143  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_144  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_146  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_147  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_148  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_149  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_151  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_153  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_154  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_156  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_157  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_159  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_163  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_167  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_170  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_173  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_179  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_180  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_181  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_188  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_190  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_191  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_198  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_200  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_201  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_187  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m11_204 -> m11_197  [key=1, style=dashed, color=green, label="CommandLine.Tests.OptionArrayAttributeParsingFixture"];
m12_40 -> m12_41  [key=0, style=solid];
m12_41 -> m12_42  [key=0, style=solid, color=red];
m12_42 -> m12_43  [key=0, style=solid, color=red];
m12_42 -> m12_39  [key=2, style=dotted, color=red];
m12_43 -> m12_40  [key=0, style=bold, color=blue];
m12_29 -> m12_30  [key=0, style=solid, color=red];
m12_30 -> m12_31  [key=0, style=solid, color=green];
m12_30 -> m12_34  [key=2, style=dotted, color=red];
m12_31 -> m12_32  [key=0, style=solid, color=green];
m12_31 -> m12_34  [key=2, style=dotted, color=green];
m12_32 -> m12_33  [key=0, style=solid, color=green];
m12_32 -> m12_34  [key=2, style=dotted, color=green];
m12_33 -> m12_29  [key=0, style=bold, color=blue];
m12_8 -> m12_9  [key=0, style=solid];
m12_8 -> m12_21  [key=3, color=darkorchid, style=bold, label="Parameter variable string longName"];
m12_8 -> m12_22  [key=3, color=darkorchid, style=bold, label="Parameter variable string longName"];
m12_8 -> m12_23  [key=3, color=darkorchid, style=bold, label="Parameter variable string shortName"];
m12_9 -> m12_10  [key=0, style=solid];
m12_9 -> m12_15  [key=2, style=dotted];
m12_9 -> m12_11  [key=1, style=dashed, color=darkseagreen4, label=oa];
m12_9 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label=oa];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_16  [key=2, style=dotted];
m12_10 -> m12_12  [key=1, style=dashed, color=darkseagreen4, label=oi];
m12_11 -> m12_12  [key=0, style=solid];
m12_13 -> m12_14  [key=0, style=solid];
m12_13 -> m12_18  [key=2, style=dotted];
m12_12 -> m12_13  [key=0, style=solid];
m12_12 -> m12_17  [key=2, style=dotted];
m12_14 -> m12_8  [key=0, style=bold, color=blue];
m12_44 -> m12_45  [key=0, style=solid];
m12_44 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_44 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_44 -> m12_55  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_44 -> m12_56  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>"];
m12_44 -> m12_57  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>"];
m12_44 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>"];
m12_44 -> m12_59  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, CommandLine.OptionInfo>"];
m12_44 -> m12_60  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_44 -> m12_61  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_44 -> m12_44  [key=3, color=darkorchid, style=bold, label="method methodReturn CommandLine.OptionMap CreateMap"];
m12_45 -> m12_46  [key=0, style=solid, color=red];
m12_45 -> m12_47  [key=0, style=solid, color=green];
m12_53 -> m12_54  [key=0, style=solid];
m12_54 -> m12_55  [key=0, style=solid];
m12_55 -> m12_56  [key=0, style=solid];
m12_56 -> m12_57  [key=0, style=solid];
m12_56 -> m12_60  [key=0, style=solid];
m12_57 -> m12_58  [key=0, style=solid];
m12_58 -> m12_59  [key=0, style=solid];
m12_59 -> m12_60  [key=0, style=solid];
m12_60 -> m12_61  [key=0, style=solid];
m12_46 -> m12_47  [key=0, style=solid, color=green];
m12_46 -> m12_5  [key=2, style=dotted, color=red];
m12_46 -> m12_6  [key=2, style=dotted, color=red];
m12_46 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_46 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_46 -> m12_55  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_46 -> m12_60  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_46 -> m12_61  [key=1, style=dashed, color=darkseagreen4, label="ref CommandLine.OptionMap"];
m12_47 -> m12_48  [key=0, style=solid, color=green];
m12_47 -> m12_15  [key=2, style=dotted, color=green];
m12_47 -> m12_50  [key=1, style=dashed, color=green, label=attribute1];
m12_47 -> m12_53  [key=1, style=dashed, color=green, label=attribute1];
m12_47 -> m12_57  [key=1, style=dashed, color=green, label=attribute1];
m12_47 -> m12_58  [key=1, style=dashed, color=green, label=attribute1];
m12_48 -> m12_49  [key=0, style=solid, color=green];
m12_48 -> m12_15  [key=2, style=dotted, color=green];
m12_48 -> m12_51  [key=1, style=dashed, color=green, label=attribute2];
m12_48 -> m12_54  [key=1, style=dashed, color=green, label=attribute2];
m12_48 -> m12_59  [key=1, style=dashed, color=green, label=attribute2];
m12_50 -> m12_51  [key=0, style=solid];
m12_50 -> m12_16  [key=2, style=dotted];
m12_50 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label=option1];
m12_50 -> m12_57  [key=1, style=dashed, color=darkseagreen4, label=option1];
m12_49 -> m12_50  [key=0, style=solid];
m12_49 -> m12_15  [key=2, style=dotted];
m12_49 -> m12_52  [key=1, style=dashed, color=darkseagreen4, label=attribute3];
m12_49 -> m12_55  [key=1, style=dashed, color=darkseagreen4, label=attribute3];
m12_51 -> m12_52  [key=0, style=solid];
m12_51 -> m12_16  [key=2, style=dotted];
m12_51 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label=option2];
m12_51 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=option2];
m12_52 -> m12_53  [key=0, style=solid];
m12_52 -> m12_16  [key=2, style=dotted];
m12_52 -> m12_55  [key=1, style=dashed, color=darkseagreen4, label=option3];
m12_52 -> m12_59  [key=1, style=dashed, color=darkseagreen4, label=option3];
m12_61 -> m12_44  [key=0, style=bold, color=blue];
m12_19 -> m12_20  [key=0, style=solid];
m12_20 -> m12_21  [key=0, style=solid];
m12_20 -> m12_0  [key=2, style=dotted];
m12_21 -> m12_22  [key=0, style=solid];
m12_21 -> m12_8  [key=2, style=dotted];
m12_22 -> m12_23  [key=0, style=solid];
m12_22 -> m12_8  [key=2, style=dotted];
m12_23 -> m12_24  [key=0, style=solid];
m12_23 -> m12_8  [key=2, style=dotted];
m12_24 -> m12_25  [key=0, style=solid];
m12_25 -> m12_19  [key=0, style=bold, color=blue];
m12_26 -> m12_27  [key=0, style=solid];
m12_27 -> m12_28  [key=0, style=solid];
m12_28 -> m12_26  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_0 -> m12_2  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_0 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label=int];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_5  [key=2, style=dotted];
m12_1 -> m12_6  [key=2, style=dotted];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_7  [key=2, style=dotted];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_7  [key=2, style=dotted];
m12_4 -> m12_0  [key=0, style=bold, color=blue];
m12_35 -> m12_36  [key=0, style=solid];
m12_36 -> m12_37  [key=0, style=solid, color=red];
m12_37 -> m12_38  [key=0, style=solid, color=red];
m12_37 -> m12_39  [key=2, style=dotted, color=red];
m12_38 -> m12_35  [key=0, style=bold, color=blue];
m12_62 -> m12_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder"];
m12_62 -> m12_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder"];
m12_62 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder"];
m12_62 -> m12_11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder"];
m12_62 -> m12_12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder"];
m12_62 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.OptionMapFixture.OptionMapBuilder"];
m13_10 -> m13_11  [key=0, style=solid];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_0  [key=2, style=dotted];
m13_12 -> m13_10  [key=0, style=bold, color=blue];
m13_30 -> m13_31  [key=0, style=solid];
m13_31 -> m13_32  [key=0, style=solid, color=red];
m13_31 -> m13_35  [key=2, style=dotted];
m13_31 -> m13_33  [key=1, style=dashed, color=green, label=pair];
m13_32 -> m13_33  [key=0, style=solid, color=green];
m13_32 -> m13_36  [key=2, style=dotted, color=red];
m13_33 -> m13_34  [key=0, style=solid, color=green];
m13_33 -> n11  [key=2, style=dotted, color=green];
m13_34 -> m13_30  [key=0, style=bold, color=blue];
m13_16 -> m13_17  [key=0, style=solid];
m13_17 -> m13_18  [key=0, style=solid, color=red];
m13_17 -> m13_27  [key=2, style=dotted];
m13_17 -> m13_19  [key=1, style=dashed, color=green, label=list];
m13_17 -> m13_20  [key=1, style=dashed, color=green, label=list];
m13_17 -> m13_21  [key=1, style=dashed, color=darkseagreen4, label=list];
m13_18 -> m13_19  [key=0, style=solid, color=green];
m13_18 -> n11  [key=2, style=dotted, color=red];
m13_19 -> m13_20  [key=0, style=solid, color=green];
m13_19 -> n11  [key=2, style=dotted, color=green];
m13_20 -> m13_21  [key=0, style=solid, color=green];
m13_20 -> n11  [key=2, style=dotted, color=green];
m13_21 -> m13_22  [key=0, style=solid];
m13_21 -> m13_29  [key=2, style=dotted];
m13_22 -> m13_23  [key=0, style=solid, color=red];
m13_22 -> m13_27  [key=2, style=dotted];
m13_22 -> m13_24  [key=1, style=dashed, color=green, label=anotherList];
m13_22 -> m13_25  [key=1, style=dashed, color=darkseagreen4, label=anotherList];
m13_23 -> m13_24  [key=0, style=solid, color=green];
m13_23 -> n11  [key=2, style=dotted, color=red];
m13_24 -> m13_25  [key=0, style=solid, color=green];
m13_24 -> n11  [key=2, style=dotted, color=green];
m13_25 -> m13_26  [key=0, style=solid];
m13_25 -> m13_29  [key=2, style=dotted];
m13_26 -> m13_16  [key=0, style=bold, color=blue];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_2  [key=0, style=solid];
m13_2 -> m13_0  [key=0, style=bold, color=blue];
m13_37 -> m13_38  [key=0, style=solid];
m13_38 -> m13_39  [key=0, style=solid, color=red];
m13_38 -> m13_5  [key=2, style=dotted];
m13_38 -> m13_45  [key=2, style=dotted];
m13_38 -> m13_40  [key=1, style=dashed, color=green, label=list];
m13_38 -> m13_41  [key=1, style=dashed, color=green, label=list];
m13_38 -> m13_42  [key=1, style=dashed, color=green, label=list];
m13_38 -> m13_43  [key=1, style=dashed, color=green, label=list];
m13_39 -> m13_40  [key=0, style=solid, color=green];
m13_39 -> m13_36  [key=2, style=dotted, color=red];
m13_40 -> m13_41  [key=0, style=solid, color=green];
m13_40 -> n11  [key=2, style=dotted, color=green];
m13_41 -> m13_42  [key=0, style=solid, color=green];
m13_41 -> n11  [key=2, style=dotted, color=green];
m13_42 -> m13_43  [key=0, style=solid, color=green];
m13_42 -> n11  [key=2, style=dotted, color=green];
m13_43 -> m13_44  [key=0, style=solid, color=green];
m13_43 -> n11  [key=2, style=dotted, color=green];
m13_44 -> m13_37  [key=0, style=bold, color=blue];
m13_5 -> m13_6  [key=0, style=solid];
m13_6 -> m13_7  [key=0, style=solid];
m13_7 -> m13_8  [key=0, style=solid];
m13_8 -> m13_9  [key=0, style=solid];
m13_9 -> m13_5  [key=0, style=bold, color=blue];
m13_13 -> m13_14  [key=0, style=solid];
m13_14 -> m13_15  [key=0, style=solid];
m13_15 -> m13_13  [key=0, style=bold, color=blue];
m13_29 -> m13_46  [key=0, style=solid];
m13_29 -> m13_47  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>>"];
m13_29 -> m13_17  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>> list"];
m13_29 -> m13_22  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.IList<CommandLine.Pair<System.Reflection.PropertyInfo, TAttribute>> list"];
m13_46 -> m13_47  [key=0, style=solid];
m13_46 -> m13_50  [key=2, style=dotted];
m13_46 -> m13_51  [key=2, style=dotted];
m13_47 -> m13_48  [key=0, style=solid];
m13_47 -> m13_49  [key=0, style=solid];
m13_48 -> m13_47  [key=0, style=solid];
m13_48 -> m13_51  [key=2, style=dotted];
m13_49 -> m13_29  [key=0, style=bold, color=blue];
m13_3 -> m13_4  [key=0, style=solid];
m13_4 -> m13_3  [key=0, style=bold, color=blue];
m13_52 -> m13_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ReflectionUtilFixture.MockObject"];
m13_53 -> m13_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject"];
m13_53 -> m13_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject"];
m13_53 -> m13_8  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ReflectionUtilFixture.AnotherMockObject"];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_1 -> m14_9  [key=2, style=dotted];
m14_1 -> m14_4  [key=1, style=dashed, color=green, label=options];
m14_1 -> m14_5  [key=1, style=dashed, color=green, label=options];
m14_1 -> m14_6  [key=1, style=dashed, color=green, label=options];
m14_1 -> m14_7  [key=1, style=dashed, color=green, label=options];
m14_2 -> m14_3  [key=0, style=solid, color=red];
m14_2 -> m14_10  [key=2, style=dotted];
m14_4 -> m14_5  [key=0, style=solid, color=green];
m14_4 -> n11  [key=2, style=dotted, color=green];
m14_5 -> m14_6  [key=0, style=solid, color=green];
m14_5 -> n11  [key=2, style=dotted, color=green];
m14_6 -> m14_7  [key=0, style=solid, color=green];
m14_6 -> n11  [key=2, style=dotted, color=green];
m14_7 -> m14_8  [key=0, style=solid, color=green];
m14_7 -> m14_13  [key=2, style=dotted, color=green];
m14_3 -> m14_4  [key=0, style=solid, color=green];
m14_3 -> m14_11  [key=2, style=dotted, color=red];
m14_8 -> m14_0  [key=0, style=bold, color=blue];
m14_14 -> m14_15  [key=0, style=solid];
m14_15 -> m14_16  [key=0, style=solid];
m14_15 -> m14_19  [key=2, style=dotted];
m14_16 -> m14_17  [key=0, style=solid, color=red];
m14_16 -> m14_10  [key=2, style=dotted];
m14_17 -> m14_18  [key=0, style=solid, color=red];
m14_17 -> m14_11  [key=2, style=dotted, color=red];
m14_18 -> m14_14  [key=0, style=bold, color=blue];
m16_0 -> m16_1  [key=0, style=solid];
m16_1 -> m16_2  [key=0, style=solid];
m16_1 -> m16_4  [key=1, style=dashed, color=darkseagreen4, label=args];
m16_1 -> m16_8  [key=1, style=dashed, color=darkseagreen4, label=args];
m16_2 -> m16_3  [key=0, style=solid];
m16_2 -> m16_13  [key=2, style=dotted];
m16_2 -> m16_4  [key=1, style=dashed, color=darkseagreen4, label=appOptions];
m16_2 -> m16_6  [key=1, style=dashed, color=green, label=appOptions];
m16_4 -> m16_5  [key=0, style=solid, color=red];
m16_4 -> m16_16  [key=2, style=dotted];
m16_8 -> m16_9  [key=0, style=solid, color=red];
m16_8 -> m16_16  [key=2, style=dotted];
m16_3 -> m16_4  [key=0, style=solid];
m16_3 -> m16_14  [key=2, style=dotted];
m16_3 -> m16_15  [key=2, style=dotted];
m16_3 -> m16_8  [key=1, style=dashed, color=darkseagreen4, label=parser];
m16_6 -> m16_7  [key=0, style=solid, color=green];
m16_6 -> n11  [key=2, style=dotted, color=green];
m16_5 -> m16_6  [key=0, style=solid, color=green];
m16_5 -> m16_17  [key=2, style=dotted, color=red];
m16_7 -> m16_8  [key=0, style=solid];
m16_7 -> m16_19  [key=2, style=dotted];
m16_7 -> m16_10  [key=1, style=dashed, color=green, label=plugInXOptions];
m16_7 -> m16_11  [key=1, style=dashed, color=green, label=plugInXOptions];
m16_10 -> m16_11  [key=0, style=solid, color=green];
m16_10 -> n11  [key=2, style=dotted, color=green];
m16_11 -> m16_12  [key=0, style=solid, color=green];
m16_11 -> n11  [key=2, style=dotted, color=green];
m16_9 -> m16_10  [key=0, style=solid, color=green];
m16_9 -> m16_17  [key=2, style=dotted, color=red];
m16_12 -> m16_0  [key=0, style=bold, color=blue];
m17_12 -> m17_13  [key=0, style=solid];
m17_13 -> m17_14  [key=0, style=solid];
m17_13 -> m17_3  [key=2, style=dotted];
m17_13 -> m17_15  [key=2, style=dotted];
m17_13 -> m17_8  [key=2, style=dotted];
m17_14 -> m17_12  [key=0, style=bold, color=blue];
m17_26 -> m17_27  [key=0, style=solid];
m17_27 -> m17_28  [key=0, style=solid];
m17_27 -> m17_22  [key=2, style=dotted];
m17_27 -> m17_32  [key=1, style=dashed, color=red, label=options];
m17_28 -> m17_29  [key=0, style=solid];
m17_28 -> m17_23  [key=2, style=dotted];
m17_28 -> m17_30  [key=1, style=dashed, color=darkseagreen4, label=values];
m17_28 -> m17_31  [key=1, style=dashed, color=darkseagreen4, label=values];
m17_32 -> m17_33  [key=0, style=solid, color=red];
m17_32 -> m17_35  [key=2, style=dotted, color=red];
m17_29 -> m17_30  [key=0, style=solid];
m17_29 -> m17_34  [key=2, style=dotted];
m17_30 -> m17_31  [key=0, style=solid];
m17_30 -> m17_34  [key=2, style=dotted];
m17_31 -> m17_32  [key=0, style=solid, color=red];
m17_31 -> m17_34  [key=2, style=dotted];
m17_33 -> m17_26  [key=0, style=bold, color=blue];
m17_16 -> m17_17  [key=0, style=solid];
m17_17 -> m17_18  [key=0, style=solid];
m17_17 -> m17_22  [key=2, style=dotted];
m17_18 -> m17_19  [key=0, style=solid, color=red];
m17_18 -> m17_23  [key=2, style=dotted];
m17_18 -> m17_20  [key=1, style=dashed, color=green, label=values];
m17_19 -> m17_20  [key=0, style=solid, color=green];
m17_19 -> m17_24  [key=2, style=dotted, color=red];
m17_20 -> m17_21  [key=0, style=solid, color=green];
m17_20 -> m17_8  [key=2, style=dotted, color=green];
m17_20 -> n11  [key=2, style=dotted, color=green];
m17_21 -> m17_16  [key=0, style=bold, color=blue];
m17_4 -> m17_5  [key=0, style=solid];
m17_5 -> m17_6  [key=0, style=solid];
m17_5 -> m17_3  [key=2, style=dotted];
m17_5 -> m17_7  [key=2, style=dotted];
m17_5 -> m17_8  [key=2, style=dotted];
m17_6 -> m17_4  [key=0, style=bold, color=blue];
m17_0 -> m17_1  [key=0, style=solid];
m17_1 -> m17_2  [key=0, style=solid];
m17_1 -> m17_3  [key=2, style=dotted];
m17_2 -> m17_0  [key=0, style=bold, color=blue];
m17_9 -> m17_10  [key=0, style=solid];
m17_10 -> m17_11  [key=0, style=solid];
m17_10 -> m17_3  [key=2, style=dotted];
m17_10 -> m17_7  [key=2, style=dotted];
m17_10 -> m17_8  [key=2, style=dotted];
m17_11 -> m17_9  [key=0, style=bold, color=blue];
m17_36 -> m17_32  [key=1, style=dashed, color=red, label="CommandLine.Tests.ValueListAttributeFixture"];
m18_19 -> m18_20  [key=0, style=solid];
m18_20 -> m18_21  [key=0, style=solid, color=red];
m18_20 -> m18_30  [key=2, style=dotted];
m18_20 -> m18_23  [key=1, style=dashed, color=green, label=options];
m18_20 -> m18_24  [key=1, style=dashed, color=green, label=options];
m18_20 -> m18_25  [key=1, style=dashed, color=green, label=options];
m18_20 -> m18_26  [key=1, style=dashed, color=green, label=options];
m18_20 -> m18_27  [key=1, style=dashed, color=green, label=options];
m18_20 -> m18_28  [key=1, style=dashed, color=green, label=options];
m18_21 -> m18_22  [key=0, style=solid, color=red];
m18_21 -> m18_14  [key=2, style=dotted, color=red];
m18_23 -> m18_24  [key=0, style=solid, color=green];
m18_23 -> n11  [key=2, style=dotted, color=green];
m18_24 -> m18_25  [key=0, style=solid, color=green];
m18_24 -> n11  [key=2, style=dotted, color=green];
m18_25 -> m18_26  [key=0, style=solid, color=green];
m18_25 -> n11  [key=2, style=dotted, color=green];
m18_26 -> m18_27  [key=0, style=solid, color=green];
m18_26 -> m18_31  [key=2, style=dotted, color=green];
m18_27 -> m18_28  [key=0, style=solid, color=green];
m18_27 -> m18_32  [key=2, style=dotted, color=green];
m18_28 -> m18_29  [key=0, style=solid, color=green];
m18_28 -> m18_18  [key=2, style=dotted, color=green];
m18_22 -> m18_23  [key=0, style=solid, color=green];
m18_22 -> m18_15  [key=2, style=dotted, color=red];
m18_29 -> m18_19  [key=0, style=bold, color=blue];
m18_33 -> m18_34  [key=0, style=solid];
m18_34 -> m18_35  [key=0, style=solid, color=green];
m18_34 -> m18_30  [key=2, style=dotted];
m18_35 -> m18_36  [key=0, style=solid, color=green];
m18_35 -> m18_14  [key=2, style=dotted, color=green];
m18_36 -> m18_37  [key=0, style=solid, color=red];
m18_36 -> m18_38  [key=2, style=dotted, color=red];
m18_37 -> m18_33  [key=0, style=bold, color=blue];
m18_0 -> m18_1  [key=0, style=solid];
m18_1 -> m18_0  [key=0, style=bold, color=blue];
m18_47 -> m18_48  [key=0, style=solid];
m18_48 -> m18_49  [key=0, style=solid, color=red];
m18_48 -> m18_46  [key=2, style=dotted];
m18_49 -> m18_50  [key=0, style=solid, color=red];
m18_49 -> m18_14  [key=2, style=dotted, color=red];
m18_49 -> m18_32  [key=2, style=dotted, color=red];
m18_50 -> m18_47  [key=0, style=bold, color=blue];
m18_2 -> m18_3  [key=0, style=solid];
m18_3 -> m18_4  [key=0, style=solid, color=green];
m18_3 -> m18_13  [key=2, style=dotted];
m18_3 -> m18_6  [key=1, style=dashed, color=green, label=options];
m18_3 -> m18_7  [key=1, style=dashed, color=green, label=options];
m18_3 -> m18_8  [key=1, style=dashed, color=green, label=options];
m18_3 -> m18_9  [key=1, style=dashed, color=green, label=options];
m18_3 -> m18_10  [key=1, style=dashed, color=green, label=options];
m18_3 -> m18_11  [key=1, style=dashed, color=green, label=options];
m18_4 -> m18_5  [key=0, style=solid, color=green];
m18_4 -> m18_14  [key=2, style=dotted, color=green];
m18_6 -> m18_7  [key=0, style=solid, color=green];
m18_6 -> n11  [key=2, style=dotted, color=green];
m18_7 -> m18_8  [key=0, style=solid, color=green];
m18_7 -> n11  [key=2, style=dotted, color=green];
m18_8 -> m18_9  [key=0, style=solid, color=green];
m18_8 -> n11  [key=2, style=dotted, color=green];
m18_9 -> m18_10  [key=0, style=solid, color=green];
m18_9 -> n11  [key=2, style=dotted, color=green];
m18_10 -> m18_11  [key=0, style=solid, color=green];
m18_10 -> m18_17  [key=2, style=dotted, color=green];
m18_11 -> m18_12  [key=0, style=solid, color=green];
m18_11 -> m18_18  [key=2, style=dotted, color=green];
m18_5 -> m18_6  [key=0, style=solid, color=green];
m18_5 -> m18_15  [key=2, style=dotted, color=red];
m18_12 -> m18_2  [key=0, style=bold, color=blue];
m18_39 -> m18_40  [key=0, style=solid];
m18_40 -> m18_41  [key=0, style=solid, color=red];
m18_40 -> m18_46  [key=2, style=dotted];
m18_40 -> m18_43  [key=1, style=dashed, color=green, label=options];
m18_40 -> m18_44  [key=1, style=dashed, color=green, label=options];
m18_41 -> m18_42  [key=0, style=solid, color=red];
m18_41 -> m18_14  [key=2, style=dotted, color=red];
m18_43 -> m18_44  [key=0, style=solid, color=green];
m18_43 -> n11  [key=2, style=dotted, color=green];
m18_44 -> m18_45  [key=0, style=solid, color=green];
m18_44 -> m18_18  [key=2, style=dotted, color=green];
m18_42 -> m18_43  [key=0, style=solid, color=green];
m18_42 -> m18_15  [key=2, style=dotted, color=red];
m18_45 -> m18_39  [key=0, style=bold, color=blue];
m18_51 -> m18_4  [key=1, style=dashed, color=green, label="CommandLine.Tests.ValueListAttributeParsingFixture"];
m18_51 -> m18_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ValueListAttributeParsingFixture"];
m18_51 -> m18_21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ValueListAttributeParsingFixture"];
m18_51 -> m18_22  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ValueListAttributeParsingFixture"];
m18_51 -> m18_35  [key=1, style=dashed, color=green, label="CommandLine.Tests.ValueListAttributeParsingFixture"];
m18_51 -> m18_36  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ValueListAttributeParsingFixture"];
m18_51 -> m18_41  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ValueListAttributeParsingFixture"];
m18_51 -> m18_42  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ValueListAttributeParsingFixture"];
m18_51 -> m18_49  [key=1, style=dashed, color=red, label="CommandLine.Tests.ValueListAttributeParsingFixture"];
}
