digraph  {
n0 [label="Entry Ninject.INinjectSettings.Get<T>(string, T)", span="76-76", cluster="Ninject.INinjectSettings.Get<T>(string, T)"];
n1 [label="Exit Ninject.INinjectSettings.Get<T>(string, T)", span="76-76", cluster="Ninject.INinjectSettings.Get<T>(string, T)"];
n2 [label="Entry Ninject.INinjectSettings.Set(string, object)", span="83-83", cluster="Ninject.INinjectSettings.Set(string, object)"];
n3 [label="Exit Ninject.INinjectSettings.Set(string, object)", span="83-83", cluster="Ninject.INinjectSettings.Set(string, object)"];
d1 [label="Prop.ForAll<string>(\r\n                x =>\r\n                {\r\n                    var result = Sut.ParseArguments<Scalar_String_Mutable>(new[] { ''--stringvalue'', x });\r\n                    ((Parsed<Scalar_String_Mutable>)result).Value.StringValue.ShouldBeEquivalentTo(x);\r\n                }).QuickCheckThrowOnFailure()", span="19-24", cluster="CommandLine.Tests.Properties.ParserProperties.Parsing_a_string_returns_original_string()", color=green, community=1];
d0 [label="Entry CommandLine.Tests.Properties.ParserProperties.Parsing_a_string_returns_original_string()", span="17-17", cluster="CommandLine.Tests.Properties.ParserProperties.Parsing_a_string_returns_original_string()"];
d2 [label="Exit CommandLine.Tests.Properties.ParserProperties.Parsing_a_string_returns_original_string()", span="17-17", cluster="CommandLine.Tests.Properties.ParserProperties.Parsing_a_string_returns_original_string()"];
d3 [label="Entry Unk.>", span="", cluster="Unk.>"];
d4 [label="Entry Unk.QuickCheckThrowOnFailure", span="", cluster="Unk.QuickCheckThrowOnFailure"];
d5 [label="Entry lambda expression", span="20-24", cluster="lambda expression"];
d6 [label="var result = Sut.ParseArguments<Scalar_String_Mutable>(new[] { ''--stringvalue'', x })", span="22-22", cluster="lambda expression", color=green, community=0];
d7 [label="((Parsed<Scalar_String_Mutable>)result).Value.StringValue.ShouldBeEquivalentTo(x)", span="23-23", cluster="lambda expression", color=green, community=0];
d9 [label="Entry CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)", span="85-85", cluster="CommandLine.Parser.ParseArguments<T>(System.Collections.Generic.IEnumerable<string>)"];
d8 [label="Exit lambda expression", span="20-24", cluster="lambda expression"];
d10 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d3  [key=2, style=dotted, color=green];
d1 -> d4  [key=2, style=dotted, color=green];
d1 -> d5  [key=1, style=dashed, color=green, label="lambda expression"];
d0 -> d1  [key=0, style=solid, color=green];
d2 -> d0  [key=0, style=bold, color=blue];
d5 -> d6  [key=0, style=solid, color=green];
d5 -> d7  [key=1, style=dashed, color=green, label=string];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d9  [key=2, style=dotted, color=green];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d10  [key=2, style=dotted, color=green];
d8 -> d5  [key=0, style=bold, color=blue];
}
