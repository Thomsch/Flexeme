digraph  {
d17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", color=green, community=0, label="0: var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="48-52"];
d16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
d18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Assert.Equal(expected, result.Value.LongValue)", span="55-55"];
d9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
d10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
d21 [cluster="lambda expression", label="Entry lambda expression", span="49-49"];
d19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="43-43"];
d20 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="27-31"];
d25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="71-75"];
d33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="95-99"];
d42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="117-121"];
d49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="140-144"];
d57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="162-166"];
d66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="181-185"];
d76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="200-204"];
d86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
d94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
d102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
d112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
d121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
d129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
d137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
d145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
d153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
d161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
d170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
d191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
d201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
d210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
d218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
d227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
d236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
d244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
d253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
d261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
d268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
d277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
d285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
d293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
d301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
d309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
d316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
d327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
d341 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
d352 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
d363 [cluster="lambda expression", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
d370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860"];
d383 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="871-875"];
d393 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="887-891"];
d401 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="904-908"];
d408 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="923-927"];
d417 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="942-946"];
d424 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="961-965"];
d23 [cluster="lambda expression", label="Exit lambda expression", span="49-49"];
d22 [cluster="lambda expression", label="new FakeOptions()", span="49-49"];
d26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Assert.Equal(expected, result.Value.DoubleValue)", span="78-78"];
d1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var fakeOptions = new FakeOptions()", span="21-21"];
d2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-24"];
d4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Assert.True(expectedResult.Equals(result))", span="34-34"];
d13 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
d24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
d28 [cluster="lambda expression", label="Entry lambda expression", span="72-72"];
d32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
d34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="102-102"];
d37 [cluster="lambda expression", label="Entry lambda expression", span="96-96"];
d41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
d43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="124-124"];
d45 [cluster="lambda expression", label="Entry lambda expression", span="118-118"];
d48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
d50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="147-147"];
d52 [cluster="lambda expression", label="Entry lambda expression", span="141-141"];
d56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
d58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="169-169"];
d60 [cluster="lambda expression", label="Entry lambda expression", span="163-163"];
d65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="178-178"];
d67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="188-188"];
d71 [cluster="lambda expression", label="Entry lambda expression", span="182-182"];
d75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="197-197"];
d77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="207-207"];
d80 [cluster="lambda expression", label="Entry lambda expression", span="201-201"];
d85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
d87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
d89 [cluster="lambda expression", label="Entry lambda expression", span="220-220"];
d93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
d95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
d97 [cluster="lambda expression", label="Entry lambda expression", span="239-239"];
d101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
d103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
d106 [cluster="lambda expression", label="Entry lambda expression", span="263-263"];
d111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
d113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
d116 [cluster="lambda expression", label="Entry lambda expression", span="282-282"];
d120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
d122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
d124 [cluster="lambda expression", label="Entry lambda expression", span="301-301"];
d128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
d130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
d132 [cluster="lambda expression", label="Entry lambda expression", span="320-320"];
d136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
d138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
d141 [cluster="lambda expression", label="Entry lambda expression", span="345-345"];
d144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
d146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
d148 [cluster="lambda expression", label="Entry lambda expression", span="368-368"];
d152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
d154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
d156 [cluster="lambda expression", label="Entry lambda expression", span="390-390"];
d160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
d162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
d164 [cluster="lambda expression", label="Entry lambda expression", span="412-412"];
d169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
d171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
d173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
d174 [cluster="lambda expression", label="Entry lambda expression", span="441-441"];
d177 [cluster="lambda expression", label="Entry lambda expression", span="442-444"];
d190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
d192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
d195 [cluster="lambda expression", label="Entry lambda expression", span="467-467"];
d200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
d202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
d205 [cluster="lambda expression", label="Entry lambda expression", span="487-487"];
d209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
d211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
d213 [cluster="lambda expression", label="Entry lambda expression", span="507-507"];
d217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
d219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
d222 [cluster="lambda expression", label="Entry lambda expression", span="527-527"];
d226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
d228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
d230 [cluster="lambda expression", label="Entry lambda expression", span="545-545"];
d235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
d237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
d239 [cluster="lambda expression", label="Entry lambda expression", span="564-564"];
d243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
d245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
d248 [cluster="lambda expression", label="Entry lambda expression", span="583-583"];
d252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
d254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
d256 [cluster="lambda expression", label="Entry lambda expression", span="602-602"];
d260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
d262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
d264 [cluster="lambda expression", label="Entry lambda expression", span="621-621"];
d267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
d269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
d272 [cluster="lambda expression", label="Entry lambda expression", span="641-641"];
d276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
d278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
d280 [cluster="lambda expression", label="Entry lambda expression", span="660-660"];
d284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
d286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
d288 [cluster="lambda expression", label="Entry lambda expression", span="682-682"];
d292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
d294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
d296 [cluster="lambda expression", label="Entry lambda expression", span="701-701"];
d300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
d302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
d304 [cluster="lambda expression", label="Entry lambda expression", span="723-723"];
d308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
d310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
d312 [cluster="lambda expression", label="Entry lambda expression", span="745-745"];
d315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
d317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="result.Value.FileName != null", span="771-771"];
d322 [cluster="lambda expression", label="Entry lambda expression", span="765-765"];
d318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
d319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
d326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
d328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="result.Value.Offset != null", span="795-795"];
d332 [cluster="lambda expression", label="Entry lambda expression", span="789-789"];
d329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
d330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
d340 [cluster="lambda expression", label="Entry lambda expression", span="809-813"];
d342 [cluster="lambda expression", label="Exit lambda expression", span="809-813"];
d343 [cluster="lambda expression", label="Entry lambda expression", span="810-810"];
d351 [cluster="lambda expression", label="Entry lambda expression", span="823-827"];
d353 [cluster="lambda expression", label="Exit lambda expression", span="823-827"];
d354 [cluster="lambda expression", label="Entry lambda expression", span="824-824"];
d362 [cluster="lambda expression", label="Entry lambda expression", span="837-841"];
d364 [cluster="lambda expression", label="Exit lambda expression", span="837-841"];
d365 [cluster="lambda expression", label="Entry lambda expression", span="838-838"];
d369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="853-853"];
d371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="result.Errors.Should().HaveCount(x => x == expected)", span="863-863"];
d375 [cluster="lambda expression", label="Entry lambda expression", span="857-857"];
d382 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
d384 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="result.Errors.Should().HaveCount(x => x == expected)", span="878-878"];
d386 [cluster="lambda expression", label="Entry lambda expression", span="872-872"];
d392 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
d394 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="894-894"];
d396 [cluster="lambda expression", label="Entry lambda expression", span="888-888"];
d400 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
d402 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="expected.ShouldBeEquivalentTo(result.Value)", span="911-911"];
d404 [cluster="lambda expression", label="Entry lambda expression", span="905-905"];
d407 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
d409 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="expected.ShouldBeEquivalentTo(result.Value)", span="930-930"];
d411 [cluster="lambda expression", label="Entry lambda expression", span="924-924"];
d416 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="939-939"];
d418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="949-949"];
d420 [cluster="lambda expression", label="Entry lambda expression", span="943-943"];
d423 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
d425 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", label="expected.ShouldBeEquivalentTo(result.Value)", span="968-968"];
d427 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
d6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
d27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="66-66"];
d0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
d14 [cluster="lambda expression", label=fakeOptions, span="28-28"];
d7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="353-353"];
d8 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
d5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
d11 [cluster="Unk.Equals", label="Entry Unk.Equals", span=""];
d12 [cluster="Unk.True", label="Entry Unk.True", span=""];
d15 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
d30 [cluster="lambda expression", label="Exit lambda expression", span="72-72"];
d29 [cluster="lambda expression", label="new FakeOptionsWithDouble()", span="72-72"];
d35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="90-90"];
d36 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
d39 [cluster="lambda expression", label="Exit lambda expression", span="96-96"];
d38 [cluster="lambda expression", label="new FakeOptionsWithSequence()", span="96-96"];
d44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="112-112"];
d47 [cluster="lambda expression", label="Exit lambda expression", span="118-118"];
d46 [cluster="lambda expression", label="new FakeOptions()", span="118-118"];
d51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="135-135"];
d54 [cluster="lambda expression", label="Exit lambda expression", span="141-141"];
d53 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="141-141"];
d59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="157-157"];
d62 [cluster="lambda expression", label="Exit lambda expression", span="163-163"];
d61 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="163-163"];
d64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
d69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="265-265"];
d70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
d68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="175-175"];
d73 [cluster="lambda expression", label="Exit lambda expression", span="182-182"];
d72 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="182-182"];
d74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
d79 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="320-320"];
d78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="194-194"];
d82 [cluster="lambda expression", label="Exit lambda expression", span="201-201"];
d81 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="201-201"];
d84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
d88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
d91 [cluster="lambda expression", label="Exit lambda expression", span="220-220"];
d90 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
d92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
d96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
d99 [cluster="lambda expression", label="Exit lambda expression", span="239-239"];
d98 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
d104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
d105 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
d108 [cluster="lambda expression", label="Exit lambda expression", span="263-263"];
d107 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="263-263"];
d110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
d115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="309-309"];
d114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
d118 [cluster="lambda expression", label="Exit lambda expression", span="282-282"];
d117 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="282-282"];
d119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
d123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
d126 [cluster="lambda expression", label="Exit lambda expression", span="301-301"];
d125 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="301-301"];
d127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
d131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
d134 [cluster="lambda expression", label="Exit lambda expression", span="320-320"];
d133 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="320-320"];
d135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
d140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
d139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
d143 [cluster="lambda expression", label="Exit lambda expression", span="345-345"];
d142 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="345-345"];
d147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
d150 [cluster="lambda expression", label="Exit lambda expression", span="368-368"];
d149 [cluster="lambda expression", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
d155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
d158 [cluster="lambda expression", label="Exit lambda expression", span="390-390"];
d157 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
d163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
d166 [cluster="lambda expression", label="Exit lambda expression", span="412-412"];
d165 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
d168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
d172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
d176 [cluster="lambda expression", label="Exit lambda expression", span="441-441"];
d175 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="441-441"];
d179 [cluster="lambda expression", label="Exit lambda expression", span="442-444"];
d178 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
d182 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
d186 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
d189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
d194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="298-298"];
d193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
d197 [cluster="lambda expression", label="Exit lambda expression", span="467-467"];
d196 [cluster="lambda expression", label="new FakeOptionsWithSets()", span="467-467"];
d199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
d204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
d203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
d207 [cluster="lambda expression", label="Exit lambda expression", span="487-487"];
d206 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
d208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
d212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
d215 [cluster="lambda expression", label="Exit lambda expression", span="507-507"];
d214 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
d216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
d221 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="287-287"];
d220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
d224 [cluster="lambda expression", label="Exit lambda expression", span="527-527"];
d223 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
d225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
d229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
d232 [cluster="lambda expression", label="Exit lambda expression", span="545-545"];
d231 [cluster="lambda expression", label="new FakeOptionWithRequired()", span="545-545"];
d234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
d238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
d241 [cluster="lambda expression", label="Exit lambda expression", span="564-564"];
d240 [cluster="lambda expression", label="new FakeOptions()", span="564-564"];
d242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
d247 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="276-276"];
d246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
d250 [cluster="lambda expression", label="Exit lambda expression", span="583-583"];
d249 [cluster="lambda expression", label="new FakeOptions()", span="583-583"];
d251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
d255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
d258 [cluster="lambda expression", label="Exit lambda expression", span="602-602"];
d257 [cluster="lambda expression", label="new FakeOptions()", span="602-602"];
d259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
d263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
d266 [cluster="lambda expression", label="Exit lambda expression", span="621-621"];
d265 [cluster="lambda expression", label="new FakeOptions()", span="621-621"];
d270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
d271 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
d274 [cluster="lambda expression", label="Exit lambda expression", span="641-641"];
d273 [cluster="lambda expression", label="new FakeOptions()", span="641-641"];
d275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
d279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
d282 [cluster="lambda expression", label="Exit lambda expression", span="660-660"];
d281 [cluster="lambda expression", label="new FakeOptionsWithRequiredValue()", span="660-660"];
d287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
d290 [cluster="lambda expression", label="Exit lambda expression", span="682-682"];
d289 [cluster="lambda expression", label="new FakeOptions()", span="682-682"];
d291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
d295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
d298 [cluster="lambda expression", label="Exit lambda expression", span="701-701"];
d297 [cluster="lambda expression", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
d303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
d306 [cluster="lambda expression", label="Exit lambda expression", span="723-723"];
d305 [cluster="lambda expression", label="new FakeOptionsWithNullables()", span="723-723"];
d311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
d314 [cluster="lambda expression", label="Exit lambda expression", span="745-745"];
d313 [cluster="lambda expression", label="new FakeOptionsWithNullables()", span="745-745"];
d320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
d324 [cluster="lambda expression", label="Exit lambda expression", span="765-765"];
d323 [cluster="lambda expression", label="new FakeOptionsWithFSharpOption()", span="765-765"];
d321 [cluster="Unk.get_IsSome", label="Entry Unk.get_IsSome", span=""];
d331 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
d334 [cluster="lambda expression", label="Exit lambda expression", span="789-789"];
d333 [cluster="lambda expression", label="new FakeOptionsWithFSharpOption()", span="789-789"];
d345 [cluster="lambda expression", label="Exit lambda expression", span="810-810"];
d344 [cluster="lambda expression", label="new FakeOptionsWithMinZero()", span="810-810"];
d356 [cluster="lambda expression", label="Exit lambda expression", span="824-824"];
d355 [cluster="lambda expression", label="new FakeOptionsWithMaxZero()", span="824-824"];
d367 [cluster="lambda expression", label="Exit lambda expression", span="838-838"];
d366 [cluster="lambda expression", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
d372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="853-853"];
d380 [cluster="lambda expression", label="x == expected", span="863-863"];
d373 [cluster="Unk.Should", label="Entry Unk.Should", span=""];
d374 [cluster="Unk.HaveCount", label="Entry Unk.HaveCount", span=""];
d379 [cluster="lambda expression", label="Entry lambda expression", span="863-863"];
d377 [cluster="lambda expression", label="Exit lambda expression", span="857-857"];
d376 [cluster="lambda expression", label="new FakeOptionsWithNamedAndEmptySets()", span="857-857"];
d385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="868-868"];
d390 [cluster="lambda expression", label="x == expected", span="878-878"];
d389 [cluster="lambda expression", label="Entry lambda expression", span="878-878"];
d388 [cluster="lambda expression", label="Exit lambda expression", span="872-872"];
d387 [cluster="lambda expression", label="new FakeOptions()", span="872-872"];
d395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="884-884"];
d398 [cluster="lambda expression", label="Exit lambda expression", span="888-888"];
d397 [cluster="lambda expression", label="new FakeInterfaceOptions()", span="888-888"];
d403 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="899-899"];
d406 [cluster="lambda expression", label="Exit lambda expression", span="905-905"];
d405 [cluster="lambda expression", label="new FakeOptionsWithRequiredValue()", span="905-905"];
d410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="918-918"];
d413 [cluster="lambda expression", label="Exit lambda expression", span="924-924"];
d412 [cluster="lambda expression", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="924-924"];
d415 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
d419 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="936-936"];
d422 [cluster="lambda expression", label="Exit lambda expression", span="943-943"];
d421 [cluster="lambda expression", label="new FakeOptions()", span="943-943"];
d426 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="956-956"];
d428 [label=fakeOptions, span=""];
d31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
d40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
d55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
d63 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
d83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
d100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
d109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
d151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
d159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
d167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
d180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
d181 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
d429 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d183 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
d184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
d185 [cluster="lambda expression", label="Entry lambda expression", span="444-444"];
d187 [cluster="lambda expression", label="Exit lambda expression", span="444-444"];
d188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
d198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
d233 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
d283 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
d299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
d307 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
d325 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
d346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
d357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
d368 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
d430 [label=int, span=""];
d381 [cluster="lambda expression", label="Exit lambda expression", span="863-863"];
d378 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
d431 [label=int, span=""];
d391 [cluster="lambda expression", label="Exit lambda expression", span="878-878"];
d399 [cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2"];
d414 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m0_6 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NameLookupTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m0_10 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="NameLookupTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=green, community=0, file="NameLookupTests.cs", label="0: var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="18-19"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var expected = Maybe.Just(''.'')", span="17-17"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m0_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m0_11 [cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_9 [cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120"];
m4_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="TokenizerTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123"];
m4_435 [cluster="CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithTwoRequired.FakeOptionWithTwoRequired()", span="4-4"];
m4_358 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m4_359 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m4_360 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Assert.Throws<ApplicationException>(test)", span="844-844"];
m4_361 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="834-834"];
m4_339 [cluster="Unk.>", file="TokenizerTests.cs", label="Entry Unk.>", span=""];
m4_63 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="6-6"];
m4_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m4_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="388-392"];
m4_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="395-395"];
m4_155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="383-383"];
m4_55 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="6-6"];
m4_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m4_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m4_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenizerTests.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m4_270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m4_335 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m4_336 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m4_337 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Assert.Throws<ApplicationException>(test)", span="816-816"];
m4_338 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="806-806"];
m4_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m4_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="744-748"];
m4_310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableLong)", span="751-751"];
m4_311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="739-739"];
m4_79 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TokenizerTests.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
m4_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m4_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenizerTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="429-435"];
m4_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenizerTests.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="436-436"];
m4_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenizerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="449-449"];
m4_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="439-446"];
m4_172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="426-426"];
m4_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m4_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m4_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m4_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="627-627"];
m4_263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m4_395 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="891-891"];
m4_396 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeInterfaceOptions>>(() => new FakeInterfaceOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="894-898"];
m4_397 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.InputFile)", span="901-901"];
m4_398 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="891-891"];
m4_109 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="11-11"];
m4_9 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TokenizerTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m4_204 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m4_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m4_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
m4_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
m4_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraintAsValue>)result).Errors))", span="206-206"];
m4_78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m4_247 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="TokenizerTests.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="280-280"];
m4_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231"];
m4_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="234-234"];
m4_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="237-241"];
m4_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue>)result).Errors))", span="244-244"];
m4_96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="231-231"];
m4_184 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m4_315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m4_316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="764-768"];
m4_318 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TokenizerTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.FileName.Value)", span="773-773"];
m4_319 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TokenizerTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(result.Value.FileName))", span="775-775"];
m4_317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TokenizerTests.cs", label="result.Value.FileName != null", span="771-771"];
m4_320 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="759-759"];
m4_299 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m4_307 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNullables.FakeOptionsWithNullables()", span="4-4"];
m4_426 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="968-968"];
m4_427 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithTwoRequired>>(() => new FakeOptionWithTwoRequired()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="971-975"];
m4_429 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="TokenizerTests.cs", label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="979-979"];
m4_428 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="TokenizerTests.cs", label="var errors = ((NotParsed<FakeOptionWithTwoRequired>)result).Errors", span="978-978"];
m4_430 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="968-968"];
m4_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m4_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m4_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m4_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m4_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="608-608"];
m4_255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m4_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m4_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="277-277"];
m4_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="280-284"];
m4_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="287-287"];
m4_114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="274-274"];
m4_8 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="TokenizerTests.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="357-357"];
m4_381 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithNamedAndEmptySets.FakeOptionsWithNamedAndEmptySets()", span="4-4"];
m4_105 [cluster="Unk.ShouldBeEquivalentTo", file="TokenizerTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m4_410 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="925-925"];
m4_411 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithScalarValueAndSequenceStringAdjacent>>(() => new FakeOptionsWithScalarValueAndSequenceStringAdjacent()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="930-934"];
m4_412 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="937-937"];
m4_413 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="925-925"];
m4_83 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="6-6"];
m4_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m4_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceWithoutRange>>(() => new FakeOptionsWithSequenceWithoutRange()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="366-370"];
m4_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="373-373"];
m4_147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="361-361"];
m4_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m4_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
m4_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TokenizerTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
m4_59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m4_369 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="853-853"];
m4_370 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNamedAndEmptySets>>(() => new FakeOptionsWithNamedAndEmptySets()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="856-860"];
m4_371 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="TokenizerTests.cs", label="type == ParserResultType.NotParsed", span="863-863"];
m4_372 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="TokenizerTests.cs", label="((NotParsed<FakeOptionsWithNamedAndEmptySets>)result).Errors.Should().HaveCount(x => x == expected)", span="865-865"];
m4_373 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="TokenizerTests.cs", label="type == ParserResultType.Parsed", span="867-867"];
m4_374 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="TokenizerTests.cs", label="result.Should().BeOfType<Parsed<FakeOptionsWithNamedAndEmptySets>>()", span="869-869"];
m4_375 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="853-853"];
m4_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m4_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequence>>(() => new FakeOptionsWithSequence()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98"];
m4_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TokenizerTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101"];
m4_35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m4_436 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="979-979"];
m4_14 [cluster="lambda expression", file="TokenizerTests.cs", label=fakeOptions, span="27-27"];
m4_13 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="27-27"];
m4_15 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="27-27"];
m4_21 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="48-48"];
m4_22 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="48-48"];
m4_23 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="48-48"];
m4_28 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="71-71"];
m4_29 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithDouble()", span="71-71"];
m4_30 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="71-71"];
m4_37 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="95-95"];
m4_38 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequence()", span="95-95"];
m4_39 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="95-95"];
m4_45 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="117-117"];
m4_46 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="117-117"];
m4_47 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="117-117"];
m4_52 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="140-140"];
m4_53 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
m4_54 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="140-140"];
m4_60 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="162-162"];
m4_61 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
m4_62 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="162-162"];
m4_71 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="181-181"];
m4_72 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
m4_73 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="181-181"];
m4_80 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="200-200"];
m4_81 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
m4_82 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="200-200"];
m4_89 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="219-219"];
m4_90 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="219-219"];
m4_91 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="219-219"];
m4_97 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="238-238"];
m4_98 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="238-238"];
m4_99 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="238-238"];
m4_106 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="262-262"];
m4_107 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithEnum()", span="262-262"];
m4_108 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="262-262"];
m4_116 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="281-281"];
m4_117 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithEnum()", span="281-281"];
m4_118 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="281-281"];
m4_124 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="300-300"];
m4_125 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithEnum()", span="300-300"];
m4_126 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="300-300"];
m4_132 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="319-319"];
m4_133 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithEnum()", span="319-319"];
m4_134 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="319-319"];
m4_141 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="344-344"];
m4_142 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithValues()", span="344-344"];
m4_143 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="344-344"];
m4_148 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="367-367"];
m4_149 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="367-367"];
m4_150 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="367-367"];
m4_156 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="389-389"];
m4_157 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="389-389"];
m4_158 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="389-389"];
m4_164 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="411-411"];
m4_165 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="411-411"];
m4_166 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="411-411"];
m4_174 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="440-440"];
m4_177 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="441-443"];
m4_175 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithValues()", span="440-440"];
m4_176 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="440-440"];
m4_178 [cluster="lambda expression", file="TokenizerTests.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="442-443"];
m4_182 [cluster="lambda expression", file="TokenizerTests.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="443-443"];
m4_186 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="443-443"];
m4_179 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="441-443"];
m4_181 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="443-443"];
m4_183 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="443-443"];
m4_185 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="443-443"];
m4_187 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="443-443"];
m4_195 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="466-466"];
m4_196 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSets()", span="466-466"];
m4_197 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="466-466"];
m4_205 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="486-486"];
m4_206 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionWithRequiredAndSet()", span="486-486"];
m4_207 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="486-486"];
m4_213 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="506-506"];
m4_214 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionWithRequiredAndSet()", span="506-506"];
m4_215 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="506-506"];
m4_222 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="526-526"];
m4_223 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionWithRequiredAndSet()", span="526-526"];
m4_224 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="526-526"];
m4_230 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="545-545"];
m4_231 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionWithRequired()", span="545-545"];
m4_232 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="545-545"];
m4_239 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="564-564"];
m4_240 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="564-564"];
m4_241 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="564-564"];
m4_248 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="583-583"];
m4_249 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="583-583"];
m4_250 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="583-583"];
m4_256 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="602-602"];
m4_257 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="602-602"];
m4_258 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="602-602"];
m4_264 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="621-621"];
m4_265 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="621-621"];
m4_266 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="621-621"];
m4_272 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="641-641"];
m4_273 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="641-641"];
m4_274 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="641-641"];
m4_280 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="660-660"];
m4_281 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithRequiredValue()", span="660-660"];
m4_282 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="660-660"];
m4_288 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="682-682"];
m4_289 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="682-682"];
m4_290 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="682-682"];
m4_296 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="701-701"];
m4_297 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
m4_298 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="701-701"];
m4_304 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="723-723"];
m4_305 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithNullables()", span="723-723"];
m4_306 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="723-723"];
m4_312 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="745-745"];
m4_313 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithNullables()", span="745-745"];
m4_314 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="745-745"];
m4_322 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="765-765"];
m4_323 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithFSharpOption()", span="765-765"];
m4_324 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="765-765"];
m4_332 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="789-789"];
m4_333 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithFSharpOption()", span="789-789"];
m4_334 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="789-789"];
m4_340 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="809-813"];
m4_341 [cluster="lambda expression", file="TokenizerTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinZero>>(() => new FakeOptionsWithMinZero()),\r\n                new string[] {},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="809-813"];
m4_342 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="809-813"];
m4_343 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="810-810"];
m4_344 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithMinZero()", span="810-810"];
m4_345 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="810-810"];
m4_351 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="823-827"];
m4_352 [cluster="lambda expression", file="TokenizerTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m4_353 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="823-827"];
m4_354 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="824-824"];
m4_355 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithMaxZero()", span="824-824"];
m4_356 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="824-824"];
m4_362 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="837-841"];
m4_363 [cluster="lambda expression", file="TokenizerTests.cs", label="InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMinMaxZero>>(() => new FakeOptionsWithMinMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="837-841"];
m4_364 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="837-841"];
m4_365 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="838-838"];
m4_366 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithMinMaxZero()", span="838-838"];
m4_367 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="838-838"];
m4_383 [cluster="lambda expression", file="TokenizerTests.cs", label="x == expected", span="865-865"];
m4_378 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="857-857"];
m4_382 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="865-865"];
m4_379 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithNamedAndEmptySets()", span="857-857"];
m4_380 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="857-857"];
m4_384 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="865-865"];
m4_393 [cluster="lambda expression", file="TokenizerTests.cs", label="x == expected", span="885-885"];
m4_389 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="879-879"];
m4_392 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="885-885"];
m4_390 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="879-879"];
m4_391 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="879-879"];
m4_394 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="885-885"];
m4_399 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="895-895"];
m4_400 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeInterfaceOptions()", span="895-895"];
m4_401 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="895-895"];
m4_407 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="912-912"];
m4_408 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithRequiredValue()", span="912-912"];
m4_409 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="912-912"];
m4_414 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="931-931"];
m4_415 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="931-931"];
m4_416 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="931-931"];
m4_423 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="950-950"];
m4_424 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptions()", span="950-950"];
m4_425 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="950-950"];
m4_437 [cluster="lambda expression", file="TokenizerTests.cs", label="x == expected", span="979-979"];
m4_432 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="972-972"];
m4_433 [cluster="lambda expression", file="TokenizerTests.cs", label="new FakeOptionWithTwoRequired()", span="972-972"];
m4_434 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="972-972"];
m4_438 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="979-979"];
m4_31 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="4-4"];
m4_159 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="6-6"];
m4_180 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m4_385 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="875-875"];
m4_386 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="878-882"];
m4_387 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="TokenizerTests.cs", label="((NotParsed<FakeOptions>)result).Errors.Should().HaveCount(x => x == expected)", span="885-885"];
m4_388 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="875-875"];
m4_194 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="TokenizerTests.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302"];
m4_233 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m4_443 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenizerTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m4_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m4_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
m4_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TokenizerTests.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
m4_51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m4_10 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenizerTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m4_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m4_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="296-296"];
m4_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="299-303"];
m4_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="306-306"];
m4_123 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="293-293"];
m4_140 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m4_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m4_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithDouble>>(() => new FakeOptionsWithDouble()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74"];
m4_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TokenizerTests.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77"];
m4_27 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m4_283 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m4_368 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinMaxZero.FakeOptionsWithMinMaxZero()", span="6-6"];
m4_7 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenizerTests.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="142-142"];
m4_12 [cluster="Unk.True", file="TokenizerTests.cs", label="Entry Unk.True", span=""];
m4_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m4_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m4_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m4_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithRequiredValue>)result).Errors))", span="666-666"];
m4_279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m4_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m4_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m4_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m4_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="570-570"];
m4_238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m4_325 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithFSharpOption.FakeOptionsWithFSharpOption()", span="6-6"];
m4_321 [cluster="Unk.get_IsSome", file="TokenizerTests.cs", label="Entry Unk.get_IsSome", span=""];
m4_188 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m4_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m4_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenizerTests.cs", label="var fakeOptions = new FakeOptions()", span="21-21"];
m4_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenizerTests.cs", label="var expectedResult = new NotParsed<FakeOptions>(\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="22-23"];
m4_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => fakeOptions),\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
m4_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenizerTests.cs", label="Assert.True(expectedResult.Equals(result))", span="33-33"];
m4_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="18-18"];
m4_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m4_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m4_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequired>>(() => new FakeOptionWithRequired()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m4_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequired>)result).Errors))", span="551-551"];
m4_229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m4_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517"];
m4_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenizerTests.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="519-523"];
m4_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="525-529"];
m4_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionWithRequiredAndSet>)result).Errors))", span="532-532"];
m4_220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="517-517"];
m4_11 [cluster="CommandLine.NotParsed<T>.Equals(object)", file="TokenizerTests.cs", label="Entry CommandLine.NotParsed<T>.Equals(object)", span="161-161"];
m4_36 [cluster="Unk.SequenceEqual", file="TokenizerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m4_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m4_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="315-315"];
m4_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="318-322"];
m4_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithEnum>)result).Errors))", span="325-325"];
m4_131 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="312-312"];
m4_69 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="TokenizerTests.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="269-269"];
m4_403 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="906-906"];
m4_404 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithRequiredValue>>(() => new FakeOptionsWithRequiredValue()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="911-915"];
m4_405 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="918-918"];
m4_406 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="906-906"];
m4_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212"];
m4_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="215-215"];
m4_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMaxConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMaxConstraint()),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="218-222"];
m4_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMaxConstraint>)result).Errors))", span="225-225"];
m4_88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="212-212"];
m4_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m4_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
m4_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndOnlyMinConstraint>>(() => new FakeOptionsWithSequenceAndOnlyMinConstraint()),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
m4_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceAndOnlyMinConstraint>)result).Errors))", span="187-187"];
m4_68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m4_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m4_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenizerTests.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="334-340"];
m4_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithValues>>(() => new FakeOptionsWithValues()),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347"];
m4_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenizerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="350-350"];
m4_139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="331-331"];
m4_417 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m4_357 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMaxZero.FakeOptionsWithMaxZero()", span="6-6"];
m4_377 [cluster="Unk.HaveCount", file="TokenizerTests.cs", label="Entry Unk.HaveCount", span=""];
m4_198 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m4_271 [cluster="string.Equals(string)", file="TokenizerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m4_70 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="TokenizerTests.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m4_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m4_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
m4_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TokenizerTests.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="54-54"];
m4_19 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m4_402 [cluster="CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeInterfaceOptions.FakeInterfaceOptions()", span="2-2"];
m4_20 [cluster="Unk.Equal", file="TokenizerTests.cs", label="Entry Unk.Equal", span=""];
m4_326 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m4_327 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithFSharpOption>>(() => new FakeOptionsWithFSharpOption()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="788-792"];
m4_329 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TokenizerTests.cs", label="expectedValue.ShouldBeEquivalentTo(result.Value.Offset.Value)", span="797-797"];
m4_330 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TokenizerTests.cs", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(result.Value.Offset))", span="799-799"];
m4_328 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TokenizerTests.cs", label="result.Value.Offset != null", span="795-795"];
m4_331 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="783-783"];
m4_418 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="943-943"];
m4_419 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="TokenizerTests.cs", label="var expectedResult = new FakeOptions { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="946-946"];
m4_420 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="949-953"];
m4_421 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="TokenizerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="956-956"];
m4_422 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="943-943"];
m4_151 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="6-6"];
m4_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m4_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceAndSeparator>>(() => new FakeOptionsWithSequenceAndSeparator()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="410-414"];
m4_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="417-417"];
m4_163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="405-405"];
m4_221 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="TokenizerTests.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
m4_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m4_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithNullables>>(() => new FakeOptionsWithNullables()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="722-726"];
m4_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.NullableInt)", span="729-729"];
m4_303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="717-717"];
m4_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m4_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m4_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m4_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptions>)result).Errors))", span="589-589"];
m4_246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m4_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498"];
m4_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenizerTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="500-503"];
m4_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="505-509"];
m4_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenizerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="512-512"];
m4_212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="498-498"];
m4_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m4_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
m4_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSequenceMinMaxEqual>>(() => new FakeOptionsWithSequenceMinMaxEqual()),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
m4_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSequenceMinMaxEqual>)result).Errors))", span="707-707"];
m4_295 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m4_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m4_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithEnum>>(() => new FakeOptionsWithEnum()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="261-265"];
m4_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="268-268"];
m4_104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="256-256"];
m4_439 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="984-984"];
m4_440 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<FakeImmutableOptions>>(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="989-993"];
m4_441 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="996-996"];
m4_442 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.FakeImmutableOptions)", span="984-984"];
m4_100 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="6-6"];
m4_376 [cluster="Unk.Should", file="TokenizerTests.cs", label="Entry Unk.Should", span=""];
m4_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m4_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptions>>(() => new FakeOptions()),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
m4_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TokenizerTests.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
m4_287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m4_115 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="TokenizerTests.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="313-313"];
m4_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478"];
m4_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenizerTests.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="480-483"];
m4_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionWithRequiredAndSet>>(() => new FakeOptionWithRequiredAndSet()),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="485-489"];
m4_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenizerTests.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="492-492"];
m4_203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="478-478"];
m4_431 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="TokenizerTests.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m4_40 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="6-6"];
m4_346 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithMinZero.FakeOptionsWithMinZero()", span="6-6"];
m4_173 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="TokenizerTests.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
m4_347 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m4_348 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Action test = () => InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithMaxZero>>(() => new FakeOptionsWithMaxZero()),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="823-827"];
m4_349 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Assert.Throws<ApplicationException>(test)", span="830-830"];
m4_350 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="820-820"];
m4_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m4_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenizerTests.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="458-462"];
m4_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenizerTests.cs", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<FakeOptionsWithSets>>(() => new FakeOptionsWithSets()),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="465-469"];
m4_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenizerTests.cs", label="Assert.True(expectedResult.SequenceEqual(((NotParsed<FakeOptionsWithSets>)result).Errors))", span="472-472"];
m4_193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="455-455"];
m4_444 [file="TokenizerTests.cs", label=fakeOptions, span=""];
m4_445 [file="TokenizerTests.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m4_446 [file="TokenizerTests.cs", label=int, span=""];
m4_447 [file="TokenizerTests.cs", label=int, span=""];
m4_448 [file="TokenizerTests.cs", label=int, span=""];
m5_0 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m5_2 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", color=green, community=0, file="TokenPartitionerTests.cs", label="0: var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="21-25"];
m5_1 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20"];
m5_3 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31"];
m5_4 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34"];
m5_5 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14"];
m5_10 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m5_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m5_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m5_13 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m5_15 [cluster="Unk.True", file="TokenPartitionerTests.cs", label="Entry Unk.True", span=""];
m5_19 [cluster="CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptor(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m5_41 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m5_17 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="30-30"];
m5_36 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)", span="56-56"];
m5_16 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="30-30"];
m5_21 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34"];
m5_18 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="30-30"];
m5_35 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="56-56"];
m5_39 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="60-60"];
m5_37 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="56-56"];
m5_20 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m5_22 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m5_24 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m5_25 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34"];
m5_38 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m5_40 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m5_42 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="60-60"];
m5_26 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m5_43 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m5_14 [cluster="Unk.All", file="TokenPartitionerTests.cs", label="Entry Unk.All", span=""];
m5_27 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m5_11 [cluster="CommandLine.Core.Token.Name(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m5_28 [cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m5_23 [cluster="Unk.Any", file="TokenPartitionerTests.cs", label="Entry Unk.Any", span=""];
m5_12 [cluster="CommandLine.Core.Token.Value(string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m5_29 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m5_31 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=green, community=0, file="TokenPartitionerTests.cs", label="0: var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, typeof(string), string.Empty, string.Empty, new List<string>()),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, typeof(IEnumerable<int>), string.Empty, string.Empty, new List<string>())\r\n                }", span="47-51"];
m5_30 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="43-46"];
m5_32 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptor(name, specs, StringComparer.InvariantCulture)\r\n                )", span="54-57"];
m5_33 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="60-60"];
m5_34 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m5_9 [cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m5_44 [file="TokenPartitionerTests.cs", label=specs, span=""];
m5_47 [file="TokenPartitionerTests.cs", label=specs, span=""];
m5_45 [file="TokenPartitionerTests.cs", label=result, span=""];
m5_48 [file="TokenPartitionerTests.cs", label=result, span=""];
m5_46 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m5_49 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m6_3 [cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", file="ValueMapper.cs", label="Entry CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", span="61-61"];
m6_0 [cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="ValueMapper.cs", label="Entry CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", span="45-45"];
m6_1 [cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="ValueMapper.cs", label="Assumes.NotNullOrEmpty(longName, ''longName'')", span="48-48"];
m6_2 [cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="ValueMapper.cs", label="Exit CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", span="45-45"];
d17 -> d18  [color=green, key=0, style=solid];
d17 -> d9  [color=green, key=2, style=dotted];
d17 -> d10  [color=green, key=2, style=dotted];
d17 -> d21  [color=green, key=1, label="lambda expression", style=dashed];
d16 -> d17  [color=green, key=0, style=solid];
d16 -> d18  [color=darkseagreen4, key=1, label=long, style=dashed];
d18 -> d19  [key=0, style=solid];
d18 -> d20  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d19 -> d16  [color=blue, key=0, style=bold];
d3 -> d9  [key=2, style=dotted];
d3 -> d10  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d25 -> d9  [key=2, style=dotted];
d25 -> d10  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d33 -> d9  [key=2, style=dotted];
d33 -> d10  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d9  [key=2, style=dotted];
d42 -> d10  [key=2, style=dotted];
d42 -> d43  [key=0, style=solid];
d42 -> d45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d49 -> d9  [key=2, style=dotted];
d49 -> d10  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d49 -> d52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d57 -> d9  [key=2, style=dotted];
d57 -> d10  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d57 -> d60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d66 -> d9  [key=2, style=dotted];
d66 -> d10  [key=2, style=dotted];
d66 -> d67  [key=0, style=solid];
d66 -> d71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d76 -> d9  [key=2, style=dotted];
d76 -> d10  [key=2, style=dotted];
d76 -> d77  [key=0, style=solid];
d76 -> d80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d86 -> d9  [key=2, style=dotted];
d86 -> d10  [key=2, style=dotted];
d86 -> d87  [key=0, style=solid];
d86 -> d89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d94 -> d9  [key=2, style=dotted];
d94 -> d10  [key=2, style=dotted];
d94 -> d95  [key=0, style=solid];
d94 -> d97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d102 -> d9  [key=2, style=dotted];
d102 -> d10  [key=2, style=dotted];
d102 -> d103  [key=0, style=solid];
d102 -> d106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d112 -> d9  [key=2, style=dotted];
d112 -> d10  [key=2, style=dotted];
d112 -> d113  [key=0, style=solid];
d112 -> d116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d121 -> d9  [key=2, style=dotted];
d121 -> d10  [key=2, style=dotted];
d121 -> d122  [key=0, style=solid];
d121 -> d124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d129 -> d9  [key=2, style=dotted];
d129 -> d10  [key=2, style=dotted];
d129 -> d130  [key=0, style=solid];
d129 -> d132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d137 -> d9  [key=2, style=dotted];
d137 -> d10  [key=2, style=dotted];
d137 -> d138  [key=0, style=solid];
d137 -> d141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d145 -> d9  [key=2, style=dotted];
d145 -> d10  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d145 -> d148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d153 -> d9  [key=2, style=dotted];
d153 -> d10  [key=2, style=dotted];
d153 -> d154  [key=0, style=solid];
d153 -> d156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d161 -> d9  [key=2, style=dotted];
d161 -> d10  [key=2, style=dotted];
d161 -> d162  [key=0, style=solid];
d161 -> d164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d170 -> d9  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d170 -> d173  [key=2, style=dotted];
d170 -> d174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d170 -> d177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d191 -> d9  [key=2, style=dotted];
d191 -> d10  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d191 -> d195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d201 -> d9  [key=2, style=dotted];
d201 -> d10  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d201 -> d205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d210 -> d9  [key=2, style=dotted];
d210 -> d10  [key=2, style=dotted];
d210 -> d211  [key=0, style=solid];
d210 -> d213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d218 -> d9  [key=2, style=dotted];
d218 -> d10  [key=2, style=dotted];
d218 -> d219  [key=0, style=solid];
d218 -> d222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d227 -> d9  [key=2, style=dotted];
d227 -> d10  [key=2, style=dotted];
d227 -> d228  [key=0, style=solid];
d227 -> d230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d236 -> d9  [key=2, style=dotted];
d236 -> d10  [key=2, style=dotted];
d236 -> d237  [key=0, style=solid];
d236 -> d239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d244 -> d9  [key=2, style=dotted];
d244 -> d10  [key=2, style=dotted];
d244 -> d245  [key=0, style=solid];
d244 -> d248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d253 -> d9  [key=2, style=dotted];
d253 -> d10  [key=2, style=dotted];
d253 -> d254  [key=0, style=solid];
d253 -> d256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d261 -> d9  [key=2, style=dotted];
d261 -> d10  [key=2, style=dotted];
d261 -> d262  [key=0, style=solid];
d261 -> d264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d268 -> d9  [key=2, style=dotted];
d268 -> d10  [key=2, style=dotted];
d268 -> d269  [key=0, style=solid];
d268 -> d272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d277 -> d9  [key=2, style=dotted];
d277 -> d10  [key=2, style=dotted];
d277 -> d278  [key=0, style=solid];
d277 -> d280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d285 -> d9  [key=2, style=dotted];
d285 -> d10  [key=2, style=dotted];
d285 -> d286  [key=0, style=solid];
d285 -> d288  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d293 -> d9  [key=2, style=dotted];
d293 -> d10  [key=2, style=dotted];
d293 -> d294  [key=0, style=solid];
d293 -> d296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d301 -> d9  [key=2, style=dotted];
d301 -> d10  [key=2, style=dotted];
d301 -> d302  [key=0, style=solid];
d301 -> d304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d309 -> d9  [key=2, style=dotted];
d309 -> d10  [key=2, style=dotted];
d309 -> d310  [key=0, style=solid];
d309 -> d312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d316 -> d9  [key=2, style=dotted];
d316 -> d10  [key=2, style=dotted];
d316 -> d317  [key=0, style=solid];
d316 -> d322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d316 -> d318  [color=darkseagreen4, key=1, label=result, style=dashed];
d316 -> d319  [color=darkseagreen4, key=1, label=result, style=dashed];
d327 -> d9  [key=2, style=dotted];
d327 -> d10  [key=2, style=dotted];
d327 -> d328  [key=0, style=solid];
d327 -> d332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d327 -> d329  [color=darkseagreen4, key=1, label=result, style=dashed];
d327 -> d330  [color=darkseagreen4, key=1, label=result, style=dashed];
d341 -> d9  [key=2, style=dotted];
d341 -> d10  [key=2, style=dotted];
d341 -> d342  [key=0, style=solid];
d341 -> d343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d352 -> d9  [key=2, style=dotted];
d352 -> d10  [key=2, style=dotted];
d352 -> d353  [key=0, style=solid];
d352 -> d354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d363 -> d9  [key=2, style=dotted];
d363 -> d10  [key=2, style=dotted];
d363 -> d364  [key=0, style=solid];
d363 -> d365  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d370 -> d9  [key=2, style=dotted];
d370 -> d10  [key=2, style=dotted];
d370 -> d371  [key=0, style=solid];
d370 -> d375  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d383 -> d9  [key=2, style=dotted];
d383 -> d10  [key=2, style=dotted];
d383 -> d384  [key=0, style=solid];
d383 -> d386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d393 -> d9  [key=2, style=dotted];
d393 -> d10  [key=2, style=dotted];
d393 -> d394  [key=0, style=solid];
d393 -> d396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d401 -> d9  [key=2, style=dotted];
d401 -> d10  [key=2, style=dotted];
d401 -> d402  [key=0, style=solid];
d401 -> d404  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d408 -> d9  [key=2, style=dotted];
d408 -> d10  [key=2, style=dotted];
d408 -> d409  [key=0, style=solid];
d408 -> d411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d417 -> d9  [key=2, style=dotted];
d417 -> d10  [key=2, style=dotted];
d417 -> d418  [key=0, style=solid];
d417 -> d420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d424 -> d10  [key=2, style=dotted];
d424 -> d425  [key=0, style=solid];
d424 -> d427  [key=2, style=dotted];
d23 -> d21  [color=blue, key=0, style=bold];
d22 -> d23  [key=0, style=solid];
d22 -> d6  [key=2, style=dotted];
d26 -> d20  [key=2, style=dotted];
d26 -> d27  [key=0, style=solid];
d1 -> d3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [key=2, style=dotted];
d1 -> d14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d2 -> d3  [key=0, style=solid];
d2 -> d7  [key=2, style=dotted];
d2 -> d8  [key=2, style=dotted];
d2 -> d4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d4 -> d5  [key=0, style=solid];
d4 -> d11  [key=2, style=dotted];
d4 -> d12  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d24 -> d25  [key=0, style=solid];
d24 -> d26  [color=darkseagreen4, key=1, label=double, style=dashed];
d28 -> d29  [key=0, style=solid];
d32 -> d33  [key=0, style=solid];
d32 -> d34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d34 -> d35  [key=0, style=solid];
d34 -> d36  [key=2, style=dotted];
d34 -> d12  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d41 -> d42  [key=0, style=solid];
d41 -> d43  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d43 -> d44  [key=0, style=solid];
d43 -> d36  [key=2, style=dotted];
d43 -> d12  [key=2, style=dotted];
d45 -> d46  [key=0, style=solid];
d48 -> d49  [key=0, style=solid];
d48 -> d50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d50 -> d51  [key=0, style=solid];
d50 -> d36  [key=2, style=dotted];
d50 -> d12  [key=2, style=dotted];
d52 -> d53  [key=0, style=solid];
d56 -> d57  [key=0, style=solid];
d56 -> d58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d58 -> d59  [key=0, style=solid];
d58 -> d36  [key=2, style=dotted];
d58 -> d12  [key=2, style=dotted];
d60 -> d61  [key=0, style=solid];
d65 -> d66  [key=0, style=solid];
d65 -> d69  [key=2, style=dotted];
d65 -> d70  [key=2, style=dotted];
d65 -> d67  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d67 -> d68  [key=0, style=solid];
d67 -> d36  [key=2, style=dotted];
d67 -> d12  [key=2, style=dotted];
d71 -> d72  [key=0, style=solid];
d75 -> d76  [key=0, style=solid];
d75 -> d79  [key=2, style=dotted];
d75 -> d77  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d77 -> d78  [key=0, style=solid];
d77 -> d36  [key=2, style=dotted];
d77 -> d12  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d85 -> d86  [key=0, style=solid];
d85 -> d79  [key=2, style=dotted];
d85 -> d70  [key=2, style=dotted];
d85 -> d87  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d87 -> d88  [key=0, style=solid];
d87 -> d36  [key=2, style=dotted];
d87 -> d12  [key=2, style=dotted];
d89 -> d90  [key=0, style=solid];
d93 -> d94  [key=0, style=solid];
d93 -> d79  [key=2, style=dotted];
d93 -> d95  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d95 -> d96  [key=0, style=solid];
d95 -> d36  [key=2, style=dotted];
d95 -> d12  [key=2, style=dotted];
d97 -> d98  [key=0, style=solid];
d101 -> d102  [key=0, style=solid];
d101 -> d103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
d103 -> d103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
d103 -> d104  [key=0, style=solid];
d103 -> d105  [key=2, style=dotted];
d106 -> d107  [key=0, style=solid];
d111 -> d112  [key=0, style=solid];
d111 -> d115  [key=2, style=dotted];
d111 -> d70  [key=2, style=dotted];
d111 -> d113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d113 -> d114  [key=0, style=solid];
d113 -> d36  [key=2, style=dotted];
d113 -> d12  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d120 -> d121  [key=0, style=solid];
d120 -> d115  [key=2, style=dotted];
d120 -> d70  [key=2, style=dotted];
d120 -> d122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d122 -> d123  [key=0, style=solid];
d122 -> d36  [key=2, style=dotted];
d122 -> d12  [key=2, style=dotted];
d124 -> d125  [key=0, style=solid];
d128 -> d129  [key=0, style=solid];
d128 -> d115  [key=2, style=dotted];
d128 -> d70  [key=2, style=dotted];
d128 -> d130  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d130 -> d131  [key=0, style=solid];
d130 -> d36  [key=2, style=dotted];
d130 -> d12  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d136 -> d137  [key=0, style=solid];
d136 -> d140  [key=2, style=dotted];
d136 -> d138  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d138 -> d139  [key=0, style=solid];
d138 -> d105  [key=2, style=dotted];
d141 -> d142  [key=0, style=solid];
d144 -> d145  [key=0, style=solid];
d144 -> d146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
d146 -> d147  [key=0, style=solid];
d146 -> d105  [key=2, style=dotted];
d148 -> d149  [key=0, style=solid];
d152 -> d153  [key=0, style=solid];
d152 -> d154  [color=darkseagreen4, key=1, label="long[]", style=dashed];
d154 -> d155  [key=0, style=solid];
d154 -> d105  [key=2, style=dotted];
d156 -> d157  [key=0, style=solid];
d160 -> d161  [key=0, style=solid];
d160 -> d162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d162 -> d163  [key=0, style=solid];
d162 -> d105  [key=2, style=dotted];
d164 -> d165  [key=0, style=solid];
d169 -> d170  [key=0, style=solid];
d171 -> d172  [key=0, style=solid];
d171 -> d105  [key=2, style=dotted];
d174 -> d175  [key=0, style=solid];
d177 -> d178  [key=0, style=solid];
d177 -> d182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d177 -> d186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d190 -> d191  [key=0, style=solid];
d190 -> d194  [key=2, style=dotted];
d190 -> d70  [key=2, style=dotted];
d190 -> d192  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d192 -> d193  [key=0, style=solid];
d192 -> d36  [key=2, style=dotted];
d192 -> d12  [key=2, style=dotted];
d195 -> d196  [key=0, style=solid];
d200 -> d201  [key=0, style=solid];
d200 -> d204  [key=2, style=dotted];
d200 -> d202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d202 -> d203  [key=0, style=solid];
d202 -> d105  [key=2, style=dotted];
d205 -> d206  [key=0, style=solid];
d209 -> d210  [key=0, style=solid];
d209 -> d204  [key=2, style=dotted];
d209 -> d211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d211 -> d212  [key=0, style=solid];
d211 -> d105  [key=2, style=dotted];
d213 -> d214  [key=0, style=solid];
d217 -> d218  [key=0, style=solid];
d217 -> d221  [key=2, style=dotted];
d217 -> d70  [key=2, style=dotted];
d217 -> d219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d219 -> d220  [key=0, style=solid];
d219 -> d36  [key=2, style=dotted];
d219 -> d12  [key=2, style=dotted];
d222 -> d223  [key=0, style=solid];
d226 -> d227  [key=0, style=solid];
d226 -> d221  [key=2, style=dotted];
d226 -> d70  [key=2, style=dotted];
d226 -> d228  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d228 -> d229  [key=0, style=solid];
d228 -> d36  [key=2, style=dotted];
d228 -> d12  [key=2, style=dotted];
d230 -> d231  [key=0, style=solid];
d235 -> d236  [key=0, style=solid];
d235 -> d79  [key=2, style=dotted];
d235 -> d70  [key=2, style=dotted];
d235 -> d237  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d237 -> d238  [key=0, style=solid];
d237 -> d36  [key=2, style=dotted];
d237 -> d12  [key=2, style=dotted];
d239 -> d240  [key=0, style=solid];
d243 -> d244  [key=0, style=solid];
d243 -> d247  [key=2, style=dotted];
d243 -> d245  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d245 -> d246  [key=0, style=solid];
d245 -> d36  [key=2, style=dotted];
d245 -> d12  [key=2, style=dotted];
d248 -> d249  [key=0, style=solid];
d252 -> d253  [key=0, style=solid];
d252 -> d247  [key=2, style=dotted];
d252 -> d254  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d254 -> d255  [key=0, style=solid];
d254 -> d36  [key=2, style=dotted];
d254 -> d12  [key=2, style=dotted];
d256 -> d257  [key=0, style=solid];
d260 -> d261  [key=0, style=solid];
d260 -> d247  [key=2, style=dotted];
d260 -> d262  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d262 -> d263  [key=0, style=solid];
d262 -> d36  [key=2, style=dotted];
d262 -> d12  [key=2, style=dotted];
d264 -> d265  [key=0, style=solid];
d267 -> d268  [key=0, style=solid];
d267 -> d269  [color=darkseagreen4, key=1, label=string, style=dashed];
d269 -> d270  [key=0, style=solid];
d269 -> d271  [key=2, style=dotted];
d269 -> d12  [key=2, style=dotted];
d272 -> d273  [key=0, style=solid];
d276 -> d277  [key=0, style=solid];
d276 -> d221  [key=2, style=dotted];
d276 -> d278  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d278 -> d279  [key=0, style=solid];
d278 -> d36  [key=2, style=dotted];
d278 -> d12  [key=2, style=dotted];
d280 -> d281  [key=0, style=solid];
d284 -> d285  [key=0, style=solid];
d284 -> d286  [color=darkseagreen4, key=1, label=string, style=dashed];
d286 -> d287  [key=0, style=solid];
d286 -> d105  [key=2, style=dotted];
d288 -> d289  [key=0, style=solid];
d292 -> d293  [key=0, style=solid];
d292 -> d79  [key=2, style=dotted];
d292 -> d294  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d294 -> d295  [key=0, style=solid];
d294 -> d36  [key=2, style=dotted];
d294 -> d12  [key=2, style=dotted];
d296 -> d297  [key=0, style=solid];
d300 -> d301  [key=0, style=solid];
d300 -> d302  [color=darkseagreen4, key=1, label="int?", style=dashed];
d302 -> d303  [key=0, style=solid];
d302 -> d105  [key=2, style=dotted];
d304 -> d305  [key=0, style=solid];
d308 -> d309  [key=0, style=solid];
d308 -> d310  [color=darkseagreen4, key=1, label="long?", style=dashed];
d310 -> d311  [key=0, style=solid];
d310 -> d105  [key=2, style=dotted];
d312 -> d313  [key=0, style=solid];
d315 -> d316  [key=0, style=solid];
d315 -> d318  [color=darkseagreen4, key=1, label=string, style=dashed];
d315 -> d319  [color=darkseagreen4, key=1, label=bool, style=dashed];
d317 -> d318  [key=0, style=solid];
d317 -> d319  [key=0, style=solid];
d322 -> d323  [key=0, style=solid];
d318 -> d319  [key=0, style=solid];
d318 -> d105  [key=2, style=dotted];
d319 -> d320  [key=0, style=solid];
d319 -> d321  [key=2, style=dotted];
d319 -> d105  [key=2, style=dotted];
d326 -> d327  [key=0, style=solid];
d326 -> d329  [color=darkseagreen4, key=1, label=int, style=dashed];
d326 -> d330  [color=darkseagreen4, key=1, label=bool, style=dashed];
d328 -> d329  [key=0, style=solid];
d328 -> d330  [key=0, style=solid];
d332 -> d333  [key=0, style=solid];
d329 -> d330  [key=0, style=solid];
d329 -> d105  [key=2, style=dotted];
d330 -> d331  [key=0, style=solid];
d330 -> d321  [key=2, style=dotted];
d330 -> d105  [key=2, style=dotted];
d340 -> d341  [key=0, style=solid];
d342 -> d340  [color=blue, key=0, style=bold];
d343 -> d344  [key=0, style=solid];
d351 -> d352  [key=0, style=solid];
d353 -> d351  [color=blue, key=0, style=bold];
d354 -> d355  [key=0, style=solid];
d362 -> d363  [key=0, style=solid];
d364 -> d362  [color=blue, key=0, style=bold];
d365 -> d366  [key=0, style=solid];
d369 -> d370  [key=0, style=solid];
d369 -> d371  [color=darkseagreen4, key=1, label=int, style=dashed];
d369 -> d380  [color=darkseagreen4, key=1, label=int, style=dashed];
d371 -> d372  [key=0, style=solid];
d371 -> d373  [key=2, style=dotted];
d371 -> d374  [key=2, style=dotted];
d371 -> d379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d375 -> d376  [key=0, style=solid];
d382 -> d383  [key=0, style=solid];
d382 -> d384  [color=darkseagreen4, key=1, label=int, style=dashed];
d382 -> d390  [color=darkseagreen4, key=1, label=int, style=dashed];
d384 -> d385  [key=0, style=solid];
d384 -> d373  [key=2, style=dotted];
d384 -> d374  [key=2, style=dotted];
d384 -> d389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d386 -> d387  [key=0, style=solid];
d392 -> d393  [key=0, style=solid];
d392 -> d394  [color=darkseagreen4, key=1, label=string, style=dashed];
d394 -> d395  [key=0, style=solid];
d394 -> d105  [key=2, style=dotted];
d396 -> d397  [key=0, style=solid];
d400 -> d401  [key=0, style=solid];
d400 -> d402  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
d402 -> d403  [key=0, style=solid];
d402 -> d105  [key=2, style=dotted];
d404 -> d405  [key=0, style=solid];
d407 -> d408  [key=0, style=solid];
d407 -> d409  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
d409 -> d410  [key=0, style=solid];
d409 -> d105  [key=2, style=dotted];
d411 -> d412  [key=0, style=solid];
d416 -> d417  [key=0, style=solid];
d416 -> d6  [key=2, style=dotted];
d416 -> d418  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d418 -> d419  [key=0, style=solid];
d418 -> d105  [key=2, style=dotted];
d420 -> d421  [key=0, style=solid];
d423 -> d424  [key=0, style=solid];
d423 -> d425  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeImmutableOptions", style=dashed];
d425 -> d426  [key=0, style=solid];
d425 -> d105  [key=2, style=dotted];
d27 -> d24  [color=blue, key=0, style=bold];
d0 -> d1  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d5 -> d0  [color=blue, key=0, style=bold];
d15 -> d13  [color=blue, key=0, style=bold];
d30 -> d28  [color=blue, key=0, style=bold];
d29 -> d30  [key=0, style=solid];
d29 -> d31  [key=2, style=dotted];
d35 -> d32  [color=blue, key=0, style=bold];
d39 -> d37  [color=blue, key=0, style=bold];
d38 -> d39  [key=0, style=solid];
d38 -> d40  [key=2, style=dotted];
d44 -> d41  [color=blue, key=0, style=bold];
d47 -> d45  [color=blue, key=0, style=bold];
d46 -> d6  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d51 -> d48  [color=blue, key=0, style=bold];
d54 -> d52  [color=blue, key=0, style=bold];
d53 -> d54  [key=0, style=solid];
d53 -> d55  [key=2, style=dotted];
d59 -> d56  [color=blue, key=0, style=bold];
d62 -> d60  [color=blue, key=0, style=bold];
d61 -> d62  [key=0, style=solid];
d61 -> d63  [key=2, style=dotted];
d64 -> d65  [key=0, style=solid];
d68 -> d64  [color=blue, key=0, style=bold];
d73 -> d71  [color=blue, key=0, style=bold];
d72 -> d73  [key=0, style=solid];
d72 -> d55  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d78 -> d74  [color=blue, key=0, style=bold];
d82 -> d80  [color=blue, key=0, style=bold];
d81 -> d82  [key=0, style=solid];
d81 -> d83  [key=2, style=dotted];
d84 -> d85  [key=0, style=solid];
d88 -> d84  [color=blue, key=0, style=bold];
d91 -> d89  [color=blue, key=0, style=bold];
d90 -> d91  [key=0, style=solid];
d90 -> d63  [key=2, style=dotted];
d92 -> d93  [key=0, style=solid];
d96 -> d92  [color=blue, key=0, style=bold];
d99 -> d97  [color=blue, key=0, style=bold];
d98 -> d99  [key=0, style=solid];
d98 -> d100  [key=2, style=dotted];
d104 -> d101  [color=blue, key=0, style=bold];
d108 -> d106  [color=blue, key=0, style=bold];
d107 -> d108  [key=0, style=solid];
d107 -> d109  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d114 -> d110  [color=blue, key=0, style=bold];
d118 -> d116  [color=blue, key=0, style=bold];
d117 -> d118  [key=0, style=solid];
d117 -> d109  [key=2, style=dotted];
d119 -> d120  [key=0, style=solid];
d123 -> d119  [color=blue, key=0, style=bold];
d126 -> d124  [color=blue, key=0, style=bold];
d125 -> d126  [key=0, style=solid];
d125 -> d109  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d131 -> d127  [color=blue, key=0, style=bold];
d134 -> d132  [color=blue, key=0, style=bold];
d133 -> d134  [key=0, style=solid];
d133 -> d109  [key=2, style=dotted];
d135 -> d136  [key=0, style=solid];
d139 -> d135  [color=blue, key=0, style=bold];
d143 -> d141  [color=blue, key=0, style=bold];
d142 -> d140  [key=2, style=dotted];
d142 -> d143  [key=0, style=solid];
d147 -> d144  [color=blue, key=0, style=bold];
d150 -> d148  [color=blue, key=0, style=bold];
d149 -> d150  [key=0, style=solid];
d149 -> d151  [key=2, style=dotted];
d155 -> d152  [color=blue, key=0, style=bold];
d158 -> d156  [color=blue, key=0, style=bold];
d157 -> d158  [key=0, style=solid];
d157 -> d159  [key=2, style=dotted];
d163 -> d160  [color=blue, key=0, style=bold];
d166 -> d164  [color=blue, key=0, style=bold];
d165 -> d166  [key=0, style=solid];
d165 -> d159  [key=2, style=dotted];
d168 -> d169  [key=0, style=solid];
d168 -> d171  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d168 -> d140  [key=2, style=dotted];
d172 -> d167  [color=blue, key=0, style=bold];
d176 -> d174  [color=blue, key=0, style=bold];
d175 -> d140  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d179 -> d177  [color=blue, key=0, style=bold];
d178 -> d179  [key=0, style=solid];
d178 -> d180  [key=2, style=dotted];
d178 -> d181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d182 -> d183  [key=0, style=solid];
d182 -> d184  [key=2, style=dotted];
d182 -> d185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d186 -> d187  [key=0, style=solid];
d186 -> d188  [key=2, style=dotted];
d189 -> d190  [key=0, style=solid];
d193 -> d189  [color=blue, key=0, style=bold];
d197 -> d195  [color=blue, key=0, style=bold];
d196 -> d197  [key=0, style=solid];
d196 -> d198  [key=2, style=dotted];
d199 -> d200  [key=0, style=solid];
d203 -> d199  [color=blue, key=0, style=bold];
d207 -> d205  [color=blue, key=0, style=bold];
d206 -> d204  [key=2, style=dotted];
d206 -> d207  [key=0, style=solid];
d208 -> d209  [key=0, style=solid];
d212 -> d208  [color=blue, key=0, style=bold];
d215 -> d213  [color=blue, key=0, style=bold];
d214 -> d204  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d216 -> d217  [key=0, style=solid];
d220 -> d216  [color=blue, key=0, style=bold];
d224 -> d222  [color=blue, key=0, style=bold];
d223 -> d204  [key=2, style=dotted];
d223 -> d224  [key=0, style=solid];
d225 -> d226  [key=0, style=solid];
d229 -> d225  [color=blue, key=0, style=bold];
d232 -> d230  [color=blue, key=0, style=bold];
d231 -> d232  [key=0, style=solid];
d231 -> d233  [key=2, style=dotted];
d234 -> d235  [key=0, style=solid];
d238 -> d234  [color=blue, key=0, style=bold];
d241 -> d239  [color=blue, key=0, style=bold];
d240 -> d6  [key=2, style=dotted];
d240 -> d241  [key=0, style=solid];
d242 -> d243  [key=0, style=solid];
d246 -> d242  [color=blue, key=0, style=bold];
d250 -> d248  [color=blue, key=0, style=bold];
d249 -> d6  [key=2, style=dotted];
d249 -> d250  [key=0, style=solid];
d251 -> d252  [key=0, style=solid];
d255 -> d251  [color=blue, key=0, style=bold];
d258 -> d256  [color=blue, key=0, style=bold];
d257 -> d6  [key=2, style=dotted];
d257 -> d258  [key=0, style=solid];
d259 -> d260  [key=0, style=solid];
d263 -> d259  [color=blue, key=0, style=bold];
d266 -> d264  [color=blue, key=0, style=bold];
d265 -> d6  [key=2, style=dotted];
d265 -> d266  [key=0, style=solid];
d270 -> d267  [color=blue, key=0, style=bold];
d274 -> d272  [color=blue, key=0, style=bold];
d273 -> d6  [key=2, style=dotted];
d273 -> d274  [key=0, style=solid];
d275 -> d276  [key=0, style=solid];
d279 -> d275  [color=blue, key=0, style=bold];
d282 -> d280  [color=blue, key=0, style=bold];
d281 -> d282  [key=0, style=solid];
d281 -> d283  [key=2, style=dotted];
d287 -> d284  [color=blue, key=0, style=bold];
d290 -> d288  [color=blue, key=0, style=bold];
d289 -> d6  [key=2, style=dotted];
d289 -> d290  [key=0, style=solid];
d291 -> d292  [key=0, style=solid];
d295 -> d291  [color=blue, key=0, style=bold];
d298 -> d296  [color=blue, key=0, style=bold];
d297 -> d298  [key=0, style=solid];
d297 -> d299  [key=2, style=dotted];
d303 -> d300  [color=blue, key=0, style=bold];
d306 -> d304  [color=blue, key=0, style=bold];
d305 -> d306  [key=0, style=solid];
d305 -> d307  [key=2, style=dotted];
d311 -> d308  [color=blue, key=0, style=bold];
d314 -> d312  [color=blue, key=0, style=bold];
d313 -> d314  [key=0, style=solid];
d313 -> d307  [key=2, style=dotted];
d320 -> d315  [color=blue, key=0, style=bold];
d324 -> d322  [color=blue, key=0, style=bold];
d323 -> d324  [key=0, style=solid];
d323 -> d325  [key=2, style=dotted];
d331 -> d326  [color=blue, key=0, style=bold];
d334 -> d332  [color=blue, key=0, style=bold];
d333 -> d334  [key=0, style=solid];
d333 -> d325  [key=2, style=dotted];
d345 -> d343  [color=blue, key=0, style=bold];
d344 -> d345  [key=0, style=solid];
d344 -> d346  [key=2, style=dotted];
d356 -> d354  [color=blue, key=0, style=bold];
d355 -> d356  [key=0, style=solid];
d355 -> d357  [key=2, style=dotted];
d367 -> d365  [color=blue, key=0, style=bold];
d366 -> d367  [key=0, style=solid];
d366 -> d368  [key=2, style=dotted];
d372 -> d369  [color=blue, key=0, style=bold];
d380 -> d381  [key=0, style=solid];
d379 -> d380  [key=0, style=solid];
d377 -> d375  [color=blue, key=0, style=bold];
d376 -> d377  [key=0, style=solid];
d376 -> d378  [key=2, style=dotted];
d385 -> d382  [color=blue, key=0, style=bold];
d390 -> d391  [key=0, style=solid];
d389 -> d390  [key=0, style=solid];
d388 -> d386  [color=blue, key=0, style=bold];
d387 -> d6  [key=2, style=dotted];
d387 -> d388  [key=0, style=solid];
d395 -> d392  [color=blue, key=0, style=bold];
d398 -> d396  [color=blue, key=0, style=bold];
d397 -> d398  [key=0, style=solid];
d397 -> d399  [key=2, style=dotted];
d403 -> d400  [color=blue, key=0, style=bold];
d406 -> d404  [color=blue, key=0, style=bold];
d405 -> d406  [key=0, style=solid];
d405 -> d283  [key=2, style=dotted];
d410 -> d407  [color=blue, key=0, style=bold];
d413 -> d411  [color=blue, key=0, style=bold];
d412 -> d413  [key=0, style=solid];
d412 -> d414  [key=2, style=dotted];
d415 -> d416  [key=0, style=solid];
d419 -> d415  [color=blue, key=0, style=bold];
d422 -> d420  [color=blue, key=0, style=bold];
d421 -> d6  [key=2, style=dotted];
d421 -> d422  [key=0, style=solid];
d426 -> d423  [color=blue, key=0, style=bold];
d428 -> d14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d167 -> d168  [key=0, style=solid];
d181 -> d182  [key=0, style=solid];
d429 -> d182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d429 -> d186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d183 -> d181  [color=blue, key=0, style=bold];
d185 -> d186  [key=0, style=solid];
d187 -> d185  [color=blue, key=0, style=bold];
d430 -> d380  [color=darkseagreen4, key=1, label=int, style=dashed];
d381 -> d379  [color=blue, key=0, style=bold];
d431 -> d390  [color=darkseagreen4, key=1, label=int, style=dashed];
d391 -> d389  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_2 -> m0_3  [color=green, key=0, style=solid];
m0_2 -> m0_7  [color=green, key=2, style=dotted];
m0_2 -> d427  [color=green, key=2, style=dotted];
m0_2 -> m0_9  [color=green, key=2, style=dotted];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_0  [color=blue, key=0, style=bold];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_9  [key=2, style=dotted];
m4_42 -> m4_10  [key=2, style=dotted];
m4_42 -> m4_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_43 -> d44  [key=0, style=solid];
m4_43 -> m4_36  [key=2, style=dotted];
m4_43 -> m4_12  [key=2, style=dotted];
m4_358 -> m4_359  [key=0, style=solid];
m4_359 -> m4_360  [key=0, style=solid];
m4_360 -> m4_361  [key=0, style=solid];
m4_360 -> m4_339  [key=2, style=dotted];
m4_361 -> m4_358  [color=blue, key=0, style=bold];
m4_152 -> m4_153  [key=0, style=solid];
m4_152 -> m4_154  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m4_153 -> m4_154  [key=0, style=solid];
m4_153 -> m4_9  [key=2, style=dotted];
m4_153 -> m4_10  [key=2, style=dotted];
m4_153 -> m4_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_154 -> m4_155  [key=0, style=solid];
m4_154 -> m4_105  [key=2, style=dotted];
m4_155 -> m4_152  [color=blue, key=0, style=bold];
m4_267 -> m4_268  [key=0, style=solid];
m4_267 -> m4_269  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_268 -> m4_269  [key=0, style=solid];
m4_268 -> m4_9  [key=2, style=dotted];
m4_268 -> m4_10  [key=2, style=dotted];
m4_268 -> m4_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_269 -> m4_270  [key=0, style=solid];
m4_269 -> m4_271  [key=2, style=dotted];
m4_269 -> m4_12  [key=2, style=dotted];
m4_270 -> m4_267  [color=blue, key=0, style=bold];
m4_335 -> m4_336  [key=0, style=solid];
m4_336 -> m4_337  [key=0, style=solid];
m4_337 -> m4_338  [key=0, style=solid];
m4_337 -> m4_339  [key=2, style=dotted];
m4_338 -> m4_335  [color=blue, key=0, style=bold];
m4_308 -> m4_309  [key=0, style=solid];
m4_308 -> m4_310  [color=darkseagreen4, key=1, label="long?", style=dashed];
m4_309 -> m4_310  [key=0, style=solid];
m4_309 -> m4_9  [key=2, style=dotted];
m4_309 -> m4_10  [key=2, style=dotted];
m4_309 -> m4_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_310 -> m4_311  [key=0, style=solid];
m4_310 -> m4_105  [key=2, style=dotted];
m4_311 -> m4_308  [color=blue, key=0, style=bold];
m4_167 -> m4_168  [key=0, style=solid];
m4_168 -> m4_169  [key=0, style=solid];
m4_168 -> m4_140  [key=2, style=dotted];
m4_168 -> m4_171  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_169 -> m4_170  [key=0, style=solid];
m4_171 -> m4_172  [key=0, style=solid];
m4_171 -> m4_105  [key=2, style=dotted];
m4_170 -> m4_171  [key=0, style=solid];
m4_170 -> m4_9  [key=2, style=dotted];
m4_170 -> m4_173  [key=2, style=dotted];
m4_170 -> m4_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_170 -> m4_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_172 -> m4_167  [color=blue, key=0, style=bold];
m4_259 -> m4_260  [key=0, style=solid];
m4_260 -> m4_261  [key=0, style=solid];
m4_260 -> m4_247  [key=2, style=dotted];
m4_260 -> m4_262  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_261 -> m4_262  [key=0, style=solid];
m4_261 -> m4_9  [key=2, style=dotted];
m4_261 -> m4_10  [key=2, style=dotted];
m4_261 -> m4_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_262 -> m4_263  [key=0, style=solid];
m4_262 -> m4_36  [key=2, style=dotted];
m4_262 -> m4_12  [key=2, style=dotted];
m4_263 -> m4_259  [color=blue, key=0, style=bold];
m4_395 -> m4_396  [key=0, style=solid];
m4_395 -> m4_397  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_396 -> m4_397  [key=0, style=solid];
m4_396 -> m4_9  [key=2, style=dotted];
m4_396 -> m4_10  [key=2, style=dotted];
m4_396 -> m4_399  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_397 -> m4_398  [key=0, style=solid];
m4_397 -> m4_105  [key=2, style=dotted];
m4_398 -> m4_395  [color=blue, key=0, style=bold];
m4_74 -> m4_75  [key=0, style=solid];
m4_75 -> m4_76  [key=0, style=solid];
m4_75 -> m4_79  [key=2, style=dotted];
m4_75 -> m4_77  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> m4_9  [key=2, style=dotted];
m4_76 -> m4_10  [key=2, style=dotted];
m4_76 -> m4_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_77 -> m4_78  [key=0, style=solid];
m4_77 -> m4_36  [key=2, style=dotted];
m4_77 -> m4_12  [key=2, style=dotted];
m4_78 -> m4_74  [color=blue, key=0, style=bold];
m4_92 -> m4_93  [key=0, style=solid];
m4_93 -> m4_94  [key=0, style=solid];
m4_93 -> m4_79  [key=2, style=dotted];
m4_93 -> m4_95  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_94 -> m4_95  [key=0, style=solid];
m4_94 -> m4_9  [key=2, style=dotted];
m4_94 -> m4_10  [key=2, style=dotted];
m4_94 -> m4_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_95 -> m4_96  [key=0, style=solid];
m4_95 -> m4_36  [key=2, style=dotted];
m4_95 -> m4_12  [key=2, style=dotted];
m4_96 -> m4_92  [color=blue, key=0, style=bold];
m4_315 -> m4_316  [key=0, style=solid];
m4_315 -> m4_318  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_315 -> m4_319  [color=darkseagreen4, key=1, label=bool, style=dashed];
m4_316 -> m4_317  [key=0, style=solid];
m4_316 -> m4_9  [key=2, style=dotted];
m4_316 -> m4_10  [key=2, style=dotted];
m4_316 -> m4_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_316 -> m4_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_316 -> m4_319  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_318 -> m4_319  [key=0, style=solid];
m4_318 -> m4_105  [key=2, style=dotted];
m4_319 -> m4_320  [key=0, style=solid];
m4_319 -> m4_321  [key=2, style=dotted];
m4_319 -> m4_105  [key=2, style=dotted];
m4_317 -> m4_318  [key=0, style=solid];
m4_317 -> m4_319  [key=0, style=solid];
m4_320 -> m4_315  [color=blue, key=0, style=bold];
m4_426 -> m4_427  [key=0, style=solid];
m4_426 -> m4_429  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_426 -> m4_437  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_427 -> m4_428  [key=0, style=solid];
m4_427 -> m4_9  [key=2, style=dotted];
m4_427 -> m4_10  [key=2, style=dotted];
m4_427 -> m4_432  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_429 -> m4_430  [key=0, style=solid];
m4_429 -> m4_431  [key=2, style=dotted];
m4_429 -> m4_376  [key=2, style=dotted];
m4_429 -> m4_377  [key=2, style=dotted];
m4_429 -> m4_436  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_428 -> m4_429  [key=0, style=solid];
m4_430 -> m4_426  [color=blue, key=0, style=bold];
m4_251 -> m4_252  [key=0, style=solid];
m4_252 -> m4_253  [key=0, style=solid];
m4_252 -> m4_247  [key=2, style=dotted];
m4_252 -> m4_254  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_253 -> m4_254  [key=0, style=solid];
m4_253 -> m4_9  [key=2, style=dotted];
m4_253 -> m4_10  [key=2, style=dotted];
m4_253 -> m4_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_254 -> m4_255  [key=0, style=solid];
m4_254 -> m4_36  [key=2, style=dotted];
m4_254 -> m4_12  [key=2, style=dotted];
m4_255 -> m4_251  [color=blue, key=0, style=bold];
m4_110 -> m4_111  [key=0, style=solid];
m4_111 -> m4_112  [key=0, style=solid];
m4_111 -> m4_115  [key=2, style=dotted];
m4_111 -> m4_70  [key=2, style=dotted];
m4_111 -> m4_113  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_112 -> m4_113  [key=0, style=solid];
m4_112 -> m4_9  [key=2, style=dotted];
m4_112 -> m4_10  [key=2, style=dotted];
m4_112 -> m4_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_113 -> m4_114  [key=0, style=solid];
m4_113 -> m4_36  [key=2, style=dotted];
m4_113 -> m4_12  [key=2, style=dotted];
m4_114 -> m4_110  [color=blue, key=0, style=bold];
m4_410 -> m4_411  [key=0, style=solid];
m4_410 -> m4_412  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m4_411 -> m4_412  [key=0, style=solid];
m4_411 -> m4_9  [key=2, style=dotted];
m4_411 -> m4_10  [key=2, style=dotted];
m4_411 -> m4_414  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_412 -> m4_413  [key=0, style=solid];
m4_412 -> m4_105  [key=2, style=dotted];
m4_413 -> m4_410  [color=blue, key=0, style=bold];
m4_144 -> m4_145  [key=0, style=solid];
m4_144 -> m4_146  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m4_145 -> m4_146  [key=0, style=solid];
m4_145 -> m4_9  [key=2, style=dotted];
m4_145 -> m4_10  [key=2, style=dotted];
m4_145 -> m4_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_146 -> m4_147  [key=0, style=solid];
m4_146 -> m4_105  [key=2, style=dotted];
m4_147 -> m4_144  [color=blue, key=0, style=bold];
m4_56 -> m4_57  [key=0, style=solid];
m4_56 -> m4_58  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_57 -> m4_58  [key=0, style=solid];
m4_57 -> m4_9  [key=2, style=dotted];
m4_57 -> m4_10  [key=2, style=dotted];
m4_57 -> m4_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> m4_36  [key=2, style=dotted];
m4_58 -> m4_12  [key=2, style=dotted];
m4_59 -> m4_56  [color=blue, key=0, style=bold];
m4_369 -> m4_370  [key=0, style=solid];
m4_369 -> m4_371  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m4_369 -> m4_372  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_369 -> m4_383  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_369 -> m4_373  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
m4_370 -> m4_371  [key=0, style=solid];
m4_370 -> m4_9  [key=2, style=dotted];
m4_370 -> m4_10  [key=2, style=dotted];
m4_370 -> m4_378  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_370 -> m4_372  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_370 -> m4_374  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_371 -> m4_372  [key=0, style=solid];
m4_371 -> m4_373  [key=0, style=solid];
m4_372 -> m4_375  [key=0, style=solid];
m4_372 -> m4_376  [key=2, style=dotted];
m4_372 -> m4_377  [key=2, style=dotted];
m4_372 -> m4_382  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_373 -> m4_374  [key=0, style=solid];
m4_373 -> m4_375  [key=0, style=solid];
m4_374 -> m4_375  [key=0, style=solid];
m4_374 -> m4_376  [key=2, style=dotted];
m4_374 -> m4_339  [key=2, style=dotted];
m4_375 -> m4_369  [color=blue, key=0, style=bold];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_34  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m4_33 -> m4_34  [key=0, style=solid];
m4_33 -> m4_9  [key=2, style=dotted];
m4_33 -> m4_10  [key=2, style=dotted];
m4_33 -> m4_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_36  [key=2, style=dotted];
m4_34 -> m4_12  [key=2, style=dotted];
m4_35 -> m4_32  [color=blue, key=0, style=bold];
m4_436 -> m4_437  [key=0, style=solid];
m4_14 -> m4_15  [key=0, style=solid];
m4_13 -> m4_14  [key=0, style=solid];
m4_15 -> m4_13  [color=blue, key=0, style=bold];
m4_21 -> m4_22  [key=0, style=solid];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_6  [key=2, style=dotted];
m4_23 -> m4_21  [color=blue, key=0, style=bold];
m4_28 -> m4_29  [key=0, style=solid];
m4_29 -> m4_30  [key=0, style=solid];
m4_29 -> m4_31  [key=2, style=dotted];
m4_30 -> m4_28  [color=blue, key=0, style=bold];
m4_37 -> m4_38  [key=0, style=solid];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_40  [key=2, style=dotted];
m4_39 -> m4_37  [color=blue, key=0, style=bold];
m4_45 -> m4_46  [key=0, style=solid];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_6  [key=2, style=dotted];
m4_47 -> m4_45  [color=blue, key=0, style=bold];
m4_52 -> m4_53  [key=0, style=solid];
m4_53 -> m4_54  [key=0, style=solid];
m4_53 -> m4_55  [key=2, style=dotted];
m4_54 -> m4_52  [color=blue, key=0, style=bold];
m4_60 -> m4_61  [key=0, style=solid];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_63  [key=2, style=dotted];
m4_62 -> m4_60  [color=blue, key=0, style=bold];
m4_71 -> m4_72  [key=0, style=solid];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_55  [key=2, style=dotted];
m4_73 -> m4_71  [color=blue, key=0, style=bold];
m4_80 -> m4_81  [key=0, style=solid];
m4_81 -> m4_82  [key=0, style=solid];
m4_81 -> m4_83  [key=2, style=dotted];
m4_82 -> m4_80  [color=blue, key=0, style=bold];
m4_89 -> m4_90  [key=0, style=solid];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_63  [key=2, style=dotted];
m4_91 -> m4_89  [color=blue, key=0, style=bold];
m4_97 -> m4_98  [key=0, style=solid];
m4_98 -> m4_99  [key=0, style=solid];
m4_98 -> m4_100  [key=2, style=dotted];
m4_99 -> m4_97  [color=blue, key=0, style=bold];
m4_106 -> m4_107  [key=0, style=solid];
m4_107 -> m4_108  [key=0, style=solid];
m4_107 -> m4_109  [key=2, style=dotted];
m4_108 -> m4_106  [color=blue, key=0, style=bold];
m4_116 -> m4_117  [key=0, style=solid];
m4_117 -> m4_118  [key=0, style=solid];
m4_117 -> m4_109  [key=2, style=dotted];
m4_118 -> m4_116  [color=blue, key=0, style=bold];
m4_124 -> m4_125  [key=0, style=solid];
m4_125 -> m4_126  [key=0, style=solid];
m4_125 -> m4_109  [key=2, style=dotted];
m4_126 -> m4_124  [color=blue, key=0, style=bold];
m4_132 -> m4_133  [key=0, style=solid];
m4_133 -> m4_134  [key=0, style=solid];
m4_133 -> m4_109  [key=2, style=dotted];
m4_134 -> m4_132  [color=blue, key=0, style=bold];
m4_141 -> m4_142  [key=0, style=solid];
m4_142 -> m4_143  [key=0, style=solid];
m4_142 -> m4_140  [key=2, style=dotted];
m4_143 -> m4_141  [color=blue, key=0, style=bold];
m4_148 -> m4_149  [key=0, style=solid];
m4_149 -> m4_150  [key=0, style=solid];
m4_149 -> m4_151  [key=2, style=dotted];
m4_150 -> m4_148  [color=blue, key=0, style=bold];
m4_156 -> m4_157  [key=0, style=solid];
m4_157 -> m4_158  [key=0, style=solid];
m4_157 -> m4_159  [key=2, style=dotted];
m4_158 -> m4_156  [color=blue, key=0, style=bold];
m4_164 -> m4_165  [key=0, style=solid];
m4_165 -> m4_166  [key=0, style=solid];
m4_165 -> m4_159  [key=2, style=dotted];
m4_166 -> m4_164  [color=blue, key=0, style=bold];
m4_174 -> m4_175  [key=0, style=solid];
m4_177 -> m4_178  [key=0, style=solid];
m4_177 -> m4_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_177 -> m4_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_175 -> m4_176  [key=0, style=solid];
m4_175 -> m4_140  [key=2, style=dotted];
m4_176 -> m4_174  [color=blue, key=0, style=bold];
m4_178 -> m4_179  [key=0, style=solid];
m4_178 -> m4_180  [key=2, style=dotted];
m4_178 -> m4_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_182 -> m4_183  [key=0, style=solid];
m4_182 -> m4_184  [key=2, style=dotted];
m4_182 -> m4_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_186 -> m4_187  [key=0, style=solid];
m4_186 -> m4_188  [key=2, style=dotted];
m4_179 -> m4_177  [color=blue, key=0, style=bold];
m4_181 -> m4_182  [key=0, style=solid];
m4_183 -> m4_181  [color=blue, key=0, style=bold];
m4_185 -> m4_186  [key=0, style=solid];
m4_187 -> m4_185  [color=blue, key=0, style=bold];
m4_195 -> m4_196  [key=0, style=solid];
m4_196 -> m4_197  [key=0, style=solid];
m4_196 -> m4_198  [key=2, style=dotted];
m4_197 -> m4_195  [color=blue, key=0, style=bold];
m4_205 -> m4_206  [key=0, style=solid];
m4_206 -> m4_207  [key=0, style=solid];
m4_206 -> m4_204  [key=2, style=dotted];
m4_207 -> m4_205  [color=blue, key=0, style=bold];
m4_213 -> m4_214  [key=0, style=solid];
m4_214 -> m4_215  [key=0, style=solid];
m4_214 -> m4_204  [key=2, style=dotted];
m4_215 -> m4_213  [color=blue, key=0, style=bold];
m4_222 -> m4_223  [key=0, style=solid];
m4_223 -> m4_224  [key=0, style=solid];
m4_223 -> m4_204  [key=2, style=dotted];
m4_224 -> m4_222  [color=blue, key=0, style=bold];
m4_230 -> m4_231  [key=0, style=solid];
m4_231 -> m4_232  [key=0, style=solid];
m4_231 -> m4_233  [key=2, style=dotted];
m4_232 -> m4_230  [color=blue, key=0, style=bold];
m4_239 -> m4_240  [key=0, style=solid];
m4_240 -> m4_241  [key=0, style=solid];
m4_240 -> m4_6  [key=2, style=dotted];
m4_241 -> m4_239  [color=blue, key=0, style=bold];
m4_248 -> m4_249  [key=0, style=solid];
m4_249 -> m4_250  [key=0, style=solid];
m4_249 -> m4_6  [key=2, style=dotted];
m4_250 -> m4_248  [color=blue, key=0, style=bold];
m4_256 -> m4_257  [key=0, style=solid];
m4_257 -> m4_258  [key=0, style=solid];
m4_257 -> m4_6  [key=2, style=dotted];
m4_258 -> m4_256  [color=blue, key=0, style=bold];
m4_264 -> m4_265  [key=0, style=solid];
m4_265 -> m4_266  [key=0, style=solid];
m4_265 -> m4_6  [key=2, style=dotted];
m4_266 -> m4_264  [color=blue, key=0, style=bold];
m4_272 -> m4_273  [key=0, style=solid];
m4_273 -> m4_274  [key=0, style=solid];
m4_273 -> m4_6  [key=2, style=dotted];
m4_274 -> m4_272  [color=blue, key=0, style=bold];
m4_280 -> m4_281  [key=0, style=solid];
m4_281 -> m4_282  [key=0, style=solid];
m4_281 -> m4_283  [key=2, style=dotted];
m4_282 -> m4_280  [color=blue, key=0, style=bold];
m4_288 -> m4_289  [key=0, style=solid];
m4_289 -> m4_290  [key=0, style=solid];
m4_289 -> m4_6  [key=2, style=dotted];
m4_290 -> m4_288  [color=blue, key=0, style=bold];
m4_296 -> m4_297  [key=0, style=solid];
m4_297 -> m4_298  [key=0, style=solid];
m4_297 -> m4_299  [key=2, style=dotted];
m4_298 -> m4_296  [color=blue, key=0, style=bold];
m4_304 -> m4_305  [key=0, style=solid];
m4_305 -> m4_306  [key=0, style=solid];
m4_305 -> m4_307  [key=2, style=dotted];
m4_306 -> m4_304  [color=blue, key=0, style=bold];
m4_312 -> m4_313  [key=0, style=solid];
m4_313 -> m4_314  [key=0, style=solid];
m4_313 -> m4_307  [key=2, style=dotted];
m4_314 -> m4_312  [color=blue, key=0, style=bold];
m4_322 -> m4_323  [key=0, style=solid];
m4_323 -> m4_324  [key=0, style=solid];
m4_323 -> m4_325  [key=2, style=dotted];
m4_324 -> m4_322  [color=blue, key=0, style=bold];
m4_332 -> m4_333  [key=0, style=solid];
m4_333 -> m4_334  [key=0, style=solid];
m4_333 -> m4_325  [key=2, style=dotted];
m4_334 -> m4_332  [color=blue, key=0, style=bold];
m4_340 -> m4_341  [key=0, style=solid];
m4_341 -> m4_342  [key=0, style=solid];
m4_341 -> m4_9  [key=2, style=dotted];
m4_341 -> m4_10  [key=2, style=dotted];
m4_341 -> m4_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_342 -> m4_340  [color=blue, key=0, style=bold];
m4_343 -> m4_344  [key=0, style=solid];
m4_344 -> m4_345  [key=0, style=solid];
m4_344 -> m4_346  [key=2, style=dotted];
m4_345 -> m4_343  [color=blue, key=0, style=bold];
m4_351 -> m4_352  [key=0, style=solid];
m4_352 -> m4_353  [key=0, style=solid];
m4_352 -> m4_9  [key=2, style=dotted];
m4_352 -> m4_10  [key=2, style=dotted];
m4_352 -> m4_354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_353 -> m4_351  [color=blue, key=0, style=bold];
m4_354 -> m4_355  [key=0, style=solid];
m4_355 -> m4_356  [key=0, style=solid];
m4_355 -> m4_357  [key=2, style=dotted];
m4_356 -> m4_354  [color=blue, key=0, style=bold];
m4_362 -> m4_363  [key=0, style=solid];
m4_363 -> m4_364  [key=0, style=solid];
m4_363 -> m4_9  [key=2, style=dotted];
m4_363 -> m4_10  [key=2, style=dotted];
m4_363 -> m4_365  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_364 -> m4_362  [color=blue, key=0, style=bold];
m4_365 -> m4_366  [key=0, style=solid];
m4_366 -> m4_367  [key=0, style=solid];
m4_366 -> m4_368  [key=2, style=dotted];
m4_367 -> m4_365  [color=blue, key=0, style=bold];
m4_383 -> m4_384  [key=0, style=solid];
m4_378 -> m4_379  [key=0, style=solid];
m4_382 -> m4_383  [key=0, style=solid];
m4_379 -> m4_380  [key=0, style=solid];
m4_379 -> m4_381  [key=2, style=dotted];
m4_380 -> m4_378  [color=blue, key=0, style=bold];
m4_384 -> m4_382  [color=blue, key=0, style=bold];
m4_393 -> m4_394  [key=0, style=solid];
m4_389 -> m4_390  [key=0, style=solid];
m4_392 -> m4_393  [key=0, style=solid];
m4_390 -> m4_391  [key=0, style=solid];
m4_390 -> m4_6  [key=2, style=dotted];
m4_391 -> m4_389  [color=blue, key=0, style=bold];
m4_394 -> m4_392  [color=blue, key=0, style=bold];
m4_399 -> m4_400  [key=0, style=solid];
m4_400 -> m4_401  [key=0, style=solid];
m4_400 -> m4_402  [key=2, style=dotted];
m4_401 -> m4_399  [color=blue, key=0, style=bold];
m4_407 -> m4_408  [key=0, style=solid];
m4_408 -> m4_409  [key=0, style=solid];
m4_408 -> m4_283  [key=2, style=dotted];
m4_409 -> m4_407  [color=blue, key=0, style=bold];
m4_414 -> m4_415  [key=0, style=solid];
m4_415 -> m4_416  [key=0, style=solid];
m4_415 -> m4_417  [key=2, style=dotted];
m4_416 -> m4_414  [color=blue, key=0, style=bold];
m4_423 -> m4_424  [key=0, style=solid];
m4_424 -> m4_425  [key=0, style=solid];
m4_424 -> m4_6  [key=2, style=dotted];
m4_425 -> m4_423  [color=blue, key=0, style=bold];
m4_437 -> m4_438  [key=0, style=solid];
m4_432 -> m4_433  [key=0, style=solid];
m4_433 -> m4_434  [key=0, style=solid];
m4_433 -> m4_435  [key=2, style=dotted];
m4_434 -> m4_432  [color=blue, key=0, style=bold];
m4_438 -> m4_436  [color=blue, key=0, style=bold];
m4_385 -> m4_386  [key=0, style=solid];
m4_385 -> m4_387  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_385 -> m4_393  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_386 -> m4_387  [key=0, style=solid];
m4_386 -> m4_9  [key=2, style=dotted];
m4_386 -> m4_10  [key=2, style=dotted];
m4_386 -> m4_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_387 -> m4_388  [key=0, style=solid];
m4_387 -> m4_376  [key=2, style=dotted];
m4_387 -> m4_377  [key=2, style=dotted];
m4_387 -> m4_392  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_388 -> m4_385  [color=blue, key=0, style=bold];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_50  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_9  [key=2, style=dotted];
m4_49 -> m4_10  [key=2, style=dotted];
m4_49 -> m4_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_36  [key=2, style=dotted];
m4_50 -> m4_12  [key=2, style=dotted];
m4_51 -> m4_48  [color=blue, key=0, style=bold];
m4_119 -> m4_120  [key=0, style=solid];
m4_120 -> m4_121  [key=0, style=solid];
m4_120 -> m4_115  [key=2, style=dotted];
m4_120 -> m4_70  [key=2, style=dotted];
m4_120 -> m4_122  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_121 -> m4_122  [key=0, style=solid];
m4_121 -> m4_9  [key=2, style=dotted];
m4_121 -> m4_10  [key=2, style=dotted];
m4_121 -> m4_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_122 -> m4_123  [key=0, style=solid];
m4_122 -> m4_36  [key=2, style=dotted];
m4_122 -> m4_12  [key=2, style=dotted];
m4_123 -> m4_119  [color=blue, key=0, style=bold];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_26  [color=darkseagreen4, key=1, label=double, style=dashed];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_9  [key=2, style=dotted];
m4_25 -> m4_10  [key=2, style=dotted];
m4_25 -> m4_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_20  [key=2, style=dotted];
m4_27 -> m4_24  [color=blue, key=0, style=bold];
m4_275 -> m4_276  [key=0, style=solid];
m4_276 -> m4_277  [key=0, style=solid];
m4_276 -> m4_221  [key=2, style=dotted];
m4_276 -> m4_278  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_277 -> m4_278  [key=0, style=solid];
m4_277 -> m4_9  [key=2, style=dotted];
m4_277 -> m4_10  [key=2, style=dotted];
m4_277 -> m4_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_278 -> m4_279  [key=0, style=solid];
m4_278 -> m4_36  [key=2, style=dotted];
m4_278 -> m4_12  [key=2, style=dotted];
m4_279 -> m4_275  [color=blue, key=0, style=bold];
m4_234 -> m4_235  [key=0, style=solid];
m4_235 -> m4_236  [key=0, style=solid];
m4_235 -> m4_79  [key=2, style=dotted];
m4_235 -> m4_70  [key=2, style=dotted];
m4_235 -> m4_237  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_236 -> m4_237  [key=0, style=solid];
m4_236 -> m4_9  [key=2, style=dotted];
m4_236 -> m4_10  [key=2, style=dotted];
m4_236 -> m4_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_237 -> m4_238  [key=0, style=solid];
m4_237 -> m4_36  [key=2, style=dotted];
m4_237 -> m4_12  [key=2, style=dotted];
m4_238 -> m4_234  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_6  [key=2, style=dotted];
m4_1 -> m4_3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m4_1 -> m4_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_7  [key=2, style=dotted];
m4_2 -> m4_8  [key=2, style=dotted];
m4_2 -> m4_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_9  [key=2, style=dotted];
m4_3 -> m4_10  [key=2, style=dotted];
m4_3 -> m4_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_11  [key=2, style=dotted];
m4_4 -> m4_12  [key=2, style=dotted];
m4_5 -> m4_0  [color=blue, key=0, style=bold];
m4_225 -> m4_226  [key=0, style=solid];
m4_226 -> m4_227  [key=0, style=solid];
m4_226 -> m4_221  [key=2, style=dotted];
m4_226 -> m4_70  [key=2, style=dotted];
m4_226 -> m4_228  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_227 -> m4_228  [key=0, style=solid];
m4_227 -> m4_9  [key=2, style=dotted];
m4_227 -> m4_10  [key=2, style=dotted];
m4_227 -> m4_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_228 -> m4_229  [key=0, style=solid];
m4_228 -> m4_36  [key=2, style=dotted];
m4_228 -> m4_12  [key=2, style=dotted];
m4_229 -> m4_225  [color=blue, key=0, style=bold];
m4_216 -> m4_217  [key=0, style=solid];
m4_217 -> m4_218  [key=0, style=solid];
m4_217 -> m4_221  [key=2, style=dotted];
m4_217 -> m4_70  [key=2, style=dotted];
m4_217 -> m4_219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_218 -> m4_219  [key=0, style=solid];
m4_218 -> m4_9  [key=2, style=dotted];
m4_218 -> m4_10  [key=2, style=dotted];
m4_218 -> m4_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_219 -> m4_220  [key=0, style=solid];
m4_219 -> m4_36  [key=2, style=dotted];
m4_219 -> m4_12  [key=2, style=dotted];
m4_220 -> m4_216  [color=blue, key=0, style=bold];
m4_127 -> m4_128  [key=0, style=solid];
m4_128 -> m4_129  [key=0, style=solid];
m4_128 -> m4_115  [key=2, style=dotted];
m4_128 -> m4_70  [key=2, style=dotted];
m4_128 -> m4_130  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_129 -> m4_130  [key=0, style=solid];
m4_129 -> m4_9  [key=2, style=dotted];
m4_129 -> m4_10  [key=2, style=dotted];
m4_129 -> m4_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_130 -> m4_131  [key=0, style=solid];
m4_130 -> m4_36  [key=2, style=dotted];
m4_130 -> m4_12  [key=2, style=dotted];
m4_131 -> m4_127  [color=blue, key=0, style=bold];
m4_403 -> m4_404  [key=0, style=solid];
m4_403 -> m4_405  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m4_404 -> m4_405  [key=0, style=solid];
m4_404 -> m4_9  [key=2, style=dotted];
m4_404 -> m4_10  [key=2, style=dotted];
m4_404 -> m4_407  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_405 -> m4_406  [key=0, style=solid];
m4_405 -> m4_105  [key=2, style=dotted];
m4_406 -> m4_403  [color=blue, key=0, style=bold];
m4_84 -> m4_85  [key=0, style=solid];
m4_85 -> m4_86  [key=0, style=solid];
m4_85 -> m4_79  [key=2, style=dotted];
m4_85 -> m4_70  [key=2, style=dotted];
m4_85 -> m4_87  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_86 -> m4_87  [key=0, style=solid];
m4_86 -> m4_9  [key=2, style=dotted];
m4_86 -> m4_10  [key=2, style=dotted];
m4_86 -> m4_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_87 -> m4_88  [key=0, style=solid];
m4_87 -> m4_36  [key=2, style=dotted];
m4_87 -> m4_12  [key=2, style=dotted];
m4_88 -> m4_84  [color=blue, key=0, style=bold];
m4_64 -> m4_65  [key=0, style=solid];
m4_65 -> m4_66  [key=0, style=solid];
m4_65 -> m4_69  [key=2, style=dotted];
m4_65 -> m4_70  [key=2, style=dotted];
m4_65 -> m4_67  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_66 -> m4_67  [key=0, style=solid];
m4_66 -> m4_9  [key=2, style=dotted];
m4_66 -> m4_10  [key=2, style=dotted];
m4_66 -> m4_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_67 -> m4_68  [key=0, style=solid];
m4_67 -> m4_36  [key=2, style=dotted];
m4_67 -> m4_12  [key=2, style=dotted];
m4_68 -> m4_64  [color=blue, key=0, style=bold];
m4_135 -> m4_136  [key=0, style=solid];
m4_136 -> m4_137  [key=0, style=solid];
m4_136 -> m4_140  [key=2, style=dotted];
m4_136 -> m4_138  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_137 -> m4_138  [key=0, style=solid];
m4_137 -> m4_9  [key=2, style=dotted];
m4_137 -> m4_10  [key=2, style=dotted];
m4_137 -> m4_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_138 -> m4_139  [key=0, style=solid];
m4_138 -> m4_105  [key=2, style=dotted];
m4_139 -> m4_135  [color=blue, key=0, style=bold];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_18  [color=darkseagreen4, key=1, label=long, style=dashed];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_9  [key=2, style=dotted];
m4_17 -> m4_10  [key=2, style=dotted];
m4_17 -> m4_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_20  [key=2, style=dotted];
m4_19 -> m4_16  [color=blue, key=0, style=bold];
m4_326 -> m4_327  [key=0, style=solid];
m4_326 -> m4_329  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_326 -> m4_330  [color=darkseagreen4, key=1, label=bool, style=dashed];
m4_327 -> m4_328  [key=0, style=solid];
m4_327 -> m4_9  [key=2, style=dotted];
m4_327 -> m4_10  [key=2, style=dotted];
m4_327 -> m4_332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_327 -> m4_329  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_327 -> m4_330  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_329 -> m4_330  [key=0, style=solid];
m4_329 -> m4_105  [key=2, style=dotted];
m4_330 -> m4_331  [key=0, style=solid];
m4_330 -> m4_321  [key=2, style=dotted];
m4_330 -> m4_105  [key=2, style=dotted];
m4_328 -> m4_329  [key=0, style=solid];
m4_328 -> m4_330  [key=0, style=solid];
m4_331 -> m4_326  [color=blue, key=0, style=bold];
m4_418 -> m4_419  [key=0, style=solid];
m4_419 -> m4_420  [key=0, style=solid];
m4_419 -> m4_6  [key=2, style=dotted];
m4_419 -> m4_421  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_420 -> m4_421  [key=0, style=solid];
m4_420 -> m4_9  [key=2, style=dotted];
m4_420 -> m4_10  [key=2, style=dotted];
m4_420 -> m4_423  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_421 -> m4_422  [key=0, style=solid];
m4_421 -> m4_105  [key=2, style=dotted];
m4_422 -> m4_418  [color=blue, key=0, style=bold];
m4_160 -> m4_161  [key=0, style=solid];
m4_160 -> m4_162  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_161 -> m4_162  [key=0, style=solid];
m4_161 -> m4_9  [key=2, style=dotted];
m4_161 -> m4_10  [key=2, style=dotted];
m4_161 -> m4_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_162 -> m4_163  [key=0, style=solid];
m4_162 -> m4_105  [key=2, style=dotted];
m4_163 -> m4_160  [color=blue, key=0, style=bold];
m4_300 -> m4_301  [key=0, style=solid];
m4_300 -> m4_302  [color=darkseagreen4, key=1, label="int?", style=dashed];
m4_301 -> m4_302  [key=0, style=solid];
m4_301 -> m4_9  [key=2, style=dotted];
m4_301 -> m4_10  [key=2, style=dotted];
m4_301 -> m4_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_302 -> m4_303  [key=0, style=solid];
m4_302 -> m4_105  [key=2, style=dotted];
m4_303 -> m4_300  [color=blue, key=0, style=bold];
m4_242 -> m4_243  [key=0, style=solid];
m4_243 -> m4_244  [key=0, style=solid];
m4_243 -> m4_247  [key=2, style=dotted];
m4_243 -> m4_245  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_244 -> m4_245  [key=0, style=solid];
m4_244 -> m4_9  [key=2, style=dotted];
m4_244 -> m4_10  [key=2, style=dotted];
m4_244 -> m4_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_245 -> m4_246  [key=0, style=solid];
m4_245 -> m4_36  [key=2, style=dotted];
m4_245 -> m4_12  [key=2, style=dotted];
m4_246 -> m4_242  [color=blue, key=0, style=bold];
m4_208 -> m4_209  [key=0, style=solid];
m4_209 -> m4_210  [key=0, style=solid];
m4_209 -> m4_204  [key=2, style=dotted];
m4_209 -> m4_211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_210 -> m4_211  [key=0, style=solid];
m4_210 -> m4_9  [key=2, style=dotted];
m4_210 -> m4_10  [key=2, style=dotted];
m4_210 -> m4_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_211 -> m4_212  [key=0, style=solid];
m4_211 -> m4_105  [key=2, style=dotted];
m4_212 -> m4_208  [color=blue, key=0, style=bold];
m4_291 -> m4_292  [key=0, style=solid];
m4_292 -> m4_293  [key=0, style=solid];
m4_292 -> m4_79  [key=2, style=dotted];
m4_292 -> m4_294  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_293 -> m4_294  [key=0, style=solid];
m4_293 -> m4_9  [key=2, style=dotted];
m4_293 -> m4_10  [key=2, style=dotted];
m4_293 -> m4_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_294 -> m4_295  [key=0, style=solid];
m4_294 -> m4_36  [key=2, style=dotted];
m4_294 -> m4_12  [key=2, style=dotted];
m4_295 -> m4_291  [color=blue, key=0, style=bold];
m4_101 -> m4_102  [key=0, style=solid];
m4_101 -> m4_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m4_102 -> m4_103  [key=0, style=solid];
m4_102 -> m4_9  [key=2, style=dotted];
m4_102 -> m4_10  [key=2, style=dotted];
m4_102 -> m4_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_103 -> m4_104  [key=0, style=solid];
m4_103 -> m4_105  [key=2, style=dotted];
m4_103 -> m4_103  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m4_104 -> m4_101  [color=blue, key=0, style=bold];
m4_439 -> m4_440  [key=0, style=solid];
m4_439 -> m4_441  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeImmutableOptions", style=dashed];
m4_440 -> m4_441  [key=0, style=solid];
m4_440 -> m4_443  [key=2, style=dotted];
m4_440 -> m4_10  [key=2, style=dotted];
m4_441 -> m4_442  [key=0, style=solid];
m4_441 -> m4_105  [key=2, style=dotted];
m4_442 -> m4_439  [color=blue, key=0, style=bold];
m4_284 -> m4_285  [key=0, style=solid];
m4_284 -> m4_286  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_285 -> m4_286  [key=0, style=solid];
m4_285 -> m4_9  [key=2, style=dotted];
m4_285 -> m4_10  [key=2, style=dotted];
m4_285 -> m4_288  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_286 -> m4_287  [key=0, style=solid];
m4_286 -> m4_105  [key=2, style=dotted];
m4_287 -> m4_284  [color=blue, key=0, style=bold];
m4_199 -> m4_200  [key=0, style=solid];
m4_200 -> m4_201  [key=0, style=solid];
m4_200 -> m4_204  [key=2, style=dotted];
m4_200 -> m4_202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_201 -> m4_202  [key=0, style=solid];
m4_201 -> m4_9  [key=2, style=dotted];
m4_201 -> m4_10  [key=2, style=dotted];
m4_201 -> m4_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_202 -> m4_203  [key=0, style=solid];
m4_202 -> m4_105  [key=2, style=dotted];
m4_203 -> m4_199  [color=blue, key=0, style=bold];
m4_347 -> m4_348  [key=0, style=solid];
m4_348 -> m4_349  [key=0, style=solid];
m4_349 -> m4_350  [key=0, style=solid];
m4_349 -> m4_339  [key=2, style=dotted];
m4_350 -> m4_347  [color=blue, key=0, style=bold];
m4_189 -> m4_190  [key=0, style=solid];
m4_190 -> m4_191  [key=0, style=solid];
m4_190 -> m4_194  [key=2, style=dotted];
m4_190 -> m4_70  [key=2, style=dotted];
m4_190 -> m4_192  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m4_191 -> m4_192  [key=0, style=solid];
m4_191 -> m4_9  [key=2, style=dotted];
m4_191 -> m4_10  [key=2, style=dotted];
m4_191 -> m4_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_192 -> m4_193  [key=0, style=solid];
m4_192 -> m4_36  [key=2, style=dotted];
m4_192 -> m4_12  [key=2, style=dotted];
m4_193 -> m4_189  [color=blue, key=0, style=bold];
m4_444 -> m4_14  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m4_445 -> m4_182  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_445 -> m4_186  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m4_446 -> m4_383  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_447 -> m4_393  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_448 -> m4_437  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_0 -> m5_1  [key=0, style=solid];
m5_2 -> m5_3  [color=green, key=0, style=solid];
m5_2 -> m5_7  [color=green, key=2, style=dotted];
m5_2 -> d427  [color=green, key=2, style=dotted];
m5_2 -> m5_9  [color=green, key=2, style=dotted];
m5_2 -> m5_10  [color=green, key=2, style=dotted];
m5_2 -> m5_17  [color=green, key=1, label=specs, style=dashed];
m5_1 -> m5_2  [color=green, key=0, style=solid];
m5_1 -> m5_6  [key=2, style=dotted];
m5_1 -> m5_4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_11  [key=2, style=dotted];
m5_3 -> m5_12  [key=2, style=dotted];
m5_3 -> m5_13  [key=2, style=dotted];
m5_3 -> m5_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_3 -> m5_21  [color=darkseagreen4, key=1, label=result, style=dashed];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_14  [key=2, style=dotted];
m5_4 -> m5_15  [key=2, style=dotted];
m5_4 -> m5_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_5 -> m5_0  [color=blue, key=0, style=bold];
m5_41 -> m5_42  [key=0, style=solid];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_19  [key=2, style=dotted];
m5_36 -> m5_37  [key=0, style=solid];
m5_36 -> m5_19  [key=2, style=dotted];
m5_16 -> m5_17  [key=0, style=solid];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_23  [key=2, style=dotted];
m5_21 -> m5_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_21 -> m5_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m5_18 -> m5_16  [color=blue, key=0, style=bold];
m5_35 -> m5_36  [key=0, style=solid];
m5_39 -> m5_40  [key=0, style=solid];
m5_39 -> m5_23  [key=2, style=dotted];
m5_39 -> m5_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_39 -> m5_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m5_37 -> m5_35  [color=blue, key=0, style=bold];
m5_20 -> m5_21  [key=0, style=solid];
m5_22 -> m5_20  [color=blue, key=0, style=bold];
m5_24 -> m5_25  [key=0, style=solid];
m5_25 -> m5_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_27  [key=2, style=dotted];
m5_25 -> m5_28  [key=2, style=dotted];
m5_38 -> m5_39  [key=0, style=solid];
m5_40 -> m5_38  [color=blue, key=0, style=bold];
m5_42 -> m5_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m5_42 -> m5_43  [key=0, style=solid];
m5_42 -> m5_27  [key=2, style=dotted];
m5_42 -> m5_28  [key=2, style=dotted];
m5_26 -> m5_24  [color=blue, key=0, style=bold];
m5_43 -> m5_41  [color=blue, key=0, style=bold];
m5_29 -> m5_30  [key=0, style=solid];
m5_31 -> m5_32  [color=green, key=0, style=solid];
m5_31 -> m5_7  [color=green, key=2, style=dotted];
m5_31 -> d427  [color=green, key=2, style=dotted];
m5_31 -> m5_9  [color=green, key=2, style=dotted];
m5_31 -> m5_10  [color=green, key=2, style=dotted];
m5_31 -> m5_36  [color=green, key=1, label=specs, style=dashed];
m5_30 -> m5_31  [color=green, key=0, style=solid];
m5_30 -> m5_6  [key=2, style=dotted];
m5_30 -> m5_33  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m5_32 -> m5_33  [key=0, style=solid];
m5_32 -> m5_11  [key=2, style=dotted];
m5_32 -> m5_12  [key=2, style=dotted];
m5_32 -> m5_13  [key=2, style=dotted];
m5_32 -> m5_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_32 -> m5_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m5_33 -> m5_34  [key=0, style=solid];
m5_33 -> m5_14  [key=2, style=dotted];
m5_33 -> m5_15  [key=2, style=dotted];
m5_33 -> m5_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_34 -> m5_29  [color=blue, key=0, style=bold];
m5_44 -> m5_17  [color=darkseagreen4, key=1, label=specs, style=dashed];
m5_47 -> m5_36  [color=darkseagreen4, key=1, label=specs, style=dashed];
m5_45 -> m5_21  [color=darkseagreen4, key=1, label=result, style=dashed];
m5_48 -> m5_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m5_46 -> m5_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m5_49 -> m5_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=2, style=dotted];
m6_2 -> m6_0  [color=blue, key=0, style=bold];
}
