digraph  {
n318 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n319 [label=int, span=""];
n320 [label=int, span=""];
n321 [label=int, span=""];
n322 [label=int, span=""];
n0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="19-19"];
n1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", label="return InstanceBuilder.Build(\r\n                Maybe.Just<Func<T>>(() => new T()),\r\n                (args, optionSpecs) => Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="22-28"];
n2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuild<T>(string[])", span="19-19"];
n3 [cluster="CSharpx.Maybe.Just<T>(T)", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
n4 [cluster="System.Linq.Enumerable.Empty<TResult>()", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
n5 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="17-17"];
n6 [cluster="lambda expression", label="Entry lambda expression", span="23-23"];
n10 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
n7 [cluster="lambda expression", label="new T()", span="23-23"];
n8 [cluster="lambda expression", label="Exit lambda expression", span="23-23"];
n9 [cluster="T.cstr", label="Entry T.cstr", span=""];
n11 [cluster="lambda expression", label="Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs)", span="24-24"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
n13 [cluster="CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", label="Entry CommandLine.Core.Tokenizer.ConfigureTokenizer(System.StringComparer, bool, bool)", span="109-109"];
n14 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", span="31-31"];
n16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", label="return InstanceBuilder.Build(\r\n                Maybe.Nothing<Func<T>>(),\r\n                (args, optionSpecs) => Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>());", span="33-39"];
n17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.InvokeBuildImmutable<T>(string[])", span="31-31"];
n18 [cluster="CSharpx.Maybe.Nothing<T>()", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
n19 [cluster="lambda expression", label="Entry lambda expression", span="35-35"];
n20 [cluster="lambda expression", label="Tokenizer.ConfigureTokenizer(StringComparer.Ordinal, false, false)(args, optionSpecs)", span="35-35"];
n21 [cluster="lambda expression", label="Exit lambda expression", span="35-35"];
n22 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="43-43"];
n23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = new NotParsed<Simple_Options>(\r\n                TypeInfo.Create(typeof(Simple_Options)), new Error[] { new HelpRequestedError() })", span="46-47"];
n24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--help'' })", span="50-51"];
n27 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
n28 [cluster="CommandLine.TypeInfo.Create(System.Type)", label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29"];
n29 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="393-393"];
n25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="result.ShouldBeEquivalentTo(expectedResult)", span="54-54"];
n26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="43-43"];
n30 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
n31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="63-63"];
n32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="68-69"];
n33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="((Parsed<Simple_Options>)result).Value.LongValue.ShouldBeEquivalentTo(expected)", span="72-72"];
n34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="63-63"];
n35 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="83-83"];
n36 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="var result = InvokeBuild<Simple_Options_With_Double_Value>(\r\n                arguments)", span="88-89"];
n37 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="((Parsed<Simple_Options_With_Double_Value>)result).Value.DoubleValue.ShouldBeEquivalentTo(expected)", span="92-92"];
n38 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="83-83"];
n39 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="104-104"];
n40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="var result = InvokeBuild<Options_With_Sequence>(\r\n                arguments)", span="109-110"];
n41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="((Parsed<Options_With_Sequence>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="113-113"];
n42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="104-104"];
n43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="123-123"];
n44 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="128-129"];
n45 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="((Parsed<Simple_Options>)result).Value.IntSequence.ShouldBeEquivalentTo(expected)", span="132-132"];
n46 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="123-123"];
n47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="143-143"];
n48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint>(\r\n                arguments)", span="148-149"];
n49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="((Parsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="152-152"];
n50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="143-143"];
n51 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="162-162"];
n52 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint>(\r\n                arguments)", span="167-168"];
n53 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="((Parsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Value.StringSequence.ShouldBeEquivalentTo(expected)", span="171-171"];
n54 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="162-162"];
n55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="177-177"];
n56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="180-180"];
n57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint>(\r\n                new[] { ''-s'' })", span="183-184"];
n60 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="294-294"];
n61 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
n58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="187-187"];
n59 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="177-177"];
n62 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
n64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Min_Constraint_For_Value>(\r\n                new string[] { })", span="199-200"];
n67 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360"];
n65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="((NotParsed<Options_With_Sequence_And_Only_Min_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="203-203"];
n66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
n68 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="209-209"];
n69 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="212-212"];
n70 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint>(\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' })", span="215-216"];
n71 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="219-219"];
n72 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="209-209"];
n73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="225-225"];
n74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="228-228"];
n75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Options_With_Sequence_And_Only_Max_Constraint_For_Value>(\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' })", span="231-232"];
n76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="((NotParsed<Options_With_Sequence_And_Only_Max_Constraint_For_Value>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="235-235"];
n77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="225-225"];
n78 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="247-247"];
n79 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                arguments)", span="252-253"];
n80 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Enum>)result).Value.Colors)", span="256-256"];
n81 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="247-247"];
n82 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="262-262"];
n83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="265-265"];
n84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''3'' })", span="268-269"];
n87 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
n85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="272-272"];
n86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="262-262"];
n88 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="278-278"];
n89 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="281-281"];
n90 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''Yellow'' })", span="284-285"];
n91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="288-288"];
n92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="278-278"];
n93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="294-294"];
n94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
n95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="var result = InvokeBuild<Simple_Options_With_Enum>(\r\n                new[] { ''--colors'', ''RED'' })", span="300-301"];
n96 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="((NotParsed<Simple_Options_With_Enum>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="304-304"];
n97 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="294-294"];
n98 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="310-310"];
n99 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="313-319"];
n100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InvokeBuild<Simple_Options_With_Values>(\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' })", span="322-323"];
n103 [cluster="CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", label="Entry CommandLine.Tests.Fakes.Simple_Options_With_Values.Simple_Options_With_Values()", span="6-6"];
n101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="326-326"];
n102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="310-310"];
n104 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="337-337"];
n105 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="var result = InvokeBuild<Options_With_Sequence_Without_Range_For_Value>(\r\n                arguments)", span="342-343"];
n106 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Without_Range_For_Value>)result).Value.LongSequence)", span="346-346"];
n107 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="337-337"];
n108 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="356-356"];
n109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="var result = InvokeBuild<Options_With_Sequence_Having_Separator_Set>(\r\n                arguments)", span="361-362"];
n110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.LongSequence)", span="365-365"];
n111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="356-356"];
n112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="375-375"];
n113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="var result = InvokeBuild<Options_With_Sequence_Having_Separator_Set>(\r\n                arguments)", span="380-381"];
n114 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Sequence_Having_Separator_Set>)result).Value.StringSequence)", span="384-384"];
n115 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="375-375"];
n116 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="393-393"];
n117 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new Simple_Options_With_Values\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="396-402"];
n118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="403-403"];
n120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options_With_Values>)result).Value)", span="417-417"];
n119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                Maybe.Just<Func<Simple_Options_With_Values>>(() => new Simple_Options_With_Values()),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture,\r\n                Enumerable.Empty<ErrorType>())", span="406-414"];
n122 [cluster="lambda expression", label="Entry lambda expression", span="407-407"];
n125 [cluster="lambda expression", label="Entry lambda expression", span="408-410"];
n121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="393-393"];
n123 [cluster="lambda expression", label="new Simple_Options_With_Values()", span="407-407"];
n124 [cluster="lambda expression", label="Exit lambda expression", span="407-407"];
n126 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="409-410"];
n130 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="410-410"];
n134 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="410-410"];
n127 [cluster="lambda expression", label="Exit lambda expression", span="408-410"];
n128 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", span="44-44"];
n129 [cluster="lambda expression", label="Entry lambda expression", span="410-410"];
n131 [cluster="lambda expression", label="Exit lambda expression", span="410-410"];
n132 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13"];
n133 [cluster="lambda expression", label="Entry lambda expression", span="410-410"];
n135 [cluster="lambda expression", label="Exit lambda expression", span="410-410"];
n136 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18"];
n137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="423-423"];
n138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl''), string.Empty),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''), string.Empty)\r\n                }", span="426-430"];
n139 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InvokeBuild<Options_With_Two_Sets>(\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' })", span="433-434"];
n142 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo, string)", span="329-329"];
n140 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="((NotParsed<Options_With_Two_Sets>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="437-437"];
n141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="423-423"];
n143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="443-443"];
n144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new Options_With_Required_Set_To_True_Within_Same_Set {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="445-448"];
n145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InvokeBuild<Options_With_Required_Set_To_True_Within_Same_Set>(\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' })", span="450-451"];
n148 [cluster="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", label="Entry CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_Within_Same_Set.Options_With_Required_Set_To_True_Within_Same_Set()", span="4-4"];
n146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Value)", span="454-454"];
n147 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="443-443"];
n149 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459"];
n150 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="461-465"];
n151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InvokeBuild<Options_With_Required_Set_To_True_Within_Same_Set>(\r\n                new string[] { })", span="467-468"];
n154 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="316-316"];
n152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="((NotParsed<Options_With_Required_Set_To_True_Within_Same_Set>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="471-471"];
n153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="459-459"];
n155 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="477-477"];
n156 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="480-480"];
n157 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InvokeBuild<Options_With_Required_Set_To_True>(\r\n                new string[] { })", span="483-484"];
n158 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="((NotParsed<Options_With_Required_Set_To_True>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="487-487"];
n159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="477-477"];
n160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="493-493"];
n161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="496-496"];
n162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-i'', ''10'' })", span="499-500"];
n163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="503-503"];
n164 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="493-493"];
n165 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="509-509"];
n166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="512-512"];
n167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' })", span="515-516"];
n170 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="305-305"];
n168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="519-519"];
n169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="509-509"];
n171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="525-525"];
n172 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="528-528"];
n173 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-z'', ''-x'' })", span="531-532"];
n174 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="535-535"];
n175 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="525-525"];
n176 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="541-541"];
n177 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="544-544"];
n178 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''-zx'' })", span="547-548"];
n179 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="((NotParsed<Simple_Options>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="551-551"];
n180 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="541-541"];
n181 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="559-559"];
n182 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="564-565"];
n183 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="((Parsed<Simple_Options>)result).Value.StringValue.ShouldBeEquivalentTo(expected)", span="568-568"];
n184 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="559-559"];
n185 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="574-574"];
n186 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="577-577"];
n187 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="var result = InvokeBuild<Options_With_Required_Set_To_True_For_Values>(\r\n                new string[] { })", span="580-581"];
n188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="((NotParsed<Options_With_Required_Set_To_True_For_Values>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="584-584"];
n189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="574-574"];
n190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="594-594"];
n191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="599-600"];
n192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value.StringValue)", span="603-603"];
n193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="594-594"];
n194 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="609-609"];
n195 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="612-612"];
n196 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InvokeBuild<Options_With_Sequence_Having_Both_Min_And_Max_Equal>(\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' })", span="615-616"];
n197 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="((NotParsed<Options_With_Sequence_Having_Both_Min_And_Max_Equal>)result).Errors.ShouldBeEquivalentTo(expectedResult)", span="619-619"];
n198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="609-609"];
n199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="629-629"];
n200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="var result = InvokeBuild<Options_With_Nullables>(\r\n                arguments)", span="634-635"];
n201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableInt)", span="638-638"];
n202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_int(string[], int?)", span="629-629"];
n203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="648-648"];
n204 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="var result = InvokeBuild<Options_With_Nullables>(\r\n                arguments)", span="653-654"];
n205 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Nullables>)result).Value.NullableLong)", span="657-657"];
n206 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_nullable_long(string[], long?)", span="648-648"];
n207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="665-665"];
n208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="var result = InvokeBuild<Options_With_FSharpOption>(\r\n                arguments)", span="670-671"];
n210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.FileName.Value)", span="676-676"];
n211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<string>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.FileName))", span="678-678"];
n209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="((Parsed<Options_With_FSharpOption>)result).Value.FileName != null", span="674-674"];
n212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_string(string[], string, bool)", span="665-665"];
n213 [cluster="Unk.get_IsSome", label="Entry Unk.get_IsSome", span=""];
n214 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="686-686"];
n215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="var result = InvokeBuild<Options_With_FSharpOption>(\r\n                arguments)", span="691-692"];
n217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedValue.ShouldBeEquivalentTo(((Parsed<Options_With_FSharpOption>)result).Value.Offset.Value)", span="697-697"];
n218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="expectedSome.ShouldBeEquivalentTo(FSharpOption<int>.get_IsSome(((Parsed<Options_With_FSharpOption>)result).Value.Offset))", span="699-699"];
n216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="((Parsed<Options_With_FSharpOption>)result).Value.Offset != null", span="695-695"];
n219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_fsharp_option_int(string[], int, bool)", span="686-686"];
n220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="706-706"];
n221 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Action test = () => InvokeBuild<Options_With_Min_Set_To_Zero>(\r\n                new string[] { })", span="709-710"];
n222 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", color=red, community=0, label="0: Assert.Throws<ApplicationException>(test)", span="714-714"];
n223 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", span="706-706"];
n224 [cluster="Unk.>", label="Entry Unk.>", span=""];
n225 [cluster="lambda expression", label="Entry lambda expression", span="709-710"];
n226 [cluster="lambda expression", label="InvokeBuild<Options_With_Min_Set_To_Zero>(\r\n                new string[] { })", span="709-710"];
n227 [cluster="lambda expression", label="Exit lambda expression", span="709-710"];
n228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="721-721"];
n229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Action test = () => InvokeBuild<Options_With_Max_Set_To_Zero>(\r\n                new string[] { })", span="724-725"];
n230 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", color=red, community=0, label="0: Assert.Throws<ApplicationException>(test)", span="729-729"];
n231 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", span="721-721"];
n232 [cluster="lambda expression", label="Entry lambda expression", span="724-725"];
n233 [cluster="lambda expression", label="InvokeBuild<Options_With_Max_Set_To_Zero>(\r\n                new string[] { })", span="724-725"];
n234 [cluster="lambda expression", label="Exit lambda expression", span="724-725"];
n235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="736-736"];
n236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Action test = () => InvokeBuild<Options_With_Both_Min_And_Max_Set_To_Zero>(\r\n                new string[] { })", span="739-740"];
n237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", color=red, community=0, label="0: Assert.Throws<ApplicationException>(test)", span="744-744"];
n238 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", span="736-736"];
n239 [cluster="lambda expression", label="Entry lambda expression", span="739-740"];
n240 [cluster="lambda expression", label="InvokeBuild<Options_With_Both_Min_And_Max_Set_To_Zero>(\r\n                new string[] { })", span="739-740"];
n241 [cluster="lambda expression", label="Exit lambda expression", span="739-740"];
n242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="756-756"];
n243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="var result = InvokeBuild<Options_With_Named_And_Empty_Sets>(\r\n                arguments)", span="759-760"];
n244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="type == ParserResultType.NotParsed", span="763-763"];
n245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="((NotParsed<Options_With_Named_And_Empty_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="765-765"];
n252 [cluster="lambda expression", label="x == expected", span="765-765"];
n246 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="type == ParserResultType.Parsed", span="767-767"];
n247 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="result.Should().BeOfType<Parsed<Options_With_Named_And_Empty_Sets>>()", span="769-769"];
n248 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Empty_set_options_allowed_with_mutually_exclusive_sets(string[], CommandLine.ParserResultType, int)", span="756-756"];
n249 [cluster="Unk.Should", label="Entry Unk.Should", span=""];
n250 [cluster="Unk.HaveCount", label="Entry Unk.HaveCount", span=""];
n251 [cluster="lambda expression", label="Entry lambda expression", span="765-765"];
n253 [cluster="lambda expression", label="Exit lambda expression", span="765-765"];
n254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="775-775"];
n255 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="778-779"];
n256 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="((NotParsed<Simple_Options>)result).Errors.Should().HaveCount(x => x == expected)", span="782-782"];
n259 [cluster="lambda expression", label="x == expected", span="782-782"];
n257 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Specifying_options_two_or_more_times_generates_RepeatedOptionError(string[], int)", span="775-775"];
n258 [cluster="lambda expression", label="Entry lambda expression", span="782-782"];
n260 [cluster="lambda expression", label="Exit lambda expression", span="782-782"];
n261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="788-788"];
n262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="var result = InvokeBuild<Options_With_Interface>(\r\n                arguments)", span="791-792"];
n263 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Interface>)result).Value.InputFile)", span="795-795"];
n264 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Can_define_options_on_interface_properties(string[], string)", span="788-788"];
n265 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="806-806"];
n266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="var result = InvokeBuild<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>(\r\n                arguments)", span="809-810"];
n267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="type == ParserResultType.NotParsed", span="813-813"];
n268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="((NotParsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>)result).Errors.Should().HaveCount(x => x == expected)", span="815-815"];
n273 [cluster="lambda expression", label="x == expected", span="815-815"];
n269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="type == ParserResultType.Parsed", span="817-817"];
n270 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="result.Should().BeOfType<Parsed<Options_With_Two_Option_Required_Set_To_True_And_Two_Sets>>()", span="819-819"];
n271 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Enforce_required_within_mutually_exclusive_set_only(string[], CommandLine.ParserResultType, int)", span="806-806"];
n272 [cluster="lambda expression", label="Entry lambda expression", span="815-815"];
n274 [cluster="lambda expression", label="Exit lambda expression", span="815-815"];
n275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="825-825"];
n276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", label="var result = InvokeBuild<Options_With_Required_Set_To_True_For_Values>(\r\n                arguments)", span="830-831"];
n277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Required_Set_To_True_For_Values>)result).Value)", span="834-834"];
n278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values)", span="825-825"];
n279 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="841-841"];
n280 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", label="var result = InvokeBuild<Options_With_Scalar_Value_And_Adjacent_SequenceString>(\r\n                arguments)", span="846-847"];
n281 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Scalar_Value_And_Adjacent_SequenceString>)result).Value)", span="850-850"];
n282 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString)", span="841-841"];
n283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="856-856"];
n284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="var expectedResult = new Simple_Options { StringValue=''strval0'', IntSequence=new[] { 9, 7, 8 }, BoolValue = true,  LongValue = 9876543210L }", span="859-859"];
n285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="var result = InvokeBuild<Simple_Options>(\r\n                new[] { ''--stringvalue=strval0'', ''-i'', ''9'', ''7'', ''8'', ''-x'', ''9876543210'' })", span="862-863"];
n288 [cluster="CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", label="Entry CommandLine.Tests.Fakes.Simple_Options.Simple_Options()", span="6-6"];
n286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value)", span="866-866"];
n287 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_mutable()", span="856-856"];
n289 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="878-878"];
n290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="var result = InvokeBuild<Options_With_Two_Options_Having_Required_Set_To_True>(\r\n                arguments)", span="881-882"];
n292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="errors.OfType<MissingRequiredOptionError>().Should().HaveCount(x => x == expected)", span="886-886"];
n296 [cluster="lambda expression", label="x == expected", span="886-886"];
n291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="var errors = ((NotParsed<Options_With_Two_Options_Having_Required_Set_To_True>)result).Errors", span="885-885"];
n293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_generate_MissingRequiredOptionError(string[], int)", span="878-878"];
n294 [cluster="System.Collections.IEnumerable.OfType<TResult>()", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
n295 [cluster="lambda expression", label="Entry lambda expression", span="886-886"];
n297 [cluster="lambda expression", label="Exit lambda expression", span="886-886"];
n298 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="891-891"];
n299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", label="var result = InvokeBuildImmutable<Immutable_Simple_Options>(\r\n                arguments)", span="896-897"];
n300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", label="expected.ShouldBeEquivalentTo(((Parsed<Immutable_Simple_Options>)result).Value)", span="900-900"];
n301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_immutable_instance(string[], CommandLine.Tests.Fakes.Immutable_Simple_Options)", span="891-891"];
n302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="906-906"];
n303 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="var expectedResult = new Options_With_Uri_And_SimpleType { EndPoint = new Uri(''http://localhost/test/''), MyValue = new MySimpleType(''custom-value'') }", span="909-909"];
n304 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="var result = InvokeBuild<Options_With_Uri_And_SimpleType>(\r\n                new[] { ''--endpoint=http://localhost/test/'', ''custom-value'' })", span="912-913"];
n307 [cluster="CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()", label="Entry CommandLine.Tests.Fakes.Options_With_Uri_And_SimpleType.Options_With_Uri_And_SimpleType()", span="23-23"];
n308 [cluster="System.Uri.Uri(string)", label="Entry System.Uri.Uri(string)", span="0-0"];
n309 [cluster="CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", label="Entry CommandLine.Tests.Fakes.MySimpleType.MySimpleType(string)", span="12-12"];
n305 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="expectedResult.ShouldBeEquivalentTo(((Parsed<Options_With_Uri_And_SimpleType>)result).Value)", span="916-916"];
n306 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_to_type_with_single_string_ctor_builds_up_correct_instance()", span="906-906"];
n310 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", span="930-930"];
n311 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", label="var result = InvokeBuild<Simple_Options>(\r\n                arguments)", span="935-936"];
n312 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", label="expected.ShouldBeEquivalentTo(((Parsed<Simple_Options>)result).Value.StringValue)", span="939-939"];
n313 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_with_dashes_except_in_beginning(string[], string)", span="930-930"];
n314 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", span="946-946"];
n315 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", label="var result = InvokeBuild<Options_With_Guid>(\r\n                arguments)", span="951-952"];
n316 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", label="expected.ShouldBeEquivalentTo(((Parsed<Options_With_Guid>)result).Value)", span="955-955"];
n317 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_Guid(string[], CommandLine.Tests.Fakes.Options_With_Guid)", span="946-946"];
d222 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_constraint_set_to_zero_throws_exception()", color=green, community=0, label="0: Assert.Throws<InvalidOperationException>(test)", span="713-713"];
d230 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Max_constraint_set_to_zero_throws_exception()", color=green, community=0, label="0: Assert.Throws<InvalidOperationException>(test)", span="724-724"];
d237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Min_and_max_constraint_set_to_zero_throws_exception()", color=green, community=0, label="0: Assert.Throws<InvalidOperationException>(test)", span="735-735"];
m0_148 [cluster="CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", span="199-199"];
m0_149 [cluster="CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", file="ReflectionExtensions.cs", label="var propertyInfo = type.GetProperty(name, BindingFlags.Public | BindingFlags.Instance)", span="201-201"];
m0_150 [cluster="CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", file="ReflectionExtensions.cs", label="return propertyInfo.GetGetMethod().Invoke(target, null);", span="202-202"];
m0_151 [cluster="CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.InstanceProperty(System.Type, string, object)", span="199-199"];
m0_17 [cluster="Unk.SingleOrDefault", file="ReflectionExtensions.cs", label="Entry Unk.SingleOrDefault", span=""];
m0_45 [cluster="System.Type.GetInterfaces()", file="ReflectionExtensions.cs", label="Entry System.Type.GetInterfaces()", span="0-0"];
m0_92 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="147-147"];
m0_93 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ReflectionExtensions.cs", label="Func<bool> isMutable = () => {\r\n                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite);\r\n                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any();\r\n                return props || fields;\r\n            }", span="149-153"];
m0_94 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ReflectionExtensions.cs", label="return type != typeof(object) ? isMutable() : true;", span="154-154"];
m0_95 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="147-147"];
m0_155 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m0_102 [cluster="System.Type.GetFields(System.Reflection.BindingFlags)", file="ReflectionExtensions.cs", label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0"];
m0_141 [cluster="System.Reflection.MethodBase.Invoke(object, object[])", file="ReflectionExtensions.cs", label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0"];
m0_127 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m0_152 [cluster="CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", span="205-205"];
m0_153 [cluster="CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", file="ReflectionExtensions.cs", label="return\r\n                   (type.GetTypeInfo().IsValueType && type != typeof(Guid))\r\n                || type.GetTypeInfo().IsPrimitive\r\n                || new [] { \r\n                     typeof(string)\r\n                    ,typeof(decimal)\r\n                    ,typeof(DateTime)\r\n                    ,typeof(DateTimeOffset)\r\n                    ,typeof(TimeSpan)\r\n                   }.Contains(type)\r\n                || Convert.GetTypeCode(type) != TypeCode.Object;", span="207-217"];
m0_154 [cluster="CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.IsPrimitiveEx(System.Type)", span="205-205"];
m0_74 [cluster="System.Action<T>.Invoke(T)", file="ReflectionExtensions.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m0_83 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="138-138"];
m0_84 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="140-143"];
m0_85 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="return e.Compile()();", span="144-144"];
m0_86 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="138-138"];
m0_7 [cluster="Unk.Any", file="ReflectionExtensions.cs", label="Entry Unk.Any", span=""];
m0_8 [cluster="Unk.First", file="ReflectionExtensions.cs", label="Entry Unk.First", span=""];
m0_132 [cluster="CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", span="182-182"];
m0_133 [cluster="CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", file="ReflectionExtensions.cs", label="return TypeInfo.Create(type);", span="184-184"];
m0_134 [cluster="CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.ToTypeInfo(System.Type)", span="182-182"];
m0_44 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ReflectionExtensions.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_26 [cluster="Unk.Create", file="ReflectionExtensions.cs", label="Entry Unk.Create", span=""];
m0_53 [cluster="Unk.Where", file="ReflectionExtensions.cs", label="Entry Unk.Where", span=""];
m0_60 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="97-97"];
m0_61 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="ReflectionExtensions.cs", label="0: Action<Exception> fail = inner => {\r\n                throw new InvalidOperationException(''Cannot set value to target instance.'', inner);\r\n            }", span="99-101"];
m0_62 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="property.SetValue(instance, value, null)", span="109-109"];
m0_71 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="return instance;", span="130-130"];
m0_64 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="fail(e)", span="114-114"];
m0_66 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="fail(e)", span="119-119"];
m0_68 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="fail(e)", span="123-123"];
m0_70 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="fail(e)", span="127-127"];
m0_63 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label=TargetException, span="112-112"];
m0_65 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label=TargetParameterCountException, span="117-117"];
m0_67 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label=MethodAccessException, span="121-121"];
m0_69 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label=TargetInvocationException, span="125-125"];
m0_72 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="97-97"];
m0_46 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="71-71"];
m0_47 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="ReflectionExtensions.cs", label="return type == typeof(bool)\r\n                       ? TargetType.Switch\r\n                       : type == typeof(string)\r\n                             ? TargetType.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? TargetType.Sequence\r\n                                   : TargetType.Scalar;", span="73-79"];
m0_48 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="71-71"];
m0_103 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_78 [cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)", file="ReflectionExtensions.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0"];
m0_18 [cluster="Unk.ToMaybe", file="ReflectionExtensions.cs", label="Entry Unk.ToMaybe", span=""];
m0_39 [cluster="System.Type.SafeGetInterfaces()", file="ReflectionExtensions.cs", label="Entry System.Type.SafeGetInterfaces()", span="66-66"];
m0_22 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)", file="ReflectionExtensions.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)", span="0-0"];
m0_4 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="ReflectionExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
m0_14 [cluster="CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", span="27-27"];
m0_15 [cluster="CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", file="ReflectionExtensions.cs", label="return\r\n                (from attr in\r\n                 type.FlattenHierarchy().SelectMany(x => x.GetCustomAttributes(typeof(VerbAttribute), true))\r\n                 let vattr = (VerbAttribute)attr\r\n                 select vattr)\r\n                    .SingleOrDefault()\r\n                    .ToMaybe();", span="29-35"];
m0_16 [cluster="CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", span="27-27"];
m0_9 [cluster="Unk.selector", file="ReflectionExtensions.cs", label="Entry Unk.selector", span=""];
m0_129 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="177-177"];
m0_10 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="18-18"];
m0_11 [cluster="lambda expression", file="ReflectionExtensions.cs", label="x.GetProperties()", span="18-18"];
m0_12 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="18-18"];
m0_19 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="31-31"];
m0_20 [cluster="lambda expression", file="ReflectionExtensions.cs", label="x.GetCustomAttributes(typeof(VerbAttribute), true)", span="31-31"];
m0_21 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="31-31"];
m0_27 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="41-41"];
m0_28 [cluster="lambda expression", file="ReflectionExtensions.cs", label="x.GetProperties()", span="41-41"];
m0_29 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="41-41"];
m0_56 [cluster="lambda expression", file="ReflectionExtensions.cs", label="specProp.Property.SetValue(current, selector(specProp))", span="92-92"];
m0_57 [cluster="lambda expression", file="ReflectionExtensions.cs", label="return instance;", span="93-93"];
m0_55 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="90-94"];
m0_58 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="90-94"];
m0_76 [cluster="lambda expression", color=green, community=0, file="ReflectionExtensions.cs", label="0: throw new InvalidOperationException(''Cannot set value to target instance.'', inner);", span="100-100"];
m0_75 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="99-105"];
m0_77 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="99-105"];
m0_97 [cluster="lambda expression", file="ReflectionExtensions.cs", label="var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="150-150"];
m0_98 [cluster="lambda expression", file="ReflectionExtensions.cs", label="var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="151-151"];
m0_96 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="149-153"];
m0_104 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Entry lambda expression", span="150-150"];
m0_99 [cluster="lambda expression", file="ReflectionExtensions.cs", label="return props || fields;", span="152-152"];
m0_100 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="149-153"];
m0_105 [cluster="lambda expression", file="ReflectionExtensions.cs", label="p.CanWrite", span="150-150"];
m0_106 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="150-150"];
m0_130 [cluster="lambda expression", file="ReflectionExtensions.cs", label="pi.PropertyType", span="177-177"];
m0_131 [cluster="lambda expression", file="ReflectionExtensions.cs", label="Exit lambda expression", span="177-177"];
m0_40 [cluster="System.Type.GetTypeInfo()", file="ReflectionExtensions.cs", label="Entry System.Type.GetTypeInfo()", span="222-222"];
m0_73 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="ReflectionExtensions.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m0_82 [cluster="System.Array.CreateInstance(System.Type, int)", file="ReflectionExtensions.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m0_87 [cluster="System.Linq.Expressions.Expression.Default(System.Type)", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0"];
m0_88 [cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0"];
m0_128 [cluster="CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", file="ReflectionExtensions.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.CreateDefaultImmutableInstance(System.Type, System.Type[])", span="62-62"];
m0_49 [cluster="System.Type.IsAssignableFrom(System.Type)", file="ReflectionExtensions.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m0_107 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="157-157"];
m0_108 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="type == typeof(string)", span="159-159"];
m0_110 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>)", span="163-163"];
m0_111 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="return type.GetGenericArguments()[0].CreateEmptyArray();", span="165-165"];
m0_112 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="return type.GetDefaultValue();", span="167-167"];
m0_109 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="return string.Empty;", span="161-161"];
m0_113 [cluster="CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateDefaultForImmutable(System.Type)", span="157-157"];
m0_135 [cluster="CommandLine.TypeInfo.Create(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29"];
m0_13 [cluster="System.Type.GetProperties()", file="ReflectionExtensions.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m0_23 [cluster="CommandLine.Core.ReflectionExtensions.GetUsageData(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetUsageData(System.Type)", span="38-38"];
m0_24 [cluster="CommandLine.Core.ReflectionExtensions.GetUsageData(System.Type)", file="ReflectionExtensions.cs", label="return\r\n                (from pi in type.FlattenHierarchy().SelectMany(x => x.GetProperties())\r\n                    let attrs = pi.GetCustomAttributes(true)\r\n                    where attrs.OfType<UsageAttribute>().Any()\r\n                    select Tuple.Create(pi, (UsageAttribute)attrs.First()))\r\n                        .SingleOrDefault()\r\n                        .ToMaybe();", span="40-46"];
m0_25 [cluster="CommandLine.Core.ReflectionExtensions.GetUsageData(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetUsageData(System.Type)", span="38-38"];
m0_0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m0_1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="return from pi in type.FlattenHierarchy().SelectMany(x => x.GetProperties())\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                       attrs.OfType<OptionAttribute>().Any() ||\r\n                       attrs.OfType<ValueAttribute>().Any()\r\n                   group pi by pi.Name into g\r\n                   select selector(g.First());", span="18-24"];
m0_2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m0_89 [cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0"];
m0_114 [cluster="System.Type.GetGenericTypeDefinition()", file="ReflectionExtensions.cs", label="Entry System.Type.GetGenericTypeDefinition()", span="0-0"];
m0_118 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="170-170"];
m0_119 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="type.IsMutable()", span="172-172"];
m0_120 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="return Activator.CreateInstance(type);", span="174-174"];
m0_121 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="var ctorTypes = type.GetSpecifications(pi => pi.PropertyType).ToArray()", span="177-177"];
m0_122 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="return ReflectionHelper.CreateDefaultImmutableInstance(type, ctorTypes);", span="179-179"];
m0_123 [cluster="CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.AutoDefault(System.Type)", span="170-170"];
m0_142 [cluster="CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", span="193-193"];
m0_143 [cluster="CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", file="ReflectionExtensions.cs", label="var propertyInfo = type.GetProperty(name, BindingFlags.Public | BindingFlags.Static)", span="195-195"];
m0_144 [cluster="CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", file="ReflectionExtensions.cs", label="return propertyInfo.GetGetMethod().Invoke(null, null);", span="196-196"];
m0_145 [cluster="CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.StaticProperty(System.Type, string)", span="193-193"];
m0_156 [cluster="System.Convert.GetTypeCode(object)", file="ReflectionExtensions.cs", label="Entry System.Convert.GetTypeCode(object)", span="0-0"];
m0_41 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="66-66"];
m0_42 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="ReflectionExtensions.cs", label="return type == null ? Enumerable.Empty<Type>() : type.GetInterfaces();", span="68-68"];
m0_43 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="66-66"];
m0_116 [cluster="System.Type.CreateEmptyArray()", file="ReflectionExtensions.cs", label="Entry System.Type.CreateEmptyArray()", span="133-133"];
m0_117 [cluster="System.Type.GetDefaultValue()", file="ReflectionExtensions.cs", label="Entry System.Type.GetDefaultValue()", span="138-138"];
m0_115 [cluster="System.Type.GetGenericArguments()", file="ReflectionExtensions.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m0_126 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="ReflectionExtensions.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m0_125 [cluster="System.Activator.CreateInstance(System.Type)", file="ReflectionExtensions.cs", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
m0_101 [cluster="System.Type.GetProperties(System.Reflection.BindingFlags)", file="ReflectionExtensions.cs", label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0"];
m0_146 [cluster="System.Type.GetProperty(string, System.Reflection.BindingFlags)", file="ReflectionExtensions.cs", label="Entry System.Type.GetProperty(string, System.Reflection.BindingFlags)", span="0-0"];
m0_140 [cluster="System.Type.GetMethod(string, System.Reflection.BindingFlags)", file="ReflectionExtensions.cs", label="Entry System.Type.GetMethod(string, System.Reflection.BindingFlags)", span="0-0"];
m0_5 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="ReflectionExtensions.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m0_91 [cluster="System.Func<TResult>.Invoke()", file="ReflectionExtensions.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_124 [cluster="System.Type.IsMutable()", file="ReflectionExtensions.cs", label="Entry System.Type.IsMutable()", span="147-147"];
m0_54 [cluster="Unk.Aggregate", file="ReflectionExtensions.cs", label="Entry Unk.Aggregate", span=""];
m0_79 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="133-133"];
m0_80 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs", label="return Array.CreateInstance(type, 0);", span="135-135"];
m0_81 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="133-133"];
m0_50 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
m0_51 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs", label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="88-94"];
m0_52 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="82-82"];
m0_30 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="49-49"];
m0_31 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ReflectionExtensions.cs", label="type == null", span="51-51"];
m0_32 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ReflectionExtensions.cs", label="yield break;", span="53-53"];
m0_33 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ReflectionExtensions.cs", label="yield return type;", span="55-55"];
m0_35 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ReflectionExtensions.cs", label="yield return @interface;", span="58-58"];
m0_37 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ReflectionExtensions.cs", label="yield return @interface;", span="62-62"];
m0_34 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ReflectionExtensions.cs", label="type.SafeGetInterfaces()", span="56-56"];
m0_36 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ReflectionExtensions.cs", label="FlattenHierarchy(type.GetTypeInfo().BaseType)", span="60-60"];
m0_38 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="49-49"];
m0_59 [cluster="Unk.SetValue", file="ReflectionExtensions.cs", label="Entry Unk.SetValue", span=""];
m0_157 [cluster="CommandLine.Core.ReflectionExtensions.GetTypeInfo(System.Type)", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetTypeInfo(System.Type)", span="222-222"];
m0_158 [cluster="CommandLine.Core.ReflectionExtensions.GetTypeInfo(System.Type)", file="ReflectionExtensions.cs", label="return type;", span="224-224"];
m0_159 [cluster="CommandLine.Core.ReflectionExtensions.GetTypeInfo(System.Type)", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetTypeInfo(System.Type)", span="222-222"];
m0_136 [cluster="CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", file="ReflectionExtensions.cs", label="Entry CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", span="187-187"];
m0_137 [cluster="CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", file="ReflectionExtensions.cs", label="var methodInfo = type.GetMethod(name, BindingFlags.Public | BindingFlags.Static)", span="189-189"];
m0_138 [cluster="CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", file="ReflectionExtensions.cs", label="return methodInfo.Invoke(null, args);", span="190-190"];
m0_139 [cluster="CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", file="ReflectionExtensions.cs", label="Exit CommandLine.Core.ReflectionExtensions.StaticMethod(System.Type, string, params object[])", span="187-187"];
m0_3 [cluster="System.Type.FlattenHierarchy()", file="ReflectionExtensions.cs", label="Entry System.Type.FlattenHierarchy()", span="49-49"];
m0_147 [cluster="System.Reflection.PropertyInfo.GetGetMethod()", file="ReflectionExtensions.cs", label="Entry System.Reflection.PropertyInfo.GetGetMethod()", span="0-0"];
m0_90 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="ReflectionExtensions.cs", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
m0_160 [file="ReflectionExtensions.cs", label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
m0_161 [file="ReflectionExtensions.cs", label=T, span=""];
m0_162 [file="ReflectionExtensions.cs", label="System.Type", span=""];
m1_20 [cluster="System.ApplicationException.ApplicationException(string)", file="SpecificationExtensions.cs", label="Entry System.ApplicationException.ApplicationException(string)", span="0-0"];
m1_13 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="43-43"];
m1_14 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label=guardsLookup, span="45-45"];
m1_15 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="specifications.Any(spec => guard.Item1(spec))", span="47-47"];
m1_17 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="return specifications;", span="57-57"];
m1_16 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", color=green, community=0, file="SpecificationExtensions.cs", label="0: throw new InvalidOperationException(guard.Item2);", span="49-49"];
m1_18 [cluster="CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.ThrowingValidate(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, System.Collections.Generic.IEnumerable<System.Tuple<System.Func<CommandLine.Core.Specification, bool>, string>>)", span="43-43"];
m1_25 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="60-60"];
m1_26 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="int min", span="62-62"];
m1_28 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="specification.Min.MatchJust(out min) && specification.Max.MatchJust(out max)", span="64-64"];
m1_29 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="return predicate(min, max);", span="66-66"];
m1_27 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="int max", span="63-63"];
m1_30 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="return false;", span="68-68"];
m1_31 [cluster="CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.HavingRange(CommandLine.Core.Specification, System.Func<int, int, bool>)", span="60-60"];
m1_0 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="10-10"];
m1_1 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Tag == SpecificationType.Option;", span="12-12"];
m1_2 [cluster="CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsOption(CommandLine.Core.Specification)", span="10-10"];
m1_9 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16"];
m1_3 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="15-15"];
m1_4 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="return specification.Tag == SpecificationType.Value;", span="17-17"];
m1_5 [cluster="CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.IsValue(CommandLine.Core.Specification)", span="15-15"];
m1_21 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Entry lambda expression", span="47-47"];
m1_22 [cluster="lambda expression", file="SpecificationExtensions.cs", label="guard.Item1(spec)", span="47-47"];
m1_23 [cluster="lambda expression", file="SpecificationExtensions.cs", label="Exit lambda expression", span="47-47"];
m1_40 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="81-81"];
m1_41 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="int max", span="83-83"];
m1_42 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="specification.Max.MatchJust(out max)", span="84-84"];
m1_43 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return predicate(max);", span="86-86"];
m1_44 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return false;", span="88-88"];
m1_45 [cluster="CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.HavingMax(CommandLine.Core.Specification, System.Func<int, bool>)", span="81-81"];
m1_10 [cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", span="38-38"];
m1_11 [cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", file="SpecificationExtensions.cs", label="return specification.ShortName.Length > 0 ? specification.ShortName : specification.LongName;", span="40-40"];
m1_12 [cluster="CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.UniqueName(CommandLine.Core.OptionSpecification)", span="38-38"];
m1_34 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="71-71"];
m1_35 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="int min", span="73-73"];
m1_36 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="specification.Min.MatchJust(out min)", span="74-74"];
m1_37 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return predicate(min);", span="76-76"];
m1_38 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="return false;", span="78-78"];
m1_39 [cluster="CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.HavingMin(CommandLine.Core.Specification, System.Func<int, bool>)", span="71-71"];
m1_19 [cluster="Unk.Any", file="SpecificationExtensions.cs", label="Entry Unk.Any", span=""];
m1_6 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20"];
m1_7 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues,\r\n                specification.ConversionType,\r\n                specification.TargetType);", span="22-35"];
m1_8 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20"];
m1_24 [cluster="System.Func<T, TResult>.Invoke(T)", file="SpecificationExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m1_32 [cluster="CSharpx.Maybe<T>.MatchJust(out T)", file="SpecificationExtensions.cs", label="Entry CSharpx.Maybe<T>.MatchJust(out T)", span="48-48"];
m1_46 [file="SpecificationExtensions.cs", label=guard, span=""];
m2_4 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="45-45"];
m2_30 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var result = ChangeTypeScalarImpl(value, conversionType, conversionCulture)", span="47-47"];
m2_31 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="result.Match((_,__) => { }, e => e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) }))", span="48-49"];
m2_32 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return result.ToMaybe();", span="50-50"];
m2_33 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalar(string, System.Type, System.Globalization.CultureInfo)", span="45-45"];
m2_34 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="53-53"];
m2_44 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Func<object> changeType = () =>\r\n            {\r\n                Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                };\r\n\r\n                return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType) : safeChangeType();\r\n            }", span="55-83"];
m2_45 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Func<object> makeType = () =>\r\n            {\r\n                try\r\n                {\r\n                    var ctor = conversionType.GetConstructor(new[] { typeof(string) });\r\n                    return ctor.Invoke(new object[] { value });\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');\r\n                }\r\n            }", span="85-96"];
m2_46 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return Result.Try(\r\n                conversionType.IsPrimitiveEx() || ReflectionHelper.IsFSharpOptionType(conversionType)\r\n                    ? changeType\r\n                    : makeType);", span="98-101"];
m2_47 [cluster="CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeScalarImpl(string, System.Type, System.Globalization.CultureInfo)", span="53-53"];
m2_0 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="17-17"];
m2_1 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return scalar\r\n                ? ChangeTypeScalar(values.Single(), conversionType, conversionCulture)\r\n                : ChangeTypeSequence(values, conversionType, conversionCulture);", span="19-21"];
m2_2 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="17-17"];
m2_50 [cluster="RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", file="TypeConverter.cs", label="Entry RailwaySharp.ErrorHandling.Result.Try<TSuccess>(System.Func<TSuccess>)", span="210-210"];
m2_102 [cluster="System.Enum.IsDefined(System.Type, object)", file="TypeConverter.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m2_13 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="TypeConverter.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m2_77 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="17-17"];
m2_16 [cluster="Unk.Any", file="TypeConverter.cs", label="Entry Unk.Any", span=""];
m2_71 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.GetUnderlyingType(System.Type)", span="11-11"];
m2_72 [cluster="System.Nullable.GetUnderlyingType(System.Type)", file="TypeConverter.cs", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
m2_100 [cluster="System.Enum.Parse(System.Type, string)", file="TypeConverter.cs", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
m2_57 [cluster="System.Type.GetTypeInfo()", file="TypeConverter.cs", label="Entry System.Type.GetTypeInfo()", span="222-222"];
m2_12 [cluster="T.ToMaybe<T>()", file="TypeConverter.cs", label="Entry T.ToMaybe<T>()", span="249-249"];
m2_59 [cluster="System.Func<TResult>.Invoke()", file="TypeConverter.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m2_82 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="85-96"];
m2_21 [cluster="lambda expression", file="TypeConverter.cs", label="ChangeTypeScalar(value, type, conversionCulture)", span="38-38"];
m2_20 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="38-38"];
m2_23 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="40-40"];
m2_27 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="42-42"];
m2_22 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="38-38"];
m2_24 [cluster="lambda expression", file="TypeConverter.cs", label="a.MatchNothing()", span="40-40"];
m2_25 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="40-40"];
m2_28 [cluster="lambda expression", file="TypeConverter.cs", label="((Just<object>)c).Value", span="42-42"];
m2_29 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="42-42"];
m2_37 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="48-48"];
m2_39 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="48-49"];
m2_38 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="48-48"];
m2_40 [cluster="lambda expression", file="TypeConverter.cs", label="e.First().RethrowWhenAbsentIn(\r\n                new[] { typeof(InvalidCastException), typeof(FormatException), typeof(OverflowException) })", span="48-49"];
m2_41 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="48-49"];
m2_52 [cluster="lambda expression", file="TypeConverter.cs", label="Func<object> safeChangeType = () =>\r\n                {\r\n                    var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType);\r\n\r\n                    Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType);\r\n\r\n                    var type = getUnderlyingType() ?? conversionType;\r\n\r\n                    Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture);\r\n\r\n                    Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null;\r\n\r\n                    return (value == null) ? empty() : withValue();\r\n                }", span="57-78"];
m2_61 [cluster="lambda expression", file="TypeConverter.cs", label="var isFsOption = ReflectionHelper.IsFSharpOptionType(conversionType)", span="59-59"];
m2_62 [cluster="lambda expression", file="TypeConverter.cs", label="Func<Type> getUnderlyingType =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="61-65"];
m2_69 [cluster="lambda expression", file="TypeConverter.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.GetUnderlyingType(conversionType)\r\n                                : Nullable.GetUnderlyingType(conversionType)", span="63-65"];
m2_63 [cluster="lambda expression", file="TypeConverter.cs", label="var type = getUnderlyingType() ?? conversionType", span="67-67"];
m2_64 [cluster="lambda expression", file="TypeConverter.cs", label="Func<object> withValue =\r\n                        () =>\r\n                            isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture)", span="69-73"];
m2_74 [cluster="lambda expression", file="TypeConverter.cs", label="isFsOption\r\n                                ? FSharpOptionHelper.Some(type, Convert.ChangeType(value, type, conversionCulture))\r\n                                : Convert.ChangeType(value, type, conversionCulture)", span="71-73"];
m2_66 [cluster="lambda expression", file="TypeConverter.cs", label="return (value == null) ? empty() : withValue();", span="77-77"];
m2_53 [cluster="lambda expression", file="TypeConverter.cs", label="return value.IsBooleanString()\r\n                    ? value.ToBoolean() : conversionType.GetTypeInfo().IsEnum\r\n                        ? value.ToEnum(conversionType) : safeChangeType();", span="80-82"];
m2_83 [cluster="lambda expression", file="TypeConverter.cs", label="var ctor = conversionType.GetConstructor(new[] { typeof(string) })", span="89-89"];
m2_84 [cluster="lambda expression", file="TypeConverter.cs", label="return ctor.Invoke(new object[] { value });", span="90-90"];
m2_51 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="55-83"];
m2_54 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="55-83"];
m2_60 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="57-78"];
m2_65 [cluster="lambda expression", file="TypeConverter.cs", label="Func<object> empty = () => isFsOption ? FSharpOptionHelper.None(type) : null", span="75-75"];
m2_79 [cluster="lambda expression", file="TypeConverter.cs", label="isFsOption ? FSharpOptionHelper.None(type) : null", span="75-75"];
m2_67 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="57-78"];
m2_68 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="62-65"];
m2_70 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="62-65"];
m2_73 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="70-73"];
m2_75 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="70-73"];
m2_78 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="75-75"];
m2_80 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="75-75"];
m2_85 [cluster="lambda expression", file="TypeConverter.cs", label=Exception, span="92-92"];
m2_86 [cluster="lambda expression", file="TypeConverter.cs", label="throw new FormatException(''Destination conversion type must have a constructor that accepts a string.'');", span="94-94"];
m2_87 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="85-96"];
m2_42 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m2_76 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="TypeConverter.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m2_3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m2_58 [cluster="string.ToEnum(System.Type)", file="TypeConverter.cs", label="Entry string.ToEnum(System.Type)", span="104-104"];
m2_49 [cluster="CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.IsFSharpOptionType(System.Type)", span="47-47"];
m2_48 [cluster="System.Type.IsPrimitiveEx()", file="TypeConverter.cs", label="Entry System.Type.IsPrimitiveEx()", span="205-205"];
m2_5 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="24-24"];
m2_6 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", color=green, community=0, file="TypeConverter.cs", label="0: var type =\r\n                conversionType.GetGenericArguments()\r\n                              .SingleOrDefault()\r\n                              .ToMaybe()\r\n                              .FromJustOrFail(\r\n                                  new InvalidOperationException(''Non scalar properties should be sequence of type IEnumerable<T>.'')\r\n                    )", span="26-32"];
m2_7 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="var converted = values.Select(value => ChangeTypeScalar(value, type, conversionCulture))", span="38-38"];
m2_8 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="return converted.Any(a => a.MatchNothing())\r\n                ? Maybe.Nothing<object>()\r\n                : Maybe.Just(converted.Select(c => ((Just<object>)c).Value).ToUntypedArray(type));", span="40-42"];
m2_9 [cluster="CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ChangeTypeSequence(System.Collections.Generic.IEnumerable<string>, System.Type, System.Globalization.CultureInfo)", span="24-24"];
m2_15 [cluster="Unk.Select", file="TypeConverter.cs", label="Entry Unk.Select", span=""];
m2_10 [cluster="System.Type.GetGenericArguments()", file="TypeConverter.cs", label="Entry System.Type.GetGenericArguments()", span="0-0"];
m2_56 [cluster="string.ToBoolean()", file="TypeConverter.cs", label="Entry string.ToBoolean()", span="71-71"];
m2_90 [cluster="System.FormatException.FormatException(string)", file="TypeConverter.cs", label="Entry System.FormatException.FormatException(string)", span="0-0"];
m2_88 [cluster="System.Type.GetConstructor(System.Type[])", file="TypeConverter.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m2_17 [cluster="CSharpx.Maybe.Nothing<T>()", file="TypeConverter.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m2_14 [cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", file="TypeConverter.cs", label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355"];
m2_81 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="25-25"];
m2_35 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", file="TypeConverter.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Match<TSuccess, TMessage>(System.Action<TSuccess, System.Collections.Generic.IEnumerable<TMessage>>, System.Action<System.Collections.Generic.IEnumerable<TMessage>>)", span="495-495"];
m2_55 [cluster="string.IsBooleanString()", file="TypeConverter.cs", label="Entry string.IsBooleanString()", span="65-65"];
m2_26 [cluster="Unk.MatchNothing", file="TypeConverter.cs", label="Entry Unk.MatchNothing", span=""];
m2_91 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="Entry CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="104-104"];
m2_92 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="object parsedValue", span="106-106"];
m2_93 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="parsedValue = Enum.Parse(conversionType, value)", span="109-109"];
m2_96 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="Enum.IsDefined(conversionType, parsedValue)", span="115-115"];
m2_94 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label=ArgumentException, span="111-111"];
m2_97 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="return parsedValue;", span="117-117"];
m2_95 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="throw new FormatException();", span="113-113"];
m2_98 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="throw new FormatException();", span="119-119"];
m2_99 [cluster="CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", file="TypeConverter.cs", label="Exit CommandLine.Core.TypeConverter.ToEnum(string, System.Type)", span="104-104"];
m2_89 [cluster="System.Reflection.ConstructorInfo.Invoke(object[])", file="TypeConverter.cs", label="Entry System.Reflection.ConstructorInfo.Invoke(object[])", span="0-0"];
m2_18 [cluster="Unk.ToUntypedArray", file="TypeConverter.cs", label="Entry Unk.ToUntypedArray", span=""];
m2_101 [cluster="System.FormatException.FormatException()", file="TypeConverter.cs", label="Entry System.FormatException.FormatException()", span="0-0"];
m2_36 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", file="TypeConverter.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.ToMaybe<TSuccess, TMessage>()", span="25-25"];
m2_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m2_43 [cluster="System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", file="TypeConverter.cs", label="Entry System.Exception.RethrowWhenAbsentIn(System.Collections.Generic.IEnumerable<System.Type>)", span="11-11"];
m2_103 [file="TypeConverter.cs", label="System.Globalization.CultureInfo", span=""];
m2_104 [file="TypeConverter.cs", label=type, span=""];
m2_105 [file="TypeConverter.cs", label=string, span=""];
m2_106 [file="TypeConverter.cs", label="System.Type", span=""];
m2_107 [file="TypeConverter.cs", label="System.Globalization.CultureInfo", span=""];
m2_108 [file="TypeConverter.cs", label=isFsOption, span=""];
m2_109 [file="TypeConverter.cs", label=type, span=""];
n318 -> n130  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n318 -> n134  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n319 -> n252  [color=darkseagreen4, key=1, label=int, style=dashed];
n320 -> n259  [color=darkseagreen4, key=1, label=int, style=dashed];
n321 -> n273  [color=darkseagreen4, key=1, label=int, style=dashed];
n322 -> n296  [color=darkseagreen4, key=1, label=int, style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n31  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n35  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n39  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n43  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n47  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n51  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n78  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n104  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n108  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n112  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n181  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n190  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n199  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n203  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n207  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n214  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n242  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n254  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n261  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n265  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n275  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n279  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n289  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n310  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n0 -> n314  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=2, style=dotted];
n1 -> n5  [key=2, style=dotted];
n1 -> n6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n1 -> n10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n0  [color=blue, key=0, style=bold];
n6 -> n7  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=2, style=dotted];
n8 -> n6  [color=blue, key=0, style=bold];
n11 -> n12  [key=0, style=solid];
n11 -> n13  [key=2, style=dotted];
n11 -> n14  [key=2, style=dotted];
n12 -> n10  [color=blue, key=0, style=bold];
n13 -> n0  [color=darkorchid, key=3, label="Local variable CommandLine.ParserResult<CommandLine.Tests.Fakes.Options_With_Sequence> result", style=bold];
n15 -> n16  [key=0, style=solid];
n15 -> n298  [color=darkorchid, key=3, label="Parameter variable string[] arguments", style=bold];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=2, style=dotted];
n16 -> n4  [key=2, style=dotted];
n16 -> n5  [key=2, style=dotted];
n16 -> n19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n17 -> n15  [color=blue, key=0, style=bold];
n19 -> n20  [key=0, style=solid];
n20 -> n21  [key=0, style=solid];
n20 -> n13  [key=2, style=dotted];
n20 -> n14  [key=2, style=dotted];
n21 -> n19  [color=blue, key=0, style=bold];
n22 -> n23  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n27  [key=2, style=dotted];
n23 -> n28  [key=2, style=dotted];
n23 -> n29  [key=2, style=dotted];
n23 -> n25  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n24 -> n25  [key=0, style=solid];
n24 -> n0  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n30  [key=2, style=dotted];
n26 -> n22  [color=blue, key=0, style=bold];
n31 -> n32  [key=0, style=solid];
n31 -> n33  [color=darkseagreen4, key=1, label=long, style=dashed];
n32 -> n33  [key=0, style=solid];
n32 -> n0  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n30  [key=2, style=dotted];
n34 -> n31  [color=blue, key=0, style=bold];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [color=darkseagreen4, key=1, label=double, style=dashed];
n36 -> n37  [key=0, style=solid];
n36 -> n0  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n30  [key=2, style=dotted];
n38 -> n35  [color=blue, key=0, style=bold];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n40 -> n41  [key=0, style=solid];
n40 -> n0  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n30  [key=2, style=dotted];
n42 -> n39  [color=blue, key=0, style=bold];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [color=darkseagreen4, key=1, label="int[]", style=dashed];
n44 -> n45  [key=0, style=solid];
n44 -> n0  [key=2, style=dotted];
n45 -> n46  [key=0, style=solid];
n45 -> n30  [key=2, style=dotted];
n46 -> n43  [color=blue, key=0, style=bold];
n47 -> n48  [key=0, style=solid];
n47 -> n49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n48 -> n49  [key=0, style=solid];
n48 -> n0  [key=2, style=dotted];
n49 -> n50  [key=0, style=solid];
n49 -> n30  [key=2, style=dotted];
n50 -> n47  [color=blue, key=0, style=bold];
n51 -> n52  [key=0, style=solid];
n51 -> n53  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n52 -> n53  [key=0, style=solid];
n52 -> n0  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n30  [key=2, style=dotted];
n54 -> n51  [color=blue, key=0, style=bold];
n55 -> n56  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n60  [key=2, style=dotted];
n56 -> n61  [key=2, style=dotted];
n56 -> n58  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n57 -> n58  [key=0, style=solid];
n57 -> n0  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n30  [key=2, style=dotted];
n59 -> n55  [color=blue, key=0, style=bold];
n62 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n67  [key=2, style=dotted];
n63 -> n65  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n64 -> n65  [key=0, style=solid];
n64 -> n0  [key=2, style=dotted];
n65 -> n66  [key=0, style=solid];
n65 -> n30  [key=2, style=dotted];
n66 -> n62  [color=blue, key=0, style=bold];
n68 -> n69  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n67  [key=2, style=dotted];
n69 -> n61  [key=2, style=dotted];
n69 -> n71  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n70 -> n71  [key=0, style=solid];
n70 -> n0  [key=2, style=dotted];
n71 -> n72  [key=0, style=solid];
n71 -> n30  [key=2, style=dotted];
n72 -> n68  [color=blue, key=0, style=bold];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n67  [key=2, style=dotted];
n74 -> n76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n75 -> n76  [key=0, style=solid];
n75 -> n0  [key=2, style=dotted];
n76 -> n77  [key=0, style=solid];
n76 -> n30  [key=2, style=dotted];
n77 -> n73  [color=blue, key=0, style=bold];
n78 -> n79  [key=0, style=solid];
n78 -> n80  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n79 -> n80  [key=0, style=solid];
n79 -> n0  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n80 -> n30  [key=2, style=dotted];
n80 -> n80  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
n81 -> n78  [color=blue, key=0, style=bold];
n82 -> n83  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n83 -> n87  [key=2, style=dotted];
n83 -> n61  [key=2, style=dotted];
n83 -> n85  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n84 -> n85  [key=0, style=solid];
n84 -> n0  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n85 -> n30  [key=2, style=dotted];
n86 -> n82  [color=blue, key=0, style=bold];
n88 -> n89  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n87  [key=2, style=dotted];
n89 -> n61  [key=2, style=dotted];
n89 -> n91  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n90 -> n91  [key=0, style=solid];
n90 -> n0  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n91 -> n30  [key=2, style=dotted];
n92 -> n88  [color=blue, key=0, style=bold];
n93 -> n94  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n94 -> n87  [key=2, style=dotted];
n94 -> n61  [key=2, style=dotted];
n94 -> n96  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n95 -> n96  [key=0, style=solid];
n95 -> n0  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n96 -> n30  [key=2, style=dotted];
n97 -> n93  [color=blue, key=0, style=bold];
n98 -> n99  [key=0, style=solid];
n99 -> n100  [key=0, style=solid];
n99 -> n103  [key=2, style=dotted];
n99 -> n101  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n100 -> n101  [key=0, style=solid];
n100 -> n0  [key=2, style=dotted];
n101 -> n102  [key=0, style=solid];
n101 -> n30  [key=2, style=dotted];
n102 -> n98  [color=blue, key=0, style=bold];
n104 -> n105  [key=0, style=solid];
n104 -> n106  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n105 -> n106  [key=0, style=solid];
n105 -> n0  [key=2, style=dotted];
n106 -> n107  [key=0, style=solid];
n106 -> n30  [key=2, style=dotted];
n107 -> n104  [color=blue, key=0, style=bold];
n108 -> n109  [key=0, style=solid];
n108 -> n110  [color=darkseagreen4, key=1, label="long[]", style=dashed];
n109 -> n110  [key=0, style=solid];
n109 -> n0  [key=2, style=dotted];
n110 -> n111  [key=0, style=solid];
n110 -> n30  [key=2, style=dotted];
n111 -> n108  [color=blue, key=0, style=bold];
n112 -> n113  [key=0, style=solid];
n112 -> n114  [color=darkseagreen4, key=1, label="string[]", style=dashed];
n113 -> n114  [key=0, style=solid];
n113 -> n0  [key=2, style=dotted];
n114 -> n115  [key=0, style=solid];
n114 -> n30  [key=2, style=dotted];
n115 -> n112  [color=blue, key=0, style=bold];
n116 -> n117  [key=0, style=solid];
n117 -> n118  [key=0, style=solid];
n117 -> n103  [key=2, style=dotted];
n117 -> n120  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n118 -> n119  [key=0, style=solid];
n120 -> n121  [key=0, style=solid];
n120 -> n30  [key=2, style=dotted];
n119 -> n120  [key=0, style=solid];
n119 -> n3  [key=2, style=dotted];
n119 -> n4  [key=2, style=dotted];
n119 -> n5  [key=2, style=dotted];
n119 -> n122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n122 -> n123  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n125 -> n130  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n125 -> n134  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
n121 -> n116  [color=blue, key=0, style=bold];
n123 -> n124  [key=0, style=solid];
n123 -> n103  [key=2, style=dotted];
n124 -> n122  [color=blue, key=0, style=bold];
n126 -> n127  [key=0, style=solid];
n126 -> n128  [key=2, style=dotted];
n126 -> n129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n130 -> n131  [key=0, style=solid];
n130 -> n132  [key=2, style=dotted];
n130 -> n133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n134 -> n135  [key=0, style=solid];
n134 -> n136  [key=2, style=dotted];
n127 -> n125  [color=blue, key=0, style=bold];
n129 -> n130  [key=0, style=solid];
n131 -> n129  [color=blue, key=0, style=bold];
n133 -> n134  [key=0, style=solid];
n135 -> n133  [color=blue, key=0, style=bold];
n137 -> n138  [key=0, style=solid];
n138 -> n139  [key=0, style=solid];
n138 -> n142  [key=2, style=dotted];
n138 -> n61  [key=2, style=dotted];
n138 -> n140  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n139 -> n140  [key=0, style=solid];
n139 -> n0  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n140 -> n30  [key=2, style=dotted];
n141 -> n137  [color=blue, key=0, style=bold];
n143 -> n144  [key=0, style=solid];
n144 -> n145  [key=0, style=solid];
n144 -> n148  [key=2, style=dotted];
n144 -> n146  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n145 -> n146  [key=0, style=solid];
n145 -> n0  [key=2, style=dotted];
n146 -> n147  [key=0, style=solid];
n146 -> n30  [key=2, style=dotted];
n147 -> n143  [color=blue, key=0, style=bold];
n149 -> n150  [key=0, style=solid];
n150 -> n151  [key=0, style=solid];
n150 -> n154  [key=2, style=dotted];
n150 -> n61  [key=2, style=dotted];
n150 -> n152  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n151 -> n152  [key=0, style=solid];
n151 -> n0  [key=2, style=dotted];
n152 -> n153  [key=0, style=solid];
n152 -> n30  [key=2, style=dotted];
n153 -> n149  [color=blue, key=0, style=bold];
n155 -> n156  [key=0, style=solid];
n156 -> n157  [key=0, style=solid];
n156 -> n154  [key=2, style=dotted];
n156 -> n61  [key=2, style=dotted];
n156 -> n158  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n157 -> n158  [key=0, style=solid];
n157 -> n0  [key=2, style=dotted];
n158 -> n159  [key=0, style=solid];
n158 -> n30  [key=2, style=dotted];
n159 -> n155  [color=blue, key=0, style=bold];
n160 -> n161  [key=0, style=solid];
n161 -> n162  [key=0, style=solid];
n161 -> n67  [key=2, style=dotted];
n161 -> n61  [key=2, style=dotted];
n161 -> n163  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n162 -> n163  [key=0, style=solid];
n162 -> n0  [key=2, style=dotted];
n163 -> n164  [key=0, style=solid];
n163 -> n30  [key=2, style=dotted];
n164 -> n160  [color=blue, key=0, style=bold];
n165 -> n166  [key=0, style=solid];
n166 -> n167  [key=0, style=solid];
n166 -> n170  [key=2, style=dotted];
n166 -> n168  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n167 -> n168  [key=0, style=solid];
n167 -> n0  [key=2, style=dotted];
n168 -> n169  [key=0, style=solid];
n168 -> n30  [key=2, style=dotted];
n169 -> n165  [color=blue, key=0, style=bold];
n171 -> n172  [key=0, style=solid];
n172 -> n173  [key=0, style=solid];
n172 -> n170  [key=2, style=dotted];
n172 -> n174  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n173 -> n174  [key=0, style=solid];
n173 -> n0  [key=2, style=dotted];
n174 -> n175  [key=0, style=solid];
n174 -> n30  [key=2, style=dotted];
n175 -> n171  [color=blue, key=0, style=bold];
n176 -> n177  [key=0, style=solid];
n177 -> n178  [key=0, style=solid];
n177 -> n170  [key=2, style=dotted];
n177 -> n179  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n178 -> n179  [key=0, style=solid];
n178 -> n0  [key=2, style=dotted];
n179 -> n180  [key=0, style=solid];
n179 -> n30  [key=2, style=dotted];
n180 -> n176  [color=blue, key=0, style=bold];
n181 -> n182  [key=0, style=solid];
n181 -> n183  [color=darkseagreen4, key=1, label=string, style=dashed];
n182 -> n183  [key=0, style=solid];
n182 -> n0  [key=2, style=dotted];
n183 -> n184  [key=0, style=solid];
n183 -> n30  [key=2, style=dotted];
n184 -> n181  [color=blue, key=0, style=bold];
n185 -> n186  [key=0, style=solid];
n186 -> n187  [key=0, style=solid];
n186 -> n154  [key=2, style=dotted];
n186 -> n188  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n187 -> n188  [key=0, style=solid];
n187 -> n0  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n188 -> n30  [key=2, style=dotted];
n189 -> n185  [color=blue, key=0, style=bold];
n190 -> n191  [key=0, style=solid];
n190 -> n192  [color=darkseagreen4, key=1, label=string, style=dashed];
n191 -> n192  [key=0, style=solid];
n191 -> n0  [key=2, style=dotted];
n192 -> n193  [key=0, style=solid];
n192 -> n30  [key=2, style=dotted];
n193 -> n190  [color=blue, key=0, style=bold];
n194 -> n195  [key=0, style=solid];
n195 -> n196  [key=0, style=solid];
n195 -> n67  [key=2, style=dotted];
n195 -> n197  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n196 -> n197  [key=0, style=solid];
n196 -> n0  [key=2, style=dotted];
n197 -> n198  [key=0, style=solid];
n197 -> n30  [key=2, style=dotted];
n198 -> n194  [color=blue, key=0, style=bold];
n199 -> n200  [key=0, style=solid];
n199 -> n201  [color=darkseagreen4, key=1, label="int?", style=dashed];
n200 -> n201  [key=0, style=solid];
n200 -> n0  [key=2, style=dotted];
n201 -> n202  [key=0, style=solid];
n201 -> n30  [key=2, style=dotted];
n202 -> n199  [color=blue, key=0, style=bold];
n203 -> n204  [key=0, style=solid];
n203 -> n205  [color=darkseagreen4, key=1, label="long?", style=dashed];
n204 -> n205  [key=0, style=solid];
n204 -> n0  [key=2, style=dotted];
n205 -> n206  [key=0, style=solid];
n205 -> n30  [key=2, style=dotted];
n206 -> n203  [color=blue, key=0, style=bold];
n207 -> n208  [key=0, style=solid];
n207 -> n210  [color=darkseagreen4, key=1, label=string, style=dashed];
n207 -> n211  [color=darkseagreen4, key=1, label=bool, style=dashed];
n208 -> n209  [key=0, style=solid];
n208 -> n0  [key=2, style=dotted];
n208 -> n210  [color=darkseagreen4, key=1, label=result, style=dashed];
n208 -> n211  [color=darkseagreen4, key=1, label=result, style=dashed];
n210 -> n211  [key=0, style=solid];
n210 -> n30  [key=2, style=dotted];
n211 -> n212  [key=0, style=solid];
n211 -> n213  [key=2, style=dotted];
n211 -> n30  [key=2, style=dotted];
n209 -> n210  [key=0, style=solid];
n209 -> n211  [key=0, style=solid];
n212 -> n207  [color=blue, key=0, style=bold];
n214 -> n215  [key=0, style=solid];
n214 -> n217  [color=darkseagreen4, key=1, label=int, style=dashed];
n214 -> n218  [color=darkseagreen4, key=1, label=bool, style=dashed];
n215 -> n216  [key=0, style=solid];
n215 -> n0  [key=2, style=dotted];
n215 -> n217  [color=darkseagreen4, key=1, label=result, style=dashed];
n215 -> n218  [color=darkseagreen4, key=1, label=result, style=dashed];
n217 -> n218  [key=0, style=solid];
n217 -> n30  [key=2, style=dotted];
n218 -> n219  [key=0, style=solid];
n218 -> n213  [key=2, style=dotted];
n218 -> n30  [key=2, style=dotted];
n216 -> n217  [key=0, style=solid];
n216 -> n218  [key=0, style=solid];
n219 -> n214  [color=blue, key=0, style=bold];
n220 -> n221  [key=0, style=solid];
n221 -> n222  [color=red, key=0, style=solid];
n221 -> n221  [color=darkorchid, key=3, label="Local variable System.Action test", style=bold];
n221 -> d222  [color=green, key=0, style=solid];
n222 -> n223  [color=red, key=0, style=solid];
n222 -> n224  [color=red, key=2, style=dotted];
n223 -> n220  [color=blue, key=0, style=bold];
n225 -> n226  [key=0, style=solid];
n226 -> n227  [key=0, style=solid];
n226 -> n0  [key=2, style=dotted];
n227 -> n225  [color=blue, key=0, style=bold];
n228 -> n229  [key=0, style=solid];
n229 -> n230  [color=red, key=0, style=solid];
n229 -> n229  [color=darkorchid, key=3, label="Local variable System.Action test", style=bold];
n229 -> d230  [color=green, key=0, style=solid];
n230 -> n231  [color=red, key=0, style=solid];
n230 -> n224  [color=red, key=2, style=dotted];
n231 -> n228  [color=blue, key=0, style=bold];
n232 -> n233  [key=0, style=solid];
n233 -> n234  [key=0, style=solid];
n233 -> n0  [key=2, style=dotted];
n234 -> n232  [color=blue, key=0, style=bold];
n235 -> n236  [key=0, style=solid];
n236 -> n237  [color=red, key=0, style=solid];
n236 -> n236  [color=darkorchid, key=3, label="Local variable System.Action test", style=bold];
n236 -> d237  [color=green, key=0, style=solid];
n237 -> n238  [color=red, key=0, style=solid];
n237 -> n224  [color=red, key=2, style=dotted];
n238 -> n235  [color=blue, key=0, style=bold];
n239 -> n240  [key=0, style=solid];
n240 -> n241  [key=0, style=solid];
n240 -> n0  [key=2, style=dotted];
n241 -> n239  [color=blue, key=0, style=bold];
n242 -> n243  [key=0, style=solid];
n242 -> n244  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
n242 -> n245  [color=darkseagreen4, key=1, label=int, style=dashed];
n242 -> n252  [color=darkseagreen4, key=1, label=int, style=dashed];
n242 -> n246  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
n243 -> n244  [key=0, style=solid];
n243 -> n0  [key=2, style=dotted];
n243 -> n245  [color=darkseagreen4, key=1, label=result, style=dashed];
n243 -> n247  [color=darkseagreen4, key=1, label=result, style=dashed];
n244 -> n245  [key=0, style=solid];
n244 -> n246  [key=0, style=solid];
n245 -> n248  [key=0, style=solid];
n245 -> n249  [key=2, style=dotted];
n245 -> n250  [key=2, style=dotted];
n245 -> n251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n252 -> n253  [key=0, style=solid];
n246 -> n247  [key=0, style=solid];
n246 -> n248  [key=0, style=solid];
n247 -> n248  [key=0, style=solid];
n247 -> n249  [key=2, style=dotted];
n247 -> n224  [key=2, style=dotted];
n248 -> n242  [color=blue, key=0, style=bold];
n251 -> n252  [key=0, style=solid];
n253 -> n251  [color=blue, key=0, style=bold];
n254 -> n255  [key=0, style=solid];
n254 -> n256  [color=darkseagreen4, key=1, label=int, style=dashed];
n254 -> n259  [color=darkseagreen4, key=1, label=int, style=dashed];
n255 -> n256  [key=0, style=solid];
n255 -> n0  [key=2, style=dotted];
n256 -> n257  [key=0, style=solid];
n256 -> n249  [key=2, style=dotted];
n256 -> n250  [key=2, style=dotted];
n256 -> n258  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n259 -> n260  [key=0, style=solid];
n257 -> n254  [color=blue, key=0, style=bold];
n258 -> n259  [key=0, style=solid];
n260 -> n258  [color=blue, key=0, style=bold];
n261 -> n262  [key=0, style=solid];
n261 -> n263  [color=darkseagreen4, key=1, label=string, style=dashed];
n262 -> n263  [key=0, style=solid];
n262 -> n0  [key=2, style=dotted];
n263 -> n264  [key=0, style=solid];
n263 -> n30  [key=2, style=dotted];
n264 -> n261  [color=blue, key=0, style=bold];
n265 -> n266  [key=0, style=solid];
n265 -> n267  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
n265 -> n268  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n273  [color=darkseagreen4, key=1, label=int, style=dashed];
n265 -> n269  [color=darkseagreen4, key=1, label="CommandLine.ParserResultType", style=dashed];
n266 -> n267  [key=0, style=solid];
n266 -> n0  [key=2, style=dotted];
n266 -> n268  [color=darkseagreen4, key=1, label=result, style=dashed];
n266 -> n270  [color=darkseagreen4, key=1, label=result, style=dashed];
n267 -> n268  [key=0, style=solid];
n267 -> n269  [key=0, style=solid];
n268 -> n271  [key=0, style=solid];
n268 -> n249  [key=2, style=dotted];
n268 -> n250  [key=2, style=dotted];
n268 -> n272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n273 -> n274  [key=0, style=solid];
n269 -> n270  [key=0, style=solid];
n269 -> n271  [key=0, style=solid];
n270 -> n271  [key=0, style=solid];
n270 -> n249  [key=2, style=dotted];
n270 -> n224  [key=2, style=dotted];
n271 -> n265  [color=blue, key=0, style=bold];
n272 -> n273  [key=0, style=solid];
n274 -> n272  [color=blue, key=0, style=bold];
n275 -> n276  [key=0, style=solid];
n275 -> n277  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Required_Set_To_True_For_Values", style=dashed];
n276 -> n277  [key=0, style=solid];
n276 -> n0  [key=2, style=dotted];
n277 -> n278  [key=0, style=solid];
n277 -> n30  [key=2, style=dotted];
n278 -> n275  [color=blue, key=0, style=bold];
n279 -> n280  [key=0, style=solid];
n279 -> n281  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Scalar_Value_And_Adjacent_SequenceString", style=dashed];
n280 -> n281  [key=0, style=solid];
n280 -> n0  [key=2, style=dotted];
n281 -> n282  [key=0, style=solid];
n281 -> n30  [key=2, style=dotted];
n282 -> n279  [color=blue, key=0, style=bold];
n283 -> n284  [key=0, style=solid];
n284 -> n285  [key=0, style=solid];
n284 -> n288  [key=2, style=dotted];
n284 -> n286  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n285 -> n286  [key=0, style=solid];
n285 -> n0  [key=2, style=dotted];
n286 -> n287  [key=0, style=solid];
n286 -> n30  [key=2, style=dotted];
n287 -> n283  [color=blue, key=0, style=bold];
n289 -> n290  [key=0, style=solid];
n289 -> n292  [color=darkseagreen4, key=1, label=int, style=dashed];
n289 -> n296  [color=darkseagreen4, key=1, label=int, style=dashed];
n290 -> n291  [key=0, style=solid];
n290 -> n0  [key=2, style=dotted];
n292 -> n293  [key=0, style=solid];
n292 -> n294  [key=2, style=dotted];
n292 -> n249  [key=2, style=dotted];
n292 -> n250  [key=2, style=dotted];
n292 -> n295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n296 -> n297  [key=0, style=solid];
n291 -> n292  [key=0, style=solid];
n293 -> n289  [color=blue, key=0, style=bold];
n295 -> n296  [key=0, style=solid];
n297 -> n295  [color=blue, key=0, style=bold];
n298 -> n299  [key=0, style=solid];
n298 -> n300  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Immutable_Simple_Options", style=dashed];
n299 -> n300  [key=0, style=solid];
n299 -> n15  [key=2, style=dotted];
n300 -> n301  [key=0, style=solid];
n300 -> n30  [key=2, style=dotted];
n301 -> n298  [color=blue, key=0, style=bold];
n302 -> n303  [key=0, style=solid];
n303 -> n304  [key=0, style=solid];
n303 -> n307  [key=2, style=dotted];
n303 -> n308  [key=2, style=dotted];
n303 -> n309  [key=2, style=dotted];
n303 -> n305  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
n304 -> n305  [key=0, style=solid];
n304 -> n0  [key=2, style=dotted];
n305 -> n306  [key=0, style=solid];
n305 -> n30  [key=2, style=dotted];
n306 -> n302  [color=blue, key=0, style=bold];
n310 -> n311  [key=0, style=solid];
n310 -> n312  [color=darkseagreen4, key=1, label=string, style=dashed];
n311 -> n312  [key=0, style=solid];
n311 -> n0  [key=2, style=dotted];
n312 -> n313  [key=0, style=solid];
n312 -> n30  [key=2, style=dotted];
n313 -> n310  [color=blue, key=0, style=bold];
n314 -> n315  [key=0, style=solid];
n314 -> n316  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Options_With_Guid", style=dashed];
n315 -> n316  [key=0, style=solid];
n315 -> n0  [key=2, style=dotted];
n316 -> n317  [key=0, style=solid];
n316 -> n30  [key=2, style=dotted];
n317 -> n314  [color=blue, key=0, style=bold];
d222 -> n223  [color=green, key=0, style=solid];
d222 -> n224  [color=green, key=2, style=dotted];
d230 -> n231  [color=green, key=0, style=solid];
d230 -> n224  [color=green, key=2, style=dotted];
d237 -> n238  [color=green, key=0, style=solid];
d237 -> n224  [color=green, key=2, style=dotted];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_150  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_146  [key=2, style=dotted];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_147  [key=2, style=dotted];
m0_150 -> m0_141  [key=2, style=dotted];
m0_151 -> m0_148  [color=blue, key=0, style=bold];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_97  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_92 -> m0_98  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_92 -> m0_94  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_93  [color=darkorchid, key=3, label="Local variable System.Func<bool> isMutable", style=bold];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_91  [key=2, style=dotted];
m0_95 -> m0_92  [color=blue, key=0, style=bold];
m0_152 -> m0_153  [key=0, style=solid];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_40  [key=2, style=dotted];
m0_153 -> m0_155  [key=2, style=dotted];
m0_153 -> m0_156  [key=2, style=dotted];
m0_154 -> m0_152  [color=blue, key=0, style=bold];
m0_83 -> m0_84  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_87  [key=2, style=dotted];
m0_84 -> m0_88  [key=2, style=dotted];
m0_84 -> m0_89  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_90  [key=2, style=dotted];
m0_85 -> m0_91  [key=2, style=dotted];
m0_86 -> m0_83  [color=blue, key=0, style=bold];
m0_132 -> m0_133  [key=0, style=solid];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_135  [key=2, style=dotted];
m0_134 -> m0_132  [color=blue, key=0, style=bold];
m0_60 -> m0_61  [color=green, key=0, style=solid];
m0_60 -> m0_62  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m0_60 -> m0_71  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_60 -> m0_60  [color=darkorchid, key=3, label="method methodReturn T SetValue", style=bold];
m0_61 -> m0_62  [color=green, key=0, style=solid];
m0_61 -> m0_76  [color=green, key=1, label="System.Exception", style=dashed];
m0_61 -> m0_64  [color=green, key=1, label=fail, style=dashed];
m0_61 -> m0_66  [color=green, key=1, label=fail, style=dashed];
m0_61 -> m0_68  [color=green, key=1, label=fail, style=dashed];
m0_61 -> m0_70  [color=green, key=1, label=fail, style=dashed];
m0_61 -> m0_61  [color=green, key=3, label="Local variable System.Action<System.Exception> fail", style=bold];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_65  [key=0, style=solid];
m0_62 -> m0_67  [key=0, style=solid];
m0_62 -> m0_69  [key=0, style=solid];
m0_62 -> m0_71  [key=0, style=solid];
m0_62 -> m0_73  [key=2, style=dotted];
m0_71 -> m0_72  [key=0, style=solid];
m0_64 -> m0_71  [key=0, style=solid];
m0_64 -> m0_74  [key=2, style=dotted];
m0_66 -> m0_71  [key=0, style=solid];
m0_66 -> m0_74  [key=2, style=dotted];
m0_68 -> m0_71  [key=0, style=solid];
m0_68 -> m0_74  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_74  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_72 -> m0_60  [color=blue, key=0, style=bold];
m0_46 -> m0_47  [key=0, style=solid];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=2, style=dotted];
m0_48 -> m0_46  [color=blue, key=0, style=bold];
m0_14 -> m0_15  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_3  [key=2, style=dotted];
m0_15 -> m0_4  [key=2, style=dotted];
m0_15 -> m0_17  [key=2, style=dotted];
m0_15 -> m0_18  [key=2, style=dotted];
m0_15 -> m0_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_15 -> m0_15  [color=darkseagreen4, key=1, label=attr, style=dashed];
m0_16 -> m0_14  [color=blue, key=0, style=bold];
m0_129 -> m0_130  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_13  [key=2, style=dotted];
m0_12 -> m0_10  [color=blue, key=0, style=bold];
m0_19 -> m0_20  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_22  [key=2, style=dotted];
m0_21 -> m0_19  [color=blue, key=0, style=bold];
m0_27 -> m0_28  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_13  [key=2, style=dotted];
m0_29 -> m0_27  [color=blue, key=0, style=bold];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_9  [key=2, style=dotted];
m0_56 -> m0_59  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_55 -> m0_56  [key=0, style=solid];
m0_58 -> m0_55  [color=blue, key=0, style=bold];
m0_76 -> m0_77  [color=green, key=0, style=solid];
m0_76 -> m0_78  [color=green, key=2, style=dotted];
m0_75 -> m0_76  [color=green, key=0, style=solid];
m0_77 -> m0_75  [color=blue, key=0, style=bold];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_101  [key=2, style=dotted];
m0_97 -> m0_7  [key=2, style=dotted];
m0_97 -> m0_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_97 -> m0_99  [color=darkseagreen4, key=1, label=props, style=dashed];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_102  [key=2, style=dotted];
m0_98 -> m0_103  [key=2, style=dotted];
m0_96 -> m0_97  [key=0, style=solid];
m0_104 -> m0_105  [key=0, style=solid];
m0_99 -> m0_100  [key=0, style=solid];
m0_100 -> m0_96  [color=blue, key=0, style=bold];
m0_105 -> m0_106  [key=0, style=solid];
m0_106 -> m0_104  [color=blue, key=0, style=bold];
m0_130 -> m0_131  [key=0, style=solid];
m0_131 -> m0_129  [color=blue, key=0, style=bold];
m0_40 -> m0_40  [color=darkorchid, key=3, label="method methodReturn System.Type GetTypeInfo", style=bold];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_110  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_107 -> m0_111  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_107 -> m0_112  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_107 -> m0_79  [color=darkorchid, key=3, label="method methodReturn object CreateDefaultForImmutable", style=bold];
m0_107 -> m0_83  [color=darkorchid, key=3, label="method methodReturn object CreateDefaultForImmutable", style=bold];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_110  [key=0, style=solid];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_112  [key=0, style=solid];
m0_110 -> m0_40  [key=2, style=dotted];
m0_110 -> m0_114  [key=2, style=dotted];
m0_111 -> m0_113  [key=0, style=solid];
m0_111 -> m0_115  [key=2, style=dotted];
m0_111 -> m0_116  [key=2, style=dotted];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_117  [key=2, style=dotted];
m0_109 -> m0_113  [key=0, style=solid];
m0_113 -> m0_107  [color=blue, key=0, style=bold];
m0_23 -> m0_24  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_3  [key=2, style=dotted];
m0_24 -> m0_4  [key=2, style=dotted];
m0_24 -> m0_5  [key=2, style=dotted];
m0_24 -> n224  [key=2, style=dotted];
m0_24 -> m0_7  [key=2, style=dotted];
m0_24 -> m0_8  [key=2, style=dotted];
m0_24 -> m0_26  [key=2, style=dotted];
m0_24 -> m0_17  [key=2, style=dotted];
m0_24 -> m0_18  [key=2, style=dotted];
m0_24 -> m0_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_24 -> m0_24  [color=darkseagreen4, key=1, label=pi, style=dashed];
m0_25 -> m0_23  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_121  [color=darkorchid, key=3, label="Parameter variable System.Func<System.Reflection.PropertyInfo, T> selector", style=bold];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> n224  [key=2, style=dotted];
m0_1 -> m0_7  [key=2, style=dotted];
m0_1 -> m0_8  [key=2, style=dotted];
m0_1 -> m0_9  [key=2, style=dotted];
m0_1 -> m0_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_1 -> m0_1  [color=darkseagreen4, key=1, label=pi, style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_118 -> m0_119  [key=0, style=solid];
m0_118 -> m0_120  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_118 -> m0_121  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_118 -> m0_122  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_121  [key=0, style=solid];
m0_119 -> m0_124  [key=2, style=dotted];
m0_120 -> m0_123  [key=0, style=solid];
m0_120 -> m0_125  [key=2, style=dotted];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_126  [key=2, style=dotted];
m0_121 -> m0_127  [key=2, style=dotted];
m0_121 -> m0_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_128  [key=2, style=dotted];
m0_123 -> m0_118  [color=blue, key=0, style=bold];
m0_142 -> m0_143  [key=0, style=solid];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_146  [key=2, style=dotted];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_147  [key=2, style=dotted];
m0_144 -> m0_141  [key=2, style=dotted];
m0_145 -> m0_142  [color=blue, key=0, style=bold];
m0_41 -> m0_42  [key=0, style=solid];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_44  [key=2, style=dotted];
m0_42 -> m0_45  [key=2, style=dotted];
m0_43 -> m0_41  [color=blue, key=0, style=bold];
m0_79 -> m0_80  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=2, style=dotted];
m0_81 -> m0_79  [color=blue, key=0, style=bold];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_56  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m0_50 -> m0_57  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_53  [key=2, style=dotted];
m0_51 -> m0_54  [key=2, style=dotted];
m0_51 -> m0_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_52 -> m0_50  [color=blue, key=0, style=bold];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_32  [color=crimson, key=0, style=bold];
m0_30 -> m0_33  [color=crimson, key=0, style=bold];
m0_30 -> m0_35  [color=crimson, key=0, style=bold];
m0_30 -> m0_37  [color=crimson, key=0, style=bold];
m0_30 -> m0_34  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_30 -> m0_36  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [key=0, style=solid];
m0_32 -> m0_33  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid];
m0_35 -> m0_34  [key=0, style=solid];
m0_37 -> m0_36  [key=0, style=solid];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=0, style=solid];
m0_34 -> m0_39  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_38  [key=0, style=solid];
m0_36 -> m0_40  [key=2, style=dotted];
m0_36 -> m0_30  [key=2, style=dotted];
m0_38 -> m0_30  [color=blue, key=0, style=bold];
m0_157 -> m0_158  [key=0, style=solid];
m0_158 -> m0_159  [key=0, style=solid];
m0_159 -> m0_157  [color=blue, key=0, style=bold];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_138  [color=darkseagreen4, key=1, label="params object[]", style=dashed];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_140  [key=2, style=dotted];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_141  [key=2, style=dotted];
m0_139 -> m0_136  [color=blue, key=0, style=bold];
m0_160 -> m0_56  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m0_161 -> m0_57  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_162 -> m0_97  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_162 -> m0_98  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_15  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m1_13 -> m1_17  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m1_13 -> m1_13  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Core.Specification> ThrowingValidate", style=bold];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_17  [key=0, style=solid];
m1_14 -> m1_22  [color=darkseagreen4, key=1, label=guard, style=dashed];
m1_14 -> m1_16  [color=green, key=1, label=guard, style=dashed];
m1_15 -> m1_16  [color=green, key=0, style=solid];
m1_15 -> m1_14  [key=0, style=solid];
m1_15 -> m1_19  [key=2, style=dotted];
m1_15 -> m1_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_17 -> m1_18  [key=0, style=solid];
m1_16 -> m1_18  [color=green, key=0, style=solid];
m1_16 -> m1_20  [color=green, key=2, style=dotted];
m1_18 -> m1_13  [color=blue, key=0, style=bold];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_28  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_25 -> m1_29  [color=darkseagreen4, key=1, label="System.Func<int, int, bool>", style=dashed];
m1_25 -> m1_30  [color=darkorchid, key=3, label="method methodReturn bool HavingRange", style=bold];
m1_26 -> m1_27  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=0, style=solid];
m1_28 -> m1_32  [key=2, style=dotted];
m1_29 -> m1_31  [key=0, style=solid];
m1_29 -> n14  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_31 -> m1_25  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_3 -> m1_4  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_3  [color=blue, key=0, style=bold];
m1_21 -> m1_22  [key=0, style=solid];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_24  [key=2, style=dotted];
m1_23 -> m1_21  [color=blue, key=0, style=bold];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_42  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_40 -> m1_43  [color=darkseagreen4, key=1, label="System.Func<int, bool>", style=dashed];
m1_40 -> m1_30  [color=darkorchid, key=3, label="method methodReturn bool HavingMax", style=bold];
m1_41 -> m1_42  [key=0, style=solid];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_44  [key=0, style=solid];
m1_42 -> m1_32  [key=2, style=dotted];
m1_43 -> m1_45  [key=0, style=solid];
m1_43 -> m1_24  [key=2, style=dotted];
m1_44 -> m1_45  [key=0, style=solid];
m1_45 -> m1_40  [color=blue, key=0, style=bold];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid];
m1_12 -> m1_10  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_36  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m1_34 -> m1_37  [color=darkseagreen4, key=1, label="System.Func<int, bool>", style=dashed];
m1_34 -> m1_30  [color=darkorchid, key=3, label="method methodReturn bool HavingMin", style=bold];
m1_35 -> m1_36  [key=0, style=solid];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_38  [key=0, style=solid];
m1_36 -> m1_32  [key=2, style=dotted];
m1_37 -> m1_39  [key=0, style=solid];
m1_37 -> m1_24  [key=2, style=dotted];
m1_38 -> m1_39  [key=0, style=solid];
m1_39 -> m1_34  [color=blue, key=0, style=bold];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_9  [key=2, style=dotted];
m1_8 -> m1_6  [color=blue, key=0, style=bold];
m1_46 -> m1_22  [color=darkseagreen4, key=1, label=guard, style=dashed];
m2_4 -> m2_30  [key=0, style=solid];
m2_4 -> m2_0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m2_4 -> m2_6  [color=green, key=3, label="Parameter variable System.Type conversionType", style=bold];
m2_4 -> m2_5  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m2_4 -> m2_7  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_34  [key=2, style=dotted];
m2_30 -> m2_32  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_35  [key=2, style=dotted];
m2_31 -> m2_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_31 -> m2_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_36  [key=2, style=dotted];
m2_33 -> m2_4  [color=blue, key=0, style=bold];
m2_34 -> m2_44  [key=0, style=solid];
m2_34 -> m2_52  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_34 -> m2_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_34 -> m2_62  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_34 -> m2_69  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_34 -> m2_63  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_34 -> m2_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_34 -> m2_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_34 -> m2_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_34 -> m2_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_34 -> m2_45  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_34 -> m2_83  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_34 -> m2_84  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_34 -> m2_46  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_34 -> m2_4  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_46  [color=darkseagreen4, key=1, label=changeType, style=dashed];
m2_44 -> m2_44  [color=darkorchid, key=3, label="Local variable System.Func<object> changeType", style=bold];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_45  [color=darkorchid, key=3, label="Local variable System.Func<object> makeType", style=bold];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_48  [key=2, style=dotted];
m2_46 -> m2_49  [key=2, style=dotted];
m2_46 -> m2_50  [key=2, style=dotted];
m2_47 -> m2_34  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_1 -> m2_4  [key=2, style=dotted];
m2_1 -> m2_5  [key=2, style=dotted];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_82 -> m2_83  [key=0, style=solid];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_4  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_23 -> m2_24  [key=0, style=solid];
m2_27 -> m2_28  [key=0, style=solid];
m2_22 -> m2_20  [color=blue, key=0, style=bold];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=2, style=dotted];
m2_25 -> m2_23  [color=blue, key=0, style=bold];
m2_28 -> m2_29  [key=0, style=solid];
m2_29 -> m2_27  [color=blue, key=0, style=bold];
m2_37 -> m2_38  [key=0, style=solid];
m2_39 -> m2_40  [key=0, style=solid];
m2_38 -> m2_37  [color=blue, key=0, style=bold];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_42  [key=2, style=dotted];
m2_40 -> m2_43  [key=2, style=dotted];
m2_41 -> m2_39  [color=blue, key=0, style=bold];
m2_52 -> m2_53  [key=0, style=solid];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_49  [key=2, style=dotted];
m2_61 -> m2_69  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m2_61 -> m2_64  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m2_61 -> m2_74  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m2_61 -> m2_65  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m2_61 -> m2_79  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m2_62 -> m2_63  [key=0, style=solid];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_71  [key=2, style=dotted];
m2_69 -> m2_72  [key=2, style=dotted];
m2_63 -> m2_64  [key=0, style=solid];
m2_63 -> m2_59  [key=2, style=dotted];
m2_63 -> m2_74  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_63 -> m2_65  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_63 -> m2_79  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_66  [color=darkseagreen4, key=1, label=withValue, style=dashed];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_76  [key=2, style=dotted];
m2_74 -> m2_77  [key=2, style=dotted];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_59  [key=2, style=dotted];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_55  [key=2, style=dotted];
m2_53 -> m2_56  [key=2, style=dotted];
m2_53 -> m2_57  [key=2, style=dotted];
m2_53 -> m2_58  [key=2, style=dotted];
m2_53 -> m2_59  [key=2, style=dotted];
m2_83 -> m2_84  [key=0, style=solid];
m2_83 -> m2_88  [key=2, style=dotted];
m2_84 -> m2_87  [key=0, style=solid];
m2_84 -> m2_89  [key=2, style=dotted];
m2_51 -> m2_52  [key=0, style=solid];
m2_54 -> m2_51  [color=blue, key=0, style=bold];
m2_60 -> m2_61  [key=0, style=solid];
m2_65 -> m2_66  [key=0, style=solid];
m2_79 -> m2_80  [key=0, style=solid];
m2_79 -> m2_81  [key=2, style=dotted];
m2_67 -> m2_60  [color=blue, key=0, style=bold];
m2_68 -> m2_69  [key=0, style=solid];
m2_70 -> m2_68  [color=blue, key=0, style=bold];
m2_73 -> m2_74  [key=0, style=solid];
m2_75 -> m2_73  [color=blue, key=0, style=bold];
m2_78 -> m2_79  [key=0, style=solid];
m2_80 -> m2_78  [color=blue, key=0, style=bold];
m2_85 -> m2_86  [key=0, style=solid];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_90  [key=2, style=dotted];
m2_87 -> m2_82  [color=blue, key=0, style=bold];
m2_58 -> m2_34  [color=darkorchid, key=3, label="Parameter variable System.Type conversionType", style=bold];
m2_58 -> m2_92  [color=darkorchid, key=3, label="method methodReturn object ToEnum", style=bold];
m2_5 -> m2_6  [color=green, key=0, style=solid];
m2_5 -> m2_7  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_5 -> m2_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_5 -> m2_0  [color=darkorchid, key=3, label="Parameter variable System.Globalization.CultureInfo conversionCulture", style=bold];
m2_6 -> m2_7  [color=green, key=0, style=solid];
m2_6 -> m2_10  [color=green, key=2, style=dotted];
m2_6 -> m2_11  [color=green, key=2, style=dotted];
m2_6 -> m2_12  [color=green, key=2, style=dotted];
m2_6 -> m2_13  [color=green, key=2, style=dotted];
m2_6 -> m2_14  [color=green, key=2, style=dotted];
m2_6 -> m2_21  [color=green, key=1, label=type, style=dashed];
m2_6 -> m2_8  [color=green, key=1, label=type, style=dashed];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_15  [key=2, style=dotted];
m2_7 -> m2_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_16  [key=2, style=dotted];
m2_8 -> m2_17  [key=2, style=dotted];
m2_8 -> m2_15  [key=2, style=dotted];
m2_8 -> m2_18  [key=2, style=dotted];
m2_8 -> n3  [key=2, style=dotted];
m2_8 -> m2_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_8 -> m2_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_9 -> m2_5  [color=blue, key=0, style=bold];
m2_91 -> m2_92  [key=0, style=solid];
m2_91 -> m2_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_91 -> m2_96  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_92 -> m2_93  [key=0, style=solid];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_96  [key=0, style=solid];
m2_93 -> m2_100  [key=2, style=dotted];
m2_93 -> m2_97  [color=darkseagreen4, key=1, label=parsedValue, style=dashed];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_98  [key=0, style=solid];
m2_96 -> m2_102  [key=2, style=dotted];
m2_94 -> m2_95  [key=0, style=solid];
m2_97 -> m2_99  [key=0, style=solid];
m2_95 -> m2_99  [key=0, style=solid];
m2_95 -> m2_101  [key=2, style=dotted];
m2_98 -> m2_99  [key=0, style=solid];
m2_98 -> m2_101  [key=2, style=dotted];
m2_99 -> m2_91  [color=blue, key=0, style=bold];
m2_103 -> m2_21  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_104 -> m2_21  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_105 -> m2_52  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_105 -> m2_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_105 -> m2_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_105 -> m2_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_105 -> m2_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_105 -> m2_84  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_106 -> m2_52  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_106 -> m2_61  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_106 -> m2_62  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_106 -> m2_69  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_106 -> m2_63  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_106 -> m2_53  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_106 -> m2_83  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_107 -> m2_52  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_107 -> m2_64  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_107 -> m2_74  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m2_108 -> m2_69  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m2_108 -> m2_74  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m2_108 -> m2_79  [color=darkseagreen4, key=1, label=isFsOption, style=dashed];
m2_109 -> m2_74  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_109 -> m2_79  [color=darkseagreen4, key=1, label=type, style=dashed];
}
