digraph  {
m2_3 [cluster="Humanizer.Localisation.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", file="Tokenizer.cs", label="Entry Humanizer.Localisation.EnglishNumberToWordsConverter.EnglishNumberToWordsConverter()", span="5-5"];
m2_11 [cluster="Humanizer.Localisation.FarsiNumberToWordsConverter.FarsiNumberToWordsConverter()", file="Tokenizer.cs", label="Entry Humanizer.Localisation.FarsiNumberToWordsConverter.FarsiNumberToWordsConverter()", span="5-5"];
m2_15 [cluster="Humanizer.Localisation.INumberToWordsConverter.Convert(int)", file="Tokenizer.cs", label="Entry Humanizer.Localisation.INumberToWordsConverter.Convert(int)", span="12-12"];
m2_8 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="17-17"];
m2_0 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="15-15"];
m2_1 [cluster="lambda expression", file="Tokenizer.cs", label="new EnglishNumberToWordsConverter()", span="15-15"];
m2_2 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="15-15"];
m2_4 [cluster="lambda expression", file="Tokenizer.cs", label="Entry lambda expression", span="16-16"];
m2_5 [cluster="lambda expression", file="Tokenizer.cs", label="new ArabicNumberToWordsConverter()", span="16-16"];
m2_6 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="16-16"];
m2_9 [cluster="lambda expression", file="Tokenizer.cs", label="new FarsiNumberToWordsConverter()", span="17-17"];
m2_10 [cluster="lambda expression", file="Tokenizer.cs", label="Exit lambda expression", span="17-17"];
m2_7 [cluster="Humanizer.Localisation.ArabicNumberToWordsConverter.ArabicNumberToWordsConverter()", file="Tokenizer.cs", label="Entry Humanizer.Localisation.ArabicNumberToWordsConverter.ArabicNumberToWordsConverter()", span="4-4"];
m2_12 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="Tokenizer.cs", label="Entry Humanizer.NumberToWordsExtension.ToWords(int)", span="25-25"];
m2_13 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="Tokenizer.cs", label="return Converter.Convert(number);", span="27-27"];
m2_14 [cluster="Humanizer.NumberToWordsExtension.ToWords(int)", file="Tokenizer.cs", label="Exit Humanizer.NumberToWordsExtension.ToWords(int)", span="25-25"];
m3_0 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string, string)", span="23-23"];
m3_3 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", color=green, community=0, file="TokenPartitionerTests.cs", label="longName == null", prediction=0, span="26-26"];
m3_2 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="TokenPartitionerTests.cs", label="throw new ArgumentNullException(''shortName'');", span="25-25"];
m3_4 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="TokenPartitionerTests.cs", label="throw new ArgumentNullException(''longName'');", span="26-26"];
m3_1 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="TokenPartitionerTests.cs", label="shortName == null", span="25-25"];
m3_5 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="TokenPartitionerTests.cs", label="this.shortName = shortName", span="28-28"];
m3_13 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="TokenPartitionerTests.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(string, string)", span="23-23"];
m3_15 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="TokenPartitionerTests.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute()", span="42-42"];
m3_11 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="TokenPartitionerTests.cs", label="helpText = string.Empty", span="34-34"];
m3_23 [cluster="Unk.Any", file="TokenPartitionerTests.cs", label="CommandLine.OptionAttribute", span=""];
m3_12 [cluster="CommandLine.OptionAttribute.OptionAttribute(string, string)", file="TokenPartitionerTests.cs", label="metaValue = string.Empty", span="35-35"];
m3_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m3_8 [cluster="CSharpx.Maybe.Nothing<T>()", file="TokenPartitionerTests.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m3_9 [cluster="System.Collections.Generic.List<T>.List()", file="TokenPartitionerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_10 [cluster="CSharpx.Maybe.Just<T>(T)", file="TokenPartitionerTests.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m3_14 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TokenPartitionerTests.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_41 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m3_16 [cluster="CommandLine.OptionAttribute.OptionAttribute()", file="TokenPartitionerTests.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute()", span="42-42"];
m3_21 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="TokenPartitionerTests.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char)", span="70-70"];
m3_17 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", color=green, community=0, file="TokenPartitionerTests.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", prediction=1, span="51-51"];
m3_18 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="TokenPartitionerTests.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(string)", span="51-51"];
m3_35 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="56-56"];
m3_39 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="60-60"];
m3_36 [cluster="lambda expression", color=green, community=0, file="TokenPartitionerTests.cs", label="TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)", prediction=2, span="56-56"];
m3_37 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="56-56"];
m3_20 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="TokenPartitionerTests.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char, string)", span="61-61"];
m3_22 [cluster="CommandLine.OptionAttribute.OptionAttribute(char)", file="TokenPartitionerTests.cs", label="Exit CommandLine.OptionAttribute.OptionAttribute(char)", span="70-70"];
m3_24 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="34-34"];
m3_25 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34"];
m3_38 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Entry lambda expression", span="60-60"];
m3_40 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m3_42 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="60-60"];
m3_26 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="34-34"];
m3_43 [cluster="lambda expression", file="TokenPartitionerTests.cs", label="Exit lambda expression", span="60-60"];
m3_28 [cluster="Unk.SequenceEqual", file="TokenPartitionerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m3_27 [cluster="string.Equals(string)", file="TokenPartitionerTests.cs", label="Entry string.Equals(string)", span="0-0"];
m3_19 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="TokenPartitionerTests.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="61-61"];
m3_29 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m3_32 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=green, community=0, file="TokenPartitionerTests.cs", label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)\r\n                )", prediction=3, span="54-57"];
m3_31 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(string), TargetType.Scalar),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<int>), TargetType.Sequence)\r\n                }", span="47-51"];
m3_33 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="60-60"];
m3_30 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="43-46"];
m3_34 [cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", file="TokenPartitionerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40"];
m3_44 [file="TokenPartitionerTests.cs", label=specs, span=""];
m3_47 [file="TokenPartitionerTests.cs", label=specs, span=""];
m3_45 [file="TokenPartitionerTests.cs", label=result, span=""];
m3_48 [file="TokenPartitionerTests.cs", label=result, span=""];
m3_46 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m3_49 [file="TokenPartitionerTests.cs", label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
m4_59 [cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="47-47"];
m4_60 [cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { })\r\n                from t in tseq\r\n                select t;", span="51-58"];
m4_61 [cluster="CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TokenPartitioner.PartitionScalars(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="47-47"];
m4_19 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="24-24"];
m4_17 [cluster="Unk.PartitionSequences", file="TypeDescriptor.cs", label="Entry Unk.PartitionSequences", span=""];
m4_86 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="59-59"];
m4_37 [cluster="Unk.IsValue", file="TypeDescriptor.cs", label="Entry Unk.IsValue", span=""];
m4_58 [cluster="CommandLine.Core.Token.IsName()", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Token.IsName()", span="72-72"];
m4_13 [cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="38-38"];
m4_51 [cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="return from t in tokens\r\n                   where typeLookup(t.Text).Return(info => t.IsName() && info.Item1 == DescriptorType.Boolean, false)\r\n                   select t;", span="42-44"];
m4_52 [cluster="CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TokenPartitioner.PartitionSwitches(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="38-38"];
m4_53 [cluster="System.Func<T, TResult>.Invoke(T)", file="TypeDescriptor.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m4_14 [cluster="Unk.Where", file="TypeDescriptor.cs", label="Entry Unk.Where", span=""];
m4_22 [cluster="Unk.Create", file="TypeDescriptor.cs", label="Entry Unk.Create", span=""];
m4_16 [cluster="Unk.PartitionScalars", file="TypeDescriptor.cs", label="Entry Unk.PartitionScalars", span=""];
m4_44 [cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", span="89-89"];
m4_111 [cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TypeDescriptor.cs", label="return new KeyValuePair<string, IEnumerable<string>>(value, values);", span="91-91"];
m4_112 [cluster="CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TokenPartitioner.CreateValue(string, params string[])", span="89-89"];
m4_30 [cluster="Unk.Contains", file="TypeDescriptor.cs", label="Entry Unk.Contains", span=""];
m4_96 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m4_108 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="83-83"];
m4_24 [cluster="lambda expression", file="TypeDescriptor.cs", label="!switches.Contains(x)", span="22-22"];
m4_23 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="22-22"];
m4_28 [cluster="lambda expression", file="TypeDescriptor.cs", label="!scalars.Contains(x)", span="24-24"];
m4_27 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="24-24"];
m4_32 [cluster="lambda expression", file="TypeDescriptor.cs", label="!sequences.Contains(x)", span="26-26"];
m4_31 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="26-26"];
m4_34 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="27-27"];
m4_39 [cluster="lambda expression", file="TypeDescriptor.cs", label="!values.Contains(x)", span="28-28"];
m4_38 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="28-28"];
m4_41 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="31-31"];
m4_45 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="32-32"];
m4_48 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="34-34"];
m4_25 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="22-22"];
m4_29 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="24-24"];
m4_33 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="26-26"];
m4_35 [cluster="lambda expression", file="TypeDescriptor.cs", label="v.IsValue()", span="27-27"];
m4_36 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="27-27"];
m4_40 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="28-28"];
m4_42 [cluster="lambda expression", file="TypeDescriptor.cs", label="CreateValue(t.Text,''true'')", span="31-31"];
m4_43 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="31-31"];
m4_46 [cluster="lambda expression", file="TypeDescriptor.cs", label="CreateValue(f.Text, s.Text)", span="32-32"];
m4_47 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="32-32"];
m4_49 [cluster="lambda expression", file="TypeDescriptor.cs", label="t.Text", span="34-34"];
m4_50 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="34-34"];
m4_55 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="43-43"];
m4_56 [cluster="lambda expression", file="TypeDescriptor.cs", label="t.IsName() && info.Item1 == DescriptorType.Boolean", span="43-43"];
m4_57 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="43-43"];
m4_63 [cluster="lambda expression", file="TypeDescriptor.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                    info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }, new Token[] { })\r\n                                    : new Token[] { }", span="53-56"];
m4_62 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="52-56"];
m4_67 [cluster="lambda expression", file="TypeDescriptor.cs", label="info.Item1 == DescriptorType.Scalar ? new[] { f, s } : new Token[] { }", span="55-55"];
m4_64 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="52-56"];
m4_66 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="54-55"];
m4_68 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="54-55"];
m4_73 [cluster="lambda expression", file="TypeDescriptor.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { } , new Token[] { })\r\n                            : new Token[] {}", span="67-72"];
m4_76 [cluster="lambda expression", file="TypeDescriptor.cs", label="info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { }", span="69-71"];
m4_72 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="66-72"];
m4_84 [cluster="lambda expression", file="TypeDescriptor.cs", label="t.Equals(f)", span="70-70"];
m4_74 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="66-72"];
m4_75 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="68-71"];
m4_77 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="68-71"];
m4_83 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="70-70"];
m4_87 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="70-70"];
m4_90 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="70-70"];
m4_85 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="70-70"];
m4_88 [cluster="lambda expression", file="TypeDescriptor.cs", label="v.IsValue()", span="70-70"];
m4_89 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="70-70"];
m4_91 [cluster="lambda expression", file="TypeDescriptor.cs", label=items, span="70-70"];
m4_92 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="70-70"];
m4_98 [cluster="lambda expression", file="TypeDescriptor.cs", label="f.IsName()\r\n                            ? CreateValue(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : CreateValue(string.Empty)", span="82-84"];
m4_97 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="81-84"];
m4_103 [cluster="lambda expression", file="TypeDescriptor.cs", label="t.Equals(f)", span="83-83"];
m4_99 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="81-84"];
m4_102 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="83-83"];
m4_105 [cluster="lambda expression", file="TypeDescriptor.cs", label="Entry lambda expression", span="83-83"];
m4_104 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="83-83"];
m4_106 [cluster="lambda expression", file="TypeDescriptor.cs", label="v.IsValue()", span="83-83"];
m4_107 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="83-83"];
m4_109 [cluster="lambda expression", file="TypeDescriptor.cs", label="x.Text", span="83-83"];
m4_110 [cluster="lambda expression", file="TypeDescriptor.cs", label="Exit lambda expression", span="83-83"];
m4_0 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16"];
m4_1 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="var tokenList = tokens.ToList()", span="20-20"];
m4_2 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="var switches = PartitionSwitches(tokenList, typeLookup).ToList()", span="21-21"];
m4_4 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="var scalars = PartitionScalars(tokensExceptSwitches, typeLookup).ToList()", span="23-23"];
m4_6 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="var sequences = PartitionSequences(tokensExceptSwitchesAndScalars, typeLookup).ToList()", span="25-25"];
m4_3 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="var tokensExceptSwitches = tokenList.Where(x => !switches.Contains(x)).ToList()", span="22-22"];
m4_5 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="var tokensExceptSwitchesAndScalars = (tokensExceptSwitches.Where(x => !scalars.Contains(x))).ToList()", span="24-24"];
m4_7 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="var tokensExceptSwitchesAndScalarsAndSeq = tokensExceptSwitchesAndScalars.Where(x => !sequences.Contains(x)).ToList()", span="26-26"];
m4_8 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="var values = tokensExceptSwitchesAndScalarsAndSeq.Where(v => v.IsValue()).ToList()", span="27-27"];
m4_9 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="var errors = tokensExceptSwitchesAndScalarsAndSeq.Where(x => !values.Contains(x))", span="28-28"];
m4_11 [cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="16-16"];
m4_81 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m4_78 [cluster="System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SkipWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m4_20 [cluster="Unk.Concat", file="TypeDescriptor.cs", label="Entry Unk.Concat", span=""];
m4_69 [cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="61-61"];
m4_70 [cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>     \r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.Item1 == DescriptorType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Take(MaybeExtensions.Return(info.Item2, items => items, 0)))\r\n                                        : new Token[] { } , new Token[] { })\r\n                            : new Token[] {})\r\n                from t in tseq\r\n                select t;", span="65-74"];
m4_71 [cluster="CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TokenPartitioner.PartitionSequences(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>)", span="61-61"];
m4_95 [cluster="Unk.Pairwise", file="TypeDescriptor.cs", label="Entry Unk.Pairwise", span=""];
m4_79 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m4_21 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TypeDescriptor.cs", label="Entry CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="77-77"];
m4_93 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TypeDescriptor.cs", label="return from t in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName()\r\n                            ? CreateValue(f.Text, tokens.SkipWhile(t => t.Equals(f)).TakeWhile(v => v.IsValue()).Select(x => x.Text).ToArray())\r\n                            : CreateValue(string.Empty))\r\n                   where t.Key.Length > 0 && t.Value.Any()\r\n                   select t;", span="80-86"];
m4_94 [cluster="CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="TypeDescriptor.cs", label="Exit CommandLine.Core.TokenPartitioner.SequenceTokensToKeyValuePairEnumerable(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="77-77"];
m4_18 [cluster="Unk.Select", file="TypeDescriptor.cs", label="Entry Unk.Select", span=""];
m4_101 [cluster="Unk.CreateValue", file="TypeDescriptor.cs", label="Entry Unk.CreateValue", span=""];
m4_15 [cluster="Unk.ToList", file="TypeDescriptor.cs", label="Entry Unk.ToList", span=""];
m4_65 [cluster="CommandLine.Core.Token.IsValue()", file="TypeDescriptor.cs", label="Entry CommandLine.Core.Token.IsValue()", span="77-77"];
m4_113 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m4_80 [cluster="CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", file="TypeDescriptor.cs", label="Entry CommandLine.Infrastructure.MaybeExtensions.Return<T1, T2>(CommandLine.Infrastructure.Maybe<T1>, System.Func<T1, T2>, T2)", span="103-103"];
m4_100 [cluster="Unk.ToArray", file="TypeDescriptor.cs", label="Entry Unk.ToArray", span=""];
m4_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m4_54 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TypeDescriptor.cs", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103"];
m4_82 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m4_26 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="TypeDescriptor.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m4_114 [file="TypeDescriptor.cs", label=switches, span=""];
m4_115 [file="TypeDescriptor.cs", label=scalars, span=""];
m4_116 [file="TypeDescriptor.cs", label=sequences, span=""];
m4_117 [file="TypeDescriptor.cs", label=values, span=""];
m4_118 [file="TypeDescriptor.cs", label=t, span=""];
m4_119 [file="TypeDescriptor.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", span=""];
m4_120 [file="TypeDescriptor.cs", label="CommandLine.Core.Token", span=""];
m4_121 [file="TypeDescriptor.cs", label="CommandLine.Core.Token", span=""];
m4_122 [file="TypeDescriptor.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m4_123 [file="TypeDescriptor.cs", label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", span=""];
m4_124 [file="TypeDescriptor.cs", label="CommandLine.Core.Token", span=""];
m4_125 [file="TypeDescriptor.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m4_126 [file="TypeDescriptor.cs", label="CommandLine.Core.Token", span=""];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_0 -> m3_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_3 -> m3_16  [color=green, key=1, label="lambda expression", style=dashed];
m3_3 -> m3_21  [color=green, key=1, label=result, style=dashed];
m3_2 -> m3_17  [color=green, key=1, label=specs, style=dashed];
m3_4 -> m3_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_1 -> m3_4  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m3_23 -> m3_6  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m3_23 -> m3_8  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m3_23 -> m3_9  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m3_23 -> m3_10  [color=darkseagreen4, key=1, label="CommandLine.OptionAttribute", style=dashed];
m3_21 -> m3_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_21 -> m3_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m3_39 -> m3_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_39 -> m3_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m3_25 -> m3_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m3_42 -> m3_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m3_32 -> m3_35  [color=green, key=1, label="lambda expression", style=dashed];
m3_32 -> m3_39  [color=green, key=1, label=result, style=dashed];
m3_31 -> m3_36  [color=green, key=1, label=specs, style=dashed];
m3_33 -> m3_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_30 -> m3_33  [color=darkseagreen4, key=1, label=expectedSequence, style=dashed];
m3_44 -> m3_17  [color=green, key=1, label=specs, style=dashed];
m3_47 -> m3_36  [color=green, key=1, label=specs, style=dashed];
m3_45 -> m3_21  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_48 -> m3_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_46 -> m3_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m3_49 -> m3_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m4_59 -> m4_63  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m4_60 -> m4_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_60 -> m4_60  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m4_51 -> m4_51  [color=darkseagreen4, key=1, label=t, style=dashed];
m4_51 -> m4_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_51 -> m4_56  [color=darkseagreen4, key=1, label=t, style=dashed];
m4_63 -> m4_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_62 -> m4_67  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_73 -> m4_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_76 -> m4_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_76 -> m4_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_76 -> m4_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_72 -> m4_76  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_72 -> m4_84  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_98 -> m4_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_98 -> m4_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_98 -> m4_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_97 -> m4_103  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_2 -> m4_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m4_4 -> m4_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m4_6 -> m4_32  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m4_3 -> m4_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_5 -> m4_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_7 -> m4_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_8 -> m4_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_8 -> m4_39  [color=darkseagreen4, key=1, label=values, style=dashed];
m4_9 -> m4_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_69 -> m4_73  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m4_69 -> m4_76  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m4_70 -> m4_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_70 -> m4_70  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m4_21 -> m4_98  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m4_93 -> m4_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_93 -> m4_93  [color=darkseagreen4, key=1, label=t, style=dashed];
m4_114 -> m4_24  [color=darkseagreen4, key=1, label=switches, style=dashed];
m4_115 -> m4_28  [color=darkseagreen4, key=1, label=scalars, style=dashed];
m4_116 -> m4_32  [color=darkseagreen4, key=1, label=sequences, style=dashed];
m4_117 -> m4_39  [color=darkseagreen4, key=1, label=values, style=dashed];
m4_118 -> m4_56  [color=darkseagreen4, key=1, label=t, style=dashed];
m4_119 -> m4_63  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m4_120 -> m4_67  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_121 -> m4_67  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_122 -> m4_73  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m4_122 -> m4_76  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m4_123 -> m4_73  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<System.Tuple<CommandLine.Core.DescriptorType, CommandLine.Infrastructure.Maybe<int>>>>", style=dashed];
m4_124 -> m4_76  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_124 -> m4_84  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m4_125 -> m4_98  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m4_126 -> m4_103  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
}
