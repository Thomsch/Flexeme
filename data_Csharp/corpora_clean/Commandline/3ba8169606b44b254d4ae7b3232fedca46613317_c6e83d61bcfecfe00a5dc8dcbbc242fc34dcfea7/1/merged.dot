digraph  {
m0_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="Program.cs"];
m0_5 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Program.cs"];
m0_12 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="Program.cs"];
m0_13 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)", file="Program.cs"];
m0_6 [label="Entry Unk.ShouldAllBeEquivalentTo", span="", cluster="Unk.ShouldAllBeEquivalentTo", file="Program.cs"];
m0_38 [label="Entry lambda expression", span="88-91", cluster="lambda expression", file="Program.cs"];
m0_7 [label="Entry lambda expression", span="19-22", cluster="lambda expression", file="Program.cs"];
m0_8 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22", cluster="lambda expression", file="Program.cs"];
m0_9 [label="Exit lambda expression", span="19-22", cluster="lambda expression", file="Program.cs"];
m0_22 [label="Entry lambda expression", span="42-45", cluster="lambda expression", file="Program.cs"];
m0_23 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="43-45", cluster="lambda expression", color=red, community=0, file="Program.cs"];
m0_24 [label="Exit lambda expression", span="42-45", cluster="lambda expression", file="Program.cs"];
m0_30 [label="Entry lambda expression", span="67-70", cluster="lambda expression", file="Program.cs"];
m0_31 [label="new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="68-70", cluster="lambda expression", file="Program.cs"];
m0_32 [label="Exit lambda expression", span="67-70", cluster="lambda expression", file="Program.cs"];
m0_39 [label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="89-91", cluster="lambda expression", file="Program.cs"];
m0_40 [label="Exit lambda expression", span="88-91", cluster="lambda expression", file="Program.cs"];
m0_14 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="Program.cs"];
m0_15 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="30-33", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="Program.cs"];
m0_16 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="35-45", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", color=red, community=0, file="Program.cs"];
m0_17 [label="expected.ShouldBeEquivalentTo(result)", span="47-47", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="Program.cs"];
m0_18 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="Program.cs"];
m0_11 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()", file="Program.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs"];
m0_1 [label="var expected = new Token[] { }", span="15-15", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs"];
m0_2 [label="var result = Sequence.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs"];
m0_3 [label="expected.ShouldAllBeEquivalentTo(result)", span="24-24", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs"];
m0_4 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs"];
m0_19 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="Program.cs"];
m0_33 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs"];
m0_34 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="78-81", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs"];
m0_35 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="83-91", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs"];
m0_36 [label="expected.ShouldBeEquivalentTo(result)", span="93-93", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs"];
m0_37 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs"];
m0_20 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="Program.cs"];
m0_21 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo", file="Program.cs"];
m0_25 [label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs"];
m0_26 [label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                    Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                }", span="53-57", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs"];
m0_27 [label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2''),\r\n                        Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="59-70", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs"];
m0_28 [label="expected.ShouldBeEquivalentTo(result)", span="72-72", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs"];
m0_29 [label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51", cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs"];
m0_38 -> m0_39  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_10  [key=2, style=dotted];
m0_8 -> m0_11  [key=2, style=dotted];
m0_8 -> m0_12  [key=2, style=dotted];
m0_8 -> m0_13  [key=2, style=dotted];
m0_9 -> m0_7  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid, color=red];
m0_23 -> m0_24  [key=0, style=solid, color=red];
m0_23 -> m0_10  [key=2, style=dotted, color=red];
m0_23 -> m0_11  [key=2, style=dotted, color=red];
m0_23 -> m0_12  [key=2, style=dotted, color=red];
m0_23 -> m0_13  [key=2, style=dotted, color=red];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_30 -> m0_31  [key=0, style=solid];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_10  [key=2, style=dotted];
m0_31 -> m0_11  [key=2, style=dotted];
m0_31 -> m0_12  [key=2, style=dotted];
m0_31 -> m0_13  [key=2, style=dotted];
m0_32 -> m0_30  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_10  [key=2, style=dotted];
m0_39 -> m0_11  [key=2, style=dotted];
m0_39 -> m0_12  [key=2, style=dotted];
m0_39 -> m0_13  [key=2, style=dotted];
m0_40 -> m0_38  [key=0, style=bold, color=blue];
m0_14 -> m0_15  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid, color=red];
m0_15 -> m0_19  [key=2, style=dotted];
m0_15 -> m0_20  [key=2, style=dotted];
m0_15 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_16 -> m0_17  [key=0, style=solid, color=red];
m0_16 -> m0_19  [key=2, style=dotted, color=red];
m0_16 -> m0_20  [key=2, style=dotted, color=red];
m0_16 -> m0_5  [key=2, style=dotted, color=red];
m0_16 -> m0_22  [key=1, style=dashed, color=red, label="lambda expression"];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_21  [key=2, style=dotted];
m0_18 -> m0_14  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_6  [key=2, style=dotted];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m0_33 -> m0_34  [key=0, style=solid];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_19  [key=2, style=dotted];
m0_34 -> m0_20  [key=2, style=dotted];
m0_34 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_19  [key=2, style=dotted];
m0_35 -> m0_20  [key=2, style=dotted];
m0_35 -> m0_5  [key=2, style=dotted];
m0_35 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_21  [key=2, style=dotted];
m0_37 -> m0_33  [key=0, style=bold, color=blue];
m0_25 -> m0_26  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_19  [key=2, style=dotted];
m0_26 -> m0_20  [key=2, style=dotted];
m0_26 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_19  [key=2, style=dotted];
m0_27 -> m0_20  [key=2, style=dotted];
m0_27 -> m0_5  [key=2, style=dotted];
m0_27 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_21  [key=2, style=dotted];
m0_29 -> m0_25  [key=0, style=bold, color=blue];
}
