digraph  {
m0_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="Program.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m0_5 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Program.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m0_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", file="Program.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CSharpx.Maybe<int>, CommandLine.Core.TypeDescriptor)", span="35-35"];
m0_13 [cluster="CSharpx.Maybe.Just<T>(T)", file="Program.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m0_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="Program.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m0_38 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="88-91"];
m0_7 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="19-22"];
m0_8 [cluster="lambda expression", file="Program.cs", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22"];
m0_9 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="19-22"];
m0_22 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="42-45"];
m0_24 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="42-45"];
m0_30 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="67-70"];
m0_31 [cluster="lambda expression", file="Program.cs", label="new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="68-70"];
m0_32 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="67-70"];
m0_39 [cluster="lambda expression", file="Program.cs", label="new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="89-91"];
m0_40 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="88-91"];
m0_14 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28"];
m0_15 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="Program.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="30-33"];
m0_17 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="Program.cs", label="expected.ShouldBeEquivalentTo(result)", span="47-47"];
m0_18 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values()", span="28-28"];
m0_11 [cluster="CSharpx.Maybe.Nothing<T>()", file="Program.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs", label="var expected = new Token[] { }", span="15-15"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs", label="var result = Sequence.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_empty_token_sequence()", span="13-13"];
m0_19 [cluster="CommandLine.Core.Token.Name(string)", file="Program.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m0_33 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76"];
m0_34 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                }", span="78-81"];
m0_35 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="83-91"];
m0_36 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs", label="expected.ShouldBeEquivalentTo(result)", span="93-93"];
m0_37 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_only()", span="76-76"];
m0_20 [cluster="CommandLine.Core.Token.Value(string)", file="Program.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m0_21 [cluster="Unk.ShouldBeEquivalentTo", file="Program.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_25 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs", label="Entry CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51"];
m0_26 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs", label="var expected = new[]\r\n                {\r\n                    Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                    Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                }", span="53-57"];
m0_27 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs", label="var result = Sequence.Partition(\r\n                new[]\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''seq''), Token.Value(''seqval0''), Token.Value(''seqval1''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2''),\r\n                        Token.Name(''seqb''), Token.Value(''seqbval0'')\r\n                    },\r\n                name =>\r\n                    new[] { ''seq'', ''seqb'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Sequence, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="59-70"];
m0_28 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs", label="expected.ShouldBeEquivalentTo(result)", span="72-72"];
m0_29 [cluster="CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", file="Program.cs", label="Exit CommandLine.Tests.Unit.Core.SequenceTests.Partition_sequence_values_from_two_sequneces()", span="51-51"];
m0_15 -> m0_17  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_2 -> m0_7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_36  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_35 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_26 -> m0_28  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_27 -> m0_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
}
