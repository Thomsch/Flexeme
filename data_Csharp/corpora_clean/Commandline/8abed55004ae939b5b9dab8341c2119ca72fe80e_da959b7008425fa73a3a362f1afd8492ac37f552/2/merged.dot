digraph  {
d18 [label="yield break;", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0];
d4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d17 [label="specProps.Empty()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d19 [label="var pt = specProps.First()", span="38-38", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0];
d22 [label="yield return\r\n                    Tuple.Create(pt, pt.Specification.MakeErrorInCaseOfMinConstraint());", span="42-43", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0];
d21 [label="taken.Empty()", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0];
d23 [label="yield break;", span="44-44", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d38 [label="Entry CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()", span="87-87", cluster="CommandLine.Core.Specification.MakeErrorInCaseOfMinConstraint()"];
d39 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)"];
d26 [label="yield return\r\n                    Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                        pt, Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName)));", span="52-54", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0];
d25 [label="pt.Specification.Max.IsJust()\r\n                && next.IsNothing()\r\n                && values.Skip(taken.Count()).Any()", span="48-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d27 [label="yield break;", span="55-55", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d46 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="360-360", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
d47 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)"];
d28 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                    .MapValueOrDefault(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="58-63", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0];
d20 [label="var taken = values.Take(pt.Specification.CountOfMaxNumberOfValues().MapValueOrDefault(n => n, values.Count()))", span="39-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0];
d29 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="65-65", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0];
d48 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)"];
d49 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)"];
d36 [label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377", cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)"];
d57 [label="Entry lambda expression", span="61-61", cluster="lambda expression"];
d33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()"];
d58 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="61-61", cluster="lambda expression", color=green, community=0];
d34 [label="Entry CommandLine.Core.Specification.CountOfMaxNumberOfValues()", span="71-71", cluster="CommandLine.Core.Specification.CountOfMaxNumberOfValues()"];
d35 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
d37 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)"];
d50 [label="Entry lambda expression", span="39-39", cluster="lambda expression"];
d24 [label="var next = specProps.Skip(1).FirstOrDefault(s => s.Specification.IsValue()).ToMaybe()", span="47-47", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", color=green, community=0];
d40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)"];
d41 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault"];
d42 [label="Entry Unk.ToMaybe", span="", cluster="Unk.ToMaybe"];
d53 [label="Entry lambda expression", span="47-47", cluster="lambda expression"];
d30 [label="yield return value;", span="67-67", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d31 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="29-29", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d75 [label=pt, span=""];
d59 [label="Exit lambda expression", span="61-61", cluster="lambda expression"];
d60 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)"];
d61 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
d32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()"];
d51 [label=n, span="39-39", cluster="lambda expression", color=green, community=1];
d52 [label="Exit lambda expression", span="39-39", cluster="lambda expression"];
d54 [label="s.Specification.IsValue()", span="47-47", cluster="lambda expression", color=green, community=0];
d55 [label="Exit lambda expression", span="47-47", cluster="lambda expression"];
d56 [label="Entry CommandLine.Core.Specification.IsValue()", span="15-15", cluster="CommandLine.Core.Specification.IsValue()"];
d68 [label="return Maybe.Just(specification.Max.FromJustOrFail());", span="80-80", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0];
d62 [label="Entry CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
d67 [label="specification.Max.IsJust()", span="78-78", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
d70 [label="Exit CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", span="71-71", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
d71 [label="Entry CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)", span="355-355", cluster="CSharpx.Maybe<T>.FromJustOrFail<T>(System.Exception)"];
d64 [label="TargetType.Scalar", span="75-75", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0];
d63 [label="specification.TargetType", span="73-73", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
d65 [label="return Maybe.Just(1);", span="76-76", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
d69 [label="return Maybe.Nothing<int>();", span="84-84", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)", color=green, community=0];
d73 [label="return specification.Min.IsJust()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="89-91", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", color=green, community=0];
d72 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)"];
d74 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="87-87", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)"];
d43 [label="Entry CSharpx.Maybe<T>.IsJust<T>()", span="326-326", cluster="CSharpx.Maybe<T>.IsJust<T>()"];
d1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="20-20", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d44 [label="Entry Unk.IsNothing", span="", cluster="Unk.IsNothing"];
d45 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()"];
d66 [label="TargetType.Sequence", span="77-77", cluster="CommandLine.Core.ValueMapper.CountOfMaxNumberOfValues(CommandLine.Core.Specification)"];
d0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d2 [label="return Result.Succeed(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="22-26", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)", span="15-15", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>)"];
d5 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d6 [label="Entry Unk.>", span="", cluster="Unk.>"];
d7 [label="Entry Unk.Succeed", span="", cluster="Unk.Succeed"];
d8 [label="Entry lambda expression", span="23-23", cluster="lambda expression"];
d11 [label="Entry lambda expression", span="24-24", cluster="lambda expression"];
d14 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
d10 [label="Exit lambda expression", span="23-23", cluster="lambda expression"];
d9 [label="pe.Item1", span="23-23", cluster="lambda expression"];
d13 [label="Exit lambda expression", span="24-24", cluster="lambda expression"];
d12 [label="pe.Item2", span="24-24", cluster="lambda expression"];
d16 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
d15 [label="e.Value", span="25-25", cluster="lambda expression"];
m0_14 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="Tokenizer.cs"];
m0_22 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="Tokenizer.cs"];
m0_12 [label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_18 [label="Entry CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="16-16", cluster="CommandLine.Core.KeyValuePairHelper.ForScalar(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Tokenizer.cs"];
m0_13 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_0 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_3 [label="var scalars = Scalar.Partition(tokenList, typeLookup).ToList()", span="18-18", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Tokenizer.cs"];
m0_1 [label="var tokenList = tokens.ToList()", span="16-16", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_2 [label="var switches = Switch.Partition(tokenList, typeLookup).ToList()", span="17-17", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_4 [label="var sequences = Sequence.Partition(tokenList, typeLookup).ToList()", span="19-19", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Tokenizer.cs"];
m0_5 [label="var nonOptions = tokenList\r\n                .Where(t => !switches.Contains(t))\r\n                .Where(t => !scalars.Contains(t))\r\n                .Where(t => !sequences.Contains(t)).ToList()", span="20-23", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", color=green, community=0, file="Tokenizer.cs"];
m0_8 [label="return TokenPartitions.Create(\r\n                    KeyValuePairHelper.ForSwitch(switches)\r\n                        .Concat(KeyValuePairHelper.ForScalar(scalars))\r\n                        .Concat(KeyValuePairHelper.ForSequence(sequences)),\r\n                values.Select(t => t.Text),\r\n                errors);", span="27-32", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_6 [label="var values = nonOptions.Where(v => v.IsValue()).ToList()", span="24-24", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_7 [label="var errors = nonOptions.Except(values).ToList()", span="25-25", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_9 [label="Exit CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_30 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="Tokenizer.cs"];
m0_16 [label="Entry Unk.Except", span="", cluster="Unk.Except", file="Tokenizer.cs"];
m0_34 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="Tokenizer.cs"];
m0_28 [label="!scalars.Contains(t)", span="22-22", cluster="lambda expression", color=green, community=0, file="Tokenizer.cs"];
m0_32 [label="!sequences.Contains(t)", span="23-23", cluster="lambda expression", file="Tokenizer.cs"];
m0_23 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="Tokenizer.cs"];
m0_27 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="Tokenizer.cs"];
m0_31 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="Tokenizer.cs"];
m0_24 [label="!switches.Contains(t)", span="21-21", cluster="lambda expression", color=green, community=0, file="Tokenizer.cs"];
m0_25 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="Tokenizer.cs"];
m0_29 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="Tokenizer.cs"];
m0_38 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="Tokenizer.cs"];
m0_33 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="Tokenizer.cs"];
m0_40 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="Tokenizer.cs"];
m0_39 [label="t.Text", span="31-31", cluster="lambda expression", file="Tokenizer.cs"];
m0_35 [label="v.IsValue()", span="24-24", cluster="lambda expression", file="Tokenizer.cs"];
m0_36 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="Tokenizer.cs"];
m0_15 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="Tokenizer.cs"];
m0_17 [label="Entry CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="10-10", cluster="CommandLine.Core.KeyValuePairHelper.ForSwitch(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Tokenizer.cs"];
m0_11 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m0_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="Tokenizer.cs"];
m0_37 [label="Entry Unk.IsValue", span="", cluster="Unk.IsValue", file="Tokenizer.cs"];
m0_19 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Tokenizer.cs"];
m0_20 [label="Entry CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="22-22", cluster="CommandLine.Core.KeyValuePairHelper.ForSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="Tokenizer.cs"];
m0_26 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="Tokenizer.cs"];
m0_41 [label=switches, span="", file="Tokenizer.cs"];
m0_42 [label=scalars, span="", file="Tokenizer.cs"];
m0_43 [label=sequences, span="", file="Tokenizer.cs"];
m1_15 [label="Entry CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", span="41-41", cluster="CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", file="Unit.cs"];
m1_16 [label="return false;", span="43-43", cluster="CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", color=green, community=0, file="Unit.cs"];
m1_17 [label="Exit CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", span="41-41", cluster="CommandLine.Infrastructure.Unit.operator !=(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", file="Unit.cs"];
m1_0 [label="Entry CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", span="16-16", cluster="CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", file="Unit.cs"];
m1_1 [label="return true;", span="18-18", cluster="CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", color=green, community=0, file="Unit.cs"];
m1_2 [label="Exit CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", span="16-16", cluster="CommandLine.Infrastructure.Unit.Equals(CommandLine.Infrastructure.Unit)", file="Unit.cs"];
m1_6 [label="Entry CommandLine.Infrastructure.Unit.GetHashCode()", span="26-26", cluster="CommandLine.Infrastructure.Unit.GetHashCode()", file="Unit.cs"];
m1_7 [label="return 0;", span="28-28", cluster="CommandLine.Infrastructure.Unit.GetHashCode()", color=green, community=0, file="Unit.cs"];
m1_8 [label="Exit CommandLine.Infrastructure.Unit.GetHashCode()", span="26-26", cluster="CommandLine.Infrastructure.Unit.GetHashCode()", file="Unit.cs"];
m1_9 [label="Entry CommandLine.Infrastructure.Unit.ToString()", span="31-31", cluster="CommandLine.Infrastructure.Unit.ToString()", file="Unit.cs"];
m1_10 [label="return ''()'';", span="33-33", cluster="CommandLine.Infrastructure.Unit.ToString()", color=green, community=0, file="Unit.cs"];
m1_11 [label="Exit CommandLine.Infrastructure.Unit.ToString()", span="31-31", cluster="CommandLine.Infrastructure.Unit.ToString()", file="Unit.cs"];
m1_3 [label="Entry CommandLine.Infrastructure.Unit.Equals(object)", span="21-21", cluster="CommandLine.Infrastructure.Unit.Equals(object)", file="Unit.cs"];
m1_4 [label="return obj is Unit;", span="23-23", cluster="CommandLine.Infrastructure.Unit.Equals(object)", color=green, community=0, file="Unit.cs"];
m1_5 [label="Exit CommandLine.Infrastructure.Unit.Equals(object)", span="21-21", cluster="CommandLine.Infrastructure.Unit.Equals(object)", file="Unit.cs"];
m1_12 [label="Entry CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", span="36-36", cluster="CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", file="Unit.cs"];
m1_13 [label="return true;", span="38-38", cluster="CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", color=green, community=0, file="Unit.cs"];
m1_14 [label="Exit CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", span="36-36", cluster="CommandLine.Infrastructure.Unit.operator ==(CommandLine.Infrastructure.Unit, CommandLine.Infrastructure.Unit)", file="Unit.cs"];
d18 -> d19  [key=0, style=solid, color=green];
d4 -> d18  [key=0, style=bold, color=green];
d4 -> d22  [key=0, style=bold, color=green];
d4 -> d26  [key=0, style=bold, color=green];
d4 -> d28  [key=0, style=bold, color=green];
d4 -> d19  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d4 -> d20  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<string>"];
d4 -> d24  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d4 -> d29  [key=1, style=dashed, color=green, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
d4 -> d17  [key=0, style=solid];
d4 -> d23  [key=0, style=bold, color=crimson];
d4 -> d27  [key=0, style=bold, color=crimson];
d4 -> d30  [key=0, style=bold, color=crimson];
d4 -> d25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
d17 -> d18  [key=0, style=solid, color=green];
d17 -> d19  [key=0, style=solid, color=green];
d17 -> d32  [key=2, style=dotted];
d19 -> d22  [key=1, style=dashed, color=green, label=pt];
d19 -> d26  [key=1, style=dashed, color=green, label=pt];
d19 -> d28  [key=1, style=dashed, color=green, label=pt];
d19 -> d20  [key=0, style=solid, color=green];
d19 -> d33  [key=2, style=dotted, color=green];
d19 -> d25  [key=1, style=dashed, color=green, label=pt];
d19 -> d58  [key=1, style=dashed, color=green, label=pt];
d22 -> d23  [key=0, style=solid, color=green];
d22 -> d38  [key=2, style=dotted, color=green];
d22 -> d39  [key=2, style=dotted, color=green];
d21 -> d22  [key=0, style=solid, color=green];
d21 -> d24  [key=0, style=solid, color=green];
d21 -> d32  [key=2, style=dotted, color=green];
d23 -> d24  [key=0, style=solid, color=green];
d26 -> d27  [key=0, style=solid, color=green];
d26 -> d46  [key=2, style=dotted, color=green];
d26 -> d47  [key=2, style=dotted, color=green];
d26 -> d39  [key=2, style=dotted, color=green];
d25 -> d26  [key=0, style=solid, color=green];
d25 -> d28  [key=0, style=solid, color=green];
d25 -> d43  [key=2, style=dotted];
d25 -> d44  [key=2, style=dotted];
d25 -> d35  [key=2, style=dotted];
d25 -> d40  [key=2, style=dotted];
d25 -> d45  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid, color=green];
d28 -> d29  [key=0, style=solid, color=green];
d28 -> d48  [key=2, style=dotted, color=green];
d28 -> d49  [key=2, style=dotted, color=green];
d28 -> d47  [key=2, style=dotted, color=green];
d28 -> d39  [key=2, style=dotted, color=green];
d28 -> d36  [key=2, style=dotted, color=green];
d28 -> d57  [key=1, style=dashed, color=green, label="lambda expression"];
d20 -> d28  [key=1, style=dashed, color=green, label=taken];
d20 -> d21  [key=0, style=solid, color=green];
d20 -> d34  [key=2, style=dotted, color=green];
d20 -> d35  [key=2, style=dotted, color=green];
d20 -> d36  [key=2, style=dotted, color=green];
d20 -> d37  [key=2, style=dotted, color=green];
d20 -> d50  [key=1, style=dashed, color=green, label="lambda expression"];
d20 -> d25  [key=1, style=dashed, color=green, label=taken];
d20 -> d29  [key=1, style=dashed, color=green, label=taken];
d29 -> d30  [key=0, style=solid, color=green];
d29 -> d31  [key=0, style=solid, color=green];
d29 -> d40  [key=2, style=dotted, color=green];
d29 -> d35  [key=2, style=dotted, color=green];
d29 -> d4  [key=2, style=dotted, color=green];
d57 -> d58  [key=0, style=solid, color=green];
d58 -> d59  [key=0, style=solid, color=green];
d58 -> d47  [key=2, style=dotted, color=green];
d58 -> d60  [key=2, style=dotted, color=green];
d58 -> d61  [key=2, style=dotted, color=green];
d58 -> d39  [key=2, style=dotted, color=green];
d50 -> d51  [key=0, style=solid, color=green];
d24 -> d25  [key=0, style=solid, color=green];
d24 -> d40  [key=2, style=dotted, color=green];
d24 -> d41  [key=2, style=dotted, color=green];
d24 -> d42  [key=2, style=dotted, color=green];
d24 -> d53  [key=1, style=dashed, color=green, label="lambda expression"];
d53 -> d54  [key=0, style=solid, color=green];
d30 -> d29  [key=0, style=solid, color=green];
d31 -> d4  [key=0, style=bold, color=blue];
d75 -> d58  [key=1, style=dashed, color=green, label=pt];
d59 -> d57  [key=0, style=bold, color=blue];
d51 -> d52  [key=0, style=solid, color=green];
d52 -> d50  [key=0, style=bold, color=blue];
d54 -> d55  [key=0, style=solid, color=green];
d54 -> d56  [key=2, style=dotted, color=green];
d55 -> d53  [key=0, style=bold, color=blue];
d68 -> d70  [key=0, style=solid, color=green];
d68 -> d71  [key=2, style=dotted, color=green];
d68 -> d47  [key=2, style=dotted, color=green];
d62 -> d68  [key=1, style=dashed, color=green, label="CommandLine.Core.Specification"];
d62 -> d63  [key=0, style=solid];
d62 -> d67  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
d67 -> d68  [key=0, style=solid, color=green];
d67 -> d69  [key=0, style=solid, color=green];
d67 -> d43  [key=2, style=dotted];
d70 -> d62  [key=0, style=bold, color=blue];
d64 -> d65  [key=0, style=solid, color=green];
d63 -> d64  [key=0, style=solid, color=green];
d63 -> d66  [key=0, style=solid];
d65 -> d47  [key=2, style=dotted];
d65 -> d70  [key=0, style=solid];
d69 -> d70  [key=0, style=solid, color=green];
d69 -> d61  [key=2, style=dotted, color=green];
d73 -> d74  [key=0, style=solid, color=green];
d73 -> d43  [key=2, style=dotted, color=green];
d73 -> d46  [key=2, style=dotted, color=green];
d73 -> d47  [key=2, style=dotted, color=green];
d73 -> d61  [key=2, style=dotted, color=green];
d72 -> d73  [key=0, style=solid, color=green];
d74 -> d72  [key=0, style=bold, color=blue];
d1 -> d4  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d66 -> d67  [key=0, style=solid];
d0 -> d1  [key=0, style=solid];
d2 -> d3  [key=0, style=solid];
d2 -> d5  [key=2, style=dotted];
d2 -> d6  [key=2, style=dotted];
d2 -> d7  [key=2, style=dotted];
d2 -> d8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d2 -> d11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d2 -> d14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d3 -> d0  [key=0, style=bold, color=blue];
d8 -> d9  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d10 -> d8  [key=0, style=bold, color=blue];
d9 -> d10  [key=0, style=solid];
d13 -> d11  [key=0, style=bold, color=blue];
d12 -> d13  [key=0, style=solid];
d16 -> d14  [key=0, style=bold, color=blue];
d15 -> d16  [key=0, style=solid];
m0_0 -> m0_3  [key=1, style=dashed, color=green, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m0_0 -> m0_4  [key=1, style=dashed, color=green, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
m0_3 -> m0_3  [key=3, color=green, style=bold, label="Local variable System.Action<CommandLine.Error> onError"];
m0_3 -> m0_4  [key=0, style=solid, color=green];
m0_3 -> m0_12  [key=2, style=dotted, color=green];
m0_3 -> m0_10  [key=2, style=dotted, color=green];
m0_3 -> m0_5  [key=1, style=dashed, color=green, label=scalars];
m0_3 -> m0_28  [key=1, style=dashed, color=green, label=scalars];
m0_3 -> m0_8  [key=1, style=dashed, color=green, label=scalars];
m0_1 -> m0_3  [key=1, style=dashed, color=green, label=tokenList];
m0_1 -> m0_4  [key=1, style=dashed, color=green, label=tokenList];
m0_1 -> m0_5  [key=1, style=dashed, color=green, label=tokenList];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_10  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_5  [key=1, style=dashed, color=green, label=switches];
m0_2 -> m0_24  [key=1, style=dashed, color=green, label=switches];
m0_2 -> m0_11  [key=2, style=dotted];
m0_2 -> m0_10  [key=2, style=dotted];
m0_2 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=switches];
m0_4 -> m0_5  [key=0, style=solid, color=green];
m0_4 -> m0_13  [key=2, style=dotted, color=green];
m0_4 -> m0_10  [key=2, style=dotted, color=green];
m0_4 -> m0_32  [key=1, style=dashed, color=green, label=sequences];
m0_4 -> m0_8  [key=1, style=dashed, color=green, label=sequences];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_5 -> m0_14  [key=2, style=dotted, color=green];
m0_5 -> m0_15  [key=2, style=dotted, color=green];
m0_5 -> m0_23  [key=1, style=dashed, color=green, label="lambda expression"];
m0_5 -> m0_27  [key=1, style=dashed, color=green, label="lambda expression"];
m0_5 -> m0_31  [key=1, style=dashed, color=green, label="lambda expression"];
m0_5 -> m0_7  [key=1, style=dashed, color=green, label=nonOptions];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_17  [key=2, style=dotted];
m0_8 -> m0_18  [key=2, style=dotted];
m0_8 -> m0_19  [key=2, style=dotted];
m0_8 -> m0_20  [key=2, style=dotted];
m0_8 -> d5  [key=2, style=dotted];
m0_8 -> m0_22  [key=2, style=dotted];
m0_8 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_6 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=values];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_15  [key=2, style=dotted];
m0_6 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_15  [key=2, style=dotted];
m0_7 -> m0_16  [key=2, style=dotted];
m0_9 -> m0_0  [key=0, style=bold, color=blue];
m0_34 -> m0_35  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid, color=green];
m0_28 -> m0_30  [key=2, style=dotted, color=green];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_30  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid, color=green];
m0_27 -> m0_28  [key=0, style=solid, color=green];
m0_31 -> m0_32  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid, color=green];
m0_24 -> m0_26  [key=2, style=dotted, color=green];
m0_25 -> m0_23  [key=0, style=bold, color=blue];
m0_29 -> m0_27  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_33 -> m0_31  [key=0, style=bold, color=blue];
m0_40 -> m0_38  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_37  [key=2, style=dotted];
m0_36 -> m0_34  [key=0, style=bold, color=blue];
m0_41 -> m0_24  [key=1, style=dashed, color=green, label=switches];
m0_42 -> m0_28  [key=1, style=dashed, color=green, label=scalars];
m0_43 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label=sequences];
m1_15 -> m1_16  [key=0, style=solid, color=green];
m1_16 -> m1_17  [key=0, style=solid, color=green];
m1_17 -> m1_15  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid, color=green];
m1_7 -> m1_8  [key=0, style=solid, color=green];
m1_8 -> m1_6  [key=0, style=bold, color=blue];
m1_9 -> m1_10  [key=0, style=solid, color=green];
m1_10 -> m1_11  [key=0, style=solid, color=green];
m1_11 -> m1_9  [key=0, style=bold, color=blue];
m1_3 -> m1_4  [key=0, style=solid, color=green];
m1_4 -> m1_5  [key=0, style=solid, color=green];
m1_5 -> m1_3  [key=0, style=bold, color=blue];
m1_12 -> m1_1  [key=3, color=green, style=bold, label="method methodReturn bool op_Equality"];
m1_12 -> m1_13  [key=0, style=solid, color=green];
m1_13 -> m1_14  [key=0, style=solid, color=green];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
}
