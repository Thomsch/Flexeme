digraph  {
n61 [label="System.StringComparer", span=""];
n62 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
n63 [label="System.Collections.Generic.IEnumerable<string>", span=""];
n64 [label="System.StringComparer", span=""];
n65 [label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
n66 [label=string, span=""];
n67 [label="System.StringComparer", span=""];
n0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
n3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
n7 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
n8 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
n11 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
n12 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="var verbs = Verb.SelectFromTypes(types)", span="33-33"];
n13 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return arguments.Empty()\r\n                ? new NotParsed<object>(\r\n                    new NullInstance(),\r\n                    types,\r\n                    new[] { new NoVerbSelectedError() })\r\n                : nameComparer.Equals(''help'', arguments.First())\r\n                   ? new NotParsed<object>(\r\n                       new NullInstance(),\r\n                       types, new[] { CreateHelpVerbRequestedError(\r\n                                        verbs,\r\n                                        arguments.Skip(1).SingleOrDefault() ?? string.Empty,\r\n                                        nameComparer) })\r\n                   : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="35-47"];
n15 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
n14 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="26-26"];
n16 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="62-62"];
n17 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136"];
n18 [cluster="CommandLine.NullInstance.NullInstance()", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
n19 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="406-406"];
n20 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
n21 [cluster="System.StringComparer.Equals(string, string)", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
n22 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
n23 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
n24 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Entry CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="70-70"];
n25 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="50-50"];
n26 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(() => verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : new NotParsed<object>(\r\n                    new NullInstance(),\r\n                    verbs.Select(v => v.Item2),\r\n                    new[] { new BadVerbSelectedError(arguments.First()) });", span="57-67"];
n35 [cluster="lambda expression", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="57-57"];
n38 [cluster="lambda expression", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="59-59"];
n43 [cluster="lambda expression", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="59-59"];
n27 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="50-50"];
n28 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n29 [cluster="Unk.>", label="Entry Unk.>", span=""];
n30 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CommandLine.Infrastructure.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="34-34"];
n31 [cluster="NotParsed<object>.cstr", label="Entry NotParsed<object>.cstr", span=""];
n32 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n33 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="342-342"];
n34 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
n37 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
n45 [cluster="lambda expression", label="Entry lambda expression", span="66-66"];
n36 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
n39 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
n40 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n41 [cluster="Unk.AutoDefault", label="Entry Unk.AutoDefault", span=""];
n42 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
n44 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
n46 [cluster="lambda expression", label="v.Item2", span="66-66"];
n47 [cluster="lambda expression", label="Exit lambda expression", span="66-66"];
n48 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="return verb.Length > 0\r\n                      ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                             .ToMaybe()\r\n                             .Return(\r\n                                 v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                                 new HelpVerbRequestedError(null, null, false))\r\n                      : new HelpVerbRequestedError(null, null, false);", span="75-81"];
n55 [cluster="lambda expression", label="nameComparer.Equals(v.Item1.Name, verb)", span="76-76"];
n49 [cluster="CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", label="Exit CommandLine.Core.InstanceChooser.CreateHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="70-70"];
n50 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
n51 [cluster="Unk.ToMaybe", label="Entry Unk.ToMaybe", span=""];
n52 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="368-368"];
n53 [cluster="Unk.Return", label="Entry Unk.Return", span=""];
n54 [cluster="lambda expression", label="Entry lambda expression", span="76-76"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="79-79"];
n56 [cluster="lambda expression", label="Exit lambda expression", span="76-76"];
n58 [cluster="lambda expression", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="79-79"];
n59 [cluster="lambda expression", label="Exit lambda expression", span="79-79"];
n60 [cluster="HelpVerbRequestedError.cstr", label="Entry HelpVerbRequestedError.cstr", span=""];
m0_42 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", span="221-221"];
m0_45 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10) });", span="225-226"];
m0_44 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="223-223"];
m0_43 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="223-223"];
m0_46 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CommandLine.Parser, string[])", span="221-221"];
m0_47 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", span="251-251"];
m0_50 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11) });", span="255-256"];
m0_49 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="253-253"];
m0_48 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="253-253"];
m0_51 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(CommandLine.Parser, string[])", span="251-251"];
m0_62 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", span="347-347"];
m0_65 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14) });", span="351-352"];
m0_64 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="349-349"];
m0_63 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="349-349"];
m0_66 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(CommandLine.Parser, string[])", span="347-347"];
m0_6 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="InstanceChooserTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m0_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="InstanceChooserTests.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m0_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="InstanceChooserTests.cs", label="var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m0_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="InstanceChooserTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="18-19"];
m0_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="InstanceChooserTests.cs", label="var expected = Maybe.Just(''.'')", span="17-17"];
m0_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="InstanceChooserTests.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m0_27 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", span="139-139"];
m0_28 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", color=green, community=0, file="InstanceChooserTests.cs", label="parser == null", prediction=0, span="141-141"];
m0_29 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", color=green, community=0, file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", prediction=1, span="141-141"];
m0_30 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", color=green, community=0, file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7) });", prediction=2, span="143-143"];
m0_31 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7>(CommandLine.Parser, string[])", span="139-139"];
m0_37 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", span="192-192"];
m0_40 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9) });", span="196-197"];
m0_39 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="194-194"];
m0_38 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="194-194"];
m0_41 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CommandLine.Parser, string[])", span="192-192"];
m0_22 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", span="114-114"];
m0_23 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", color=green, community=0, file="InstanceChooserTests.cs", label="parser == null", prediction=3, span="116-116"];
m0_24 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", color=green, community=0, file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", prediction=4, span="116-116"];
m0_25 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", color=green, community=0, file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6) });", prediction=5, span="118-118"];
m0_26 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6>(CommandLine.Parser, string[])", span="114-114"];
m0_12 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", span="67-67"];
m0_15 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4) });", span="71-71"];
m0_14 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="69-69"];
m0_13 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="69-69"];
m0_16 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4>(CommandLine.Parser, string[])", span="67-67"];
m0_10 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3) });", span="49-49"];
m0_17 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", span="90-90"];
m0_20 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5) });", span="94-94"];
m0_19 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="92-92"];
m0_18 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="92-92"];
m0_21 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5>(CommandLine.Parser, string[])", span="90-90"];
m0_67 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", span="381-381"];
m0_70 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15) });", span="385-386"];
m0_69 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="383-383"];
m0_68 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="383-383"];
m0_71 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(CommandLine.Parser, string[])", span="381-381"];
m0_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="InstanceChooserTests.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_9 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="47-47"];
m0_8 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="47-47"];
m0_52 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", span="282-282"];
m0_55 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12) });", span="286-287"];
m0_54 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="284-284"];
m0_53 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="284-284"];
m0_56 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(CommandLine.Parser, string[])", span="282-282"];
m0_72 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", span="416-416"];
m0_75 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16) });", span="420-421"];
m0_74 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="418-418"];
m0_73 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="418-418"];
m0_76 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(CommandLine.Parser, string[])", span="416-416"];
m0_57 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", span="314-314"];
m0_60 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8),\r\n                typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13) });", span="318-319"];
m0_59 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="316-316"];
m0_58 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="316-316"];
m0_61 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(CommandLine.Parser, string[])", span="314-314"];
m0_7 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3>(CommandLine.Parser, string[])", span="45-45"];
m0_11 [cluster="Unk.ShouldBeEquivalentTo", file="InstanceChooserTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m0_32 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Entry CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", span="165-165"];
m0_35 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="return parser.ParseArguments(args, new[] { typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8) });", span="169-169"];
m0_34 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="throw new ArgumentNullException(''parser'');", span="167-167"];
m0_33 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="parser == null", span="167-167"];
m0_36 [cluster="CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", file="InstanceChooserTests.cs", label="Exit CommandLine.ParserExtensions.ParseArguments<T1, T2, T3, T4, T5, T6, T7, T8>(CommandLine.Parser, string[])", span="165-165"];
m2_7 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserResultExtensions.cs", label="Entry CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="38-38"];
m2_8 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserResultExtensions.cs", label="var notParsed = result as NotParsed<T>", span="40-40"];
m2_10 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserResultExtensions.cs", label="action(notParsed.Errors)", span="43-43"];
m2_11 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserResultExtensions.cs", label="return result;", span="45-45"];
m2_9 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserResultExtensions.cs", label="notParsed != null", span="41-41"];
m2_12 [cluster="CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", file="ParserResultExtensions.cs", label="Exit CommandLine.ParserResultExtensions.WithNotParsed<T>(CommandLine.ParserResult<T>, System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>)", span="38-38"];
m2_0 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="ParserResultExtensions.cs", label="Entry CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", span="20-20"];
m2_1 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="ParserResultExtensions.cs", label="var parsed = result as Parsed<T>", span="22-22"];
m2_3 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="ParserResultExtensions.cs", label="action(parsed.Value)", span="25-25"];
m2_4 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="ParserResultExtensions.cs", label="return result;", span="27-27"];
m2_2 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="ParserResultExtensions.cs", label="parsed != null", span="23-23"];
m2_5 [cluster="CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", file="ParserResultExtensions.cs", label="Exit CommandLine.ParserResultExtensions.WithParsed<T>(CommandLine.ParserResult<T>, System.Action<T>)", span="20-20"];
m2_6 [cluster="System.Action<T>.Invoke(T)", file="ParserResultExtensions.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m3_43 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ParserResultExtensionsTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m3_4 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="65-65"];
m3_5 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="65-65"];
m3_44 [cluster="System.Type.GetInterfaces()", file="ParserResultExtensionsTests.cs", label="Entry System.Type.GetInterfaces()", span="0-0"];
m3_45 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="71-71"];
m3_46 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", color=green, community=0, file="ParserResultExtensionsTests.cs", label="return type == typeof(bool)\r\n                       ? TargetType.Switch\r\n                       : type == typeof(string)\r\n                             ? TargetType.Scalar\r\n                             : type.IsArray || typeof(IEnumerable).IsAssignableFrom(type)\r\n                                   ? TargetType.Sequence\r\n                                   : TargetType.Scalar;", prediction=6, span="73-79"];
m3_47 [cluster="CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.Core.ReflectionExtensions.ToTargetType(System.Type)", span="71-71"];
m3_40 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="66-66"];
m3_41 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", color=green, community=0, file="ParserResultExtensionsTests.cs", label="return type == null ? Enumerable.Empty<Type>() : type.GetInterfaces();", prediction=7, span="68-68"];
m3_42 [cluster="CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.Core.ReflectionExtensions.SafeGetInterfaces(System.Type)", span="66-66"];
m3_0 [cluster="CommandLine.CommandLineParserException.CommandLineParserException()", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException()", span="45-45"];
m3_1 [cluster="CommandLine.CommandLineParserException.CommandLineParserException()", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException()", span="45-45"];
m3_39 [cluster="System.Type.SafeGetInterfaces()", file="ParserResultExtensionsTests.cs", label="Entry System.Type.SafeGetInterfaces()", span="66-66"];
m3_30 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="49-49"];
m3_35 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", color=green, community=0, file="ParserResultExtensionsTests.cs", label="yield return @interface;", prediction=8, span="58-58"];
m3_34 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ParserResultExtensionsTests.cs", label="type.SafeGetInterfaces()", span="56-56"];
m3_37 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", color=green, community=0, file="ParserResultExtensionsTests.cs", label="yield return @interface;", prediction=9, span="62-62"];
m3_36 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", color=green, community=0, file="ParserResultExtensionsTests.cs", label="FlattenHierarchy(type.BaseType)", prediction=10, span="60-60"];
m3_31 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ParserResultExtensionsTests.cs", label="type == null", span="51-51"];
m3_32 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ParserResultExtensionsTests.cs", label="yield break;", span="53-53"];
m3_33 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ParserResultExtensionsTests.cs", label="yield return type;", span="55-55"];
m3_38 [cluster="CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.Core.ReflectionExtensions.FlattenHierarchy(System.Type)", span="49-49"];
m3_48 [cluster="System.Type.IsAssignableFrom(System.Type)", file="ParserResultExtensionsTests.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m3_6 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="76-76"];
m3_7 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="76-76"];
m3_2 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", file="ParserResultExtensionsTests.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string)", span="54-54"];
m3_3 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", file="ParserResultExtensionsTests.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string)", span="54-54"];
n63 -> n35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n63 -> n38  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n63 -> n43  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n64 -> n35  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n64 -> n38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n64 -> n43  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n65 -> n38  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
n66 -> n55  [color=darkseagreen4, key=1, label=string, style=dashed];
n67 -> n55  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
n3 -> n13  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
n24 -> n55  [color=darkseagreen4, key=1, label=string, style=dashed];
n25 -> n35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n25 -> n38  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
n25 -> n43  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
n26 -> n34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n48 -> n54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n48 -> n57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_45  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_47 -> m0_50  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_62 -> m0_65  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_27 -> m0_30  [color=green, key=1, label="CommandLine.Parser", style=dashed];
m0_37 -> m0_40  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_22 -> m0_25  [color=green, key=1, label="CommandLine.Parser", style=dashed];
m0_12 -> m0_15  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_17 -> m0_20  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_67 -> m0_70  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_52 -> m0_55  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_72 -> m0_75  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_57 -> m0_60  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_7 -> m0_10  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m0_32 -> m0_35  [color=darkseagreen4, key=1, label="CommandLine.Parser", style=dashed];
m2_7 -> m2_10  [color=darkseagreen4, key=1, label="System.Action<System.Collections.Generic.IEnumerable<CommandLine.Error>>", style=dashed];
m2_7 -> m2_11  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m2_8 -> m2_10  [color=darkseagreen4, key=1, label=notParsed, style=dashed];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label="System.Action<T>", style=dashed];
m2_0 -> m2_4  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m2_1 -> m2_3  [color=darkseagreen4, key=1, label=parsed, style=dashed];
m3_30 -> m3_36  [color=green, key=1, label="System.Type", style=dashed];
m3_30 -> m3_34  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
}
