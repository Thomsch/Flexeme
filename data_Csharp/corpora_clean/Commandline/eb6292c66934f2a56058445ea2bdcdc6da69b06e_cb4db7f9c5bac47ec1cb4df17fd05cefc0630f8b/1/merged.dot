digraph  {
m0_8 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="HelpTextTests.cs"];
m0_12 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="HelpTextTests.cs"];
m0_13 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="HelpTextTests.cs"];
m0_6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="HelpTextTests.cs"];
m0_7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="HelpTextTests.cs"];
m0_11 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="HelpTextTests.cs"];
m0_15 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="HelpTextTests.cs"];
m0_27 [label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="HelpTextTests.cs"];
m0_0 [label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m0_1 [label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m0_2 [label="var specProps = new[]\r\n                {\r\n                    SpecificationProperty.Create(\r\n                        new OptionSpecification(''x'', string.Empty, false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', Maybe.Nothing<object>(), typeof(bool), string.Empty, string.Empty, new List<string>()), \r\n                        typeof(FakeOptions).GetProperties().Single(p => p.Name.Equals(''BoolValue'', StringComparison.Ordinal)),\r\n                        Maybe.Nothing<object>())\r\n                }", span="23-29", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m0_3 [label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=red, community=0, file="HelpTextTests.cs"];
m0_4 [label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="39-42", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", color=red, community=0, file="HelpTextTests.cs"];
m0_5 [label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16", cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="HelpTextTests.cs"];
m0_28 [label="Entry lambda expression", span="40-42", cluster="lambda expression", file="HelpTextTests.cs"];
m0_16 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="HelpTextTests.cs"];
m0_20 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="HelpTextTests.cs"];
m0_24 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="HelpTextTests.cs"];
m0_17 [label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27", cluster="lambda expression", file="HelpTextTests.cs"];
m0_18 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="HelpTextTests.cs"];
m0_21 [label="pt.Specification.IsOption()", span="33-33", cluster="lambda expression", file="HelpTextTests.cs"];
m0_22 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="HelpTextTests.cs"];
m0_25 [label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35", cluster="lambda expression", file="HelpTextTests.cs"];
m0_26 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="HelpTextTests.cs"];
m0_29 [label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="40-42", cluster="lambda expression", color=red, community=0, file="HelpTextTests.cs"];
m0_30 [label="Exit lambda expression", span="40-42", cluster="lambda expression", file="HelpTextTests.cs"];
m0_31 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="HelpTextTests.cs"];
m0_19 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="HelpTextTests.cs"];
m0_23 [label="Entry CommandLine.Core.Specification.IsOption()", span="10-10", cluster="CommandLine.Core.Specification.IsOption()", file="HelpTextTests.cs"];
m0_14 [label="Entry Unk.MapValues", span="", cluster="Unk.MapValues", file="HelpTextTests.cs"];
m0_10 [label="Entry System.Type.GetProperties()", span="0-0", cluster="System.Type.GetProperties()", file="HelpTextTests.cs"];
m0_9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="HelpTextTests.cs"];
m1_0 [label="Entry CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string)", span="18-18", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string)", file="InstanceBuilder.cs"];
m1_1 [label="Exit CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string)", span="18-18", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string)", file="InstanceBuilder.cs"];
m1_2 [label="Entry CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string)", span="29-29", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string)", file="InstanceBuilder.cs"];
m1_3 [label="Exit CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string)", span="29-29", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string)", file="InstanceBuilder.cs"];
m1_8 [label="Entry CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string, string, string)", span="68-68", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string, string, string)", file="InstanceBuilder.cs"];
m1_9 [label="Exit CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string, string, string)", span="68-68", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string, string, string)", file="InstanceBuilder.cs"];
m1_6 [label="Entry CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string, string)", span="54-54", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string, string)", file="InstanceBuilder.cs"];
m1_7 [label="Exit CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string, string)", span="54-54", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string, string)", file="InstanceBuilder.cs"];
m1_4 [label="Entry CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string)", span="41-41", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string)", file="InstanceBuilder.cs"];
m1_5 [label="Exit CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string)", span="41-41", cluster="CommandLine.Text.AssemblyLicenseAttribute.AssemblyLicenseAttribute(string, string, string)", file="InstanceBuilder.cs"];
m2_27 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="InstanceChooser.cs"];
m2_28 [label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="32-32", cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="InstanceChooser.cs"];
m2_0 [label="Entry CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="35-35", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="InstanceChooser.cs"];
m2_1 [label="this.tag = tag", span="38-38", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="InstanceChooser.cs"];
m2_2 [label="this.required = required", span="39-39", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="InstanceChooser.cs"];
m2_3 [label="this.min = min", span="40-40", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="InstanceChooser.cs"];
m2_4 [label="this.max = max", span="41-41", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="InstanceChooser.cs"];
m2_5 [label="this.defaultValue = defaultValue", span="42-42", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="InstanceChooser.cs"];
m2_6 [label="this.conversionType = conversionType", span="43-43", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="InstanceChooser.cs"];
m2_7 [label="this.targetType = targetType", span="44-44", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="InstanceChooser.cs"];
m2_8 [label="Exit CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="35-35", cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="InstanceChooser.cs"];
m2_24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="InstanceChooser.cs"];
m2_23 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="InstanceChooser.cs"];
m2_31 [label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18", cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="InstanceChooser.cs"];
m2_26 [label="Entry System.Enum.GetNames(System.Type)", span="0-0", cluster="System.Enum.GetNames(System.Type)", file="InstanceChooser.cs"];
m2_29 [label="Entry string.ToLowerInvariant()", span="0-0", cluster="string.ToLowerInvariant()", file="InstanceChooser.cs"];
m2_9 [label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_10 [label="var attrs = property.GetCustomAttributes(true)", span="84-84", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_13 [label="var spec = OptionSpecification.FromAttribute(oa.Single(), property.PropertyType,\r\n                    property.PropertyType.IsEnum\r\n                        ? Enum.GetNames(property.PropertyType)\r\n                        : Enumerable.Empty<string>())", span="88-91", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_15 [label="return spec.WithLongName(property.Name.ToLowerInvariant());", span="94-94", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_19 [label="return ValueSpecification.FromAttribute(va.Single(), property.PropertyType);", span="102-102", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_11 [label="var oa = attrs.OfType<OptionAttribute>()", span="85-85", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_17 [label="var va = attrs.OfType<ValueAttribute>()", span="99-99", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_12 [label="oa.Count() == 1", span="86-86", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_14 [label="spec.ShortName.Length == 0 && spec.LongName.Length == 0", span="92-92", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_16 [label="return spec;", span="96-96", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_18 [label="va.Count() == 1", span="100-100", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_20 [label="throw new InvalidOperationException();", span="105-105", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_21 [label="Exit CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82", cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="InstanceChooser.cs"];
m2_22 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="InstanceChooser.cs"];
m2_25 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="InstanceChooser.cs"];
m2_30 [label="Entry CommandLine.Core.OptionSpecification.WithLongName(string)", span="20-20", cluster="CommandLine.Core.OptionSpecification.WithLongName(string)", file="InstanceChooser.cs"];
m2_32 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="InstanceChooser.cs"];
m2_33 [label="CommandLine.Core.Specification", span="", file="InstanceChooser.cs"];
m3_11 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="Tokenizer.cs"];
m3_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="Tokenizer.cs"];
m3_13 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="Tokenizer.cs"];
m3_14 [label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Tokenizer.cs"];
m3_15 [label="var expected = new [] { Token.Name(''x'') }", span="30-30", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", color=green, community=0, file="Tokenizer.cs"];
m3_16 [label="var result = Switch.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Tokenizer.cs"];
m3_17 [label="expected.ShouldAllBeEquivalentTo(result)", span="43-43", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Tokenizer.cs"];
m3_18 [label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", span="28-28", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values()", file="Tokenizer.cs"];
m3_12 [label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", span="29-29", cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TargetType, CommandLine.Infrastructure.Maybe<int>)", file="Tokenizer.cs"];
m3_6 [label="t.IsName() && info.Tag == TypeDescriptorKind.Boolean", span="16-16", cluster="lambda expression", file="Tokenizer.cs"];
m3_7 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="Tokenizer.cs"];
m3_5 [label="Entry CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Switch.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="Tokenizer.cs"];
m3_21 [label="Entry lambda expression", span="38-41", cluster="lambda expression", file="Tokenizer.cs"];
m3_23 [label="Exit lambda expression", span="38-41", cluster="lambda expression", file="Tokenizer.cs"];
m3_22 [label="new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41", cluster="lambda expression", file="Tokenizer.cs"];
m3_8 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()", file="Tokenizer.cs"];
m3_9 [label=t, span="", cluster="lambda expression", file="Tokenizer.cs"];
m3_19 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)", file="Tokenizer.cs"];
m3_0 [label="Entry CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Tokenizer.cs"];
m3_1 [label="var expected = new Token[] { }", span="15-15", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Tokenizer.cs"];
m3_2 [label="var result = Switch.Partition(\r\n                new Token[] { },\r\n                name =>\r\n                    new[] { ''x'', ''switch'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TargetType.Boolean, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="17-22", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Tokenizer.cs"];
m3_4 [label="Exit CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", span="13-13", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Tokenizer.cs"];
m3_20 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)", file="Tokenizer.cs"];
m3_3 [label="expected.ShouldAllBeEquivalentTo(result)", span="24-24", cluster="CommandLine.Tests.Unit.Core.SwitchTests.Partition_switch_values_from_empty_token_sequence()", file="Tokenizer.cs"];
m4_47 [label="Entry CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", span="18-18", cluster="CommandLine.Core.SpecificationProperty.WithValue(CommandLine.Infrastructure.Maybe<object>)", file="TokenPartitioner.cs"];
m4_36 [label="Entry System.Type.IsScalar()", span="33-33", cluster="System.Type.IsScalar()", file="TokenPartitioner.cs"];
m4_28 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="81-81", cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="TokenPartitioner.cs"];
m4_6 [label="Entry Unk.>", span="", cluster="Unk.>", file="TokenPartitioner.cs"];
m4_7 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="TokenPartitioner.cs"];
m4_0 [label="Entry CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="11-11", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_1 [label="var propAndErrors = MapValuesImpl(specProps, values, converter)", span="16-16", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", color=green, community=0, file="TokenPartitioner.cs"];
m4_2 [label="return StatePair.Create(\r\n                propAndErrors.Select(pe => pe.Item1),\r\n                propAndErrors.Select(pe => pe.Item2)\r\n                    .OfType<Just<Error>>().Select(e => e.Value)\r\n                );", span="18-22", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", color=green, community=0, file="TokenPartitioner.cs"];
m4_3 [label="Exit CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="11-11", cluster="CommandLine.Core.ValueMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_35 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="TokenPartitioner.cs"];
m4_52 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="TokenPartitioner.cs"];
m4_41 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_8 [label="Entry lambda expression", span="19-19", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_11 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_14 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_9 [label="pe.Item1", span="19-19", cluster="lambda expression", color=green, community=0, file="TokenPartitioner.cs"];
m4_10 [label="Exit lambda expression", span="19-19", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_13 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_12 [label="pe.Item2", span="20-20", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_16 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_15 [label="e.Value", span="21-21", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_44 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_45 [label="Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>())", span="46-46", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_46 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_42 [label=n, span="35-35", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_43 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="TokenPartitioner.cs"];
m4_29 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TokenPartitioner.cs"];
m4_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TokenPartitioner.cs"];
m4_33 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="TokenPartitioner.cs"];
m4_37 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="TokenPartitioner.cs"];
m4_51 [label="Entry CommandLine.Core.Specification.IsMinNotSpecified()", span="70-70", cluster="CommandLine.Core.Specification.IsMinNotSpecified()", file="TokenPartitioner.cs"];
m4_34 [label="Entry CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="56-56", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="TokenPartitioner.cs"];
m4_49 [label="return !specification.IsMinNotSpecified()\r\n                ? Maybe.Just<Error>(new SequenceOutOfRangeError(NameInfo.EmptyName))\r\n                : Maybe.Nothing<Error>();", span="58-60", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="TokenPartitioner.cs"];
m4_50 [label="Exit CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", span="56-56", cluster="CommandLine.Core.ValueMapper.MakeErrorInCaseOfMinConstraint(CommandLine.Core.Specification)", file="TokenPartitioner.cs"];
m4_39 [label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71", cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="TokenPartitioner.cs"];
m4_5 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="TokenPartitioner.cs"];
m4_38 [label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305", cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="TokenPartitioner.cs"];
m4_48 [label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="66-66", cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenPartitioner.cs"];
m4_30 [label="Entry CommandLine.Core.Specification.GetMaxValueCount()", span="51-51", cluster="CommandLine.Core.Specification.GetMaxValueCount()", file="TokenPartitioner.cs"];
m4_31 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="TokenPartitioner.cs"];
m4_4 [label="Entry CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_25 [label="MapValuesImpl(specProps.Skip(1), values.Skip(taken.Count()), converter)", span="50-50", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_17 [label="specProps.Empty()", span="30-30", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_18 [label="yield break;", span="32-32", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_22 [label="yield return\r\n                    Tuple.Create(pt, MakeErrorInCaseOfMinConstraint(pt.Specification));", span="38-39", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_23 [label="yield break;", span="40-40", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_24 [label="yield return\r\n                converter(taken, pt.Property.PropertyType, pt.Specification.ConversionType.IsScalar())\r\n                    .Return(\r\n                        converted => Tuple.Create(pt.WithValue(Maybe.Just(converted)), Maybe.Nothing<Error>()),\r\n                        Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                            pt, Maybe.Just<Error>(new BadFormatConversionError(NameInfo.EmptyName))));", span="43-48", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_26 [label="yield return value;", span="52-52", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_19 [label="var pt = specProps.First()", span="34-34", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_20 [label="var taken = values.Take(pt.Specification.GetMaxValueCount().Return(n => n, values.Count()))", span="35-35", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_21 [label="taken.Empty()", span="36-36", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_27 [label="Exit CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", span="25-25", cluster="CommandLine.Core.ValueMapper.MapValuesImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CommandLine.Infrastructure.Maybe<object>>)", file="TokenPartitioner.cs"];
m4_32 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="103-103", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="TokenPartitioner.cs"];
m4_53 [label=pt, span="", file="TokenPartitioner.cs"];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=red, label=tokenPartitions];
m0_2 -> m0_3  [key=0, style=solid, color=red];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_9  [key=2, style=dotted];
m0_2 -> m0_10  [key=2, style=dotted];
m0_2 -> m0_11  [key=2, style=dotted];
m0_2 -> m0_12  [key=2, style=dotted];
m0_2 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_3 -> m0_4  [key=0, style=solid, color=red];
m0_3 -> m0_13  [key=2, style=dotted, color=red];
m0_3 -> m0_14  [key=2, style=dotted, color=red];
m0_3 -> m0_20  [key=1, style=dashed, color=red, label="lambda expression"];
m0_3 -> m0_24  [key=1, style=dashed, color=red, label="lambda expression"];
m0_4 -> m0_5  [key=0, style=solid, color=red];
m0_4 -> m0_11  [key=2, style=dotted, color=red];
m0_4 -> m0_15  [key=2, style=dotted, color=red];
m0_4 -> m0_28  [key=1, style=dashed, color=red, label="lambda expression"];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid, color=red];
m0_16 -> m0_17  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=2, style=dotted];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=2, style=dotted];
m0_26 -> m0_24  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid, color=red];
m0_29 -> m0_23  [key=2, style=dotted, color=red];
m0_29 -> m0_31  [key=2, style=dotted, color=red];
m0_30 -> m0_28  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_2  [key=0, style=bold, color=blue];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_8  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_6  [key=0, style=bold, color=blue];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_4  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<int>"];
m2_0 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<int>"];
m2_0 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Infrastructure.Maybe<object>"];
m2_0 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m2_0 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.TargetType"];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_8  [key=0, style=solid];
m2_8 -> m2_0  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m2_9 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m2_9 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_22  [key=2, style=dotted];
m2_10 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label=attrs];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_25  [key=2, style=dotted];
m2_13 -> m2_26  [key=2, style=dotted];
m2_13 -> m2_27  [key=2, style=dotted];
m2_13 -> m2_28  [key=2, style=dotted];
m2_13 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label=spec];
m2_13 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label=spec];
m2_15 -> m2_21  [key=0, style=solid];
m2_15 -> m2_29  [key=2, style=dotted];
m2_15 -> m2_30  [key=2, style=dotted];
m2_19 -> m2_21  [key=0, style=solid];
m2_19 -> m2_25  [key=2, style=dotted];
m2_19 -> m2_31  [key=2, style=dotted];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_23  [key=2, style=dotted];
m2_11 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=oa];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_23  [key=2, style=dotted];
m2_17 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label=va];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_17  [key=0, style=solid];
m2_12 -> m2_24  [key=2, style=dotted];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_16  [key=0, style=solid];
m2_16 -> m2_21  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_20  [key=0, style=solid];
m2_18 -> m2_24  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_20 -> m2_32  [key=2, style=dotted];
m2_21 -> m2_9  [key=0, style=bold, color=blue];
m2_33 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m2_33 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Specification"];
m3_14 -> m3_15  [key=0, style=solid, color=green];
m3_15 -> m3_16  [key=0, style=solid, color=green];
m3_15 -> m3_19  [key=2, style=dotted, color=green];
m3_15 -> m3_17  [key=1, style=dashed, color=green, label=expected];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_19  [key=2, style=dotted];
m3_16 -> m3_20  [key=2, style=dotted];
m3_16 -> m3_5  [key=2, style=dotted];
m3_16 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_6  [key=2, style=dotted];
m3_18 -> m3_14  [key=0, style=bold, color=blue];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_8  [key=2, style=dotted];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_5  [key=0, style=bold, color=blue];
m3_5 -> m3_6  [key=0, style=solid];
m3_21 -> m3_22  [key=0, style=solid];
m3_23 -> m3_21  [key=0, style=bold, color=blue];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_10  [key=2, style=dotted];
m3_22 -> m3_11  [key=2, style=dotted];
m3_22 -> m3_12  [key=2, style=dotted];
m3_22 -> m3_13  [key=2, style=dotted];
m3_8 -> m3_10  [key=2, style=dotted];
m3_8 -> m3_11  [key=2, style=dotted];
m3_8 -> m3_12  [key=2, style=dotted];
m3_8 -> m3_13  [key=2, style=dotted];
m3_8 -> m3_9  [key=0, style=solid];
m3_9 -> m3_7  [key=0, style=bold, color=blue];
m3_9 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=2, style=dotted];
m3_1 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_1 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_1 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_2 -> m3_5  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_4 -> m3_0  [key=0, style=bold, color=blue];
m3_3 -> m3_6  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_1 -> m4_2  [key=0, style=solid, color=green];
m4_1 -> m4_4  [key=2, style=dotted, color=green];
m4_2 -> m4_3  [key=0, style=solid, color=green];
m4_2 -> m4_5  [key=2, style=dotted, color=green];
m4_2 -> m4_6  [key=2, style=dotted, color=green];
m4_2 -> m4_7  [key=2, style=dotted, color=green];
m4_2 -> m4_8  [key=1, style=dashed, color=green, label="lambda expression"];
m4_2 -> m4_11  [key=1, style=dashed, color=green, label="lambda expression"];
m4_2 -> m4_14  [key=1, style=dashed, color=green, label="lambda expression"];
m4_3 -> m4_0  [key=0, style=bold, color=blue];
m4_41 -> m4_42  [key=0, style=solid];
m4_8 -> m4_9  [key=0, style=solid, color=green];
m4_11 -> m4_12  [key=0, style=solid];
m4_14 -> m4_15  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid, color=green];
m4_10 -> m4_8  [key=0, style=bold, color=blue];
m4_13 -> m4_11  [key=0, style=bold, color=blue];
m4_12 -> m4_13  [key=0, style=solid];
m4_16 -> m4_14  [key=0, style=bold, color=blue];
m4_15 -> m4_16  [key=0, style=solid];
m4_44 -> m4_45  [key=0, style=solid];
m4_45 -> m4_35  [key=2, style=dotted];
m4_45 -> m4_39  [key=2, style=dotted];
m4_45 -> m4_46  [key=0, style=solid];
m4_45 -> m4_47  [key=2, style=dotted];
m4_45 -> m4_48  [key=2, style=dotted];
m4_46 -> m4_44  [key=0, style=bold, color=blue];
m4_42 -> m4_43  [key=0, style=solid];
m4_43 -> m4_41  [key=0, style=bold, color=blue];
m4_34 -> m4_49  [key=0, style=solid];
m4_49 -> m4_39  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_51  [key=2, style=dotted];
m4_49 -> m4_52  [key=2, style=dotted];
m4_49 -> m4_48  [key=2, style=dotted];
m4_50 -> m4_34  [key=0, style=bold, color=blue];
m4_4 -> m4_17  [key=0, style=solid];
m4_4 -> m4_18  [key=0, style=bold, color=crimson];
m4_4 -> m4_22  [key=0, style=bold, color=crimson];
m4_4 -> m4_23  [key=0, style=bold, color=crimson];
m4_4 -> m4_24  [key=0, style=bold, color=crimson];
m4_4 -> m4_26  [key=0, style=bold, color=crimson];
m4_4 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m4_4 -> m4_20  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m4_4 -> m4_25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>"];
m4_25 -> m4_4  [key=2, style=dotted];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_27  [key=0, style=solid];
m4_25 -> m4_40  [key=2, style=dotted];
m4_25 -> m4_31  [key=2, style=dotted];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_19  [key=0, style=solid];
m4_17 -> m4_28  [key=2, style=dotted];
m4_18 -> m4_19  [key=0, style=solid];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_34  [key=2, style=dotted];
m4_22 -> m4_35  [key=2, style=dotted];
m4_23 -> m4_24  [key=0, style=solid];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_36  [key=2, style=dotted];
m4_24 -> m4_37  [key=2, style=dotted];
m4_24 -> m4_38  [key=2, style=dotted];
m4_24 -> m4_39  [key=2, style=dotted];
m4_24 -> m4_35  [key=2, style=dotted];
m4_24 -> m4_32  [key=2, style=dotted];
m4_24 -> m4_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_26 -> m4_25  [key=0, style=solid];
m4_19 -> m4_22  [key=1, style=dashed, color=darkseagreen4, label=pt];
m4_19 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=pt];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_29  [key=2, style=dotted];
m4_19 -> m4_45  [key=1, style=dashed, color=darkseagreen4, label=pt];
m4_20 -> m4_25  [key=1, style=dashed, color=darkseagreen4, label=taken];
m4_20 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=taken];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_30  [key=2, style=dotted];
m4_20 -> m4_31  [key=2, style=dotted];
m4_20 -> m4_32  [key=2, style=dotted];
m4_20 -> m4_33  [key=2, style=dotted];
m4_20 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_24  [key=0, style=solid];
m4_21 -> m4_28  [key=2, style=dotted];
m4_27 -> m4_4  [key=0, style=bold, color=blue];
m4_53 -> m4_45  [key=1, style=dashed, color=darkseagreen4, label=pt];
}
